
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 69 9a 00 00       	call   c0009a89 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 99 11 02 00       	call   c00211be <_init>
c0000025:	c3                   	ret    
c0000026:	bb 42 1e 02 c0       	mov    ebx,0xc0021e42
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 50 1e 02 c0    	cmp    ebx,0xc0021e50
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 b8 5e 02 c0       	mov    eax,0xc0025eb8
c0000049:	3d b8 5e 02 c0       	cmp    eax,0xc0025eb8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 b8 5e 02 c0       	push   0xc0025eb8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 b8 5e 02 c0       	mov    eax,0xc0025eb8
c0000075:	2d b8 5e 02 c0       	sub    eax,0xc0025eb8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 b8 5e 02 c0       	push   0xc0025eb8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 40 60 02 c0 00 	cmp    BYTE PTR ds:0xc0026040,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 58 1e 02 c0       	mov    ebx,0xc0021e58
c00000bb:	81 eb 54 1e 02 c0    	sub    ebx,0xc0021e54
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 54 1e 02 c0       	mov    esi,0xc0021e54
c00000ca:	a1 44 60 02 c0       	mov    eax,ds:0xc0026044
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 44 60 02 c0       	mov    ds:0xc0026044,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 44 60 02 c0       	mov    eax,ds:0xc0026044
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 b8 5e 02 c0       	push   0xc0025eb8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 40 60 02 c0 01 	mov    BYTE PTR ds:0xc0026040,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 48 60 02 c0       	push   0xc0026048
c000012c:	68 b8 5e 02 c0       	push   0xc0025eb8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	0f 20 c0             	mov    eax,cr0
c00002c7:	0c 08                	or     al,0x8
c00002c9:	0f 22 c0             	mov    cr0,eax
c00002cc:	85 d2                	test   edx,edx
c00002ce:	75 11                	jne    c00002e1 <commonThreadSwitch.firstTime>
c00002d0:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002d3:	e8 48 75 01 00       	call   c0017820 <changeTSS>
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	5a                   	pop    edx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	9d                   	popf   
c00002e0:	c3                   	ret    

c00002e1 <commonThreadSwitch.firstTime>:
c00002e1:	fa                   	cli    
c00002e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002e5:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002ea:	60                   	pusha  
c00002eb:	e8 5c c5 00 00       	call   c000c84c <mapVASFirstTime>
c00002f0:	61                   	popa   
c00002f1:	89 c4                	mov    esp,eax
c00002f3:	56                   	push   esi
c00002f4:	52                   	push   edx
c00002f5:	e8 26 75 01 00       	call   c0017820 <changeTSS>
c00002fa:	5a                   	pop    edx
c00002fb:	5e                   	pop    esi
c00002fc:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000303:	5d                   	pop    ebp
c0000304:	5f                   	pop    edi
c0000305:	5e                   	pop    esi
c0000306:	59                   	pop    ecx
c0000307:	59                   	pop    ecx
c0000308:	5b                   	pop    ebx
c0000309:	58                   	pop    eax
c000030a:	81 c4 04 00 00 00    	add    esp,0x4
c0000310:	6a 02                	push   0x2
c0000312:	9d                   	popf   
c0000313:	52                   	push   edx
c0000314:	e8 ef 79 01 00       	call   c0017d08 <taskStartupFunction>
c0000319:	5a                   	pop    edx
c000031a:	50                   	push   eax
c000031b:	ff d2                	call   edx
c000031d:	e8 32 80 01 00       	call   c0018354 <taskReturned>
c0000322:	e9 fb ff ff ff       	jmp    c0000322 <commonThreadSwitch.firstTime+0x41>

c0000327 <asmQuickAcquireLock>:
c0000327:	55                   	push   ebp
c0000328:	89 e5                	mov    ebp,esp
c000032a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032d <asmQuickAcquireLock.retry>:
c000032d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000332:	72 02                	jb     c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000334:	fa                   	cli    
c0000335:	c3                   	ret    

c0000336 <asmQuickAcquireLock.spin_with_pause>:
c0000336:	f3 90                	pause  
c0000338:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000033e:	75 f6                	jne    c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000340:	e9 e8 ff ff ff       	jmp    c000032d <asmQuickAcquireLock.retry>

c0000345 <asmQuickReleaseLock>:
c0000345:	55                   	push   ebp
c0000346:	89 e5                	mov    ebp,esp
c0000348:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000034f:	5d                   	pop    ebp
c0000350:	c3                   	ret    

c0000351 <asmAcquireLock>:
c0000351:	55                   	push   ebp
c0000352:	89 e5                	mov    ebp,esp
c0000354:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000357 <asmAcquireLock.retry>:
c0000357:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000035c:	72 05                	jb     c0000363 <asmAcquireLock.spin_with_pause>
c000035e:	9c                   	pushf  
c000035f:	58                   	pop    eax
c0000360:	fa                   	cli    
c0000361:	5d                   	pop    ebp
c0000362:	c3                   	ret    

c0000363 <asmAcquireLock.spin_with_pause>:
c0000363:	f3 90                	pause  
c0000365:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000036b:	75 f6                	jne    c0000363 <asmAcquireLock.spin_with_pause>
c000036d:	e9 e5 ff ff ff       	jmp    c0000357 <asmAcquireLock.retry>

c0000372 <asmReleaseLock>:
c0000372:	55                   	push   ebp
c0000373:	89 e5                	mov    ebp,esp
c0000375:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000378:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000037b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000381:	52                   	push   edx
c0000382:	9d                   	popf   
c0000383:	5d                   	pop    ebp
c0000384:	c3                   	ret    

c0000385 <loadGDT>:
c0000385:	0f 01 15 90 64 02 c0 	lgdtd  ds:0xc0026490
c000038c:	66 b8 10 00          	mov    ax,0x10
c0000390:	66 8e d8             	mov    ds,ax
c0000393:	66 8e c0             	mov    es,ax
c0000396:	66 8e e0             	mov    fs,ax
c0000399:	66 8e e8             	mov    gs,ax
c000039c:	66 8e d0             	mov    ss,ax
c000039f:	e9 00 00 00 00       	jmp    c00003a4 <flush2>

c00003a4 <flush2>:
c00003a4:	c3                   	ret    

c00003a5 <isr0>:
c00003a5:	fa                   	cli    
c00003a6:	68 00 00 00 00       	push   0x0
c00003ab:	68 00 00 00 00       	push   0x0
c00003b0:	e9 44 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003b5 <isr1>:
c00003b5:	fa                   	cli    
c00003b6:	6a 00                	push   0x0
c00003b8:	6a 01                	push   0x1
c00003ba:	e9 3a 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003bf <isr2>:
c00003bf:	fa                   	cli    
c00003c0:	6a 00                	push   0x0
c00003c2:	6a 02                	push   0x2
c00003c4:	e9 30 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003c9 <isr3>:
c00003c9:	fa                   	cli    
c00003ca:	6a 00                	push   0x0
c00003cc:	6a 03                	push   0x3
c00003ce:	e9 26 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003d3 <isr4>:
c00003d3:	fa                   	cli    
c00003d4:	6a 00                	push   0x0
c00003d6:	6a 04                	push   0x4
c00003d8:	e9 1c 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003dd <isr5>:
c00003dd:	fa                   	cli    
c00003de:	6a 00                	push   0x0
c00003e0:	6a 05                	push   0x5
c00003e2:	e9 12 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003e7 <isr6>:
c00003e7:	fa                   	cli    
c00003e8:	6a 00                	push   0x0
c00003ea:	6a 06                	push   0x6
c00003ec:	e9 08 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003f1 <isr7>:
c00003f1:	fa                   	cli    
c00003f2:	6a 00                	push   0x0
c00003f4:	6a 07                	push   0x7
c00003f6:	e9 fe 00 00 00       	jmp    c00004f9 <int_common_stub>

c00003fb <isr8>:
c00003fb:	fa                   	cli    
c00003fc:	6a 08                	push   0x8
c00003fe:	e9 f6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000403 <isr9>:
c0000403:	fa                   	cli    
c0000404:	6a 00                	push   0x0
c0000406:	6a 09                	push   0x9
c0000408:	e9 ec 00 00 00       	jmp    c00004f9 <int_common_stub>

c000040d <isr10>:
c000040d:	fa                   	cli    
c000040e:	6a 0a                	push   0xa
c0000410:	e9 e4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000415 <isr11>:
c0000415:	fa                   	cli    
c0000416:	6a 0b                	push   0xb
c0000418:	e9 dc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000041d <isr12>:
c000041d:	fa                   	cli    
c000041e:	6a 0c                	push   0xc
c0000420:	e9 d4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000425 <isr13>:
c0000425:	fa                   	cli    
c0000426:	6a 0d                	push   0xd
c0000428:	e9 cc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000042d <isr14>:
c000042d:	fa                   	cli    
c000042e:	6a 0e                	push   0xe
c0000430:	e9 c4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000435 <isr15>:
c0000435:	fa                   	cli    
c0000436:	6a 00                	push   0x0
c0000438:	6a 0f                	push   0xf
c000043a:	e9 ba 00 00 00       	jmp    c00004f9 <int_common_stub>

c000043f <isr16>:
c000043f:	fa                   	cli    
c0000440:	6a 00                	push   0x0
c0000442:	6a 10                	push   0x10
c0000444:	e9 b0 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000449 <isr17>:
c0000449:	fa                   	cli    
c000044a:	6a 00                	push   0x0
c000044c:	6a 11                	push   0x11
c000044e:	e9 a6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000453 <isr18>:
c0000453:	fa                   	cli    
c0000454:	6a 00                	push   0x0
c0000456:	6a 12                	push   0x12
c0000458:	e9 9c 00 00 00       	jmp    c00004f9 <int_common_stub>

c000045d <irq3>:
c000045d:	fa                   	cli    
c000045e:	6a 00                	push   0x0
c0000460:	6a 23                	push   0x23
c0000462:	e9 92 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000467 <irq4>:
c0000467:	fa                   	cli    
c0000468:	6a 00                	push   0x0
c000046a:	6a 24                	push   0x24
c000046c:	e9 88 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000471 <irq5>:
c0000471:	fa                   	cli    
c0000472:	6a 00                	push   0x0
c0000474:	6a 25                	push   0x25
c0000476:	e9 7e 00 00 00       	jmp    c00004f9 <int_common_stub>

c000047b <irq6>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 26                	push   0x26
c0000480:	e9 74 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000485 <irq7>:
c0000485:	fa                   	cli    
c0000486:	6a 00                	push   0x0
c0000488:	6a 27                	push   0x27
c000048a:	e9 6a 00 00 00       	jmp    c00004f9 <int_common_stub>

c000048f <irq8>:
c000048f:	fa                   	cli    
c0000490:	6a 00                	push   0x0
c0000492:	6a 28                	push   0x28
c0000494:	e9 60 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000499 <irq9>:
c0000499:	fa                   	cli    
c000049a:	6a 00                	push   0x0
c000049c:	6a 29                	push   0x29
c000049e:	e9 56 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004a3 <irq10>:
c00004a3:	fa                   	cli    
c00004a4:	6a 00                	push   0x0
c00004a6:	6a 2a                	push   0x2a
c00004a8:	e9 4c 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004ad <irq11>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 2b                	push   0x2b
c00004b2:	e9 42 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004b7 <irq12>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 2c                	push   0x2c
c00004bc:	e9 38 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004c1 <irq13>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 2d                	push   0x2d
c00004c6:	e9 2e 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004cb <irq14>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 2e                	push   0x2e
c00004d0:	e9 24 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004d5 <irq15>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 2f                	push   0x2f
c00004da:	e9 1a 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004df <irq1>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 21                	push   0x21
c00004e4:	eb 13                	jmp    c00004f9 <int_common_stub>

c00004e6 <irq2>:
c00004e6:	fa                   	cli    
c00004e7:	6a 00                	push   0x0
c00004e9:	6a 22                	push   0x22
c00004eb:	eb 0c                	jmp    c00004f9 <int_common_stub>

c00004ed <isr96>:
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 60                	push   0x60
c00004f1:	fb                   	sti    
c00004f2:	eb 05                	jmp    c00004f9 <int_common_stub>

c00004f4 <irq0>:
c00004f4:	fa                   	cli    
c00004f5:	6a 00                	push   0x0
c00004f7:	6a 20                	push   0x20

c00004f9 <int_common_stub>:
c00004f9:	60                   	pusha  
c00004fa:	1e                   	push   ds
c00004fb:	06                   	push   es
c00004fc:	0f a0                	push   fs
c00004fe:	0f a8                	push   gs
c0000500:	66 b8 10 00          	mov    ax,0x10
c0000504:	66 8e d8             	mov    ds,ax
c0000507:	66 8e c0             	mov    es,ax
c000050a:	66 8e e0             	mov    fs,ax
c000050d:	66 8e e8             	mov    gs,ax
c0000510:	54                   	push   esp
c0000511:	fc                   	cld    
c0000512:	e8 ea e2 00 00       	call   c000e801 <int_handler>
c0000517:	81 c4 04 00 00 00    	add    esp,0x4
c000051d:	0f a9                	pop    gs
c000051f:	0f a1                	pop    fs
c0000521:	07                   	pop    es
c0000522:	1f                   	pop    ds
c0000523:	61                   	popa   
c0000524:	81 c4 08 00 00 00    	add    esp,0x8
c000052a:	cf                   	iret   

c000052b <irq16>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 30                	push   0x30
c0000530:	e9 c4 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000535 <irq17>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 31                	push   0x31
c000053a:	e9 ba ff ff ff       	jmp    c00004f9 <int_common_stub>

c000053f <irq18>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 32                	push   0x32
c0000544:	e9 b0 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000549 <irq19>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 33                	push   0x33
c000054e:	e9 a6 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000553 <irq20>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 34                	push   0x34
c0000558:	e9 9c ff ff ff       	jmp    c00004f9 <int_common_stub>

c000055d <irq21>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 35                	push   0x35
c0000562:	e9 92 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000567 <irq22>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 36                	push   0x36
c000056c:	e9 88 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000571 <irq23>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 37                	push   0x37
c0000576:	e9 7e ff ff ff       	jmp    c00004f9 <int_common_stub>

c000057b <memcpy>:
c000057b:	e9 7a 83 00 00       	jmp    c00088fa <__not_memcpy>

c0000580 <memcmp>:
c0000580:	56                   	push   esi
c0000581:	53                   	push   ebx
c0000582:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000586:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000058a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000058e:	85 f6                	test   esi,esi
c0000590:	74 1d                	je     c00005af <memcmp+0x2f>
c0000592:	8a 08                	mov    cl,BYTE PTR [eax]
c0000594:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000597:	38 cb                	cmp    bl,cl
c0000599:	75 19                	jne    c00005b4 <memcmp+0x34>
c000059b:	01 c6                	add    esi,eax
c000059d:	eb 0a                	jmp    c00005a9 <memcmp+0x29>
c000059f:	90                   	nop
c00005a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00005a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005a5:	38 d9                	cmp    cl,bl
c00005a7:	75 0b                	jne    c00005b4 <memcmp+0x34>
c00005a9:	40                   	inc    eax
c00005aa:	42                   	inc    edx
c00005ab:	39 f0                	cmp    eax,esi
c00005ad:	75 f1                	jne    c00005a0 <memcmp+0x20>
c00005af:	31 c0                	xor    eax,eax
c00005b1:	5b                   	pop    ebx
c00005b2:	5e                   	pop    esi
c00005b3:	c3                   	ret    
c00005b4:	0f b6 c1             	movzx  eax,cl
c00005b7:	29 d8                	sub    eax,ebx
c00005b9:	5b                   	pop    ebx
c00005ba:	5e                   	pop    esi
c00005bb:	c3                   	ret    

c00005bc <memmove>:
c00005bc:	55                   	push   ebp
c00005bd:	57                   	push   edi
c00005be:	56                   	push   esi
c00005bf:	53                   	push   ebx
c00005c0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005c4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005cc:	39 dd                	cmp    ebp,ebx
c00005ce:	0f 83 80 00 00 00    	jae    c0000654 <memmove+0x98>
c00005d4:	85 d2                	test   edx,edx
c00005d6:	74 74                	je     c000064c <memmove+0x90>
c00005d8:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005db:	8d 75 04             	lea    esi,[ebp+0x4]
c00005de:	39 cd                	cmp    ebp,ecx
c00005e0:	0f 93 c1             	setae  cl
c00005e3:	39 f3                	cmp    ebx,esi
c00005e5:	0f 93 c0             	setae  al
c00005e8:	89 c6                	mov    esi,eax
c00005ea:	09 ce                	or     esi,ecx
c00005ec:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005ef:	89 f0                	mov    eax,esi
c00005f1:	83 f9 0c             	cmp    ecx,0xc
c00005f4:	0f 97 c1             	seta   cl
c00005f7:	84 c8                	test   al,cl
c00005f9:	74 75                	je     c0000670 <memmove+0xb4>
c00005fb:	89 e9                	mov    ecx,ebp
c00005fd:	09 d9                	or     ecx,ebx
c00005ff:	83 e1 03             	and    ecx,0x3
c0000602:	75 6c                	jne    c0000670 <memmove+0xb4>
c0000604:	89 d7                	mov    edi,edx
c0000606:	89 d9                	mov    ecx,ebx
c0000608:	83 e7 fc             	and    edi,0xfffffffc
c000060b:	89 ee                	mov    esi,ebp
c000060d:	01 df                	add    edi,ebx
c000060f:	90                   	nop
c0000610:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000612:	83 c6 04             	add    esi,0x4
c0000615:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000618:	83 c1 04             	add    ecx,0x4
c000061b:	39 f9                	cmp    ecx,edi
c000061d:	75 f1                	jne    c0000610 <memmove+0x54>
c000061f:	89 d1                	mov    ecx,edx
c0000621:	89 d7                	mov    edi,edx
c0000623:	83 e1 fc             	and    ecx,0xfffffffc
c0000626:	29 cf                	sub    edi,ecx
c0000628:	01 cb                	add    ebx,ecx
c000062a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000062e:	39 ca                	cmp    edx,ecx
c0000630:	74 1a                	je     c000064c <memmove+0x90>
c0000632:	8a 03                	mov    al,BYTE PTR [ebx]
c0000634:	83 ff 01             	cmp    edi,0x1
c0000637:	88 06                	mov    BYTE PTR [esi],al
c0000639:	74 11                	je     c000064c <memmove+0x90>
c000063b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000063e:	83 ff 02             	cmp    edi,0x2
c0000641:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000644:	74 06                	je     c000064c <memmove+0x90>
c0000646:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000649:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000064c:	5b                   	pop    ebx
c000064d:	89 e8                	mov    eax,ebp
c000064f:	5e                   	pop    esi
c0000650:	5f                   	pop    edi
c0000651:	5d                   	pop    ebp
c0000652:	c3                   	ret    
c0000653:	90                   	nop
c0000654:	76 f6                	jbe    c000064c <memmove+0x90>
c0000656:	85 d2                	test   edx,edx
c0000658:	74 f2                	je     c000064c <memmove+0x90>
c000065a:	4b                   	dec    ebx
c000065b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000065e:	66 90                	xchg   ax,ax
c0000660:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000663:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000666:	4a                   	dec    edx
c0000667:	75 f7                	jne    c0000660 <memmove+0xa4>
c0000669:	5b                   	pop    ebx
c000066a:	89 e8                	mov    eax,ebp
c000066c:	5e                   	pop    esi
c000066d:	5f                   	pop    edi
c000066e:	5d                   	pop    ebp
c000066f:	c3                   	ret    
c0000670:	01 ea                	add    edx,ebp
c0000672:	89 e9                	mov    ecx,ebp
c0000674:	8a 03                	mov    al,BYTE PTR [ebx]
c0000676:	41                   	inc    ecx
c0000677:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000067a:	43                   	inc    ebx
c000067b:	39 d1                	cmp    ecx,edx
c000067d:	75 f5                	jne    c0000674 <memmove+0xb8>
c000067f:	eb cb                	jmp    c000064c <memmove+0x90>
c0000681:	8d 76 00             	lea    esi,[esi+0x0]

c0000684 <memset>:
c0000684:	57                   	push   edi
c0000685:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000689:	85 c9                	test   ecx,ecx
c000068b:	74 0b                	je     c0000698 <memset+0x14>
c000068d:	fc                   	cld    
c000068e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000692:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000696:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000069c:	5f                   	pop    edi
c000069d:	c3                   	ret    
c000069e:	66 90                	xchg   ax,ax

c00006a0 <strlen>:
c00006a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006a4:	31 c0                	xor    eax,eax
c00006a6:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006a9:	74 09                	je     c00006b4 <strlen+0x14>
c00006ab:	90                   	nop
c00006ac:	40                   	inc    eax
c00006ad:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b1:	75 f9                	jne    c00006ac <strlen+0xc>
c00006b3:	c3                   	ret    
c00006b4:	c3                   	ret    
c00006b5:	8d 76 00             	lea    esi,[esi+0x0]

c00006b8 <strpbrk>:
c00006b8:	57                   	push   edi
c00006b9:	56                   	push   esi
c00006ba:	53                   	push   ebx
c00006bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006c3:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006c5:	84 db                	test   bl,bl
c00006c7:	74 21                	je     c00006ea <strpbrk+0x32>
c00006c9:	8a 07                	mov    al,BYTE PTR [edi]
c00006cb:	84 c0                	test   al,al
c00006cd:	74 14                	je     c00006e3 <strpbrk+0x2b>
c00006cf:	38 d8                	cmp    al,bl
c00006d1:	74 19                	je     c00006ec <strpbrk+0x34>
c00006d3:	89 fa                	mov    edx,edi
c00006d5:	eb 05                	jmp    c00006dc <strpbrk+0x24>
c00006d7:	90                   	nop
c00006d8:	38 d9                	cmp    cl,bl
c00006da:	74 10                	je     c00006ec <strpbrk+0x34>
c00006dc:	42                   	inc    edx
c00006dd:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006df:	84 c9                	test   cl,cl
c00006e1:	75 f5                	jne    c00006d8 <strpbrk+0x20>
c00006e3:	46                   	inc    esi
c00006e4:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006e6:	84 db                	test   bl,bl
c00006e8:	75 e1                	jne    c00006cb <strpbrk+0x13>
c00006ea:	31 f6                	xor    esi,esi
c00006ec:	89 f0                	mov    eax,esi
c00006ee:	5b                   	pop    ebx
c00006ef:	5e                   	pop    esi
c00006f0:	5f                   	pop    edi
c00006f1:	c3                   	ret    
c00006f2:	66 90                	xchg   ax,ax

c00006f4 <strtok>:
c00006f4:	56                   	push   esi
c00006f5:	53                   	push   ebx
c00006f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006fe:	85 db                	test   ebx,ebx
c0000700:	75 07                	jne    c0000709 <strtok+0x15>
c0000702:	eb 2c                	jmp    c0000730 <strtok+0x3c>
c0000704:	43                   	inc    ebx
c0000705:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000709:	56                   	push   esi
c000070a:	53                   	push   ebx
c000070b:	e8 a8 ff ff ff       	call   c00006b8 <strpbrk>
c0000710:	5a                   	pop    edx
c0000711:	a3 60 60 02 c0       	mov    ds:0xc0026060,eax
c0000716:	59                   	pop    ecx
c0000717:	39 d8                	cmp    eax,ebx
c0000719:	74 e9                	je     c0000704 <strtok+0x10>
c000071b:	85 c0                	test   eax,eax
c000071d:	74 1b                	je     c000073a <strtok+0x46>
c000071f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000722:	8d 50 01             	lea    edx,[eax+0x1]
c0000725:	89 d8                	mov    eax,ebx
c0000727:	89 15 60 60 02 c0    	mov    DWORD PTR ds:0xc0026060,edx
c000072d:	5b                   	pop    ebx
c000072e:	5e                   	pop    esi
c000072f:	c3                   	ret    
c0000730:	8b 1d 60 60 02 c0    	mov    ebx,DWORD PTR ds:0xc0026060
c0000736:	85 db                	test   ebx,ebx
c0000738:	75 cf                	jne    c0000709 <strtok+0x15>
c000073a:	31 c0                	xor    eax,eax
c000073c:	5b                   	pop    ebx
c000073d:	5e                   	pop    esi
c000073e:	c3                   	ret    
c000073f:	90                   	nop

c0000740 <strcpy>:
c0000740:	53                   	push   ebx
c0000741:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000745:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000749:	89 c3                	mov    ebx,eax
c000074b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000074d:	84 d2                	test   dl,dl
c000074f:	74 0d                	je     c000075e <strcpy+0x1e>
c0000751:	8d 76 00             	lea    esi,[esi+0x0]
c0000754:	88 13                	mov    BYTE PTR [ebx],dl
c0000756:	41                   	inc    ecx
c0000757:	43                   	inc    ebx
c0000758:	8a 11                	mov    dl,BYTE PTR [ecx]
c000075a:	84 d2                	test   dl,dl
c000075c:	75 f6                	jne    c0000754 <strcpy+0x14>
c000075e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000761:	5b                   	pop    ebx
c0000762:	c3                   	ret    
c0000763:	90                   	nop

c0000764 <strncpy>:
c0000764:	55                   	push   ebp
c0000765:	57                   	push   edi
c0000766:	56                   	push   esi
c0000767:	53                   	push   ebx
c0000768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000076c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000770:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000774:	85 c0                	test   eax,eax
c0000776:	74 39                	je     c00007b1 <strncpy+0x4d>
c0000778:	8a 1e                	mov    bl,BYTE PTR [esi]
c000077a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000077d:	8d 55 01             	lea    edx,[ebp+0x1]
c0000780:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000783:	84 db                	test   bl,bl
c0000785:	74 31                	je     c00007b8 <strncpy+0x54>
c0000787:	85 c9                	test   ecx,ecx
c0000789:	74 26                	je     c00007b1 <strncpy+0x4d>
c000078b:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000078e:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000791:	8d 55 02             	lea    edx,[ebp+0x2]
c0000794:	8d 46 02             	lea    eax,[esi+0x2]
c0000797:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000079a:	84 db                	test   bl,bl
c000079c:	75 0f                	jne    c00007ad <strncpy+0x49>
c000079e:	eb 18                	jmp    c00007b8 <strncpy+0x54>
c00007a0:	40                   	inc    eax
c00007a1:	42                   	inc    edx
c00007a2:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00007a5:	49                   	dec    ecx
c00007a6:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007a9:	84 db                	test   bl,bl
c00007ab:	74 0b                	je     c00007b8 <strncpy+0x54>
c00007ad:	85 c9                	test   ecx,ecx
c00007af:	75 ef                	jne    c00007a0 <strncpy+0x3c>
c00007b1:	5b                   	pop    ebx
c00007b2:	89 e8                	mov    eax,ebp
c00007b4:	5e                   	pop    esi
c00007b5:	5f                   	pop    edi
c00007b6:	5d                   	pop    ebp
c00007b7:	c3                   	ret    
c00007b8:	85 c9                	test   ecx,ecx
c00007ba:	74 f5                	je     c00007b1 <strncpy+0x4d>
c00007bc:	fc                   	cld    
c00007bd:	31 c0                	xor    eax,eax
c00007bf:	89 d7                	mov    edi,edx
c00007c1:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007c3:	89 e8                	mov    eax,ebp
c00007c5:	5b                   	pop    ebx
c00007c6:	5e                   	pop    esi
c00007c7:	5f                   	pop    edi
c00007c8:	5d                   	pop    ebp
c00007c9:	c3                   	ret    
c00007ca:	66 90                	xchg   ax,ax

c00007cc <strcmp>:
c00007cc:	56                   	push   esi
c00007cd:	53                   	push   ebx
c00007ce:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007d6:	8a 16                	mov    dl,BYTE PTR [esi]
c00007d8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007db:	38 d1                	cmp    cl,dl
c00007dd:	75 1d                	jne    c00007fc <strcmp+0x30>
c00007df:	84 c9                	test   cl,cl
c00007e1:	74 21                	je     c0000804 <strcmp+0x38>
c00007e3:	b8 01 00 00 00       	mov    eax,0x1
c00007e8:	eb 07                	jmp    c00007f1 <strcmp+0x25>
c00007ea:	66 90                	xchg   ax,ax
c00007ec:	40                   	inc    eax
c00007ed:	84 d2                	test   dl,dl
c00007ef:	74 13                	je     c0000804 <strcmp+0x38>
c00007f1:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00007f4:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00007f8:	38 ca                	cmp    dl,cl
c00007fa:	74 f0                	je     c00007ec <strcmp+0x20>
c00007fc:	0f b6 c2             	movzx  eax,dl
c00007ff:	5b                   	pop    ebx
c0000800:	29 c8                	sub    eax,ecx
c0000802:	5e                   	pop    esi
c0000803:	c3                   	ret    
c0000804:	31 c0                	xor    eax,eax
c0000806:	5b                   	pop    ebx
c0000807:	5e                   	pop    esi
c0000808:	c3                   	ret    
c0000809:	8d 76 00             	lea    esi,[esi+0x0]

c000080c <strchr>:
c000080c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000810:	8a 10                	mov    dl,BYTE PTR [eax]
c0000812:	84 d2                	test   dl,dl
c0000814:	74 15                	je     c000082b <strchr+0x1f>
c0000816:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000081a:	38 ca                	cmp    dl,cl
c000081c:	75 06                	jne    c0000824 <strchr+0x18>
c000081e:	eb 0e                	jmp    c000082e <strchr+0x22>
c0000820:	38 ca                	cmp    dl,cl
c0000822:	74 09                	je     c000082d <strchr+0x21>
c0000824:	40                   	inc    eax
c0000825:	8a 10                	mov    dl,BYTE PTR [eax]
c0000827:	84 d2                	test   dl,dl
c0000829:	75 f5                	jne    c0000820 <strchr+0x14>
c000082b:	31 c0                	xor    eax,eax
c000082d:	c3                   	ret    
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncmp>:
c0000830:	57                   	push   edi
c0000831:	56                   	push   esi
c0000832:	53                   	push   ebx
c0000833:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000837:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000083b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000083f:	85 ff                	test   edi,edi
c0000841:	74 28                	je     c000086b <strncmp+0x3b>
c0000843:	8a 16                	mov    dl,BYTE PTR [esi]
c0000845:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000848:	38 d1                	cmp    cl,dl
c000084a:	75 28                	jne    c0000874 <strncmp+0x44>
c000084c:	8d 46 01             	lea    eax,[esi+0x1]
c000084f:	84 c9                	test   cl,cl
c0000851:	74 18                	je     c000086b <strncmp+0x3b>
c0000853:	01 fe                	add    esi,edi
c0000855:	eb 0f                	jmp    c0000866 <strncmp+0x36>
c0000857:	90                   	nop
c0000858:	8a 10                	mov    dl,BYTE PTR [eax]
c000085a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000085d:	38 ca                	cmp    dl,cl
c000085f:	75 13                	jne    c0000874 <strncmp+0x44>
c0000861:	40                   	inc    eax
c0000862:	84 d2                	test   dl,dl
c0000864:	74 05                	je     c000086b <strncmp+0x3b>
c0000866:	43                   	inc    ebx
c0000867:	39 c6                	cmp    esi,eax
c0000869:	75 ed                	jne    c0000858 <strncmp+0x28>
c000086b:	5b                   	pop    ebx
c000086c:	31 c0                	xor    eax,eax
c000086e:	5e                   	pop    esi
c000086f:	5f                   	pop    edi
c0000870:	c3                   	ret    
c0000871:	8d 76 00             	lea    esi,[esi+0x0]
c0000874:	5b                   	pop    ebx
c0000875:	0f b6 c2             	movzx  eax,dl
c0000878:	5e                   	pop    esi
c0000879:	29 c8                	sub    eax,ecx
c000087b:	5f                   	pop    edi
c000087c:	c3                   	ret    
c000087d:	8d 76 00             	lea    esi,[esi+0x0]

c0000880 <strcat>:
c0000880:	56                   	push   esi
c0000881:	53                   	push   ebx
c0000882:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000886:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000088a:	89 c3                	mov    ebx,eax
c000088c:	eb 04                	jmp    c0000892 <strcat+0x12>
c000088e:	66 90                	xchg   ax,ax
c0000890:	89 d3                	mov    ebx,edx
c0000892:	8d 53 01             	lea    edx,[ebx+0x1]
c0000895:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000899:	75 f5                	jne    c0000890 <strcat+0x10>
c000089b:	31 d2                	xor    edx,edx
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00008a3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00008a6:	42                   	inc    edx
c00008a7:	84 c9                	test   cl,cl
c00008a9:	75 f5                	jne    c00008a0 <strcat+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	5e                   	pop    esi
c00008ad:	c3                   	ret    
c00008ae:	66 90                	xchg   ax,ax

c00008b0 <strncat>:
c00008b0:	56                   	push   esi
c00008b1:	53                   	push   ebx
c00008b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008be:	85 f6                	test   esi,esi
c00008c0:	74 1e                	je     c00008e0 <strncat+0x30>
c00008c2:	89 c2                	mov    edx,eax
c00008c4:	42                   	inc    edx
c00008c5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c9:	75 f9                	jne    c00008c4 <strncat+0x14>
c00008cb:	01 ce                	add    esi,ecx
c00008cd:	eb 06                	jmp    c00008d5 <strncat+0x25>
c00008cf:	90                   	nop
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 10                	je     c00008e4 <strncat+0x34>
c00008d4:	42                   	inc    edx
c00008d5:	41                   	inc    ecx
c00008d6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008d9:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008dc:	84 db                	test   bl,bl
c00008de:	75 f0                	jne    c00008d0 <strncat+0x20>
c00008e0:	5b                   	pop    ebx
c00008e1:	5e                   	pop    esi
c00008e2:	c3                   	ret    
c00008e3:	90                   	nop
c00008e4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008e7:	5b                   	pop    ebx
c00008e8:	5e                   	pop    esi
c00008e9:	c3                   	ret    
c00008ea:	66 90                	xchg   ax,ax

c00008ec <strstr>:
c00008ec:	57                   	push   edi
c00008ed:	56                   	push   esi
c00008ee:	53                   	push   ebx
c00008ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008f3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008f7:	57                   	push   edi
c00008f8:	e8 a3 fd ff ff       	call   c00006a0 <strlen>
c00008fd:	59                   	pop    ecx
c00008fe:	85 c0                	test   eax,eax
c0000900:	74 2a                	je     c000092c <strstr+0x40>
c0000902:	89 c6                	mov    esi,eax
c0000904:	eb 12                	jmp    c0000918 <strstr+0x2c>
c0000906:	66 90                	xchg   ax,ax
c0000908:	56                   	push   esi
c0000909:	57                   	push   edi
c000090a:	53                   	push   ebx
c000090b:	e8 70 fc ff ff       	call   c0000580 <memcmp>
c0000910:	83 c4 0c             	add    esp,0xc
c0000913:	85 c0                	test   eax,eax
c0000915:	74 15                	je     c000092c <strstr+0x40>
c0000917:	43                   	inc    ebx
c0000918:	53                   	push   ebx
c0000919:	e8 82 fd ff ff       	call   c00006a0 <strlen>
c000091e:	5a                   	pop    edx
c000091f:	39 f0                	cmp    eax,esi
c0000921:	73 e5                	jae    c0000908 <strstr+0x1c>
c0000923:	5b                   	pop    ebx
c0000924:	31 c0                	xor    eax,eax
c0000926:	5e                   	pop    esi
c0000927:	5f                   	pop    edi
c0000928:	c3                   	ret    
c0000929:	8d 76 00             	lea    esi,[esi+0x0]
c000092c:	89 d8                	mov    eax,ebx
c000092e:	5b                   	pop    ebx
c000092f:	5e                   	pop    esi
c0000930:	5f                   	pop    edi
c0000931:	c3                   	ret    
c0000932:	66 90                	xchg   ax,ax

c0000934 <toupper>:
c0000934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000938:	0f b6 d0             	movzx  edx,al
c000093b:	f6 82 60 1e 02 c0 02 	test   BYTE PTR [edx-0x3ffde1a0],0x2
c0000942:	74 03                	je     c0000947 <toupper+0x13>
c0000944:	83 e8 20             	sub    eax,0x20
c0000947:	c3                   	ret    

c0000948 <tolower>:
c0000948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000094c:	0f b6 d0             	movzx  edx,al
c000094f:	f6 82 60 1e 02 c0 01 	test   BYTE PTR [edx-0x3ffde1a0],0x1
c0000956:	74 03                	je     c000095b <tolower+0x13>
c0000958:	83 c0 20             	add    eax,0x20
c000095b:	c3                   	ret    

c000095c <simple_strtoul>:
c000095c:	55                   	push   ebp
c000095d:	57                   	push   edi
c000095e:	56                   	push   esi
c000095f:	53                   	push   ebx
c0000960:	83 ec 08             	sub    esp,0x8
c0000963:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000967:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000096b:	90                   	nop
c000096c:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000096f:	f6 82 60 1e 02 c0 08 	test   BYTE PTR [edx-0x3ffde1a0],0x8
c0000976:	75 05                	jne    c000097d <simple_strtoul+0x21>
c0000978:	80 fa 09             	cmp    dl,0x9
c000097b:	75 03                	jne    c0000980 <simple_strtoul+0x24>
c000097d:	41                   	inc    ecx
c000097e:	eb ec                	jmp    c000096c <simple_strtoul+0x10>
c0000980:	80 fa 2d             	cmp    dl,0x2d
c0000983:	0f 84 1b 01 00 00    	je     c0000aa4 <simple_strtoul+0x148>
c0000989:	80 fa 2b             	cmp    dl,0x2b
c000098c:	0f 84 c2 00 00 00    	je     c0000a54 <simple_strtoul+0xf8>
c0000992:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000099a:	85 f6                	test   esi,esi
c000099c:	0f 85 c3 00 00 00    	jne    c0000a65 <simple_strtoul+0x109>
c00009a2:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009a4:	80 fa 30             	cmp    dl,0x30
c00009a7:	0f 84 47 01 00 00    	je     c0000af4 <simple_strtoul+0x198>
c00009ad:	be 0a 00 00 00       	mov    esi,0xa
c00009b2:	84 d2                	test   dl,dl
c00009b4:	0f 84 6f 01 00 00    	je     c0000b29 <simple_strtoul+0x1cd>
c00009ba:	31 ed                	xor    ebp,ebp
c00009bc:	31 ff                	xor    edi,edi
c00009be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009c5:	eb 2b                	jmp    c00009f2 <simple_strtoul+0x96>
c00009c7:	90                   	nop
c00009c8:	83 eb 30             	sub    ebx,0x30
c00009cb:	39 f3                	cmp    ebx,esi
c00009cd:	73 4d                	jae    c0000a1c <simple_strtoul+0xc0>
c00009cf:	31 d2                	xor    edx,edx
c00009d1:	89 d8                	mov    eax,ebx
c00009d3:	f7 d0                	not    eax
c00009d5:	f7 f6                	div    esi
c00009d7:	39 f8                	cmp    eax,edi
c00009d9:	0f 82 b1 00 00 00    	jb     c0000a90 <simple_strtoul+0x134>
c00009df:	0f af fe             	imul   edi,esi
c00009e2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e9:	01 df                	add    edi,ebx
c00009eb:	41                   	inc    ecx
c00009ec:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009ee:	84 d2                	test   dl,dl
c00009f0:	74 2a                	je     c0000a1c <simple_strtoul+0xc0>
c00009f2:	0f b6 da             	movzx  ebx,dl
c00009f5:	f6 83 60 1e 02 c0 04 	test   BYTE PTR [ebx-0x3ffde1a0],0x4
c00009fc:	75 ca                	jne    c00009c8 <simple_strtoul+0x6c>
c00009fe:	0f be d2             	movsx  edx,dl
c0000a01:	52                   	push   edx
c0000a02:	e8 2d ff ff ff       	call   c0000934 <toupper>
c0000a07:	5b                   	pop    ebx
c0000a08:	0f b6 d0             	movzx  edx,al
c0000a0b:	f6 82 60 1e 02 c0 01 	test   BYTE PTR [edx-0x3ffde1a0],0x1
c0000a12:	74 08                	je     c0000a1c <simple_strtoul+0xc0>
c0000a14:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a17:	39 f3                	cmp    ebx,esi
c0000a19:	72 b4                	jb     c00009cf <simple_strtoul+0x73>
c0000a1b:	90                   	nop
c0000a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a20:	85 c0                	test   eax,eax
c0000a22:	74 14                	je     c0000a38 <simple_strtoul+0xdc>
c0000a24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a27:	09 f8                	or     eax,edi
c0000a29:	75 71                	jne    c0000a9c <simple_strtoul+0x140>
c0000a2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a2f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a33:	31 ff                	xor    edi,edi
c0000a35:	89 30                	mov    DWORD PTR [eax],esi
c0000a37:	90                   	nop
c0000a38:	4d                   	dec    ebp
c0000a39:	75 05                	jne    c0000a40 <simple_strtoul+0xe4>
c0000a3b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a40:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a45:	75 02                	jne    c0000a49 <simple_strtoul+0xed>
c0000a47:	f7 df                	neg    edi
c0000a49:	83 c4 08             	add    esp,0x8
c0000a4c:	89 f8                	mov    eax,edi
c0000a4e:	5b                   	pop    ebx
c0000a4f:	5e                   	pop    esi
c0000a50:	5f                   	pop    edi
c0000a51:	5d                   	pop    ebp
c0000a52:	c3                   	ret    
c0000a53:	90                   	nop
c0000a54:	41                   	inc    ecx
c0000a55:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a5d:	85 f6                	test   esi,esi
c0000a5f:	0f 84 3d ff ff ff    	je     c00009a2 <simple_strtoul+0x46>
c0000a65:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a68:	83 f8 22             	cmp    eax,0x22
c0000a6b:	77 6a                	ja     c0000ad7 <simple_strtoul+0x17b>
c0000a6d:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a6f:	83 fe 08             	cmp    esi,0x8
c0000a72:	0f 84 a2 00 00 00    	je     c0000b1a <simple_strtoul+0x1be>
c0000a78:	83 fe 10             	cmp    esi,0x10
c0000a7b:	0f 85 31 ff ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000a81:	80 fa 30             	cmp    dl,0x30
c0000a84:	74 2c                	je     c0000ab2 <simple_strtoul+0x156>
c0000a86:	be 10 00 00 00       	mov    esi,0x10
c0000a8b:	e9 22 ff ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000a90:	bd 01 00 00 00       	mov    ebp,0x1
c0000a95:	31 ff                	xor    edi,edi
c0000a97:	e9 4f ff ff ff       	jmp    c00009eb <simple_strtoul+0x8f>
c0000a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aa0:	89 08                	mov    DWORD PTR [eax],ecx
c0000aa2:	eb 94                	jmp    c0000a38 <simple_strtoul+0xdc>
c0000aa4:	41                   	inc    ecx
c0000aa5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000aad:	e9 e8 fe ff ff       	jmp    c000099a <simple_strtoul+0x3e>
c0000ab2:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ab6:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab9:	50                   	push   eax
c0000aba:	e8 89 fe ff ff       	call   c0000948 <tolower>
c0000abf:	5e                   	pop    esi
c0000ac0:	83 f8 78             	cmp    eax,0x78
c0000ac3:	0f 84 84 00 00 00    	je     c0000b4d <simple_strtoul+0x1f1>
c0000ac9:	41                   	inc    ecx
c0000aca:	be 10 00 00 00       	mov    esi,0x10
c0000acf:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000ad2:	e9 db fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000ad7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000adb:	85 ff                	test   edi,edi
c0000add:	74 5c                	je     c0000b3b <simple_strtoul+0x1df>
c0000adf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ae3:	85 c9                	test   ecx,ecx
c0000ae5:	75 4e                	jne    c0000b35 <simple_strtoul+0x1d9>
c0000ae7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aed:	31 ff                	xor    edi,edi
c0000aef:	e9 4c ff ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000af4:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000af8:	88 04 24             	mov    BYTE PTR [esp],al
c0000afb:	50                   	push   eax
c0000afc:	e8 47 fe ff ff       	call   c0000948 <tolower>
c0000b01:	5d                   	pop    ebp
c0000b02:	83 f8 78             	cmp    eax,0x78
c0000b05:	74 3b                	je     c0000b42 <simple_strtoul+0x1e6>
c0000b07:	41                   	inc    ecx
c0000b08:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b0b:	80 fa 30             	cmp    dl,0x30
c0000b0e:	74 13                	je     c0000b23 <simple_strtoul+0x1c7>
c0000b10:	be 08 00 00 00       	mov    esi,0x8
c0000b15:	e9 98 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000b1a:	80 fa 30             	cmp    dl,0x30
c0000b1d:	0f 85 8f fe ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000b23:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b26:	41                   	inc    ecx
c0000b27:	eb e7                	jmp    c0000b10 <simple_strtoul+0x1b4>
c0000b29:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b2d:	85 d2                	test   edx,edx
c0000b2f:	74 0a                	je     c0000b3b <simple_strtoul+0x1df>
c0000b31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b35:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b39:	89 30                	mov    DWORD PTR [eax],esi
c0000b3b:	31 ff                	xor    edi,edi
c0000b3d:	e9 fe fe ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000b42:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b45:	83 c1 02             	add    ecx,0x2
c0000b48:	e9 34 ff ff ff       	jmp    c0000a81 <simple_strtoul+0x125>
c0000b4d:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b50:	be 10 00 00 00       	mov    esi,0x10
c0000b55:	83 c1 02             	add    ecx,0x2
c0000b58:	e9 55 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>

c0000b5d <largebin_index>:
c0000b5d:	89 c2                	mov    edx,eax
c0000b5f:	c1 ea 08             	shr    edx,0x8
c0000b62:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b68:	77 10                	ja     c0000b7a <largebin_index+0x1d>
c0000b6a:	0f bd d2             	bsr    edx,edx
c0000b6d:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b70:	d3 e8                	shr    eax,cl
c0000b72:	83 e0 03             	and    eax,0x3
c0000b75:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b79:	c3                   	ret    
c0000b7a:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b7f:	c3                   	ret    

c0000b80 <malloc_init_state>:
c0000b80:	53                   	push   ebx
c0000b81:	8d 50 34             	lea    edx,[eax+0x34]
c0000b84:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b8a:	89 d1                	mov    ecx,edx
c0000b8c:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b8f:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b92:	83 c2 08             	add    edx,0x8
c0000b95:	39 da                	cmp    edx,ebx
c0000b97:	75 f3                	jne    c0000b8c <malloc_init_state+0xc>
c0000b99:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b9b:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ba5:	83 e2 03             	and    edx,0x3
c0000ba8:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000bb2:	83 ca 48             	or     edx,0x48
c0000bb5:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bbf:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bc9:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bd0:	89 10                	mov    DWORD PTR [eax],edx
c0000bd2:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bd5:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bdf:	5b                   	pop    ebx
c0000be0:	c3                   	ret    

c0000be1 <malloc_consolidate>:
c0000be1:	8b 10                	mov    edx,DWORD PTR [eax]
c0000be3:	85 d2                	test   edx,edx
c0000be5:	0f 84 d8 00 00 00    	je     c0000cc3 <malloc_consolidate+0xe2>
c0000beb:	55                   	push   ebp
c0000bec:	83 e2 fd             	and    edx,0xfffffffd
c0000bef:	57                   	push   edi
c0000bf0:	89 c5                	mov    ebp,eax
c0000bf2:	56                   	push   esi
c0000bf3:	8d 78 34             	lea    edi,[eax+0x34]
c0000bf6:	53                   	push   ebx
c0000bf7:	83 ec 10             	sub    esp,0x10
c0000bfa:	89 10                	mov    DWORD PTR [eax],edx
c0000bfc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c00:	c1 ea 03             	shr    edx,0x3
c0000c03:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c07:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c0b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c0e:	85 d2                	test   edx,edx
c0000c10:	0f 84 98 00 00 00    	je     c0000cae <malloc_consolidate+0xcd>
c0000c16:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c1d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c20:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c23:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c27:	89 f9                	mov    ecx,edi
c0000c29:	83 e1 fe             	and    ecx,0xfffffffe
c0000c2c:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c2f:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c32:	83 e3 fc             	and    ebx,0xfffffffc
c0000c35:	83 e7 01             	and    edi,0x1
c0000c38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c3b:	75 14                	jne    c0000c51 <malloc_consolidate+0x70>
c0000c3d:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c3f:	29 fa                	sub    edx,edi
c0000c41:	01 f9                	add    ecx,edi
c0000c43:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c46:	89 fb                	mov    ebx,edi
c0000c48:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c4b:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c4e:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c51:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c54:	74 40                	je     c0000c96 <malloc_consolidate+0xb5>
c0000c56:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c59:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c5c:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c60:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c63:	83 e7 01             	and    edi,0x1
c0000c66:	75 0e                	jne    c0000c76 <malloc_consolidate+0x95>
c0000c68:	01 d9                	add    ecx,ebx
c0000c6a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c6d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c70:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c73:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c76:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c79:	89 ce                	mov    esi,ecx
c0000c7b:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c7e:	83 ce 01             	or     esi,0x1
c0000c81:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c84:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c87:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c8a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c8e:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c91:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c94:	eb 0c                	jmp    c0000ca2 <malloc_consolidate+0xc1>
c0000c96:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c99:	83 c9 01             	or     ecx,0x1
c0000c9c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c9f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ca2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ca6:	85 d2                	test   edx,edx
c0000ca8:	0f 85 6f ff ff ff    	jne    c0000c1d <malloc_consolidate+0x3c>
c0000cae:	83 c5 04             	add    ebp,0x4
c0000cb1:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cb5:	0f 85 50 ff ff ff    	jne    c0000c0b <malloc_consolidate+0x2a>
c0000cbb:	83 c4 10             	add    esp,0x10
c0000cbe:	5b                   	pop    ebx
c0000cbf:	5e                   	pop    esi
c0000cc0:	5f                   	pop    edi
c0000cc1:	5d                   	pop    ebp
c0000cc2:	c3                   	ret    
c0000cc3:	e9 b8 fe ff ff       	jmp    c0000b80 <malloc_init_state>

c0000cc8 <dlfree>:
c0000cc8:	57                   	push   edi
c0000cc9:	56                   	push   esi
c0000cca:	53                   	push   ebx
c0000ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ccf:	85 db                	test   ebx,ebx
c0000cd1:	0f 84 e2 00 00 00    	je     c0000db9 <dlfree+0xf1>
c0000cd7:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cda:	8b 0d 80 60 02 c0    	mov    ecx,DWORD PTR ds:0xc0026080
c0000ce0:	89 f0                	mov    eax,esi
c0000ce2:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000ce5:	83 e0 fc             	and    eax,0xfffffffc
c0000ce8:	39 c1                	cmp    ecx,eax
c0000cea:	72 24                	jb     c0000d10 <dlfree+0x48>
c0000cec:	83 c9 03             	or     ecx,0x3
c0000cef:	c1 e8 03             	shr    eax,0x3
c0000cf2:	89 0d 80 60 02 c0    	mov    DWORD PTR ds:0xc0026080,ecx
c0000cf8:	83 e8 02             	sub    eax,0x2
c0000cfb:	8b 0c 85 84 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9f7c]
c0000d02:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d04:	89 14 85 84 60 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9f7c],edx
c0000d0b:	e9 a9 00 00 00       	jmp    c0000db9 <dlfree+0xf1>
c0000d10:	83 e6 02             	and    esi,0x2
c0000d13:	0f 85 a0 00 00 00    	jne    c0000db9 <dlfree+0xf1>
c0000d19:	83 c9 01             	or     ecx,0x1
c0000d1c:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d1f:	89 0d 80 60 02 c0    	mov    DWORD PTR ds:0xc0026080,ecx
c0000d25:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d28:	83 e1 fc             	and    ecx,0xfffffffc
c0000d2b:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d2f:	75 13                	jne    c0000d44 <dlfree+0x7c>
c0000d31:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d34:	29 da                	sub    edx,ebx
c0000d36:	01 d8                	add    eax,ebx
c0000d38:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d3e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d41:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d44:	39 35 ac 60 02 c0    	cmp    DWORD PTR ds:0xc00260ac,esi
c0000d4a:	74 40                	je     c0000d8c <dlfree+0xc4>
c0000d4c:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d50:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d53:	80 e3 01             	and    bl,0x1
c0000d56:	75 0e                	jne    c0000d66 <dlfree+0x9e>
c0000d58:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d5b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d5e:	01 c8                	add    eax,ecx
c0000d60:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d63:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d66:	8b 0d bc 60 02 c0    	mov    ecx,DWORD PTR ds:0xc00260bc
c0000d6c:	c7 42 0c b4 60 02 c0 	mov    DWORD PTR [edx+0xc],0xc00260b4
c0000d73:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d76:	89 15 bc 60 02 c0    	mov    DWORD PTR ds:0xc00260bc,edx
c0000d7c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d8a:	eb 10                	jmp    c0000d9c <dlfree+0xd4>
c0000d8c:	01 c8                	add    eax,ecx
c0000d8e:	89 c1                	mov    ecx,eax
c0000d90:	83 c9 01             	or     ecx,0x1
c0000d93:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d96:	89 15 ac 60 02 c0    	mov    DWORD PTR ds:0xc00260ac,edx
c0000d9c:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000da1:	76 16                	jbe    c0000db9 <dlfree+0xf1>
c0000da3:	f6 05 80 60 02 c0 02 	test   BYTE PTR ds:0xc0026080,0x2
c0000daa:	74 0d                	je     c0000db9 <dlfree+0xf1>
c0000dac:	5b                   	pop    ebx
c0000dad:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0000db2:	5e                   	pop    esi
c0000db3:	5f                   	pop    edi
c0000db4:	e9 28 fe ff ff       	jmp    c0000be1 <malloc_consolidate>
c0000db9:	5b                   	pop    ebx
c0000dba:	5e                   	pop    esi
c0000dbb:	5f                   	pop    edi
c0000dbc:	c3                   	ret    

c0000dbd <sYSMALLOc>:
c0000dbd:	55                   	push   ebp
c0000dbe:	57                   	push   edi
c0000dbf:	56                   	push   esi
c0000dc0:	53                   	push   ebx
c0000dc1:	89 d3                	mov    ebx,edx
c0000dc3:	83 ec 2c             	sub    esp,0x2c
c0000dc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dca:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dd0:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dd3:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dda:	74 1f                	je     c0000dfb <sYSMALLOc+0x3e>
c0000ddc:	89 d8                	mov    eax,ebx
c0000dde:	e8 fe fd ff ff       	call   c0000be1 <malloc_consolidate>
c0000de3:	83 ec 0c             	sub    esp,0xc
c0000de6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dea:	83 e8 07             	sub    eax,0x7
c0000ded:	50                   	push   eax
c0000dee:	e8 30 02 00 00       	call   c0001023 <dlmalloc>
c0000df3:	83 c4 10             	add    esp,0x10
c0000df6:	e9 20 02 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000dfb:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dfe:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e04:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e07:	83 e0 fc             	and    eax,0xfffffffc
c0000e0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e12:	83 c0 10             	add    eax,0x10
c0000e15:	01 c1                	add    ecx,eax
c0000e17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e1b:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e22:	74 04                	je     c0000e28 <sYSMALLOc+0x6b>
c0000e24:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e28:	f7 da                	neg    edx
c0000e2a:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e2e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e32:	21 d1                	and    ecx,edx
c0000e34:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e38:	7f 07                	jg     c0000e41 <sYSMALLOc+0x84>
c0000e3a:	31 c0                	xor    eax,eax
c0000e3c:	e9 da 01 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000e41:	83 ec 0c             	sub    esp,0xc
c0000e44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e48:	e8 3f 8a 00 00       	call   c000988c <sbrk>
c0000e4d:	83 c4 10             	add    esp,0x10
c0000e50:	89 c6                	mov    esi,eax
c0000e52:	83 f8 ff             	cmp    eax,0xffffffff
c0000e55:	74 e3                	je     c0000e3a <sYSMALLOc+0x7d>
c0000e57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e5b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e5f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e62:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e68:	39 f1                	cmp    ecx,esi
c0000e6a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e70:	75 13                	jne    c0000e85 <sYSMALLOc+0xc8>
c0000e72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e76:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e7a:	83 c8 01             	or     eax,0x1
c0000e7d:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e80:	e9 3e 01 00 00       	jmp    c0000fc3 <sYSMALLOc+0x206>
c0000e85:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e8b:	88 d0                	mov    al,dl
c0000e8d:	83 e0 01             	and    eax,0x1
c0000e90:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e95:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e99:	0f 95 c0             	setne  al
c0000e9c:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000ea0:	39 f1                	cmp    ecx,esi
c0000ea2:	76 12                	jbe    c0000eb6 <sYSMALLOc+0xf9>
c0000ea4:	84 c0                	test   al,al
c0000ea6:	74 0e                	je     c0000eb6 <sYSMALLOc+0xf9>
c0000ea8:	83 e2 fe             	and    edx,0xfffffffe
c0000eab:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000eb1:	e9 83 00 00 00       	jmp    c0000f39 <sYSMALLOc+0x17c>
c0000eb6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ebb:	74 7c                	je     c0000f39 <sYSMALLOc+0x17c>
c0000ebd:	84 c0                	test   al,al
c0000ebf:	74 0c                	je     c0000ecd <sYSMALLOc+0x110>
c0000ec1:	89 f0                	mov    eax,esi
c0000ec3:	29 c8                	sub    eax,ecx
c0000ec5:	01 e8                	add    eax,ebp
c0000ec7:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ecd:	89 f2                	mov    edx,esi
c0000ecf:	83 e2 07             	and    edx,0x7
c0000ed2:	74 0c                	je     c0000ee0 <sYSMALLOc+0x123>
c0000ed4:	b8 08 00 00 00       	mov    eax,0x8
c0000ed9:	29 d0                	sub    eax,edx
c0000edb:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ede:	eb 04                	jmp    c0000ee4 <sYSMALLOc+0x127>
c0000ee0:	89 f5                	mov    ebp,esi
c0000ee2:	31 c0                	xor    eax,eax
c0000ee4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ee8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000eec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ef0:	01 c1                	add    ecx,eax
c0000ef2:	83 ec 0c             	sub    esp,0xc
c0000ef5:	01 f1                	add    ecx,esi
c0000ef7:	01 ca                	add    edx,ecx
c0000ef9:	29 c8                	sub    eax,ecx
c0000efb:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000eff:	01 c2                	add    edx,eax
c0000f01:	52                   	push   edx
c0000f02:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f06:	e8 81 89 00 00       	call   c000988c <sbrk>
c0000f0b:	83 c4 10             	add    esp,0x10
c0000f0e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f15:	75 0f                	jne    c0000f26 <sYSMALLOc+0x169>
c0000f17:	83 ec 0c             	sub    esp,0xc
c0000f1a:	6a 00                	push   0x0
c0000f1c:	e8 6b 89 00 00       	call   c000988c <sbrk>
c0000f21:	83 c4 10             	add    esp,0x10
c0000f24:	eb 30                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f26:	39 c6                	cmp    esi,eax
c0000f28:	76 33                	jbe    c0000f5d <sYSMALLOc+0x1a0>
c0000f2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2e:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f35:	01 f0                	add    eax,esi
c0000f37:	eb 1d                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f39:	83 ec 0c             	sub    esp,0xc
c0000f3c:	89 f5                	mov    ebp,esi
c0000f3e:	6a 00                	push   0x0
c0000f40:	e8 47 89 00 00       	call   c000988c <sbrk>
c0000f45:	89 c2                	mov    edx,eax
c0000f47:	29 f2                	sub    edx,esi
c0000f49:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f4d:	83 c4 10             	add    esp,0x10
c0000f50:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f56:	31 d2                	xor    edx,edx
c0000f58:	83 f8 ff             	cmp    eax,0xffffffff
c0000f5b:	74 66                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f5d:	29 e8                	sub    eax,ebp
c0000f5f:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f62:	01 d0                	add    eax,edx
c0000f64:	83 c8 01             	or     eax,0x1
c0000f67:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f6a:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f70:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f75:	74 4c                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f7b:	83 e8 0c             	sub    eax,0xc
c0000f7e:	83 e0 f8             	and    eax,0xfffffff8
c0000f81:	89 c2                	mov    edx,eax
c0000f83:	83 ca 01             	or     edx,0x1
c0000f86:	83 f8 0f             	cmp    eax,0xf
c0000f89:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f8c:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f94:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f9c:	76 25                	jbe    c0000fc3 <sYSMALLOc+0x206>
c0000f9e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000fa4:	83 ec 0c             	sub    esp,0xc
c0000fa7:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fb1:	83 c7 08             	add    edi,0x8
c0000fb4:	57                   	push   edi
c0000fb5:	e8 0e fd ff ff       	call   c0000cc8 <dlfree>
c0000fba:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fc9:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fcf:	73 06                	jae    c0000fd7 <sYSMALLOc+0x21a>
c0000fd1:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fd7:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fdd:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fe3:	73 06                	jae    c0000feb <sYSMALLOc+0x22e>
c0000fe5:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000feb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff1:	83 e2 fc             	and    edx,0xfffffffc
c0000ff4:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ff8:	0f 82 3c fe ff ff    	jb     c0000e3a <sYSMALLOc+0x7d>
c0000ffe:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001002:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001005:	29 fa                	sub    edx,edi
c0001007:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000100a:	83 ca 01             	or     edx,0x1
c000100d:	89 fb                	mov    ebx,edi
c000100f:	83 c0 08             	add    eax,0x8
c0001012:	83 cb 01             	or     ebx,0x1
c0001015:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001018:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000101b:	83 c4 2c             	add    esp,0x2c
c000101e:	5b                   	pop    ebx
c000101f:	5e                   	pop    esi
c0001020:	5f                   	pop    edi
c0001021:	5d                   	pop    ebp
c0001022:	c3                   	ret    

c0001023 <dlmalloc>:
c0001023:	55                   	push   ebp
c0001024:	57                   	push   edi
c0001025:	56                   	push   esi
c0001026:	53                   	push   ebx
c0001027:	83 ec 1c             	sub    esp,0x1c
c000102a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000102e:	83 f8 df             	cmp    eax,0xffffffdf
c0001031:	0f 87 70 03 00 00    	ja     c00013a7 <dlmalloc+0x384>
c0001037:	83 c0 0b             	add    eax,0xb
c000103a:	be 10 00 00 00       	mov    esi,0x10
c000103f:	83 f8 0f             	cmp    eax,0xf
c0001042:	76 05                	jbe    c0001049 <dlmalloc+0x26>
c0001044:	83 e0 f8             	and    eax,0xfffffff8
c0001047:	89 c6                	mov    esi,eax
c0001049:	8b 3d 80 60 02 c0    	mov    edi,DWORD PTR ds:0xc0026080
c000104f:	f7 c7 01 00 00 00    	test   edi,0x1
c0001055:	75 17                	jne    c000106e <dlmalloc+0x4b>
c0001057:	85 ff                	test   edi,edi
c0001059:	0f 85 05 03 00 00    	jne    c0001364 <dlmalloc+0x341>
c000105f:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0001064:	e8 78 fb ff ff       	call   c0000be1 <malloc_consolidate>
c0001069:	e9 f6 02 00 00       	jmp    c0001364 <dlmalloc+0x341>
c000106e:	39 f7                	cmp    edi,esi
c0001070:	72 1f                	jb     c0001091 <dlmalloc+0x6e>
c0001072:	89 f2                	mov    edx,esi
c0001074:	c1 ea 03             	shr    edx,0x3
c0001077:	83 ea 02             	sub    edx,0x2
c000107a:	8b 04 95 84 60 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9f7c]
c0001081:	85 c0                	test   eax,eax
c0001083:	74 0c                	je     c0001091 <dlmalloc+0x6e>
c0001085:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001088:	89 0c 95 84 60 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9f7c],ecx
c000108f:	eb 30                	jmp    c00010c1 <dlmalloc+0x9e>
c0001091:	89 f0                	mov    eax,esi
c0001093:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001099:	77 2e                	ja     c00010c9 <dlmalloc+0xa6>
c000109b:	c1 e8 03             	shr    eax,0x3
c000109e:	8d 14 c5 b4 60 02 c0 	lea    edx,[eax*8-0x3ffd9f4c]
c00010a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a9:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010ac:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010af:	39 c3                	cmp    ebx,eax
c00010b1:	74 2e                	je     c00010e1 <dlmalloc+0xbe>
c00010b3:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010b6:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010bb:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010be:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010c1:	83 c0 08             	add    eax,0x8
c00010c4:	e9 e0 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c00010c9:	e8 8f fa ff ff       	call   c0000b5d <largebin_index>
c00010ce:	83 e7 02             	and    edi,0x2
c00010d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010d5:	74 0a                	je     c00010e1 <dlmalloc+0xbe>
c00010d7:	b8 80 60 02 c0       	mov    eax,0xc0026080
c00010dc:	e8 00 fb ff ff       	call   c0000be1 <malloc_consolidate>
c00010e1:	8d 46 10             	lea    eax,[esi+0x10]
c00010e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010e8:	8b 1d c0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260c0
c00010ee:	81 fb b4 60 02 c0    	cmp    ebx,0xc00260b4
c00010f4:	0f 84 13 01 00 00    	je     c000120d <dlmalloc+0x1ea>
c00010fa:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010fd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001100:	83 e7 fc             	and    edi,0xfffffffc
c0001103:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001109:	77 4c                	ja     c0001157 <dlmalloc+0x134>
c000110b:	3d b4 60 02 c0       	cmp    eax,0xc00260b4
c0001110:	75 45                	jne    c0001157 <dlmalloc+0x134>
c0001112:	39 1d b0 60 02 c0    	cmp    DWORD PTR ds:0xc00260b0,ebx
c0001118:	75 3d                	jne    c0001157 <dlmalloc+0x134>
c000111a:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000111e:	73 37                	jae    c0001157 <dlmalloc+0x134>
c0001120:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001123:	89 fa                	mov    edx,edi
c0001125:	a3 bc 60 02 c0       	mov    ds:0xc00260bc,eax
c000112a:	a3 c0 60 02 c0       	mov    ds:0xc00260c0,eax
c000112f:	a3 b0 60 02 c0       	mov    ds:0xc00260b0,eax
c0001134:	29 f2                	sub    edx,esi
c0001136:	c7 40 08 b4 60 02 c0 	mov    DWORD PTR [eax+0x8],0xc00260b4
c000113d:	c7 40 0c b4 60 02 c0 	mov    DWORD PTR [eax+0xc],0xc00260b4
c0001144:	83 ce 01             	or     esi,0x1
c0001147:	89 d1                	mov    ecx,edx
c0001149:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000114c:	83 c9 01             	or     ecx,0x1
c000114f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001152:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001155:	eb 15                	jmp    c000116c <dlmalloc+0x149>
c0001157:	a3 c0 60 02 c0       	mov    ds:0xc00260c0,eax
c000115c:	39 fe                	cmp    esi,edi
c000115e:	c7 40 08 b4 60 02 c0 	mov    DWORD PTR [eax+0x8],0xc00260b4
c0001165:	75 0d                	jne    c0001174 <dlmalloc+0x151>
c0001167:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000116c:	8d 43 08             	lea    eax,[ebx+0x8]
c000116f:	e9 35 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001174:	89 f8                	mov    eax,edi
c0001176:	81 ff ff 00 00 00    	cmp    edi,0xff
c000117c:	77 19                	ja     c0001197 <dlmalloc+0x174>
c000117e:	c1 e8 03             	shr    eax,0x3
c0001181:	8d 14 00             	lea    edx,[eax+eax*1]
c0001184:	83 c2 0d             	add    edx,0xd
c0001187:	8d 2c 95 78 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f88]
c000118e:	8b 14 95 80 60 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f80]
c0001195:	eb 46                	jmp    c00011dd <dlmalloc+0x1ba>
c0001197:	e8 c1 f9 ff ff       	call   c0000b5d <largebin_index>
c000119c:	8d 14 00             	lea    edx,[eax+eax*1]
c000119f:	83 c2 0d             	add    edx,0xd
c00011a2:	8d 0c 95 80 60 02 c0 	lea    ecx,[edx*4-0x3ffd9f80]
c00011a9:	8b 14 95 80 60 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f80]
c00011b0:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011b3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011b7:	89 d5                	mov    ebp,edx
c00011b9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011bd:	74 1e                	je     c00011dd <dlmalloc+0x1ba>
c00011bf:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011c2:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011c5:	77 12                	ja     c00011d9 <dlmalloc+0x1b6>
c00011c7:	83 cf 01             	or     edi,0x1
c00011ca:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011cd:	76 05                	jbe    c00011d4 <dlmalloc+0x1b1>
c00011cf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011d2:	eb f6                	jmp    c00011ca <dlmalloc+0x1a7>
c00011d4:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011d7:	eb 04                	jmp    c00011dd <dlmalloc+0x1ba>
c00011d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011dd:	89 c7                	mov    edi,eax
c00011df:	88 c1                	mov    cl,al
c00011e1:	c1 ff 05             	sar    edi,0x5
c00011e4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011e8:	bf 01 00 00 00       	mov    edi,0x1
c00011ed:	d3 e7                	shl    edi,cl
c00011ef:	89 f8                	mov    eax,edi
c00011f1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011f5:	09 04 bd b4 63 02 c0 	or     DWORD PTR [edi*4-0x3ffd9c4c],eax
c00011fc:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011ff:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001202:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001205:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001208:	e9 db fe ff ff       	jmp    c00010e8 <dlmalloc+0xc5>
c000120d:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001213:	76 78                	jbe    c000128d <dlmalloc+0x26a>
c0001215:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001219:	8d 04 c5 b4 60 02 c0 	lea    eax,[eax*8-0x3ffd9f4c]
c0001220:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001223:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001226:	39 ca                	cmp    edx,ecx
c0001228:	74 63                	je     c000128d <dlmalloc+0x26a>
c000122a:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000122d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001230:	83 e3 fc             	and    ebx,0xfffffffc
c0001233:	39 de                	cmp    esi,ebx
c0001235:	77 52                	ja     c0001289 <dlmalloc+0x266>
c0001237:	89 df                	mov    edi,ebx
c0001239:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000123c:	29 f7                	sub    edi,esi
c000123e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001241:	01 d3                	add    ebx,edx
c0001243:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001246:	83 ff 0f             	cmp    edi,0xf
c0001249:	8d 42 08             	lea    eax,[edx+0x8]
c000124c:	77 09                	ja     c0001257 <dlmalloc+0x234>
c000124e:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001252:	e9 52 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001257:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000125a:	83 ce 01             	or     esi,0x1
c000125d:	89 0d bc 60 02 c0    	mov    DWORD PTR ds:0xc00260bc,ecx
c0001263:	89 0d c0 60 02 c0    	mov    DWORD PTR ds:0xc00260c0,ecx
c0001269:	c7 41 08 b4 60 02 c0 	mov    DWORD PTR [ecx+0x8],0xc00260b4
c0001270:	c7 41 0c b4 60 02 c0 	mov    DWORD PTR [ecx+0xc],0xc00260b4
c0001277:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000127a:	89 fa                	mov    edx,edi
c000127c:	83 ca 01             	or     edx,0x1
c000127f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001282:	89 3b                	mov    DWORD PTR [ebx],edi
c0001284:	e9 20 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001289:	89 c2                	mov    edx,eax
c000128b:	eb 99                	jmp    c0001226 <dlmalloc+0x203>
c000128d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001291:	b8 01 00 00 00       	mov    eax,0x1
c0001296:	41                   	inc    ecx
c0001297:	89 cb                	mov    ebx,ecx
c0001299:	8d 14 cd ac 60 02 c0 	lea    edx,[ecx*8-0x3ffd9f54]
c00012a0:	c1 eb 05             	shr    ebx,0x5
c00012a3:	d3 e0                	shl    eax,cl
c00012a5:	8b 3c 9d b4 63 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9c4c]
c00012ac:	39 f8                	cmp    eax,edi
c00012ae:	77 04                	ja     c00012b4 <dlmalloc+0x291>
c00012b0:	85 c0                	test   eax,eax
c00012b2:	75 26                	jne    c00012da <dlmalloc+0x2b7>
c00012b4:	43                   	inc    ebx
c00012b5:	83 fb 02             	cmp    ebx,0x2
c00012b8:	0f 87 a6 00 00 00    	ja     c0001364 <dlmalloc+0x341>
c00012be:	8b 3c 9d b4 63 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9c4c]
c00012c5:	85 ff                	test   edi,edi
c00012c7:	74 eb                	je     c00012b4 <dlmalloc+0x291>
c00012c9:	89 d8                	mov    eax,ebx
c00012cb:	c1 e0 06             	shl    eax,0x6
c00012ce:	8d 14 85 ac 60 02 c0 	lea    edx,[eax*4-0x3ffd9f54]
c00012d5:	b8 01 00 00 00       	mov    eax,0x1
c00012da:	85 f8                	test   eax,edi
c00012dc:	75 07                	jne    c00012e5 <dlmalloc+0x2c2>
c00012de:	83 c2 08             	add    edx,0x8
c00012e1:	01 c0                	add    eax,eax
c00012e3:	eb f5                	jmp    c00012da <dlmalloc+0x2b7>
c00012e5:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012e8:	39 ca                	cmp    edx,ecx
c00012ea:	75 14                	jne    c0001300 <dlmalloc+0x2dd>
c00012ec:	89 c1                	mov    ecx,eax
c00012ee:	83 c2 08             	add    edx,0x8
c00012f1:	f7 d1                	not    ecx
c00012f3:	01 c0                	add    eax,eax
c00012f5:	21 cf                	and    edi,ecx
c00012f7:	89 3c 9d b4 63 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9c4c],edi
c00012fe:	eb ac                	jmp    c00012ac <dlmalloc+0x289>
c0001300:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001303:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001306:	83 e0 fc             	and    eax,0xfffffffc
c0001309:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000130c:	89 c3                	mov    ebx,eax
c000130e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001311:	29 f3                	sub    ebx,esi
c0001313:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001316:	83 fb 0f             	cmp    ebx,0xf
c0001319:	8d 41 08             	lea    eax,[ecx+0x8]
c000131c:	77 09                	ja     c0001327 <dlmalloc+0x304>
c000131e:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001322:	e9 82 00 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001327:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000132a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001330:	89 3d bc 60 02 c0    	mov    DWORD PTR ds:0xc00260bc,edi
c0001336:	89 3d c0 60 02 c0    	mov    DWORD PTR ds:0xc00260c0,edi
c000133c:	c7 47 08 b4 60 02 c0 	mov    DWORD PTR [edi+0x8],0xc00260b4
c0001343:	c7 47 0c b4 60 02 c0 	mov    DWORD PTR [edi+0xc],0xc00260b4
c000134a:	77 06                	ja     c0001352 <dlmalloc+0x32f>
c000134c:	89 3d b0 60 02 c0    	mov    DWORD PTR ds:0xc00260b0,edi
c0001352:	83 ce 01             	or     esi,0x1
c0001355:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001358:	89 d9                	mov    ecx,ebx
c000135a:	83 c9 01             	or     ecx,0x1
c000135d:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001360:	89 1a                	mov    DWORD PTR [edx],ebx
c0001362:	eb 45                	jmp    c00013a9 <dlmalloc+0x386>
c0001364:	a1 ac 60 02 c0       	mov    eax,ds:0xc00260ac
c0001369:	8d 4e 10             	lea    ecx,[esi+0x10]
c000136c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000136f:	83 e2 fc             	and    edx,0xfffffffc
c0001372:	39 d1                	cmp    ecx,edx
c0001374:	77 1e                	ja     c0001394 <dlmalloc+0x371>
c0001376:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001379:	89 f3                	mov    ebx,esi
c000137b:	89 0d ac 60 02 c0    	mov    DWORD PTR ds:0xc00260ac,ecx
c0001381:	83 cb 01             	or     ebx,0x1
c0001384:	29 f2                	sub    edx,esi
c0001386:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001389:	83 ca 01             	or     edx,0x1
c000138c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000138f:	e9 2d fd ff ff       	jmp    c00010c1 <dlmalloc+0x9e>
c0001394:	83 c4 1c             	add    esp,0x1c
c0001397:	89 f0                	mov    eax,esi
c0001399:	5b                   	pop    ebx
c000139a:	ba 80 60 02 c0       	mov    edx,0xc0026080
c000139f:	5e                   	pop    esi
c00013a0:	5f                   	pop    edi
c00013a1:	5d                   	pop    ebp
c00013a2:	e9 16 fa ff ff       	jmp    c0000dbd <sYSMALLOc>
c00013a7:	31 c0                	xor    eax,eax
c00013a9:	83 c4 1c             	add    esp,0x1c
c00013ac:	5b                   	pop    ebx
c00013ad:	5e                   	pop    esi
c00013ae:	5f                   	pop    edi
c00013af:	5d                   	pop    ebp
c00013b0:	c3                   	ret    

c00013b1 <iALLOc>:
c00013b1:	55                   	push   ebp
c00013b2:	89 c5                	mov    ebp,eax
c00013b4:	57                   	push   edi
c00013b5:	56                   	push   esi
c00013b6:	53                   	push   ebx
c00013b7:	83 ec 2c             	sub    esp,0x2c
c00013ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013be:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013c6:	83 3d 80 60 02 c0 00 	cmp    DWORD PTR ds:0xc0026080,0x0
c00013cd:	75 12                	jne    c00013e1 <iALLOc+0x30>
c00013cf:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013d3:	b8 80 60 02 c0       	mov    eax,0xc0026080
c00013d8:	e8 04 f8 ff ff       	call   c0000be1 <malloc_consolidate>
c00013dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013e6:	74 12                	je     c00013fa <iALLOc+0x49>
c00013e8:	85 ed                	test   ebp,ebp
c00013ea:	0f 84 64 01 00 00    	je     c0001554 <iALLOc+0x1a3>
c00013f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013f8:	eb 33                	jmp    c000142d <iALLOc+0x7c>
c00013fa:	85 ed                	test   ebp,ebp
c00013fc:	75 14                	jne    c0001412 <iALLOc+0x61>
c00013fe:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001406:	83 c4 2c             	add    esp,0x2c
c0001409:	5b                   	pop    ebx
c000140a:	5e                   	pop    esi
c000140b:	5f                   	pop    edi
c000140c:	5d                   	pop    ebp
c000140d:	e9 11 fc ff ff       	jmp    c0001023 <dlmalloc>
c0001412:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001419:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001421:	83 f8 0f             	cmp    eax,0xf
c0001424:	76 07                	jbe    c000142d <iALLOc+0x7c>
c0001426:	83 e0 f8             	and    eax,0xfffffff8
c0001429:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000142d:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001432:	75 09                	jne    c000143d <iALLOc+0x8c>
c0001434:	89 d0                	mov    eax,edx
c0001436:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001439:	31 f6                	xor    esi,esi
c000143b:	eb 3b                	jmp    c0001478 <iALLOc+0xc7>
c000143d:	8b 02                	mov    eax,DWORD PTR [edx]
c000143f:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001447:	83 c0 0b             	add    eax,0xb
c000144a:	83 f8 0f             	cmp    eax,0xf
c000144d:	76 07                	jbe    c0001456 <iALLOc+0xa5>
c000144f:	83 e0 f8             	and    eax,0xfffffff8
c0001452:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001456:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000145a:	0f af f5             	imul   esi,ebp
c000145d:	eb 25                	jmp    c0001484 <iALLOc+0xd3>
c000145f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001461:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001464:	bb 10 00 00 00       	mov    ebx,0x10
c0001469:	83 f9 0f             	cmp    ecx,0xf
c000146c:	76 05                	jbe    c0001473 <iALLOc+0xc2>
c000146e:	83 e1 f8             	and    ecx,0xfffffff8
c0001471:	89 cb                	mov    ebx,ecx
c0001473:	01 de                	add    esi,ebx
c0001475:	83 c0 04             	add    eax,0x4
c0001478:	39 c7                	cmp    edi,eax
c000147a:	75 e3                	jne    c000145f <iALLOc+0xae>
c000147c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001484:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001488:	8b 1d d4 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263d4
c000148e:	83 ec 0c             	sub    esp,0xc
c0001491:	c7 05 d4 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00263d4,0x0
c000149b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000149f:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00014a3:	50                   	push   eax
c00014a4:	e8 7a fb ff ff       	call   c0001023 <dlmalloc>
c00014a9:	83 c4 10             	add    esp,0x10
c00014ac:	89 1d d4 63 02 c0    	mov    DWORD PTR ds:0xc00263d4,ebx
c00014b2:	85 c0                	test   eax,eax
c00014b4:	0f 84 92 00 00 00    	je     c000154c <iALLOc+0x19b>
c00014ba:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014bd:	8d 78 f8             	lea    edi,[eax-0x8]
c00014c0:	83 e3 fc             	and    ebx,0xfffffffc
c00014c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014c7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014cc:	74 1e                	je     c00014ec <iALLOc+0x13b>
c00014ce:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014d2:	89 d9                	mov    ecx,ebx
c00014d4:	52                   	push   edx
c00014d5:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014d9:	83 e9 04             	sub    ecx,0x4
c00014dc:	51                   	push   ecx
c00014dd:	6a 00                	push   0x0
c00014df:	50                   	push   eax
c00014e0:	e8 9f f1 ff ff       	call   c0000684 <memset>
c00014e5:	83 c4 10             	add    esp,0x10
c00014e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014f1:	75 14                	jne    c0001507 <iALLOc+0x156>
c00014f3:	8d 04 37             	lea    eax,[edi+esi*1]
c00014f6:	29 f3                	sub    ebx,esi
c00014f8:	8d 48 08             	lea    ecx,[eax+0x8]
c00014fb:	83 cb 01             	or     ebx,0x1
c00014fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001502:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001505:	89 f3                	mov    ebx,esi
c0001507:	31 c0                	xor    eax,eax
c0001509:	4d                   	dec    ebp
c000150a:	8d 4f 08             	lea    ecx,[edi+0x8]
c000150d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001511:	39 c5                	cmp    ebp,eax
c0001513:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001516:	74 2c                	je     c0001544 <iALLOc+0x193>
c0001518:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000151c:	85 c9                	test   ecx,ecx
c000151e:	75 15                	jne    c0001535 <iALLOc+0x184>
c0001520:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001523:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001526:	b9 10 00 00 00       	mov    ecx,0x10
c000152b:	83 fe 0f             	cmp    esi,0xf
c000152e:	76 05                	jbe    c0001535 <iALLOc+0x184>
c0001530:	83 e6 f8             	and    esi,0xfffffff8
c0001533:	89 f1                	mov    ecx,esi
c0001535:	89 ce                	mov    esi,ecx
c0001537:	29 cb                	sub    ebx,ecx
c0001539:	83 ce 01             	or     esi,0x1
c000153c:	40                   	inc    eax
c000153d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001540:	01 cf                	add    edi,ecx
c0001542:	eb c6                	jmp    c000150a <iALLOc+0x159>
c0001544:	83 cb 01             	or     ebx,0x1
c0001547:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000154a:	eb 08                	jmp    c0001554 <iALLOc+0x1a3>
c000154c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001558:	83 c4 2c             	add    esp,0x2c
c000155b:	5b                   	pop    ebx
c000155c:	5e                   	pop    esi
c000155d:	5f                   	pop    edi
c000155e:	5d                   	pop    ebp
c000155f:	c3                   	ret    

c0001560 <dlrealloc>:
c0001560:	55                   	push   ebp
c0001561:	57                   	push   edi
c0001562:	56                   	push   esi
c0001563:	53                   	push   ebx
c0001564:	83 ec 1c             	sub    esp,0x1c
c0001567:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000156b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000156f:	85 db                	test   ebx,ebx
c0001571:	75 10                	jne    c0001583 <dlrealloc+0x23>
c0001573:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001577:	83 c4 1c             	add    esp,0x1c
c000157a:	5b                   	pop    ebx
c000157b:	5e                   	pop    esi
c000157c:	5f                   	pop    edi
c000157d:	5d                   	pop    ebp
c000157e:	e9 a0 fa ff ff       	jmp    c0001023 <dlmalloc>
c0001583:	83 f8 df             	cmp    eax,0xffffffdf
c0001586:	76 07                	jbe    c000158f <dlrealloc+0x2f>
c0001588:	31 db                	xor    ebx,ebx
c000158a:	e9 6a 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c000158f:	83 c0 0b             	add    eax,0xb
c0001592:	bd 10 00 00 00       	mov    ebp,0x10
c0001597:	83 f8 0f             	cmp    eax,0xf
c000159a:	76 05                	jbe    c00015a1 <dlrealloc+0x41>
c000159c:	83 e0 f8             	and    eax,0xfffffff8
c000159f:	89 c5                	mov    ebp,eax
c00015a1:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00015a4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00015a7:	89 c6                	mov    esi,eax
c00015a9:	83 e6 fc             	and    esi,0xfffffffc
c00015ac:	a8 02                	test   al,0x2
c00015ae:	75 d8                	jne    c0001588 <dlrealloc+0x28>
c00015b0:	39 f5                	cmp    ebp,esi
c00015b2:	0f 86 04 01 00 00    	jbe    c00016bc <dlrealloc+0x15c>
c00015b8:	8d 14 37             	lea    edx,[edi+esi*1]
c00015bb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015be:	39 15 ac 60 02 c0    	cmp    DWORD PTR ds:0xc00260ac,edx
c00015c4:	75 33                	jne    c00015f9 <dlrealloc+0x99>
c00015c6:	83 e1 fc             	and    ecx,0xfffffffc
c00015c9:	01 f1                	add    ecx,esi
c00015cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015cf:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015d2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015d6:	77 49                	ja     c0001621 <dlrealloc+0xc1>
c00015d8:	01 ef                	add    edi,ebp
c00015da:	83 e0 01             	and    eax,0x1
c00015dd:	09 e8                	or     eax,ebp
c00015df:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015e2:	89 3d ac 60 02 c0    	mov    DWORD PTR ds:0xc00260ac,edi
c00015e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015ec:	29 e8                	sub    eax,ebp
c00015ee:	83 c8 01             	or     eax,0x1
c00015f1:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015f4:	e9 00 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c00015f9:	89 c8                	mov    eax,ecx
c00015fb:	83 e0 fe             	and    eax,0xfffffffe
c00015fe:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001603:	75 1c                	jne    c0001621 <dlrealloc+0xc1>
c0001605:	83 e1 fc             	and    ecx,0xfffffffc
c0001608:	01 f1                	add    ecx,esi
c000160a:	39 cd                	cmp    ebp,ecx
c000160c:	77 13                	ja     c0001621 <dlrealloc+0xc1>
c000160e:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001611:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001614:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001617:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000161a:	89 ce                	mov    esi,ecx
c000161c:	e9 9b 00 00 00       	jmp    c00016bc <dlrealloc+0x15c>
c0001621:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001625:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001628:	83 ec 0c             	sub    esp,0xc
c000162b:	50                   	push   eax
c000162c:	e8 f2 f9 ff ff       	call   c0001023 <dlmalloc>
c0001631:	83 c4 10             	add    esp,0x10
c0001634:	85 c0                	test   eax,eax
c0001636:	0f 84 4c ff ff ff    	je     c0001588 <dlrealloc+0x28>
c000163c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000163f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001643:	39 ca                	cmp    edx,ecx
c0001645:	75 0a                	jne    c0001651 <dlrealloc+0xf1>
c0001647:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000164a:	83 e0 fc             	and    eax,0xfffffffc
c000164d:	01 c6                	add    esi,eax
c000164f:	eb 6b                	jmp    c00016bc <dlrealloc+0x15c>
c0001651:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001654:	83 f9 27             	cmp    ecx,0x27
c0001657:	76 08                	jbe    c0001661 <dlrealloc+0x101>
c0001659:	89 de                	mov    esi,ebx
c000165b:	89 c7                	mov    edi,eax
c000165d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000165f:	eb 43                	jmp    c00016a4 <dlrealloc+0x144>
c0001661:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001663:	83 f9 13             	cmp    ecx,0x13
c0001666:	89 10                	mov    DWORD PTR [eax],edx
c0001668:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000166b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000166e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001671:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001674:	76 2e                	jbe    c00016a4 <dlrealloc+0x144>
c0001676:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001679:	83 f9 1b             	cmp    ecx,0x1b
c000167c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000167f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001682:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001685:	76 1d                	jbe    c00016a4 <dlrealloc+0x144>
c0001687:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000168a:	83 f9 23             	cmp    ecx,0x23
c000168d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001690:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001693:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001696:	76 0c                	jbe    c00016a4 <dlrealloc+0x144>
c0001698:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000169b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000169e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00016a1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00016a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016a8:	83 ec 0c             	sub    esp,0xc
c00016ab:	53                   	push   ebx
c00016ac:	e8 17 f6 ff ff       	call   c0000cc8 <dlfree>
c00016b1:	83 c4 10             	add    esp,0x10
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	89 c3                	mov    ebx,eax
c00016ba:	eb 3d                	jmp    c00016f9 <dlrealloc+0x199>
c00016bc:	89 f2                	mov    edx,esi
c00016be:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016c1:	29 ea                	sub    edx,ebp
c00016c3:	83 e1 01             	and    ecx,0x1
c00016c6:	8d 04 37             	lea    eax,[edi+esi*1]
c00016c9:	83 fa 0f             	cmp    edx,0xf
c00016cc:	77 0b                	ja     c00016d9 <dlrealloc+0x179>
c00016ce:	09 ce                	or     esi,ecx
c00016d0:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016d3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016d7:	eb 20                	jmp    c00016f9 <dlrealloc+0x199>
c00016d9:	01 ef                	add    edi,ebp
c00016db:	83 ec 0c             	sub    esp,0xc
c00016de:	09 cd                	or     ebp,ecx
c00016e0:	83 ca 01             	or     edx,0x1
c00016e3:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016e6:	83 c7 08             	add    edi,0x8
c00016e9:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016ec:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016f0:	57                   	push   edi
c00016f1:	e8 d2 f5 ff ff       	call   c0000cc8 <dlfree>
c00016f6:	83 c4 10             	add    esp,0x10
c00016f9:	83 c4 1c             	add    esp,0x1c
c00016fc:	89 d8                	mov    eax,ebx
c00016fe:	5b                   	pop    ebx
c00016ff:	5e                   	pop    esi
c0001700:	5f                   	pop    edi
c0001701:	5d                   	pop    ebp
c0001702:	c3                   	ret    

c0001703 <dlmemalign>:
c0001703:	55                   	push   ebp
c0001704:	57                   	push   edi
c0001705:	56                   	push   esi
c0001706:	53                   	push   ebx
c0001707:	83 ec 0c             	sub    esp,0xc
c000170a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000170e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001712:	83 fa 08             	cmp    edx,0x8
c0001715:	77 10                	ja     c0001727 <dlmemalign+0x24>
c0001717:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000171b:	83 c4 0c             	add    esp,0xc
c000171e:	5b                   	pop    ebx
c000171f:	5e                   	pop    esi
c0001720:	5f                   	pop    edi
c0001721:	5d                   	pop    ebp
c0001722:	e9 fc f8 ff ff       	jmp    c0001023 <dlmalloc>
c0001727:	bf 10 00 00 00       	mov    edi,0x10
c000172c:	83 fa 0f             	cmp    edx,0xf
c000172f:	76 13                	jbe    c0001744 <dlmemalign+0x41>
c0001731:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001734:	85 d1                	test   ecx,edx
c0001736:	75 04                	jne    c000173c <dlmemalign+0x39>
c0001738:	89 d7                	mov    edi,edx
c000173a:	eb 08                	jmp    c0001744 <dlmemalign+0x41>
c000173c:	39 d7                	cmp    edi,edx
c000173e:	73 04                	jae    c0001744 <dlmemalign+0x41>
c0001740:	01 ff                	add    edi,edi
c0001742:	eb f8                	jmp    c000173c <dlmemalign+0x39>
c0001744:	83 f8 df             	cmp    eax,0xffffffdf
c0001747:	76 07                	jbe    c0001750 <dlmemalign+0x4d>
c0001749:	31 c0                	xor    eax,eax
c000174b:	e9 ce 00 00 00       	jmp    c000181e <dlmemalign+0x11b>
c0001750:	83 c0 0b             	add    eax,0xb
c0001753:	bd 10 00 00 00       	mov    ebp,0x10
c0001758:	83 f8 0f             	cmp    eax,0xf
c000175b:	76 05                	jbe    c0001762 <dlmemalign+0x5f>
c000175d:	83 e0 f8             	and    eax,0xfffffff8
c0001760:	89 c5                	mov    ebp,eax
c0001762:	83 ec 0c             	sub    esp,0xc
c0001765:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001769:	50                   	push   eax
c000176a:	e8 b4 f8 ff ff       	call   c0001023 <dlmalloc>
c000176f:	83 c4 10             	add    esp,0x10
c0001772:	89 c1                	mov    ecx,eax
c0001774:	85 c0                	test   eax,eax
c0001776:	74 d1                	je     c0001749 <dlmemalign+0x46>
c0001778:	31 d2                	xor    edx,edx
c000177a:	8d 70 f8             	lea    esi,[eax-0x8]
c000177d:	f7 f7                	div    edi
c000177f:	85 d2                	test   edx,edx
c0001781:	74 62                	je     c00017e5 <dlmemalign+0xe2>
c0001783:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001787:	89 f8                	mov    eax,edi
c0001789:	f7 d8                	neg    eax
c000178b:	21 c3                	and    ebx,eax
c000178d:	83 eb 08             	sub    ebx,0x8
c0001790:	89 d8                	mov    eax,ebx
c0001792:	29 f0                	sub    eax,esi
c0001794:	83 f8 0f             	cmp    eax,0xf
c0001797:	77 02                	ja     c000179b <dlmemalign+0x98>
c0001799:	01 fb                	add    ebx,edi
c000179b:	89 d8                	mov    eax,ebx
c000179d:	29 f0                	sub    eax,esi
c000179f:	89 c6                	mov    esi,eax
c00017a1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a4:	89 c2                	mov    edx,eax
c00017a6:	83 e2 fc             	and    edx,0xfffffffc
c00017a9:	29 f2                	sub    edx,esi
c00017ab:	a8 02                	test   al,0x2
c00017ad:	74 10                	je     c00017bf <dlmemalign+0xbc>
c00017af:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017b2:	83 ca 02             	or     edx,0x2
c00017b5:	8d 43 08             	lea    eax,[ebx+0x8]
c00017b8:	89 33                	mov    DWORD PTR [ebx],esi
c00017ba:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017bd:	eb 5f                	jmp    c000181e <dlmemalign+0x11b>
c00017bf:	83 ec 0c             	sub    esp,0xc
c00017c2:	89 d0                	mov    eax,edx
c00017c4:	83 c8 01             	or     eax,0x1
c00017c7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017ca:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017cf:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 f0                	or     eax,esi
c00017d7:	89 de                	mov    esi,ebx
c00017d9:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017dc:	51                   	push   ecx
c00017dd:	e8 e6 f4 ff ff       	call   c0000cc8 <dlfree>
c00017e2:	83 c4 10             	add    esp,0x10
c00017e5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017e8:	a8 02                	test   al,0x2
c00017ea:	75 2f                	jne    c000181b <dlmemalign+0x118>
c00017ec:	83 e0 fc             	and    eax,0xfffffffc
c00017ef:	8d 55 10             	lea    edx,[ebp+0x10]
c00017f2:	39 c2                	cmp    edx,eax
c00017f4:	73 25                	jae    c000181b <dlmemalign+0x118>
c00017f6:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017f9:	83 ec 0c             	sub    esp,0xc
c00017fc:	29 e8                	sub    eax,ebp
c00017fe:	83 c2 08             	add    edx,0x8
c0001801:	83 c8 01             	or     eax,0x1
c0001804:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001807:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000180a:	83 e0 01             	and    eax,0x1
c000180d:	09 c5                	or     ebp,eax
c000180f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001812:	52                   	push   edx
c0001813:	e8 b0 f4 ff ff       	call   c0000cc8 <dlfree>
c0001818:	83 c4 10             	add    esp,0x10
c000181b:	8d 46 08             	lea    eax,[esi+0x8]
c000181e:	83 c4 0c             	add    esp,0xc
c0001821:	5b                   	pop    ebx
c0001822:	5e                   	pop    esi
c0001823:	5f                   	pop    edi
c0001824:	5d                   	pop    ebp
c0001825:	c3                   	ret    

c0001826 <dlcalloc>:
c0001826:	53                   	push   ebx
c0001827:	83 ec 14             	sub    esp,0x14
c000182a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000182e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001833:	50                   	push   eax
c0001834:	e8 ea f7 ff ff       	call   c0001023 <dlmalloc>
c0001839:	83 c4 10             	add    esp,0x10
c000183c:	89 c3                	mov    ebx,eax
c000183e:	85 c0                	test   eax,eax
c0001840:	74 77                	je     c00018b9 <dlcalloc+0x93>
c0001842:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001845:	89 d0                	mov    eax,edx
c0001847:	83 e0 fc             	and    eax,0xfffffffc
c000184a:	80 e2 02             	and    dl,0x2
c000184d:	75 5a                	jne    c00018a9 <dlcalloc+0x83>
c000184f:	83 e8 04             	sub    eax,0x4
c0001852:	83 f8 27             	cmp    eax,0x27
c0001855:	76 03                	jbe    c000185a <dlcalloc+0x34>
c0001857:	51                   	push   ecx
c0001858:	eb 53                	jmp    c00018ad <dlcalloc+0x87>
c000185a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001860:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001867:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000186e:	83 f8 13             	cmp    eax,0x13
c0001871:	76 46                	jbe    c00018b9 <dlcalloc+0x93>
c0001873:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000187a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001881:	83 f8 1b             	cmp    eax,0x1b
c0001884:	76 33                	jbe    c00018b9 <dlcalloc+0x93>
c0001886:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000188d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001894:	83 f8 23             	cmp    eax,0x23
c0001897:	76 20                	jbe    c00018b9 <dlcalloc+0x93>
c0001899:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00018a0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00018a7:	eb 10                	jmp    c00018b9 <dlcalloc+0x93>
c00018a9:	83 e8 08             	sub    eax,0x8
c00018ac:	52                   	push   edx
c00018ad:	50                   	push   eax
c00018ae:	6a 00                	push   0x0
c00018b0:	53                   	push   ebx
c00018b1:	e8 ce ed ff ff       	call   c0000684 <memset>
c00018b6:	83 c4 10             	add    esp,0x10
c00018b9:	89 d8                	mov    eax,ebx
c00018bb:	83 c4 08             	add    esp,0x8
c00018be:	5b                   	pop    ebx
c00018bf:	c3                   	ret    

c00018c0 <dlcfree>:
c00018c0:	e9 03 f4 ff ff       	jmp    c0000cc8 <dlfree>

c00018c5 <dlindependent_calloc>:
c00018c5:	83 ec 28             	sub    esp,0x28
c00018c8:	b9 03 00 00 00       	mov    ecx,0x3
c00018cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018e1:	e8 cb fa ff ff       	call   c00013b1 <iALLOc>
c00018e6:	83 c4 2c             	add    esp,0x2c
c00018e9:	c3                   	ret    

c00018ea <dlindependent_comalloc>:
c00018ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018f2:	31 c9                	xor    ecx,ecx
c00018f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018fc:	e9 b0 fa ff ff       	jmp    c00013b1 <iALLOc>

c0001901 <dlvalloc>:
c0001901:	83 ec 0c             	sub    esp,0xc
c0001904:	83 3d 80 60 02 c0 00 	cmp    DWORD PTR ds:0xc0026080,0x0
c000190b:	75 0a                	jne    c0001917 <dlvalloc+0x16>
c000190d:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0001912:	e8 ca f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001917:	50                   	push   eax
c0001918:	50                   	push   eax
c0001919:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000191d:	ff 35 dc 63 02 c0    	push   DWORD PTR ds:0xc00263dc
c0001923:	e8 db fd ff ff       	call   c0001703 <dlmemalign>
c0001928:	83 c4 1c             	add    esp,0x1c
c000192b:	c3                   	ret    

c000192c <dlpvalloc>:
c000192c:	83 ec 0c             	sub    esp,0xc
c000192f:	83 3d 80 60 02 c0 00 	cmp    DWORD PTR ds:0xc0026080,0x0
c0001936:	75 0a                	jne    c0001942 <dlpvalloc+0x16>
c0001938:	b8 80 60 02 c0       	mov    eax,0xc0026080
c000193d:	e8 9f f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001942:	a1 dc 63 02 c0       	mov    eax,ds:0xc00263dc
c0001947:	89 c1                	mov    ecx,eax
c0001949:	52                   	push   edx
c000194a:	f7 d9                	neg    ecx
c000194c:	52                   	push   edx
c000194d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001951:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001955:	21 ca                	and    edx,ecx
c0001957:	52                   	push   edx
c0001958:	50                   	push   eax
c0001959:	e8 a5 fd ff ff       	call   c0001703 <dlmemalign>
c000195e:	83 c4 1c             	add    esp,0x1c
c0001961:	c3                   	ret    

c0001962 <dlmalloc_trim>:
c0001962:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0001967:	e8 75 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c000196c:	31 c0                	xor    eax,eax
c000196e:	c3                   	ret    

c000196f <dlmalloc_usable_size>:
c000196f:	53                   	push   ebx
c0001970:	31 c0                	xor    eax,eax
c0001972:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001976:	85 c9                	test   ecx,ecx
c0001978:	74 24                	je     c000199e <dlmalloc_usable_size+0x2f>
c000197a:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000197d:	f6 c2 02             	test   dl,0x2
c0001980:	74 08                	je     c000198a <dlmalloc_usable_size+0x1b>
c0001982:	83 e2 fc             	and    edx,0xfffffffc
c0001985:	8d 42 f8             	lea    eax,[edx-0x8]
c0001988:	eb 14                	jmp    c000199e <dlmalloc_usable_size+0x2f>
c000198a:	89 d3                	mov    ebx,edx
c000198c:	31 c0                	xor    eax,eax
c000198e:	83 e3 fe             	and    ebx,0xfffffffe
c0001991:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001996:	74 06                	je     c000199e <dlmalloc_usable_size+0x2f>
c0001998:	83 e2 fc             	and    edx,0xfffffffc
c000199b:	8d 42 fc             	lea    eax,[edx-0x4]
c000199e:	5b                   	pop    ebx
c000199f:	c3                   	ret    

c00019a0 <dlmallinfo>:
c00019a0:	55                   	push   ebp
c00019a1:	57                   	push   edi
c00019a2:	56                   	push   esi
c00019a3:	53                   	push   ebx
c00019a4:	83 ec 08             	sub    esp,0x8
c00019a7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019ab:	83 3d ac 60 02 c0 00 	cmp    DWORD PTR ds:0xc00260ac,0x0
c00019b2:	75 0a                	jne    c00019be <dlmallinfo+0x1e>
c00019b4:	b8 80 60 02 c0       	mov    eax,0xc0026080
c00019b9:	e8 23 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c00019be:	a1 ac 60 02 c0       	mov    eax,ds:0xc00260ac
c00019c3:	31 ed                	xor    ebp,ebp
c00019c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019c8:	31 c9                	xor    ecx,ecx
c00019ca:	83 e0 fc             	and    eax,0xfffffffc
c00019cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d1:	31 c0                	xor    eax,eax
c00019d3:	8b 14 85 84 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f7c]
c00019da:	85 d2                	test   edx,edx
c00019dc:	74 0e                	je     c00019ec <dlmallinfo+0x4c>
c00019de:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019e1:	45                   	inc    ebp
c00019e2:	83 e6 fc             	and    esi,0xfffffffc
c00019e5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019e8:	01 f1                	add    ecx,esi
c00019ea:	eb ee                	jmp    c00019da <dlmallinfo+0x3a>
c00019ec:	40                   	inc    eax
c00019ed:	83 f8 0a             	cmp    eax,0xa
c00019f0:	75 e1                	jne    c00019d3 <dlmallinfo+0x33>
c00019f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019fd:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a00:	b8 b4 60 02 c0       	mov    eax,0xc00260b4
c0001a05:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a08:	39 f0                	cmp    eax,esi
c0001a0a:	74 10                	je     c0001a1c <dlmallinfo+0x7c>
c0001a0c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a0f:	ff 04 24             	inc    DWORD PTR [esp]
c0001a12:	83 e7 fc             	and    edi,0xfffffffc
c0001a15:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a18:	01 fa                	add    edx,edi
c0001a1a:	eb ec                	jmp    c0001a08 <dlmallinfo+0x68>
c0001a1c:	83 c0 08             	add    eax,0x8
c0001a1f:	3d ac 63 02 c0       	cmp    eax,0xc00263ac
c0001a24:	75 df                	jne    c0001a05 <dlmallinfo+0x65>
c0001a26:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a29:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a2c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a2f:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c0001a34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a37:	89 03                	mov    DWORD PTR [ebx],eax
c0001a39:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a3c:	8b 35 d0 63 02 c0    	mov    esi,DWORD PTR ds:0xc00263d0
c0001a42:	29 d0                	sub    eax,edx
c0001a44:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a47:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a4a:	8b 35 e4 63 02 c0    	mov    esi,DWORD PTR ds:0xc00263e4
c0001a50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a54:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a57:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a5a:	8b 35 f4 63 02 c0    	mov    esi,DWORD PTR ds:0xc00263f4
c0001a60:	89 d8                	mov    eax,ebx
c0001a62:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a65:	83 c4 08             	add    esp,0x8
c0001a68:	5b                   	pop    ebx
c0001a69:	5e                   	pop    esi
c0001a6a:	5f                   	pop    edi
c0001a6b:	5d                   	pop    ebp
c0001a6c:	c2 04 00             	ret    0x4

c0001a6f <dlmalloc_stats>:
c0001a6f:	83 ec 30             	sub    esp,0x30
c0001a72:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a76:	50                   	push   eax
c0001a77:	e8 24 ff ff ff       	call   c00019a0 <dlmallinfo>
c0001a7c:	83 c4 30             	add    esp,0x30
c0001a7f:	c3                   	ret    

c0001a80 <dlmallopt>:
c0001a80:	56                   	push   esi
c0001a81:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0001a86:	53                   	push   ebx
c0001a87:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a8f:	e8 4d f1 ff ff       	call   c0000be1 <malloc_consolidate>
c0001a94:	8d 46 04             	lea    eax,[esi+0x4]
c0001a97:	83 f8 05             	cmp    eax,0x5
c0001a9a:	77 67                	ja     c0001b03 <dlmallopt+0x83>
c0001a9c:	ff 24 85 64 1f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde09c]
c0001aa3:	83 fb 50             	cmp    ebx,0x50
c0001aa6:	77 5b                	ja     c0001b03 <dlmallopt+0x83>
c0001aa8:	ba 08 00 00 00       	mov    edx,0x8
c0001aad:	85 db                	test   ebx,ebx
c0001aaf:	74 12                	je     c0001ac3 <dlmallopt+0x43>
c0001ab1:	83 c3 0b             	add    ebx,0xb
c0001ab4:	ba 10 00 00 00       	mov    edx,0x10
c0001ab9:	83 fb 0f             	cmp    ebx,0xf
c0001abc:	76 05                	jbe    c0001ac3 <dlmallopt+0x43>
c0001abe:	89 da                	mov    edx,ebx
c0001ac0:	83 e2 f8             	and    edx,0xfffffff8
c0001ac3:	a1 80 60 02 c0       	mov    eax,ds:0xc0026080
c0001ac8:	83 e0 03             	and    eax,0x3
c0001acb:	09 d0                	or     eax,edx
c0001acd:	a3 80 60 02 c0       	mov    ds:0xc0026080,eax
c0001ad2:	eb 31                	jmp    c0001b05 <dlmallopt+0x85>
c0001ad4:	89 1d c4 63 02 c0    	mov    DWORD PTR ds:0xc00263c4,ebx
c0001ada:	eb 06                	jmp    c0001ae2 <dlmallopt+0x62>
c0001adc:	89 1d c8 63 02 c0    	mov    DWORD PTR ds:0xc00263c8,ebx
c0001ae2:	be 01 00 00 00       	mov    esi,0x1
c0001ae7:	eb 1c                	jmp    c0001b05 <dlmallopt+0x85>
c0001ae9:	89 1d cc 63 02 c0    	mov    DWORD PTR ds:0xc00263cc,ebx
c0001aef:	eb f1                	jmp    c0001ae2 <dlmallopt+0x62>
c0001af1:	31 f6                	xor    esi,esi
c0001af3:	85 db                	test   ebx,ebx
c0001af5:	75 0e                	jne    c0001b05 <dlmallopt+0x85>
c0001af7:	c7 05 d4 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00263d4,0x0
c0001b01:	eb df                	jmp    c0001ae2 <dlmallopt+0x62>
c0001b03:	31 f6                	xor    esi,esi
c0001b05:	89 f0                	mov    eax,esi
c0001b07:	5b                   	pop    ebx
c0001b08:	5e                   	pop    esi
c0001b09:	c3                   	ret    

c0001b0a <disk_status>:
c0001b0a:	31 c0                	xor    eax,eax
c0001b0c:	c3                   	ret    

c0001b0d <disk_initialize>:
c0001b0d:	31 c0                	xor    eax,eax
c0001b0f:	c3                   	ret    

c0001b10 <disk_read>:
c0001b10:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b15:	0f b6 04 85 e0 7a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8520]
c0001b1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b21:	e9 32 95 01 00       	jmp    c001b058 <fatWrapperReadDisk>

c0001b26 <disk_write>:
c0001b26:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b2b:	0f b6 04 85 e0 7a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8520]
c0001b33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b37:	e9 64 95 01 00       	jmp    c001b0a0 <fatWrapperWriteDisk>

c0001b3c <disk_ioctl>:
c0001b3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b45:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b4a:	0f b6 04 85 e0 7a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8520]
c0001b52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b56:	e9 8d 95 01 00       	jmp    c001b0e8 <fatWrapperIoctl>

c0001b5b <ld_word>:
c0001b5b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b5f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b62:	c1 e2 08             	shl    edx,0x8
c0001b65:	09 d0                	or     eax,edx
c0001b67:	c3                   	ret    

c0001b68 <ld_dword>:
c0001b68:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b6c:	89 d1                	mov    ecx,edx
c0001b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b72:	c1 e1 08             	shl    ecx,0x8
c0001b75:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b78:	09 ca                	or     edx,ecx
c0001b7a:	c1 e2 08             	shl    edx,0x8
c0001b7d:	09 d0                	or     eax,edx
c0001b7f:	c3                   	ret    

c0001b80 <ld_qword>:
c0001b80:	57                   	push   edi
c0001b81:	56                   	push   esi
c0001b82:	53                   	push   ebx
c0001b83:	31 db                	xor    ebx,ebx
c0001b85:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b88:	89 df                	mov    edi,ebx
c0001b8a:	89 ce                	mov    esi,ecx
c0001b8c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001b90:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b94:	c1 e6 08             	shl    esi,0x8
c0001b97:	09 f2                	or     edx,esi
c0001b99:	89 d6                	mov    esi,edx
c0001b9b:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001b9f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ba3:	c1 e6 08             	shl    esi,0x8
c0001ba6:	09 f2                	or     edx,esi
c0001ba8:	89 d6                	mov    esi,edx
c0001baa:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001bae:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bb2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bb5:	c1 e6 08             	shl    esi,0x8
c0001bb8:	89 fb                	mov    ebx,edi
c0001bba:	09 f2                	or     edx,esi
c0001bbc:	89 d1                	mov    ecx,edx
c0001bbe:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bc2:	c1 e1 08             	shl    ecx,0x8
c0001bc5:	89 da                	mov    edx,ebx
c0001bc7:	09 c8                	or     eax,ecx
c0001bc9:	5b                   	pop    ebx
c0001bca:	5e                   	pop    esi
c0001bcb:	5f                   	pop    edi
c0001bcc:	c3                   	ret    

c0001bcd <st_word>:
c0001bcd:	66 89 10             	mov    WORD PTR [eax],dx
c0001bd0:	c3                   	ret    

c0001bd1 <st_dword>:
c0001bd1:	89 10                	mov    DWORD PTR [eax],edx
c0001bd3:	c3                   	ret    

c0001bd4 <st_qword>:
c0001bd4:	89 10                	mov    DWORD PTR [eax],edx
c0001bd6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001bd9:	c3                   	ret    

c0001bda <mem_cpy>:
c0001bda:	85 c9                	test   ecx,ecx
c0001bdc:	74 10                	je     c0001bee <mem_cpy+0x14>
c0001bde:	57                   	push   edi
c0001bdf:	01 c1                	add    ecx,eax
c0001be1:	56                   	push   esi
c0001be2:	89 c7                	mov    edi,eax
c0001be4:	89 d6                	mov    esi,edx
c0001be6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001be7:	39 f9                	cmp    ecx,edi
c0001be9:	75 fb                	jne    c0001be6 <mem_cpy+0xc>
c0001beb:	5e                   	pop    esi
c0001bec:	5f                   	pop    edi
c0001bed:	c3                   	ret    
c0001bee:	c3                   	ret    

c0001bef <mem_set>:
c0001bef:	01 c1                	add    ecx,eax
c0001bf1:	40                   	inc    eax
c0001bf2:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001bf5:	39 c8                	cmp    eax,ecx
c0001bf7:	75 f8                	jne    c0001bf1 <mem_set+0x2>
c0001bf9:	c3                   	ret    

c0001bfa <mem_cmp>:
c0001bfa:	57                   	push   edi
c0001bfb:	56                   	push   esi
c0001bfc:	89 c6                	mov    esi,eax
c0001bfe:	53                   	push   ebx
c0001bff:	46                   	inc    esi
c0001c00:	42                   	inc    edx
c0001c01:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001c05:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c09:	29 fb                	sub    ebx,edi
c0001c0b:	89 cf                	mov    edi,ecx
c0001c0d:	29 f7                	sub    edi,esi
c0001c0f:	01 c7                	add    edi,eax
c0001c11:	74 04                	je     c0001c17 <mem_cmp+0x1d>
c0001c13:	85 db                	test   ebx,ebx
c0001c15:	74 e8                	je     c0001bff <mem_cmp+0x5>
c0001c17:	89 d8                	mov    eax,ebx
c0001c19:	5b                   	pop    ebx
c0001c1a:	5e                   	pop    esi
c0001c1b:	5f                   	pop    edi
c0001c1c:	c3                   	ret    

c0001c1d <chk_chr>:
c0001c1d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c20:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c23:	74 07                	je     c0001c2c <chk_chr+0xf>
c0001c25:	39 d1                	cmp    ecx,edx
c0001c27:	74 03                	je     c0001c2c <chk_chr+0xf>
c0001c29:	40                   	inc    eax
c0001c2a:	eb f1                	jmp    c0001c1d <chk_chr>
c0001c2c:	89 c8                	mov    eax,ecx
c0001c2e:	c3                   	ret    

c0001c2f <dbc_1st>:
c0001c2f:	31 c0                	xor    eax,eax
c0001c31:	c3                   	ret    

c0001c32 <dbc_2nd>:
c0001c32:	31 c0                	xor    eax,eax
c0001c34:	c3                   	ret    

c0001c35 <tchar2uni>:
c0001c35:	57                   	push   edi
c0001c36:	89 c7                	mov    edi,eax
c0001c38:	56                   	push   esi
c0001c39:	53                   	push   ebx
c0001c3a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c3c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c3e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c41:	84 c9                	test   cl,cl
c0001c43:	78 0a                	js     c0001c4f <tchar2uni+0x1a>
c0001c45:	0f b6 d1             	movzx  edx,cl
c0001c48:	89 f3                	mov    ebx,esi
c0001c4a:	e9 9f 00 00 00       	jmp    c0001cee <tchar2uni+0xb9>
c0001c4f:	88 ca                	mov    dl,cl
c0001c51:	83 e2 e0             	and    edx,0xffffffe0
c0001c54:	80 fa c0             	cmp    dl,0xc0
c0001c57:	75 0c                	jne    c0001c65 <tchar2uni+0x30>
c0001c59:	89 ca                	mov    edx,ecx
c0001c5b:	b9 01 00 00 00       	mov    ecx,0x1
c0001c60:	83 e2 1f             	and    edx,0x1f
c0001c63:	eb 2e                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c65:	88 ca                	mov    dl,cl
c0001c67:	83 e2 f0             	and    edx,0xfffffff0
c0001c6a:	80 fa e0             	cmp    dl,0xe0
c0001c6d:	75 0c                	jne    c0001c7b <tchar2uni+0x46>
c0001c6f:	89 ca                	mov    edx,ecx
c0001c71:	b9 02 00 00 00       	mov    ecx,0x2
c0001c76:	83 e2 0f             	and    edx,0xf
c0001c79:	eb 18                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c7b:	88 ca                	mov    dl,cl
c0001c7d:	83 e2 f8             	and    edx,0xfffffff8
c0001c80:	88 d0                	mov    al,dl
c0001c82:	83 ca ff             	or     edx,0xffffffff
c0001c85:	3c f0                	cmp    al,0xf0
c0001c87:	75 6c                	jne    c0001cf5 <tchar2uni+0xc0>
c0001c89:	89 ca                	mov    edx,ecx
c0001c8b:	b9 03 00 00 00       	mov    ecx,0x3
c0001c90:	83 e2 07             	and    edx,0x7
c0001c93:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c97:	46                   	inc    esi
c0001c98:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c9b:	88 c8                	mov    al,cl
c0001c9d:	83 e0 c0             	and    eax,0xffffffc0
c0001ca0:	3c 80                	cmp    al,0x80
c0001ca2:	75 4e                	jne    c0001cf2 <tchar2uni+0xbd>
c0001ca4:	c1 e2 06             	shl    edx,0x6
c0001ca7:	83 e1 3f             	and    ecx,0x3f
c0001caa:	09 ca                	or     edx,ecx
c0001cac:	39 de                	cmp    esi,ebx
c0001cae:	75 e7                	jne    c0001c97 <tchar2uni+0x62>
c0001cb0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cb3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cb9:	77 37                	ja     c0001cf2 <tchar2uni+0xbd>
c0001cbb:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cc1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cc7:	76 29                	jbe    c0001cf2 <tchar2uni+0xbd>
c0001cc9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ccf:	76 1d                	jbe    c0001cee <tchar2uni+0xb9>
c0001cd1:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001cd7:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001cdd:	c1 e1 06             	shl    ecx,0x6
c0001ce0:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001ce6:	09 ca                	or     edx,ecx
c0001ce8:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001cee:	89 1f                	mov    DWORD PTR [edi],ebx
c0001cf0:	eb 03                	jmp    c0001cf5 <tchar2uni+0xc0>
c0001cf2:	83 ca ff             	or     edx,0xffffffff
c0001cf5:	5b                   	pop    ebx
c0001cf6:	89 d0                	mov    eax,edx
c0001cf8:	5e                   	pop    esi
c0001cf9:	5f                   	pop    edi
c0001cfa:	c3                   	ret    

c0001cfb <put_utf>:
c0001cfb:	53                   	push   ebx
c0001cfc:	83 f8 7f             	cmp    eax,0x7f
c0001cff:	89 c3                	mov    ebx,eax
c0001d01:	b0 00                	mov    al,0x0
c0001d03:	77 11                	ja     c0001d16 <put_utf+0x1b>
c0001d05:	85 c9                	test   ecx,ecx
c0001d07:	0f 84 e5 00 00 00    	je     c0001df2 <put_utf+0xf7>
c0001d0d:	88 1a                	mov    BYTE PTR [edx],bl
c0001d0f:	b0 01                	mov    al,0x1
c0001d11:	e9 dc 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d16:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d1c:	77 23                	ja     c0001d41 <put_utf+0x46>
c0001d1e:	83 f9 01             	cmp    ecx,0x1
c0001d21:	0f 86 cb 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d27:	89 d8                	mov    eax,ebx
c0001d29:	83 e3 3f             	and    ebx,0x3f
c0001d2c:	c1 e8 06             	shr    eax,0x6
c0001d2f:	83 cb 80             	or     ebx,0xffffff80
c0001d32:	83 c8 c0             	or     eax,0xffffffc0
c0001d35:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d38:	88 02                	mov    BYTE PTR [edx],al
c0001d3a:	b0 02                	mov    al,0x2
c0001d3c:	e9 b1 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d41:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d47:	77 40                	ja     c0001d89 <put_utf+0x8e>
c0001d49:	83 f9 02             	cmp    ecx,0x2
c0001d4c:	0f 86 a0 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d52:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d58:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d5e:	0f 86 8e 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d64:	89 d8                	mov    eax,ebx
c0001d66:	c1 e8 0c             	shr    eax,0xc
c0001d69:	83 c8 e0             	or     eax,0xffffffe0
c0001d6c:	88 02                	mov    BYTE PTR [edx],al
c0001d6e:	89 d8                	mov    eax,ebx
c0001d70:	83 e3 3f             	and    ebx,0x3f
c0001d73:	c1 e8 06             	shr    eax,0x6
c0001d76:	83 cb 80             	or     ebx,0xffffff80
c0001d79:	83 e0 3f             	and    eax,0x3f
c0001d7c:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d7f:	83 c8 80             	or     eax,0xffffff80
c0001d82:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d85:	b0 03                	mov    al,0x3
c0001d87:	eb 69                	jmp    c0001df2 <put_utf+0xf7>
c0001d89:	83 f9 03             	cmp    ecx,0x3
c0001d8c:	76 64                	jbe    c0001df2 <put_utf+0xf7>
c0001d8e:	89 d9                	mov    ecx,ebx
c0001d90:	0f b7 c3             	movzx  eax,bx
c0001d93:	66 31 c9             	xor    cx,cx
c0001d96:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d9c:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001da2:	c1 e9 06             	shr    ecx,0x6
c0001da5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001dab:	77 43                	ja     c0001df0 <put_utf+0xf5>
c0001dad:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001db3:	77 3b                	ja     c0001df0 <put_utf+0xf5>
c0001db5:	09 cb                	or     ebx,ecx
c0001db7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001dbd:	89 d8                	mov    eax,ebx
c0001dbf:	c1 e8 12             	shr    eax,0x12
c0001dc2:	83 c8 f0             	or     eax,0xfffffff0
c0001dc5:	88 02                	mov    BYTE PTR [edx],al
c0001dc7:	89 d8                	mov    eax,ebx
c0001dc9:	c1 e8 0c             	shr    eax,0xc
c0001dcc:	83 e0 3f             	and    eax,0x3f
c0001dcf:	83 c8 80             	or     eax,0xffffff80
c0001dd2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001dd5:	89 d8                	mov    eax,ebx
c0001dd7:	83 e3 3f             	and    ebx,0x3f
c0001dda:	c1 e8 06             	shr    eax,0x6
c0001ddd:	83 cb 80             	or     ebx,0xffffff80
c0001de0:	83 e0 3f             	and    eax,0x3f
c0001de3:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001de6:	83 c8 80             	or     eax,0xffffff80
c0001de9:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001dec:	b0 04                	mov    al,0x4
c0001dee:	eb 02                	jmp    c0001df2 <put_utf+0xf7>
c0001df0:	31 c0                	xor    eax,eax
c0001df2:	5b                   	pop    ebx
c0001df3:	c3                   	ret    

c0001df4 <clst2sect>:
c0001df4:	89 c1                	mov    ecx,eax
c0001df6:	83 ea 02             	sub    edx,0x2
c0001df9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001dfc:	83 e8 02             	sub    eax,0x2
c0001dff:	39 d0                	cmp    eax,edx
c0001e01:	76 0d                	jbe    c0001e10 <clst2sect+0x1c>
c0001e03:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001e07:	f7 e2                	mul    edx
c0001e09:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e0c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e0f:	c3                   	ret    
c0001e10:	31 c0                	xor    eax,eax
c0001e12:	31 d2                	xor    edx,edx
c0001e14:	c3                   	ret    

c0001e15 <clmt_clust>:
c0001e15:	57                   	push   edi
c0001e16:	89 cf                	mov    edi,ecx
c0001e18:	56                   	push   esi
c0001e19:	89 d6                	mov    esi,edx
c0001e1b:	53                   	push   ebx
c0001e1c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e20:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e23:	89 f2                	mov    edx,esi
c0001e25:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e27:	c1 ef 09             	shr    edi,0x9
c0001e2a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e2e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e31:	89 f9                	mov    ecx,edi
c0001e33:	31 ff                	xor    edi,edi
c0001e35:	57                   	push   edi
c0001e36:	56                   	push   esi
c0001e37:	51                   	push   ecx
c0001e38:	52                   	push   edx
c0001e39:	e8 66 f1 01 00       	call   c0020fa4 <__udivdi3>
c0001e3e:	83 c4 10             	add    esp,0x10
c0001e41:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e43:	85 d2                	test   edx,edx
c0001e45:	74 10                	je     c0001e57 <clmt_clust+0x42>
c0001e47:	39 d0                	cmp    eax,edx
c0001e49:	72 07                	jb     c0001e52 <clmt_clust+0x3d>
c0001e4b:	29 d0                	sub    eax,edx
c0001e4d:	83 c3 08             	add    ebx,0x8
c0001e50:	eb ef                	jmp    c0001e41 <clmt_clust+0x2c>
c0001e52:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e55:	89 c2                	mov    edx,eax
c0001e57:	5b                   	pop    ebx
c0001e58:	89 d0                	mov    eax,edx
c0001e5a:	5e                   	pop    esi
c0001e5b:	5f                   	pop    edi
c0001e5c:	c3                   	ret    

c0001e5d <pick_lfn>:
c0001e5d:	55                   	push   ebp
c0001e5e:	57                   	push   edi
c0001e5f:	56                   	push   esi
c0001e60:	89 d6                	mov    esi,edx
c0001e62:	53                   	push   ebx
c0001e63:	89 c3                	mov    ebx,eax
c0001e65:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e68:	e8 ee fc ff ff       	call   c0001b5b <ld_word>
c0001e6d:	66 85 c0             	test   ax,ax
c0001e70:	74 04                	je     c0001e76 <pick_lfn+0x19>
c0001e72:	31 c0                	xor    eax,eax
c0001e74:	eb 5c                	jmp    c0001ed2 <pick_lfn+0x75>
c0001e76:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e79:	bd 01 00 00 00       	mov    ebp,0x1
c0001e7e:	83 e1 bf             	and    ecx,0xffffffbf
c0001e81:	31 ff                	xor    edi,edi
c0001e83:	49                   	dec    ecx
c0001e84:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e87:	0f b6 87 80 20 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffddf80]
c0001e8e:	01 f0                	add    eax,esi
c0001e90:	e8 c6 fc ff ff       	call   c0001b5b <ld_word>
c0001e95:	66 85 ed             	test   bp,bp
c0001e98:	74 11                	je     c0001eab <pick_lfn+0x4e>
c0001e9a:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ea0:	77 d0                	ja     c0001e72 <pick_lfn+0x15>
c0001ea2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001ea6:	89 c5                	mov    ebp,eax
c0001ea8:	41                   	inc    ecx
c0001ea9:	eb 04                	jmp    c0001eaf <pick_lfn+0x52>
c0001eab:	66 40                	inc    ax
c0001ead:	75 c3                	jne    c0001e72 <pick_lfn+0x15>
c0001eaf:	47                   	inc    edi
c0001eb0:	83 ff 0d             	cmp    edi,0xd
c0001eb3:	75 d2                	jne    c0001e87 <pick_lfn+0x2a>
c0001eb5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001eb8:	74 13                	je     c0001ecd <pick_lfn+0x70>
c0001eba:	66 85 ed             	test   bp,bp
c0001ebd:	74 0e                	je     c0001ecd <pick_lfn+0x70>
c0001ebf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ec5:	77 ab                	ja     c0001e72 <pick_lfn+0x15>
c0001ec7:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ecd:	b8 01 00 00 00       	mov    eax,0x1
c0001ed2:	5b                   	pop    ebx
c0001ed3:	5e                   	pop    esi
c0001ed4:	5f                   	pop    edi
c0001ed5:	5d                   	pop    ebp
c0001ed6:	c3                   	ret    

c0001ed7 <put_lfn>:
c0001ed7:	55                   	push   ebp
c0001ed8:	31 ed                	xor    ebp,ebp
c0001eda:	57                   	push   edi
c0001edb:	89 d7                	mov    edi,edx
c0001edd:	56                   	push   esi
c0001ede:	31 f6                	xor    esi,esi
c0001ee0:	53                   	push   ebx
c0001ee1:	83 ec 08             	sub    esp,0x8
c0001ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ee7:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001eeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001eef:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ef5:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ef8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001efb:	31 d2                	xor    edx,edx
c0001efd:	e8 cb fc ff ff       	call   c0001bcd <st_word>
c0001f02:	0f b6 d9             	movzx  ebx,cl
c0001f05:	4b                   	dec    ebx
c0001f06:	6b db 0d             	imul   ebx,ebx,0xd
c0001f09:	66 83 fe ff          	cmp    si,0xffff
c0001f0d:	74 08                	je     c0001f17 <put_lfn+0x40>
c0001f0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f12:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f16:	43                   	inc    ebx
c0001f17:	0f b6 85 80 20 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffddf80]
c0001f1e:	0f b7 d6             	movzx  edx,si
c0001f21:	01 f8                	add    eax,edi
c0001f23:	e8 a5 fc ff ff       	call   c0001bcd <st_word>
c0001f28:	66 85 f6             	test   si,si
c0001f2b:	75 03                	jne    c0001f30 <put_lfn+0x59>
c0001f2d:	83 ce ff             	or     esi,0xffffffff
c0001f30:	45                   	inc    ebp
c0001f31:	83 fd 0d             	cmp    ebp,0xd
c0001f34:	75 d3                	jne    c0001f09 <put_lfn+0x32>
c0001f36:	66 46                	inc    si
c0001f38:	74 0a                	je     c0001f44 <put_lfn+0x6d>
c0001f3a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f3d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f42:	75 09                	jne    c0001f4d <put_lfn+0x76>
c0001f44:	88 c8                	mov    al,cl
c0001f46:	83 c8 40             	or     eax,0x40
c0001f49:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f4d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f51:	88 07                	mov    BYTE PTR [edi],al
c0001f53:	83 c4 08             	add    esp,0x8
c0001f56:	5b                   	pop    ebx
c0001f57:	5e                   	pop    esi
c0001f58:	5f                   	pop    edi
c0001f59:	5d                   	pop    ebp
c0001f5a:	c3                   	ret    

c0001f5b <gen_numname>:
c0001f5b:	57                   	push   edi
c0001f5c:	89 cf                	mov    edi,ecx
c0001f5e:	56                   	push   esi
c0001f5f:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f64:	53                   	push   ebx
c0001f65:	89 c6                	mov    esi,eax
c0001f67:	83 ec 10             	sub    esp,0x10
c0001f6a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f6e:	e8 67 fc ff ff       	call   c0001bda <mem_cpy>
c0001f73:	83 fb 05             	cmp    ebx,0x5
c0001f76:	76 2d                	jbe    c0001fa5 <gen_numname+0x4a>
c0001f78:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f7b:	66 85 c0             	test   ax,ax
c0001f7e:	74 25                	je     c0001fa5 <gen_numname+0x4a>
c0001f80:	83 c7 02             	add    edi,0x2
c0001f83:	ba 10 00 00 00       	mov    edx,0x10
c0001f88:	01 db                	add    ebx,ebx
c0001f8a:	89 c1                	mov    ecx,eax
c0001f8c:	66 d1 e8             	shr    ax,1
c0001f8f:	83 e1 01             	and    ecx,0x1
c0001f92:	01 cb                	add    ebx,ecx
c0001f94:	0f ba e3 10          	bt     ebx,0x10
c0001f98:	73 06                	jae    c0001fa0 <gen_numname+0x45>
c0001f9a:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001fa0:	4a                   	dec    edx
c0001fa1:	75 e5                	jne    c0001f88 <gen_numname+0x2d>
c0001fa3:	eb d3                	jmp    c0001f78 <gen_numname+0x1d>
c0001fa5:	b8 07 00 00 00       	mov    eax,0x7
c0001faa:	88 d9                	mov    cl,bl
c0001fac:	83 e1 0f             	and    ecx,0xf
c0001faf:	8d 51 30             	lea    edx,[ecx+0x30]
c0001fb2:	80 fa 39             	cmp    dl,0x39
c0001fb5:	76 03                	jbe    c0001fba <gen_numname+0x5f>
c0001fb7:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fba:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fbd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fc1:	89 da                	mov    edx,ebx
c0001fc3:	c1 ea 04             	shr    edx,0x4
c0001fc6:	83 fb 0f             	cmp    ebx,0xf
c0001fc9:	76 06                	jbe    c0001fd1 <gen_numname+0x76>
c0001fcb:	89 c8                	mov    eax,ecx
c0001fcd:	89 d3                	mov    ebx,edx
c0001fcf:	eb d9                	jmp    c0001faa <gen_numname+0x4f>
c0001fd1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fd6:	31 d2                	xor    edx,edx
c0001fd8:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001fdb:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fde:	39 ca                	cmp    edx,ecx
c0001fe0:	73 18                	jae    c0001ffa <gen_numname+0x9f>
c0001fe2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fe5:	3c 20                	cmp    al,0x20
c0001fe7:	74 11                	je     c0001ffa <gen_numname+0x9f>
c0001fe9:	e8 41 fc ff ff       	call   c0001c2f <dbc_1st>
c0001fee:	85 c0                	test   eax,eax
c0001ff0:	74 05                	je     c0001ff7 <gen_numname+0x9c>
c0001ff2:	39 d3                	cmp    ebx,edx
c0001ff4:	74 04                	je     c0001ffa <gen_numname+0x9f>
c0001ff6:	42                   	inc    edx
c0001ff7:	42                   	inc    edx
c0001ff8:	eb e1                	jmp    c0001fdb <gen_numname+0x80>
c0001ffa:	b0 20                	mov    al,0x20
c0001ffc:	83 f9 07             	cmp    ecx,0x7
c0001fff:	77 05                	ja     c0002006 <gen_numname+0xab>
c0002001:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002005:	41                   	inc    ecx
c0002006:	42                   	inc    edx
c0002007:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000200b:	83 fa 07             	cmp    edx,0x7
c000200e:	76 ea                	jbe    c0001ffa <gen_numname+0x9f>
c0002010:	83 c4 10             	add    esp,0x10
c0002013:	5b                   	pop    ebx
c0002014:	5e                   	pop    esi
c0002015:	5f                   	pop    edi
c0002016:	c3                   	ret    

c0002017 <sum_sfn>:
c0002017:	31 c9                	xor    ecx,ecx
c0002019:	31 d2                	xor    edx,edx
c000201b:	d0 ca                	ror    dl,1
c000201d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002020:	41                   	inc    ecx
c0002021:	83 f9 0b             	cmp    ecx,0xb
c0002024:	75 f5                	jne    c000201b <sum_sfn+0x4>
c0002026:	88 d0                	mov    al,dl
c0002028:	c3                   	ret    

c0002029 <xdir_sum>:
c0002029:	56                   	push   esi
c000202a:	31 c9                	xor    ecx,ecx
c000202c:	53                   	push   ebx
c000202d:	31 d2                	xor    edx,edx
c000202f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002033:	43                   	inc    ebx
c0002034:	c1 e3 05             	shl    ebx,0x5
c0002037:	83 fa 02             	cmp    edx,0x2
c000203a:	74 0b                	je     c0002047 <xdir_sum+0x1e>
c000203c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002040:	66 d1 c9             	ror    cx,1
c0002043:	01 f1                	add    ecx,esi
c0002045:	eb 05                	jmp    c000204c <xdir_sum+0x23>
c0002047:	ba 03 00 00 00       	mov    edx,0x3
c000204c:	42                   	inc    edx
c000204d:	39 d3                	cmp    ebx,edx
c000204f:	77 e6                	ja     c0002037 <xdir_sum+0xe>
c0002051:	89 c8                	mov    eax,ecx
c0002053:	5b                   	pop    ebx
c0002054:	5e                   	pop    esi
c0002055:	c3                   	ret    

c0002056 <xsum32>:
c0002056:	d1 ca                	ror    edx,1
c0002058:	0f b6 c0             	movzx  eax,al
c000205b:	01 d0                	add    eax,edx
c000205d:	c3                   	ret    

c000205e <get_xfileinfo>:
c000205e:	55                   	push   ebp
c000205f:	31 c9                	xor    ecx,ecx
c0002061:	57                   	push   edi
c0002062:	bd 40 00 00 00       	mov    ebp,0x40
c0002067:	56                   	push   esi
c0002068:	31 ff                	xor    edi,edi
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 0c             	sub    esp,0xc
c0002070:	89 d3                	mov    ebx,edx
c0002072:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002079:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000207d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002080:	76 6d                	jbe    c00020ef <get_xfileinfo+0x91>
c0002082:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002088:	76 0b                	jbe    c0002095 <get_xfileinfo+0x37>
c000208a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000208e:	bf 01 00 00 00       	mov    edi,0x1
c0002093:	eb 63                	jmp    c00020f8 <get_xfileinfo+0x9a>
c0002095:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c000209b:	75 03                	jne    c00020a0 <get_xfileinfo+0x42>
c000209d:	83 c5 02             	add    ebp,0x2
c00020a0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00020a3:	83 c5 02             	add    ebp,0x2
c00020a6:	e8 b0 fa ff ff       	call   c0001b5b <ld_word>
c00020ab:	ff 04 24             	inc    DWORD PTR [esp]
c00020ae:	66 85 c9             	test   cx,cx
c00020b1:	75 0d                	jne    c00020c0 <get_xfileinfo+0x62>
c00020b3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020b9:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020be:	76 2b                	jbe    c00020eb <get_xfileinfo+0x8d>
c00020c0:	c1 e1 10             	shl    ecx,0x10
c00020c3:	ba ff 00 00 00       	mov    edx,0xff
c00020c8:	0f b7 c0             	movzx  eax,ax
c00020cb:	29 fa                	sub    edx,edi
c00020cd:	09 c8                	or     eax,ecx
c00020cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020d3:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020db:	e8 1b fc ff ff       	call   c0001cfb <put_utf>
c00020e0:	84 c0                	test   al,al
c00020e2:	74 a6                	je     c000208a <get_xfileinfo+0x2c>
c00020e4:	0f b6 c0             	movzx  eax,al
c00020e7:	01 c7                	add    edi,eax
c00020e9:	31 c0                	xor    eax,eax
c00020eb:	89 c1                	mov    ecx,eax
c00020ed:	eb 8a                	jmp    c0002079 <get_xfileinfo+0x1b>
c00020ef:	85 ff                	test   edi,edi
c00020f1:	74 97                	je     c000208a <get_xfileinfo+0x2c>
c00020f3:	66 85 c9             	test   cx,cx
c00020f6:	75 92                	jne    c000208a <get_xfileinfo+0x2c>
c00020f8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00020fd:	31 c0                	xor    eax,eax
c00020ff:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002103:	31 d2                	xor    edx,edx
c0002105:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002108:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000210b:	80 e1 10             	and    cl,0x10
c000210e:	75 08                	jne    c0002118 <get_xfileinfo+0xba>
c0002110:	8d 46 38             	lea    eax,[esi+0x38]
c0002113:	e8 68 fa ff ff       	call   c0001b80 <ld_qword>
c0002118:	89 03                	mov    DWORD PTR [ebx],eax
c000211a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000211d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002120:	e8 36 fa ff ff       	call   c0001b5b <ld_word>
c0002125:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002129:	8d 46 0e             	lea    eax,[esi+0xe]
c000212c:	e8 2a fa ff ff       	call   c0001b5b <ld_word>
c0002131:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002135:	83 c4 0c             	add    esp,0xc
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	5d                   	pop    ebp
c000213c:	c3                   	ret    

c000213d <get_ldnumber>:
c000213d:	8b 10                	mov    edx,DWORD PTR [eax]
c000213f:	85 d2                	test   edx,edx
c0002141:	74 14                	je     c0002157 <get_ldnumber+0x1a>
c0002143:	56                   	push   esi
c0002144:	53                   	push   ebx
c0002145:	89 d3                	mov    ebx,edx
c0002147:	43                   	inc    ebx
c0002148:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000214b:	80 f9 1f             	cmp    cl,0x1f
c000214e:	76 0d                	jbe    c000215d <get_ldnumber+0x20>
c0002150:	80 f9 3a             	cmp    cl,0x3a
c0002153:	75 f2                	jne    c0002147 <get_ldnumber+0xa>
c0002155:	eb 0a                	jmp    c0002161 <get_ldnumber+0x24>
c0002157:	83 c9 ff             	or     ecx,0xffffffff
c000215a:	89 c8                	mov    eax,ecx
c000215c:	c3                   	ret    
c000215d:	31 c9                	xor    ecx,ecx
c000215f:	eb 24                	jmp    c0002185 <get_ldnumber+0x48>
c0002161:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002164:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002167:	80 f9 09             	cmp    cl,0x9
c000216a:	77 16                	ja     c0002182 <get_ldnumber+0x45>
c000216c:	83 c2 02             	add    edx,0x2
c000216f:	83 c9 ff             	or     ecx,0xffffffff
c0002172:	39 d3                	cmp    ebx,edx
c0002174:	75 0f                	jne    c0002185 <get_ldnumber+0x48>
c0002176:	89 f2                	mov    edx,esi
c0002178:	89 18                	mov    DWORD PTR [eax],ebx
c000217a:	0f be ca             	movsx  ecx,dl
c000217d:	83 e9 30             	sub    ecx,0x30
c0002180:	eb 03                	jmp    c0002185 <get_ldnumber+0x48>
c0002182:	83 c9 ff             	or     ecx,0xffffffff
c0002185:	89 c8                	mov    eax,ecx
c0002187:	5b                   	pop    ebx
c0002188:	5e                   	pop    esi
c0002189:	c3                   	ret    

c000218a <crc32>:
c000218a:	56                   	push   esi
c000218b:	89 d6                	mov    esi,edx
c000218d:	53                   	push   ebx
c000218e:	b2 01                	mov    dl,0x1
c0002190:	bb 08 00 00 00       	mov    ebx,0x8
c0002195:	89 f1                	mov    ecx,esi
c0002197:	84 d1                	test   cl,dl
c0002199:	0f 95 c1             	setne  cl
c000219c:	0f b6 c9             	movzx  ecx,cl
c000219f:	31 c1                	xor    ecx,eax
c00021a1:	89 c8                	mov    eax,ecx
c00021a3:	d1 e8                	shr    eax,1
c00021a5:	80 e1 01             	and    cl,0x1
c00021a8:	74 05                	je     c00021af <crc32+0x25>
c00021aa:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021af:	d1 e2                	shl    edx,1
c00021b1:	4b                   	dec    ebx
c00021b2:	75 e1                	jne    c0002195 <crc32+0xb>
c00021b4:	5b                   	pop    ebx
c00021b5:	5e                   	pop    esi
c00021b6:	c3                   	ret    

c00021b7 <test_gpt_header>:
c00021b7:	55                   	push   ebp
c00021b8:	b9 10 00 00 00       	mov    ecx,0x10
c00021bd:	57                   	push   edi
c00021be:	ba 80 1f 02 c0       	mov    edx,0xc0021f80
c00021c3:	56                   	push   esi
c00021c4:	31 ff                	xor    edi,edi
c00021c6:	53                   	push   ebx
c00021c7:	89 c3                	mov    ebx,eax
c00021c9:	e8 2c fa ff ff       	call   c0001bfa <mem_cmp>
c00021ce:	85 c0                	test   eax,eax
c00021d0:	75 55                	jne    c0002227 <test_gpt_header+0x70>
c00021d2:	89 c7                	mov    edi,eax
c00021d4:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021d9:	83 ce ff             	or     esi,0xffffffff
c00021dc:	31 d2                	xor    edx,edx
c00021de:	83 fd 03             	cmp    ebp,0x3
c00021e1:	76 05                	jbe    c00021e8 <test_gpt_header+0x31>
c00021e3:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021e8:	89 f0                	mov    eax,esi
c00021ea:	45                   	inc    ebp
c00021eb:	e8 9a ff ff ff       	call   c000218a <crc32>
c00021f0:	83 fd 4c             	cmp    ebp,0x4c
c00021f3:	89 c6                	mov    esi,eax
c00021f5:	75 e5                	jne    c00021dc <test_gpt_header+0x25>
c00021f7:	8d 43 10             	lea    eax,[ebx+0x10]
c00021fa:	f7 d6                	not    esi
c00021fc:	e8 67 f9 ff ff       	call   c0001b68 <ld_dword>
c0002201:	39 c6                	cmp    esi,eax
c0002203:	75 22                	jne    c0002227 <test_gpt_header+0x70>
c0002205:	8d 43 54             	lea    eax,[ebx+0x54]
c0002208:	e8 5b f9 ff ff       	call   c0001b68 <ld_dword>
c000220d:	83 c0 80             	add    eax,0xffffff80
c0002210:	75 15                	jne    c0002227 <test_gpt_header+0x70>
c0002212:	8d 43 50             	lea    eax,[ebx+0x50]
c0002215:	e8 4e f9 ff ff       	call   c0001b68 <ld_dword>
c000221a:	3d 80 00 00 00       	cmp    eax,0x80
c000221f:	0f 96 c0             	setbe  al
c0002222:	0f b6 c0             	movzx  eax,al
c0002225:	89 c7                	mov    edi,eax
c0002227:	5b                   	pop    ebx
c0002228:	89 f8                	mov    eax,edi
c000222a:	5e                   	pop    esi
c000222b:	5f                   	pop    edi
c000222c:	5d                   	pop    ebp
c000222d:	c3                   	ret    

c000222e <make_rand>:
c000222e:	56                   	push   esi
c000222f:	85 c0                	test   eax,eax
c0002231:	53                   	push   ebx
c0002232:	75 05                	jne    c0002239 <make_rand+0xb>
c0002234:	b8 01 00 00 00       	mov    eax,0x1
c0002239:	01 d1                	add    ecx,edx
c000223b:	bb 08 00 00 00       	mov    ebx,0x8
c0002240:	89 c6                	mov    esi,eax
c0002242:	d1 e8                	shr    eax,1
c0002244:	83 e6 01             	and    esi,0x1
c0002247:	85 f6                	test   esi,esi
c0002249:	74 05                	je     c0002250 <make_rand+0x22>
c000224b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002250:	4b                   	dec    ebx
c0002251:	75 ed                	jne    c0002240 <make_rand+0x12>
c0002253:	42                   	inc    edx
c0002254:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002257:	39 ca                	cmp    edx,ecx
c0002259:	75 e0                	jne    c000223b <make_rand+0xd>
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	c3                   	ret    

c000225e <validate>:
c000225e:	56                   	push   esi
c000225f:	53                   	push   ebx
c0002260:	89 d6                	mov    esi,edx
c0002262:	51                   	push   ecx
c0002263:	85 c0                	test   eax,eax
c0002265:	75 09                	jne    c0002270 <validate+0x12>
c0002267:	b8 09 00 00 00       	mov    eax,0x9
c000226c:	31 c9                	xor    ecx,ecx
c000226e:	eb 2f                	jmp    c000229f <validate+0x41>
c0002270:	89 c3                	mov    ebx,eax
c0002272:	8b 00                	mov    eax,DWORD PTR [eax]
c0002274:	85 c0                	test   eax,eax
c0002276:	74 ef                	je     c0002267 <validate+0x9>
c0002278:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000227b:	74 ea                	je     c0002267 <validate+0x9>
c000227d:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002281:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002285:	75 e0                	jne    c0002267 <validate+0x9>
c0002287:	83 ec 0c             	sub    esp,0xc
c000228a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000228e:	50                   	push   eax
c000228f:	e8 76 f8 ff ff       	call   c0001b0a <disk_status>
c0002294:	83 c4 10             	add    esp,0x10
c0002297:	a8 01                	test   al,0x1
c0002299:	75 cc                	jne    c0002267 <validate+0x9>
c000229b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000229d:	31 c0                	xor    eax,eax
c000229f:	89 0e                	mov    DWORD PTR [esi],ecx
c00022a1:	5a                   	pop    edx
c00022a2:	5b                   	pop    ebx
c00022a3:	5e                   	pop    esi
c00022a4:	c3                   	ret    

c00022a5 <sync_window>:
c00022a5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022a9:	0f 84 85 00 00 00    	je     c0002334 <sync_window+0x8f>
c00022af:	55                   	push   ebp
c00022b0:	8d 68 54             	lea    ebp,[eax+0x54]
c00022b3:	57                   	push   edi
c00022b4:	56                   	push   esi
c00022b5:	53                   	push   ebx
c00022b6:	89 c3                	mov    ebx,eax
c00022b8:	83 ec 28             	sub    esp,0x28
c00022bb:	6a 01                	push   0x1
c00022bd:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022c0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022c3:	55                   	push   ebp
c00022c4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c8:	50                   	push   eax
c00022c9:	e8 58 f8 ff ff       	call   c0001b26 <disk_write>
c00022ce:	83 c4 20             	add    esp,0x20
c00022d1:	ba 01 00 00 00       	mov    edx,0x1
c00022d6:	85 c0                	test   eax,eax
c00022d8:	75 50                	jne    c000232a <sync_window+0x85>
c00022da:	31 ff                	xor    edi,edi
c00022dc:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022e3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022e7:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022ea:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022ed:	89 c6                	mov    esi,eax
c00022ef:	89 d7                	mov    edi,edx
c00022f1:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00022f4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00022f8:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00022fb:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00022ff:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002303:	73 23                	jae    c0002328 <sync_window+0x83>
c0002305:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002309:	75 1d                	jne    c0002328 <sync_window+0x83>
c000230b:	83 ec 0c             	sub    esp,0xc
c000230e:	6a 01                	push   0x1
c0002310:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002314:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002318:	52                   	push   edx
c0002319:	50                   	push   eax
c000231a:	55                   	push   ebp
c000231b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000231f:	50                   	push   eax
c0002320:	e8 01 f8 ff ff       	call   c0001b26 <disk_write>
c0002325:	83 c4 20             	add    esp,0x20
c0002328:	31 d2                	xor    edx,edx
c000232a:	83 c4 1c             	add    esp,0x1c
c000232d:	89 d0                	mov    eax,edx
c000232f:	5b                   	pop    ebx
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    
c0002334:	31 d2                	xor    edx,edx
c0002336:	89 d0                	mov    eax,edx
c0002338:	c3                   	ret    

c0002339 <move_window>:
c0002339:	56                   	push   esi
c000233a:	53                   	push   ebx
c000233b:	89 c3                	mov    ebx,eax
c000233d:	83 ec 14             	sub    esp,0x14
c0002340:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002343:	75 07                	jne    c000234c <move_window+0x13>
c0002345:	31 f6                	xor    esi,esi
c0002347:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000234a:	74 59                	je     c00023a5 <move_window+0x6c>
c000234c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002350:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002354:	89 d8                	mov    eax,ebx
c0002356:	e8 4a ff ff ff       	call   c00022a5 <sync_window>
c000235b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000235f:	89 c6                	mov    esi,eax
c0002361:	85 c0                	test   eax,eax
c0002363:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002367:	75 3c                	jne    c00023a5 <move_window+0x6c>
c0002369:	83 ec 0c             	sub    esp,0xc
c000236c:	8d 43 54             	lea    eax,[ebx+0x54]
c000236f:	6a 01                	push   0x1
c0002371:	51                   	push   ecx
c0002372:	52                   	push   edx
c0002373:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002377:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000237b:	50                   	push   eax
c000237c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002380:	50                   	push   eax
c0002381:	e8 8a f7 ff ff       	call   c0001b10 <disk_read>
c0002386:	83 c4 20             	add    esp,0x20
c0002389:	85 c0                	test   eax,eax
c000238b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000238f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002393:	74 0a                	je     c000239f <move_window+0x66>
c0002395:	83 ca ff             	or     edx,0xffffffff
c0002398:	be 01 00 00 00       	mov    esi,0x1
c000239d:	89 d1                	mov    ecx,edx
c000239f:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00023a2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00023a5:	89 f0                	mov    eax,esi
c00023a7:	83 c4 14             	add    esp,0x14
c00023aa:	5b                   	pop    ebx
c00023ab:	5e                   	pop    esi
c00023ac:	c3                   	ret    

c00023ad <check_fs>:
c00023ad:	53                   	push   ebx
c00023ae:	89 c3                	mov    ebx,eax
c00023b0:	83 ec 08             	sub    esp,0x8
c00023b3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023b7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023be:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023c5:	e8 6f ff ff ff       	call   c0002339 <move_window>
c00023ca:	ba 04 00 00 00       	mov    edx,0x4
c00023cf:	85 c0                	test   eax,eax
c00023d1:	0f 85 89 00 00 00    	jne    c0002460 <check_fs+0xb3>
c00023d7:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023dd:	e8 79 f7 ff ff       	call   c0001b5b <ld_word>
c00023e2:	ba 03 00 00 00       	mov    edx,0x3
c00023e7:	66 3d 55 aa          	cmp    ax,0xaa55
c00023eb:	75 73                	jne    c0002460 <check_fs+0xb3>
c00023ed:	ba a0 20 02 c0       	mov    edx,0xc00220a0
c00023f2:	8d 43 54             	lea    eax,[ebx+0x54]
c00023f5:	b9 0b 00 00 00       	mov    ecx,0xb
c00023fa:	e8 fb f7 ff ff       	call   c0001bfa <mem_cmp>
c00023ff:	ba 01 00 00 00       	mov    edx,0x1
c0002404:	85 c0                	test   eax,eax
c0002406:	74 58                	je     c0002460 <check_fs+0xb3>
c0002408:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000240b:	8d 50 18             	lea    edx,[eax+0x18]
c000240e:	80 fa 01             	cmp    dl,0x1
c0002411:	76 09                	jbe    c000241c <check_fs+0x6f>
c0002413:	ba 02 00 00 00       	mov    edx,0x2
c0002418:	3c eb                	cmp    al,0xeb
c000241a:	75 44                	jne    c0002460 <check_fs+0xb3>
c000241c:	ba a4 4b 02 c0       	mov    edx,0xc0024ba4
c0002421:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002427:	b9 03 00 00 00       	mov    ecx,0x3
c000242c:	e8 c9 f7 ff ff       	call   c0001bfa <mem_cmp>
c0002431:	31 d2                	xor    edx,edx
c0002433:	85 c0                	test   eax,eax
c0002435:	74 29                	je     c0002460 <check_fs+0xb3>
c0002437:	ba ac 20 02 c0       	mov    edx,0xc00220ac
c000243c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002442:	b9 05 00 00 00       	mov    ecx,0x5
c0002447:	e8 ae f7 ff ff       	call   c0001bfa <mem_cmp>
c000244c:	31 d2                	xor    edx,edx
c000244e:	85 c0                	test   eax,eax
c0002450:	74 0e                	je     c0002460 <check_fs+0xb3>
c0002452:	31 d2                	xor    edx,edx
c0002454:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000245b:	0f 95 c2             	setne  dl
c000245e:	01 d2                	add    edx,edx
c0002460:	89 d0                	mov    eax,edx
c0002462:	83 c4 08             	add    esp,0x8
c0002465:	5b                   	pop    ebx
c0002466:	c3                   	ret    

c0002467 <find_volume>:
c0002467:	55                   	push   ebp
c0002468:	31 c9                	xor    ecx,ecx
c000246a:	57                   	push   edi
c000246b:	56                   	push   esi
c000246c:	89 d6                	mov    esi,edx
c000246e:	53                   	push   ebx
c000246f:	31 d2                	xor    edx,edx
c0002471:	83 ec 3c             	sub    esp,0x3c
c0002474:	89 c3                	mov    ebx,eax
c0002476:	e8 32 ff ff ff       	call   c00023ad <check_fs>
c000247b:	83 f8 02             	cmp    eax,0x2
c000247e:	74 0e                	je     c000248e <find_volume+0x27>
c0002480:	0f 87 5d 01 00 00    	ja     c00025e3 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 84 55 01 00 00    	je     c00025e3 <find_volume+0x17c>
c000248e:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002495:	0f 85 dd 00 00 00    	jne    c0002578 <find_volume+0x111>
c000249b:	31 c9                	xor    ecx,ecx
c000249d:	ba 01 00 00 00       	mov    edx,0x1
c00024a2:	89 d8                	mov    eax,ebx
c00024a4:	e8 90 fe ff ff       	call   c0002339 <move_window>
c00024a9:	85 c0                	test   eax,eax
c00024ab:	74 0a                	je     c00024b7 <find_volume+0x50>
c00024ad:	b8 04 00 00 00       	mov    eax,0x4
c00024b2:	e9 2c 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024b7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024ba:	89 e8                	mov    eax,ebp
c00024bc:	e8 f6 fc ff ff       	call   c00021b7 <test_gpt_header>
c00024c1:	85 c0                	test   eax,eax
c00024c3:	75 0a                	jne    c00024cf <find_volume+0x68>
c00024c5:	b8 03 00 00 00       	mov    eax,0x3
c00024ca:	e9 14 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024cf:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024d5:	e8 8e f6 ff ff       	call   c0001b68 <ld_dword>
c00024da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024de:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024e4:	e8 97 f6 ff ff       	call   c0001b80 <ld_qword>
c00024e9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00024f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00024f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002501:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002505:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002509:	74 ba                	je     c00024c5 <find_volume+0x5e>
c000250b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000250f:	31 c9                	xor    ecx,ecx
c0002511:	c1 e7 07             	shl    edi,0x7
c0002514:	89 d8                	mov    eax,ebx
c0002516:	89 fa                	mov    edx,edi
c0002518:	c1 ea 09             	shr    edx,0x9
c000251b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000251f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002523:	e8 11 fe ff ff       	call   c0002339 <move_window>
c0002528:	85 c0                	test   eax,eax
c000252a:	75 81                	jne    c00024ad <find_volume+0x46>
c000252c:	81 e7 80 01 00 00    	and    edi,0x180
c0002532:	b9 10 00 00 00       	mov    ecx,0x10
c0002537:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000253b:	ba 90 20 02 c0       	mov    edx,0xc0022090
c0002540:	e8 b5 f6 ff ff       	call   c0001bfa <mem_cmp>
c0002545:	85 c0                	test   eax,eax
c0002547:	75 29                	jne    c0002572 <find_volume+0x10b>
c0002549:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000254d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002551:	e8 2a f6 ff ff       	call   c0001b80 <ld_qword>
c0002556:	89 d1                	mov    ecx,edx
c0002558:	89 c2                	mov    edx,eax
c000255a:	89 d8                	mov    eax,ebx
c000255c:	e8 4c fe ff ff       	call   c00023ad <check_fs>
c0002561:	85 f6                	test   esi,esi
c0002563:	75 07                	jne    c000256c <find_volume+0x105>
c0002565:	83 f8 01             	cmp    eax,0x1
c0002568:	77 08                	ja     c0002572 <find_volume+0x10b>
c000256a:	eb 77                	jmp    c00025e3 <find_volume+0x17c>
c000256c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002570:	74 71                	je     c00025e3 <find_volume+0x17c>
c0002572:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002576:	eb 89                	jmp    c0002501 <find_volume+0x9a>
c0002578:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000257c:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002582:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002588:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000258c:	89 cd                	mov    ebp,ecx
c000258e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002592:	89 f8                	mov    eax,edi
c0002594:	83 c7 10             	add    edi,0x10
c0002597:	e8 cc f5 ff ff       	call   c0001b68 <ld_dword>
c000259c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00025a0:	89 01                	mov    DWORD PTR [ecx],eax
c00025a2:	83 c1 04             	add    ecx,0x4
c00025a5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025a9:	75 e3                	jne    c000258e <find_volume+0x127>
c00025ab:	31 ff                	xor    edi,edi
c00025ad:	85 f6                	test   esi,esi
c00025af:	74 03                	je     c00025b4 <find_volume+0x14d>
c00025b1:	8d 7e ff             	lea    edi,[esi-0x1]
c00025b4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025b8:	85 d2                	test   edx,edx
c00025ba:	74 14                	je     c00025d0 <find_volume+0x169>
c00025bc:	31 c9                	xor    ecx,ecx
c00025be:	89 d8                	mov    eax,ebx
c00025c0:	e8 e8 fd ff ff       	call   c00023ad <check_fs>
c00025c5:	83 f8 01             	cmp    eax,0x1
c00025c8:	76 19                	jbe    c00025e3 <find_volume+0x17c>
c00025ca:	85 f6                	test   esi,esi
c00025cc:	74 0f                	je     c00025dd <find_volume+0x176>
c00025ce:	eb 13                	jmp    c00025e3 <find_volume+0x17c>
c00025d0:	85 f6                	test   esi,esi
c00025d2:	0f 85 ed fe ff ff    	jne    c00024c5 <find_volume+0x5e>
c00025d8:	b8 03 00 00 00       	mov    eax,0x3
c00025dd:	47                   	inc    edi
c00025de:	83 ff 03             	cmp    edi,0x3
c00025e1:	76 d1                	jbe    c00025b4 <find_volume+0x14d>
c00025e3:	83 c4 3c             	add    esp,0x3c
c00025e6:	5b                   	pop    ebx
c00025e7:	5e                   	pop    esi
c00025e8:	5f                   	pop    edi
c00025e9:	5d                   	pop    ebp
c00025ea:	c3                   	ret    

c00025eb <mount_volume>:
c00025eb:	55                   	push   ebp
c00025ec:	57                   	push   edi
c00025ed:	89 cf                	mov    edi,ecx
c00025ef:	56                   	push   esi
c00025f0:	53                   	push   ebx
c00025f1:	bb 0b 00 00 00       	mov    ebx,0xb
c00025f6:	83 ec 3c             	sub    esp,0x3c
c00025f9:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002603:	e8 35 fb ff ff       	call   c000213d <get_ldnumber>
c0002608:	85 c0                	test   eax,eax
c000260a:	0f 88 3a 05 00 00    	js     c0002b4a <mount_volume+0x55f>
c0002610:	8b 2c 85 20 64 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd9be0]
c0002617:	89 c6                	mov    esi,eax
c0002619:	bb 0c 00 00 00       	mov    ebx,0xc
c000261e:	85 ed                	test   ebp,ebp
c0002620:	0f 84 24 05 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002626:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000262a:	83 e7 fe             	and    edi,0xfffffffe
c000262d:	89 2a                	mov    DWORD PTR [edx],ebp
c000262f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002633:	74 32                	je     c0002667 <mount_volume+0x7c>
c0002635:	83 ec 0c             	sub    esp,0xc
c0002638:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000263c:	50                   	push   eax
c000263d:	e8 c8 f4 ff ff       	call   c0001b0a <disk_status>
c0002642:	83 c4 10             	add    esp,0x10
c0002645:	a8 01                	test   al,0x1
c0002647:	75 1e                	jne    c0002667 <mount_volume+0x7c>
c0002649:	31 db                	xor    ebx,ebx
c000264b:	89 f9                	mov    ecx,edi
c000264d:	84 c9                	test   cl,cl
c000264f:	0f 84 f5 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002655:	a8 04                	test   al,0x4
c0002657:	0f 84 ed 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c000265d:	bb 0a 00 00 00       	mov    ebx,0xa
c0002662:	e9 e3 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c0002667:	83 ec 0c             	sub    esp,0xc
c000266a:	89 f0                	mov    eax,esi
c000266c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002670:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002673:	0f b6 f0             	movzx  esi,al
c0002676:	bb 03 00 00 00       	mov    ebx,0x3
c000267b:	56                   	push   esi
c000267c:	e8 8c f4 ff ff       	call   c0001b0d <disk_initialize>
c0002681:	83 c4 10             	add    esp,0x10
c0002684:	a8 01                	test   al,0x1
c0002686:	0f 85 be 04 00 00    	jne    c0002b4a <mount_volume+0x55f>
c000268c:	89 f9                	mov    ecx,edi
c000268e:	84 c9                	test   cl,cl
c0002690:	74 04                	je     c0002696 <mount_volume+0xab>
c0002692:	a8 04                	test   al,0x4
c0002694:	75 c7                	jne    c000265d <mount_volume+0x72>
c0002696:	31 d2                	xor    edx,edx
c0002698:	89 e8                	mov    eax,ebp
c000269a:	e8 c8 fd ff ff       	call   c0002467 <find_volume>
c000269f:	83 f8 04             	cmp    eax,0x4
c00026a2:	75 0a                	jne    c00026ae <mount_volume+0xc3>
c00026a4:	bb 01 00 00 00       	mov    ebx,0x1
c00026a9:	e9 9c 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026ae:	83 f8 01             	cmp    eax,0x1
c00026b1:	76 0a                	jbe    c00026bd <mount_volume+0xd2>
c00026b3:	bb 0d 00 00 00       	mov    ebx,0xd
c00026b8:	e9 8d 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026bd:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026c0:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026cb:	75 17                	jne    c00026e4 <mount_volume+0xf9>
c00026cd:	b8 0b 00 00 00       	mov    eax,0xb
c00026d2:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026d7:	75 da                	jne    c00026b3 <mount_volume+0xc8>
c00026d9:	40                   	inc    eax
c00026da:	83 f8 40             	cmp    eax,0x40
c00026dd:	75 f3                	jne    c00026d2 <mount_volume+0xe7>
c00026df:	e9 5a 02 00 00       	jmp    c000293e <mount_volume+0x353>
c00026e4:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026e7:	e8 6f f4 ff ff       	call   c0001b5b <ld_word>
c00026ec:	66 3d 00 02          	cmp    ax,0x200
c00026f0:	75 c1                	jne    c00026b3 <mount_volume+0xc8>
c00026f2:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00026f5:	e8 61 f4 ff ff       	call   c0001b5b <ld_word>
c00026fa:	0f b7 c0             	movzx  eax,ax
c00026fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002701:	85 c0                	test   eax,eax
c0002703:	75 0c                	jne    c0002711 <mount_volume+0x126>
c0002705:	8d 45 78             	lea    eax,[ebp+0x78]
c0002708:	e8 5b f4 ff ff       	call   c0001b68 <ld_dword>
c000270d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002715:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002718:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000271b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000271f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002722:	48                   	dec    eax
c0002723:	3c 01                	cmp    al,0x1
c0002725:	77 8c                	ja     c00026b3 <mount_volume+0xc8>
c0002727:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000272b:	89 c3                	mov    ebx,eax
c000272d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002731:	66 85 c0             	test   ax,ax
c0002734:	0f 84 79 ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c000273a:	8d 40 ff             	lea    eax,[eax-0x1]
c000273d:	85 d8                	test   eax,ebx
c000273f:	0f 85 6e ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002745:	8d 45 65             	lea    eax,[ebp+0x65]
c0002748:	e8 0e f4 ff ff       	call   c0001b5b <ld_word>
c000274d:	89 c7                	mov    edi,eax
c000274f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002753:	a8 0f                	test   al,0xf
c0002755:	0f 85 58 ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c000275b:	8d 45 67             	lea    eax,[ebp+0x67]
c000275e:	e8 f8 f3 ff ff       	call   c0001b5b <ld_word>
c0002763:	0f b7 f0             	movzx  esi,ax
c0002766:	85 f6                	test   esi,esi
c0002768:	75 0a                	jne    c0002774 <mount_volume+0x189>
c000276a:	8d 45 74             	lea    eax,[ebp+0x74]
c000276d:	e8 f6 f3 ff ff       	call   c0001b68 <ld_dword>
c0002772:	89 c6                	mov    esi,eax
c0002774:	8d 45 62             	lea    eax,[ebp+0x62]
c0002777:	e8 df f3 ff ff       	call   c0001b5b <ld_word>
c000277c:	66 85 c0             	test   ax,ax
c000277f:	0f 84 2e ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002785:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000278a:	0f b7 c8             	movzx  ecx,ax
c000278d:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002792:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002796:	89 fa                	mov    edx,edi
c0002798:	66 c1 ea 04          	shr    dx,0x4
c000279c:	0f b7 d2             	movzx  edx,dx
c000279f:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00027a3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00027a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027aa:	39 c6                	cmp    esi,eax
c00027ac:	0f 82 01 ff ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027b2:	29 c6                	sub    esi,eax
c00027b4:	31 d2                	xor    edx,edx
c00027b6:	89 f0                	mov    eax,esi
c00027b8:	f7 f3                	div    ebx
c00027ba:	39 de                	cmp    esi,ebx
c00027bc:	0f 82 f1 fe ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027c2:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027c7:	0f 87 e6 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00027cd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027d2:	0f 86 63 03 00 00    	jbe    c0002b3b <mount_volume+0x550>
c00027d8:	bb 03 00 00 00       	mov    ebx,0x3
c00027dd:	8d 70 02             	lea    esi,[eax+0x2]
c00027e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027e8:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027eb:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027ee:	31 d2                	xor    edx,edx
c00027f0:	89 c8                	mov    eax,ecx
c00027f2:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00027f5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00027f9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00027fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002801:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002805:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002808:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000280b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000280f:	31 d2                	xor    edx,edx
c0002811:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002815:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002819:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000281c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000281f:	83 fb 03             	cmp    ebx,0x3
c0002822:	75 2b                	jne    c000284f <mount_volume+0x264>
c0002824:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002827:	e8 2f f3 ff ff       	call   c0001b5b <ld_word>
c000282c:	66 09 c7             	or     di,ax
c000282f:	0f 85 7e fe ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002835:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000283b:	c1 e6 02             	shl    esi,0x2
c000283e:	e8 25 f3 ff ff       	call   c0001b68 <ld_dword>
c0002843:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000284a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000284d:	eb 30                	jmp    c000287f <mount_volume+0x294>
c000284f:	66 85 ff             	test   di,di
c0002852:	0f 84 5b fe ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002858:	31 d2                	xor    edx,edx
c000285a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000285e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002862:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002866:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002869:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000286c:	83 fb 02             	cmp    ebx,0x2
c000286f:	75 04                	jne    c0002875 <mount_volume+0x28a>
c0002871:	01 f6                	add    esi,esi
c0002873:	eb 0a                	jmp    c000287f <mount_volume+0x294>
c0002875:	8d 04 76             	lea    eax,[esi+esi*2]
c0002878:	83 e6 01             	and    esi,0x1
c000287b:	d1 e8                	shr    eax,1
c000287d:	01 c6                	add    esi,eax
c000287f:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002885:	c1 ee 09             	shr    esi,0x9
c0002888:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000288c:	0f 87 21 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c0002892:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002899:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00028a0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00028a4:	83 fb 03             	cmp    ebx,0x3
c00028a7:	75 7a                	jne    c0002923 <mount_volume+0x338>
c00028a9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028af:	e8 a7 f2 ff ff       	call   c0001b5b <ld_word>
c00028b4:	66 48                	dec    ax
c00028b6:	75 6b                	jne    c0002923 <mount_volume+0x338>
c00028b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028c0:	83 c2 01             	add    edx,0x1
c00028c3:	89 e8                	mov    eax,ebp
c00028c5:	83 d1 00             	adc    ecx,0x0
c00028c8:	e8 6c fa ff ff       	call   c0002339 <move_window>
c00028cd:	85 c0                	test   eax,eax
c00028cf:	75 52                	jne    c0002923 <mount_volume+0x338>
c00028d1:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028d5:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028db:	e8 7b f2 ff ff       	call   c0001b5b <ld_word>
c00028e0:	66 3d 55 aa          	cmp    ax,0xaa55
c00028e4:	75 3d                	jne    c0002923 <mount_volume+0x338>
c00028e6:	8d 45 54             	lea    eax,[ebp+0x54]
c00028e9:	e8 7a f2 ff ff       	call   c0001b68 <ld_dword>
c00028ee:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028f3:	75 2e                	jne    c0002923 <mount_volume+0x338>
c00028f5:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00028fb:	e8 68 f2 ff ff       	call   c0001b68 <ld_dword>
c0002900:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002905:	75 1c                	jne    c0002923 <mount_volume+0x338>
c0002907:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000290d:	e8 56 f2 ff ff       	call   c0001b68 <ld_dword>
c0002912:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002915:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000291b:	e8 48 f2 ff ff       	call   c0001b68 <ld_dword>
c0002920:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002923:	66 a1 00 64 02 c0    	mov    ax,ds:0xc0026400
c0002929:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000292c:	40                   	inc    eax
c000292d:	31 db                	xor    ebx,ebx
c000292f:	66 a3 00 64 02 c0    	mov    ds:0xc0026400,ax
c0002935:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002939:	e9 0c 02 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c000293e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002944:	e8 12 f2 ff ff       	call   c0001b5b <ld_word>
c0002949:	66 3d 00 01          	cmp    ax,0x100
c000294d:	0f 85 60 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002953:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000295a:	0f 85 53 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002960:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002966:	e8 15 f2 ff ff       	call   c0001b80 <ld_qword>
c000296b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000296f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002973:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002979:	e8 ea f1 ff ff       	call   c0001b68 <ld_dword>
c000297e:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002981:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002987:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000298a:	fe c8                	dec    al
c000298c:	0f 85 21 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002992:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002999:	bb 01 00 00 00       	mov    ebx,0x1
c000299e:	d3 e3                	shl    ebx,cl
c00029a0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00029a4:	66 85 db             	test   bx,bx
c00029a7:	0f 84 06 fd ff ff    	je     c00026b3 <mount_volume+0xc8>
c00029ad:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029b3:	e8 b0 f1 ff ff       	call   c0001b68 <ld_dword>
c00029b8:	89 c6                	mov    esi,eax
c00029ba:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029bf:	0f 87 ee fc ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00029c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029c9:	8d 40 02             	lea    eax,[eax+0x2]
c00029cc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029cf:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029d6:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029d9:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029df:	e8 84 f1 ff ff       	call   c0001b68 <ld_dword>
c00029e4:	31 d2                	xor    edx,edx
c00029e6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029ea:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00029f6:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00029f9:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00029fc:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002a02:	e8 61 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a07:	31 d2                	xor    edx,edx
c0002a09:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a0d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a11:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a15:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a18:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a1b:	0f b7 c3             	movzx  eax,bx
c0002a1e:	31 d2                	xor    edx,edx
c0002a20:	0f af f0             	imul   esi,eax
c0002a23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a27:	89 f0                	mov    eax,esi
c0002a29:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a2d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a31:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a35:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a39:	39 c1                	cmp    ecx,eax
c0002a3b:	89 df                	mov    edi,ebx
c0002a3d:	19 d7                	sbb    edi,edx
c0002a3f:	0f 82 6e fc ff ff    	jb     c00026b3 <mount_volume+0xc8>
c0002a45:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a4b:	31 db                	xor    ebx,ebx
c0002a4d:	e8 16 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a52:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a59:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a64:	85 db                	test   ebx,ebx
c0002a66:	75 39                	jne    c0002aa1 <mount_volume+0x4b6>
c0002a68:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a6c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a70:	0f 86 3d fc ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002a76:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a79:	31 ff                	xor    edi,edi
c0002a7b:	89 e8                	mov    eax,ebp
c0002a7d:	e8 72 f3 ff ff       	call   c0001df4 <clst2sect>
c0002a82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a86:	01 c6                	add    esi,eax
c0002a88:	89 e8                	mov    eax,ebp
c0002a8a:	11 d7                	adc    edi,edx
c0002a8c:	89 f2                	mov    edx,esi
c0002a8e:	89 f9                	mov    ecx,edi
c0002a90:	e8 a4 f8 ff ff       	call   c0002339 <move_window>
c0002a95:	85 c0                	test   eax,eax
c0002a97:	0f 85 07 fc ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002a9d:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002aa1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002aa6:	74 0b                	je     c0002ab3 <mount_volume+0x4c8>
c0002aa8:	83 c3 20             	add    ebx,0x20
c0002aab:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002ab1:	eb b1                	jmp    c0002a64 <mount_volume+0x479>
c0002ab3:	8d 75 54             	lea    esi,[ebp+0x54]
c0002ab6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002aba:	e8 a9 f0 ff ff       	call   c0001b68 <ld_dword>
c0002abf:	89 c3                	mov    ebx,eax
c0002ac1:	83 f8 01             	cmp    eax,0x1
c0002ac4:	0f 86 e9 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002aca:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002acd:	0f 86 e0 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002ad3:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ad6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ada:	0f af c2             	imul   eax,edx
c0002add:	31 d2                	xor    edx,edx
c0002adf:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002ae2:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002ae5:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002ae8:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002aeb:	31 c9                	xor    ecx,ecx
c0002aed:	89 da                	mov    edx,ebx
c0002aef:	89 e8                	mov    eax,ebp
c0002af1:	c1 ea 07             	shr    edx,0x7
c0002af4:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002af7:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002afa:	e8 3a f8 ff ff       	call   c0002339 <move_window>
c0002aff:	85 c0                	test   eax,eax
c0002b01:	0f 85 9d fb ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002b07:	89 d8                	mov    eax,ebx
c0002b09:	83 e0 7f             	and    eax,0x7f
c0002b0c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b0f:	e8 54 f0 ff ff       	call   c0001b68 <ld_dword>
c0002b14:	83 f8 ff             	cmp    eax,0xffffffff
c0002b17:	74 0a                	je     c0002b23 <mount_volume+0x538>
c0002b19:	43                   	inc    ebx
c0002b1a:	39 d8                	cmp    eax,ebx
c0002b1c:	74 cd                	je     c0002aeb <mount_volume+0x500>
c0002b1e:	e9 90 fb ff ff       	jmp    c00026b3 <mount_volume+0xc8>
c0002b23:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b2a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b31:	bb 04 00 00 00       	mov    ebx,0x4
c0002b36:	e9 e8 fd ff ff       	jmp    c0002923 <mount_volume+0x338>
c0002b3b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b40:	19 db                	sbb    ebx,ebx
c0002b42:	83 c3 02             	add    ebx,0x2
c0002b45:	e9 93 fc ff ff       	jmp    c00027dd <mount_volume+0x1f2>
c0002b4a:	83 c4 3c             	add    esp,0x3c
c0002b4d:	89 d8                	mov    eax,ebx
c0002b4f:	5b                   	pop    ebx
c0002b50:	5e                   	pop    esi
c0002b51:	5f                   	pop    edi
c0002b52:	5d                   	pop    ebp
c0002b53:	c3                   	ret    

c0002b54 <find_bitmap>:
c0002b54:	55                   	push   ebp
c0002b55:	57                   	push   edi
c0002b56:	89 c7                	mov    edi,eax
c0002b58:	56                   	push   esi
c0002b59:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b5c:	53                   	push   ebx
c0002b5d:	83 ec 1c             	sub    esp,0x1c
c0002b60:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b63:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b67:	83 e8 02             	sub    eax,0x2
c0002b6a:	39 f0                	cmp    eax,esi
c0002b6c:	77 02                	ja     c0002b70 <find_bitmap+0x1c>
c0002b6e:	31 f6                	xor    esi,esi
c0002b70:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b74:	89 f3                	mov    ebx,esi
c0002b76:	31 ed                	xor    ebp,ebp
c0002b78:	31 c9                	xor    ecx,ecx
c0002b7a:	89 da                	mov    edx,ebx
c0002b7c:	89 f8                	mov    eax,edi
c0002b7e:	c1 ea 0c             	shr    edx,0xc
c0002b81:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b84:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b87:	e8 ad f7 ff ff       	call   c0002339 <move_window>
c0002b8c:	85 c0                	test   eax,eax
c0002b8e:	75 68                	jne    c0002bf8 <find_bitmap+0xa4>
c0002b90:	89 da                	mov    edx,ebx
c0002b92:	89 d9                	mov    ecx,ebx
c0002b94:	c1 ea 03             	shr    edx,0x3
c0002b97:	83 e1 07             	and    ecx,0x7
c0002b9a:	b8 01 00 00 00       	mov    eax,0x1
c0002b9f:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002ba5:	d3 e0                	shl    eax,cl
c0002ba7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002baa:	83 e9 02             	sub    ecx,0x2
c0002bad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002bb1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bb5:	43                   	inc    ebx
c0002bb6:	21 c1                	and    ecx,eax
c0002bb8:	d1 e0                	shl    eax,1
c0002bba:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bbe:	77 09                	ja     c0002bc9 <find_bitmap+0x75>
c0002bc0:	31 db                	xor    ebx,ebx
c0002bc2:	ba 00 02 00 00       	mov    edx,0x200
c0002bc7:	31 c0                	xor    eax,eax
c0002bc9:	84 c9                	test   cl,cl
c0002bcb:	75 10                	jne    c0002bdd <find_bitmap+0x89>
c0002bcd:	45                   	inc    ebp
c0002bce:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002bd2:	75 0f                	jne    c0002be3 <find_bitmap+0x8f>
c0002bd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bd8:	83 c0 02             	add    eax,0x2
c0002bdb:	eb 22                	jmp    c0002bff <find_bitmap+0xab>
c0002bdd:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002be1:	31 ed                	xor    ebp,ebp
c0002be3:	39 de                	cmp    esi,ebx
c0002be5:	74 16                	je     c0002bfd <find_bitmap+0xa9>
c0002be7:	84 c0                	test   al,al
c0002be9:	75 c6                	jne    c0002bb1 <find_bitmap+0x5d>
c0002beb:	42                   	inc    edx
c0002bec:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002bf2:	77 84                	ja     c0002b78 <find_bitmap+0x24>
c0002bf4:	b0 01                	mov    al,0x1
c0002bf6:	eb b9                	jmp    c0002bb1 <find_bitmap+0x5d>
c0002bf8:	83 c8 ff             	or     eax,0xffffffff
c0002bfb:	eb 02                	jmp    c0002bff <find_bitmap+0xab>
c0002bfd:	31 c0                	xor    eax,eax
c0002bff:	83 c4 1c             	add    esp,0x1c
c0002c02:	5b                   	pop    ebx
c0002c03:	5e                   	pop    esi
c0002c04:	5f                   	pop    edi
c0002c05:	5d                   	pop    ebp
c0002c06:	c3                   	ret    

c0002c07 <change_bitmap>:
c0002c07:	55                   	push   ebp
c0002c08:	89 cd                	mov    ebp,ecx
c0002c0a:	57                   	push   edi
c0002c0b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c0e:	56                   	push   esi
c0002c0f:	89 c7                	mov    edi,eax
c0002c11:	53                   	push   ebx
c0002c12:	89 c8                	mov    eax,ecx
c0002c14:	83 ec 1c             	sub    esp,0x1c
c0002c17:	31 d2                	xor    edx,edx
c0002c19:	89 ce                	mov    esi,ecx
c0002c1b:	c1 e8 0c             	shr    eax,0xc
c0002c1e:	bb 01 00 00 00       	mov    ebx,0x1
c0002c23:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c26:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c29:	c1 ee 03             	shr    esi,0x3
c0002c2c:	83 e1 07             	and    ecx,0x7
c0002c2f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c35:	d3 e3                	shl    ebx,cl
c0002c37:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c3b:	89 c1                	mov    ecx,eax
c0002c3d:	89 d3                	mov    ebx,edx
c0002c3f:	83 c1 01             	add    ecx,0x1
c0002c42:	83 d3 00             	adc    ebx,0x0
c0002c45:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c49:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c4d:	89 d1                	mov    ecx,edx
c0002c4f:	89 c2                	mov    edx,eax
c0002c51:	89 f8                	mov    eax,edi
c0002c53:	e8 e1 f6 ff ff       	call   c0002339 <move_window>
c0002c58:	89 c1                	mov    ecx,eax
c0002c5a:	85 c0                	test   eax,eax
c0002c5c:	75 48                	jne    c0002ca6 <change_bitmap+0x9f>
c0002c5e:	31 d2                	xor    edx,edx
c0002c60:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c64:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c68:	0f 95 c2             	setne  dl
c0002c6b:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c6f:	74 3c                	je     c0002cad <change_bitmap+0xa6>
c0002c71:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c75:	4d                   	dec    ebp
c0002c76:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c7e:	74 32                	je     c0002cb2 <change_bitmap+0xab>
c0002c80:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c84:	75 d8                	jne    c0002c5e <change_bitmap+0x57>
c0002c86:	8d 46 01             	lea    eax,[esi+0x1]
c0002c89:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c8e:	89 c3                	mov    ebx,eax
c0002c90:	31 f6                	xor    esi,esi
c0002c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c9a:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ca0:	74 99                	je     c0002c3b <change_bitmap+0x34>
c0002ca2:	89 de                	mov    esi,ebx
c0002ca4:	eb b8                	jmp    c0002c5e <change_bitmap+0x57>
c0002ca6:	b9 01 00 00 00       	mov    ecx,0x1
c0002cab:	eb 05                	jmp    c0002cb2 <change_bitmap+0xab>
c0002cad:	b9 02 00 00 00       	mov    ecx,0x2
c0002cb2:	83 c4 1c             	add    esp,0x1c
c0002cb5:	89 c8                	mov    eax,ecx
c0002cb7:	5b                   	pop    ebx
c0002cb8:	5e                   	pop    esi
c0002cb9:	5f                   	pop    edi
c0002cba:	5d                   	pop    ebp
c0002cbb:	c3                   	ret    

c0002cbc <put_fat>:
c0002cbc:	83 fa 01             	cmp    edx,0x1
c0002cbf:	0f 86 7b 01 00 00    	jbe    c0002e40 <put_fat+0x184>
c0002cc5:	55                   	push   ebp
c0002cc6:	57                   	push   edi
c0002cc7:	89 cf                	mov    edi,ecx
c0002cc9:	56                   	push   esi
c0002cca:	b9 02 00 00 00       	mov    ecx,0x2
c0002ccf:	53                   	push   ebx
c0002cd0:	89 c6                	mov    esi,eax
c0002cd2:	83 ec 1c             	sub    esp,0x1c
c0002cd5:	89 d3                	mov    ebx,edx
c0002cd7:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cda:	0f 86 68 01 00 00    	jbe    c0002e48 <put_fat+0x18c>
c0002ce0:	8a 00                	mov    al,BYTE PTR [eax]
c0002ce2:	3c 02                	cmp    al,0x2
c0002ce4:	0f 84 c7 00 00 00    	je     c0002db1 <put_fat+0xf5>
c0002cea:	77 09                	ja     c0002cf5 <put_fat+0x39>
c0002cec:	fe c8                	dec    al
c0002cee:	74 17                	je     c0002d07 <put_fat+0x4b>
c0002cf0:	e9 53 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002cf5:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfa:	3c 04                	cmp    al,0x4
c0002cfc:	0f 86 e1 00 00 00    	jbe    c0002de3 <put_fat+0x127>
c0002d02:	e9 41 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002d07:	89 d5                	mov    ebp,edx
c0002d09:	31 c9                	xor    ecx,ecx
c0002d0b:	d1 ed                	shr    ebp,1
c0002d0d:	89 f0                	mov    eax,esi
c0002d0f:	01 d5                	add    ebp,edx
c0002d11:	89 ea                	mov    edx,ebp
c0002d13:	c1 ea 09             	shr    edx,0x9
c0002d16:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d19:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d1c:	e8 18 f6 ff ff       	call   c0002339 <move_window>
c0002d21:	89 c1                	mov    ecx,eax
c0002d23:	85 c0                	test   eax,eax
c0002d25:	0f 85 1d 01 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d2b:	8d 46 54             	lea    eax,[esi+0x54]
c0002d2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d32:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d35:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d3f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d43:	89 f8                	mov    eax,edi
c0002d45:	83 e3 01             	and    ebx,0x1
c0002d48:	74 0d                	je     c0002d57 <put_fat+0x9b>
c0002d4a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d4d:	89 fa                	mov    edx,edi
c0002d4f:	83 e0 0f             	and    eax,0xf
c0002d52:	c1 e2 04             	shl    edx,0x4
c0002d55:	09 d0                	or     eax,edx
c0002d57:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d5e:	31 c9                	xor    ecx,ecx
c0002d60:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d64:	c1 ea 09             	shr    edx,0x9
c0002d67:	89 f0                	mov    eax,esi
c0002d69:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d6c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d6f:	e8 c5 f5 ff ff       	call   c0002339 <move_window>
c0002d74:	89 c1                	mov    ecx,eax
c0002d76:	85 c0                	test   eax,eax
c0002d78:	0f 85 ca 00 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d7e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d82:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d88:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d8c:	85 db                	test   ebx,ebx
c0002d8e:	74 07                	je     c0002d97 <put_fat+0xdb>
c0002d90:	c1 ef 04             	shr    edi,0x4
c0002d93:	89 fa                	mov    edx,edi
c0002d95:	eb 0e                	jmp    c0002da5 <put_fat+0xe9>
c0002d97:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002d9a:	c1 ef 08             	shr    edi,0x8
c0002d9d:	83 e2 f0             	and    edx,0xfffffff0
c0002da0:	83 e7 0f             	and    edi,0xf
c0002da3:	09 fa                	or     edx,edi
c0002da5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002da8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002dac:	e9 97 00 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002db1:	31 c9                	xor    ecx,ecx
c0002db3:	c1 ea 08             	shr    edx,0x8
c0002db6:	89 f0                	mov    eax,esi
c0002db8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dbb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002dbe:	e8 76 f5 ff ff       	call   c0002339 <move_window>
c0002dc3:	89 c1                	mov    ecx,eax
c0002dc5:	85 c0                	test   eax,eax
c0002dc7:	75 7f                	jne    c0002e48 <put_fat+0x18c>
c0002dc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dcd:	01 db                	add    ebx,ebx
c0002dcf:	0f b7 d7             	movzx  edx,di
c0002dd2:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002dd8:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ddc:	e8 ec ed ff ff       	call   c0001bcd <st_word>
c0002de1:	eb 53                	jmp    c0002e36 <put_fat+0x17a>
c0002de3:	31 c9                	xor    ecx,ecx
c0002de5:	c1 ea 07             	shr    edx,0x7
c0002de8:	89 f0                	mov    eax,esi
c0002dea:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ded:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002df0:	e8 44 f5 ff ff       	call   c0002339 <move_window>
c0002df5:	89 c1                	mov    ecx,eax
c0002df7:	85 c0                	test   eax,eax
c0002df9:	75 4d                	jne    c0002e48 <put_fat+0x18c>
c0002dfb:	c1 e3 02             	shl    ebx,0x2
c0002dfe:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002e04:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002e07:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e0b:	74 1c                	je     c0002e29 <put_fat+0x16d>
c0002e0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e11:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e17:	89 d8                	mov    eax,ebx
c0002e19:	e8 4a ed ff ff       	call   c0001b68 <ld_dword>
c0002e1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e22:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e27:	09 c7                	or     edi,eax
c0002e29:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e2d:	89 fa                	mov    edx,edi
c0002e2f:	89 d8                	mov    eax,ebx
c0002e31:	e8 9b ed ff ff       	call   c0001bd1 <st_dword>
c0002e36:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e3a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e3e:	eb 08                	jmp    c0002e48 <put_fat+0x18c>
c0002e40:	b9 02 00 00 00       	mov    ecx,0x2
c0002e45:	89 c8                	mov    eax,ecx
c0002e47:	c3                   	ret    
c0002e48:	83 c4 1c             	add    esp,0x1c
c0002e4b:	89 c8                	mov    eax,ecx
c0002e4d:	5b                   	pop    ebx
c0002e4e:	5e                   	pop    esi
c0002e4f:	5f                   	pop    edi
c0002e50:	5d                   	pop    ebp
c0002e51:	c3                   	ret    

c0002e52 <fill_last_frag>:
c0002e52:	57                   	push   edi
c0002e53:	89 cf                	mov    edi,ecx
c0002e55:	56                   	push   esi
c0002e56:	89 d6                	mov    esi,edx
c0002e58:	53                   	push   ebx
c0002e59:	89 c3                	mov    ebx,eax
c0002e5b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e5e:	85 c0                	test   eax,eax
c0002e60:	74 21                	je     c0002e83 <fill_last_frag+0x31>
c0002e62:	89 f9                	mov    ecx,edi
c0002e64:	83 f8 01             	cmp    eax,0x1
c0002e67:	76 05                	jbe    c0002e6e <fill_last_frag+0x1c>
c0002e69:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e6c:	29 c1                	sub    ecx,eax
c0002e6e:	8d 56 01             	lea    edx,[esi+0x1]
c0002e71:	29 c2                	sub    edx,eax
c0002e73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e75:	e8 42 fe ff ff       	call   c0002cbc <put_fat>
c0002e7a:	85 c0                	test   eax,eax
c0002e7c:	75 05                	jne    c0002e83 <fill_last_frag+0x31>
c0002e7e:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e81:	eb d8                	jmp    c0002e5b <fill_last_frag+0x9>
c0002e83:	5b                   	pop    ebx
c0002e84:	5e                   	pop    esi
c0002e85:	5f                   	pop    edi
c0002e86:	c3                   	ret    

c0002e87 <fill_first_frag>:
c0002e87:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e8b:	75 2d                	jne    c0002eba <fill_first_frag+0x33>
c0002e8d:	57                   	push   edi
c0002e8e:	56                   	push   esi
c0002e8f:	53                   	push   ebx
c0002e90:	89 c3                	mov    ebx,eax
c0002e92:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002e95:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002e98:	01 d7                	add    edi,edx
c0002e9a:	39 fa                	cmp    edx,edi
c0002e9c:	74 14                	je     c0002eb2 <fill_first_frag+0x2b>
c0002e9e:	8d 72 01             	lea    esi,[edx+0x1]
c0002ea1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ea3:	89 f1                	mov    ecx,esi
c0002ea5:	e8 12 fe ff ff       	call   c0002cbc <put_fat>
c0002eaa:	89 f2                	mov    edx,esi
c0002eac:	85 c0                	test   eax,eax
c0002eae:	74 ea                	je     c0002e9a <fill_first_frag+0x13>
c0002eb0:	eb 0b                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eb2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002eb6:	31 c0                	xor    eax,eax
c0002eb8:	eb 03                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eba:	31 c0                	xor    eax,eax
c0002ebc:	c3                   	ret    
c0002ebd:	5b                   	pop    ebx
c0002ebe:	5e                   	pop    esi
c0002ebf:	5f                   	pop    edi
c0002ec0:	c3                   	ret    

c0002ec1 <get_fat>:
c0002ec1:	83 fa 01             	cmp    edx,0x1
c0002ec4:	0f 86 db 01 00 00    	jbe    c00030a5 <get_fat+0x1e4>
c0002eca:	55                   	push   ebp
c0002ecb:	b9 01 00 00 00       	mov    ecx,0x1
c0002ed0:	57                   	push   edi
c0002ed1:	56                   	push   esi
c0002ed2:	53                   	push   ebx
c0002ed3:	83 ec 1c             	sub    esp,0x1c
c0002ed6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ed8:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002edb:	0f 86 cc 01 00 00    	jbe    c00030ad <get_fat+0x1ec>
c0002ee1:	89 c3                	mov    ebx,eax
c0002ee3:	89 d6                	mov    esi,edx
c0002ee5:	8a 07                	mov    al,BYTE PTR [edi]
c0002ee7:	3c 02                	cmp    al,0x2
c0002ee9:	0f 84 99 00 00 00    	je     c0002f88 <get_fat+0xc7>
c0002eef:	77 09                	ja     c0002efa <get_fat+0x39>
c0002ef1:	fe c8                	dec    al
c0002ef3:	74 1a                	je     c0002f0f <get_fat+0x4e>
c0002ef5:	e9 b3 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002efa:	3c 03                	cmp    al,0x3
c0002efc:	0f 84 b5 00 00 00    	je     c0002fb7 <get_fat+0xf6>
c0002f02:	3c 04                	cmp    al,0x4
c0002f04:	0f 84 e3 00 00 00    	je     c0002fed <get_fat+0x12c>
c0002f0a:	e9 9e 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f0f:	89 d3                	mov    ebx,edx
c0002f11:	31 c9                	xor    ecx,ecx
c0002f13:	d1 eb                	shr    ebx,1
c0002f15:	89 f8                	mov    eax,edi
c0002f17:	01 d3                	add    ebx,edx
c0002f19:	89 da                	mov    edx,ebx
c0002f1b:	c1 ea 09             	shr    edx,0x9
c0002f1e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f21:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f24:	e8 10 f4 ff ff       	call   c0002339 <move_window>
c0002f29:	85 c0                	test   eax,eax
c0002f2b:	74 08                	je     c0002f35 <get_fat+0x74>
c0002f2d:	83 c9 ff             	or     ecx,0xffffffff
c0002f30:	e9 78 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f35:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f38:	31 c9                	xor    ecx,ecx
c0002f3a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f40:	89 ea                	mov    edx,ebp
c0002f42:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f46:	c1 ea 09             	shr    edx,0x9
c0002f49:	89 f8                	mov    eax,edi
c0002f4b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f4e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f51:	e8 e3 f3 ff ff       	call   c0002339 <move_window>
c0002f56:	85 c0                	test   eax,eax
c0002f58:	75 d3                	jne    c0002f2d <get_fat+0x6c>
c0002f5a:	0f b6 c3             	movzx  eax,bl
c0002f5d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f63:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f68:	c1 e3 08             	shl    ebx,0x8
c0002f6b:	09 c3                	or     ebx,eax
c0002f6d:	89 d9                	mov    ecx,ebx
c0002f6f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f75:	83 e6 01             	and    esi,0x1
c0002f78:	0f 84 2f 01 00 00    	je     c00030ad <get_fat+0x1ec>
c0002f7e:	89 d9                	mov    ecx,ebx
c0002f80:	c1 e9 04             	shr    ecx,0x4
c0002f83:	e9 25 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f88:	31 c9                	xor    ecx,ecx
c0002f8a:	c1 ea 08             	shr    edx,0x8
c0002f8d:	89 f8                	mov    eax,edi
c0002f8f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f92:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f95:	e8 9f f3 ff ff       	call   c0002339 <move_window>
c0002f9a:	85 c0                	test   eax,eax
c0002f9c:	75 8f                	jne    c0002f2d <get_fat+0x6c>
c0002f9e:	01 f6                	add    esi,esi
c0002fa0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002fa6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002faa:	e8 ac eb ff ff       	call   c0001b5b <ld_word>
c0002faf:	0f b7 c8             	movzx  ecx,ax
c0002fb2:	e9 f6 00 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002fb7:	31 c9                	xor    ecx,ecx
c0002fb9:	c1 ea 07             	shr    edx,0x7
c0002fbc:	89 f8                	mov    eax,edi
c0002fbe:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fc1:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fc4:	e8 70 f3 ff ff       	call   c0002339 <move_window>
c0002fc9:	85 c0                	test   eax,eax
c0002fcb:	0f 85 5c ff ff ff    	jne    c0002f2d <get_fat+0x6c>
c0002fd1:	c1 e6 02             	shl    esi,0x2
c0002fd4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fda:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fde:	e8 85 eb ff ff       	call   c0001b68 <ld_dword>
c0002fe3:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002fe8:	e9 b4 00 00 00       	jmp    c00030a1 <get_fat+0x1e0>
c0002fed:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ff0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff3:	89 d1                	mov    ecx,edx
c0002ff5:	09 c1                	or     ecx,eax
c0002ff7:	74 06                	je     c0002fff <get_fat+0x13e>
c0002ff9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ffd:	75 0f                	jne    c000300e <get_fat+0x14d>
c0002fff:	b9 01 00 00 00       	mov    ecx,0x1
c0003004:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003008:	0f 85 9f 00 00 00    	jne    c00030ad <get_fat+0x1ec>
c000300e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003012:	89 f5                	mov    ebp,esi
c0003014:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003019:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000301c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000301f:	80 f9 02             	cmp    cl,0x2
c0003022:	75 35                	jne    c0003059 <get_fat+0x198>
c0003024:	83 c0 ff             	add    eax,0xffffffff
c0003027:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000302c:	83 d2 ff             	adc    edx,0xffffffff
c000302f:	31 db                	xor    ebx,ebx
c0003031:	0f ac d0 09          	shrd   eax,edx,0x9
c0003035:	53                   	push   ebx
c0003036:	c1 ea 09             	shr    edx,0x9
c0003039:	51                   	push   ecx
c000303a:	52                   	push   edx
c000303b:	50                   	push   eax
c000303c:	e8 63 df 01 00       	call   c0020fa4 <__udivdi3>
c0003041:	83 c4 10             	add    esp,0x10
c0003044:	b9 01 00 00 00       	mov    ecx,0x1
c0003049:	39 c5                	cmp    ebp,eax
c000304b:	77 60                	ja     c00030ad <get_fat+0x1ec>
c000304d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003052:	74 59                	je     c00030ad <get_fat+0x1ec>
c0003054:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003057:	eb 54                	jmp    c00030ad <get_fat+0x1ec>
c0003059:	80 f9 03             	cmp    cl,0x3
c000305c:	75 05                	jne    c0003063 <get_fat+0x1a2>
c000305e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003061:	77 f1                	ja     c0003054 <get_fat+0x193>
c0003063:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003068:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000306c:	75 3f                	jne    c00030ad <get_fat+0x1ec>
c000306e:	31 c9                	xor    ecx,ecx
c0003070:	89 f2                	mov    edx,esi
c0003072:	89 f8                	mov    eax,edi
c0003074:	c1 ea 07             	shr    edx,0x7
c0003077:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000307a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000307d:	e8 b7 f2 ff ff       	call   c0002339 <move_window>
c0003082:	85 c0                	test   eax,eax
c0003084:	0f 85 a3 fe ff ff    	jne    c0002f2d <get_fat+0x6c>
c000308a:	c1 e6 02             	shl    esi,0x2
c000308d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003093:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003097:	e8 cc ea ff ff       	call   c0001b68 <ld_dword>
c000309c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00030a1:	89 c1                	mov    ecx,eax
c00030a3:	eb 08                	jmp    c00030ad <get_fat+0x1ec>
c00030a5:	b9 01 00 00 00       	mov    ecx,0x1
c00030aa:	89 c8                	mov    eax,ecx
c00030ac:	c3                   	ret    
c00030ad:	83 c4 1c             	add    esp,0x1c
c00030b0:	89 c8                	mov    eax,ecx
c00030b2:	5b                   	pop    ebx
c00030b3:	5e                   	pop    esi
c00030b4:	5f                   	pop    edi
c00030b5:	5d                   	pop    ebp
c00030b6:	c3                   	ret    

c00030b7 <dir_sdi>:
c00030b7:	55                   	push   ebp
c00030b8:	57                   	push   edi
c00030b9:	56                   	push   esi
c00030ba:	53                   	push   ebx
c00030bb:	89 c3                	mov    ebx,eax
c00030bd:	83 ec 1c             	sub    esp,0x1c
c00030c0:	8b 38                	mov    edi,DWORD PTR [eax]
c00030c2:	31 c0                	xor    eax,eax
c00030c4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030c7:	0f 94 c0             	sete   al
c00030ca:	48                   	dec    eax
c00030cb:	25 00 00 20 f0       	and    eax,0xf0200000
c00030d0:	05 00 00 00 10       	add    eax,0x10000000
c00030d5:	39 d0                	cmp    eax,edx
c00030d7:	77 0a                	ja     c00030e3 <dir_sdi+0x2c>
c00030d9:	b8 02 00 00 00       	mov    eax,0x2
c00030de:	e9 c4 00 00 00       	jmp    c00031a7 <dir_sdi+0xf0>
c00030e3:	89 d6                	mov    esi,edx
c00030e5:	f6 c2 1f             	test   dl,0x1f
c00030e8:	75 ef                	jne    c00030d9 <dir_sdi+0x22>
c00030ea:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030ed:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00030f0:	85 c9                	test   ecx,ecx
c00030f2:	75 2d                	jne    c0003121 <dir_sdi+0x6a>
c00030f4:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00030f7:	77 1b                	ja     c0003114 <dir_sdi+0x5d>
c00030f9:	89 f2                	mov    edx,esi
c00030fb:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00030ff:	c1 ea 05             	shr    edx,0x5
c0003102:	39 c2                	cmp    edx,eax
c0003104:	73 d3                	jae    c00030d9 <dir_sdi+0x22>
c0003106:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003109:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000310c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000310f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003112:	eb 4b                	jmp    c000315f <dir_sdi+0xa8>
c0003114:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003117:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000311b:	85 c0                	test   eax,eax
c000311d:	74 da                	je     c00030f9 <dir_sdi+0x42>
c000311f:	89 c1                	mov    ecx,eax
c0003121:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003125:	c1 e5 09             	shl    ebp,0x9
c0003128:	89 ca                	mov    edx,ecx
c000312a:	39 ee                	cmp    esi,ebp
c000312c:	72 1c                	jb     c000314a <dir_sdi+0x93>
c000312e:	89 d8                	mov    eax,ebx
c0003130:	e8 8c fd ff ff       	call   c0002ec1 <get_fat>
c0003135:	89 c1                	mov    ecx,eax
c0003137:	83 f8 ff             	cmp    eax,0xffffffff
c000313a:	74 66                	je     c00031a2 <dir_sdi+0xeb>
c000313c:	83 f8 01             	cmp    eax,0x1
c000313f:	76 98                	jbe    c00030d9 <dir_sdi+0x22>
c0003141:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003144:	76 93                	jbe    c00030d9 <dir_sdi+0x22>
c0003146:	29 ee                	sub    esi,ebp
c0003148:	eb de                	jmp    c0003128 <dir_sdi+0x71>
c000314a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000314e:	89 f8                	mov    eax,edi
c0003150:	e8 9f ec ff ff       	call   c0001df4 <clst2sect>
c0003155:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003159:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000315c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000315f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003162:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003165:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003168:	89 d1                	mov    ecx,edx
c000316a:	09 c1                	or     ecx,eax
c000316c:	0f 84 67 ff ff ff    	je     c00030d9 <dir_sdi+0x22>
c0003172:	89 f1                	mov    ecx,esi
c0003174:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000317c:	c1 e9 09             	shr    ecx,0x9
c000317f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003183:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003187:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000318b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000318e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003194:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003197:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000319e:	31 c0                	xor    eax,eax
c00031a0:	eb 05                	jmp    c00031a7 <dir_sdi+0xf0>
c00031a2:	b8 01 00 00 00       	mov    eax,0x1
c00031a7:	83 c4 1c             	add    esp,0x1c
c00031aa:	5b                   	pop    ebx
c00031ab:	5e                   	pop    esi
c00031ac:	5f                   	pop    edi
c00031ad:	5d                   	pop    ebp
c00031ae:	c3                   	ret    

c00031af <create_chain>:
c00031af:	55                   	push   ebp
c00031b0:	89 c5                	mov    ebp,eax
c00031b2:	57                   	push   edi
c00031b3:	56                   	push   esi
c00031b4:	53                   	push   ebx
c00031b5:	83 ec 1c             	sub    esp,0x1c
c00031b8:	85 d2                	test   edx,edx
c00031ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031be:	8b 30                	mov    esi,DWORD PTR [eax]
c00031c0:	75 0e                	jne    c00031d0 <create_chain+0x21>
c00031c2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031c5:	85 ff                	test   edi,edi
c00031c7:	74 39                	je     c0003202 <create_chain+0x53>
c00031c9:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031cc:	77 39                	ja     c0003207 <create_chain+0x58>
c00031ce:	eb 32                	jmp    c0003202 <create_chain+0x53>
c00031d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031d4:	e8 e8 fc ff ff       	call   c0002ec1 <get_fat>
c00031d9:	89 c3                	mov    ebx,eax
c00031db:	83 f8 01             	cmp    eax,0x1
c00031de:	77 0a                	ja     c00031ea <create_chain+0x3b>
c00031e0:	bb 01 00 00 00       	mov    ebx,0x1
c00031e5:	e9 ba 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c00031ea:	83 f8 ff             	cmp    eax,0xffffffff
c00031ed:	0f 84 62 01 00 00    	je     c0003355 <create_chain+0x1a6>
c00031f3:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031f6:	0f 87 a8 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c00031fc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003200:	eb 05                	jmp    c0003207 <create_chain+0x58>
c0003202:	bf 01 00 00 00       	mov    edi,0x1
c0003207:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000320b:	75 07                	jne    c0003214 <create_chain+0x65>
c000320d:	31 db                	xor    ebx,ebx
c000320f:	e9 90 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c0003214:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003217:	75 74                	jne    c000328d <create_chain+0xde>
c0003219:	b9 01 00 00 00       	mov    ecx,0x1
c000321e:	89 fa                	mov    edx,edi
c0003220:	89 f0                	mov    eax,esi
c0003222:	e8 2d f9 ff ff       	call   c0002b54 <find_bitmap>
c0003227:	89 c3                	mov    ebx,eax
c0003229:	8d 40 ff             	lea    eax,[eax-0x1]
c000322c:	83 f8 fd             	cmp    eax,0xfffffffd
c000322f:	0f 87 6f 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c0003235:	83 ec 0c             	sub    esp,0xc
c0003238:	b9 01 00 00 00       	mov    ecx,0x1
c000323d:	6a 01                	push   0x1
c000323f:	89 da                	mov    edx,ebx
c0003241:	89 f0                	mov    eax,esi
c0003243:	e8 bf f9 ff ff       	call   c0002c07 <change_bitmap>
c0003248:	83 c4 10             	add    esp,0x10
c000324b:	83 f8 02             	cmp    eax,0x2
c000324e:	74 90                	je     c00031e0 <create_chain+0x31>
c0003250:	83 f8 01             	cmp    eax,0x1
c0003253:	0f 84 fc 00 00 00    	je     c0003355 <create_chain+0x1a6>
c0003259:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000325e:	75 09                	jne    c0003269 <create_chain+0xba>
c0003260:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003264:	e9 0c 01 00 00       	jmp    c0003375 <create_chain+0x1c6>
c0003269:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000326d:	0f 85 e7 00 00 00    	jne    c000335a <create_chain+0x1ab>
c0003273:	8d 57 01             	lea    edx,[edi+0x1]
c0003276:	39 da                	cmp    edx,ebx
c0003278:	0f 84 f7 00 00 00    	je     c0003375 <create_chain+0x1c6>
c000327e:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003281:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003285:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003288:	e9 cd 00 00 00       	jmp    c000335a <create_chain+0x1ab>
c000328d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003291:	75 41                	jne    c00032d4 <create_chain+0x125>
c0003293:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003296:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003299:	77 05                	ja     c00032a0 <create_chain+0xf1>
c000329b:	bb 02 00 00 00       	mov    ebx,0x2
c00032a0:	89 da                	mov    edx,ebx
c00032a2:	89 e8                	mov    eax,ebp
c00032a4:	e8 18 fc ff ff       	call   c0002ec1 <get_fat>
c00032a9:	83 f8 01             	cmp    eax,0x1
c00032ac:	0f 84 2e ff ff ff    	je     c00031e0 <create_chain+0x31>
c00032b2:	83 f8 ff             	cmp    eax,0xffffffff
c00032b5:	0f 84 9a 00 00 00    	je     c0003355 <create_chain+0x1a6>
c00032bb:	85 c0                	test   eax,eax
c00032bd:	74 11                	je     c00032d0 <create_chain+0x121>
c00032bf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032c2:	83 f8 01             	cmp    eax,0x1
c00032c5:	76 0d                	jbe    c00032d4 <create_chain+0x125>
c00032c7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032ca:	76 08                	jbe    c00032d4 <create_chain+0x125>
c00032cc:	89 c7                	mov    edi,eax
c00032ce:	eb 04                	jmp    c00032d4 <create_chain+0x125>
c00032d0:	85 db                	test   ebx,ebx
c00032d2:	75 38                	jne    c000330c <create_chain+0x15d>
c00032d4:	89 fb                	mov    ebx,edi
c00032d6:	43                   	inc    ebx
c00032d7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032da:	77 0e                	ja     c00032ea <create_chain+0x13b>
c00032dc:	83 ff 01             	cmp    edi,0x1
c00032df:	0f 86 28 ff ff ff    	jbe    c000320d <create_chain+0x5e>
c00032e5:	bb 02 00 00 00       	mov    ebx,0x2
c00032ea:	89 da                	mov    edx,ebx
c00032ec:	89 e8                	mov    eax,ebp
c00032ee:	e8 ce fb ff ff       	call   c0002ec1 <get_fat>
c00032f3:	85 c0                	test   eax,eax
c00032f5:	74 15                	je     c000330c <create_chain+0x15d>
c00032f7:	83 f8 01             	cmp    eax,0x1
c00032fa:	0f 84 e0 fe ff ff    	je     c00031e0 <create_chain+0x31>
c0003300:	40                   	inc    eax
c0003301:	74 52                	je     c0003355 <create_chain+0x1a6>
c0003303:	39 fb                	cmp    ebx,edi
c0003305:	75 cf                	jne    c00032d6 <create_chain+0x127>
c0003307:	e9 01 ff ff ff       	jmp    c000320d <create_chain+0x5e>
c000330c:	83 c9 ff             	or     ecx,0xffffffff
c000330f:	89 da                	mov    edx,ebx
c0003311:	89 f0                	mov    eax,esi
c0003313:	e8 a4 f9 ff ff       	call   c0002cbc <put_fat>
c0003318:	85 c0                	test   eax,eax
c000331a:	75 32                	jne    c000334e <create_chain+0x19f>
c000331c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003321:	74 11                	je     c0003334 <create_chain+0x185>
c0003323:	89 d9                	mov    ecx,ebx
c0003325:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003329:	89 f0                	mov    eax,esi
c000332b:	e8 8c f9 ff ff       	call   c0002cbc <put_fat>
c0003330:	85 c0                	test   eax,eax
c0003332:	75 1a                	jne    c000334e <create_chain+0x19f>
c0003334:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003337:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000333a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000333d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003340:	39 d0                	cmp    eax,edx
c0003342:	77 04                	ja     c0003348 <create_chain+0x199>
c0003344:	48                   	dec    eax
c0003345:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003348:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000334c:	eb 56                	jmp    c00033a4 <create_chain+0x1f5>
c000334e:	48                   	dec    eax
c000334f:	0f 85 8b fe ff ff    	jne    c00031e0 <create_chain+0x31>
c0003355:	83 cb ff             	or     ebx,0xffffffff
c0003358:	eb 4a                	jmp    c00033a4 <create_chain+0x1f5>
c000335a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000335e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003361:	41                   	inc    ecx
c0003362:	39 d9                	cmp    ecx,ebx
c0003364:	75 19                	jne    c000337f <create_chain+0x1d0>
c0003366:	b9 02 00 00 00       	mov    ecx,0x2
c000336b:	85 d2                	test   edx,edx
c000336d:	74 03                	je     c0003372 <create_chain+0x1c3>
c000336f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003372:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003375:	85 c0                	test   eax,eax
c0003377:	0f 85 63 fe ff ff    	jne    c00031e0 <create_chain+0x31>
c000337d:	eb b5                	jmp    c0003334 <create_chain+0x185>
c000337f:	85 d2                	test   edx,edx
c0003381:	75 07                	jne    c000338a <create_chain+0x1db>
c0003383:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000338a:	89 d9                	mov    ecx,ebx
c000338c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003390:	89 e8                	mov    eax,ebp
c0003392:	e8 bb fa ff ff       	call   c0002e52 <fill_last_frag>
c0003397:	85 c0                	test   eax,eax
c0003399:	75 b3                	jne    c000334e <create_chain+0x19f>
c000339b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00033a2:	eb 90                	jmp    c0003334 <create_chain+0x185>
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	89 d8                	mov    eax,ebx
c00033a9:	5b                   	pop    ebx
c00033aa:	5e                   	pop    esi
c00033ab:	5f                   	pop    edi
c00033ac:	5d                   	pop    ebp
c00033ad:	c3                   	ret    

c00033ae <remove_chain>:
c00033ae:	55                   	push   ebp
c00033af:	57                   	push   edi
c00033b0:	56                   	push   esi
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	83 fa 01             	cmp    edx,0x1
c00033b8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033bc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033be:	77 0a                	ja     c00033ca <remove_chain+0x1c>
c00033c0:	b8 02 00 00 00       	mov    eax,0x2
c00033c5:	e9 24 01 00 00       	jmp    c00034ee <remove_chain+0x140>
c00033ca:	89 d6                	mov    esi,edx
c00033cc:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033cf:	76 ef                	jbe    c00033c0 <remove_chain+0x12>
c00033d1:	89 c7                	mov    edi,eax
c00033d3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d8:	75 06                	jne    c00033e0 <remove_chain+0x32>
c00033da:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033de:	eb 54                	jmp    c0003434 <remove_chain+0x86>
c00033e0:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033e3:	75 06                	jne    c00033eb <remove_chain+0x3d>
c00033e5:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033e9:	74 ef                	je     c00033da <remove_chain+0x2c>
c00033eb:	83 c9 ff             	or     ecx,0xffffffff
c00033ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033f2:	89 d8                	mov    eax,ebx
c00033f4:	e8 c3 f8 ff ff       	call   c0002cbc <put_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 dd                	je     c00033da <remove_chain+0x2c>
c00033fd:	e9 ec 00 00 00       	jmp    c00034ee <remove_chain+0x140>
c0003402:	83 f8 01             	cmp    eax,0x1
c0003405:	74 b9                	je     c00033c0 <remove_chain+0x12>
c0003407:	83 f8 ff             	cmp    eax,0xffffffff
c000340a:	74 6d                	je     c0003479 <remove_chain+0xcb>
c000340c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000340f:	75 6f                	jne    c0003480 <remove_chain+0xd2>
c0003411:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003414:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003417:	8d 51 fe             	lea    edx,[ecx-0x2]
c000341a:	39 d0                	cmp    eax,edx
c000341c:	73 08                	jae    c0003426 <remove_chain+0x78>
c000341e:	40                   	inc    eax
c000341f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003423:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003426:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003429:	39 e9                	cmp    ecx,ebp
c000342b:	75 64                	jne    c0003491 <remove_chain+0xe3>
c000342d:	89 ee                	mov    esi,ebp
c000342f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003432:	76 0f                	jbe    c0003443 <remove_chain+0x95>
c0003434:	89 f2                	mov    edx,esi
c0003436:	89 f8                	mov    eax,edi
c0003438:	e8 84 fa ff ff       	call   c0002ec1 <get_fat>
c000343d:	89 c5                	mov    ebp,eax
c000343f:	85 c0                	test   eax,eax
c0003441:	75 bf                	jne    c0003402 <remove_chain+0x54>
c0003443:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003446:	0f 85 a0 00 00 00    	jne    c00034ec <remove_chain+0x13e>
c000344c:	eb 6c                	jmp    c00034ba <remove_chain+0x10c>
c000344e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003451:	84 c0                	test   al,al
c0003453:	75 7d                	jne    c00034d2 <remove_chain+0x124>
c0003455:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003458:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000345c:	0f 84 86 00 00 00    	je     c00034e8 <remove_chain+0x13a>
c0003462:	89 da                	mov    edx,ebx
c0003464:	89 f8                	mov    eax,edi
c0003466:	e8 56 fa ff ff       	call   c0002ec1 <get_fat>
c000346b:	83 f8 01             	cmp    eax,0x1
c000346e:	0f 86 4c ff ff ff    	jbe    c00033c0 <remove_chain+0x12>
c0003474:	83 f8 ff             	cmp    eax,0xffffffff
c0003477:	75 4e                	jne    c00034c7 <remove_chain+0x119>
c0003479:	b8 01 00 00 00       	mov    eax,0x1
c000347e:	eb 6e                	jmp    c00034ee <remove_chain+0x140>
c0003480:	31 c9                	xor    ecx,ecx
c0003482:	89 f2                	mov    edx,esi
c0003484:	89 d8                	mov    eax,ebx
c0003486:	e8 31 f8 ff ff       	call   c0002cbc <put_fat>
c000348b:	85 c0                	test   eax,eax
c000348d:	74 82                	je     c0003411 <remove_chain+0x63>
c000348f:	eb 5d                	jmp    c00034ee <remove_chain+0x140>
c0003491:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003494:	75 1b                	jne    c00034b1 <remove_chain+0x103>
c0003496:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000349a:	89 d8                	mov    eax,ebx
c000349c:	83 ec 0c             	sub    esp,0xc
c000349f:	6a 00                	push   0x0
c00034a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00034a5:	e8 5d f7 ff ff       	call   c0002c07 <change_bitmap>
c00034aa:	83 c4 10             	add    esp,0x10
c00034ad:	85 c0                	test   eax,eax
c00034af:	75 3d                	jne    c00034ee <remove_chain+0x140>
c00034b1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034b5:	e9 73 ff ff ff       	jmp    c000342d <remove_chain+0x7f>
c00034ba:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034bf:	75 8d                	jne    c000344e <remove_chain+0xa0>
c00034c1:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034c5:	eb 25                	jmp    c00034ec <remove_chain+0x13e>
c00034c7:	8d 53 01             	lea    edx,[ebx+0x1]
c00034ca:	89 c3                	mov    ebx,eax
c00034cc:	39 c2                	cmp    edx,eax
c00034ce:	74 88                	je     c0003458 <remove_chain+0xaa>
c00034d0:	eb 1a                	jmp    c00034ec <remove_chain+0x13e>
c00034d2:	3c 03                	cmp    al,0x3
c00034d4:	75 16                	jne    c00034ec <remove_chain+0x13e>
c00034d6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034d9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034dd:	77 0d                	ja     c00034ec <remove_chain+0x13e>
c00034df:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034e2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034e6:	72 04                	jb     c00034ec <remove_chain+0x13e>
c00034e8:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034ec:	31 c0                	xor    eax,eax
c00034ee:	83 c4 1c             	add    esp,0x1c
c00034f1:	5b                   	pop    ebx
c00034f2:	5e                   	pop    esi
c00034f3:	5f                   	pop    edi
c00034f4:	5d                   	pop    ebp
c00034f5:	c3                   	ret    

c00034f6 <dir_clear>:
c00034f6:	55                   	push   ebp
c00034f7:	57                   	push   edi
c00034f8:	56                   	push   esi
c00034f9:	89 c6                	mov    esi,eax
c00034fb:	53                   	push   ebx
c00034fc:	83 ec 1c             	sub    esp,0x1c
c00034ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003503:	e8 9d ed ff ff       	call   c00022a5 <sync_window>
c0003508:	85 c0                	test   eax,eax
c000350a:	0f 85 de 00 00 00    	jne    c00035ee <dir_clear+0xf8>
c0003510:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003514:	89 f0                	mov    eax,esi
c0003516:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003519:	e8 d6 e8 ff ff       	call   c0001df4 <clst2sect>
c000351e:	b9 00 02 00 00       	mov    ecx,0x200
c0003523:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003527:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000352b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000352e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003531:	89 e8                	mov    eax,ebp
c0003533:	31 d2                	xor    edx,edx
c0003535:	e8 b5 e6 ff ff       	call   c0001bef <mem_set>
c000353a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000353e:	c1 e3 09             	shl    ebx,0x9
c0003541:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003547:	76 1f                	jbe    c0003568 <dir_clear+0x72>
c0003549:	bb 00 80 00 00       	mov    ebx,0x8000
c000354e:	eb 18                	jmp    c0003568 <dir_clear+0x72>
c0003550:	83 ec 0c             	sub    esp,0xc
c0003553:	53                   	push   ebx
c0003554:	e8 6b 50 00 00       	call   c00085c4 <ff_memalloc>
c0003559:	83 c4 10             	add    esp,0x10
c000355c:	89 c7                	mov    edi,eax
c000355e:	85 c0                	test   eax,eax
c0003560:	0f 85 8f 00 00 00    	jne    c00035f5 <dir_clear+0xff>
c0003566:	d1 eb                	shr    ebx,1
c0003568:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000356e:	77 e0                	ja     c0003550 <dir_clear+0x5a>
c0003570:	31 db                	xor    ebx,ebx
c0003572:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003576:	39 d8                	cmp    eax,ebx
c0003578:	76 66                	jbe    c00035e0 <dir_clear+0xea>
c000357a:	83 ec 0c             	sub    esp,0xc
c000357d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003581:	6a 01                	push   0x1
c0003583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000358b:	55                   	push   ebp
c000358c:	50                   	push   eax
c000358d:	e8 94 e5 ff ff       	call   c0001b26 <disk_write>
c0003592:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003597:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000359c:	83 c4 20             	add    esp,0x20
c000359f:	85 c0                	test   eax,eax
c00035a1:	75 3d                	jne    c00035e0 <dir_clear+0xea>
c00035a3:	43                   	inc    ebx
c00035a4:	eb cc                	jmp    c0003572 <dir_clear+0x7c>
c00035a6:	83 ec 0c             	sub    esp,0xc
c00035a9:	31 d2                	xor    edx,edx
c00035ab:	55                   	push   ebp
c00035ac:	89 d8                	mov    eax,ebx
c00035ae:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035b2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035b6:	52                   	push   edx
c00035b7:	50                   	push   eax
c00035b8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035bc:	57                   	push   edi
c00035bd:	50                   	push   eax
c00035be:	e8 63 e5 ff ff       	call   c0001b26 <disk_write>
c00035c3:	83 c4 20             	add    esp,0x20
c00035c6:	85 c0                	test   eax,eax
c00035c8:	75 0a                	jne    c00035d4 <dir_clear+0xde>
c00035ca:	01 eb                	add    ebx,ebp
c00035cc:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035d0:	39 d8                	cmp    eax,ebx
c00035d2:	77 d2                	ja     c00035a6 <dir_clear+0xb0>
c00035d4:	83 ec 0c             	sub    esp,0xc
c00035d7:	57                   	push   edi
c00035d8:	e8 ff 4f 00 00       	call   c00085dc <ff_memfree>
c00035dd:	83 c4 10             	add    esp,0x10
c00035e0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035e4:	39 d8                	cmp    eax,ebx
c00035e6:	0f 95 c0             	setne  al
c00035e9:	0f b6 c0             	movzx  eax,al
c00035ec:	eb 19                	jmp    c0003607 <dir_clear+0x111>
c00035ee:	b8 01 00 00 00       	mov    eax,0x1
c00035f3:	eb 12                	jmp    c0003607 <dir_clear+0x111>
c00035f5:	89 d9                	mov    ecx,ebx
c00035f7:	31 d2                	xor    edx,edx
c00035f9:	c1 eb 09             	shr    ebx,0x9
c00035fc:	e8 ee e5 ff ff       	call   c0001bef <mem_set>
c0003601:	89 dd                	mov    ebp,ebx
c0003603:	31 db                	xor    ebx,ebx
c0003605:	eb c5                	jmp    c00035cc <dir_clear+0xd6>
c0003607:	83 c4 1c             	add    esp,0x1c
c000360a:	5b                   	pop    ebx
c000360b:	5e                   	pop    esi
c000360c:	5f                   	pop    edi
c000360d:	5d                   	pop    ebp
c000360e:	c3                   	ret    

c000360f <dir_next>:
c000360f:	55                   	push   ebp
c0003610:	57                   	push   edi
c0003611:	56                   	push   esi
c0003612:	53                   	push   ebx
c0003613:	89 c3                	mov    ebx,eax
c0003615:	83 ec 1c             	sub    esp,0x1c
c0003618:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003621:	8d 78 20             	lea    edi,[eax+0x20]
c0003624:	31 c0                	xor    eax,eax
c0003626:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000362a:	0f 94 c0             	sete   al
c000362d:	48                   	dec    eax
c000362e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003633:	05 00 00 00 10       	add    eax,0x10000000
c0003638:	39 f8                	cmp    eax,edi
c000363a:	77 0e                	ja     c000364a <dir_next+0x3b>
c000363c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003643:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000364a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000364d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003650:	b8 04 00 00 00       	mov    eax,0x4
c0003655:	89 ce                	mov    esi,ecx
c0003657:	09 d6                	or     esi,edx
c0003659:	0f 84 da 00 00 00    	je     c0003739 <dir_next+0x12a>
c000365f:	89 f8                	mov    eax,edi
c0003661:	25 ff 01 00 00       	and    eax,0x1ff
c0003666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000366a:	0f 85 b9 00 00 00    	jne    c0003729 <dir_next+0x11a>
c0003670:	83 c2 01             	add    edx,0x1
c0003673:	83 d1 00             	adc    ecx,0x0
c0003676:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003679:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000367c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000367f:	85 d2                	test   edx,edx
c0003681:	75 29                	jne    c00036ac <dir_next+0x9d>
c0003683:	89 fa                	mov    edx,edi
c0003685:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003689:	c1 ea 05             	shr    edx,0x5
c000368c:	39 c2                	cmp    edx,eax
c000368e:	0f 82 95 00 00 00    	jb     c0003729 <dir_next+0x11a>
c0003694:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000369b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00036a2:	b8 04 00 00 00       	mov    eax,0x4
c00036a7:	e9 8d 00 00 00       	jmp    c0003739 <dir_next+0x12a>
c00036ac:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036b0:	89 f9                	mov    ecx,edi
c00036b2:	48                   	dec    eax
c00036b3:	c1 e9 09             	shr    ecx,0x9
c00036b6:	85 c8                	test   eax,ecx
c00036b8:	75 6f                	jne    c0003729 <dir_next+0x11a>
c00036ba:	89 d8                	mov    eax,ebx
c00036bc:	e8 00 f8 ff ff       	call   c0002ec1 <get_fat>
c00036c1:	89 c6                	mov    esi,eax
c00036c3:	83 f8 01             	cmp    eax,0x1
c00036c6:	77 07                	ja     c00036cf <dir_next+0xc0>
c00036c8:	b8 02 00 00 00       	mov    eax,0x2
c00036cd:	eb 6a                	jmp    c0003739 <dir_next+0x12a>
c00036cf:	83 f8 ff             	cmp    eax,0xffffffff
c00036d2:	75 07                	jne    c00036db <dir_next+0xcc>
c00036d4:	b8 01 00 00 00       	mov    eax,0x1
c00036d9:	eb 5e                	jmp    c0003739 <dir_next+0x12a>
c00036db:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036de:	77 37                	ja     c0003717 <dir_next+0x108>
c00036e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036e5:	74 ad                	je     c0003694 <dir_next+0x85>
c00036e7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	e8 be fa ff ff       	call   c00031af <create_chain>
c00036f1:	89 c6                	mov    esi,eax
c00036f3:	b8 07 00 00 00       	mov    eax,0x7
c00036f8:	85 f6                	test   esi,esi
c00036fa:	74 3d                	je     c0003739 <dir_next+0x12a>
c00036fc:	83 fe 01             	cmp    esi,0x1
c00036ff:	74 c7                	je     c00036c8 <dir_next+0xb9>
c0003701:	83 fe ff             	cmp    esi,0xffffffff
c0003704:	74 ce                	je     c00036d4 <dir_next+0xc5>
c0003706:	89 f2                	mov    edx,esi
c0003708:	89 e8                	mov    eax,ebp
c000370a:	e8 e7 fd ff ff       	call   c00034f6 <dir_clear>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 c1                	jne    c00036d4 <dir_next+0xc5>
c0003713:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003717:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000371a:	89 f2                	mov    edx,esi
c000371c:	89 e8                	mov    eax,ebp
c000371e:	e8 d1 e6 ff ff       	call   c0001df4 <clst2sect>
c0003723:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003726:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003729:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000372d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003730:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003734:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003737:	31 c0                	xor    eax,eax
c0003739:	83 c4 1c             	add    esp,0x1c
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <load_xdir>:
c0003741:	55                   	push   ebp
c0003742:	57                   	push   edi
c0003743:	56                   	push   esi
c0003744:	89 c6                	mov    esi,eax
c0003746:	53                   	push   ebx
c0003747:	83 ec 1c             	sub    esp,0x1c
c000374a:	8b 00                	mov    eax,DWORD PTR [eax]
c000374c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000374f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003752:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003755:	e8 df eb ff ff       	call   c0002339 <move_window>
c000375a:	89 c3                	mov    ebx,eax
c000375c:	85 c0                	test   eax,eax
c000375e:	0f 85 0c 01 00 00    	jne    c0003870 <load_xdir+0x12f>
c0003764:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003767:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000376a:	0f 85 fb 00 00 00    	jne    c000386b <load_xdir+0x12a>
c0003770:	89 f8                	mov    eax,edi
c0003772:	b9 20 00 00 00       	mov    ecx,0x20
c0003777:	e8 5e e4 ff ff       	call   c0001bda <mem_cpy>
c000377c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003780:	40                   	inc    eax
c0003781:	c1 e0 05             	shl    eax,0x5
c0003784:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003788:	83 e8 60             	sub    eax,0x60
c000378b:	3d 00 02 00 00       	cmp    eax,0x200
c0003790:	0f 87 d5 00 00 00    	ja     c000386b <load_xdir+0x12a>
c0003796:	31 d2                	xor    edx,edx
c0003798:	89 f0                	mov    eax,esi
c000379a:	e8 70 fe ff ff       	call   c000360f <dir_next>
c000379f:	89 c3                	mov    ebx,eax
c00037a1:	83 f8 04             	cmp    eax,0x4
c00037a4:	0f 84 c1 00 00 00    	je     c000386b <load_xdir+0x12a>
c00037aa:	85 c0                	test   eax,eax
c00037ac:	0f 85 be 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037b2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037b5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00037ba:	e8 7a eb ff ff       	call   c0002339 <move_window>
c00037bf:	89 c3                	mov    ebx,eax
c00037c1:	85 c0                	test   eax,eax
c00037c3:	0f 85 a7 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037c9:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037cc:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037cf:	0f 85 96 00 00 00    	jne    c000386b <load_xdir+0x12a>
c00037d5:	8d 47 20             	lea    eax,[edi+0x20]
c00037d8:	b9 20 00 00 00       	mov    ecx,0x20
c00037dd:	e8 f8 e3 ff ff       	call   c0001bda <mem_cpy>
c00037e2:	31 d2                	xor    edx,edx
c00037e4:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037e8:	b9 0f 00 00 00       	mov    ecx,0xf
c00037ed:	83 c0 2c             	add    eax,0x2c
c00037f0:	f7 f1                	div    ecx
c00037f2:	c1 e0 05             	shl    eax,0x5
c00037f5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037f9:	77 70                	ja     c000386b <load_xdir+0x12a>
c00037fb:	bd 40 00 00 00       	mov    ebp,0x40
c0003800:	31 d2                	xor    edx,edx
c0003802:	89 f0                	mov    eax,esi
c0003804:	e8 06 fe ff ff       	call   c000360f <dir_next>
c0003809:	89 c3                	mov    ebx,eax
c000380b:	83 f8 04             	cmp    eax,0x4
c000380e:	74 5b                	je     c000386b <load_xdir+0x12a>
c0003810:	85 c0                	test   eax,eax
c0003812:	75 5c                	jne    c0003870 <load_xdir+0x12f>
c0003814:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003817:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000381a:	8b 06                	mov    eax,DWORD PTR [esi]
c000381c:	e8 18 eb ff ff       	call   c0002339 <move_window>
c0003821:	89 c3                	mov    ebx,eax
c0003823:	85 c0                	test   eax,eax
c0003825:	75 49                	jne    c0003870 <load_xdir+0x12f>
c0003827:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000382a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000382d:	75 3c                	jne    c000386b <load_xdir+0x12a>
c000382f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003835:	77 0d                	ja     c0003844 <load_xdir+0x103>
c0003837:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000383a:	b9 20 00 00 00       	mov    ecx,0x20
c000383f:	e8 96 e3 ff ff       	call   c0001bda <mem_cpy>
c0003844:	83 c5 20             	add    ebp,0x20
c0003847:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000384b:	77 b3                	ja     c0003800 <load_xdir+0xbf>
c000384d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003853:	77 1b                	ja     c0003870 <load_xdir+0x12f>
c0003855:	89 f8                	mov    eax,edi
c0003857:	e8 cd e7 ff ff       	call   c0002029 <xdir_sum>
c000385c:	89 c1                	mov    ecx,eax
c000385e:	8d 47 02             	lea    eax,[edi+0x2]
c0003861:	e8 f5 e2 ff ff       	call   c0001b5b <ld_word>
c0003866:	66 39 c1             	cmp    cx,ax
c0003869:	74 05                	je     c0003870 <load_xdir+0x12f>
c000386b:	bb 02 00 00 00       	mov    ebx,0x2
c0003870:	83 c4 1c             	add    esp,0x1c
c0003873:	89 d8                	mov    eax,ebx
c0003875:	5b                   	pop    ebx
c0003876:	5e                   	pop    esi
c0003877:	5f                   	pop    edi
c0003878:	5d                   	pop    ebp
c0003879:	c3                   	ret    

c000387a <load_obj_xdir>:
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	83 ec 08             	sub    esp,0x8
c0003880:	8b 02                	mov    eax,DWORD PTR [edx]
c0003882:	89 03                	mov    DWORD PTR [ebx],eax
c0003884:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003887:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000388a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000388d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003890:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003893:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000389a:	30 c0                	xor    al,al
c000389c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038a3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00038a6:	89 d8                	mov    eax,ebx
c00038a8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038ab:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038ae:	e8 04 f8 ff ff       	call   c00030b7 <dir_sdi>
c00038b3:	85 c0                	test   eax,eax
c00038b5:	75 0b                	jne    c00038c2 <load_obj_xdir+0x48>
c00038b7:	89 d8                	mov    eax,ebx
c00038b9:	83 c4 08             	add    esp,0x8
c00038bc:	5b                   	pop    ebx
c00038bd:	e9 7f fe ff ff       	jmp    c0003741 <load_xdir>
c00038c2:	83 c4 08             	add    esp,0x8
c00038c5:	5b                   	pop    ebx
c00038c6:	c3                   	ret    

c00038c7 <dir_read>:
c00038c7:	55                   	push   ebp
c00038c8:	bd 04 00 00 00       	mov    ebp,0x4
c00038cd:	57                   	push   edi
c00038ce:	56                   	push   esi
c00038cf:	be ff ff ff ff       	mov    esi,0xffffffff
c00038d4:	53                   	push   ebx
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 ec 1c             	sub    esp,0x1c
c00038da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038de:	8b 38                	mov    edi,DWORD PTR [eax]
c00038e0:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038e5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038e8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038eb:	89 c8                	mov    eax,ecx
c00038ed:	09 d0                	or     eax,edx
c00038ef:	0f 84 25 01 00 00    	je     c0003a1a <dir_read+0x153>
c00038f5:	89 f8                	mov    eax,edi
c00038f7:	e8 3d ea ff ff       	call   c0002339 <move_window>
c00038fc:	89 c5                	mov    ebp,eax
c00038fe:	85 c0                	test   eax,eax
c0003900:	0f 85 23 01 00 00    	jne    c0003a29 <dir_read+0x162>
c0003906:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003909:	8a 0a                	mov    cl,BYTE PTR [edx]
c000390b:	84 c9                	test   cl,cl
c000390d:	0f 84 11 01 00 00    	je     c0003a24 <dir_read+0x15d>
c0003913:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003916:	75 48                	jne    c0003960 <dir_read+0x99>
c0003918:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000391d:	74 10                	je     c000392f <dir_read+0x68>
c000391f:	80 f9 83             	cmp    cl,0x83
c0003922:	0f 85 dd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003928:	31 ed                	xor    ebp,ebp
c000392a:	e9 08 01 00 00       	jmp    c0003a37 <dir_read+0x170>
c000392f:	80 f9 85             	cmp    cl,0x85
c0003932:	0f 85 cd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003938:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000393b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000393e:	89 d8                	mov    eax,ebx
c0003940:	e8 fc fd ff ff       	call   c0003741 <load_xdir>
c0003945:	89 c5                	mov    ebp,eax
c0003947:	85 c0                	test   eax,eax
c0003949:	0f 85 da 00 00 00    	jne    c0003a29 <dir_read+0x162>
c000394f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003952:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003955:	83 e0 3f             	and    eax,0x3f
c0003958:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000395b:	e9 d7 00 00 00       	jmp    c0003a37 <dir_read+0x170>
c0003960:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003963:	83 e0 3f             	and    eax,0x3f
c0003966:	80 f9 2e             	cmp    cl,0x2e
c0003969:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000396d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003970:	0f 84 8a 00 00 00    	je     c0003a00 <dir_read+0x139>
c0003976:	80 f9 e5             	cmp    cl,0xe5
c0003979:	0f 84 81 00 00 00    	je     c0003a00 <dir_read+0x139>
c000397f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003983:	83 e0 1f             	and    eax,0x1f
c0003986:	83 f8 08             	cmp    eax,0x8
c0003989:	0f 94 c0             	sete   al
c000398c:	0f b6 c0             	movzx  eax,al
c000398f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003993:	75 6b                	jne    c0003a00 <dir_read+0x139>
c0003995:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c000399a:	75 44                	jne    c00039e0 <dir_read+0x119>
c000399c:	f6 c1 40             	test   cl,0x40
c000399f:	74 12                	je     c00039b3 <dir_read+0xec>
c00039a1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039a4:	83 e1 bf             	and    ecx,0xffffffbf
c00039a7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039ab:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039ae:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039b1:	eb 06                	jmp    c00039b9 <dir_read+0xf2>
c00039b3:	89 f0                	mov    eax,esi
c00039b5:	38 c8                	cmp    al,cl
c00039b7:	75 47                	jne    c0003a00 <dir_read+0x139>
c00039b9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039bd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039c2:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039c5:	75 3e                	jne    c0003a05 <dir_read+0x13e>
c00039c7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039cb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039ce:	e8 8a e4 ff ff       	call   c0001e5d <pick_lfn>
c00039d3:	85 c0                	test   eax,eax
c00039d5:	74 2e                	je     c0003a05 <dir_read+0x13e>
c00039d7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039db:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039de:	eb 25                	jmp    c0003a05 <dir_read+0x13e>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	84 c0                	test   al,al
c00039e4:	75 11                	jne    c00039f7 <dir_read+0x130>
c00039e6:	89 d0                	mov    eax,edx
c00039e8:	e8 2a e6 ff ff       	call   c0002017 <sum_sfn>
c00039ed:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00039f1:	0f 84 31 ff ff ff    	je     c0003928 <dir_read+0x61>
c00039f7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00039fe:	eb 37                	jmp    c0003a37 <dir_read+0x170>
c0003a00:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a05:	31 d2                	xor    edx,edx
c0003a07:	89 d8                	mov    eax,ebx
c0003a09:	e8 01 fc ff ff       	call   c000360f <dir_next>
c0003a0e:	89 c5                	mov    ebp,eax
c0003a10:	85 c0                	test   eax,eax
c0003a12:	0f 84 cd fe ff ff    	je     c00038e5 <dir_read+0x1e>
c0003a18:	eb 0f                	jmp    c0003a29 <dir_read+0x162>
c0003a1a:	85 ed                	test   ebp,ebp
c0003a1c:	0f 84 06 ff ff ff    	je     c0003928 <dir_read+0x61>
c0003a22:	eb 05                	jmp    c0003a29 <dir_read+0x162>
c0003a24:	bd 04 00 00 00       	mov    ebp,0x4
c0003a29:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a30:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a37:	83 c4 1c             	add    esp,0x1c
c0003a3a:	89 e8                	mov    eax,ebp
c0003a3c:	5b                   	pop    ebx
c0003a3d:	5e                   	pop    esi
c0003a3e:	5f                   	pop    edi
c0003a3f:	5d                   	pop    ebp
c0003a40:	c3                   	ret    

c0003a41 <dir_alloc>:
c0003a41:	55                   	push   ebp
c0003a42:	89 d5                	mov    ebp,edx
c0003a44:	57                   	push   edi
c0003a45:	31 d2                	xor    edx,edx
c0003a47:	56                   	push   esi
c0003a48:	53                   	push   ebx
c0003a49:	89 c3                	mov    ebx,eax
c0003a4b:	83 ec 0c             	sub    esp,0xc
c0003a4e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a50:	e8 62 f6 ff ff       	call   c00030b7 <dir_sdi>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	75 4e                	jne    c0003aa7 <dir_alloc+0x66>
c0003a59:	31 f6                	xor    esi,esi
c0003a5b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a5e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a61:	89 f8                	mov    eax,edi
c0003a63:	e8 d1 e8 ff ff       	call   c0002339 <move_window>
c0003a68:	85 c0                	test   eax,eax
c0003a6a:	75 3b                	jne    c0003aa7 <dir_alloc+0x66>
c0003a6c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a6f:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a72:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a74:	75 07                	jne    c0003a7d <dir_alloc+0x3c>
c0003a76:	f7 d2                	not    edx
c0003a78:	c0 ea 07             	shr    dl,0x7
c0003a7b:	eb 0d                	jmp    c0003a8a <dir_alloc+0x49>
c0003a7d:	84 d2                	test   dl,dl
c0003a7f:	0f 94 c1             	sete   cl
c0003a82:	80 fa e5             	cmp    dl,0xe5
c0003a85:	0f 94 c2             	sete   dl
c0003a88:	09 ca                	or     edx,ecx
c0003a8a:	84 d2                	test   dl,dl
c0003a8c:	74 07                	je     c0003a95 <dir_alloc+0x54>
c0003a8e:	46                   	inc    esi
c0003a8f:	39 ee                	cmp    esi,ebp
c0003a91:	75 04                	jne    c0003a97 <dir_alloc+0x56>
c0003a93:	eb 1c                	jmp    c0003ab1 <dir_alloc+0x70>
c0003a95:	31 f6                	xor    esi,esi
c0003a97:	ba 01 00 00 00       	mov    edx,0x1
c0003a9c:	89 d8                	mov    eax,ebx
c0003a9e:	e8 6c fb ff ff       	call   c000360f <dir_next>
c0003aa3:	85 c0                	test   eax,eax
c0003aa5:	74 b4                	je     c0003a5b <dir_alloc+0x1a>
c0003aa7:	83 f8 04             	cmp    eax,0x4
c0003aaa:	75 05                	jne    c0003ab1 <dir_alloc+0x70>
c0003aac:	b8 07 00 00 00       	mov    eax,0x7
c0003ab1:	83 c4 0c             	add    esp,0xc
c0003ab4:	5b                   	pop    ebx
c0003ab5:	5e                   	pop    esi
c0003ab6:	5f                   	pop    edi
c0003ab7:	5d                   	pop    ebp
c0003ab8:	c3                   	ret    

c0003ab9 <store_xdir>:
c0003ab9:	55                   	push   ebp
c0003aba:	57                   	push   edi
c0003abb:	89 c7                	mov    edi,eax
c0003abd:	56                   	push   esi
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 0c             	sub    esp,0xc
c0003ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ac4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003ac7:	89 e8                	mov    eax,ebp
c0003ac9:	e8 5b e5 ff ff       	call   c0002029 <xdir_sum>
c0003ace:	0f b7 d0             	movzx  edx,ax
c0003ad1:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ad4:	e8 f4 e0 ff ff       	call   c0001bcd <st_word>
c0003ad9:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003add:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003ae0:	89 f8                	mov    eax,edi
c0003ae2:	e8 d0 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003ae7:	89 c6                	mov    esi,eax
c0003ae9:	85 f6                	test   esi,esi
c0003aeb:	75 3d                	jne    c0003b2a <store_xdir+0x71>
c0003aed:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003af0:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003af3:	8b 07                	mov    eax,DWORD PTR [edi]
c0003af5:	e8 3f e8 ff ff       	call   c0002339 <move_window>
c0003afa:	89 c6                	mov    esi,eax
c0003afc:	85 c0                	test   eax,eax
c0003afe:	75 2a                	jne    c0003b2a <store_xdir+0x71>
c0003b00:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003b03:	b9 20 00 00 00       	mov    ecx,0x20
c0003b08:	89 ea                	mov    edx,ebp
c0003b0a:	e8 cb e0 ff ff       	call   c0001bda <mem_cpy>
c0003b0f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b11:	85 db                	test   ebx,ebx
c0003b13:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b17:	74 11                	je     c0003b2a <store_xdir+0x71>
c0003b19:	31 d2                	xor    edx,edx
c0003b1b:	89 f8                	mov    eax,edi
c0003b1d:	83 c5 20             	add    ebp,0x20
c0003b20:	e8 ea fa ff ff       	call   c000360f <dir_next>
c0003b25:	4b                   	dec    ebx
c0003b26:	89 c6                	mov    esi,eax
c0003b28:	eb bf                	jmp    c0003ae9 <store_xdir+0x30>
c0003b2a:	89 f0                	mov    eax,esi
c0003b2c:	83 fe 02             	cmp    esi,0x2
c0003b2f:	76 05                	jbe    c0003b36 <store_xdir+0x7d>
c0003b31:	b8 02 00 00 00       	mov    eax,0x2
c0003b36:	83 c4 0c             	add    esp,0xc
c0003b39:	5b                   	pop    ebx
c0003b3a:	5e                   	pop    esi
c0003b3b:	5f                   	pop    edi
c0003b3c:	5d                   	pop    ebp
c0003b3d:	c3                   	ret    

c0003b3e <dir_remove>:
c0003b3e:	57                   	push   edi
c0003b3f:	56                   	push   esi
c0003b40:	53                   	push   ebx
c0003b41:	89 c3                	mov    ebx,eax
c0003b43:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b46:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b48:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b4b:	83 fa ff             	cmp    edx,0xffffffff
c0003b4e:	74 09                	je     c0003b59 <dir_remove+0x1b>
c0003b50:	e8 62 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003b55:	85 c0                	test   eax,eax
c0003b57:	75 41                	jne    c0003b9a <dir_remove+0x5c>
c0003b59:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b5c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b5f:	89 f0                	mov    eax,esi
c0003b61:	e8 d3 e7 ff ff       	call   c0002339 <move_window>
c0003b66:	85 c0                	test   eax,eax
c0003b68:	75 26                	jne    c0003b90 <dir_remove+0x52>
c0003b6a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b6d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b70:	75 05                	jne    c0003b77 <dir_remove+0x39>
c0003b72:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b75:	eb 03                	jmp    c0003b7a <dir_remove+0x3c>
c0003b77:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b7a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b7e:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b81:	73 17                	jae    c0003b9a <dir_remove+0x5c>
c0003b83:	31 d2                	xor    edx,edx
c0003b85:	89 d8                	mov    eax,ebx
c0003b87:	e8 83 fa ff ff       	call   c000360f <dir_next>
c0003b8c:	85 c0                	test   eax,eax
c0003b8e:	74 c9                	je     c0003b59 <dir_remove+0x1b>
c0003b90:	83 f8 04             	cmp    eax,0x4
c0003b93:	75 05                	jne    c0003b9a <dir_remove+0x5c>
c0003b95:	b8 02 00 00 00       	mov    eax,0x2
c0003b9a:	5b                   	pop    ebx
c0003b9b:	5e                   	pop    esi
c0003b9c:	5f                   	pop    edi
c0003b9d:	c3                   	ret    

c0003b9e <create_name>:
c0003b9e:	55                   	push   ebp
c0003b9f:	89 d5                	mov    ebp,edx
c0003ba1:	57                   	push   edi
c0003ba2:	89 c7                	mov    edi,eax
c0003ba4:	56                   	push   esi
c0003ba5:	31 f6                	xor    esi,esi
c0003ba7:	53                   	push   ebx
c0003ba8:	83 ec 3c             	sub    esp,0x3c
c0003bab:	8b 02                	mov    eax,DWORD PTR [edx]
c0003bad:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003bb1:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bbe:	e8 72 e0 ff ff       	call   c0001c35 <tchar2uni>
c0003bc3:	89 c3                	mov    ebx,eax
c0003bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0003bc8:	75 0a                	jne    c0003bd4 <create_name+0x36>
c0003bca:	b8 06 00 00 00       	mov    eax,0x6
c0003bcf:	e9 9e 02 00 00       	jmp    c0003e72 <create_name+0x2d4>
c0003bd4:	3d ff ff 00 00       	cmp    eax,0xffff
c0003bd9:	76 0c                	jbe    c0003be7 <create_name+0x49>
c0003bdb:	c1 e8 10             	shr    eax,0x10
c0003bde:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003be2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003be6:	46                   	inc    esi
c0003be7:	66 83 fb 1f          	cmp    bx,0x1f
c0003beb:	76 4f                	jbe    c0003c3c <create_name+0x9e>
c0003bed:	66 83 fb 5c          	cmp    bx,0x5c
c0003bf1:	74 35                	je     c0003c28 <create_name+0x8a>
c0003bf3:	66 83 fb 2f          	cmp    bx,0x2f
c0003bf7:	74 2f                	je     c0003c28 <create_name+0x8a>
c0003bf9:	66 83 fb 7f          	cmp    bx,0x7f
c0003bfd:	77 11                	ja     c0003c10 <create_name+0x72>
c0003bff:	0f b7 d3             	movzx  edx,bx
c0003c02:	b8 b2 20 02 c0       	mov    eax,0xc00220b2
c0003c07:	e8 11 e0 ff ff       	call   c0001c1d <chk_chr>
c0003c0c:	85 c0                	test   eax,eax
c0003c0e:	75 ba                	jne    c0003bca <create_name+0x2c>
c0003c10:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c16:	77 b2                	ja     c0003bca <create_name+0x2c>
c0003c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c1c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c20:	46                   	inc    esi
c0003c21:	eb 97                	jmp    c0003bba <create_name+0x1c>
c0003c23:	40                   	inc    eax
c0003c24:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c2c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c2e:	80 fa 2f             	cmp    dl,0x2f
c0003c31:	74 f0                	je     c0003c23 <create_name+0x85>
c0003c33:	80 fa 5c             	cmp    dl,0x5c
c0003c36:	74 eb                	je     c0003c23 <create_name+0x85>
c0003c38:	31 db                	xor    ebx,ebx
c0003c3a:	eb 02                	jmp    c0003c3e <create_name+0xa0>
c0003c3c:	b3 04                	mov    bl,0x4
c0003c3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c42:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c45:	85 f6                	test   esi,esi
c0003c47:	74 18                	je     c0003c61 <create_name+0xc3>
c0003c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c4d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c52:	66 83 f8 20          	cmp    ax,0x20
c0003c56:	74 06                	je     c0003c5e <create_name+0xc0>
c0003c58:	66 83 f8 2e          	cmp    ax,0x2e
c0003c5c:	75 03                	jne    c0003c61 <create_name+0xc3>
c0003c5e:	4e                   	dec    esi
c0003c5f:	eb e4                	jmp    c0003c45 <create_name+0xa7>
c0003c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c65:	31 ed                	xor    ebp,ebp
c0003c67:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c6d:	85 f6                	test   esi,esi
c0003c6f:	0f 84 55 ff ff ff    	je     c0003bca <create_name+0x2c>
c0003c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c79:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c7c:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c80:	66 83 f8 20          	cmp    ax,0x20
c0003c84:	75 04                	jne    c0003c8a <create_name+0xec>
c0003c86:	89 d5                	mov    ebp,edx
c0003c88:	eb eb                	jmp    c0003c75 <create_name+0xd7>
c0003c8a:	85 ed                	test   ebp,ebp
c0003c8c:	75 06                	jne    c0003c94 <create_name+0xf6>
c0003c8e:	66 83 f8 2e          	cmp    ax,0x2e
c0003c92:	75 08                	jne    c0003c9c <create_name+0xfe>
c0003c94:	83 cb 03             	or     ebx,0x3
c0003c97:	eb 03                	jmp    c0003c9c <create_name+0xfe>
c0003c99:	4e                   	dec    esi
c0003c9a:	74 0c                	je     c0003ca8 <create_name+0x10a>
c0003c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ca0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ca6:	75 f1                	jne    c0003c99 <create_name+0xfb>
c0003ca8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cad:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003cb0:	ba 20 00 00 00       	mov    edx,0x20
c0003cb5:	e8 35 df ff ff       	call   c0001bef <mem_set>
c0003cba:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cc2:	31 c9                	xor    ecx,ecx
c0003cc4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cc9:	8d 45 01             	lea    eax,[ebp+0x1]
c0003ccc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003cd4:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003cd8:	66 85 ed             	test   bp,bp
c0003cdb:	0f 84 30 01 00 00    	je     c0003e11 <create_name+0x273>
c0003ce1:	66 83 fd 20          	cmp    bp,0x20
c0003ce5:	74 10                	je     c0003cf7 <create_name+0x159>
c0003ce7:	66 83 fd 2e          	cmp    bp,0x2e
c0003ceb:	75 13                	jne    c0003d00 <create_name+0x162>
c0003ced:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003cf1:	0f 84 6b 01 00 00    	je     c0003e62 <create_name+0x2c4>
c0003cf7:	83 cb 03             	or     ebx,0x3
c0003cfa:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003cfe:	eb c9                	jmp    c0003cc9 <create_name+0x12b>
c0003d00:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003d04:	73 0b                	jae    c0003d11 <create_name+0x173>
c0003d06:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d0a:	75 47                	jne    c0003d53 <create_name+0x1b5>
c0003d0c:	e9 51 01 00 00       	jmp    c0003e62 <create_name+0x2c4>
c0003d11:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d16:	75 10                	jne    c0003d28 <create_name+0x18a>
c0003d18:	83 cb 03             	or     ebx,0x3
c0003d1b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d23:	e9 e9 00 00 00       	jmp    c0003e11 <create_name+0x273>
c0003d28:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d2c:	74 0d                	je     c0003d3b <create_name+0x19d>
c0003d2e:	83 cb 03             	or     ebx,0x3
c0003d31:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d35:	0f 87 d6 00 00 00    	ja     c0003e11 <create_name+0x273>
c0003d3b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d40:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d44:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d4c:	b9 08 00 00 00       	mov    ecx,0x8
c0003d51:	eb a7                	jmp    c0003cfa <create_name+0x15c>
c0003d53:	66 83 fd 7f          	cmp    bp,0x7f
c0003d57:	76 68                	jbe    c0003dc1 <create_name+0x223>
c0003d59:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d5d:	88 da                	mov    dl,bl
c0003d5f:	83 ca 02             	or     edx,0x2
c0003d62:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d66:	50                   	push   eax
c0003d67:	50                   	push   eax
c0003d68:	68 b5 01 00 00       	push   0x1b5
c0003d6d:	55                   	push   ebp
c0003d6e:	e8 81 48 00 00       	call   c00085f4 <ff_uni2oem>
c0003d73:	83 c4 10             	add    esp,0x10
c0003d76:	89 c5                	mov    ebp,eax
c0003d78:	a8 80                	test   al,0x80
c0003d7a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d7e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d82:	74 0c                	je     c0003d90 <create_name+0x1f2>
c0003d84:	83 e5 7f             	and    ebp,0x7f
c0003d87:	0f b6 ad 00 20 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffde000]
c0003d8e:	eb 2a                	jmp    c0003dba <create_name+0x21c>
c0003d90:	66 3d ff 00          	cmp    ax,0xff
c0003d94:	76 24                	jbe    c0003dba <create_name+0x21c>
c0003d96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d9a:	48                   	dec    eax
c0003d9b:	39 c8                	cmp    eax,ecx
c0003d9d:	77 0c                	ja     c0003dab <create_name+0x20d>
c0003d9f:	83 cb 03             	or     ebx,0x3
c0003da2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003da6:	e9 4f ff ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003dab:	89 e8                	mov    eax,ebp
c0003dad:	88 d3                	mov    bl,dl
c0003daf:	66 c1 e8 08          	shr    ax,0x8
c0003db3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003db7:	41                   	inc    ecx
c0003db8:	eb 4b                	jmp    c0003e05 <create_name+0x267>
c0003dba:	88 d3                	mov    bl,dl
c0003dbc:	66 85 ed             	test   bp,bp
c0003dbf:	74 19                	je     c0003dda <create_name+0x23c>
c0003dc1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dc5:	0f b7 d5             	movzx  edx,bp
c0003dc8:	b8 bb 20 02 c0       	mov    eax,0xc00220bb
c0003dcd:	e8 4b de ff ff       	call   c0001c1d <chk_chr>
c0003dd2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 0a                	je     c0003de4 <create_name+0x246>
c0003dda:	83 cb 03             	or     ebx,0x3
c0003ddd:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003de2:	eb 21                	jmp    c0003e05 <create_name+0x267>
c0003de4:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003de7:	66 83 f8 19          	cmp    ax,0x19
c0003deb:	77 07                	ja     c0003df4 <create_name+0x256>
c0003ded:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003df2:	eb 11                	jmp    c0003e05 <create_name+0x267>
c0003df4:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003df7:	66 83 f8 19          	cmp    ax,0x19
c0003dfb:	77 08                	ja     c0003e05 <create_name+0x267>
c0003dfd:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003e02:	83 ed 20             	sub    ebp,0x20
c0003e05:	89 e8                	mov    eax,ebp
c0003e07:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e0b:	41                   	inc    ecx
c0003e0c:	e9 e9 fe ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003e11:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e15:	75 04                	jne    c0003e1b <create_name+0x27d>
c0003e17:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e1b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e20:	75 05                	jne    c0003e27 <create_name+0x289>
c0003e22:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e27:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e2b:	83 e0 0c             	and    eax,0xc
c0003e2e:	3c 0c                	cmp    al,0xc
c0003e30:	74 0b                	je     c0003e3d <create_name+0x29f>
c0003e32:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e36:	83 e0 03             	and    eax,0x3
c0003e39:	3c 03                	cmp    al,0x3
c0003e3b:	75 05                	jne    c0003e42 <create_name+0x2a4>
c0003e3d:	83 cb 02             	or     ebx,0x2
c0003e40:	eb 19                	jmp    c0003e5b <create_name+0x2bd>
c0003e42:	f6 c3 02             	test   bl,0x2
c0003e45:	75 14                	jne    c0003e5b <create_name+0x2bd>
c0003e47:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e4c:	74 03                	je     c0003e51 <create_name+0x2b3>
c0003e4e:	83 cb 10             	or     ebx,0x10
c0003e51:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e56:	74 03                	je     c0003e5b <create_name+0x2bd>
c0003e58:	83 cb 08             	or     ebx,0x8
c0003e5b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e5e:	31 c0                	xor    eax,eax
c0003e60:	eb 10                	jmp    c0003e72 <create_name+0x2d4>
c0003e62:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e67:	0f 85 ce fe ff ff    	jne    c0003d3b <create_name+0x19d>
c0003e6d:	e9 a6 fe ff ff       	jmp    c0003d18 <create_name+0x17a>
c0003e72:	83 c4 3c             	add    esp,0x3c
c0003e75:	5b                   	pop    ebx
c0003e76:	5e                   	pop    esi
c0003e77:	5f                   	pop    edi
c0003e78:	5d                   	pop    ebp
c0003e79:	c3                   	ret    

c0003e7a <xname_sum>:
c0003e7a:	56                   	push   esi
c0003e7b:	53                   	push   ebx
c0003e7c:	89 c6                	mov    esi,eax
c0003e7e:	51                   	push   ecx
c0003e7f:	31 db                	xor    ebx,ebx
c0003e81:	83 c6 02             	add    esi,0x2
c0003e84:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e88:	66 85 c0             	test   ax,ax
c0003e8b:	74 1f                	je     c0003eac <xname_sum+0x32>
c0003e8d:	83 ec 0c             	sub    esp,0xc
c0003e90:	66 d1 cb             	ror    bx,1
c0003e93:	50                   	push   eax
c0003e94:	e8 67 48 00 00       	call   c0008700 <ff_wtoupper>
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	0f b6 d0             	movzx  edx,al
c0003e9f:	66 c1 e8 08          	shr    ax,0x8
c0003ea3:	01 d3                	add    ebx,edx
c0003ea5:	66 d1 cb             	ror    bx,1
c0003ea8:	01 c3                	add    ebx,eax
c0003eaa:	eb d5                	jmp    c0003e81 <xname_sum+0x7>
c0003eac:	89 d8                	mov    eax,ebx
c0003eae:	5a                   	pop    edx
c0003eaf:	5b                   	pop    ebx
c0003eb0:	5e                   	pop    esi
c0003eb1:	c3                   	ret    

c0003eb2 <create_xdir>:
c0003eb2:	55                   	push   ebp
c0003eb3:	b9 40 00 00 00       	mov    ecx,0x40
c0003eb8:	57                   	push   edi
c0003eb9:	bd 01 00 00 00       	mov    ebp,0x1
c0003ebe:	56                   	push   esi
c0003ebf:	31 ff                	xor    edi,edi
c0003ec1:	53                   	push   ebx
c0003ec2:	be 40 00 00 00       	mov    esi,0x40
c0003ec7:	89 c3                	mov    ebx,eax
c0003ec9:	83 ec 1c             	sub    esp,0x1c
c0003ecc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ed0:	31 d2                	xor    edx,edx
c0003ed2:	e8 18 dd ff ff       	call   c0001bef <mem_set>
c0003ed7:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003eda:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ede:	31 c9                	xor    ecx,ecx
c0003ee0:	8d 46 01             	lea    eax,[esi+0x1]
c0003ee3:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ee7:	83 c6 02             	add    esi,0x2
c0003eea:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003eee:	66 85 ed             	test   bp,bp
c0003ef1:	74 12                	je     c0003f05 <create_xdir+0x53>
c0003ef3:	0f b6 c1             	movzx  eax,cl
c0003ef6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003efa:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003efe:	66 83 fd 01          	cmp    bp,0x1
c0003f02:	80 d9 ff             	sbb    cl,0xff
c0003f05:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f08:	0f b7 d5             	movzx  edx,bp
c0003f0b:	83 c6 02             	add    esi,0x2
c0003f0e:	e8 ba dc ff ff       	call   c0001bcd <st_word>
c0003f13:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f19:	75 d3                	jne    c0003eee <create_xdir+0x3c>
c0003f1b:	8d 47 01             	lea    eax,[edi+0x1]
c0003f1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f22:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f26:	0f b6 c1             	movzx  eax,cl
c0003f29:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f2e:	74 07                	je     c0003f37 <create_xdir+0x85>
c0003f30:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f35:	eb a9                	jmp    c0003ee0 <create_xdir+0x2e>
c0003f37:	8d 47 02             	lea    eax,[edi+0x2]
c0003f3a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f3d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f40:	89 d0                	mov    eax,edx
c0003f42:	e8 33 ff ff ff       	call   c0003e7a <xname_sum>
c0003f47:	83 c4 1c             	add    esp,0x1c
c0003f4a:	0f b7 d0             	movzx  edx,ax
c0003f4d:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f50:	5b                   	pop    ebx
c0003f51:	5e                   	pop    esi
c0003f52:	5f                   	pop    edi
c0003f53:	5d                   	pop    ebp
c0003f54:	e9 74 dc ff ff       	jmp    c0001bcd <st_word>

c0003f59 <cmp_lfn>:
c0003f59:	55                   	push   ebp
c0003f5a:	57                   	push   edi
c0003f5b:	89 d7                	mov    edi,edx
c0003f5d:	56                   	push   esi
c0003f5e:	53                   	push   ebx
c0003f5f:	83 ec 1c             	sub    esp,0x1c
c0003f62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f66:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f69:	e8 ed db ff ff       	call   c0001b5b <ld_word>
c0003f6e:	66 85 c0             	test   ax,ax
c0003f71:	74 07                	je     c0003f7a <cmp_lfn+0x21>
c0003f73:	31 c0                	xor    eax,eax
c0003f75:	e9 9a 00 00 00       	jmp    c0004014 <cmp_lfn+0xbb>
c0003f7a:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f7c:	bd 01 00 00 00       	mov    ebp,0x1
c0003f81:	83 e3 3f             	and    ebx,0x3f
c0003f84:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f8c:	4b                   	dec    ebx
c0003f8d:	6b db 0d             	imul   ebx,ebx,0xd
c0003f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f94:	0f b6 80 80 20 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffddf80]
c0003f9b:	01 f8                	add    eax,edi
c0003f9d:	e8 b9 db ff ff       	call   c0001b5b <ld_word>
c0003fa2:	66 85 ed             	test   bp,bp
c0003fa5:	89 c6                	mov    esi,eax
c0003fa7:	74 3c                	je     c0003fe5 <cmp_lfn+0x8c>
c0003fa9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003faf:	77 c2                	ja     c0003f73 <cmp_lfn+0x1a>
c0003fb1:	83 ec 0c             	sub    esp,0xc
c0003fb4:	0f b7 c0             	movzx  eax,ax
c0003fb7:	50                   	push   eax
c0003fb8:	e8 43 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fbd:	89 c5                	mov    ebp,eax
c0003fbf:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fca:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fce:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fd1:	e8 2a 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fd6:	83 c4 10             	add    esp,0x10
c0003fd9:	39 c5                	cmp    ebp,eax
c0003fdb:	75 96                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fdd:	89 f5                	mov    ebp,esi
c0003fdf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003fe3:	eb 04                	jmp    c0003fe9 <cmp_lfn+0x90>
c0003fe5:	66 46                	inc    si
c0003fe7:	75 8a                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fe9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003fed:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ff2:	75 9c                	jne    c0003f90 <cmp_lfn+0x37>
c0003ff4:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ff7:	74 16                	je     c000400f <cmp_lfn+0xb6>
c0003ff9:	66 85 ed             	test   bp,bp
c0003ffc:	74 11                	je     c000400f <cmp_lfn+0xb6>
c0003ffe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004002:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004007:	0f 94 c0             	sete   al
c000400a:	0f b6 c0             	movzx  eax,al
c000400d:	eb 05                	jmp    c0004014 <cmp_lfn+0xbb>
c000400f:	b8 01 00 00 00       	mov    eax,0x1
c0004014:	83 c4 1c             	add    esp,0x1c
c0004017:	5b                   	pop    ebx
c0004018:	5e                   	pop    esi
c0004019:	5f                   	pop    edi
c000401a:	5d                   	pop    ebp
c000401b:	c3                   	ret    

c000401c <dir_find>:
c000401c:	55                   	push   ebp
c000401d:	31 d2                	xor    edx,edx
c000401f:	57                   	push   edi
c0004020:	56                   	push   esi
c0004021:	53                   	push   ebx
c0004022:	89 c3                	mov    ebx,eax
c0004024:	83 ec 1c             	sub    esp,0x1c
c0004027:	8b 30                	mov    esi,DWORD PTR [eax]
c0004029:	e8 89 f0 ff ff       	call   c00030b7 <dir_sdi>
c000402e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004031:	85 c0                	test   eax,eax
c0004033:	0f 85 9e 01 00 00    	jne    c00041d7 <dir_find+0x1bb>
c0004039:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000403c:	0f 85 8d 00 00 00    	jne    c00040cf <dir_find+0xb3>
c0004042:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004045:	e8 30 fe ff ff       	call   c0003e7a <xname_sum>
c000404a:	89 c7                	mov    edi,eax
c000404c:	31 d2                	xor    edx,edx
c000404e:	89 d8                	mov    eax,ebx
c0004050:	e8 72 f8 ff ff       	call   c00038c7 <dir_read>
c0004055:	85 c0                	test   eax,eax
c0004057:	0f 85 5e 01 00 00    	jne    c00041bb <dir_find+0x19f>
c000405d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004060:	8d 41 24             	lea    eax,[ecx+0x24]
c0004063:	e8 f3 da ff ff       	call   c0001b5b <ld_word>
c0004068:	66 39 f8             	cmp    ax,di
c000406b:	75 df                	jne    c000404c <dir_find+0x30>
c000406d:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004070:	31 ed                	xor    ebp,ebp
c0004072:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004076:	ba 40 00 00 00       	mov    edx,0x40
c000407b:	89 e9                	mov    ecx,ebp
c000407d:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004081:	0f 84 42 01 00 00    	je     c00041c9 <dir_find+0x1ad>
c0004087:	f6 c2 1f             	test   dl,0x1f
c000408a:	75 03                	jne    c000408f <dir_find+0x73>
c000408c:	83 c2 02             	add    edx,0x2
c000408f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004093:	89 d0                	mov    eax,edx
c0004095:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004098:	e8 be da ff ff       	call   c0001b5b <ld_word>
c000409d:	83 ec 0c             	sub    esp,0xc
c00040a0:	0f b7 c0             	movzx  eax,ax
c00040a3:	50                   	push   eax
c00040a4:	e8 57 46 00 00       	call   c0008700 <ff_wtoupper>
c00040a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040ad:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040b0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040b7:	e8 44 46 00 00       	call   c0008700 <ff_wtoupper>
c00040bc:	83 c4 10             	add    esp,0x10
c00040bf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040c3:	75 87                	jne    c000404c <dir_find+0x30>
c00040c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040c9:	45                   	inc    ebp
c00040ca:	83 c2 02             	add    edx,0x2
c00040cd:	eb ac                	jmp    c000407b <dir_find+0x5f>
c00040cf:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040d6:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040db:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040e0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040e3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040e6:	89 f0                	mov    eax,esi
c00040e8:	e8 4c e2 ff ff       	call   c0002339 <move_window>
c00040ed:	85 c0                	test   eax,eax
c00040ef:	0f 85 c6 00 00 00    	jne    c00041bb <dir_find+0x19f>
c00040f5:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00040f8:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00040fb:	84 c9                	test   cl,cl
c00040fd:	0f 84 bd 00 00 00    	je     c00041c0 <dir_find+0x1a4>
c0004103:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004106:	88 d0                	mov    al,dl
c0004108:	83 e0 3f             	and    eax,0x3f
c000410b:	80 f9 e5             	cmp    cl,0xe5
c000410e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004111:	0f 84 87 00 00 00    	je     c000419e <dir_find+0x182>
c0004117:	80 e2 08             	and    dl,0x8
c000411a:	74 06                	je     c0004122 <dir_find+0x106>
c000411c:	3c 0f                	cmp    al,0xf
c000411e:	75 7e                	jne    c000419e <dir_find+0x182>
c0004120:	eb 04                	jmp    c0004126 <dir_find+0x10a>
c0004122:	3c 0f                	cmp    al,0xf
c0004124:	75 4c                	jne    c0004172 <dir_find+0x156>
c0004126:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000412a:	75 7e                	jne    c00041aa <dir_find+0x18e>
c000412c:	f6 c1 40             	test   cl,0x40
c000412f:	74 12                	je     c0004143 <dir_find+0x127>
c0004131:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004134:	83 e1 bf             	and    ecx,0xffffffbf
c0004137:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000413b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000413e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004141:	eb 06                	jmp    c0004149 <dir_find+0x12d>
c0004143:	89 f8                	mov    eax,edi
c0004145:	38 c8                	cmp    al,cl
c0004147:	75 5c                	jne    c00041a5 <dir_find+0x189>
c0004149:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000414d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004152:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004155:	75 53                	jne    c00041aa <dir_find+0x18e>
c0004157:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000415b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000415e:	89 ea                	mov    edx,ebp
c0004160:	e8 f4 fd ff ff       	call   c0003f59 <cmp_lfn>
c0004165:	85 c0                	test   eax,eax
c0004167:	74 41                	je     c00041aa <dir_find+0x18e>
c0004169:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000416d:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004170:	eb 38                	jmp    c00041aa <dir_find+0x18e>
c0004172:	89 f8                	mov    eax,edi
c0004174:	84 c0                	test   al,al
c0004176:	75 0d                	jne    c0004185 <dir_find+0x169>
c0004178:	89 e8                	mov    eax,ebp
c000417a:	e8 98 de ff ff       	call   c0002017 <sum_sfn>
c000417f:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004183:	74 52                	je     c00041d7 <dir_find+0x1bb>
c0004185:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004189:	75 13                	jne    c000419e <dir_find+0x182>
c000418b:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000418e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004193:	89 e8                	mov    eax,ebp
c0004195:	e8 60 da ff ff       	call   c0001bfa <mem_cmp>
c000419a:	85 c0                	test   eax,eax
c000419c:	74 39                	je     c00041d7 <dir_find+0x1bb>
c000419e:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041aa:	31 d2                	xor    edx,edx
c00041ac:	89 d8                	mov    eax,ebx
c00041ae:	e8 5c f4 ff ff       	call   c000360f <dir_next>
c00041b3:	85 c0                	test   eax,eax
c00041b5:	0f 84 25 ff ff ff    	je     c00040e0 <dir_find+0xc4>
c00041bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00041be:	eb 17                	jmp    c00041d7 <dir_find+0x1bb>
c00041c0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041c7:	eb 0e                	jmp    c00041d7 <dir_find+0x1bb>
c00041c9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041cc:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041d1:	0f 85 75 fe ff ff    	jne    c000404c <dir_find+0x30>
c00041d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041da:	83 c4 1c             	add    esp,0x1c
c00041dd:	5b                   	pop    ebx
c00041de:	5e                   	pop    esi
c00041df:	5f                   	pop    edi
c00041e0:	5d                   	pop    ebp
c00041e1:	c3                   	ret    

c00041e2 <dir_register>:
c00041e2:	55                   	push   ebp
c00041e3:	57                   	push   edi
c00041e4:	56                   	push   esi
c00041e5:	be 06 00 00 00       	mov    esi,0x6
c00041ea:	53                   	push   ebx
c00041eb:	83 ec 6c             	sub    esp,0x6c
c00041ee:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00041f2:	0f 85 62 02 00 00    	jne    c000445a <dir_register+0x278>
c00041f8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00041fa:	31 ff                	xor    edi,edi
c00041fc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041ff:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004204:	74 03                	je     c0004209 <dir_register+0x27>
c0004206:	47                   	inc    edi
c0004207:	eb f6                	jmp    c00041ff <dir_register+0x1d>
c0004209:	89 c3                	mov    ebx,eax
c000420b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000420f:	0f 85 e1 00 00 00    	jne    c00042f6 <dir_register+0x114>
c0004215:	83 c7 0e             	add    edi,0xe
c0004218:	b9 0f 00 00 00       	mov    ecx,0xf
c000421d:	89 f8                	mov    eax,edi
c000421f:	31 d2                	xor    edx,edx
c0004221:	f7 f1                	div    ecx
c0004223:	8d 50 02             	lea    edx,[eax+0x2]
c0004226:	89 c7                	mov    edi,eax
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 12 f8 ff ff       	call   c0003a41 <dir_alloc>
c000422f:	89 c6                	mov    esi,eax
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 21 02 00 00    	jne    c000445a <dir_register+0x278>
c0004239:	81 c7 01 00 00 08    	add    edi,0x8000001
c000423f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004242:	c1 e7 05             	shl    edi,0x5
c0004245:	29 f8                	sub    eax,edi
c0004247:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000424a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000424d:	a8 04                	test   al,0x4
c000424f:	0f 84 91 00 00 00    	je     c00042e6 <dir_register+0x104>
c0004255:	83 e0 fb             	and    eax,0xfffffffb
c0004258:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000425b:	89 d8                	mov    eax,ebx
c000425d:	e8 25 ec ff ff       	call   c0002e87 <fill_first_frag>
c0004262:	85 c0                	test   eax,eax
c0004264:	0f 85 ee 01 00 00    	jne    c0004458 <dir_register+0x276>
c000426a:	83 c9 ff             	or     ecx,0xffffffff
c000426d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004270:	89 d8                	mov    eax,ebx
c0004272:	e8 db eb ff ff       	call   c0002e52 <fill_last_frag>
c0004277:	85 c0                	test   eax,eax
c0004279:	0f 85 d9 01 00 00    	jne    c0004458 <dir_register+0x276>
c000427f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004283:	74 61                	je     c00042e6 <dir_register+0x104>
c0004285:	89 da                	mov    edx,ebx
c0004287:	8d 44 24 14          	lea    eax,[esp+0x14]
c000428b:	e8 ea f5 ff ff       	call   c000387a <load_obj_xdir>
c0004290:	85 c0                	test   eax,eax
c0004292:	0f 85 c0 01 00 00    	jne    c0004458 <dir_register+0x276>
c0004298:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000429c:	31 c9                	xor    ecx,ecx
c000429e:	c1 e2 09             	shl    edx,0x9
c00042a1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00042a4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00042a7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042aa:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042ad:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042b0:	83 c0 38             	add    eax,0x38
c00042b3:	e8 1c d9 ff ff       	call   c0001bd4 <st_qword>
c00042b8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042bb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042be:	83 c0 28             	add    eax,0x28
c00042c1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042c4:	e8 0b d9 ff ff       	call   c0001bd4 <st_qword>
c00042c9:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042cc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042cf:	83 c8 01             	or     eax,0x1
c00042d2:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042d5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042d9:	e8 db f7 ff ff       	call   c0003ab9 <store_xdir>
c00042de:	85 c0                	test   eax,eax
c00042e0:	0f 85 72 01 00 00    	jne    c0004458 <dir_register+0x276>
c00042e6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042ec:	e8 c1 fb ff ff       	call   c0003eb2 <create_xdir>
c00042f1:	e9 64 01 00 00       	jmp    c000445a <dir_register+0x278>
c00042f6:	8d 40 3c             	lea    eax,[eax+0x3c]
c00042f9:	b9 0c 00 00 00       	mov    ecx,0xc
c00042fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004302:	89 c2                	mov    edx,eax
c0004304:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004308:	e8 cd d8 ff ff       	call   c0001bda <mem_cpy>
c000430d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004312:	74 58                	je     c000436c <dir_register+0x18a>
c0004314:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004318:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004320:	83 ec 0c             	sub    esp,0xc
c0004323:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004326:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000432a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000432e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004332:	e8 24 dc ff ff       	call   c0001f5b <gen_numname>
c0004337:	89 d8                	mov    eax,ebx
c0004339:	e8 de fc ff ff       	call   c000401c <dir_find>
c000433e:	83 c4 10             	add    esp,0x10
c0004341:	89 c6                	mov    esi,eax
c0004343:	85 c0                	test   eax,eax
c0004345:	75 15                	jne    c000435c <dir_register+0x17a>
c0004347:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000434b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004350:	75 ce                	jne    c0004320 <dir_register+0x13e>
c0004352:	be 07 00 00 00       	mov    esi,0x7
c0004357:	e9 fe 00 00 00       	jmp    c000445a <dir_register+0x278>
c000435c:	83 f8 04             	cmp    eax,0x4
c000435f:	0f 85 f5 00 00 00    	jne    c000445a <dir_register+0x278>
c0004365:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004369:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000436c:	b9 01 00 00 00       	mov    ecx,0x1
c0004371:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004376:	74 0f                	je     c0004387 <dir_register+0x1a5>
c0004378:	b9 0d 00 00 00       	mov    ecx,0xd
c000437d:	8d 47 0c             	lea    eax,[edi+0xc]
c0004380:	31 d2                	xor    edx,edx
c0004382:	f7 f1                	div    ecx
c0004384:	8d 48 01             	lea    ecx,[eax+0x1]
c0004387:	89 ca                	mov    edx,ecx
c0004389:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000438d:	89 d8                	mov    eax,ebx
c000438f:	e8 ad f6 ff ff       	call   c0003a41 <dir_alloc>
c0004394:	89 c6                	mov    esi,eax
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 bc 00 00 00    	jne    c000445a <dir_register+0x278>
c000439e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043a2:	49                   	dec    ecx
c00043a3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043a7:	74 6a                	je     c0004413 <dir_register+0x231>
c00043a9:	89 c8                	mov    eax,ecx
c00043ab:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043ae:	c1 e0 05             	shl    eax,0x5
c00043b1:	29 c2                	sub    edx,eax
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 fd ec ff ff       	call   c00030b7 <dir_sdi>
c00043ba:	89 c6                	mov    esi,eax
c00043bc:	85 c0                	test   eax,eax
c00043be:	0f 85 96 00 00 00    	jne    c000445a <dir_register+0x278>
c00043c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043c8:	e8 4a dc ff ff       	call   c0002017 <sum_sfn>
c00043cd:	0f b6 f8             	movzx  edi,al
c00043d0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043d3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043d6:	89 e8                	mov    eax,ebp
c00043d8:	e8 5c df ff ff       	call   c0002339 <move_window>
c00043dd:	89 c6                	mov    esi,eax
c00043df:	85 c0                	test   eax,eax
c00043e1:	75 77                	jne    c000445a <dir_register+0x278>
c00043e3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043e8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043eb:	83 ec 0c             	sub    esp,0xc
c00043ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00043f1:	57                   	push   edi
c00043f2:	e8 e0 da ff ff       	call   c0001ed7 <put_lfn>
c00043f7:	31 d2                	xor    edx,edx
c00043f9:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00043fd:	89 d8                	mov    eax,ebx
c00043ff:	e8 0b f2 ff ff       	call   c000360f <dir_next>
c0004404:	83 c4 10             	add    esp,0x10
c0004407:	89 c6                	mov    esi,eax
c0004409:	85 c0                	test   eax,eax
c000440b:	75 4d                	jne    c000445a <dir_register+0x278>
c000440d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004411:	75 bd                	jne    c00043d0 <dir_register+0x1ee>
c0004413:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004416:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004419:	89 e8                	mov    eax,ebp
c000441b:	e8 19 df ff ff       	call   c0002339 <move_window>
c0004420:	89 c6                	mov    esi,eax
c0004422:	85 c0                	test   eax,eax
c0004424:	75 34                	jne    c000445a <dir_register+0x278>
c0004426:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004429:	b9 20 00 00 00       	mov    ecx,0x20
c000442e:	31 d2                	xor    edx,edx
c0004430:	e8 ba d7 ff ff       	call   c0001bef <mem_set>
c0004435:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004438:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000443c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004441:	e8 94 d7 ff ff       	call   c0001bda <mem_cpy>
c0004446:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004449:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000444c:	83 e0 18             	and    eax,0x18
c000444f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004452:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004456:	eb 02                	jmp    c000445a <dir_register+0x278>
c0004458:	89 c6                	mov    esi,eax
c000445a:	83 c4 6c             	add    esp,0x6c
c000445d:	89 f0                	mov    eax,esi
c000445f:	5b                   	pop    ebx
c0004460:	5e                   	pop    esi
c0004461:	5f                   	pop    edi
c0004462:	5d                   	pop    ebp
c0004463:	c3                   	ret    

c0004464 <sync_fs>:
c0004464:	56                   	push   esi
c0004465:	53                   	push   ebx
c0004466:	53                   	push   ebx
c0004467:	89 c3                	mov    ebx,eax
c0004469:	e8 37 de ff ff       	call   c00022a5 <sync_window>
c000446e:	85 c0                	test   eax,eax
c0004470:	0f 85 b1 00 00 00    	jne    c0004527 <sync_fs+0xc3>
c0004476:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004479:	0f 85 8e 00 00 00    	jne    c000450d <sync_fs+0xa9>
c000447f:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004483:	0f 85 84 00 00 00    	jne    c000450d <sync_fs+0xa9>
c0004489:	b9 00 02 00 00       	mov    ecx,0x200
c000448e:	8d 73 54             	lea    esi,[ebx+0x54]
c0004491:	31 d2                	xor    edx,edx
c0004493:	89 f0                	mov    eax,esi
c0004495:	e8 55 d7 ff ff       	call   c0001bef <mem_set>
c000449a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00044a0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00044a5:	e8 23 d7 ff ff       	call   c0001bcd <st_word>
c00044aa:	ba 52 52 61 41       	mov    edx,0x41615252
c00044af:	89 f0                	mov    eax,esi
c00044b1:	e8 1b d7 ff ff       	call   c0001bd1 <st_dword>
c00044b6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044bc:	ba 72 72 41 61       	mov    edx,0x61417272
c00044c1:	e8 0b d7 ff ff       	call   c0001bd1 <st_dword>
c00044c6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044c9:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044cf:	e8 fd d6 ff ff       	call   c0001bd1 <st_dword>
c00044d4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044d7:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044dd:	e8 ef d6 ff ff       	call   c0001bd1 <st_dword>
c00044e2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044e5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044e8:	83 c0 01             	add    eax,0x1
c00044eb:	83 d2 00             	adc    edx,0x0
c00044ee:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00044f7:	6a 01                	push   0x1
c00044f9:	52                   	push   edx
c00044fa:	50                   	push   eax
c00044fb:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00044ff:	56                   	push   esi
c0004500:	50                   	push   eax
c0004501:	e8 20 d6 ff ff       	call   c0001b26 <disk_write>
c0004506:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000450a:	83 c4 20             	add    esp,0x20
c000450d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004511:	51                   	push   ecx
c0004512:	6a 00                	push   0x0
c0004514:	6a 00                	push   0x0
c0004516:	50                   	push   eax
c0004517:	e8 20 d6 ff ff       	call   c0001b3c <disk_ioctl>
c000451c:	83 c4 10             	add    esp,0x10
c000451f:	85 c0                	test   eax,eax
c0004521:	0f 95 c0             	setne  al
c0004524:	0f b6 c0             	movzx  eax,al
c0004527:	5a                   	pop    edx
c0004528:	5b                   	pop    ebx
c0004529:	5e                   	pop    esi
c000452a:	c3                   	ret    

c000452b <create_partition>:
c000452b:	55                   	push   ebp
c000452c:	0f b6 c0             	movzx  eax,al
c000452f:	57                   	push   edi
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	83 ec 60             	sub    esp,0x60
c0004535:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004539:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000453d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004541:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004545:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004549:	50                   	push   eax
c000454a:	6a 01                	push   0x1
c000454c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004550:	e8 e7 d5 ff ff       	call   c0001b3c <disk_ioctl>
c0004555:	83 c4 10             	add    esp,0x10
c0004558:	85 c0                	test   eax,eax
c000455a:	74 0a                	je     c0004566 <create_partition+0x3b>
c000455c:	b8 01 00 00 00       	mov    eax,0x1
c0004561:	e9 67 05 00 00       	jmp    c0004acd <create_partition+0x5a2>
c0004566:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000456a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000456e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004572:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004576:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000457b:	0f 86 ed 03 00 00    	jbe    c000496e <create_partition+0x443>
c0004581:	83 c0 df             	add    eax,0xffffffdf
c0004584:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000458c:	83 d2 ff             	adc    edx,0xffffffff
c000458f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004593:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004597:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000459b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000459f:	83 c0 bd             	add    eax,0xffffffbd
c00045a2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045a9:	83 d2 ff             	adc    edx,0xffffffff
c00045ac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045b0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045b4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045bc:	be 22 00 00 00       	mov    esi,0x22
c00045c1:	31 ff                	xor    edi,edi
c00045c3:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045cb:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045d3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045db:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045df:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045e5:	75 0e                	jne    c00045f5 <create_partition+0xca>
c00045e7:	b9 00 02 00 00       	mov    ecx,0x200
c00045ec:	31 d2                	xor    edx,edx
c00045ee:	89 d8                	mov    eax,ebx
c00045f0:	e8 fa d5 ff ff       	call   c0001bef <mem_set>
c00045f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00045fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004601:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004604:	0f 84 23 01 00 00    	je     c000472d <create_partition+0x202>
c000460a:	89 f0                	mov    eax,esi
c000460c:	89 fa                	mov    edx,edi
c000460e:	05 ff 07 00 00       	add    eax,0x7ff
c0004613:	83 d2 00             	adc    edx,0x0
c0004616:	89 c1                	mov    ecx,eax
c0004618:	89 d7                	mov    edi,edx
c000461a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004620:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004624:	89 ce                	mov    esi,ecx
c0004626:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000462a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000462e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004632:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004635:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004639:	89 04 24             	mov    DWORD PTR [esp],eax
c000463c:	b8 64 00 00 00       	mov    eax,0x64
c0004641:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004644:	b8 00 00 00 00       	mov    eax,0x0
c0004649:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000464d:	72 41                	jb     c0004690 <create_partition+0x165>
c000464f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004653:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004657:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000465b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004660:	01 c1                	add    ecx,eax
c0004662:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004666:	f7 24 24             	mul    DWORD PTR [esp]
c0004669:	6a 00                	push   0x0
c000466b:	01 ca                	add    edx,ecx
c000466d:	6a 64                	push   0x64
c000466f:	52                   	push   edx
c0004670:	50                   	push   eax
c0004671:	e8 2e c9 01 00       	call   c0020fa4 <__udivdi3>
c0004676:	83 c4 10             	add    esp,0x10
c0004679:	05 ff 07 00 00       	add    eax,0x7ff
c000467e:	83 d2 00             	adc    edx,0x0
c0004681:	89 c1                	mov    ecx,eax
c0004683:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004687:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000468d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004690:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004693:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004697:	01 f0                	add    eax,esi
c0004699:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000469d:	11 fa                	adc    edx,edi
c000469f:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00046a3:	19 d1                	sbb    ecx,edx
c00046a5:	73 2e                	jae    c00046d5 <create_partition+0x1aa>
c00046a7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046ab:	89 f8                	mov    eax,edi
c00046ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046b4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046b8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c0:	73 6b                	jae    c000472d <create_partition+0x202>
c00046c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046ca:	29 f0                	sub    eax,esi
c00046cc:	19 fa                	sbb    edx,edi
c00046ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00046d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046d9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046dc:	74 4f                	je     c000472d <create_partition+0x202>
c00046de:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046e1:	b9 10 00 00 00       	mov    ecx,0x10
c00046e6:	ba 90 20 02 c0       	mov    edx,0xc0022090
c00046eb:	e8 ea d4 ff ff       	call   c0001bda <mem_cpy>
c00046f0:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00046f4:	b9 10 00 00 00       	mov    ecx,0x10
c00046f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046fd:	e8 2c db ff ff       	call   c000222e <make_rand>
c0004702:	89 f2                	mov    edx,esi
c0004704:	89 f9                	mov    ecx,edi
c0004706:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000470a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000470e:	e8 c1 d4 ff ff       	call   c0001bd4 <st_qword>
c0004713:	03 34 24             	add    esi,DWORD PTR [esp]
c0004716:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000471a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000471e:	89 f2                	mov    edx,esi
c0004720:	89 f9                	mov    ecx,edi
c0004722:	83 c2 ff             	add    edx,0xffffffff
c0004725:	83 d1 ff             	adc    ecx,0xffffffff
c0004728:	e8 a7 d4 ff ff       	call   c0001bd4 <st_qword>
c000472d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004731:	83 e8 80             	sub    eax,0xffffff80
c0004734:	89 c5                	mov    ebp,eax
c0004736:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000473a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004740:	75 6b                	jne    c00047ad <create_partition+0x282>
c0004742:	45                   	inc    ebp
c0004743:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004747:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000474c:	e8 39 da ff ff       	call   c000218a <crc32>
c0004751:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004757:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000475b:	75 e5                	jne    c0004742 <create_partition+0x217>
c000475d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004761:	31 d2                	xor    edx,edx
c0004763:	83 ec 0c             	sub    esp,0xc
c0004766:	c1 ed 09             	shr    ebp,0x9
c0004769:	6a 01                	push   0x1
c000476b:	8d 45 02             	lea    eax,[ebp+0x2]
c000476e:	52                   	push   edx
c000476f:	50                   	push   eax
c0004770:	53                   	push   ebx
c0004771:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004775:	e8 ac d3 ff ff       	call   c0001b26 <disk_write>
c000477a:	83 c4 20             	add    esp,0x20
c000477d:	85 c0                	test   eax,eax
c000477f:	0f 85 d7 fd ff ff    	jne    c000455c <create_partition+0x31>
c0004785:	83 ec 0c             	sub    esp,0xc
c0004788:	31 d2                	xor    edx,edx
c000478a:	6a 01                	push   0x1
c000478c:	89 e8                	mov    eax,ebp
c000478e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004792:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004796:	52                   	push   edx
c0004797:	50                   	push   eax
c0004798:	53                   	push   ebx
c0004799:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000479d:	e8 84 d3 ff ff       	call   c0001b26 <disk_write>
c00047a2:	83 c4 20             	add    esp,0x20
c00047a5:	85 c0                	test   eax,eax
c00047a7:	0f 85 af fd ff ff    	jne    c000455c <create_partition+0x31>
c00047ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047b5:	3d 00 40 00 00       	cmp    eax,0x4000
c00047ba:	74 0d                	je     c00047c9 <create_partition+0x29e>
c00047bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047c0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047c4:	e9 12 fe ff ff       	jmp    c00045db <create_partition+0xb0>
c00047c9:	31 d2                	xor    edx,edx
c00047cb:	b9 00 02 00 00       	mov    ecx,0x200
c00047d0:	89 d8                	mov    eax,ebx
c00047d2:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047d5:	e8 15 d4 ff ff       	call   c0001bef <mem_set>
c00047da:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047dd:	b9 10 00 00 00       	mov    ecx,0x10
c00047e2:	ba 80 1f 02 c0       	mov    edx,0xc0021f80
c00047e7:	89 d8                	mov    eax,ebx
c00047e9:	e8 ec d3 ff ff       	call   c0001bda <mem_cpy>
c00047ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00047f2:	8d 43 58             	lea    eax,[ebx+0x58]
c00047f5:	f7 d2                	not    edx
c00047f7:	e8 d5 d3 ff ff       	call   c0001bd1 <st_dword>
c00047fc:	8d 43 18             	lea    eax,[ebx+0x18]
c00047ff:	31 c9                	xor    ecx,ecx
c0004801:	89 04 24             	mov    DWORD PTR [esp],eax
c0004804:	ba 01 00 00 00       	mov    edx,0x1
c0004809:	e8 c6 d3 ff ff       	call   c0001bd4 <st_qword>
c000480e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004812:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004816:	83 c2 ff             	add    edx,0xffffffff
c0004819:	89 e8                	mov    eax,ebp
c000481b:	83 d1 ff             	adc    ecx,0xffffffff
c000481e:	e8 b1 d3 ff ff       	call   c0001bd4 <st_qword>
c0004823:	31 c9                	xor    ecx,ecx
c0004825:	8d 43 28             	lea    eax,[ebx+0x28]
c0004828:	ba 22 00 00 00       	mov    edx,0x22
c000482d:	e8 a2 d3 ff ff       	call   c0001bd4 <st_qword>
c0004832:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004836:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000483a:	83 c2 de             	add    edx,0xffffffde
c000483d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004840:	83 d1 ff             	adc    ecx,0xffffffff
c0004843:	31 f6                	xor    esi,esi
c0004845:	e8 8a d3 ff ff       	call   c0001bd4 <st_qword>
c000484a:	8d 43 54             	lea    eax,[ebx+0x54]
c000484d:	ba 80 00 00 00       	mov    edx,0x80
c0004852:	e8 7a d3 ff ff       	call   c0001bd1 <st_dword>
c0004857:	8d 43 50             	lea    eax,[ebx+0x50]
c000485a:	ba 80 00 00 00       	mov    edx,0x80
c000485f:	e8 6d d3 ff ff       	call   c0001bd1 <st_dword>
c0004864:	ba 02 00 00 00       	mov    edx,0x2
c0004869:	89 f8                	mov    eax,edi
c000486b:	e8 61 d3 ff ff       	call   c0001bd1 <st_dword>
c0004870:	8d 53 38             	lea    edx,[ebx+0x38]
c0004873:	b9 10 00 00 00       	mov    ecx,0x10
c0004878:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000487c:	e8 ad d9 ff ff       	call   c000222e <make_rand>
c0004881:	83 c8 ff             	or     eax,0xffffffff
c0004884:	46                   	inc    esi
c0004885:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000488a:	e8 fb d8 ff ff       	call   c000218a <crc32>
c000488f:	83 fe 5c             	cmp    esi,0x5c
c0004892:	75 f0                	jne    c0004884 <create_partition+0x359>
c0004894:	f7 d0                	not    eax
c0004896:	8d 73 10             	lea    esi,[ebx+0x10]
c0004899:	89 c2                	mov    edx,eax
c000489b:	89 f0                	mov    eax,esi
c000489d:	e8 2f d3 ff ff       	call   c0001bd1 <st_dword>
c00048a2:	83 ec 0c             	sub    esp,0xc
c00048a5:	6a 01                	push   0x1
c00048a7:	6a 00                	push   0x0
c00048a9:	6a 01                	push   0x1
c00048ab:	53                   	push   ebx
c00048ac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048b0:	e8 71 d2 ff ff       	call   c0001b26 <disk_write>
c00048b5:	83 c4 20             	add    esp,0x20
c00048b8:	85 c0                	test   eax,eax
c00048ba:	0f 85 9c fc ff ff    	jne    c000455c <create_partition+0x31>
c00048c0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048c4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048c8:	83 c2 ff             	add    edx,0xffffffff
c00048cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048ce:	83 d1 ff             	adc    ecx,0xffffffff
c00048d1:	e8 fe d2 ff ff       	call   c0001bd4 <st_qword>
c00048d6:	ba 01 00 00 00       	mov    edx,0x1
c00048db:	31 c9                	xor    ecx,ecx
c00048dd:	89 e8                	mov    eax,ebp
c00048df:	e8 f0 d2 ff ff       	call   c0001bd4 <st_qword>
c00048e4:	89 f8                	mov    eax,edi
c00048e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048ee:	31 ff                	xor    edi,edi
c00048f0:	e8 df d2 ff ff       	call   c0001bd4 <st_qword>
c00048f5:	89 f0                	mov    eax,esi
c00048f7:	31 d2                	xor    edx,edx
c00048f9:	e8 d3 d2 ff ff       	call   c0001bd1 <st_dword>
c00048fe:	83 c8 ff             	or     eax,0xffffffff
c0004901:	47                   	inc    edi
c0004902:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004907:	e8 7e d8 ff ff       	call   c000218a <crc32>
c000490c:	83 ff 5c             	cmp    edi,0x5c
c000490f:	75 f0                	jne    c0004901 <create_partition+0x3d6>
c0004911:	f7 d0                	not    eax
c0004913:	89 c2                	mov    edx,eax
c0004915:	89 f0                	mov    eax,esi
c0004917:	e8 b5 d2 ff ff       	call   c0001bd1 <st_dword>
c000491c:	83 ec 0c             	sub    esp,0xc
c000491f:	6a 01                	push   0x1
c0004921:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004925:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004929:	83 c0 ff             	add    eax,0xffffffff
c000492c:	83 d2 ff             	adc    edx,0xffffffff
c000492f:	52                   	push   edx
c0004930:	50                   	push   eax
c0004931:	53                   	push   ebx
c0004932:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004936:	e8 eb d1 ff ff       	call   c0001b26 <disk_write>
c000493b:	83 c4 20             	add    esp,0x20
c000493e:	85 c0                	test   eax,eax
c0004940:	0f 85 16 fc ff ff    	jne    c000455c <create_partition+0x31>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	b9 00 02 00 00       	mov    ecx,0x200
c000494f:	e8 9b d2 ff ff       	call   c0001bef <mem_set>
c0004954:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000495a:	b9 10 00 00 00       	mov    ecx,0x10
c000495f:	ba 90 1f 02 c0       	mov    edx,0xc0021f90
c0004964:	e8 71 d2 ff ff       	call   c0001bda <mem_cpy>
c0004969:	e9 21 01 00 00       	jmp    c0004a8f <create_partition+0x564>
c000496e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004972:	b9 05 00 00 00       	mov    ecx,0x5
c0004977:	89 04 24             	mov    DWORD PTR [esp],eax
c000497a:	bf 08 00 00 00       	mov    edi,0x8
c000497f:	89 f8                	mov    eax,edi
c0004981:	31 d2                	xor    edx,edx
c0004983:	0f b6 f0             	movzx  esi,al
c0004986:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004989:	f7 f6                	div    esi
c000498b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004990:	76 0a                	jbe    c000499c <create_partition+0x471>
c0004992:	d1 e7                	shl    edi,1
c0004994:	49                   	dec    ecx
c0004995:	75 e8                	jne    c000497f <create_partition+0x454>
c0004997:	bf ff ff ff ff       	mov    edi,0xffffffff
c000499c:	b9 00 02 00 00       	mov    ecx,0x200
c00049a1:	31 d2                	xor    edx,edx
c00049a3:	89 d8                	mov    eax,ebx
c00049a5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049ab:	e8 3f d2 ff ff       	call   c0001bef <mem_set>
c00049b0:	b9 64 00 00 00       	mov    ecx,0x64
c00049b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b8:	31 d2                	xor    edx,edx
c00049ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049c2:	f7 f1                	div    ecx
c00049c4:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049c9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049cd:	89 f8                	mov    eax,edi
c00049cf:	0f b6 c0             	movzx  eax,al
c00049d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049d6:	e9 80 00 00 00       	jmp    c0004a5b <create_partition+0x530>
c00049db:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049de:	29 cf                	sub    edi,ecx
c00049e0:	89 ca                	mov    edx,ecx
c00049e2:	89 f0                	mov    eax,esi
c00049e4:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049e9:	e8 e3 d1 ff ff       	call   c0001bd1 <st_dword>
c00049ee:	8d 46 04             	lea    eax,[esi+0x4]
c00049f1:	89 fa                	mov    edx,edi
c00049f3:	83 c6 10             	add    esi,0x10
c00049f6:	e8 d6 d1 ff ff       	call   c0001bd1 <st_dword>
c00049fb:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00049ff:	31 d2                	xor    edx,edx
c0004a01:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004a04:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a08:	89 c8                	mov    eax,ecx
c0004a0a:	01 f9                	add    ecx,edi
c0004a0c:	f7 f5                	div    ebp
c0004a0e:	89 d5                	mov    ebp,edx
c0004a10:	31 d2                	xor    edx,edx
c0004a12:	45                   	inc    ebp
c0004a13:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a17:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a1a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a1d:	89 c2                	mov    edx,eax
c0004a1f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a22:	c1 ea 02             	shr    edx,0x2
c0004a25:	83 e2 c0             	and    edx,0xffffffc0
c0004a28:	09 ea                	or     edx,ebp
c0004a2a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a2f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a32:	31 d2                	xor    edx,edx
c0004a34:	f7 f5                	div    ebp
c0004a36:	89 d7                	mov    edi,edx
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	47                   	inc    edi
c0004a3b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a3f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a42:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a45:	89 c5                	mov    ebp,eax
c0004a47:	c1 ed 02             	shr    ebp,0x2
c0004a4a:	83 e5 c0             	and    ebp,0xffffffc0
c0004a4d:	09 ef                	or     edi,ebp
c0004a4f:	89 fa                	mov    edx,edi
c0004a51:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a54:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a59:	74 34                	je     c0004a8f <create_partition+0x564>
c0004a5b:	85 c9                	test   ecx,ecx
c0004a5d:	74 30                	je     c0004a8f <create_partition+0x564>
c0004a5f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a62:	76 2b                	jbe    c0004a8f <create_partition+0x564>
c0004a64:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a68:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a6c:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a6f:	83 ff 64             	cmp    edi,0x64
c0004a72:	76 4b                	jbe    c0004abf <create_partition+0x594>
c0004a74:	89 f8                	mov    eax,edi
c0004a76:	01 c8                	add    eax,ecx
c0004a78:	0f 82 5d ff ff ff    	jb     c00049db <create_partition+0x4b0>
c0004a7e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a81:	0f 87 54 ff ff ff    	ja     c00049db <create_partition+0x4b0>
c0004a87:	85 ff                	test   edi,edi
c0004a89:	0f 85 51 ff ff ff    	jne    c00049e0 <create_partition+0x4b5>
c0004a8f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004a95:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004a9a:	e8 2e d1 ff ff       	call   c0001bcd <st_word>
c0004a9f:	83 ec 0c             	sub    esp,0xc
c0004aa2:	6a 01                	push   0x1
c0004aa4:	6a 00                	push   0x0
c0004aa6:	6a 00                	push   0x0
c0004aa8:	53                   	push   ebx
c0004aa9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004aad:	e8 74 d0 ff ff       	call   c0001b26 <disk_write>
c0004ab2:	83 c4 20             	add    esp,0x20
c0004ab5:	85 c0                	test   eax,eax
c0004ab7:	0f 95 c0             	setne  al
c0004aba:	0f b6 c0             	movzx  eax,al
c0004abd:	eb 0e                	jmp    c0004acd <create_partition+0x5a2>
c0004abf:	74 07                	je     c0004ac8 <create_partition+0x59d>
c0004ac1:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004ac6:	eb ac                	jmp    c0004a74 <create_partition+0x549>
c0004ac8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004acb:	eb a7                	jmp    c0004a74 <create_partition+0x549>
c0004acd:	83 c4 5c             	add    esp,0x5c
c0004ad0:	5b                   	pop    ebx
c0004ad1:	5e                   	pop    esi
c0004ad2:	5f                   	pop    edi
c0004ad3:	5d                   	pop    ebp
c0004ad4:	c3                   	ret    

c0004ad5 <get_fileinfo>:
c0004ad5:	55                   	push   ebp
c0004ad6:	57                   	push   edi
c0004ad7:	56                   	push   esi
c0004ad8:	53                   	push   ebx
c0004ad9:	83 ec 1c             	sub    esp,0x1c
c0004adc:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ade:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004ae2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004ae6:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004ae9:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004aec:	0f 84 dc 01 00 00    	je     c0004cce <get_fileinfo+0x1f9>
c0004af2:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004af5:	75 0f                	jne    c0004b06 <get_fileinfo+0x31>
c0004af7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004afa:	83 c4 1c             	add    esp,0x1c
c0004afd:	5b                   	pop    ebx
c0004afe:	5e                   	pop    esi
c0004aff:	5f                   	pop    edi
c0004b00:	5d                   	pop    ebp
c0004b01:	e9 58 d5 ff ff       	jmp    c000205e <get_xfileinfo>
c0004b06:	89 d3                	mov    ebx,edx
c0004b08:	89 c6                	mov    esi,eax
c0004b0a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b0e:	74 6a                	je     c0004b7a <get_fileinfo+0xa5>
c0004b10:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b18:	31 ed                	xor    ebp,ebp
c0004b1a:	31 ff                	xor    edi,edi
c0004b1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b24:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b27:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b2b:	66 85 d2             	test   dx,dx
c0004b2e:	74 3e                	je     c0004b6e <get_fileinfo+0x99>
c0004b30:	66 85 ed             	test   bp,bp
c0004b33:	75 0c                	jne    c0004b41 <get_fileinfo+0x6c>
c0004b35:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b3b:	66 3d ff 07          	cmp    ax,0x7ff
c0004b3f:	76 22                	jbe    c0004b63 <get_fileinfo+0x8e>
c0004b41:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b46:	89 e8                	mov    eax,ebp
c0004b48:	29 f9                	sub    ecx,edi
c0004b4a:	c1 e0 10             	shl    eax,0x10
c0004b4d:	09 d0                	or     eax,edx
c0004b4f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b53:	e8 a3 d1 ff ff       	call   c0001cfb <put_utf>
c0004b58:	84 c0                	test   al,al
c0004b5a:	74 10                	je     c0004b6c <get_fileinfo+0x97>
c0004b5c:	0f b6 c0             	movzx  eax,al
c0004b5f:	31 d2                	xor    edx,edx
c0004b61:	01 c7                	add    edi,eax
c0004b63:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b68:	89 d5                	mov    ebp,edx
c0004b6a:	eb b0                	jmp    c0004b1c <get_fileinfo+0x47>
c0004b6c:	31 ff                	xor    edi,edi
c0004b6e:	66 85 ed             	test   bp,bp
c0004b71:	74 02                	je     c0004b75 <get_fileinfo+0xa0>
c0004b73:	31 ff                	xor    edi,edi
c0004b75:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b7a:	31 ff                	xor    edi,edi
c0004b7c:	31 c9                	xor    ecx,ecx
c0004b7e:	83 f9 0a             	cmp    ecx,0xa
c0004b81:	0f 87 ad 00 00 00    	ja     c0004c34 <get_fileinfo+0x15f>
c0004b87:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8a:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b8d:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004b91:	66 83 fa 20          	cmp    dx,0x20
c0004b95:	0f 84 92 00 00 00    	je     c0004c2d <get_fileinfo+0x158>
c0004b9b:	66 83 fa 05          	cmp    dx,0x5
c0004b9f:	75 05                	jne    c0004ba6 <get_fileinfo+0xd1>
c0004ba1:	ba e5 00 00 00       	mov    edx,0xe5
c0004ba6:	83 ff 0b             	cmp    edi,0xb
c0004ba9:	77 0b                	ja     c0004bb6 <get_fileinfo+0xe1>
c0004bab:	83 fd 09             	cmp    ebp,0x9
c0004bae:	75 06                	jne    c0004bb6 <get_fileinfo+0xe1>
c0004bb0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bb5:	47                   	inc    edi
c0004bb6:	0f b7 c2             	movzx  eax,dx
c0004bb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bbd:	e8 6d d0 ff ff       	call   c0001c2f <dbc_1st>
c0004bc2:	85 c0                	test   eax,eax
c0004bc4:	74 2f                	je     c0004bf5 <get_fileinfo+0x120>
c0004bc6:	83 fd 08             	cmp    ebp,0x8
c0004bc9:	74 2a                	je     c0004bf5 <get_fileinfo+0x120>
c0004bcb:	83 fd 0b             	cmp    ebp,0xb
c0004bce:	74 25                	je     c0004bf5 <get_fileinfo+0x120>
c0004bd0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bd3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004bd7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004bdb:	e8 52 d0 ff ff       	call   c0001c32 <dbc_2nd>
c0004be0:	85 c0                	test   eax,eax
c0004be2:	74 11                	je     c0004bf5 <get_fileinfo+0x120>
c0004be4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004bed:	c1 e2 08             	shl    edx,0x8
c0004bf0:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004bf3:	09 c2                	or     edx,eax
c0004bf5:	0f b7 d2             	movzx  edx,dx
c0004bf8:	50                   	push   eax
c0004bf9:	50                   	push   eax
c0004bfa:	68 b5 01 00 00       	push   0x1b5
c0004bff:	52                   	push   edx
c0004c00:	e8 87 3a 00 00       	call   c000868c <ff_oem2uni>
c0004c05:	83 c4 10             	add    esp,0x10
c0004c08:	66 85 c0             	test   ax,ax
c0004c0b:	75 04                	jne    c0004c11 <get_fileinfo+0x13c>
c0004c0d:	31 ff                	xor    edi,edi
c0004c0f:	eb 23                	jmp    c0004c34 <get_fileinfo+0x15f>
c0004c11:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c16:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c1a:	29 f9                	sub    ecx,edi
c0004c1c:	0f b7 c0             	movzx  eax,ax
c0004c1f:	e8 d7 d0 ff ff       	call   c0001cfb <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 e5                	je     c0004c0d <get_fileinfo+0x138>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	01 c7                	add    edi,eax
c0004c2d:	89 e9                	mov    ecx,ebp
c0004c2f:	e9 4a ff ff ff       	jmp    c0004b7e <get_fileinfo+0xa9>
c0004c34:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c39:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c3d:	75 54                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c3f:	85 ff                	test   edi,edi
c0004c41:	75 0b                	jne    c0004c4e <get_fileinfo+0x179>
c0004c43:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c47:	ba 01 00 00 00       	mov    edx,0x1
c0004c4c:	eb 33                	jmp    c0004c81 <get_fileinfo+0x1ac>
c0004c4e:	b1 08                	mov    cl,0x8
c0004c50:	31 d2                	xor    edx,edx
c0004c52:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c58:	84 c0                	test   al,al
c0004c5a:	74 25                	je     c0004c81 <get_fileinfo+0x1ac>
c0004c5c:	66 83 f8 2e          	cmp    ax,0x2e
c0004c60:	74 16                	je     c0004c78 <get_fileinfo+0x1a3>
c0004c62:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c65:	66 83 ff 19          	cmp    di,0x19
c0004c69:	77 0f                	ja     c0004c7a <get_fileinfo+0x1a5>
c0004c6b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c6e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c71:	74 07                	je     c0004c7a <get_fileinfo+0x1a5>
c0004c73:	83 c0 20             	add    eax,0x20
c0004c76:	eb 02                	jmp    c0004c7a <get_fileinfo+0x1a5>
c0004c78:	b1 10                	mov    cl,0x10
c0004c7a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c7e:	42                   	inc    edx
c0004c7f:	eb d1                	jmp    c0004c52 <get_fileinfo+0x17d>
c0004c81:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c89:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c8d:	75 04                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c8f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004c93:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c96:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004c99:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	83 c0 1c             	add    eax,0x1c
c0004ca2:	e8 c1 ce ff ff       	call   c0001b68 <ld_dword>
c0004ca7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004cae:	89 03                	mov    DWORD PTR [ebx],eax
c0004cb0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cb3:	83 c0 16             	add    eax,0x16
c0004cb6:	e8 a0 ce ff ff       	call   c0001b5b <ld_word>
c0004cbb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004cbf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cc2:	83 c0 18             	add    eax,0x18
c0004cc5:	e8 91 ce ff ff       	call   c0001b5b <ld_word>
c0004cca:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cce:	83 c4 1c             	add    esp,0x1c
c0004cd1:	5b                   	pop    ebx
c0004cd2:	5e                   	pop    esi
c0004cd3:	5f                   	pop    edi
c0004cd4:	5d                   	pop    ebp
c0004cd5:	c3                   	ret    

c0004cd6 <ld_clust.isra.0>:
c0004cd6:	56                   	push   esi
c0004cd7:	89 c6                	mov    esi,eax
c0004cd9:	53                   	push   ebx
c0004cda:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004cdd:	89 d3                	mov    ebx,edx
c0004cdf:	e8 77 ce ff ff       	call   c0001b5b <ld_word>
c0004ce4:	0f b7 c8             	movzx  ecx,ax
c0004ce7:	89 f0                	mov    eax,esi
c0004ce9:	3c 03                	cmp    al,0x3
c0004ceb:	75 0d                	jne    c0004cfa <ld_clust.isra.0+0x24>
c0004ced:	8d 43 14             	lea    eax,[ebx+0x14]
c0004cf0:	e8 66 ce ff ff       	call   c0001b5b <ld_word>
c0004cf5:	c1 e0 10             	shl    eax,0x10
c0004cf8:	09 c1                	or     ecx,eax
c0004cfa:	89 c8                	mov    eax,ecx
c0004cfc:	5b                   	pop    ebx
c0004cfd:	5e                   	pop    esi
c0004cfe:	c3                   	ret    

c0004cff <st_clust.isra.1>:
c0004cff:	56                   	push   esi
c0004d00:	89 c6                	mov    esi,eax
c0004d02:	53                   	push   ebx
c0004d03:	89 d3                	mov    ebx,edx
c0004d05:	0f b7 d1             	movzx  edx,cx
c0004d08:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d0b:	e8 bd ce ff ff       	call   c0001bcd <st_word>
c0004d10:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d13:	75 0f                	jne    c0004d24 <st_clust.isra.1+0x25>
c0004d15:	c1 e9 10             	shr    ecx,0x10
c0004d18:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d1b:	89 ca                	mov    edx,ecx
c0004d1d:	5b                   	pop    ebx
c0004d1e:	5e                   	pop    esi
c0004d1f:	e9 a9 ce ff ff       	jmp    c0001bcd <st_word>
c0004d24:	5b                   	pop    ebx
c0004d25:	5e                   	pop    esi
c0004d26:	c3                   	ret    

c0004d27 <init_alloc_info.isra.2>:
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	89 c6                	mov    esi,eax
c0004d2b:	89 d3                	mov    ebx,edx
c0004d2d:	51                   	push   ecx
c0004d2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d30:	83 c0 34             	add    eax,0x34
c0004d33:	e8 30 ce ff ff       	call   c0001b68 <ld_dword>
c0004d38:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d3b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d3d:	83 c0 38             	add    eax,0x38
c0004d40:	e8 3b ce ff ff       	call   c0001b80 <ld_qword>
c0004d45:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d48:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d4b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d4d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d50:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d57:	83 e0 02             	and    eax,0x2
c0004d5a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d5d:	5b                   	pop    ebx
c0004d5e:	5b                   	pop    ebx
c0004d5f:	5e                   	pop    esi
c0004d60:	c3                   	ret    

c0004d61 <follow_path>:
c0004d61:	56                   	push   esi
c0004d62:	53                   	push   ebx
c0004d63:	89 c3                	mov    ebx,eax
c0004d65:	83 ec 14             	sub    esp,0x14
c0004d68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d6c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d72:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d74:	80 fa 5c             	cmp    dl,0x5c
c0004d77:	75 07                	jne    c0004d80 <follow_path+0x1f>
c0004d79:	40                   	inc    eax
c0004d7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d7e:	eb ee                	jmp    c0004d6e <follow_path+0xd>
c0004d80:	80 fa 2f             	cmp    dl,0x2f
c0004d83:	74 f4                	je     c0004d79 <follow_path+0x18>
c0004d85:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d8c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d93:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004d96:	77 52                	ja     c0004dea <follow_path+0x89>
c0004d98:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004d9c:	31 d2                	xor    edx,edx
c0004d9e:	89 d8                	mov    eax,ebx
c0004da0:	e8 12 e3 ff ff       	call   c00030b7 <dir_sdi>
c0004da5:	eb 7c                	jmp    c0004e23 <follow_path+0xc2>
c0004da7:	89 d8                	mov    eax,ebx
c0004da9:	e8 6e f2 ff ff       	call   c000401c <dir_find>
c0004dae:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004db1:	85 c0                	test   eax,eax
c0004db3:	75 46                	jne    c0004dfb <follow_path+0x9a>
c0004db5:	80 e2 04             	and    dl,0x4
c0004db8:	75 69                	jne    c0004e23 <follow_path+0xc2>
c0004dba:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004dbe:	74 5e                	je     c0004e1e <follow_path+0xbd>
c0004dc0:	8a 06                	mov    al,BYTE PTR [esi]
c0004dc2:	3c 04                	cmp    al,0x4
c0004dc4:	75 41                	jne    c0004e07 <follow_path+0xa6>
c0004dc6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dc9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004dcd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004dd0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004dd3:	30 c0                	xor    al,al
c0004dd5:	09 d0                	or     eax,edx
c0004dd7:	89 da                	mov    edx,ebx
c0004dd9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ddc:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ddf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004de2:	8d 46 10             	lea    eax,[esi+0x10]
c0004de5:	e8 3d ff ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004dea:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004dee:	89 d8                	mov    eax,ebx
c0004df0:	e8 a9 ed ff ff       	call   c0003b9e <create_name>
c0004df5:	85 c0                	test   eax,eax
c0004df7:	74 ae                	je     c0004da7 <follow_path+0x46>
c0004df9:	eb 28                	jmp    c0004e23 <follow_path+0xc2>
c0004dfb:	83 f8 04             	cmp    eax,0x4
c0004dfe:	75 23                	jne    c0004e23 <follow_path+0xc2>
c0004e00:	80 e2 04             	and    dl,0x4
c0004e03:	74 19                	je     c0004e1e <follow_path+0xbd>
c0004e05:	eb 1c                	jmp    c0004e23 <follow_path+0xc2>
c0004e07:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e0a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e10:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e14:	e8 bd fe ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0004e19:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e1c:	eb cc                	jmp    c0004dea <follow_path+0x89>
c0004e1e:	b8 05 00 00 00       	mov    eax,0x5
c0004e23:	83 c4 14             	add    esp,0x14
c0004e26:	5b                   	pop    ebx
c0004e27:	5e                   	pop    esi
c0004e28:	c3                   	ret    

c0004e29 <f_mount>:
c0004e29:	53                   	push   ebx
c0004e2a:	83 ec 18             	sub    esp,0x18
c0004e2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e31:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e39:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e3d:	e8 fb d2 ff ff       	call   c000213d <get_ldnumber>
c0004e42:	89 c2                	mov    edx,eax
c0004e44:	b8 0b 00 00 00       	mov    eax,0xb
c0004e49:	85 d2                	test   edx,edx
c0004e4b:	78 39                	js     c0004e86 <f_mount+0x5d>
c0004e4d:	8b 04 95 20 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9be0]
c0004e54:	85 c0                	test   eax,eax
c0004e56:	74 03                	je     c0004e5b <f_mount+0x32>
c0004e58:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e5f:	85 c0                	test   eax,eax
c0004e61:	74 03                	je     c0004e66 <f_mount+0x3d>
c0004e63:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e6a:	89 04 95 20 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9be0],eax
c0004e71:	31 c0                	xor    eax,eax
c0004e73:	84 db                	test   bl,bl
c0004e75:	74 0f                	je     c0004e86 <f_mount+0x5d>
c0004e77:	31 c9                	xor    ecx,ecx
c0004e79:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e7d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e81:	e8 65 d7 ff ff       	call   c00025eb <mount_volume>
c0004e86:	83 c4 18             	add    esp,0x18
c0004e89:	5b                   	pop    ebx
c0004e8a:	c3                   	ret    

c0004e8b <f_open>:
c0004e8b:	55                   	push   ebp
c0004e8c:	bd 09 00 00 00       	mov    ebp,0x9
c0004e91:	57                   	push   edi
c0004e92:	56                   	push   esi
c0004e93:	53                   	push   ebx
c0004e94:	83 ec 7c             	sub    esp,0x7c
c0004e97:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004e9e:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004ea5:	85 db                	test   ebx,ebx
c0004ea7:	0f 84 10 04 00 00    	je     c00052bd <f_open+0x432>
c0004ead:	89 fe                	mov    esi,edi
c0004eaf:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004eb3:	83 e6 3f             	and    esi,0x3f
c0004eb6:	89 f0                	mov    eax,esi
c0004eb8:	0f b6 c8             	movzx  ecx,al
c0004ebb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ec2:	e8 24 d7 ff ff       	call   c00025eb <mount_volume>
c0004ec7:	89 c5                	mov    ebp,eax
c0004ec9:	85 c0                	test   eax,eax
c0004ecb:	0f 85 e6 03 00 00    	jne    c00052b7 <f_open+0x42c>
c0004ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed5:	bd 11 00 00 00       	mov    ebp,0x11
c0004eda:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ede:	83 ec 0c             	sub    esp,0xc
c0004ee1:	68 60 04 00 00       	push   0x460
c0004ee6:	e8 d9 36 00 00       	call   c00085c4 <ff_memalloc>
c0004eeb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eef:	83 c4 10             	add    esp,0x10
c0004ef2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ef7:	0f 84 c0 03 00 00    	je     c00052bd <f_open+0x432>
c0004efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f01:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004f05:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f0b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f0e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f11:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f18:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f1c:	e8 40 fe ff ff       	call   c0004d61 <follow_path>
c0004f21:	89 c5                	mov    ebp,eax
c0004f23:	85 c0                	test   eax,eax
c0004f25:	75 0c                	jne    c0004f33 <f_open+0xa8>
c0004f27:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f2c:	79 05                	jns    c0004f33 <f_open+0xa8>
c0004f2e:	bd 06 00 00 00       	mov    ebp,0x6
c0004f33:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f39:	0f 84 84 01 00 00    	je     c00050c3 <f_open+0x238>
c0004f3f:	85 ed                	test   ebp,ebp
c0004f41:	74 20                	je     c0004f63 <f_open+0xd8>
c0004f43:	83 fd 04             	cmp    ebp,0x4
c0004f46:	0f 85 58 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f50:	83 ce 08             	or     esi,0x8
c0004f53:	e8 8a f2 ff ff       	call   c00041e2 <dir_register>
c0004f58:	89 c5                	mov    ebp,eax
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 2f                	je     c0004f8d <f_open+0x102>
c0004f5e:	e9 41 03 00 00       	jmp    c00052a4 <f_open+0x419>
c0004f63:	bd 07 00 00 00       	mov    ebp,0x7
c0004f68:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f6d:	0f 85 31 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f73:	bd 08 00 00 00       	mov    ebp,0x8
c0004f78:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f7e:	0f 85 20 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f84:	83 e7 08             	and    edi,0x8
c0004f87:	0f 84 65 01 00 00    	je     c00050f2 <f_open+0x267>
c0004f8d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f91:	8a 02                	mov    al,BYTE PTR [edx]
c0004f93:	3c 04                	cmp    al,0x4
c0004f95:	0f 85 97 00 00 00    	jne    c0005032 <f_open+0x1a7>
c0004f9b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f9e:	89 13                	mov    DWORD PTR [ebx],edx
c0004fa0:	89 da                	mov    edx,ebx
c0004fa2:	e8 80 fd ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004fa7:	31 d2                	xor    edx,edx
c0004fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fad:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004fb2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fb5:	83 c0 02             	add    eax,0x2
c0004fb8:	e8 32 cc ff ff       	call   c0001bef <mem_set>
c0004fbd:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fc2:	31 d2                	xor    edx,edx
c0004fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fcb:	83 c0 26             	add    eax,0x26
c0004fce:	e8 1c cc ff ff       	call   c0001bef <mem_set>
c0004fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fd7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fda:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fde:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fe3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fe6:	83 c0 08             	add    eax,0x8
c0004fe9:	e8 e3 cb ff ff       	call   c0001bd1 <st_dword>
c0004fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ff2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ff5:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ff9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ffd:	e8 b7 ea ff ff       	call   c0003ab9 <store_xdir>
c0005002:	89 c5                	mov    ebp,eax
c0005004:	85 c0                	test   eax,eax
c0005006:	0f 85 98 02 00 00    	jne    c00052a4 <f_open+0x419>
c000500c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000500f:	85 d2                	test   edx,edx
c0005011:	0f 84 db 00 00 00    	je     c00050f2 <f_open+0x267>
c0005017:	31 c9                	xor    ecx,ecx
c0005019:	89 d8                	mov    eax,ebx
c000501b:	e8 8e e3 ff ff       	call   c00033ae <remove_chain>
c0005020:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005024:	89 c5                	mov    ebp,eax
c0005026:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005029:	48                   	dec    eax
c000502a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000502d:	e9 b8 00 00 00       	jmp    c00050ea <f_open+0x25f>
c0005032:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005036:	89 ea                	mov    edx,ebp
c0005038:	e8 99 fc ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000503d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005042:	89 c7                	mov    edi,eax
c0005044:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005047:	e8 85 cb ff ff       	call   c0001bd1 <st_dword>
c000504c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005050:	31 c9                	xor    ecx,ecx
c0005052:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000505a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000505e:	e8 9c fc ff ff       	call   c0004cff <st_clust.isra.1>
c0005063:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005067:	31 d2                	xor    edx,edx
c0005069:	83 c0 1c             	add    eax,0x1c
c000506c:	e8 60 cb ff ff       	call   c0001bd1 <st_dword>
c0005071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005075:	85 ff                	test   edi,edi
c0005077:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000507b:	74 75                	je     c00050f2 <f_open+0x267>
c000507d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005081:	31 c9                	xor    ecx,ecx
c0005083:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005086:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005089:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000508d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005091:	89 fa                	mov    edx,edi
c0005093:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005097:	e8 12 e3 ff ff       	call   c00033ae <remove_chain>
c000509c:	89 c5                	mov    ebp,eax
c000509e:	85 c0                	test   eax,eax
c00050a0:	0f 85 fe 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b2:	4f                   	dec    edi
c00050b3:	e8 81 d2 ff ff       	call   c0002339 <move_window>
c00050b8:	89 c5                	mov    ebp,eax
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050c1:	eb 27                	jmp    c00050ea <f_open+0x25f>
c00050c3:	85 ed                	test   ebp,ebp
c00050c5:	0f 85 d9 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050cb:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050cf:	bd 04 00 00 00       	mov    ebp,0x4
c00050d4:	a8 10                	test   al,0x10
c00050d6:	0f 85 c8 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050dc:	83 e7 02             	and    edi,0x2
c00050df:	74 11                	je     c00050f2 <f_open+0x267>
c00050e1:	bd 07 00 00 00       	mov    ebp,0x7
c00050e6:	a8 01                	test   al,0x1
c00050e8:	eb 02                	jmp    c00050ec <f_open+0x261>
c00050ea:	85 ed                	test   ebp,ebp
c00050ec:	0f 85 b2 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050f2:	f7 c6 08 00 00 00    	test   esi,0x8
c00050f8:	74 03                	je     c00050fd <f_open+0x272>
c00050fa:	83 ce 40             	or     esi,0x40
c00050fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005101:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005104:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005107:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000510a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000510d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005111:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005114:	8a 02                	mov    al,BYTE PTR [edx]
c0005116:	3c 04                	cmp    al,0x4
c0005118:	75 2a                	jne    c0005144 <f_open+0x2b9>
c000511a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000511e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005123:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000512a:	30 c0                	xor    al,al
c000512c:	09 c8                	or     eax,ecx
c000512e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005131:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005135:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005138:	8d 42 10             	lea    eax,[edx+0x10]
c000513b:	89 da                	mov    edx,ebx
c000513d:	e8 e5 fb ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005142:	eb 1c                	jmp    c0005160 <f_open+0x2d5>
c0005144:	89 fa                	mov    edx,edi
c0005146:	e8 8b fb ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000514b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000514e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005151:	e8 12 ca ff ff       	call   c0001b68 <ld_dword>
c0005156:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000515d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005164:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000516b:	89 03                	mov    DWORD PTR [ebx],eax
c000516d:	31 d2                	xor    edx,edx
c000516f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005173:	b9 00 02 00 00       	mov    ecx,0x200
c0005178:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000517c:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005180:	89 f0                	mov    eax,esi
c0005182:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005189:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000518c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005193:	8d 43 50             	lea    eax,[ebx+0x50]
c0005196:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000519d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00051a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051a8:	e8 42 ca ff ff       	call   c0001bef <mem_set>
c00051ad:	83 e6 20             	and    esi,0x20
c00051b0:	75 07                	jne    c00051b9 <f_open+0x32e>
c00051b2:	31 ed                	xor    ebp,ebp
c00051b4:	e9 eb 00 00 00       	jmp    c00052a4 <f_open+0x419>
c00051b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051cb:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051cf:	74 e1                	je     c00051b2 <f_open+0x327>
c00051d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051dc:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051e3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051e6:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051ea:	31 ff                	xor    edi,edi
c00051ec:	c1 e5 09             	shl    ebp,0x9
c00051ef:	89 ee                	mov    esi,ebp
c00051f1:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00051f5:	89 f8                	mov    eax,edi
c00051f7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00051fb:	73 22                	jae    c000521f <f_open+0x394>
c00051fd:	89 d8                	mov    eax,ebx
c00051ff:	e8 bd dc ff ff       	call   c0002ec1 <get_fat>
c0005204:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005208:	89 c2                	mov    edx,eax
c000520a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000520e:	83 f8 01             	cmp    eax,0x1
c0005211:	76 10                	jbe    c0005223 <f_open+0x398>
c0005213:	83 f8 ff             	cmp    eax,0xffffffff
c0005216:	75 d9                	jne    c00051f1 <f_open+0x366>
c0005218:	bd 01 00 00 00       	mov    ebp,0x1
c000521d:	eb 09                	jmp    c0005228 <f_open+0x39d>
c000521f:	31 ed                	xor    ebp,ebp
c0005221:	eb 05                	jmp    c0005228 <f_open+0x39d>
c0005223:	bd 02 00 00 00       	mov    ebp,0x2
c0005228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000522b:	85 ed                	test   ebp,ebp
c000522d:	75 75                	jne    c00052a4 <f_open+0x419>
c000522f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005233:	25 ff 01 00 00       	and    eax,0x1ff
c0005238:	0f 84 74 ff ff ff    	je     c00051b2 <f_open+0x327>
c000523e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005242:	bd 02 00 00 00       	mov    ebp,0x2
c0005247:	89 c8                	mov    eax,ecx
c0005249:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000524d:	e8 a2 cb ff ff       	call   c0001df4 <clst2sect>
c0005252:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005256:	89 d7                	mov    edi,edx
c0005258:	09 c7                	or     edi,eax
c000525a:	74 48                	je     c00052a4 <f_open+0x419>
c000525c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005260:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005264:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000526c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005270:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005274:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005278:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000527b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000527f:	83 ec 0c             	sub    esp,0xc
c0005282:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005285:	6a 01                	push   0x1
c0005287:	52                   	push   edx
c0005288:	50                   	push   eax
c0005289:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000528d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005291:	50                   	push   eax
c0005292:	e8 79 c8 ff ff       	call   c0001b10 <disk_read>
c0005297:	83 c4 20             	add    esp,0x20
c000529a:	85 c0                	test   eax,eax
c000529c:	0f 95 c0             	setne  al
c000529f:	0f b6 c0             	movzx  eax,al
c00052a2:	89 c5                	mov    ebp,eax
c00052a4:	83 ec 0c             	sub    esp,0xc
c00052a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052ab:	e8 2c 33 00 00       	call   c00085dc <ff_memfree>
c00052b0:	83 c4 10             	add    esp,0x10
c00052b3:	85 ed                	test   ebp,ebp
c00052b5:	74 06                	je     c00052bd <f_open+0x432>
c00052b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052bd:	83 c4 7c             	add    esp,0x7c
c00052c0:	89 e8                	mov    eax,ebp
c00052c2:	5b                   	pop    ebx
c00052c3:	5e                   	pop    esi
c00052c4:	5f                   	pop    edi
c00052c5:	5d                   	pop    ebp
c00052c6:	c3                   	ret    

c00052c7 <f_read>:
c00052c7:	55                   	push   ebp
c00052c8:	57                   	push   edi
c00052c9:	56                   	push   esi
c00052ca:	53                   	push   ebx
c00052cb:	83 ec 2c             	sub    esp,0x2c
c00052ce:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052dc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e0:	89 d8                	mov    eax,ebx
c00052e2:	e8 77 cf ff ff       	call   c000225e <validate>
c00052e7:	89 c5                	mov    ebp,eax
c00052e9:	85 c0                	test   eax,eax
c00052eb:	0f 85 4c 02 00 00    	jne    c000553d <f_read+0x276>
c00052f1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00052f5:	85 ed                	test   ebp,ebp
c00052f7:	0f 85 40 02 00 00    	jne    c000553d <f_read+0x276>
c00052fd:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005301:	0f 84 31 02 00 00    	je     c0005538 <f_read+0x271>
c0005307:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000530a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000530d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005310:	bf 00 00 00 00       	mov    edi,0x0
c0005315:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005318:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000531c:	89 d1                	mov    ecx,edx
c000531e:	19 f9                	sbb    ecx,edi
c0005320:	0f 83 cf 00 00 00    	jae    c00053f5 <f_read+0x12e>
c0005326:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000532a:	e9 c6 00 00 00       	jmp    c00053f5 <f_read+0x12e>
c000532f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005332:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005335:	89 d0                	mov    eax,edx
c0005337:	25 ff 01 00 00       	and    eax,0x1ff
c000533c:	0f 85 c9 01 00 00    	jne    c000550b <f_read+0x244>
c0005342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005346:	89 d6                	mov    esi,edx
c0005348:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000534c:	89 cf                	mov    edi,ecx
c000534e:	48                   	dec    eax
c000534f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005353:	21 f0                	and    eax,esi
c0005355:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005359:	0f 84 a6 00 00 00    	je     c0005405 <f_read+0x13e>
c000535f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005363:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005366:	89 c8                	mov    eax,ecx
c0005368:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000536b:	e8 84 ca ff ff       	call   c0001df4 <clst2sect>
c0005370:	89 d7                	mov    edi,edx
c0005372:	09 c7                	or     edi,eax
c0005374:	0f 84 b4 00 00 00    	je     c000542e <f_read+0x167>
c000537a:	31 ff                	xor    edi,edi
c000537c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005380:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005383:	01 c6                	add    esi,eax
c0005385:	11 d7                	adc    edi,edx
c0005387:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000538f:	0f 86 fd 00 00 00    	jbe    c0005492 <f_read+0x1cb>
c0005395:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005399:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000539d:	c1 e8 09             	shr    eax,0x9
c00053a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00053a3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00053a7:	03 14 24             	add    edx,DWORD PTR [esp]
c00053aa:	39 c2                	cmp    edx,eax
c00053ac:	76 07                	jbe    c00053b5 <f_read+0xee>
c00053ae:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00053b5:	83 ec 0c             	sub    esp,0xc
c00053b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053bc:	57                   	push   edi
c00053bd:	56                   	push   esi
c00053be:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053c6:	50                   	push   eax
c00053c7:	e8 44 c7 ff ff       	call   c0001b10 <disk_read>
c00053cc:	83 c4 20             	add    esp,0x20
c00053cf:	85 c0                	test   eax,eax
c00053d1:	75 6e                	jne    c0005441 <f_read+0x17a>
c00053d3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053d7:	78 7e                	js     c0005457 <f_read+0x190>
c00053d9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053dc:	c1 e6 09             	shl    esi,0x9
c00053df:	31 ff                	xor    edi,edi
c00053e1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053ed:	01 30                	add    DWORD PTR [eax],esi
c00053ef:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00053f2:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00053f5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00053fa:	0f 85 2f ff ff ff    	jne    c000532f <f_read+0x68>
c0005400:	e9 38 01 00 00       	jmp    c000553d <f_read+0x276>
c0005405:	89 c8                	mov    eax,ecx
c0005407:	09 d0                	or     eax,edx
c0005409:	75 05                	jne    c0005410 <f_read+0x149>
c000540b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000540e:	eb 19                	jmp    c0005429 <f_read+0x162>
c0005410:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005414:	74 09                	je     c000541f <f_read+0x158>
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f8 c9 ff ff       	call   c0001e15 <clmt_clust>
c000541d:	eb 0a                	jmp    c0005429 <f_read+0x162>
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 d8                	mov    eax,ebx
c0005424:	e8 98 da ff ff       	call   c0002ec1 <get_fat>
c0005429:	83 f8 01             	cmp    eax,0x1
c000542c:	77 0e                	ja     c000543c <f_read+0x175>
c000542e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005432:	bd 02 00 00 00       	mov    ebp,0x2
c0005437:	e9 01 01 00 00       	jmp    c000553d <f_read+0x276>
c000543c:	83 f8 ff             	cmp    eax,0xffffffff
c000543f:	75 0e                	jne    c000544f <f_read+0x188>
c0005441:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005445:	bd 01 00 00 00       	mov    ebp,0x1
c000544a:	e9 ee 00 00 00       	jmp    c000553d <f_read+0x276>
c000544f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005452:	e9 08 ff ff ff       	jmp    c000535f <f_read+0x98>
c0005457:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000545a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000545d:	29 f0                	sub    eax,esi
c000545f:	19 fa                	sbb    edx,edi
c0005461:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005464:	89 d7                	mov    edi,edx
c0005466:	ba 00 00 00 00       	mov    edx,0x0
c000546b:	89 f9                	mov    ecx,edi
c000546d:	19 d1                	sbb    ecx,edx
c000546f:	0f 83 64 ff ff ff    	jae    c00053d9 <f_read+0x112>
c0005475:	89 c7                	mov    edi,eax
c0005477:	8d 53 50             	lea    edx,[ebx+0x50]
c000547a:	c1 e7 09             	shl    edi,0x9
c000547d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005481:	b9 00 02 00 00       	mov    ecx,0x200
c0005486:	01 f8                	add    eax,edi
c0005488:	e8 4d c7 ff ff       	call   c0001bda <mem_cpy>
c000548d:	e9 47 ff ff ff       	jmp    c00053d9 <f_read+0x112>
c0005492:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005495:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005498:	89 04 24             	mov    DWORD PTR [esp],eax
c000549b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000549f:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00054a3:	75 05                	jne    c00054aa <f_read+0x1e3>
c00054a5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054a8:	74 5b                	je     c0005505 <f_read+0x23e>
c00054aa:	8d 43 50             	lea    eax,[ebx+0x50]
c00054ad:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054b5:	79 2a                	jns    c00054e1 <f_read+0x21a>
c00054b7:	83 ec 0c             	sub    esp,0xc
c00054ba:	6a 01                	push   0x1
c00054bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 54 c6 ff ff       	call   c0001b26 <disk_write>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	0f 85 64 ff ff ff    	jne    c0005441 <f_read+0x17a>
c00054dd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054e1:	83 ec 0c             	sub    esp,0xc
c00054e4:	6a 01                	push   0x1
c00054e6:	57                   	push   edi
c00054e7:	56                   	push   esi
c00054e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00054f0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00054f4:	50                   	push   eax
c00054f5:	e8 16 c6 ff ff       	call   c0001b10 <disk_read>
c00054fa:	83 c4 20             	add    esp,0x20
c00054fd:	85 c0                	test   eax,eax
c00054ff:	0f 85 3c ff ff ff    	jne    c0005441 <f_read+0x17a>
c0005505:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005508:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000550b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000550e:	ba 00 02 00 00       	mov    edx,0x200
c0005513:	25 ff 01 00 00       	and    eax,0x1ff
c0005518:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000551c:	29 c2                	sub    edx,eax
c000551e:	39 d6                	cmp    esi,edx
c0005520:	76 02                	jbe    c0005524 <f_read+0x25d>
c0005522:	89 d6                	mov    esi,edx
c0005524:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005528:	89 f1                	mov    ecx,esi
c000552a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000552e:	e8 a7 c6 ff ff       	call   c0001bda <mem_cpy>
c0005533:	e9 a7 fe ff ff       	jmp    c00053df <f_read+0x118>
c0005538:	bd 07 00 00 00       	mov    ebp,0x7
c000553d:	83 c4 2c             	add    esp,0x2c
c0005540:	89 e8                	mov    eax,ebp
c0005542:	5b                   	pop    ebx
c0005543:	5e                   	pop    esi
c0005544:	5f                   	pop    edi
c0005545:	5d                   	pop    ebp
c0005546:	c3                   	ret    

c0005547 <f_write>:
c0005547:	55                   	push   ebp
c0005548:	57                   	push   edi
c0005549:	56                   	push   esi
c000554a:	53                   	push   ebx
c000554b:	83 ec 2c             	sub    esp,0x2c
c000554e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005552:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005556:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000555c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005560:	89 d8                	mov    eax,ebx
c0005562:	e8 f7 cc ff ff       	call   c000225e <validate>
c0005567:	89 c5                	mov    ebp,eax
c0005569:	85 c0                	test   eax,eax
c000556b:	0f 85 86 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c0005571:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005575:	85 ed                	test   ebp,ebp
c0005577:	0f 85 7a 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c000557d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005581:	0f 84 6b 02 00 00    	je     c00057f2 <f_write+0x2ab>
c0005587:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000558b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000558e:	0f 84 43 01 00 00    	je     c00056d7 <f_write+0x190>
c0005594:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005597:	89 c1                	mov    ecx,eax
c0005599:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000559d:	0f 83 34 01 00 00    	jae    c00056d7 <f_write+0x190>
c00055a3:	f7 d0                	not    eax
c00055a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055a9:	e9 29 01 00 00       	jmp    c00056d7 <f_write+0x190>
c00055ae:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055b1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055b4:	89 d0                	mov    eax,edx
c00055b6:	25 ff 01 00 00       	and    eax,0x1ff
c00055bb:	0f 85 00 02 00 00    	jne    c00057c1 <f_write+0x27a>
c00055c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c5:	89 d6                	mov    esi,edx
c00055c7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055cb:	89 cf                	mov    edi,ecx
c00055cd:	48                   	dec    eax
c00055ce:	0f ac fe 09          	shrd   esi,edi,0x9
c00055d2:	21 f0                	and    eax,esi
c00055d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055d8:	0f 84 06 01 00 00    	je     c00056e4 <f_write+0x19d>
c00055de:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055e2:	0f 88 6e 01 00 00    	js     c0005756 <f_write+0x20f>
c00055e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ef:	89 c8                	mov    eax,ecx
c00055f1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00055f5:	e8 fa c7 ff ff       	call   c0001df4 <clst2sect>
c00055fa:	89 d1                	mov    ecx,edx
c00055fc:	09 c1                	or     ecx,eax
c00055fe:	0f 84 1c 01 00 00    	je     c0005720 <f_write+0x1d9>
c0005604:	31 ff                	xor    edi,edi
c0005606:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000560a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000560e:	01 c6                	add    esi,eax
c0005610:	11 d7                	adc    edi,edx
c0005612:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000561a:	0f 86 63 01 00 00    	jbe    c0005783 <f_write+0x23c>
c0005620:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005624:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005628:	c1 e8 09             	shr    eax,0x9
c000562b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000562f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005633:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005637:	39 c2                	cmp    edx,eax
c0005639:	76 08                	jbe    c0005643 <f_write+0xfc>
c000563b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000563f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005643:	83 ec 0c             	sub    esp,0xc
c0005646:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000564a:	57                   	push   edi
c000564b:	56                   	push   esi
c000564c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005650:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005654:	50                   	push   eax
c0005655:	e8 cc c4 ff ff       	call   c0001b26 <disk_write>
c000565a:	83 c4 20             	add    esp,0x20
c000565d:	85 c0                	test   eax,eax
c000565f:	0f 85 ce 00 00 00    	jne    c0005733 <f_write+0x1ec>
c0005665:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005668:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000566b:	29 f0                	sub    eax,esi
c000566d:	19 fa                	sbb    edx,edi
c000566f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005673:	89 d7                	mov    edi,edx
c0005675:	ba 00 00 00 00       	mov    edx,0x0
c000567a:	89 f9                	mov    ecx,edi
c000567c:	19 d1                	sbb    ecx,edx
c000567e:	73 1c                	jae    c000569c <f_write+0x155>
c0005680:	89 c7                	mov    edi,eax
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	c1 e7 09             	shl    edi,0x9
c000568a:	8d 43 50             	lea    eax,[ebx+0x50]
c000568d:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005691:	89 fa                	mov    edx,edi
c0005693:	e8 42 c5 ff ff       	call   c0001bda <mem_cpy>
c0005698:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000569c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00056a0:	c1 e6 09             	shl    esi,0x9
c00056a3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056a7:	31 ff                	xor    edi,edi
c00056a9:	01 30                	add    DWORD PTR [eax],esi
c00056ab:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056af:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056b6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056b9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056bc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056bf:	89 c1                	mov    ecx,eax
c00056c1:	39 f2                	cmp    edx,esi
c00056c3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056c6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056c9:	19 f9                	sbb    ecx,edi
c00056cb:	73 04                	jae    c00056d1 <f_write+0x18a>
c00056cd:	89 f2                	mov    edx,esi
c00056cf:	89 f8                	mov    eax,edi
c00056d1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056d4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056d7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056dc:	0f 85 cc fe ff ff    	jne    c00055ae <f_write+0x67>
c00056e2:	eb 2e                	jmp    c0005712 <f_write+0x1cb>
c00056e4:	89 c8                	mov    eax,ecx
c00056e6:	09 d0                	or     eax,edx
c00056e8:	75 0b                	jne    c00056f5 <f_write+0x1ae>
c00056ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ed:	31 d2                	xor    edx,edx
c00056ef:	85 c0                	test   eax,eax
c00056f1:	75 28                	jne    c000571b <f_write+0x1d4>
c00056f3:	eb 12                	jmp    c0005707 <f_write+0x1c0>
c00056f5:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00056f9:	74 09                	je     c0005704 <f_write+0x1bd>
c00056fb:	89 d8                	mov    eax,ebx
c00056fd:	e8 13 c7 ff ff       	call   c0001e15 <clmt_clust>
c0005702:	eb 0a                	jmp    c000570e <f_write+0x1c7>
c0005704:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005707:	89 d8                	mov    eax,ebx
c0005709:	e8 a1 da ff ff       	call   c00031af <create_chain>
c000570e:	85 c0                	test   eax,eax
c0005710:	75 09                	jne    c000571b <f_write+0x1d4>
c0005712:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005716:	e9 dc 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000571b:	83 f8 01             	cmp    eax,0x1
c000571e:	75 0e                	jne    c000572e <f_write+0x1e7>
c0005720:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005724:	bd 02 00 00 00       	mov    ebp,0x2
c0005729:	e9 c9 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000572e:	83 f8 ff             	cmp    eax,0xffffffff
c0005731:	75 0e                	jne    c0005741 <f_write+0x1fa>
c0005733:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005737:	bd 01 00 00 00       	mov    ebp,0x1
c000573c:	e9 b6 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c0005741:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005744:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005748:	0f 85 90 fe ff ff    	jne    c00055de <f_write+0x97>
c000574e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005751:	e9 88 fe ff ff       	jmp    c00055de <f_write+0x97>
c0005756:	83 ec 0c             	sub    esp,0xc
c0005759:	8d 43 50             	lea    eax,[ebx+0x50]
c000575c:	6a 01                	push   0x1
c000575e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005761:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005764:	50                   	push   eax
c0005765:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005769:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000576d:	50                   	push   eax
c000576e:	e8 b3 c3 ff ff       	call   c0001b26 <disk_write>
c0005773:	83 c4 20             	add    esp,0x20
c0005776:	85 c0                	test   eax,eax
c0005778:	75 b9                	jne    c0005733 <f_write+0x1ec>
c000577a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000577e:	e9 65 fe ff ff       	jmp    c00055e8 <f_write+0xa1>
c0005783:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005786:	75 05                	jne    c000578d <f_write+0x246>
c0005788:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000578b:	74 2e                	je     c00057bb <f_write+0x274>
c000578d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005790:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005793:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005796:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005799:	73 20                	jae    c00057bb <f_write+0x274>
c000579b:	83 ec 0c             	sub    esp,0xc
c000579e:	8d 43 50             	lea    eax,[ebx+0x50]
c00057a1:	6a 01                	push   0x1
c00057a3:	57                   	push   edi
c00057a4:	56                   	push   esi
c00057a5:	50                   	push   eax
c00057a6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057aa:	50                   	push   eax
c00057ab:	e8 60 c3 ff ff       	call   c0001b10 <disk_read>
c00057b0:	83 c4 20             	add    esp,0x20
c00057b3:	85 c0                	test   eax,eax
c00057b5:	0f 85 78 ff ff ff    	jne    c0005733 <f_write+0x1ec>
c00057bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057c4:	ba 00 02 00 00       	mov    edx,0x200
c00057c9:	25 ff 01 00 00       	and    eax,0x1ff
c00057ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057d2:	29 c2                	sub    edx,eax
c00057d4:	39 d6                	cmp    esi,edx
c00057d6:	76 02                	jbe    c00057da <f_write+0x293>
c00057d8:	89 d6                	mov    esi,edx
c00057da:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057de:	89 f1                	mov    ecx,esi
c00057e0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057e4:	e8 f1 c3 ff ff       	call   c0001bda <mem_cpy>
c00057e9:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057ed:	e9 b1 fe ff ff       	jmp    c00056a3 <f_write+0x15c>
c00057f2:	bd 07 00 00 00       	mov    ebp,0x7
c00057f7:	83 c4 2c             	add    esp,0x2c
c00057fa:	89 e8                	mov    eax,ebp
c00057fc:	5b                   	pop    ebx
c00057fd:	5e                   	pop    esi
c00057fe:	5f                   	pop    edi
c00057ff:	5d                   	pop    ebp
c0005800:	c3                   	ret    

c0005801 <f_sync>:
c0005801:	56                   	push   esi
c0005802:	53                   	push   ebx
c0005803:	83 ec 64             	sub    esp,0x64
c0005806:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000580a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000580e:	89 d8                	mov    eax,ebx
c0005810:	e8 49 ca ff ff       	call   c000225e <validate>
c0005815:	85 c0                	test   eax,eax
c0005817:	0f 85 ba 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000581d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005820:	f6 c2 40             	test   dl,0x40
c0005823:	0f 84 ae 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c0005829:	84 d2                	test   dl,dl
c000582b:	79 33                	jns    c0005860 <f_sync+0x5f>
c000582d:	83 ec 0c             	sub    esp,0xc
c0005830:	8d 43 50             	lea    eax,[ebx+0x50]
c0005833:	6a 01                	push   0x1
c0005835:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005838:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000583b:	50                   	push   eax
c000583c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005840:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005844:	50                   	push   eax
c0005845:	e8 dc c2 ff ff       	call   c0001b26 <disk_write>
c000584a:	83 c4 20             	add    esp,0x20
c000584d:	89 c2                	mov    edx,eax
c000584f:	b8 01 00 00 00       	mov    eax,0x1
c0005854:	85 d2                	test   edx,edx
c0005856:	0f 85 7b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000585c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005864:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005867:	0f 85 11 01 00 00    	jne    c000597e <f_sync+0x17d>
c000586d:	89 d8                	mov    eax,ebx
c000586f:	e8 13 d6 ff ff       	call   c0002e87 <fill_first_frag>
c0005874:	85 c0                	test   eax,eax
c0005876:	0f 85 5b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000587c:	83 c9 ff             	or     ecx,0xffffffff
c000587f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005882:	89 d8                	mov    eax,ebx
c0005884:	e8 c9 d5 ff ff       	call   c0002e52 <fill_last_frag>
c0005889:	85 c0                	test   eax,eax
c000588b:	0f 85 46 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c0005891:	83 ec 0c             	sub    esp,0xc
c0005894:	68 60 04 00 00       	push   0x460
c0005899:	e8 26 2d 00 00       	call   c00085c4 <ff_memalloc>
c000589e:	83 c4 10             	add    esp,0x10
c00058a1:	89 c6                	mov    esi,eax
c00058a3:	b8 11 00 00 00       	mov    eax,0x11
c00058a8:	85 f6                	test   esi,esi
c00058aa:	0f 84 27 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c00058b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058ba:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058bd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058c0:	89 da                	mov    edx,ebx
c00058c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058c6:	e8 af df ff ff       	call   c000387a <load_obj_xdir>
c00058cb:	85 c0                	test   eax,eax
c00058cd:	0f 85 95 00 00 00    	jne    c0005968 <f_sync+0x167>
c00058d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058d7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058da:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058de:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058e1:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058e4:	83 ca 01             	or     edx,0x1
c00058e7:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058f0:	83 c0 34             	add    eax,0x34
c00058f3:	e8 d9 c2 ff ff       	call   c0001bd1 <st_dword>
c00058f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005902:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005905:	83 c0 38             	add    eax,0x38
c0005908:	e8 c7 c2 ff ff       	call   c0001bd4 <st_qword>
c000590d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005914:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005917:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000591a:	83 c0 28             	add    eax,0x28
c000591d:	e8 b2 c2 ff ff       	call   c0001bd4 <st_qword>
c0005922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005926:	ba 00 00 21 50       	mov    edx,0x50210000
c000592b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000592e:	83 c0 0c             	add    eax,0xc
c0005931:	e8 9b c2 ff ff       	call   c0001bd1 <st_dword>
c0005936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000593a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000593d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005941:	31 d2                	xor    edx,edx
c0005943:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005946:	83 c0 10             	add    eax,0x10
c0005949:	e8 83 c2 ff ff       	call   c0001bd1 <st_dword>
c000594e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005952:	e8 62 e1 ff ff       	call   c0003ab9 <store_xdir>
c0005957:	85 c0                	test   eax,eax
c0005959:	75 0d                	jne    c0005968 <f_sync+0x167>
c000595b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000595f:	e8 00 eb ff ff       	call   c0004464 <sync_fs>
c0005964:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005968:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000596c:	83 ec 0c             	sub    esp,0xc
c000596f:	56                   	push   esi
c0005970:	e8 67 2c 00 00       	call   c00085dc <ff_memfree>
c0005975:	83 c4 10             	add    esp,0x10
c0005978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000597c:	eb 59                	jmp    c00059d7 <f_sync+0x1d6>
c000597e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005981:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005984:	e8 b0 c9 ff ff       	call   c0002339 <move_window>
c0005989:	85 c0                	test   eax,eax
c000598b:	75 4a                	jne    c00059d7 <f_sync+0x1d6>
c000598d:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005990:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005994:	89 f2                	mov    edx,esi
c0005996:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005999:	8b 03                	mov    eax,DWORD PTR [ebx]
c000599b:	e8 5f f3 ff ff       	call   c0004cff <st_clust.isra.1>
c00059a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059a3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00059a6:	e8 26 c2 ff ff       	call   c0001bd1 <st_dword>
c00059ab:	8d 46 16             	lea    eax,[esi+0x16]
c00059ae:	ba 00 00 21 50       	mov    edx,0x50210000
c00059b3:	e8 19 c2 ff ff       	call   c0001bd1 <st_dword>
c00059b8:	8d 46 12             	lea    eax,[esi+0x12]
c00059bb:	31 d2                	xor    edx,edx
c00059bd:	e8 0b c2 ff ff       	call   c0001bcd <st_word>
c00059c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ce:	e8 91 ea ff ff       	call   c0004464 <sync_fs>
c00059d3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059d7:	83 c4 64             	add    esp,0x64
c00059da:	5b                   	pop    ebx
c00059db:	5e                   	pop    esi
c00059dc:	c3                   	ret    

c00059dd <f_close>:
c00059dd:	53                   	push   ebx
c00059de:	83 ec 24             	sub    esp,0x24
c00059e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059e5:	53                   	push   ebx
c00059e6:	e8 16 fe ff ff       	call   c0005801 <f_sync>
c00059eb:	83 c4 10             	add    esp,0x10
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 15                	jne    c0005a07 <f_close+0x2a>
c00059f2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 61 c8 ff ff       	call   c000225e <validate>
c00059fd:	85 c0                	test   eax,eax
c00059ff:	75 06                	jne    c0005a07 <f_close+0x2a>
c0005a01:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005a07:	83 c4 18             	add    esp,0x18
c0005a0a:	5b                   	pop    ebx
c0005a0b:	c3                   	ret    

c0005a0c <f_lseek>:
c0005a0c:	55                   	push   ebp
c0005a0d:	57                   	push   edi
c0005a0e:	56                   	push   esi
c0005a0f:	53                   	push   ebx
c0005a10:	83 ec 3c             	sub    esp,0x3c
c0005a13:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a17:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a1b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a22:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a26:	89 d8                	mov    eax,ebx
c0005a28:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a2c:	e8 2d c8 ff ff       	call   c000225e <validate>
c0005a31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a35:	85 c0                	test   eax,eax
c0005a37:	0f 85 7a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a3d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a45:	85 c0                	test   eax,eax
c0005a47:	0f 85 6a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a51:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a54:	74 0c                	je     c0005a62 <f_lseek+0x56>
c0005a56:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a59:	85 c0                	test   eax,eax
c0005a5b:	75 1f                	jne    c0005a7c <f_lseek+0x70>
c0005a5d:	e9 b5 01 00 00       	jmp    c0005c17 <f_lseek+0x20b>
c0005a62:	83 c9 ff             	or     ecx,0xffffffff
c0005a65:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a68:	89 d8                	mov    eax,ebx
c0005a6a:	e8 e3 d3 ff ff       	call   c0002e52 <fill_last_frag>
c0005a6f:	85 c0                	test   eax,eax
c0005a71:	74 e3                	je     c0005a56 <f_lseek+0x4a>
c0005a73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a77:	e9 3b 04 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005a7c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a81:	0f 85 ac 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a87:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a8b:	0f 85 a2 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a91:	8d 78 04             	lea    edi,[eax+0x4]
c0005a94:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005a97:	8b 00                	mov    eax,DWORD PTR [eax]
c0005a99:	be 02 00 00 00       	mov    esi,0x2
c0005a9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005aa2:	85 ed                	test   ebp,ebp
c0005aa4:	74 73                	je     c0005b19 <f_lseek+0x10d>
c0005aa6:	89 e9                	mov    ecx,ebp
c0005aa8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005aaf:	ff 04 24             	inc    DWORD PTR [esp]
c0005ab2:	89 ca                	mov    edx,ecx
c0005ab4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ab8:	89 d8                	mov    eax,ebx
c0005aba:	e8 02 d4 ff ff       	call   c0002ec1 <get_fat>
c0005abf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac3:	83 f8 01             	cmp    eax,0x1
c0005ac6:	77 11                	ja     c0005ad9 <f_lseek+0xcd>
c0005ac8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005acc:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ad4:	e9 de 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005ad9:	83 f8 ff             	cmp    eax,0xffffffff
c0005adc:	75 11                	jne    c0005aef <f_lseek+0xe3>
c0005ade:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005ae2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005aea:	e9 c8 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005aef:	8d 51 01             	lea    edx,[ecx+0x1]
c0005af2:	89 c1                	mov    ecx,eax
c0005af4:	39 c2                	cmp    edx,eax
c0005af6:	74 b7                	je     c0005aaf <f_lseek+0xa3>
c0005af8:	83 c6 02             	add    esi,0x2
c0005afb:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005aff:	72 0b                	jb     c0005b0c <f_lseek+0x100>
c0005b01:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005b04:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005b07:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b09:	83 c7 08             	add    edi,0x8
c0005b0c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b10:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b13:	76 04                	jbe    c0005b19 <f_lseek+0x10d>
c0005b15:	89 c5                	mov    ebp,eax
c0005b17:	eb 8d                	jmp    c0005aa6 <f_lseek+0x9a>
c0005b19:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b1c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b20:	89 30                	mov    DWORD PTR [eax],esi
c0005b22:	0f 87 87 03 00 00    	ja     c0005eaf <f_lseek+0x4a3>
c0005b28:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b2e:	e9 84 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005b33:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b36:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b45:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b4c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b50:	73 0f                	jae    c0005b61 <f_lseek+0x155>
c0005b52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b55:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b69:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b6c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b73:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b77:	0f 84 3a 03 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005b7d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b81:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b85:	83 c6 ff             	add    esi,0xffffffff
c0005b88:	89 d8                	mov    eax,ebx
c0005b8a:	83 d7 ff             	adc    edi,0xffffffff
c0005b8d:	89 f2                	mov    edx,esi
c0005b8f:	89 f9                	mov    ecx,edi
c0005b91:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005b95:	89 34 24             	mov    DWORD PTR [esp],esi
c0005b98:	e8 78 c2 ff ff       	call   c0001e15 <clmt_clust>
c0005b9d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ba1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ba4:	89 c2                	mov    edx,eax
c0005ba6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005baa:	89 c8                	mov    eax,ecx
c0005bac:	e8 43 c2 ff ff       	call   c0001df4 <clst2sect>
c0005bb1:	89 d7                	mov    edi,edx
c0005bb3:	09 c7                	or     edi,eax
c0005bb5:	0f 84 0d ff ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005bbb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bbf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bc5:	0f 84 ec 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bcb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bcf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bd3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bd6:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bda:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bde:	4d                   	dec    ebp
c0005bdf:	31 ff                	xor    edi,edi
c0005be1:	21 ee                	and    esi,ebp
c0005be3:	01 c6                	add    esi,eax
c0005be5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005be8:	11 d7                	adc    edi,edx
c0005bea:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005bed:	39 fa                	cmp    edx,edi
c0005bef:	75 08                	jne    c0005bf9 <f_lseek+0x1ed>
c0005bf1:	39 f0                	cmp    eax,esi
c0005bf3:	0f 84 be 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bf9:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005bfc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c00:	0f 89 80 02 00 00    	jns    c0005e86 <f_lseek+0x47a>
c0005c06:	83 ec 0c             	sub    esp,0xc
c0005c09:	6a 01                	push   0x1
c0005c0b:	52                   	push   edx
c0005c0c:	50                   	push   eax
c0005c0d:	55                   	push   ebp
c0005c0e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c12:	e9 5a 02 00 00       	jmp    c0005e71 <f_lseek+0x465>
c0005c17:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c1b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c1e:	74 16                	je     c0005c36 <f_lseek+0x22a>
c0005c20:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c25:	76 0f                	jbe    c0005c36 <f_lseek+0x22a>
c0005c27:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c2e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c36:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c39:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c3c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c3f:	89 c7                	mov    edi,eax
c0005c41:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c45:	73 0d                	jae    c0005c54 <f_lseek+0x248>
c0005c47:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c4b:	75 07                	jne    c0005c54 <f_lseek+0x248>
c0005c4d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c54:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c57:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c5a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c5e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c65:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c6c:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c6f:	75 09                	jne    c0005c7a <f_lseek+0x26e>
c0005c71:	31 f6                	xor    esi,esi
c0005c73:	31 ff                	xor    edi,edi
c0005c75:	e9 af 01 00 00       	jmp    c0005e29 <f_lseek+0x41d>
c0005c7a:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c7e:	89 d7                	mov    edi,edx
c0005c80:	c1 e1 09             	shl    ecx,0x9
c0005c83:	09 c7                	or     edi,eax
c0005c85:	89 cd                	mov    ebp,ecx
c0005c87:	74 6d                	je     c0005cf6 <f_lseek+0x2ea>
c0005c89:	83 c0 ff             	add    eax,0xffffffff
c0005c8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c90:	83 d2 ff             	adc    edx,0xffffffff
c0005c93:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c9a:	83 c0 ff             	add    eax,0xffffffff
c0005c9d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ca1:	83 d2 ff             	adc    edx,0xffffffff
c0005ca4:	31 ff                	xor    edi,edi
c0005ca6:	57                   	push   edi
c0005ca7:	51                   	push   ecx
c0005ca8:	52                   	push   edx
c0005ca9:	50                   	push   eax
c0005caa:	e8 f5 b2 01 00       	call   c0020fa4 <__udivdi3>
c0005caf:	83 c4 10             	add    esp,0x10
c0005cb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cb6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cba:	57                   	push   edi
c0005cbb:	55                   	push   ebp
c0005cbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc4:	e8 db b2 01 00       	call   c0020fa4 <__udivdi3>
c0005cc9:	83 c4 10             	add    esp,0x10
c0005ccc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005cd0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005cd4:	19 d1                	sbb    ecx,edx
c0005cd6:	72 1e                	jb     c0005cf6 <f_lseek+0x2ea>
c0005cd8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cdc:	89 e9                	mov    ecx,ebp
c0005cde:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005ce1:	f7 d9                	neg    ecx
c0005ce3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005ce6:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005cea:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ced:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005cf0:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005cf4:	eb 28                	jmp    c0005d1e <f_lseek+0x312>
c0005cf6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005cf9:	85 c0                	test   eax,eax
c0005cfb:	75 1e                	jne    c0005d1b <f_lseek+0x30f>
c0005cfd:	31 d2                	xor    edx,edx
c0005cff:	89 d8                	mov    eax,ebx
c0005d01:	e8 a9 d4 ff ff       	call   c00031af <create_chain>
c0005d06:	83 f8 01             	cmp    eax,0x1
c0005d09:	0f 84 b9 fd ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005d0f:	83 f8 ff             	cmp    eax,0xffffffff
c0005d12:	0f 84 c6 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005d18:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d1b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d1e:	85 c0                	test   eax,eax
c0005d20:	0f 84 4b ff ff ff    	je     c0005c71 <f_lseek+0x265>
c0005d26:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d2a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d32:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d39:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d3c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d3f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d43:	0f 83 9d 00 00 00    	jae    c0005de6 <f_lseek+0x3da>
c0005d49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d4d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d51:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d54:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d58:	01 f2                	add    edx,esi
c0005d5a:	11 f9                	adc    ecx,edi
c0005d5c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d60:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d64:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d67:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d6a:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d6d:	f6 c1 02             	test   cl,0x2
c0005d70:	74 35                	je     c0005da7 <f_lseek+0x39b>
c0005d72:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d76:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d79:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d7c:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d80:	73 16                	jae    c0005d98 <f_lseek+0x38c>
c0005d82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d86:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d8a:	88 ca                	mov    dl,cl
c0005d8c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d8f:	83 ca 40             	or     edx,0x40
c0005d92:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005d95:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005d98:	89 c2                	mov    edx,eax
c0005d9a:	89 d8                	mov    eax,ebx
c0005d9c:	e8 0e d4 ff ff       	call   c00031af <create_chain>
c0005da1:	85 c0                	test   eax,eax
c0005da3:	75 0b                	jne    c0005db0 <f_lseek+0x3a4>
c0005da5:	eb 30                	jmp    c0005dd7 <f_lseek+0x3cb>
c0005da7:	89 c2                	mov    edx,eax
c0005da9:	89 d8                	mov    eax,ebx
c0005dab:	e8 11 d1 ff ff       	call   c0002ec1 <get_fat>
c0005db0:	83 f8 ff             	cmp    eax,0xffffffff
c0005db3:	0f 84 25 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005db9:	83 f8 01             	cmp    eax,0x1
c0005dbc:	0f 86 06 fd ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dc2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dc6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dc9:	0f 86 f9 fc ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dcf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dd2:	e9 5b ff ff ff       	jmp    c0005d32 <f_lseek+0x326>
c0005dd7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dde:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005de6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005de9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ded:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005df0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005df3:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005df6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005dfc:	0f 84 6f fe ff ff    	je     c0005c71 <f_lseek+0x265>
c0005e02:	89 c2                	mov    edx,eax
c0005e04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e08:	e8 e7 bf ff ff       	call   c0001df4 <clst2sect>
c0005e0d:	89 d7                	mov    edi,edx
c0005e0f:	09 c7                	or     edi,eax
c0005e11:	0f 84 b1 fc ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005e17:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e1b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e1e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e22:	c1 ef 09             	shr    edi,0x9
c0005e25:	01 c6                	add    esi,eax
c0005e27:	11 d7                	adc    edi,edx
c0005e29:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e2c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e2f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e32:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e35:	19 d1                	sbb    ecx,edx
c0005e37:	73 0a                	jae    c0005e43 <f_lseek+0x437>
c0005e39:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e3c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e3f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e43:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e48:	74 6d                	je     c0005eb7 <f_lseek+0x4ab>
c0005e4a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e4d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e50:	39 fa                	cmp    edx,edi
c0005e52:	75 04                	jne    c0005e58 <f_lseek+0x44c>
c0005e54:	39 f0                	cmp    eax,esi
c0005e56:	74 5f                	je     c0005eb7 <f_lseek+0x4ab>
c0005e58:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e5b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e5f:	79 25                	jns    c0005e86 <f_lseek+0x47a>
c0005e61:	83 ec 0c             	sub    esp,0xc
c0005e64:	6a 01                	push   0x1
c0005e66:	52                   	push   edx
c0005e67:	50                   	push   eax
c0005e68:	55                   	push   ebp
c0005e69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e6d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e71:	50                   	push   eax
c0005e72:	e8 af bc ff ff       	call   c0001b26 <disk_write>
c0005e77:	83 c4 20             	add    esp,0x20
c0005e7a:	85 c0                	test   eax,eax
c0005e7c:	0f 85 5c fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005e82:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e86:	83 ec 0c             	sub    esp,0xc
c0005e89:	6a 01                	push   0x1
c0005e8b:	57                   	push   edi
c0005e8c:	56                   	push   esi
c0005e8d:	55                   	push   ebp
c0005e8e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e92:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e96:	50                   	push   eax
c0005e97:	e8 74 bc ff ff       	call   c0001b10 <disk_read>
c0005e9c:	83 c4 20             	add    esp,0x20
c0005e9f:	85 c0                	test   eax,eax
c0005ea1:	0f 85 37 fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005ea7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005eaa:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ead:	eb 08                	jmp    c0005eb7 <f_lseek+0x4ab>
c0005eaf:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005eb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ebb:	83 c4 3c             	add    esp,0x3c
c0005ebe:	5b                   	pop    ebx
c0005ebf:	5e                   	pop    esi
c0005ec0:	5f                   	pop    edi
c0005ec1:	5d                   	pop    ebp
c0005ec2:	c3                   	ret    

c0005ec3 <f_opendir>:
c0005ec3:	56                   	push   esi
c0005ec4:	b8 09 00 00 00       	mov    eax,0x9
c0005ec9:	53                   	push   ebx
c0005eca:	83 ec 24             	sub    esp,0x24
c0005ecd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ed1:	85 db                	test   ebx,ebx
c0005ed3:	0f 84 e6 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005ed9:	31 c9                	xor    ecx,ecx
c0005edb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005edf:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ee3:	e8 03 c7 ff ff       	call   c00025eb <mount_volume>
c0005ee8:	85 c0                	test   eax,eax
c0005eea:	0f 85 c9 00 00 00    	jne    c0005fb9 <f_opendir+0xf6>
c0005ef0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ef4:	83 ec 0c             	sub    esp,0xc
c0005ef7:	89 03                	mov    DWORD PTR [ebx],eax
c0005ef9:	68 60 04 00 00       	push   0x460
c0005efe:	e8 c1 26 00 00       	call   c00085c4 <ff_memalloc>
c0005f03:	83 c4 10             	add    esp,0x10
c0005f06:	89 c6                	mov    esi,eax
c0005f08:	b8 11 00 00 00       	mov    eax,0x11
c0005f0d:	85 f6                	test   esi,esi
c0005f0f:	0f 84 aa 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f19:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f1f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f22:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f25:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f29:	89 d8                	mov    eax,ebx
c0005f2b:	e8 31 ee ff ff       	call   c0004d61 <follow_path>
c0005f30:	85 c0                	test   eax,eax
c0005f32:	75 61                	jne    c0005f95 <f_opendir+0xd2>
c0005f34:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f38:	78 46                	js     c0005f80 <f_opendir+0xbd>
c0005f3a:	b8 05 00 00 00       	mov    eax,0x5
c0005f3f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f43:	74 50                	je     c0005f95 <f_opendir+0xd2>
c0005f45:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f49:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f4b:	3c 04                	cmp    al,0x4
c0005f4d:	75 26                	jne    c0005f75 <f_opendir+0xb2>
c0005f4f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f52:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f55:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f58:	30 d2                	xor    dl,dl
c0005f5a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f5e:	09 c2                	or     edx,eax
c0005f60:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f63:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f66:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f69:	89 da                	mov    edx,ebx
c0005f6b:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f6e:	e8 b4 ed ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005f73:	eb 0b                	jmp    c0005f80 <f_opendir+0xbd>
c0005f75:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f78:	e8 59 ed ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0005f7d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f84:	31 d2                	xor    edx,edx
c0005f86:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f8a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f8e:	89 d8                	mov    eax,ebx
c0005f90:	e8 22 d1 ff ff       	call   c00030b7 <dir_sdi>
c0005f95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f99:	83 ec 0c             	sub    esp,0xc
c0005f9c:	56                   	push   esi
c0005f9d:	e8 3a 26 00 00       	call   c00085dc <ff_memfree>
c0005fa2:	83 c4 10             	add    esp,0x10
c0005fa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fa9:	83 f8 04             	cmp    eax,0x4
c0005fac:	74 06                	je     c0005fb4 <f_opendir+0xf1>
c0005fae:	85 c0                	test   eax,eax
c0005fb0:	74 0d                	je     c0005fbf <f_opendir+0xfc>
c0005fb2:	eb 05                	jmp    c0005fb9 <f_opendir+0xf6>
c0005fb4:	b8 05 00 00 00       	mov    eax,0x5
c0005fb9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fbf:	83 c4 24             	add    esp,0x24
c0005fc2:	5b                   	pop    ebx
c0005fc3:	5e                   	pop    esi
c0005fc4:	c3                   	ret    

c0005fc5 <f_closedir>:
c0005fc5:	53                   	push   ebx
c0005fc6:	83 ec 18             	sub    esp,0x18
c0005fc9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fcd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fd1:	89 d8                	mov    eax,ebx
c0005fd3:	e8 86 c2 ff ff       	call   c000225e <validate>
c0005fd8:	85 c0                	test   eax,eax
c0005fda:	75 06                	jne    c0005fe2 <f_closedir+0x1d>
c0005fdc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fe2:	83 c4 18             	add    esp,0x18
c0005fe5:	5b                   	pop    ebx
c0005fe6:	c3                   	ret    

c0005fe7 <f_readdir>:
c0005fe7:	57                   	push   edi
c0005fe8:	56                   	push   esi
c0005fe9:	53                   	push   ebx
c0005fea:	83 ec 20             	sub    esp,0x20
c0005fed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ff1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ff5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ff9:	89 d8                	mov    eax,ebx
c0005ffb:	e8 5e c2 ff ff       	call   c000225e <validate>
c0006000:	85 c0                	test   eax,eax
c0006002:	75 77                	jne    c000607b <f_readdir+0x94>
c0006004:	85 ff                	test   edi,edi
c0006006:	75 0b                	jne    c0006013 <f_readdir+0x2c>
c0006008:	31 d2                	xor    edx,edx
c000600a:	89 d8                	mov    eax,ebx
c000600c:	e8 a6 d0 ff ff       	call   c00030b7 <dir_sdi>
c0006011:	eb 68                	jmp    c000607b <f_readdir+0x94>
c0006013:	83 ec 0c             	sub    esp,0xc
c0006016:	68 60 04 00 00       	push   0x460
c000601b:	e8 a4 25 00 00       	call   c00085c4 <ff_memalloc>
c0006020:	83 c4 10             	add    esp,0x10
c0006023:	89 c6                	mov    esi,eax
c0006025:	b8 11 00 00 00       	mov    eax,0x11
c000602a:	85 f6                	test   esi,esi
c000602c:	74 4d                	je     c000607b <f_readdir+0x94>
c000602e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006032:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006038:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000603b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000603e:	31 d2                	xor    edx,edx
c0006040:	89 d8                	mov    eax,ebx
c0006042:	e8 80 d8 ff ff       	call   c00038c7 <dir_read>
c0006047:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000604c:	75 19                	jne    c0006067 <f_readdir+0x80>
c000604e:	89 fa                	mov    edx,edi
c0006050:	89 d8                	mov    eax,ebx
c0006052:	e8 7e ea ff ff       	call   c0004ad5 <get_fileinfo>
c0006057:	31 d2                	xor    edx,edx
c0006059:	89 d8                	mov    eax,ebx
c000605b:	e8 af d5 ff ff       	call   c000360f <dir_next>
c0006060:	83 f8 04             	cmp    eax,0x4
c0006063:	75 02                	jne    c0006067 <f_readdir+0x80>
c0006065:	31 c0                	xor    eax,eax
c0006067:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000606b:	83 ec 0c             	sub    esp,0xc
c000606e:	56                   	push   esi
c000606f:	e8 68 25 00 00       	call   c00085dc <ff_memfree>
c0006074:	83 c4 10             	add    esp,0x10
c0006077:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000607b:	83 c4 20             	add    esp,0x20
c000607e:	5b                   	pop    ebx
c000607f:	5e                   	pop    esi
c0006080:	5f                   	pop    edi
c0006081:	c3                   	ret    

c0006082 <f_stat>:
c0006082:	57                   	push   edi
c0006083:	31 c9                	xor    ecx,ecx
c0006085:	56                   	push   esi
c0006086:	53                   	push   ebx
c0006087:	83 ec 50             	sub    esp,0x50
c000608a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000608e:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006092:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006096:	e8 50 c5 ff ff       	call   c00025eb <mount_volume>
c000609b:	89 c3                	mov    ebx,eax
c000609d:	85 c0                	test   eax,eax
c000609f:	75 67                	jne    c0006108 <f_stat+0x86>
c00060a1:	83 ec 0c             	sub    esp,0xc
c00060a4:	bb 11 00 00 00       	mov    ebx,0x11
c00060a9:	68 60 04 00 00       	push   0x460
c00060ae:	e8 11 25 00 00       	call   c00085c4 <ff_memalloc>
c00060b3:	83 c4 10             	add    esp,0x10
c00060b6:	89 c6                	mov    esi,eax
c00060b8:	85 c0                	test   eax,eax
c00060ba:	74 4c                	je     c0006108 <f_stat+0x86>
c00060bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060c0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060c6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060c9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060cc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060d0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060d4:	e8 88 ec ff ff       	call   c0004d61 <follow_path>
c00060d9:	89 c3                	mov    ebx,eax
c00060db:	85 c0                	test   eax,eax
c00060dd:	75 1d                	jne    c00060fc <f_stat+0x7a>
c00060df:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060e4:	78 11                	js     c00060f7 <f_stat+0x75>
c00060e6:	85 ff                	test   edi,edi
c00060e8:	74 12                	je     c00060fc <f_stat+0x7a>
c00060ea:	89 fa                	mov    edx,edi
c00060ec:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060f0:	e8 e0 e9 ff ff       	call   c0004ad5 <get_fileinfo>
c00060f5:	eb 05                	jmp    c00060fc <f_stat+0x7a>
c00060f7:	bb 06 00 00 00       	mov    ebx,0x6
c00060fc:	83 ec 0c             	sub    esp,0xc
c00060ff:	56                   	push   esi
c0006100:	e8 d7 24 00 00       	call   c00085dc <ff_memfree>
c0006105:	83 c4 10             	add    esp,0x10
c0006108:	83 c4 50             	add    esp,0x50
c000610b:	89 d8                	mov    eax,ebx
c000610d:	5b                   	pop    ebx
c000610e:	5e                   	pop    esi
c000610f:	5f                   	pop    edi
c0006110:	c3                   	ret    

c0006111 <f_getfree>:
c0006111:	55                   	push   ebp
c0006112:	31 c9                	xor    ecx,ecx
c0006114:	57                   	push   edi
c0006115:	56                   	push   esi
c0006116:	53                   	push   ebx
c0006117:	83 ec 5c             	sub    esp,0x5c
c000611a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000611e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006122:	e8 c4 c4 ff ff       	call   c00025eb <mount_volume>
c0006127:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000612b:	85 c0                	test   eax,eax
c000612d:	0f 85 9d 01 00 00    	jne    c00062d0 <f_getfree+0x1bf>
c0006133:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006137:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000613b:	89 02                	mov    DWORD PTR [edx],eax
c000613d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006140:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006143:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006146:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000614a:	39 f2                	cmp    edx,esi
c000614c:	77 0b                	ja     c0006159 <f_getfree+0x48>
c000614e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006152:	89 10                	mov    DWORD PTR [eax],edx
c0006154:	e9 77 01 00 00       	jmp    c00062d0 <f_getfree+0x1bf>
c0006159:	8a 10                	mov    dl,BYTE PTR [eax]
c000615b:	80 fa 01             	cmp    dl,0x1
c000615e:	75 3a                	jne    c000619a <f_getfree+0x89>
c0006160:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006164:	be 02 00 00 00       	mov    esi,0x2
c0006169:	31 db                	xor    ebx,ebx
c000616b:	89 f2                	mov    edx,esi
c000616d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006171:	e8 4b cd ff ff       	call   c0002ec1 <get_fat>
c0006176:	83 f8 ff             	cmp    eax,0xffffffff
c0006179:	0f 84 28 01 00 00    	je     c00062a7 <f_getfree+0x196>
c000617f:	83 f8 01             	cmp    eax,0x1
c0006182:	0f 84 29 01 00 00    	je     c00062b1 <f_getfree+0x1a0>
c0006188:	83 d3 00             	adc    ebx,0x0
c000618b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000618f:	46                   	inc    esi
c0006190:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006193:	77 d6                	ja     c000616b <f_getfree+0x5a>
c0006195:	e9 25 01 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000619a:	80 fa 04             	cmp    dl,0x4
c000619d:	0f 85 88 00 00 00    	jne    c000622b <f_getfree+0x11a>
c00061a3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00061a6:	31 ed                	xor    ebp,ebp
c00061a8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061ab:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061b3:	31 db                	xor    ebx,ebx
c00061b5:	85 ed                	test   ebp,ebp
c00061b7:	75 3f                	jne    c00061f8 <f_getfree+0xe7>
c00061b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061c1:	83 c0 01             	add    eax,0x1
c00061c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061c8:	83 d2 00             	adc    edx,0x0
c00061cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061db:	e8 59 c1 ff ff       	call   c0002339 <move_window>
c00061e0:	85 c0                	test   eax,eax
c00061e2:	0f 85 d3 00 00 00    	jne    c00062bb <f_getfree+0x1aa>
c00061e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00061f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061fc:	8d 4e f8             	lea    ecx,[esi-0x8]
c00061ff:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006203:	89 cf                	mov    edi,ecx
c0006205:	85 f6                	test   esi,esi
c0006207:	74 12                	je     c000621b <f_getfree+0x10a>
c0006209:	88 c1                	mov    cl,al
c000620b:	83 e1 01             	and    ecx,0x1
c000620e:	80 f9 01             	cmp    cl,0x1
c0006211:	83 d3 00             	adc    ebx,0x0
c0006214:	d0 e8                	shr    al,1
c0006216:	4e                   	dec    esi
c0006217:	39 fe                	cmp    esi,edi
c0006219:	75 ea                	jne    c0006205 <f_getfree+0xf4>
c000621b:	45                   	inc    ebp
c000621c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006222:	85 f6                	test   esi,esi
c0006224:	75 8f                	jne    c00061b5 <f_getfree+0xa4>
c0006226:	e9 94 00 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000622b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000622e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006231:	31 f6                	xor    esi,esi
c0006233:	31 db                	xor    ebx,ebx
c0006235:	85 f6                	test   esi,esi
c0006237:	75 1b                	jne    c0006254 <f_getfree+0x143>
c0006239:	89 d7                	mov    edi,edx
c000623b:	89 cd                	mov    ebp,ecx
c000623d:	83 c7 01             	add    edi,0x1
c0006240:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006244:	83 d5 00             	adc    ebp,0x0
c0006247:	e8 ed c0 ff ff       	call   c0002339 <move_window>
c000624c:	85 c0                	test   eax,eax
c000624e:	75 6b                	jne    c00062bb <f_getfree+0x1aa>
c0006250:	89 fa                	mov    edx,edi
c0006252:	89 e9                	mov    ecx,ebp
c0006254:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006258:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000625c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006260:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006263:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006267:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000626b:	75 11                	jne    c000627e <f_getfree+0x16d>
c000626d:	e8 e9 b8 ff ff       	call   c0001b5b <ld_word>
c0006272:	66 83 f8 01          	cmp    ax,0x1
c0006276:	83 d3 00             	adc    ebx,0x0
c0006279:	83 c6 02             	add    esi,0x2
c000627c:	eb 13                	jmp    c0006291 <f_getfree+0x180>
c000627e:	e8 e5 b8 ff ff       	call   c0001b68 <ld_dword>
c0006283:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006288:	83 f8 01             	cmp    eax,0x1
c000628b:	83 d3 00             	adc    ebx,0x0
c000628e:	83 c6 04             	add    esi,0x4
c0006291:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006297:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000629b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000629f:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00062a3:	75 90                	jne    c0006235 <f_getfree+0x124>
c00062a5:	eb 18                	jmp    c00062bf <f_getfree+0x1ae>
c00062a7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062af:	eb 0e                	jmp    c00062bf <f_getfree+0x1ae>
c00062b1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062b9:	eb 04                	jmp    c00062bf <f_getfree+0x1ae>
c00062bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062bf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062c3:	89 18                	mov    DWORD PTR [eax],ebx
c00062c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c9:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062cc:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062d4:	83 c4 5c             	add    esp,0x5c
c00062d7:	5b                   	pop    ebx
c00062d8:	5e                   	pop    esi
c00062d9:	5f                   	pop    edi
c00062da:	5d                   	pop    ebp
c00062db:	c3                   	ret    

c00062dc <f_truncate>:
c00062dc:	56                   	push   esi
c00062dd:	53                   	push   ebx
c00062de:	83 ec 14             	sub    esp,0x14
c00062e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062e9:	89 d8                	mov    eax,ebx
c00062eb:	e8 6e bf ff ff       	call   c000225e <validate>
c00062f0:	89 c6                	mov    esi,eax
c00062f2:	85 c0                	test   eax,eax
c00062f4:	0f 85 d2 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c00062fa:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00062fe:	85 f6                	test   esi,esi
c0006300:	0f 85 c6 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c0006306:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000630a:	0f 84 b7 00 00 00    	je     c00063c7 <f_truncate+0xeb>
c0006310:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006313:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006316:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006319:	89 d1                	mov    ecx,edx
c000631b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000631e:	0f 83 a8 00 00 00    	jae    c00063cc <f_truncate+0xf0>
c0006324:	09 c2                	or     edx,eax
c0006326:	75 15                	jne    c000633d <f_truncate+0x61>
c0006328:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000632b:	31 c9                	xor    ecx,ecx
c000632d:	89 d8                	mov    eax,ebx
c000632f:	e8 7a d0 ff ff       	call   c00033ae <remove_chain>
c0006334:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000633b:	eb 35                	jmp    c0006372 <f_truncate+0x96>
c000633d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006340:	89 d8                	mov    eax,ebx
c0006342:	e8 7a cb ff ff       	call   c0002ec1 <get_fat>
c0006347:	89 c2                	mov    edx,eax
c0006349:	b8 01 00 00 00       	mov    eax,0x1
c000634e:	83 fa ff             	cmp    edx,0xffffffff
c0006351:	74 1f                	je     c0006372 <f_truncate+0x96>
c0006353:	b8 02 00 00 00       	mov    eax,0x2
c0006358:	83 fa 01             	cmp    edx,0x1
c000635b:	74 15                	je     c0006372 <f_truncate+0x96>
c000635d:	31 c0                	xor    eax,eax
c000635f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006363:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006366:	76 0a                	jbe    c0006372 <f_truncate+0x96>
c0006368:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000636b:	89 d8                	mov    eax,ebx
c000636d:	e8 3c d0 ff ff       	call   c00033ae <remove_chain>
c0006372:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006375:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006378:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000637b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000637e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006381:	83 ca 40             	or     edx,0x40
c0006384:	85 c0                	test   eax,eax
c0006386:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006389:	75 35                	jne    c00063c0 <f_truncate+0xe4>
c000638b:	84 d2                	test   dl,dl
c000638d:	79 3d                	jns    c00063cc <f_truncate+0xf0>
c000638f:	83 ec 0c             	sub    esp,0xc
c0006392:	8d 43 50             	lea    eax,[ebx+0x50]
c0006395:	6a 01                	push   0x1
c0006397:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000639a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000639d:	50                   	push   eax
c000639e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00063a2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00063a6:	50                   	push   eax
c00063a7:	e8 7a b7 ff ff       	call   c0001b26 <disk_write>
c00063ac:	83 c4 20             	add    esp,0x20
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 08                	jne    c00063bb <f_truncate+0xdf>
c00063b3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063b7:	31 f6                	xor    esi,esi
c00063b9:	eb 11                	jmp    c00063cc <f_truncate+0xf0>
c00063bb:	b8 01 00 00 00       	mov    eax,0x1
c00063c0:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063c3:	89 c6                	mov    esi,eax
c00063c5:	eb 05                	jmp    c00063cc <f_truncate+0xf0>
c00063c7:	be 07 00 00 00       	mov    esi,0x7
c00063cc:	89 f0                	mov    eax,esi
c00063ce:	83 c4 14             	add    esp,0x14
c00063d1:	5b                   	pop    ebx
c00063d2:	5e                   	pop    esi
c00063d3:	c3                   	ret    

c00063d4 <f_unlink>:
c00063d4:	56                   	push   esi
c00063d5:	b9 02 00 00 00       	mov    ecx,0x2
c00063da:	53                   	push   ebx
c00063db:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063e1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063e5:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063ec:	e8 fa c1 ff ff       	call   c00025eb <mount_volume>
c00063f1:	85 c0                	test   eax,eax
c00063f3:	0f 85 55 01 00 00    	jne    c000654e <f_unlink+0x17a>
c00063f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063fd:	83 ec 0c             	sub    esp,0xc
c0006400:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006404:	68 60 04 00 00       	push   0x460
c0006409:	e8 b6 21 00 00       	call   c00085c4 <ff_memalloc>
c000640e:	83 c4 10             	add    esp,0x10
c0006411:	89 c3                	mov    ebx,eax
c0006413:	b8 11 00 00 00       	mov    eax,0x11
c0006418:	85 db                	test   ebx,ebx
c000641a:	0f 84 2e 01 00 00    	je     c000654e <f_unlink+0x17a>
c0006420:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006424:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000642a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000642d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006430:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006437:	8d 44 24 48          	lea    eax,[esp+0x48]
c000643b:	e8 21 e9 ff ff       	call   c0004d61 <follow_path>
c0006440:	85 c0                	test   eax,eax
c0006442:	0f 85 f2 00 00 00    	jne    c000653a <f_unlink+0x166>
c0006448:	b8 06 00 00 00       	mov    eax,0x6
c000644d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006455:	0f 88 df 00 00 00    	js     c000653a <f_unlink+0x166>
c000645b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006460:	74 0a                	je     c000646c <f_unlink+0x98>
c0006462:	b8 07 00 00 00       	mov    eax,0x7
c0006467:	e9 ce 00 00 00       	jmp    c000653a <f_unlink+0x166>
c000646c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006470:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006474:	8a 02                	mov    al,BYTE PTR [edx]
c0006476:	3c 04                	cmp    al,0x4
c0006478:	75 12                	jne    c000648c <f_unlink+0xb8>
c000647a:	8d 42 10             	lea    eax,[edx+0x10]
c000647d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006481:	e8 a1 e8 ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0006486:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000648a:	eb 0e                	jmp    c000649a <f_unlink+0xc6>
c000648c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006493:	e8 3e e8 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0006498:	89 c6                	mov    esi,eax
c000649a:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000649f:	75 12                	jne    c00064b3 <f_unlink+0xdf>
c00064a1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00064a5:	e8 94 d6 ff ff       	call   c0003b3e <dir_remove>
c00064aa:	85 c0                	test   eax,eax
c00064ac:	74 6c                	je     c000651a <f_unlink+0x146>
c00064ae:	e9 87 00 00 00       	jmp    c000653a <f_unlink+0x166>
c00064b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064b7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064be:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064c5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064c8:	75 21                	jne    c00064eb <f_unlink+0x117>
c00064ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064d2:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064d9:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064e0:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064e4:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064eb:	31 d2                	xor    edx,edx
c00064ed:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064f4:	e8 be cb ff ff       	call   c00030b7 <dir_sdi>
c00064f9:	85 c0                	test   eax,eax
c00064fb:	75 3d                	jne    c000653a <f_unlink+0x166>
c00064fd:	31 d2                	xor    edx,edx
c00064ff:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006506:	e8 bc d3 ff ff       	call   c00038c7 <dir_read>
c000650b:	85 c0                	test   eax,eax
c000650d:	0f 84 4f ff ff ff    	je     c0006462 <f_unlink+0x8e>
c0006513:	83 f8 04             	cmp    eax,0x4
c0006516:	75 22                	jne    c000653a <f_unlink+0x166>
c0006518:	eb 87                	jmp    c00064a1 <f_unlink+0xcd>
c000651a:	85 f6                	test   esi,esi
c000651c:	75 0b                	jne    c0006529 <f_unlink+0x155>
c000651e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006522:	e8 3d df ff ff       	call   c0004464 <sync_fs>
c0006527:	eb 11                	jmp    c000653a <f_unlink+0x166>
c0006529:	31 c9                	xor    ecx,ecx
c000652b:	89 f2                	mov    edx,esi
c000652d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006531:	e8 78 ce ff ff       	call   c00033ae <remove_chain>
c0006536:	85 c0                	test   eax,eax
c0006538:	74 e4                	je     c000651e <f_unlink+0x14a>
c000653a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000653e:	83 ec 0c             	sub    esp,0xc
c0006541:	53                   	push   ebx
c0006542:	e8 95 20 00 00       	call   c00085dc <ff_memfree>
c0006547:	83 c4 10             	add    esp,0x10
c000654a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000654e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006554:	5b                   	pop    ebx
c0006555:	5e                   	pop    esi
c0006556:	c3                   	ret    

c0006557 <f_mkdir>:
c0006557:	57                   	push   edi
c0006558:	b9 02 00 00 00       	mov    ecx,0x2
c000655d:	56                   	push   esi
c000655e:	53                   	push   ebx
c000655f:	83 c4 80             	add    esp,0xffffff80
c0006562:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006566:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000656d:	e8 79 c0 ff ff       	call   c00025eb <mount_volume>
c0006572:	89 c3                	mov    ebx,eax
c0006574:	85 c0                	test   eax,eax
c0006576:	0f 85 fe 01 00 00    	jne    c000677a <f_mkdir+0x223>
c000657c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006580:	bb 11 00 00 00       	mov    ebx,0x11
c0006585:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006589:	83 ec 0c             	sub    esp,0xc
c000658c:	68 60 04 00 00       	push   0x460
c0006591:	e8 2e 20 00 00       	call   c00085c4 <ff_memalloc>
c0006596:	83 c4 10             	add    esp,0x10
c0006599:	89 c7                	mov    edi,eax
c000659b:	85 c0                	test   eax,eax
c000659d:	0f 84 d7 01 00 00    	je     c000677a <f_mkdir+0x223>
c00065a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065ad:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065b0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065b3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065ba:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065be:	e8 9e e7 ff ff       	call   c0004d61 <follow_path>
c00065c3:	89 c3                	mov    ebx,eax
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 3e                	je     c0006607 <f_mkdir+0xb0>
c00065c9:	83 f8 04             	cmp    eax,0x4
c00065cc:	75 3e                	jne    c000660c <f_mkdir+0xb5>
c00065ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d2:	31 d2                	xor    edx,edx
c00065d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065dc:	e8 ce cb ff ff       	call   c00031af <create_chain>
c00065e1:	89 c6                	mov    esi,eax
c00065e3:	85 c0                	test   eax,eax
c00065e5:	74 0c                	je     c00065f3 <f_mkdir+0x9c>
c00065e7:	bb 02 00 00 00       	mov    ebx,0x2
c00065ec:	83 f8 01             	cmp    eax,0x1
c00065ef:	74 07                	je     c00065f8 <f_mkdir+0xa1>
c00065f1:	eb 2a                	jmp    c000661d <f_mkdir+0xc6>
c00065f3:	bb 07 00 00 00       	mov    ebx,0x7
c00065f8:	31 c9                	xor    ecx,ecx
c00065fa:	89 f2                	mov    edx,esi
c00065fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006600:	e8 a9 cd ff ff       	call   c00033ae <remove_chain>
c0006605:	eb 05                	jmp    c000660c <f_mkdir+0xb5>
c0006607:	bb 08 00 00 00       	mov    ebx,0x8
c000660c:	83 ec 0c             	sub    esp,0xc
c000660f:	57                   	push   edi
c0006610:	e8 c7 1f 00 00       	call   c00085dc <ff_memfree>
c0006615:	83 c4 10             	add    esp,0x10
c0006618:	e9 5d 01 00 00       	jmp    c000677a <f_mkdir+0x223>
c000661d:	bb 01 00 00 00       	mov    ebx,0x1
c0006622:	83 f8 ff             	cmp    eax,0xffffffff
c0006625:	74 d1                	je     c00065f8 <f_mkdir+0xa1>
c0006627:	89 f2                	mov    edx,esi
c0006629:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000662d:	e8 c4 ce ff ff       	call   c00034f6 <dir_clear>
c0006632:	89 c3                	mov    ebx,eax
c0006634:	85 c0                	test   eax,eax
c0006636:	75 c0                	jne    c00065f8 <f_mkdir+0xa1>
c0006638:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000663f:	74 69                	je     c00066aa <f_mkdir+0x153>
c0006641:	b9 0b 00 00 00       	mov    ecx,0xb
c0006646:	83 c0 54             	add    eax,0x54
c0006649:	ba 20 00 00 00       	mov    edx,0x20
c000664e:	e8 9c b5 ff ff       	call   c0001bef <mem_set>
c0006653:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006657:	ba 00 00 21 50       	mov    edx,0x50210000
c000665c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006660:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006664:	83 c0 6a             	add    eax,0x6a
c0006667:	e8 65 b5 ff ff       	call   c0001bd1 <st_dword>
c000666c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006670:	89 f1                	mov    ecx,esi
c0006672:	8d 50 54             	lea    edx,[eax+0x54]
c0006675:	e8 85 e6 ff ff       	call   c0004cff <st_clust.isra.1>
c000667a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000667e:	b9 20 00 00 00       	mov    ecx,0x20
c0006683:	8d 50 54             	lea    edx,[eax+0x54]
c0006686:	83 c0 74             	add    eax,0x74
c0006689:	e8 4c b5 ff ff       	call   c0001bda <mem_cpy>
c000668e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006692:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006696:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000669a:	8d 50 74             	lea    edx,[eax+0x74]
c000669d:	e8 5d e6 ff ff       	call   c0004cff <st_clust.isra.1>
c00066a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066a6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066aa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066ae:	e8 2f db ff ff       	call   c00041e2 <dir_register>
c00066b3:	89 c3                	mov    ebx,eax
c00066b5:	85 c0                	test   eax,eax
c00066b7:	0f 85 3b ff ff ff    	jne    c00065f8 <f_mkdir+0xa1>
c00066bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066c1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c4:	75 74                	jne    c000673a <f_mkdir+0x1e3>
c00066c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c9:	ba 00 00 21 50       	mov    edx,0x50210000
c00066ce:	83 c0 0c             	add    eax,0xc
c00066d1:	e8 fb b4 ff ff       	call   c0001bd1 <st_dword>
c00066d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066da:	89 f2                	mov    edx,esi
c00066dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066df:	83 c0 34             	add    eax,0x34
c00066e2:	e8 ea b4 ff ff       	call   c0001bd1 <st_dword>
c00066e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066eb:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066f2:	c1 e2 09             	shl    edx,0x9
c00066f5:	83 c0 38             	add    eax,0x38
c00066f8:	e8 d4 b4 ff ff       	call   c0001bd1 <st_dword>
c00066fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006701:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006705:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006708:	c1 e2 09             	shl    edx,0x9
c000670b:	83 c0 28             	add    eax,0x28
c000670e:	e8 be b4 ff ff       	call   c0001bd1 <st_dword>
c0006713:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006717:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000671e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006721:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006725:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006729:	e8 8b d3 ff ff       	call   c0003ab9 <store_xdir>
c000672e:	89 c3                	mov    ebx,eax
c0006730:	85 c0                	test   eax,eax
c0006732:	0f 85 d4 fe ff ff    	jne    c000660c <f_mkdir+0xb5>
c0006738:	eb 30                	jmp    c000676a <f_mkdir+0x213>
c000673a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000673e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006743:	83 c0 16             	add    eax,0x16
c0006746:	e8 86 b4 ff ff       	call   c0001bd1 <st_dword>
c000674b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674f:	89 f1                	mov    ecx,esi
c0006751:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006755:	e8 a5 e5 ff ff       	call   c0004cff <st_clust.isra.1>
c000675a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000675e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000676a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000676e:	e8 f1 dc ff ff       	call   c0004464 <sync_fs>
c0006773:	89 c3                	mov    ebx,eax
c0006775:	e9 92 fe ff ff       	jmp    c000660c <f_mkdir+0xb5>
c000677a:	83 ec 80             	sub    esp,0xffffff80
c000677d:	89 d8                	mov    eax,ebx
c000677f:	5b                   	pop    ebx
c0006780:	5e                   	pop    esi
c0006781:	5f                   	pop    edi
c0006782:	c3                   	ret    

c0006783 <f_rename>:
c0006783:	55                   	push   ebp
c0006784:	57                   	push   edi
c0006785:	56                   	push   esi
c0006786:	53                   	push   ebx
c0006787:	81 ec fc 00 00 00    	sub    esp,0xfc
c000678d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006794:	e8 a4 b9 ff ff       	call   c000213d <get_ldnumber>
c0006799:	b9 02 00 00 00       	mov    ecx,0x2
c000679e:	8d 54 24 14          	lea    edx,[esp+0x14]
c00067a2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067a9:	e8 3d be ff ff       	call   c00025eb <mount_volume>
c00067ae:	85 c0                	test   eax,eax
c00067b0:	0f 85 b5 02 00 00    	jne    c0006a6b <f_rename+0x2e8>
c00067b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ba:	83 ec 0c             	sub    esp,0xc
c00067bd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067c1:	68 60 04 00 00       	push   0x460
c00067c6:	e8 f9 1d 00 00       	call   c00085c4 <ff_memalloc>
c00067cb:	83 c4 10             	add    esp,0x10
c00067ce:	89 c3                	mov    ebx,eax
c00067d0:	b8 11 00 00 00       	mov    eax,0x11
c00067d5:	85 db                	test   ebx,ebx
c00067d7:	0f 84 8e 02 00 00    	je     c0006a6b <f_rename+0x2e8>
c00067dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067e1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067e7:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067ea:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067ed:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00067f4:	8d 44 24 58          	lea    eax,[esp+0x58]
c00067f8:	e8 64 e5 ff ff       	call   c0004d61 <follow_path>
c00067fd:	85 c0                	test   eax,eax
c00067ff:	0f 85 52 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006805:	b8 06 00 00 00       	mov    eax,0x6
c000680a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006812:	0f 85 3f 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006818:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000681c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000681f:	0f 85 05 01 00 00    	jne    c000692a <f_rename+0x1a7>
c0006825:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006828:	b9 40 00 00 00       	mov    ecx,0x40
c000682d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006831:	e8 a4 b3 ff ff       	call   c0001bda <mem_cpy>
c0006836:	b9 4c 00 00 00       	mov    ecx,0x4c
c000683b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000683f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006846:	e8 8f b3 ff ff       	call   c0001bda <mem_cpy>
c000684b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006852:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006859:	e8 03 e5 ff ff       	call   c0004d61 <follow_path>
c000685e:	85 c0                	test   eax,eax
c0006860:	75 29                	jne    c000688b <f_rename+0x108>
c0006862:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006866:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000686d:	74 0a                	je     c0006879 <f_rename+0xf6>
c000686f:	b8 08 00 00 00       	mov    eax,0x8
c0006874:	e9 de 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c0006879:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006880:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006887:	75 e6                	jne    c000686f <f_rename+0xec>
c0006889:	eb 09                	jmp    c0006894 <f_rename+0x111>
c000688b:	83 f8 04             	cmp    eax,0x4
c000688e:	0f 85 c3 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006894:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000689b:	e8 42 d9 ff ff       	call   c00041e2 <dir_register>
c00068a0:	85 c0                	test   eax,eax
c00068a2:	0f 85 af 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00068a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ac:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068af:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068b2:	89 c5                	mov    ebp,eax
c00068b4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068bb:	8d 46 24             	lea    eax,[esi+0x24]
c00068be:	e8 98 b2 ff ff       	call   c0001b5b <ld_word>
c00068c3:	b9 40 00 00 00       	mov    ecx,0x40
c00068c8:	89 c7                	mov    edi,eax
c00068ca:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068ce:	89 f0                	mov    eax,esi
c00068d0:	e8 05 b3 ff ff       	call   c0001bda <mem_cpy>
c00068d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d9:	89 e9                	mov    ecx,ebp
c00068db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068de:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068e1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068ec:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068ef:	0f b7 d7             	movzx  edx,di
c00068f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068f5:	83 c0 24             	add    eax,0x24
c00068f8:	e8 d0 b2 ff ff       	call   c0001bcd <st_word>
c00068fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006901:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006904:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006907:	a8 10                	test   al,0x10
c0006909:	75 06                	jne    c0006911 <f_rename+0x18e>
c000690b:	83 c8 20             	or     eax,0x20
c000690e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006911:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006918:	e8 9c d1 ff ff       	call   c0003ab9 <store_xdir>
c000691d:	85 c0                	test   eax,eax
c000691f:	0f 84 1c 01 00 00    	je     c0006a41 <f_rename+0x2be>
c0006925:	e9 2d 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c000692a:	b9 20 00 00 00       	mov    ecx,0x20
c000692f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006936:	8d 44 24 18          	lea    eax,[esp+0x18]
c000693a:	e8 9b b2 ff ff       	call   c0001bda <mem_cpy>
c000693f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006944:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006948:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694f:	e8 86 b2 ff ff       	call   c0001bda <mem_cpy>
c0006954:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000695b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006962:	e8 fa e3 ff ff       	call   c0004d61 <follow_path>
c0006967:	85 c0                	test   eax,eax
c0006969:	75 27                	jne    c0006992 <f_rename+0x20f>
c000696b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006976:	0f 85 f3 fe ff ff    	jne    c000686f <f_rename+0xec>
c000697c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006983:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698a:	0f 85 df fe ff ff    	jne    c000686f <f_rename+0xec>
c0006990:	eb 09                	jmp    c000699b <f_rename+0x218>
c0006992:	83 f8 04             	cmp    eax,0x4
c0006995:	0f 85 bc 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c000699b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a2:	e8 3b d8 ff ff       	call   c00041e2 <dir_register>
c00069a7:	85 c0                	test   eax,eax
c00069a9:	0f 85 a8 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00069af:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069b6:	b9 13 00 00 00       	mov    ecx,0x13
c00069bb:	8d 46 0d             	lea    eax,[esi+0xd]
c00069be:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069c2:	e8 13 b2 ff ff       	call   c0001bda <mem_cpy>
c00069c7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069cb:	a8 10                	test   al,0x10
c00069cd:	75 03                	jne    c00069d2 <f_rename+0x24f>
c00069cf:	83 c8 20             	or     eax,0x20
c00069d2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069dd:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069e1:	74 5e                	je     c0006a41 <f_rename+0x2be>
c00069e3:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069ea:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069ee:	74 51                	je     c0006a41 <f_rename+0x2be>
c00069f0:	89 f2                	mov    edx,esi
c00069f2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00069f6:	8a 07                	mov    al,BYTE PTR [edi]
c00069f8:	e8 d9 e2 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c00069fd:	89 c2                	mov    edx,eax
c00069ff:	89 f8                	mov    eax,edi
c0006a01:	e8 ee b3 ff ff       	call   c0001df4 <clst2sect>
c0006a06:	89 c6                	mov    esi,eax
c0006a08:	89 d1                	mov    ecx,edx
c0006a0a:	b8 02 00 00 00       	mov    eax,0x2
c0006a0f:	09 f2                	or     edx,esi
c0006a11:	74 44                	je     c0006a57 <f_rename+0x2d4>
c0006a13:	89 f2                	mov    edx,esi
c0006a15:	89 f8                	mov    eax,edi
c0006a17:	e8 1d b9 ff ff       	call   c0002339 <move_window>
c0006a1c:	85 c0                	test   eax,eax
c0006a1e:	75 37                	jne    c0006a57 <f_rename+0x2d4>
c0006a20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a24:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a28:	75 17                	jne    c0006a41 <f_rename+0x2be>
c0006a2a:	8d 50 74             	lea    edx,[eax+0x74]
c0006a2d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a34:	e8 c6 e2 ff ff       	call   c0004cff <st_clust.isra.1>
c0006a39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a3d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a41:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a45:	e8 f4 d0 ff ff       	call   c0003b3e <dir_remove>
c0006a4a:	85 c0                	test   eax,eax
c0006a4c:	75 09                	jne    c0006a57 <f_rename+0x2d4>
c0006a4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a52:	e8 0d da ff ff       	call   c0004464 <sync_fs>
c0006a57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a5b:	83 ec 0c             	sub    esp,0xc
c0006a5e:	53                   	push   ebx
c0006a5f:	e8 78 1b 00 00       	call   c00085dc <ff_memfree>
c0006a64:	83 c4 10             	add    esp,0x10
c0006a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a6b:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a71:	5b                   	pop    ebx
c0006a72:	5e                   	pop    esi
c0006a73:	5f                   	pop    edi
c0006a74:	5d                   	pop    ebp
c0006a75:	c3                   	ret    

c0006a76 <f_chmod>:
c0006a76:	57                   	push   edi
c0006a77:	b9 02 00 00 00       	mov    ecx,0x2
c0006a7c:	56                   	push   esi
c0006a7d:	53                   	push   ebx
c0006a7e:	83 ec 60             	sub    esp,0x60
c0006a81:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a85:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a89:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a8d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a91:	e8 55 bb ff ff       	call   c00025eb <mount_volume>
c0006a96:	85 c0                	test   eax,eax
c0006a98:	0f 85 af 00 00 00    	jne    c0006b4d <f_chmod+0xd7>
c0006a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa2:	83 ec 0c             	sub    esp,0xc
c0006aa5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006aa9:	68 60 04 00 00       	push   0x460
c0006aae:	e8 11 1b 00 00       	call   c00085c4 <ff_memalloc>
c0006ab3:	83 c4 10             	add    esp,0x10
c0006ab6:	89 c6                	mov    esi,eax
c0006ab8:	b8 11 00 00 00       	mov    eax,0x11
c0006abd:	85 f6                	test   esi,esi
c0006abf:	0f 84 88 00 00 00    	je     c0006b4d <f_chmod+0xd7>
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006acf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006ad2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ad5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ad9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006add:	e8 7f e2 ff ff       	call   c0004d61 <follow_path>
c0006ae2:	85 c0                	test   eax,eax
c0006ae4:	75 53                	jne    c0006b39 <f_chmod+0xc3>
c0006ae6:	b8 06 00 00 00       	mov    eax,0x6
c0006aeb:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006af0:	75 47                	jne    c0006b39 <f_chmod+0xc3>
c0006af2:	89 f9                	mov    ecx,edi
c0006af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af8:	83 e1 27             	and    ecx,0x27
c0006afb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006afe:	75 1d                	jne    c0006b1d <f_chmod+0xa7>
c0006b00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006b03:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b06:	21 cb                	and    ebx,ecx
c0006b08:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b0b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b12:	e8 a2 cf ff ff       	call   c0003ab9 <store_xdir>
c0006b17:	85 c0                	test   eax,eax
c0006b19:	75 1e                	jne    c0006b39 <f_chmod+0xc3>
c0006b1b:	eb 13                	jmp    c0006b30 <f_chmod+0xba>
c0006b1d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b21:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b24:	21 cb                	and    ebx,ecx
c0006b26:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b29:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b2c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b34:	e8 2b d9 ff ff       	call   c0004464 <sync_fs>
c0006b39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b3d:	83 ec 0c             	sub    esp,0xc
c0006b40:	56                   	push   esi
c0006b41:	e8 96 1a 00 00       	call   c00085dc <ff_memfree>
c0006b46:	83 c4 10             	add    esp,0x10
c0006b49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b4d:	83 c4 60             	add    esp,0x60
c0006b50:	5b                   	pop    ebx
c0006b51:	5e                   	pop    esi
c0006b52:	5f                   	pop    edi
c0006b53:	c3                   	ret    

c0006b54 <f_utime>:
c0006b54:	56                   	push   esi
c0006b55:	b9 02 00 00 00       	mov    ecx,0x2
c0006b5a:	53                   	push   ebx
c0006b5b:	83 ec 64             	sub    esp,0x64
c0006b5e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b62:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b66:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b6a:	e8 7c ba ff ff       	call   c00025eb <mount_volume>
c0006b6f:	85 c0                	test   eax,eax
c0006b71:	0f 85 b5 00 00 00    	jne    c0006c2c <f_utime+0xd8>
c0006b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b7b:	83 ec 0c             	sub    esp,0xc
c0006b7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b82:	68 60 04 00 00       	push   0x460
c0006b87:	e8 38 1a 00 00       	call   c00085c4 <ff_memalloc>
c0006b8c:	83 c4 10             	add    esp,0x10
c0006b8f:	89 c3                	mov    ebx,eax
c0006b91:	b8 11 00 00 00       	mov    eax,0x11
c0006b96:	85 db                	test   ebx,ebx
c0006b98:	0f 84 8e 00 00 00    	je     c0006c2c <f_utime+0xd8>
c0006b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ba8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006bab:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bae:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bb6:	e8 a6 e1 ff ff       	call   c0004d61 <follow_path>
c0006bbb:	85 c0                	test   eax,eax
c0006bbd:	75 59                	jne    c0006c18 <f_utime+0xc4>
c0006bbf:	b8 06 00 00 00       	mov    eax,0x6
c0006bc4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bc9:	75 4d                	jne    c0006c18 <f_utime+0xc4>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006bd3:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006bd7:	c1 e2 10             	shl    edx,0x10
c0006bda:	09 ca                	or     edx,ecx
c0006bdc:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bdf:	75 1a                	jne    c0006bfb <f_utime+0xa7>
c0006be1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006be4:	83 c0 0c             	add    eax,0xc
c0006be7:	e8 e5 af ff ff       	call   c0001bd1 <st_dword>
c0006bec:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bf0:	e8 c4 ce ff ff       	call   c0003ab9 <store_xdir>
c0006bf5:	85 c0                	test   eax,eax
c0006bf7:	75 1f                	jne    c0006c18 <f_utime+0xc4>
c0006bf9:	eb 14                	jmp    c0006c0f <f_utime+0xbb>
c0006bfb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bff:	83 c0 16             	add    eax,0x16
c0006c02:	e8 ca af ff ff       	call   c0001bd1 <st_dword>
c0006c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c13:	e8 4c d8 ff ff       	call   c0004464 <sync_fs>
c0006c18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c1c:	83 ec 0c             	sub    esp,0xc
c0006c1f:	53                   	push   ebx
c0006c20:	e8 b7 19 00 00       	call   c00085dc <ff_memfree>
c0006c25:	83 c4 10             	add    esp,0x10
c0006c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c2c:	83 c4 64             	add    esp,0x64
c0006c2f:	5b                   	pop    ebx
c0006c30:	5e                   	pop    esi
c0006c31:	c3                   	ret    

c0006c32 <f_getlabel>:
c0006c32:	55                   	push   ebp
c0006c33:	31 c9                	xor    ecx,ecx
c0006c35:	57                   	push   edi
c0006c36:	56                   	push   esi
c0006c37:	53                   	push   ebx
c0006c38:	83 ec 6c             	sub    esp,0x6c
c0006c3b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c46:	e8 a0 b9 ff ff       	call   c00025eb <mount_volume>
c0006c4b:	89 c6                	mov    esi,eax
c0006c4d:	85 c0                	test   eax,eax
c0006c4f:	0f 85 c1 01 00 00    	jne    c0006e16 <f_getlabel+0x1e4>
c0006c55:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c5d:	0f 84 5f 01 00 00    	je     c0006dc2 <f_getlabel+0x190>
c0006c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c67:	31 d2                	xor    edx,edx
c0006c69:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c6d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c75:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c79:	e8 39 c4 ff ff       	call   c00030b7 <dir_sdi>
c0006c7e:	85 c0                	test   eax,eax
c0006c80:	0f 85 2d 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c86:	ba 01 00 00 00       	mov    edx,0x1
c0006c8b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c8f:	e8 33 cc ff ff       	call   c00038c7 <dir_read>
c0006c94:	85 c0                	test   eax,eax
c0006c96:	0f 85 17 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ca3:	74 09                	je     c0006cae <f_getlabel+0x7c>
c0006ca5:	31 db                	xor    ebx,ebx
c0006ca7:	31 c9                	xor    ecx,ecx
c0006ca9:	e9 c8 00 00 00       	jmp    c0006d76 <f_getlabel+0x144>
c0006cae:	31 ed                	xor    ebp,ebp
c0006cb0:	31 db                	xor    ebx,ebx
c0006cb2:	31 ff                	xor    edi,edi
c0006cb4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cb8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006cbc:	39 fa                	cmp    edx,edi
c0006cbe:	76 4b                	jbe    c0006d0b <f_getlabel+0xd9>
c0006cc0:	47                   	inc    edi
c0006cc1:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cc4:	01 d0                	add    eax,edx
c0006cc6:	e8 90 ae ff ff       	call   c0001b5b <ld_word>
c0006ccb:	66 85 ed             	test   bp,bp
c0006cce:	75 0d                	jne    c0006cdd <f_getlabel+0xab>
c0006cd0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006cd6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006cdb:	76 28                	jbe    c0006d05 <f_getlabel+0xd3>
c0006cdd:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006ce4:	89 e9                	mov    ecx,ebp
c0006ce6:	01 da                	add    edx,ebx
c0006ce8:	c1 e1 10             	shl    ecx,0x10
c0006ceb:	0f b7 c0             	movzx  eax,ax
c0006cee:	09 c8                	or     eax,ecx
c0006cf0:	b9 04 00 00 00       	mov    ecx,0x4
c0006cf5:	e8 01 b0 ff ff       	call   c0001cfb <put_utf>
c0006cfa:	84 c0                	test   al,al
c0006cfc:	74 0b                	je     c0006d09 <f_getlabel+0xd7>
c0006cfe:	0f b6 c0             	movzx  eax,al
c0006d01:	01 c3                	add    ebx,eax
c0006d03:	31 c0                	xor    eax,eax
c0006d05:	89 c5                	mov    ebp,eax
c0006d07:	eb ab                	jmp    c0006cb4 <f_getlabel+0x82>
c0006d09:	31 db                	xor    ebx,ebx
c0006d0b:	66 85 ed             	test   bp,bp
c0006d0e:	74 02                	je     c0006d12 <f_getlabel+0xe0>
c0006d10:	31 db                	xor    ebx,ebx
c0006d12:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d19:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d1d:	e9 a0 00 00 00       	jmp    c0006dc2 <f_getlabel+0x190>
c0006d22:	83 ff 0b             	cmp    edi,0xb
c0006d25:	74 11                	je     c0006d38 <f_getlabel+0x106>
c0006d27:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d30:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d33:	c1 e0 08             	shl    eax,0x8
c0006d36:	09 c2                	or     edx,eax
c0006d38:	0f b7 d2             	movzx  edx,dx
c0006d3b:	50                   	push   eax
c0006d3c:	50                   	push   eax
c0006d3d:	68 b5 01 00 00       	push   0x1b5
c0006d42:	52                   	push   edx
c0006d43:	e8 44 19 00 00       	call   c000868c <ff_oem2uni>
c0006d48:	83 c4 10             	add    esp,0x10
c0006d4b:	66 85 c0             	test   ax,ax
c0006d4e:	74 46                	je     c0006d96 <f_getlabel+0x164>
c0006d50:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d57:	0f b7 c0             	movzx  eax,ax
c0006d5a:	01 da                	add    edx,ebx
c0006d5c:	b9 04 00 00 00       	mov    ecx,0x4
c0006d61:	e8 95 af ff ff       	call   c0001cfb <put_utf>
c0006d66:	84 c0                	test   al,al
c0006d68:	74 2c                	je     c0006d96 <f_getlabel+0x164>
c0006d6a:	0f b6 c0             	movzx  eax,al
c0006d6d:	01 c3                	add    ebx,eax
c0006d6f:	83 ff 0b             	cmp    edi,0xb
c0006d72:	74 24                	je     c0006d98 <f_getlabel+0x166>
c0006d74:	89 f9                	mov    ecx,edi
c0006d76:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d7a:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d7d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d82:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d8b:	e8 9f ae ff ff       	call   c0001c2f <dbc_1st>
c0006d90:	85 c0                	test   eax,eax
c0006d92:	74 a4                	je     c0006d38 <f_getlabel+0x106>
c0006d94:	eb 8c                	jmp    c0006d22 <f_getlabel+0xf0>
c0006d96:	31 db                	xor    ebx,ebx
c0006d98:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006d9f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006da2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006da9:	74 17                	je     c0006dc2 <f_getlabel+0x190>
c0006dab:	4b                   	dec    ebx
c0006dac:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006daf:	74 ee                	je     c0006d9f <f_getlabel+0x16d>
c0006db1:	eb 0f                	jmp    c0006dc2 <f_getlabel+0x190>
c0006db3:	83 f8 04             	cmp    eax,0x4
c0006db6:	75 5c                	jne    c0006e14 <f_getlabel+0x1e2>
c0006db8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006dbf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dc2:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dca:	74 4a                	je     c0006e16 <f_getlabel+0x1e4>
c0006dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dd0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006dd3:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006dd6:	e8 5e b5 ff ff       	call   c0002339 <move_window>
c0006ddb:	89 c6                	mov    esi,eax
c0006ddd:	85 c0                	test   eax,eax
c0006ddf:	75 35                	jne    c0006e16 <f_getlabel+0x1e4>
c0006de1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006de5:	b8 43 00 00 00       	mov    eax,0x43
c0006dea:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006dec:	80 f9 03             	cmp    cl,0x3
c0006def:	74 0f                	je     c0006e00 <f_getlabel+0x1ce>
c0006df1:	31 c0                	xor    eax,eax
c0006df3:	80 f9 04             	cmp    cl,0x4
c0006df6:	0f 94 c0             	sete   al
c0006df9:	48                   	dec    eax
c0006dfa:	83 e0 c3             	and    eax,0xffffffc3
c0006dfd:	83 c0 64             	add    eax,0x64
c0006e00:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006e04:	e8 5f ad ff ff       	call   c0001b68 <ld_dword>
c0006e09:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e10:	89 07                	mov    DWORD PTR [edi],eax
c0006e12:	eb 02                	jmp    c0006e16 <f_getlabel+0x1e4>
c0006e14:	89 c6                	mov    esi,eax
c0006e16:	83 c4 6c             	add    esp,0x6c
c0006e19:	89 f0                	mov    eax,esi
c0006e1b:	5b                   	pop    ebx
c0006e1c:	5e                   	pop    esi
c0006e1d:	5f                   	pop    edi
c0006e1e:	5d                   	pop    ebp
c0006e1f:	c3                   	ret    

c0006e20 <f_setlabel>:
c0006e20:	56                   	push   esi
c0006e21:	b9 02 00 00 00       	mov    ecx,0x2
c0006e26:	53                   	push   ebx
c0006e27:	83 ec 74             	sub    esp,0x74
c0006e2a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e2e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e35:	e8 b1 b7 ff ff       	call   c00025eb <mount_volume>
c0006e3a:	89 c6                	mov    esi,eax
c0006e3c:	85 c0                	test   eax,eax
c0006e3e:	0f 85 41 02 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006e44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e48:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e4b:	0f 85 8e 00 00 00    	jne    c0006edf <f_setlabel+0xbf>
c0006e51:	b9 16 00 00 00       	mov    ecx,0x16
c0006e56:	31 d2                	xor    edx,edx
c0006e58:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e5c:	31 db                	xor    ebx,ebx
c0006e5e:	e8 8c ad ff ff       	call   c0001bef <mem_set>
c0006e63:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e6a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e6d:	0f 86 0a 01 00 00    	jbe    c0006f7d <f_setlabel+0x15d>
c0006e73:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e7a:	e8 b6 ad ff ff       	call   c0001c35 <tchar2uni>
c0006e7f:	89 c6                	mov    esi,eax
c0006e81:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e86:	76 2a                	jbe    c0006eb2 <f_setlabel+0x92>
c0006e88:	83 f8 ff             	cmp    eax,0xffffffff
c0006e8b:	74 05                	je     c0006e92 <f_setlabel+0x72>
c0006e8d:	83 fb 09             	cmp    ebx,0x9
c0006e90:	76 0a                	jbe    c0006e9c <f_setlabel+0x7c>
c0006e92:	be 06 00 00 00       	mov    esi,0x6
c0006e97:	e9 e9 01 00 00       	jmp    c0007085 <f_setlabel+0x265>
c0006e9c:	89 c2                	mov    edx,eax
c0006e9e:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ea2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ea5:	c1 ea 10             	shr    edx,0x10
c0006ea8:	01 c8                	add    eax,ecx
c0006eaa:	43                   	inc    ebx
c0006eab:	e8 1d ad ff ff       	call   c0001bcd <st_word>
c0006eb0:	eb 04                	jmp    c0006eb6 <f_setlabel+0x96>
c0006eb2:	85 c0                	test   eax,eax
c0006eb4:	74 dc                	je     c0006e92 <f_setlabel+0x72>
c0006eb6:	89 f2                	mov    edx,esi
c0006eb8:	b8 d7 1f 02 c0       	mov    eax,0xc0021fd7
c0006ebd:	e8 5b ad ff ff       	call   c0001c1d <chk_chr>
c0006ec2:	85 c0                	test   eax,eax
c0006ec4:	75 cc                	jne    c0006e92 <f_setlabel+0x72>
c0006ec6:	83 fb 0a             	cmp    ebx,0xa
c0006ec9:	77 c7                	ja     c0006e92 <f_setlabel+0x72>
c0006ecb:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ece:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ed2:	0f b7 d6             	movzx  edx,si
c0006ed5:	01 c8                	add    eax,ecx
c0006ed7:	43                   	inc    ebx
c0006ed8:	e8 f0 ac ff ff       	call   c0001bcd <st_word>
c0006edd:	eb 84                	jmp    c0006e63 <f_setlabel+0x43>
c0006edf:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ee4:	ba 20 00 00 00       	mov    edx,0x20
c0006ee9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006eed:	31 db                	xor    ebx,ebx
c0006eef:	e8 fb ac ff ff       	call   c0001bef <mem_set>
c0006ef4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006efb:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006efe:	76 60                	jbe    c0006f60 <f_setlabel+0x140>
c0006f00:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f07:	e8 29 ad ff ff       	call   c0001c35 <tchar2uni>
c0006f0c:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f11:	0f 87 7b ff ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0006f17:	83 ec 0c             	sub    esp,0xc
c0006f1a:	50                   	push   eax
c0006f1b:	e8 e0 17 00 00       	call   c0008700 <ff_wtoupper>
c0006f20:	5a                   	pop    edx
c0006f21:	59                   	pop    ecx
c0006f22:	68 b5 01 00 00       	push   0x1b5
c0006f27:	50                   	push   eax
c0006f28:	e8 c7 16 00 00       	call   c00085f4 <ff_uni2oem>
c0006f2d:	83 c4 10             	add    esp,0x10
c0006f30:	89 c6                	mov    esi,eax
c0006f32:	66 85 c0             	test   ax,ax
c0006f35:	0f 84 57 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f3b:	0f b7 d0             	movzx  edx,ax
c0006f3e:	b8 d0 1f 02 c0       	mov    eax,0xc0021fd0
c0006f43:	e8 d5 ac ff ff       	call   c0001c1d <chk_chr>
c0006f48:	85 c0                	test   eax,eax
c0006f4a:	0f 85 42 ff ff ff    	jne    c0006e92 <f_setlabel+0x72>
c0006f50:	66 81 fe ff 00       	cmp    si,0xff
c0006f55:	0f 87 14 01 00 00    	ja     c000706f <f_setlabel+0x24f>
c0006f5b:	e9 fa 00 00 00       	jmp    c000705a <f_setlabel+0x23a>
c0006f60:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f65:	0f 84 27 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f6b:	85 db                	test   ebx,ebx
c0006f6d:	74 0e                	je     c0006f7d <f_setlabel+0x15d>
c0006f6f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f72:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f77:	75 04                	jne    c0006f7d <f_setlabel+0x15d>
c0006f79:	89 c3                	mov    ebx,eax
c0006f7b:	eb ee                	jmp    c0006f6b <f_setlabel+0x14b>
c0006f7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f81:	31 d2                	xor    edx,edx
c0006f83:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f87:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f8f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f93:	e8 1f c1 ff ff       	call   c00030b7 <dir_sdi>
c0006f98:	89 c6                	mov    esi,eax
c0006f9a:	85 c0                	test   eax,eax
c0006f9c:	0f 85 e3 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006fa2:	ba 01 00 00 00       	mov    edx,0x1
c0006fa7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fab:	e8 17 c9 ff ff       	call   c00038c7 <dir_read>
c0006fb0:	85 c0                	test   eax,eax
c0006fb2:	75 21                	jne    c0006fd5 <f_setlabel+0x1b5>
c0006fb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fb8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fbc:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fbf:	74 5d                	je     c000701e <f_setlabel+0x1fe>
c0006fc1:	85 db                	test   ebx,ebx
c0006fc3:	74 0b                	je     c0006fd0 <f_setlabel+0x1b0>
c0006fc5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fca:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fce:	eb 70                	jmp    c0007040 <f_setlabel+0x220>
c0006fd0:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fd3:	eb 70                	jmp    c0007045 <f_setlabel+0x225>
c0006fd5:	83 f8 04             	cmp    eax,0x4
c0006fd8:	75 7c                	jne    c0007056 <f_setlabel+0x236>
c0006fda:	85 db                	test   ebx,ebx
c0006fdc:	0f 84 a3 00 00 00    	je     c0007085 <f_setlabel+0x265>
c0006fe2:	ba 01 00 00 00       	mov    edx,0x1
c0006fe7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006feb:	e8 51 ca ff ff       	call   c0003a41 <dir_alloc>
c0006ff0:	89 c6                	mov    esi,eax
c0006ff2:	85 c0                	test   eax,eax
c0006ff4:	0f 85 8b 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006ffa:	31 d2                	xor    edx,edx
c0006ffc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007000:	b9 20 00 00 00       	mov    ecx,0x20
c0007005:	e8 e5 ab ff ff       	call   c0001bef <mem_set>
c000700a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000700e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007011:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007015:	75 18                	jne    c000702f <f_setlabel+0x20f>
c0007017:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000701a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000701e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007021:	b9 16 00 00 00       	mov    ecx,0x16
c0007026:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000702a:	83 c0 02             	add    eax,0x2
c000702d:	eb 9b                	jmp    c0006fca <f_setlabel+0x1aa>
c000702f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007033:	b9 0b 00 00 00       	mov    ecx,0xb
c0007038:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000703c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007040:	e8 95 ab ff ff       	call   c0001bda <mem_cpy>
c0007045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007049:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000704d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007051:	e8 0e d4 ff ff       	call   c0004464 <sync_fs>
c0007056:	89 c6                	mov    esi,eax
c0007058:	eb 2b                	jmp    c0007085 <f_setlabel+0x265>
c000705a:	83 fb 0a             	cmp    ebx,0xa
c000705d:	0f 87 2f fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007063:	89 f0                	mov    eax,esi
c0007065:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007069:	43                   	inc    ebx
c000706a:	e9 85 fe ff ff       	jmp    c0006ef4 <f_setlabel+0xd4>
c000706f:	83 fb 09             	cmp    ebx,0x9
c0007072:	0f 87 1a fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007078:	89 f0                	mov    eax,esi
c000707a:	66 c1 e8 08          	shr    ax,0x8
c000707e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007082:	43                   	inc    ebx
c0007083:	eb de                	jmp    c0007063 <f_setlabel+0x243>
c0007085:	89 f0                	mov    eax,esi
c0007087:	83 c4 74             	add    esp,0x74
c000708a:	5b                   	pop    ebx
c000708b:	5e                   	pop    esi
c000708c:	c3                   	ret    

c000708d <f_expand>:
c000708d:	55                   	push   ebp
c000708e:	57                   	push   edi
c000708f:	56                   	push   esi
c0007090:	53                   	push   ebx
c0007091:	83 ec 3c             	sub    esp,0x3c
c0007094:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007098:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000709c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00070a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00070a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ac:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070b4:	89 d8                	mov    eax,ebx
c00070b6:	e8 a3 b1 ff ff       	call   c000225e <validate>
c00070bb:	89 c5                	mov    ebp,eax
c00070bd:	85 c0                	test   eax,eax
c00070bf:	0f 85 f4 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070c5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070c9:	85 ed                	test   ebp,ebp
c00070cb:	0f 85 e8 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070d9:	75 0a                	jne    c00070e5 <f_expand+0x58>
c00070db:	bd 07 00 00 00       	mov    ebp,0x7
c00070e0:	e9 d4 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00070e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070e8:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070eb:	75 ee                	jne    c00070db <f_expand+0x4e>
c00070ed:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00070f1:	74 e8                	je     c00070db <f_expand+0x4e>
c00070f3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00070f7:	8a 0e                	mov    cl,BYTE PTR [esi]
c00070f9:	80 f9 04             	cmp    cl,0x4
c00070fc:	74 07                	je     c0007105 <f_expand+0x78>
c00070fe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007103:	77 d6                	ja     c00070db <f_expand+0x4e>
c0007105:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007109:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000710d:	c1 e0 09             	shl    eax,0x9
c0007110:	8d 50 ff             	lea    edx,[eax-0x1]
c0007113:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c0007117:	0f 95 c2             	setne  dl
c000711a:	0f b6 d2             	movzx  edx,dl
c000711d:	89 d7                	mov    edi,edx
c000711f:	31 d2                	xor    edx,edx
c0007121:	52                   	push   edx
c0007122:	50                   	push   eax
c0007123:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007127:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000712b:	e8 74 9e 01 00       	call   c0020fa4 <__udivdi3>
c0007130:	83 c4 10             	add    esp,0x10
c0007133:	01 f8                	add    eax,edi
c0007135:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007139:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000713c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007140:	83 ff 01             	cmp    edi,0x1
c0007143:	76 05                	jbe    c000714a <f_expand+0xbd>
c0007145:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007148:	77 05                	ja     c000714f <f_expand+0xc2>
c000714a:	bf 02 00 00 00       	mov    edi,0x2
c000714f:	80 f9 04             	cmp    cl,0x4
c0007152:	75 19                	jne    c000716d <f_expand+0xe0>
c0007154:	89 f0                	mov    eax,esi
c0007156:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000715a:	89 fa                	mov    edx,edi
c000715c:	e8 f3 b9 ff ff       	call   c0002b54 <find_bitmap>
c0007161:	89 c6                	mov    esi,eax
c0007163:	85 c0                	test   eax,eax
c0007165:	0f 84 70 ff ff ff    	je     c00070db <f_expand+0x4e>
c000716b:	eb 7f                	jmp    c00071ec <f_expand+0x15f>
c000716d:	89 fe                	mov    esi,edi
c000716f:	89 f9                	mov    ecx,edi
c0007171:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007179:	89 ca                	mov    edx,ecx
c000717b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000717f:	89 d8                	mov    eax,ebx
c0007181:	e8 3b bd ff ff       	call   c0002ec1 <get_fat>
c0007186:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000718a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000718e:	41                   	inc    ecx
c000718f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007193:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0007196:	77 05                	ja     c000719d <f_expand+0x110>
c0007198:	b9 02 00 00 00       	mov    ecx,0x2
c000719d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00071a2:	74 3e                	je     c00071e2 <f_expand+0x155>
c00071a4:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071a9:	75 0a                	jne    c00071b5 <f_expand+0x128>
c00071ab:	bd 01 00 00 00       	mov    ebp,0x1
c00071b0:	e9 04 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071b5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071ba:	75 13                	jne    c00071cf <f_expand+0x142>
c00071bc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071c4:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071c8:	75 0f                	jne    c00071d9 <f_expand+0x14c>
c00071ca:	e9 ce 00 00 00       	jmp    c000729d <f_expand+0x210>
c00071cf:	89 ce                	mov    esi,ecx
c00071d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d9:	39 f9                	cmp    ecx,edi
c00071db:	75 9c                	jne    c0007179 <f_expand+0xec>
c00071dd:	e9 f9 fe ff ff       	jmp    c00070db <f_expand+0x4e>
c00071e2:	bd 02 00 00 00       	mov    ebp,0x2
c00071e7:	e9 cd 00 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071ec:	83 f8 ff             	cmp    eax,0xffffffff
c00071ef:	74 ba                	je     c00071ab <f_expand+0x11e>
c00071f1:	8d 7e ff             	lea    edi,[esi-0x1]
c00071f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071f8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00071fc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007201:	74 51                	je     c0007254 <f_expand+0x1c7>
c0007203:	83 ec 0c             	sub    esp,0xc
c0007206:	89 f2                	mov    edx,esi
c0007208:	6a 01                	push   0x1
c000720a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000720e:	e8 f4 b9 ff ff       	call   c0002c07 <change_bitmap>
c0007213:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007217:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c000721b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	85 c0                	test   eax,eax
c0007224:	74 2e                	je     c0007254 <f_expand+0x1c7>
c0007226:	eb 71                	jmp    c0007299 <f_expand+0x20c>
c0007228:	83 c9 ff             	or     ecx,0xffffffff
c000722b:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007230:	74 03                	je     c0007235 <f_expand+0x1a8>
c0007232:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007235:	89 fa                	mov    edx,edi
c0007237:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000723b:	e8 7c ba ff ff       	call   c0002cbc <put_fat>
c0007240:	85 c0                	test   eax,eax
c0007242:	75 55                	jne    c0007299 <f_expand+0x20c>
c0007244:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007248:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c000724c:	47                   	inc    edi
c000724d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007252:	75 d4                	jne    c0007228 <f_expand+0x19b>
c0007254:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007258:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000725c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007261:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007264:	74 53                	je     c00072b9 <f_expand+0x22c>
c0007266:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007269:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000726d:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007271:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007275:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007279:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000727c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000727f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0007282:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007285:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007288:	39 ca                	cmp    edx,ecx
c000728a:	77 2d                	ja     c00072b9 <f_expand+0x22c>
c000728c:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c0007290:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0007294:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007297:	eb 20                	jmp    c00072b9 <f_expand+0x22c>
c0007299:	89 c5                	mov    ebp,eax
c000729b:	eb 1c                	jmp    c00072b9 <f_expand+0x22c>
c000729d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072a2:	74 0c                	je     c00072b0 <f_expand+0x223>
c00072a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072a8:	89 f7                	mov    edi,esi
c00072aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072ae:	eb 9d                	jmp    c000724d <f_expand+0x1c0>
c00072b0:	8d 46 ff             	lea    eax,[esi-0x1]
c00072b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072b7:	eb 9b                	jmp    c0007254 <f_expand+0x1c7>
c00072b9:	83 c4 3c             	add    esp,0x3c
c00072bc:	89 e8                	mov    eax,ebp
c00072be:	5b                   	pop    ebx
c00072bf:	5e                   	pop    esi
c00072c0:	5f                   	pop    edi
c00072c1:	5d                   	pop    ebp
c00072c2:	c3                   	ret    

c00072c3 <f_forward>:
c00072c3:	55                   	push   ebp
c00072c4:	57                   	push   edi
c00072c5:	56                   	push   esi
c00072c6:	53                   	push   ebx
c00072c7:	83 ec 2c             	sub    esp,0x2c
c00072ca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072ce:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072d8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072dc:	89 d8                	mov    eax,ebx
c00072de:	e8 7b af ff ff       	call   c000225e <validate>
c00072e3:	89 c5                	mov    ebp,eax
c00072e5:	85 c0                	test   eax,eax
c00072e7:	0f 85 aa 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072ed:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00072f1:	85 ed                	test   ebp,ebp
c00072f3:	0f 85 9e 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072f9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00072fd:	0f 84 8f 01 00 00    	je     c0007492 <f_forward+0x1cf>
c0007303:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007306:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007309:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000730c:	bf 00 00 00 00       	mov    edi,0x0
c0007311:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007314:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007318:	89 d1                	mov    ecx,edx
c000731a:	19 f9                	sbb    ecx,edi
c000731c:	0f 83 cf 00 00 00    	jae    c00073f1 <f_forward+0x12e>
c0007322:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007326:	e9 c6 00 00 00       	jmp    c00073f1 <f_forward+0x12e>
c000732b:	50                   	push   eax
c000732c:	50                   	push   eax
c000732d:	6a 00                	push   0x0
c000732f:	6a 00                	push   0x0
c0007331:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007335:	83 c4 10             	add    esp,0x10
c0007338:	85 c0                	test   eax,eax
c000733a:	0f 84 57 01 00 00    	je     c0007497 <f_forward+0x1d4>
c0007340:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007343:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007347:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000734a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000734e:	89 d7                	mov    edi,edx
c0007350:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007353:	89 c6                	mov    esi,eax
c0007355:	0f ac fe 09          	shrd   esi,edi,0x9
c0007359:	21 ce                	and    esi,ecx
c000735b:	89 c1                	mov    ecx,eax
c000735d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007363:	0f 84 98 00 00 00    	je     c0007401 <f_forward+0x13e>
c0007369:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000736d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007370:	89 c8                	mov    eax,ecx
c0007372:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007376:	e8 79 aa ff ff       	call   c0001df4 <clst2sect>
c000737b:	89 d7                	mov    edi,edx
c000737d:	09 c7                	or     edi,eax
c000737f:	0f 84 9e 00 00 00    	je     c0007423 <f_forward+0x160>
c0007385:	31 ff                	xor    edi,edi
c0007387:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000738a:	01 c6                	add    esi,eax
c000738c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007390:	11 d7                	adc    edi,edx
c0007392:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007395:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007398:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739c:	39 fa                	cmp    edx,edi
c000739e:	0f 85 a2 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073a4:	39 f0                	cmp    eax,esi
c00073a6:	0f 85 9a 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073ac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073af:	ba 00 02 00 00       	mov    edx,0x200
c00073b4:	25 ff 01 00 00       	and    eax,0x1ff
c00073b9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073bd:	29 c2                	sub    edx,eax
c00073bf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073c2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073c5:	39 d1                	cmp    ecx,edx
c00073c7:	76 02                	jbe    c00073cb <f_forward+0x108>
c00073c9:	89 d1                	mov    ecx,edx
c00073cb:	8d 73 50             	lea    esi,[ebx+0x50]
c00073ce:	52                   	push   edx
c00073cf:	01 c6                	add    esi,eax
c00073d1:	52                   	push   edx
c00073d2:	51                   	push   ecx
c00073d3:	56                   	push   esi
c00073d4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073d8:	83 c4 10             	add    esp,0x10
c00073db:	85 c0                	test   eax,eax
c00073dd:	74 44                	je     c0007423 <f_forward+0x160>
c00073df:	31 ff                	xor    edi,edi
c00073e1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073e4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073e7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073eb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073ef:	01 07                	add    DWORD PTR [edi],eax
c00073f1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00073f6:	0f 85 2f ff ff ff    	jne    c000732b <f_forward+0x68>
c00073fc:	e9 96 00 00 00       	jmp    c0007497 <f_forward+0x1d4>
c0007401:	85 f6                	test   esi,esi
c0007403:	0f 85 60 ff ff ff    	jne    c0007369 <f_forward+0xa6>
c0007409:	89 d7                	mov    edi,edx
c000740b:	09 c7                	or     edi,eax
c000740d:	75 05                	jne    c0007414 <f_forward+0x151>
c000740f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007412:	eb 0a                	jmp    c000741e <f_forward+0x15b>
c0007414:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007417:	89 d8                	mov    eax,ebx
c0007419:	e8 a3 ba ff ff       	call   c0002ec1 <get_fat>
c000741e:	83 f8 01             	cmp    eax,0x1
c0007421:	77 0b                	ja     c000742e <f_forward+0x16b>
c0007423:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007427:	bd 02 00 00 00       	mov    ebp,0x2
c000742c:	eb 69                	jmp    c0007497 <f_forward+0x1d4>
c000742e:	83 f8 ff             	cmp    eax,0xffffffff
c0007431:	75 0b                	jne    c000743e <f_forward+0x17b>
c0007433:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007437:	bd 01 00 00 00       	mov    ebp,0x1
c000743c:	eb 59                	jmp    c0007497 <f_forward+0x1d4>
c000743e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007441:	e9 23 ff ff ff       	jmp    c0007369 <f_forward+0xa6>
c0007446:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000744a:	79 20                	jns    c000746c <f_forward+0x1a9>
c000744c:	83 ec 0c             	sub    esp,0xc
c000744f:	6a 01                	push   0x1
c0007451:	52                   	push   edx
c0007452:	50                   	push   eax
c0007453:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007457:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000745b:	50                   	push   eax
c000745c:	e8 c5 a6 ff ff       	call   c0001b26 <disk_write>
c0007461:	83 c4 20             	add    esp,0x20
c0007464:	85 c0                	test   eax,eax
c0007466:	75 cb                	jne    c0007433 <f_forward+0x170>
c0007468:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000746c:	83 ec 0c             	sub    esp,0xc
c000746f:	6a 01                	push   0x1
c0007471:	57                   	push   edi
c0007472:	56                   	push   esi
c0007473:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007477:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000747b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000747f:	50                   	push   eax
c0007480:	e8 8b a6 ff ff       	call   c0001b10 <disk_read>
c0007485:	83 c4 20             	add    esp,0x20
c0007488:	85 c0                	test   eax,eax
c000748a:	0f 84 1c ff ff ff    	je     c00073ac <f_forward+0xe9>
c0007490:	eb a1                	jmp    c0007433 <f_forward+0x170>
c0007492:	bd 07 00 00 00       	mov    ebp,0x7
c0007497:	83 c4 2c             	add    esp,0x2c
c000749a:	89 e8                	mov    eax,ebp
c000749c:	5b                   	pop    ebx
c000749d:	5e                   	pop    esi
c000749e:	5f                   	pop    edi
c000749f:	5d                   	pop    ebp
c00074a0:	c3                   	ret    

c00074a1 <f_mkfs>:
c00074a1:	55                   	push   ebp
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	bb 0b 00 00 00       	mov    ebx,0xb
c00074aa:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074b0:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074b7:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074be:	e8 7a ac ff ff       	call   c000213d <get_ldnumber>
c00074c3:	85 c0                	test   eax,eax
c00074c5:	0f 88 ec 10 00 00    	js     c00085b7 <f_mkfs+0x1116>
c00074cb:	8b 14 85 20 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9be0]
c00074d2:	85 d2                	test   edx,edx
c00074d4:	74 03                	je     c00074d9 <f_mkfs+0x38>
c00074d6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074d9:	85 f6                	test   esi,esi
c00074db:	75 05                	jne    c00074e2 <f_mkfs+0x41>
c00074dd:	be c0 1f 02 c0       	mov    esi,0xc0021fc0
c00074e2:	83 ec 0c             	sub    esp,0xc
c00074e5:	0f b6 c0             	movzx  eax,al
c00074e8:	bb 03 00 00 00       	mov    ebx,0x3
c00074ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00074f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074f5:	e8 13 a6 ff ff       	call   c0001b0d <disk_initialize>
c00074fa:	83 c4 10             	add    esp,0x10
c00074fd:	a8 01                	test   al,0x1
c00074ff:	0f 85 b2 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007505:	bb 0a 00 00 00       	mov    ebx,0xa
c000750a:	a8 04                	test   al,0x4
c000750c:	0f 85 a5 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007512:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007515:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007519:	85 c0                	test   eax,eax
c000751b:	75 20                	jne    c000753d <f_mkfs+0x9c>
c000751d:	51                   	push   ecx
c000751e:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007522:	50                   	push   eax
c0007523:	6a 03                	push   0x3
c0007525:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007529:	e8 0e a6 ff ff       	call   c0001b3c <disk_ioctl>
c000752e:	83 c4 10             	add    esp,0x10
c0007531:	85 c0                	test   eax,eax
c0007533:	74 08                	je     c000753d <f_mkfs+0x9c>
c0007535:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000753d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007541:	8d 42 ff             	lea    eax,[edx-0x1]
c0007544:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007549:	77 04                	ja     c000754f <f_mkfs+0xae>
c000754b:	85 c2                	test   edx,eax
c000754d:	74 08                	je     c0007557 <f_mkfs+0xb6>
c000754f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007557:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000755a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000755e:	48                   	dec    eax
c000755f:	3c 01                	cmp    al,0x1
c0007561:	76 05                	jbe    c0007568 <f_mkfs+0xc7>
c0007563:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000756b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000756f:	48                   	dec    eax
c0007570:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007575:	77 07                	ja     c000757e <f_mkfs+0xdd>
c0007577:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000757c:	74 08                	je     c0007586 <f_mkfs+0xe5>
c000757e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007586:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007589:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000758f:	77 07                	ja     c0007598 <f_mkfs+0xf7>
c0007591:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007594:	85 d8                	test   eax,ebx
c0007596:	74 02                	je     c000759a <f_mkfs+0xf9>
c0007598:	31 db                	xor    ebx,ebx
c000759a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00075a5:	77 0a                	ja     c00075b1 <f_mkfs+0x110>
c00075a7:	bb 11 00 00 00       	mov    ebx,0x11
c00075ac:	e9 06 10 00 00       	jmp    c00085b7 <f_mkfs+0x1116>
c00075b1:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075b8:	8b 36                	mov    esi,DWORD PTR [esi]
c00075ba:	85 ed                	test   ebp,ebp
c00075bc:	75 1e                	jne    c00075dc <f_mkfs+0x13b>
c00075be:	83 ec 0c             	sub    esp,0xc
c00075c1:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075c8:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075cd:	50                   	push   eax
c00075ce:	e8 f1 0f 00 00       	call   c00085c4 <ff_memalloc>
c00075d3:	83 c4 10             	add    esp,0x10
c00075d6:	89 c5                	mov    ebp,eax
c00075d8:	85 c0                	test   eax,eax
c00075da:	74 cb                	je     c00075a7 <f_mkfs+0x106>
c00075dc:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075e4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075ec:	52                   	push   edx
c00075ed:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00075f1:	50                   	push   eax
c00075f2:	6a 01                	push   0x1
c00075f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f8:	e8 3f a5 ff ff       	call   c0001b3c <disk_ioctl>
c00075fd:	83 c4 10             	add    esp,0x10
c0007600:	85 c0                	test   eax,eax
c0007602:	0f 85 4a 0f 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007608:	89 f1                	mov    ecx,esi
c000760a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007612:	83 e1 0f             	and    ecx,0xf
c0007615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000761d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007621:	83 e6 08             	and    esi,0x8
c0007624:	75 56                	jne    c000767c <f_mkfs+0x1db>
c0007626:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000762a:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000762e:	83 ff 00             	cmp    edi,0x0
c0007631:	76 20                	jbe    c0007653 <f_mkfs+0x1b2>
c0007633:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007638:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007640:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007646:	83 d7 ff             	adc    edi,0xffffffff
c0007649:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000764d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007651:	eb 21                	jmp    c0007674 <f_mkfs+0x1d3>
c0007653:	ba 3f 00 00 00       	mov    edx,0x3f
c0007658:	39 f2                	cmp    edx,esi
c000765a:	19 f8                	sbb    eax,edi
c000765c:	73 1e                	jae    c000767c <f_mkfs+0x1db>
c000765e:	83 c6 c1             	add    esi,0xffffffc1
c0007661:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007669:	83 d7 ff             	adc    edi,0xffffffff
c000766c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007670:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007674:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000767c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007680:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007684:	89 04 24             	mov    DWORD PTR [esp],eax
c0007687:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000768b:	31 c0                	xor    eax,eax
c000768d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007692:	89 c7                	mov    edi,eax
c0007694:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007697:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000769b:	0f 83 c5 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c00076a1:	89 df                	mov    edi,ebx
c00076a3:	c1 ef 09             	shr    edi,0x9
c00076a6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076aa:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076b1:	c1 ef 09             	shr    edi,0x9
c00076b4:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076b9:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076bd:	74 29                	je     c00076e8 <f_mkfs+0x247>
c00076bf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076c5:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076ca:	0f 97 c2             	seta   dl
c00076cd:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076d0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076d4:	0f 92 c0             	setb   al
c00076d7:	08 c2                	or     dl,al
c00076d9:	75 5b                	jne    c0007736 <f_mkfs+0x295>
c00076db:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076df:	83 e0 07             	and    eax,0x7
c00076e2:	3c 04                	cmp    al,0x4
c00076e4:	74 50                	je     c0007736 <f_mkfs+0x295>
c00076e6:	eb 1b                	jmp    c0007703 <f_mkfs+0x262>
c00076e8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076ed:	0f 87 73 0a 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00076f3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076f9:	76 08                	jbe    c0007703 <f_mkfs+0x262>
c00076fb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007703:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007707:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000770b:	83 e0 01             	and    eax,0x1
c000770e:	80 e1 02             	and    cl,0x2
c0007711:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007715:	74 0d                	je     c0007724 <f_mkfs+0x283>
c0007717:	84 c0                	test   al,al
c0007719:	0f 84 53 09 00 00    	je     c0008072 <f_mkfs+0xbd1>
c000771f:	e9 12 08 00 00       	jmp    c0007f36 <f_mkfs+0xa95>
c0007724:	bb 13 00 00 00       	mov    ebx,0x13
c0007729:	84 c0                	test   al,al
c000772b:	0f 85 05 08 00 00    	jne    c0007f36 <f_mkfs+0xa95>
c0007731:	e9 39 0e 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0007736:	31 c0                	xor    eax,eax
c0007738:	ba ff 0f 00 00       	mov    edx,0xfff
c000773d:	89 c7                	mov    edi,eax
c000773f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007742:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007746:	0f 83 1a 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c000774c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007752:	77 39                	ja     c000778d <f_mkfs+0x2ec>
c0007754:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007759:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007761:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007764:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007768:	73 08                	jae    c0007772 <f_mkfs+0x2d1>
c000776a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007772:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007777:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000777a:	b8 00 00 00 00       	mov    eax,0x0
c000777f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007783:	73 08                	jae    c000778d <f_mkfs+0x2ec>
c0007785:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000778d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007791:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007795:	83 c0 20             	add    eax,0x20
c0007798:	83 d2 00             	adc    edx,0x0
c000779b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000779f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00077a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077a7:	31 d2                	xor    edx,edx
c00077a9:	31 ff                	xor    edi,edi
c00077ab:	52                   	push   edx
c00077ac:	89 fb                	mov    ebx,edi
c00077ae:	50                   	push   eax
c00077af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b7:	e8 e8 97 01 00       	call   c0020fa4 <__udivdi3>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	c1 e0 02             	shl    eax,0x2
c00077c2:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077c6:	05 07 02 00 00       	add    eax,0x207
c00077cb:	89 f1                	mov    ecx,esi
c00077cd:	c1 e8 09             	shr    eax,0x9
c00077d0:	83 c1 ff             	add    ecx,0xffffffff
c00077d3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077d7:	83 d3 ff             	adc    ebx,0xffffffff
c00077da:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077de:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077e2:	31 d2                	xor    edx,edx
c00077e4:	01 c8                	add    eax,ecx
c00077e6:	11 da                	adc    edx,ebx
c00077e8:	89 c1                	mov    ecx,eax
c00077ea:	f7 de                	neg    esi
c00077ec:	89 d0                	mov    eax,edx
c00077ee:	83 d7 00             	adc    edi,0x0
c00077f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00077f5:	f7 df                	neg    edi
c00077f7:	21 f1                	and    ecx,esi
c00077f9:	21 f8                	and    eax,edi
c00077fb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00077ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007803:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007807:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000780b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000780f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007812:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007816:	0f ac d0 01          	shrd   eax,edx,0x1
c000781a:	89 df                	mov    edi,ebx
c000781c:	d1 ea                	shr    edx,1
c000781e:	39 c1                	cmp    ecx,eax
c0007820:	19 d7                	sbb    edi,edx
c0007822:	0f 83 3e 09 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c0007828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000782c:	31 d2                	xor    edx,edx
c000782e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007836:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000783a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000783d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007841:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007845:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007849:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000784d:	83 f8 0f             	cmp    eax,0xf
c0007850:	0f 86 10 09 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c0007856:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000785e:	0f 87 02 09 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c0007864:	31 d2                	xor    edx,edx
c0007866:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000786a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007872:	83 c0 07             	add    eax,0x7
c0007875:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000787d:	c1 e8 03             	shr    eax,0x3
c0007880:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007887:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000788b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000788f:	c1 e0 09             	shl    eax,0x9
c0007892:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007896:	48                   	dec    eax
c0007897:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000789b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000789f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00078a3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078a7:	31 d2                	xor    edx,edx
c00078a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078ad:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b8:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078bd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078c1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078c5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078c9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078cd:	31 ff                	xor    edi,edi
c00078cf:	31 f6                	xor    esi,esi
c00078d1:	31 db                	xor    ebx,ebx
c00078d3:	85 ff                	test   edi,edi
c00078d5:	74 05                	je     c00078dc <f_mkfs+0x43b>
c00078d7:	4f                   	dec    edi
c00078d8:	74 44                	je     c000791e <f_mkfs+0x47d>
c00078da:	eb 4f                	jmp    c000792b <f_mkfs+0x48a>
c00078dc:	83 ec 0c             	sub    esp,0xc
c00078df:	0f b7 c3             	movzx  eax,bx
c00078e2:	50                   	push   eax
c00078e3:	e8 18 0e 00 00       	call   c0008700 <ff_wtoupper>
c00078e8:	83 c4 10             	add    esp,0x10
c00078eb:	89 c1                	mov    ecx,eax
c00078ed:	8d 53 01             	lea    edx,[ebx+0x1]
c00078f0:	66 39 c3             	cmp    bx,ax
c00078f3:	75 3e                	jne    c0007933 <f_mkfs+0x492>
c00078f5:	be 01 00 00 00       	mov    esi,0x1
c00078fa:	89 df                	mov    edi,ebx
c00078fc:	66 01 f7             	add    di,si
c00078ff:	75 07                	jne    c0007908 <f_mkfs+0x467>
c0007901:	83 fe 7f             	cmp    esi,0x7f
c0007904:	77 31                	ja     c0007937 <f_mkfs+0x496>
c0007906:	eb 16                	jmp    c000791e <f_mkfs+0x47d>
c0007908:	83 ec 0c             	sub    esp,0xc
c000790b:	0f b7 ff             	movzx  edi,di
c000790e:	57                   	push   edi
c000790f:	e8 ec 0d 00 00       	call   c0008700 <ff_wtoupper>
c0007914:	83 c4 10             	add    esp,0x10
c0007917:	39 c7                	cmp    edi,eax
c0007919:	75 e6                	jne    c0007901 <f_mkfs+0x460>
c000791b:	46                   	inc    esi
c000791c:	eb dc                	jmp    c00078fa <f_mkfs+0x459>
c000791e:	31 c0                	xor    eax,eax
c0007920:	89 d9                	mov    ecx,ebx
c0007922:	4e                   	dec    esi
c0007923:	0f 95 c0             	setne  al
c0007926:	43                   	inc    ebx
c0007927:	89 c7                	mov    edi,eax
c0007929:	eb 14                	jmp    c000793f <f_mkfs+0x49e>
c000792b:	89 f1                	mov    ecx,esi
c000792d:	01 f3                	add    ebx,esi
c000792f:	31 ff                	xor    edi,edi
c0007931:	eb 0c                	jmp    c000793f <f_mkfs+0x49e>
c0007933:	89 d3                	mov    ebx,edx
c0007935:	eb 08                	jmp    c000793f <f_mkfs+0x49e>
c0007937:	bf 02 00 00 00       	mov    edi,0x2
c000793c:	83 c9 ff             	or     ecx,0xffffffff
c000793f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007943:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007946:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000794a:	0f b6 c1             	movzx  eax,cl
c000794d:	e8 04 a7 ff ff       	call   c0002056 <xsum32>
c0007952:	66 c1 e9 08          	shr    cx,0x8
c0007956:	89 c2                	mov    edx,eax
c0007958:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000795b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000795f:	0f b7 c1             	movzx  eax,cx
c0007962:	e8 ef a6 ff ff       	call   c0002056 <xsum32>
c0007967:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000796c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007970:	66 85 db             	test   bx,bx
c0007973:	74 1f                	je     c0007994 <f_mkfs+0x4f3>
c0007975:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007978:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000797f:	83 c0 02             	add    eax,0x2
c0007982:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007988:	39 c2                	cmp    edx,eax
c000798a:	74 08                	je     c0007994 <f_mkfs+0x4f3>
c000798c:	89 04 24             	mov    DWORD PTR [esp],eax
c000798f:	e9 3f ff ff ff       	jmp    c00078d3 <f_mkfs+0x432>
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	83 ec 0c             	sub    esp,0xc
c000799a:	05 01 02 00 00       	add    eax,0x201
c000799f:	c1 e8 09             	shr    eax,0x9
c00079a2:	50                   	push   eax
c00079a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00079a7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079ab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079af:	55                   	push   ebp
c00079b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079b4:	e8 6d a1 ff ff       	call   c0001b26 <disk_write>
c00079b9:	83 c4 20             	add    esp,0x20
c00079bc:	85 c0                	test   eax,eax
c00079be:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079c1:	0f 85 8b 0b 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00079c7:	89 d0                	mov    eax,edx
c00079c9:	31 d2                	xor    edx,edx
c00079cb:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079cf:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079d3:	66 85 db             	test   bx,bx
c00079d6:	74 04                	je     c00079dc <f_mkfs+0x53b>
c00079d8:	31 c0                	xor    eax,eax
c00079da:	eb b0                	jmp    c000798c <f_mkfs+0x4eb>
c00079dc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079e0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079e4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079e8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079ee:	31 d2                	xor    edx,edx
c00079f0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00079fb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00079ff:	c1 eb 09             	shr    ebx,0x9
c0007a02:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a09:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a0d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a15:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a19:	8d 70 01             	lea    esi,[eax+0x1]
c0007a1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a20:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a24:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a2b:	31 d2                	xor    edx,edx
c0007a2d:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a32:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a35:	89 c1                	mov    ecx,eax
c0007a37:	89 e8                	mov    eax,ebp
c0007a39:	e8 b1 a1 ff ff       	call   c0001bef <mem_set>
c0007a3e:	31 c0                	xor    eax,eax
c0007a40:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a43:	76 10                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a45:	83 fe 07             	cmp    esi,0x7
c0007a48:	76 0b                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a4a:	40                   	inc    eax
c0007a4b:	83 ee 08             	sub    esi,0x8
c0007a4e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a53:	eb eb                	jmp    c0007a40 <f_mkfs+0x59f>
c0007a55:	b2 01                	mov    dl,0x1
c0007a57:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a5b:	85 f6                	test   esi,esi
c0007a5d:	74 0c                	je     c0007a6b <f_mkfs+0x5ca>
c0007a5f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a62:	76 07                	jbe    c0007a6b <f_mkfs+0x5ca>
c0007a64:	08 11                	or     BYTE PTR [ecx],dl
c0007a66:	4e                   	dec    esi
c0007a67:	d1 e2                	shl    edx,1
c0007a69:	eb f0                	jmp    c0007a5b <f_mkfs+0x5ba>
c0007a6b:	89 df                	mov    edi,ebx
c0007a6d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a71:	76 04                	jbe    c0007a77 <f_mkfs+0x5d6>
c0007a73:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a77:	83 ec 0c             	sub    esp,0xc
c0007a7a:	57                   	push   edi
c0007a7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a83:	55                   	push   ebp
c0007a84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a88:	e8 99 a0 ff ff       	call   c0001b26 <disk_write>
c0007a8d:	83 c4 20             	add    esp,0x20
c0007a90:	85 c0                	test   eax,eax
c0007a92:	0f 85 ba 0a 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007a98:	31 d2                	xor    edx,edx
c0007a9a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007a9e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007aa2:	29 fb                	sub    ebx,edi
c0007aa4:	0f 85 7a ff ff ff    	jne    c0007a24 <f_mkfs+0x583>
c0007aaa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007aae:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007ab6:	31 f6                	xor    esi,esi
c0007ab8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007abc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007abf:	31 d2                	xor    edx,edx
c0007ac1:	89 e8                	mov    eax,ebp
c0007ac3:	e8 27 a1 ff ff       	call   c0001bef <mem_set>
c0007ac8:	31 c9                	xor    ecx,ecx
c0007aca:	85 db                	test   ebx,ebx
c0007acc:	75 40                	jne    c0007b0e <f_mkfs+0x66d>
c0007ace:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007ad3:	89 e8                	mov    eax,ebp
c0007ad5:	bb 02 00 00 00       	mov    ebx,0x2
c0007ada:	e8 f2 a0 ff ff       	call   c0001bd1 <st_dword>
c0007adf:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ae2:	83 ca ff             	or     edx,0xffffffff
c0007ae5:	e8 e7 a0 ff ff       	call   c0001bd1 <st_dword>
c0007aea:	b9 08 00 00 00       	mov    ecx,0x8
c0007aef:	eb 1d                	jmp    c0007b0e <f_mkfs+0x66d>
c0007af1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007af4:	76 3b                	jbe    c0007b31 <f_mkfs+0x690>
c0007af6:	43                   	inc    ebx
c0007af7:	83 fe 01             	cmp    esi,0x1
c0007afa:	89 da                	mov    edx,ebx
c0007afc:	77 03                	ja     c0007b01 <f_mkfs+0x660>
c0007afe:	83 ca ff             	or     edx,0xffffffff
c0007b01:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007b05:	4e                   	dec    esi
c0007b06:	e8 c6 a0 ff ff       	call   c0001bd1 <st_dword>
c0007b0b:	83 c1 04             	add    ecx,0x4
c0007b0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b12:	85 f6                	test   esi,esi
c0007b14:	75 db                	jne    c0007af1 <f_mkfs+0x650>
c0007b16:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b1b:	77 14                	ja     c0007b31 <f_mkfs+0x690>
c0007b1d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b21:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b28:	85 f6                	test   esi,esi
c0007b2a:	74 05                	je     c0007b31 <f_mkfs+0x690>
c0007b2c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b2f:	77 dd                	ja     c0007b0e <f_mkfs+0x66d>
c0007b31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b35:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b39:	39 cf                	cmp    edi,ecx
c0007b3b:	76 02                	jbe    c0007b3f <f_mkfs+0x69e>
c0007b3d:	89 cf                	mov    edi,ecx
c0007b3f:	83 ec 0c             	sub    esp,0xc
c0007b42:	57                   	push   edi
c0007b43:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b47:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b4b:	55                   	push   ebp
c0007b4c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b50:	e8 d1 9f ff ff       	call   c0001b26 <disk_write>
c0007b55:	83 c4 20             	add    esp,0x20
c0007b58:	85 c0                	test   eax,eax
c0007b5a:	0f 85 f2 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007b60:	31 d2                	xor    edx,edx
c0007b62:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b66:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b6a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b6e:	0f 85 48 ff ff ff    	jne    c0007abc <f_mkfs+0x61b>
c0007b74:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b77:	31 d2                	xor    edx,edx
c0007b79:	89 e8                	mov    eax,ebp
c0007b7b:	31 ff                	xor    edi,edi
c0007b7d:	e8 6d a0 ff ff       	call   c0001bef <mem_set>
c0007b82:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b85:	ba 02 00 00 00       	mov    edx,0x2
c0007b8a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b8e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007b92:	e8 3a a0 ff ff       	call   c0001bd1 <st_dword>
c0007b97:	8d 45 38             	lea    eax,[ebp+0x38]
c0007b9a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007b9e:	e8 2e a0 ff ff       	call   c0001bd1 <st_dword>
c0007ba3:	8d 45 44             	lea    eax,[ebp+0x44]
c0007ba6:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007baa:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007bae:	e8 1e a0 ff ff       	call   c0001bd1 <st_dword>
c0007bb3:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bb6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bbe:	83 c2 02             	add    edx,0x2
c0007bc1:	e8 0b a0 ff ff       	call   c0001bd1 <st_dword>
c0007bc6:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bc9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bcd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bd1:	e8 fb 9f ff ff       	call   c0001bd1 <st_dword>
c0007bd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bda:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bdf:	89 c6                	mov    esi,eax
c0007be1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007be5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007be9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bec:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007bf0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007bf3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bf7:	39 cb                	cmp    ebx,ecx
c0007bf9:	76 02                	jbe    c0007bfd <f_mkfs+0x75c>
c0007bfb:	89 cb                	mov    ebx,ecx
c0007bfd:	83 ec 0c             	sub    esp,0xc
c0007c00:	53                   	push   ebx
c0007c01:	57                   	push   edi
c0007c02:	56                   	push   esi
c0007c03:	55                   	push   ebp
c0007c04:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c08:	e8 19 9f ff ff       	call   c0001b26 <disk_write>
c0007c0d:	83 c4 20             	add    esp,0x20
c0007c10:	85 c0                	test   eax,eax
c0007c12:	0f 85 3a 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007c18:	31 d2                	xor    edx,edx
c0007c1a:	b9 00 02 00 00       	mov    ecx,0x200
c0007c1f:	89 e8                	mov    eax,ebp
c0007c21:	e8 c9 9f ff ff       	call   c0001bef <mem_set>
c0007c26:	31 d2                	xor    edx,edx
c0007c28:	01 de                	add    esi,ebx
c0007c2a:	11 d7                	adc    edi,edx
c0007c2c:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c2f:	75 bf                	jne    c0007bf0 <f_mkfs+0x74f>
c0007c31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c39:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c41:	b9 00 02 00 00       	mov    ecx,0x200
c0007c46:	31 d2                	xor    edx,edx
c0007c48:	89 e8                	mov    eax,ebp
c0007c4a:	e8 a0 9f ff ff       	call   c0001bef <mem_set>
c0007c4f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c54:	ba a0 20 02 c0       	mov    edx,0xc00220a0
c0007c59:	89 e8                	mov    eax,ebp
c0007c5b:	e8 7a 9f ff ff       	call   c0001bda <mem_cpy>
c0007c60:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c67:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c6b:	e8 64 9f ff ff       	call   c0001bd4 <st_qword>
c0007c70:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c74:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c77:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c7b:	e8 54 9f ff ff       	call   c0001bd4 <st_qword>
c0007c80:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c83:	ba 20 00 00 00       	mov    edx,0x20
c0007c88:	e8 44 9f ff ff       	call   c0001bd1 <st_dword>
c0007c8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007c91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c95:	e8 37 9f ff ff       	call   c0001bd1 <st_dword>
c0007c9a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007c9e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007ca2:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007ca6:	e8 26 9f ff ff       	call   c0001bd1 <st_dword>
c0007cab:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007cae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cb2:	e8 1a 9f ff ff       	call   c0001bd1 <st_dword>
c0007cb7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007cbb:	8d 50 02             	lea    edx,[eax+0x2]
c0007cbe:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cc1:	e8 0b 9f ff ff       	call   c0001bd1 <st_dword>
c0007cc6:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cc9:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cce:	e8 fe 9e ff ff       	call   c0001bd1 <st_dword>
c0007cd3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007cd6:	ba 00 01 00 00       	mov    edx,0x100
c0007cdb:	e8 ed 9e ff ff       	call   c0001bcd <st_word>
c0007ce0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007ce4:	b8 0a 00 00 00       	mov    eax,0xa
c0007ce9:	48                   	dec    eax
c0007cea:	74 05                	je     c0007cf1 <f_mkfs+0x850>
c0007cec:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007cef:	eb f8                	jmp    c0007ce9 <f_mkfs+0x848>
c0007cf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cf5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007cf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007cfd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007d01:	74 05                	je     c0007d08 <f_mkfs+0x867>
c0007d03:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007d06:	eb f5                	jmp    c0007cfd <f_mkfs+0x85c>
c0007d08:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d0b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d10:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d16:	31 db                	xor    ebx,ebx
c0007d18:	e8 b0 9e ff ff       	call   c0001bcd <st_word>
c0007d1d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d23:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d28:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d2b:	e8 9d 9e ff ff       	call   c0001bcd <st_word>
c0007d30:	31 c9                	xor    ecx,ecx
c0007d32:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d35:	83 f8 01             	cmp    eax,0x1
c0007d38:	76 13                	jbe    c0007d4d <f_mkfs+0x8ac>
c0007d3a:	83 f9 70             	cmp    ecx,0x70
c0007d3d:	74 0e                	je     c0007d4d <f_mkfs+0x8ac>
c0007d3f:	89 da                	mov    edx,ebx
c0007d41:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d46:	e8 0b a3 ff ff       	call   c0002056 <xsum32>
c0007d4b:	89 c3                	mov    ebx,eax
c0007d4d:	41                   	inc    ecx
c0007d4e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d54:	75 dc                	jne    c0007d32 <f_mkfs+0x891>
c0007d56:	89 f0                	mov    eax,esi
c0007d58:	89 fa                	mov    edx,edi
c0007d5a:	83 c0 01             	add    eax,0x1
c0007d5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d61:	83 d2 00             	adc    edx,0x0
c0007d64:	83 ec 0c             	sub    esp,0xc
c0007d67:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d6b:	6a 01                	push   0x1
c0007d6d:	57                   	push   edi
c0007d6e:	56                   	push   esi
c0007d6f:	55                   	push   ebp
c0007d70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d74:	e8 ad 9d ff ff       	call   c0001b26 <disk_write>
c0007d79:	83 c4 20             	add    esp,0x20
c0007d7c:	85 c0                	test   eax,eax
c0007d7e:	0f 85 ce 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007d84:	31 d2                	xor    edx,edx
c0007d86:	b9 00 02 00 00       	mov    ecx,0x200
c0007d8b:	89 e8                	mov    eax,ebp
c0007d8d:	e8 5d 9e ff ff       	call   c0001bef <mem_set>
c0007d92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d97:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d9a:	e8 2e 9e ff ff       	call   c0001bcd <st_word>
c0007d9f:	89 f0                	mov    eax,esi
c0007da1:	89 fa                	mov    edx,edi
c0007da3:	83 c0 09             	add    eax,0x9
c0007da6:	83 d2 00             	adc    edx,0x0
c0007da9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007db0:	31 c9                	xor    ecx,ecx
c0007db2:	41                   	inc    ecx
c0007db3:	89 da                	mov    edx,ebx
c0007db5:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007dba:	e8 97 a2 ff ff       	call   c0002056 <xsum32>
c0007dbf:	89 c3                	mov    ebx,eax
c0007dc1:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dc7:	75 e9                	jne    c0007db2 <f_mkfs+0x911>
c0007dc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007dcd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dd1:	83 c0 01             	add    eax,0x1
c0007dd4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007dd8:	83 d2 00             	adc    edx,0x0
c0007ddb:	83 ec 0c             	sub    esp,0xc
c0007dde:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007de2:	6a 01                	push   0x1
c0007de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007dec:	55                   	push   ebp
c0007ded:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007df1:	e8 30 9d ff ff       	call   c0001b26 <disk_write>
c0007df6:	83 c4 20             	add    esp,0x20
c0007df9:	85 c0                	test   eax,eax
c0007dfb:	0f 85 51 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e05:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e09:	75 09                	jne    c0007e14 <f_mkfs+0x973>
c0007e0b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e0e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e12:	74 12                	je     c0007e26 <f_mkfs+0x985>
c0007e14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e18:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e1c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e20:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e24:	eb 8a                	jmp    c0007db0 <f_mkfs+0x90f>
c0007e26:	31 d2                	xor    edx,edx
c0007e28:	b9 00 02 00 00       	mov    ecx,0x200
c0007e2d:	89 e8                	mov    eax,ebp
c0007e2f:	e8 bb 9d ff ff       	call   c0001bef <mem_set>
c0007e34:	83 c6 0b             	add    esi,0xb
c0007e37:	83 d7 00             	adc    edi,0x0
c0007e3a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e3e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e42:	31 c9                	xor    ecx,ecx
c0007e44:	41                   	inc    ecx
c0007e45:	89 da                	mov    edx,ebx
c0007e47:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e4c:	e8 05 a2 ff ff       	call   c0002056 <xsum32>
c0007e51:	89 c3                	mov    ebx,eax
c0007e53:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e59:	75 e9                	jne    c0007e44 <f_mkfs+0x9a3>
c0007e5b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e5e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e62:	83 c6 01             	add    esi,0x1
c0007e65:	83 d7 00             	adc    edi,0x0
c0007e68:	83 ec 0c             	sub    esp,0xc
c0007e6b:	6a 01                	push   0x1
c0007e6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e75:	55                   	push   ebp
c0007e76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e7a:	e8 a7 9c ff ff       	call   c0001b26 <disk_write>
c0007e7f:	83 c4 20             	add    esp,0x20
c0007e82:	85 c0                	test   eax,eax
c0007e84:	0f 85 c8 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e8a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e8e:	75 06                	jne    c0007e96 <f_mkfs+0x9f5>
c0007e90:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007e94:	74 09                	je     c0007e9f <f_mkfs+0x9fe>
c0007e96:	89 34 24             	mov    DWORD PTR [esp],esi
c0007e99:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007e9d:	eb a3                	jmp    c0007e42 <f_mkfs+0x9a1>
c0007e9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007ea3:	89 da                	mov    edx,ebx
c0007ea5:	01 e8                	add    eax,ebp
c0007ea7:	e8 25 9d ff ff       	call   c0001bd1 <st_dword>
c0007eac:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007eb1:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007eb9:	75 e4                	jne    c0007e9f <f_mkfs+0x9fe>
c0007ebb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ebe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ec2:	83 c6 02             	add    esi,0x2
c0007ec5:	83 d7 00             	adc    edi,0x0
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	6a 01                	push   0x1
c0007ecd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed5:	55                   	push   ebp
c0007ed6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007eda:	e8 47 9c ff ff       	call   c0001b26 <disk_write>
c0007edf:	83 c4 20             	add    esp,0x20
c0007ee2:	85 c0                	test   eax,eax
c0007ee4:	0f 85 68 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007eea:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007eef:	74 0d                	je     c0007efe <f_mkfs+0xa5d>
c0007ef1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ef9:	e9 43 fd ff ff       	jmp    c0007c41 <f_mkfs+0x7a0>
c0007efe:	b1 07                	mov    cl,0x7
c0007f00:	e9 e3 05 00 00       	jmp    c00084e8 <f_mkfs+0x1047>
c0007f05:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f0a:	0f 85 4f 02 00 00    	jne    c000815f <f_mkfs+0xcbe>
c0007f10:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f15:	0f 86 22 02 00 00    	jbe    c000813d <f_mkfs+0xc9c>
c0007f1b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f20:	0f 85 81 06 00 00    	jne    c00085a7 <f_mkfs+0x1106>
c0007f26:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f2d:	83 f8 40             	cmp    eax,0x40
c0007f30:	0f 87 51 06 00 00    	ja     c0008587 <f_mkfs+0x10e6>
c0007f36:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f3a:	85 ff                	test   edi,edi
c0007f3c:	75 1c                	jne    c0007f5a <f_mkfs+0xab9>
c0007f3e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f41:	ba a0 1f 02 c0       	mov    edx,0xc0021fa0
c0007f46:	c1 e9 0c             	shr    ecx,0xc
c0007f49:	bf 01 00 00 00       	mov    edi,0x1
c0007f4e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f51:	66 85 c0             	test   ax,ax
c0007f54:	0f 85 95 01 00 00    	jne    c00080ef <f_mkfs+0xc4e>
c0007f5a:	31 d2                	xor    edx,edx
c0007f5c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f5f:	f7 f7                	div    edi
c0007f61:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f66:	0f 86 95 01 00 00    	jbe    c0008101 <f_mkfs+0xc60>
c0007f6c:	83 c0 02             	add    eax,0x2
c0007f6f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f74:	01 c0                	add    eax,eax
c0007f76:	05 ff 01 00 00       	add    eax,0x1ff
c0007f7b:	be 01 00 00 00       	mov    esi,0x1
c0007f80:	c1 e8 09             	shr    eax,0x9
c0007f83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f8b:	c1 e0 05             	shl    eax,0x5
c0007f8e:	c1 e8 09             	shr    eax,0x9
c0007f91:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007f95:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007f9a:	31 d2                	xor    edx,edx
c0007f9c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007fa0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007fa4:	89 f0                	mov    eax,esi
c0007fa6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007faa:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007fb2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fb6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fba:	31 d2                	xor    edx,edx
c0007fbc:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fc1:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fc5:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fc9:	31 db                	xor    ebx,ebx
c0007fcb:	01 c8                	add    eax,ecx
c0007fcd:	11 da                	adc    edx,ebx
c0007fcf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fd3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fd7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007fdb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fdf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007fe3:	f7 da                	neg    edx
c0007fe5:	21 d1                	and    ecx,edx
c0007fe7:	29 d9                	sub    ecx,ebx
c0007fe9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fee:	0f 85 20 01 00 00    	jne    c0008114 <f_mkfs+0xc73>
c0007ff4:	31 db                	xor    ebx,ebx
c0007ff6:	01 ce                	add    esi,ecx
c0007ff8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ffc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0008000:	31 d2                	xor    edx,edx
c0008002:	89 f8                	mov    eax,edi
c0008004:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008008:	c1 e0 04             	shl    eax,0x4
c000800b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c000800f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0008013:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0008017:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c000801b:	39 04 24             	cmp    DWORD PTR [esp],eax
c000801e:	19 d3                	sbb    ebx,edx
c0008020:	0f 82 40 01 00 00    	jb     c0008166 <f_mkfs+0xcc5>
c0008026:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008029:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000802d:	89 c8                	mov    eax,ecx
c000802f:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008034:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008038:	29 f0                	sub    eax,esi
c000803a:	29 d0                	sub    eax,edx
c000803c:	31 d2                	xor    edx,edx
c000803e:	f7 f7                	div    edi
c0008040:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008045:	89 c3                	mov    ebx,eax
c0008047:	0f 85 b8 fe ff ff    	jne    c0007f05 <f_mkfs+0xa64>
c000804d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0008052:	0f 87 1d 01 00 00    	ja     c0008175 <f_mkfs+0xcd4>
c0008058:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000805d:	0f 85 03 01 00 00    	jne    c0008166 <f_mkfs+0xcc5>
c0008063:	83 ff 01             	cmp    edi,0x1
c0008066:	0f 86 fa 00 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c000806c:	d1 ef                	shr    edi,1
c000806e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008072:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008076:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008079:	85 db                	test   ebx,ebx
c000807b:	75 2d                	jne    c00080aa <f_mkfs+0xc09>
c000807d:	89 cb                	mov    ebx,ecx
c000807f:	ba b0 1f 02 c0       	mov    edx,0xc0021fb0
c0008084:	c1 eb 11             	shr    ebx,0x11
c0008087:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000808f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0008092:	66 85 c0             	test   ax,ax
c0008095:	74 11                	je     c00080a8 <f_mkfs+0xc07>
c0008097:	83 c2 02             	add    edx,0x2
c000809a:	39 d8                	cmp    eax,ebx
c000809c:	77 0a                	ja     c00080a8 <f_mkfs+0xc07>
c000809e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080a2:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c00080a6:	eb e7                	jmp    c000808f <f_mkfs+0xbee>
c00080a8:	31 db                	xor    ebx,ebx
c00080aa:	31 d2                	xor    edx,edx
c00080ac:	89 c8                	mov    eax,ecx
c00080ae:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080b2:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080b9:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080be:	c1 ea 09             	shr    edx,0x9
c00080c1:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080c6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080ca:	0f 87 96 00 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00080d0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080d4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080dc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080e0:	be 20 00 00 00       	mov    esi,0x20
c00080e5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080ea:	e9 a6 fe ff ff       	jmp    c0007f95 <f_mkfs+0xaf4>
c00080ef:	83 c2 02             	add    edx,0x2
c00080f2:	39 c8                	cmp    eax,ecx
c00080f4:	0f 87 60 fe ff ff    	ja     c0007f5a <f_mkfs+0xab9>
c00080fa:	01 ff                	add    edi,edi
c00080fc:	e9 4d fe ff ff       	jmp    c0007f4e <f_mkfs+0xaad>
c0008101:	8d 04 40             	lea    eax,[eax+eax*2]
c0008104:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008109:	40                   	inc    eax
c000810a:	d1 e8                	shr    eax,1
c000810c:	83 c0 03             	add    eax,0x3
c000810f:	e9 62 fe ff ff       	jmp    c0007f76 <f_mkfs+0xad5>
c0008114:	31 d2                	xor    edx,edx
c0008116:	89 c8                	mov    eax,ecx
c0008118:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000811c:	85 d2                	test   edx,edx
c000811e:	74 0c                	je     c000812c <f_mkfs+0xc8b>
c0008120:	49                   	dec    ecx
c0008121:	46                   	inc    esi
c0008122:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008127:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c000812c:	89 c8                	mov    eax,ecx
c000812e:	31 d2                	xor    edx,edx
c0008130:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008134:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008138:	e9 c3 fe ff ff       	jmp    c0008000 <f_mkfs+0xb5f>
c000813d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008142:	77 31                	ja     c0008175 <f_mkfs+0xcd4>
c0008144:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008149:	75 1b                	jne    c0008166 <f_mkfs+0xcc5>
c000814b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000814e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008152:	3d 80 00 00 00       	cmp    eax,0x80
c0008157:	0f 86 d9 fd ff ff    	jbe    c0007f36 <f_mkfs+0xa95>
c000815d:	eb 07                	jmp    c0008166 <f_mkfs+0xcc5>
c000815f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008164:	76 0a                	jbe    c0008170 <f_mkfs+0xccf>
c0008166:	bb 0e 00 00 00       	mov    ebx,0xe
c000816b:	e9 ff 03 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0008170:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008175:	31 d2                	xor    edx,edx
c0008177:	b9 00 02 00 00       	mov    ecx,0x200
c000817c:	89 e8                	mov    eax,ebp
c000817e:	e8 6c 9a ff ff       	call   c0001bef <mem_set>
c0008183:	b9 0b 00 00 00       	mov    ecx,0xb
c0008188:	ba c2 20 02 c0       	mov    edx,0xc00220c2
c000818d:	89 e8                	mov    eax,ebp
c000818f:	e8 46 9a ff ff       	call   c0001bda <mem_cpy>
c0008194:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008197:	ba 00 02 00 00       	mov    edx,0x200
c000819c:	e8 2c 9a ff ff       	call   c0001bcd <st_word>
c00081a1:	89 f8                	mov    eax,edi
c00081a3:	0f b7 d6             	movzx  edx,si
c00081a6:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081a9:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081ac:	e8 1c 9a ff ff       	call   c0001bcd <st_word>
c00081b1:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081b5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081ba:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081bd:	75 08                	jne    c00081c7 <f_mkfs+0xd26>
c00081bf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081c7:	8d 45 11             	lea    eax,[ebp+0x11]
c00081ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081ce:	e8 fa 99 ff ff       	call   c0001bcd <st_word>
c00081d3:	b8 ff ff 00 00       	mov    eax,0xffff
c00081d8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081dc:	39 d0                	cmp    eax,edx
c00081de:	b8 00 00 00 00       	mov    eax,0x0
c00081e3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081e7:	72 0a                	jb     c00081f3 <f_mkfs+0xd52>
c00081e9:	8d 45 13             	lea    eax,[ebp+0x13]
c00081ec:	e8 dc 99 ff ff       	call   c0001bcd <st_word>
c00081f1:	eb 08                	jmp    c00081fb <f_mkfs+0xd5a>
c00081f3:	8d 45 20             	lea    eax,[ebp+0x20]
c00081f6:	e8 d6 99 ff ff       	call   c0001bd1 <st_dword>
c00081fb:	8d 45 18             	lea    eax,[ebp+0x18]
c00081fe:	ba 3f 00 00 00       	mov    edx,0x3f
c0008203:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0008207:	e8 c1 99 ff ff       	call   c0001bcd <st_word>
c000820c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c000820f:	ba ff 00 00 00       	mov    edx,0xff
c0008214:	e8 b4 99 ff ff       	call   c0001bcd <st_word>
c0008219:	8d 45 1c             	lea    eax,[ebp+0x1c]
c000821c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008220:	e8 ac 99 ff ff       	call   c0001bd1 <st_dword>
c0008225:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000822a:	75 57                	jne    c0008283 <f_mkfs+0xde2>
c000822c:	8d 45 43             	lea    eax,[ebp+0x43]
c000822f:	ba 00 00 21 50       	mov    edx,0x50210000
c0008234:	e8 98 99 ff ff       	call   c0001bd1 <st_dword>
c0008239:	8d 45 24             	lea    eax,[ebp+0x24]
c000823c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008240:	e8 8c 99 ff ff       	call   c0001bd1 <st_dword>
c0008245:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008248:	ba 02 00 00 00       	mov    edx,0x2
c000824d:	e8 7f 99 ff ff       	call   c0001bd1 <st_dword>
c0008252:	8d 45 30             	lea    eax,[ebp+0x30]
c0008255:	ba 01 00 00 00       	mov    edx,0x1
c000825a:	e8 6e 99 ff ff       	call   c0001bcd <st_word>
c000825f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008262:	ba 06 00 00 00       	mov    edx,0x6
c0008267:	e8 61 99 ff ff       	call   c0001bcd <st_word>
c000826c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008270:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008274:	8d 45 47             	lea    eax,[ebp+0x47]
c0008277:	b9 13 00 00 00       	mov    ecx,0x13
c000827c:	ba ce 20 02 c0       	mov    edx,0xc00220ce
c0008281:	eb 2f                	jmp    c00082b2 <f_mkfs+0xe11>
c0008283:	8d 45 27             	lea    eax,[ebp+0x27]
c0008286:	ba 00 00 21 50       	mov    edx,0x50210000
c000828b:	e8 41 99 ff ff       	call   c0001bd1 <st_dword>
c0008290:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008295:	8d 45 16             	lea    eax,[ebp+0x16]
c0008298:	e8 30 99 ff ff       	call   c0001bcd <st_word>
c000829d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00082a1:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00082a5:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082a8:	b9 13 00 00 00       	mov    ecx,0x13
c00082ad:	ba e2 20 02 c0       	mov    edx,0xc00220e2
c00082b2:	e8 23 99 ff ff       	call   c0001bda <mem_cpy>
c00082b7:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082bd:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082c2:	89 f0                	mov    eax,esi
c00082c4:	e8 04 99 ff ff       	call   c0001bcd <st_word>
c00082c9:	83 ec 0c             	sub    esp,0xc
c00082cc:	6a 01                	push   0x1
c00082ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d6:	55                   	push   ebp
c00082d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082db:	e8 46 98 ff ff       	call   c0001b26 <disk_write>
c00082e0:	83 c4 20             	add    esp,0x20
c00082e3:	85 c0                	test   eax,eax
c00082e5:	0f 85 67 02 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00082eb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082f0:	0f 85 b7 00 00 00    	jne    c00083ad <f_mkfs+0xf0c>
c00082f6:	83 ec 0c             	sub    esp,0xc
c00082f9:	6a 01                	push   0x1
c00082fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008303:	83 c0 06             	add    eax,0x6
c0008306:	83 d2 00             	adc    edx,0x0
c0008309:	52                   	push   edx
c000830a:	50                   	push   eax
c000830b:	55                   	push   ebp
c000830c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008310:	e8 11 98 ff ff       	call   c0001b26 <disk_write>
c0008315:	83 c4 20             	add    esp,0x20
c0008318:	b9 00 02 00 00       	mov    ecx,0x200
c000831d:	31 d2                	xor    edx,edx
c000831f:	89 e8                	mov    eax,ebp
c0008321:	e8 c9 98 ff ff       	call   c0001bef <mem_set>
c0008326:	ba 52 52 61 41       	mov    edx,0x41615252
c000832b:	89 e8                	mov    eax,ebp
c000832d:	e8 9f 98 ff ff       	call   c0001bd1 <st_dword>
c0008332:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008338:	ba 72 72 41 61       	mov    edx,0x61417272
c000833d:	e8 8f 98 ff ff       	call   c0001bd1 <st_dword>
c0008342:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008345:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000834b:	e8 81 98 ff ff       	call   c0001bd1 <st_dword>
c0008350:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008356:	ba 02 00 00 00       	mov    edx,0x2
c000835b:	e8 71 98 ff ff       	call   c0001bd1 <st_dword>
c0008360:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008365:	89 f0                	mov    eax,esi
c0008367:	e8 61 98 ff ff       	call   c0001bcd <st_word>
c000836c:	83 ec 0c             	sub    esp,0xc
c000836f:	6a 01                	push   0x1
c0008371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008375:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008379:	83 c0 07             	add    eax,0x7
c000837c:	83 d2 00             	adc    edx,0x0
c000837f:	52                   	push   edx
c0008380:	50                   	push   eax
c0008381:	55                   	push   ebp
c0008382:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008386:	e8 9b 97 ff ff       	call   c0001b26 <disk_write>
c000838b:	83 c4 14             	add    esp,0x14
c000838e:	6a 01                	push   0x1
c0008390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008394:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008398:	83 c0 01             	add    eax,0x1
c000839b:	83 d2 00             	adc    edx,0x0
c000839e:	52                   	push   edx
c000839f:	50                   	push   eax
c00083a0:	55                   	push   ebp
c00083a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083a5:	e8 7c 97 ff ff       	call   c0001b26 <disk_write>
c00083aa:	83 c4 20             	add    esp,0x20
c00083ad:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083b4:	31 d2                	xor    edx,edx
c00083b6:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083bc:	31 db                	xor    ebx,ebx
c00083be:	89 e8                	mov    eax,ebp
c00083c0:	e8 2a 98 ff ff       	call   c0001bef <mem_set>
c00083c5:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083d1:	0f 94 c3             	sete   bl
c00083d4:	4b                   	dec    ebx
c00083d5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083db:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083e1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083e6:	75 21                	jne    c0008409 <f_mkfs+0xf68>
c00083e8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083ed:	89 e8                	mov    eax,ebp
c00083ef:	e8 dd 97 ff ff       	call   c0001bd1 <st_dword>
c00083f4:	8d 45 04             	lea    eax,[ebp+0x4]
c00083f7:	83 ca ff             	or     edx,0xffffffff
c00083fa:	e8 d2 97 ff ff       	call   c0001bd1 <st_dword>
c00083ff:	8d 45 08             	lea    eax,[ebp+0x8]
c0008402:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008407:	eb 04                	jmp    c000840d <f_mkfs+0xf6c>
c0008409:	89 da                	mov    edx,ebx
c000840b:	89 e8                	mov    eax,ebp
c000840d:	e8 bf 97 ff ff       	call   c0001bd1 <st_dword>
c0008412:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008416:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000841a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000841e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008422:	39 ce                	cmp    esi,ecx
c0008424:	76 02                	jbe    c0008428 <f_mkfs+0xf87>
c0008426:	89 ce                	mov    esi,ecx
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	56                   	push   esi
c000842c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008430:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008434:	55                   	push   ebp
c0008435:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008439:	e8 e8 96 ff ff       	call   c0001b26 <disk_write>
c000843e:	83 c4 20             	add    esp,0x20
c0008441:	85 c0                	test   eax,eax
c0008443:	0f 85 09 01 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0008449:	31 d2                	xor    edx,edx
c000844b:	b9 00 02 00 00       	mov    ecx,0x200
c0008450:	89 e8                	mov    eax,ebp
c0008452:	e8 98 97 ff ff       	call   c0001bef <mem_set>
c0008457:	31 d2                	xor    edx,edx
c0008459:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000845d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008461:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008465:	75 b3                	jne    c000841a <f_mkfs+0xf79>
c0008467:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000846a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008471:	40                   	inc    eax
c0008472:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008476:	0f 87 65 ff ff ff    	ja     c00083e1 <f_mkfs+0xf40>
c000847c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008481:	74 04                	je     c0008487 <f_mkfs+0xfe6>
c0008483:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008487:	89 fb                	mov    ebx,edi
c0008489:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000848d:	76 04                	jbe    c0008493 <f_mkfs+0xff2>
c000848f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008493:	83 ec 0c             	sub    esp,0xc
c0008496:	53                   	push   ebx
c0008497:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849f:	55                   	push   ebp
c00084a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084a4:	e8 7d 96 ff ff       	call   c0001b26 <disk_write>
c00084a9:	83 c4 20             	add    esp,0x20
c00084ac:	85 c0                	test   eax,eax
c00084ae:	0f 85 9e 00 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00084b4:	31 d2                	xor    edx,edx
c00084b6:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084ba:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084be:	29 df                	sub    edi,ebx
c00084c0:	75 c5                	jne    c0008487 <f_mkfs+0xfe6>
c00084c2:	b1 0c                	mov    cl,0xc
c00084c4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084c9:	74 1d                	je     c00084e8 <f_mkfs+0x1047>
c00084cb:	b8 ff ff 00 00       	mov    eax,0xffff
c00084d0:	b1 06                	mov    cl,0x6
c00084d2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084d6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084da:	72 0c                	jb     c00084e8 <f_mkfs+0x1047>
c00084dc:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084e1:	0f 94 c1             	sete   cl
c00084e4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084e8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084ed:	75 4c                	jne    c000853b <f_mkfs+0x109a>
c00084ef:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00084f3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00084f7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00084fe:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008505:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008510:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000851b:	0f b6 c9             	movzx  ecx,cl
c000851e:	83 ec 0c             	sub    esp,0xc
c0008521:	55                   	push   ebp
c0008522:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008529:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000852d:	e8 f9 bf ff ff       	call   c000452b <create_partition>
c0008532:	83 c4 10             	add    esp,0x10
c0008535:	89 c3                	mov    ebx,eax
c0008537:	85 c0                	test   eax,eax
c0008539:	75 34                	jne    c000856f <f_mkfs+0x10ce>
c000853b:	31 db                	xor    ebx,ebx
c000853d:	50                   	push   eax
c000853e:	6a 00                	push   0x0
c0008540:	6a 00                	push   0x0
c0008542:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008546:	e8 f1 95 ff ff       	call   c0001b3c <disk_ioctl>
c000854b:	83 c4 10             	add    esp,0x10
c000854e:	85 c0                	test   eax,eax
c0008550:	74 1d                	je     c000856f <f_mkfs+0x10ce>
c0008552:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000855a:	75 0c                	jne    c0008568 <f_mkfs+0x10c7>
c000855c:	83 ec 0c             	sub    esp,0xc
c000855f:	55                   	push   ebp
c0008560:	e8 77 00 00 00       	call   c00085dc <ff_memfree>
c0008565:	83 c4 10             	add    esp,0x10
c0008568:	bb 01 00 00 00       	mov    ebx,0x1
c000856d:	eb 48                	jmp    c00085b7 <f_mkfs+0x1116>
c000856f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008577:	75 3e                	jne    c00085b7 <f_mkfs+0x1116>
c0008579:	83 ec 0c             	sub    esp,0xc
c000857c:	55                   	push   ebp
c000857d:	e8 5a 00 00 00       	call   c00085dc <ff_memfree>
c0008582:	83 c4 10             	add    esp,0x10
c0008585:	eb 30                	jmp    c00085b7 <f_mkfs+0x1116>
c0008587:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000858c:	0f 85 eb fa ff ff    	jne    c000807d <f_mkfs+0xbdc>
c0008592:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008596:	81 ff 80 00 00 00    	cmp    edi,0x80
c000859c:	0f 86 b8 f9 ff ff    	jbe    c0007f5a <f_mkfs+0xab9>
c00085a2:	e9 bf fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085a7:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085ac:	0f 85 c0 fa ff ff    	jne    c0008072 <f_mkfs+0xbd1>
c00085b2:	e9 af fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085b7:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085bd:	89 d8                	mov    eax,ebx
c00085bf:	5b                   	pop    ebx
c00085c0:	5e                   	pop    esi
c00085c1:	5f                   	pop    edi
c00085c2:	5d                   	pop    ebp
c00085c3:	c3                   	ret    

c00085c4 <ff_memalloc>:
c00085c4:	83 ec 0c             	sub    esp,0xc
c00085c7:	83 ec 0c             	sub    esp,0xc
c00085ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085ce:	e8 f0 13 00 00       	call   c00099c3 <malloc>
c00085d3:	83 c4 10             	add    esp,0x10
c00085d6:	83 c4 0c             	add    esp,0xc
c00085d9:	c3                   	ret    
c00085da:	66 90                	xchg   ax,ax

c00085dc <ff_memfree>:
c00085dc:	83 ec 0c             	sub    esp,0xc
c00085df:	83 ec 0c             	sub    esp,0xc
c00085e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085e6:	e8 e8 13 00 00       	call   c00099d3 <free>
c00085eb:	83 c4 10             	add    esp,0x10
c00085ee:	90                   	nop
c00085ef:	83 c4 0c             	add    esp,0xc
c00085f2:	c3                   	ret    
c00085f3:	90                   	nop

c00085f4 <ff_uni2oem>:
c00085f4:	83 ec 14             	sub    esp,0x14
c00085f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085fb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008606:	c7 44 24 0c 00 24 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022400
c000860e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008613:	77 0b                	ja     c0008620 <ff_uni2oem+0x2c>
c0008615:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008619:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000861e:	eb 60                	jmp    c0008680 <ff_uni2oem+0x8c>
c0008620:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008628:	77 56                	ja     c0008680 <ff_uni2oem+0x8c>
c000862a:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008630:	75 4e                	jne    c0008680 <ff_uni2oem+0x8c>
c0008632:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008639:	eb 0d                	jmp    c0008648 <ff_uni2oem+0x54>
c000863b:	90                   	nop
c000863c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008641:	40                   	inc    eax
c0008642:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008647:	90                   	nop
c0008648:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000864e:	77 1c                	ja     c000866c <ff_uni2oem+0x78>
c0008650:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008655:	01 c0                	add    eax,eax
c0008657:	89 c2                	mov    edx,eax
c0008659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000865d:	01 d0                	add    eax,edx
c000865f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008662:	0f b7 c0             	movzx  eax,ax
c0008665:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008669:	75 d1                	jne    c000863c <ff_uni2oem+0x48>
c000866b:	90                   	nop
c000866c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008671:	83 e8 80             	sub    eax,0xffffff80
c0008674:	25 ff 00 00 00       	and    eax,0xff
c0008679:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000867e:	66 90                	xchg   ax,ax
c0008680:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008685:	83 c4 14             	add    esp,0x14
c0008688:	c3                   	ret    
c0008689:	8d 76 00             	lea    esi,[esi+0x0]

c000868c <ff_oem2uni>:
c000868c:	83 ec 18             	sub    esp,0x18
c000868f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008693:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008697:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000869c:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086a0:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00086a7:	c7 44 24 10 00 24 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022400
c00086af:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086b5:	77 0d                	ja     c00086c4 <ff_oem2uni+0x38>
c00086b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086bb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086c0:	eb 32                	jmp    c00086f4 <ff_oem2uni+0x68>
c00086c2:	66 90                	xchg   ax,ax
c00086c4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086ca:	75 28                	jne    c00086f4 <ff_oem2uni+0x68>
c00086cc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086d3:	77 1f                	ja     c00086f4 <ff_oem2uni+0x68>
c00086d5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086da:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086df:	01 c0                	add    eax,eax
c00086e1:	89 c2                	mov    edx,eax
c00086e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086e7:	01 d0                	add    eax,edx
c00086e9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086ec:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086f1:	8d 76 00             	lea    esi,[esi+0x0]
c00086f4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00086f9:	83 c4 18             	add    esp,0x18
c00086fc:	c3                   	ret    
c00086fd:	8d 76 00             	lea    esi,[esi+0x0]

c0008700 <ff_wtoupper>:
c0008700:	83 ec 10             	sub    esp,0x10
c0008703:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000870b:	0f 87 4f 01 00 00    	ja     c0008860 <ff_wtoupper+0x160>
c0008711:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008715:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000871a:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008721:	77 09                	ja     c000872c <ff_wtoupper+0x2c>
c0008723:	b8 00 22 02 c0       	mov    eax,0xc0022200
c0008728:	eb 0a                	jmp    c0008734 <ff_wtoupper+0x34>
c000872a:	66 90                	xchg   ax,ax
c000872c:	b8 40 21 02 c0       	mov    eax,0xc0022140
c0008731:	8d 76 00             	lea    esi,[esi+0x0]
c0008734:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008738:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000873c:	8d 50 02             	lea    edx,[eax+0x2]
c000873f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008743:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008746:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000874b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008751:	0f 84 fd 00 00 00    	je     c0008854 <ff_wtoupper+0x154>
c0008757:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000875c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008761:	0f 82 ed 00 00 00    	jb     c0008854 <ff_wtoupper+0x154>
c0008767:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000876b:	8d 50 02             	lea    edx,[eax+0x2]
c000876e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008772:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008775:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000877a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000877f:	66 c1 e8 08          	shr    ax,0x8
c0008783:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008788:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000878f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008794:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008799:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000879e:	01 ca                	add    edx,ecx
c00087a0:	39 d0                	cmp    eax,edx
c00087a2:	0f 8d 8c 00 00 00    	jge    c0008834 <ff_wtoupper+0x134>
c00087a8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087ad:	83 f8 08             	cmp    eax,0x8
c00087b0:	0f 87 9a 00 00 00    	ja     c0008850 <ff_wtoupper+0x150>
c00087b6:	8b 04 85 00 21 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffddf00]
c00087bd:	ff e0                	jmp    eax
c00087bf:	90                   	nop
c00087c0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087c5:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087ca:	29 c2                	sub    edx,eax
c00087cc:	89 d0                	mov    eax,edx
c00087ce:	01 c0                	add    eax,eax
c00087d0:	89 c2                	mov    edx,eax
c00087d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087d6:	01 d0                	add    eax,edx
c00087d8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087db:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087e0:	eb 4e                	jmp    c0008830 <ff_wtoupper+0x130>
c00087e2:	66 90                	xchg   ax,ax
c00087e4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087e9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087ed:	83 e0 01             	and    eax,0x1
c00087f0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00087f5:	eb 39                	jmp    c0008830 <ff_wtoupper+0x130>
c00087f7:	90                   	nop
c00087f8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00087fe:	eb 30                	jmp    c0008830 <ff_wtoupper+0x130>
c0008800:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008806:	eb 28                	jmp    c0008830 <ff_wtoupper+0x130>
c0008808:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000880e:	eb 20                	jmp    c0008830 <ff_wtoupper+0x130>
c0008810:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008816:	eb 18                	jmp    c0008830 <ff_wtoupper+0x130>
c0008818:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000881e:	eb 10                	jmp    c0008830 <ff_wtoupper+0x130>
c0008820:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008826:	eb 08                	jmp    c0008830 <ff_wtoupper+0x130>
c0008828:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000882f:	90                   	nop
c0008830:	eb 1e                	jmp    c0008850 <ff_wtoupper+0x150>
c0008832:	66 90                	xchg   ax,ax
c0008834:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000883a:	0f 85 f8 fe ff ff    	jne    c0008738 <ff_wtoupper+0x38>
c0008840:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008845:	01 c0                	add    eax,eax
c0008847:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000884b:	e9 e8 fe ff ff       	jmp    c0008738 <ff_wtoupper+0x38>
c0008850:	90                   	nop
c0008851:	8d 76 00             	lea    esi,[esi+0x0]
c0008854:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008859:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000885d:	8d 76 00             	lea    esi,[esi+0x0]
c0008860:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008864:	83 c4 10             	add    esp,0x10
c0008867:	c3                   	ret    

c0008868 <CPU::current()>:
c0008868:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c000886d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008873:	c3                   	ret    

c0008874 <operator new(unsigned long)>:
c0008874:	e9 4a 11 00 00       	jmp    c00099c3 <malloc>

c0008879 <operator delete(void*)>:
c0008879:	e9 65 11 00 00       	jmp    c00099e3 <rfree>

c000887e <disableIRQs()>:
c000887e:	fa                   	cli    
c000887f:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c0008885:	c3                   	ret    

c0008886 <enableIRQs()>:
c0008886:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000888b:	48                   	dec    eax
c000888c:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c0008891:	75 01                	jne    c0008894 <enableIRQs()+0xe>
c0008893:	fb                   	sti    
c0008894:	c3                   	ret    

c0008895 <lockScheduler()>:
c0008895:	fa                   	cli    
c0008896:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c000889c:	c3                   	ret    

c000889d <unlockScheduler()>:
c000889d:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c00088a2:	48                   	dec    eax
c00088a3:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c00088a8:	75 01                	jne    c00088ab <unlockScheduler()+0xe>
c00088aa:	fb                   	sti    
c00088ab:	c3                   	ret    

c00088ac <lockStuff()>:
c00088ac:	fa                   	cli    
c00088ad:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c00088b3:	ff 05 44 79 02 c0    	inc    DWORD PTR ds:0xc0027944
c00088b9:	c3                   	ret    

c00088ba <unlockStuff()>:
c00088ba:	83 ec 0c             	sub    esp,0xc
c00088bd:	a1 44 79 02 c0       	mov    eax,ds:0xc0027944
c00088c2:	48                   	dec    eax
c00088c3:	a3 44 79 02 c0       	mov    ds:0xc0027944,eax
c00088c8:	75 18                	jne    c00088e2 <unlockStuff()+0x28>
c00088ca:	83 3d 40 79 02 c0 00 	cmp    DWORD PTR ds:0xc0027940,0x0
c00088d1:	74 0f                	je     c00088e2 <unlockStuff()+0x28>
c00088d3:	c7 05 40 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027940,0x0
c00088dd:	e8 92 f6 00 00       	call   c0017f74 <schedule()>
c00088e2:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c00088e7:	48                   	dec    eax
c00088e8:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c00088ed:	75 01                	jne    c00088f0 <unlockStuff()+0x36>
c00088ef:	fb                   	sti    
c00088f0:	83 c4 0c             	add    esp,0xc
c00088f3:	c3                   	ret    

c00088f4 <Virt::getAKernelVAS()>:
c00088f4:	a1 b0 65 02 c0       	mov    eax,ds:0xc00265b0
c00088f9:	c3                   	ret    

c00088fa <__not_memcpy>:
c00088fa:	57                   	push   edi
c00088fb:	56                   	push   esi
c00088fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008900:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008904:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008908:	89 c7                	mov    edi,eax
c000890a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	c3                   	ret    
c000890f:	90                   	nop

c0008910 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008910:	83 ec 0c             	sub    esp,0xc
c0008913:	83 ec 08             	sub    esp,0x8
c0008916:	68 00 25 02 c0       	push   0xc0022500
c000891b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000891f:	e8 a8 7e ff ff       	call   c00007cc <strcmp>
c0008924:	83 c4 10             	add    esp,0x10
c0008927:	85 c0                	test   eax,eax
c0008929:	0f 94 c0             	sete   al
c000892c:	84 c0                	test   al,al
c000892e:	74 0c                	je     c000893c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008930:	b8 88 64 02 c0       	mov    eax,0xc0026488
c0008935:	e9 ea 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000893a:	66 90                	xchg   ax,ax
c000893c:	83 ec 08             	sub    esp,0x8
c000893f:	68 09 25 02 c0       	push   0xc0022509
c0008944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008948:	e8 7f 7e ff ff       	call   c00007cc <strcmp>
c000894d:	83 c4 10             	add    esp,0x10
c0008950:	85 c0                	test   eax,eax
c0008952:	0f 94 c0             	sete   al
c0008955:	84 c0                	test   al,al
c0008957:	74 0b                	je     c0008964 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008959:	b8 a4 0f 02 c0       	mov    eax,0xc0020fa4
c000895e:	e9 c1 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008963:	90                   	nop
c0008964:	83 ec 08             	sub    esp,0x8
c0008967:	68 13 25 02 c0       	push   0xc0022513
c000896c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008970:	e8 57 7e ff ff       	call   c00007cc <strcmp>
c0008975:	83 c4 10             	add    esp,0x10
c0008978:	85 c0                	test   eax,eax
c000897a:	0f 94 c0             	sete   al
c000897d:	84 c0                	test   al,al
c000897f:	74 0b                	je     c000898c <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008981:	b8 d8 0c 02 c0       	mov    eax,0xc0020cd8
c0008986:	e9 99 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000898b:	90                   	nop
c000898c:	83 ec 08             	sub    esp,0x8
c000898f:	68 1c 25 02 c0       	push   0xc002251c
c0008994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008998:	e8 2f 7e ff ff       	call   c00007cc <strcmp>
c000899d:	83 c4 10             	add    esp,0x10
c00089a0:	85 c0                	test   eax,eax
c00089a2:	0f 94 c0             	sete   al
c00089a5:	84 c0                	test   al,al
c00089a7:	74 07                	je     c00089b0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089a9:	b8 a4 10 02 c0       	mov    eax,0xc00210a4
c00089ae:	eb 74                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089b0:	83 ec 08             	sub    esp,0x8
c00089b3:	68 26 25 02 c0       	push   0xc0022526
c00089b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089bc:	e8 0b 7e ff ff       	call   c00007cc <strcmp>
c00089c1:	83 c4 10             	add    esp,0x10
c00089c4:	85 c0                	test   eax,eax
c00089c6:	0f 94 c0             	sete   al
c00089c9:	84 c0                	test   al,al
c00089cb:	74 07                	je     c00089d4 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089cd:	b8 24 0e 02 c0       	mov    eax,0xc0020e24
c00089d2:	eb 50                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089d4:	83 ec 08             	sub    esp,0x8
c00089d7:	68 2f 25 02 c0       	push   0xc002252f
c00089dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e0:	e8 e7 7d ff ff       	call   c00007cc <strcmp>
c00089e5:	83 c4 10             	add    esp,0x10
c00089e8:	85 c0                	test   eax,eax
c00089ea:	0f 94 c0             	sete   al
c00089ed:	84 c0                	test   al,al
c00089ef:	74 07                	je     c00089f8 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c00089f1:	b8 8c 64 02 c0       	mov    eax,0xc002648c
c00089f6:	eb 2c                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089f8:	83 ec 08             	sub    esp,0x8
c00089fb:	68 3c 25 02 c0       	push   0xc002253c
c0008a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a04:	e8 c3 7d ff ff       	call   c00007cc <strcmp>
c0008a09:	83 c4 10             	add    esp,0x10
c0008a0c:	85 c0                	test   eax,eax
c0008a0e:	0f 94 c0             	sete   al
c0008a11:	84 c0                	test   al,al
c0008a13:	74 07                	je     c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a15:	b8 8d 64 02 c0       	mov    eax,0xc002648d
c0008a1a:	eb 08                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a1c:	b8 00 00 00 00       	mov    eax,0x0
c0008a21:	8d 76 00             	lea    esi,[esi+0x0]
c0008a24:	83 c4 0c             	add    esp,0xc
c0008a27:	c3                   	ret    

c0008a28 <Computer::close(int, int, void*)>:
c0008a28:	57                   	push   edi
c0008a29:	56                   	push   esi
c0008a2a:	53                   	push   ebx
c0008a2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a2f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a33:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a37:	83 ec 0c             	sub    esp,0xc
c0008a3a:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a40:	e8 6b 56 00 00       	call   c000e0b0 <Device::closeAll()>
c0008a45:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a4b:	83 c4 10             	add    esp,0x10
c0008a4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a50:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a54:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a5c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a64:	5b                   	pop    ebx
c0008a65:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a68:	5e                   	pop    esi
c0008a69:	5f                   	pop    edi
c0008a6a:	ff e0                	jmp    eax

c0008a6c <Krnl::firstTask()>:
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 14             	sub    esp,0x14
c0008a70:	68 49 25 02 c0       	push   0xc0022549
c0008a75:	e8 a3 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008a7a:	fb                   	sti    
c0008a7b:	c7 04 24 60 25 02 c0 	mov    DWORD PTR [esp],0xc0022560
c0008a82:	e8 96 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008a87:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a8e:	e8 30 0f 00 00       	call   c00099c3 <malloc>
c0008a93:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a9a:	89 c3                	mov    ebx,eax
c0008a9c:	ff 35 70 79 02 c0    	push   DWORD PTR ds:0xc0027970
c0008aa2:	68 79 25 02 c0       	push   0xc0022579
c0008aa7:	6a 01                	push   0x1
c0008aa9:	50                   	push   eax
c0008aaa:	e8 a1 f0 00 00       	call   c0017b50 <Process::Process(bool, char const*, Process*, char**)>
c0008aaf:	83 c4 20             	add    esp,0x20
c0008ab2:	68 ff 00 00 00       	push   0xff
c0008ab7:	6a 00                	push   0x0
c0008ab9:	68 bd 93 00 c0       	push   0xc00093bd
c0008abe:	53                   	push   ebx
c0008abf:	e8 94 f2 00 00       	call   c0017d58 <Process::createThread(void (*)(void*), void*, int)>
c0008ac4:	6a 7a                	push   0x7a
c0008ac6:	6a 00                	push   0x0
c0008ac8:	68 9c 87 01 c0       	push   0xc001879c
c0008acd:	ff 35 70 79 02 c0    	push   DWORD PTR ds:0xc0027970
c0008ad3:	e8 80 f2 00 00       	call   c0017d58 <Process::createThread(void (*)(void*), void*, int)>
c0008ad8:	83 c4 14             	add    esp,0x14
c0008adb:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0008ae0:	68 20 27 02 c0       	push   0xc0022720
c0008ae5:	c6 05 8d 64 02 c0 01 	mov    BYTE PTR ds:0xc002648d,0x1
c0008aec:	e8 2c 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008af1:	e8 81 00 01 00       	call   c0018b77 <Vm::initialise8086()>
c0008af6:	e8 7b 43 00 00       	call   c000ce76 <Fs::initVFS()>
c0008afb:	c7 04 24 86 25 02 c0 	mov    DWORD PTR [esp],0xc0022586
c0008b02:	e8 16 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b07:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c0008b0c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b12:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b14:	6a 00                	push   0x0
c0008b16:	6a 00                	push   0x0
c0008b18:	6a 00                	push   0x0
c0008b1a:	50                   	push   eax
c0008b1b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b1e:	83 c4 14             	add    esp,0x14
c0008b21:	68 20 27 02 c0       	push   0xc0022720
c0008b26:	e8 f2 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b2b:	e8 8e d8 00 00       	call   c00163be <Sys::loadSyscalls()>
c0008b30:	e8 63 b7 00 00       	call   c0014298 <Krnl::loadSystemEnv()>
c0008b35:	83 c4 0c             	add    esp,0xc
c0008b38:	6a 3a                	push   0x3a
c0008b3a:	68 a0 25 02 c0       	push   0xc00225a0
c0008b3f:	68 a9 25 02 c0       	push   0xc00225a9
c0008b44:	e8 38 c6 00 00       	call   c0015181 <Reg::readIntWithDefault(char*, char*, int)>
c0008b49:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b4c:	e8 17 4e 00 00       	call   c000d968 <User::loadClockSettings(int)>
c0008b51:	c7 04 24 44 27 02 c0 	mov    DWORD PTR [esp],0xc0022744
c0008b58:	e8 c0 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b5d:	58                   	pop    eax
c0008b5e:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c0008b63:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b69:	e8 02 55 00 00       	call   c000e070 <Device::loadDriversForAll()>
c0008b6e:	c7 04 24 b1 25 02 c0 	mov    DWORD PTR [esp],0xc00225b1
c0008b75:	e8 a3 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b7a:	e8 81 b2 00 00       	call   c0013e00 <Krnl::startCPUs()>
c0008b7f:	c7 04 24 cb 25 02 c0 	mov    DWORD PTR [esp],0xc00225cb
c0008b86:	e8 92 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b8b:	5a                   	pop    edx
c0008b8c:	8b 1d 88 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026488
c0008b92:	59                   	pop    ecx
c0008b93:	6a 01                	push   0x1
c0008b95:	68 dc 25 02 c0       	push   0xc00225dc
c0008b9a:	e8 ef e9 00 00       	call   c001758e <Thr::loadDLL(char const*, bool)>
c0008b9f:	5a                   	pop    edx
c0008ba0:	59                   	pop    ecx
c0008ba1:	53                   	push   ebx
c0008ba2:	50                   	push   eax
c0008ba3:	e8 17 ec 00 00       	call   c00177bf <Thr::executeDLL(unsigned long, void*)>
c0008ba8:	83 c4 10             	add    esp,0x10
c0008bab:	83 ec 0c             	sub    esp,0xc
c0008bae:	6a 02                	push   0x2
c0008bb0:	e8 b7 f5 00 00       	call   c001816c <blockTask(TaskState)>
c0008bb5:	83 c4 10             	add    esp,0x10
c0008bb8:	eb f1                	jmp    c0008bab <Krnl::firstTask()+0x13f>

c0008bba <Computer::Computer()>:
c0008bba:	83 ec 0c             	sub    esp,0xc
c0008bbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bc1:	83 ec 08             	sub    esp,0x8
c0008bc4:	68 f8 25 02 c0       	push   0xc00225f8
c0008bc9:	50                   	push   eax
c0008bca:	e8 5b 55 00 00       	call   c000e12a <Device::Device(char const*)>
c0008bcf:	83 c4 10             	add    esp,0x10
c0008bd2:	ba f4 27 02 c0       	mov    edx,0xc00227f4
c0008bd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bdb:	89 10                	mov    DWORD PTR [eax],edx
c0008bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be1:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008beb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bef:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bfd:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c03:	83 ca 04             	or     edx,0x4
c0008c06:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c10:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c16:	0f b6 d0             	movzx  edx,al
c0008c19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c1d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c28:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c2e:	0f b6 d0             	movzx  edx,al
c0008c31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c35:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c44:	8d 50 01             	lea    edx,[eax+0x1]
c0008c47:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c4b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c51:	0f b6 d0             	movzx  edx,al
c0008c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c58:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c5c:	83 e1 3f             	and    ecx,0x3f
c0008c5f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c6d:	0f b6 d0             	movzx  edx,al
c0008c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c74:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c85:	0f b6 d0             	movzx  edx,al
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008c91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c95:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c9b:	8d 50 01             	lea    edx,[eax+0x1]
c0008c9e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ca2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008ca8:	0f b6 d0             	movzx  edx,al
c0008cab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cb3:	83 e1 3f             	and    ecx,0x3f
c0008cb6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cc4:	0f b6 d0             	movzx  edx,al
c0008cc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ccb:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cdc:	0f b6 d0             	movzx  edx,al
c0008cdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce3:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cec:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf2:	8d 50 01             	lea    edx,[eax+0x1]
c0008cf5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cf9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cff:	0f b6 d0             	movzx  edx,al
c0008d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d06:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d0a:	83 e1 3f             	and    ecx,0x3f
c0008d0d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d11:	90                   	nop
c0008d12:	83 c4 0c             	add    esp,0xc
c0008d15:	c3                   	ret    

c0008d16 <Computer::setBootMessage(char const*)>:
c0008d16:	c3                   	ret    
c0008d17:	90                   	nop

c0008d18 <Computer::detectFeatures()>:
c0008d18:	55                   	push   ebp
c0008d19:	57                   	push   edi
c0008d1a:	56                   	push   esi
c0008d1b:	53                   	push   ebx
c0008d1c:	83 ec 1c             	sub    esp,0x1c
c0008d1f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d23:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d2d:	e8 e7 74 ff ff       	call   c0000219 <detectCPUID>
c0008d32:	85 c0                	test   eax,eax
c0008d34:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d3a:	0f 95 c2             	setne  dl
c0008d3d:	83 e0 fd             	and    eax,0xfffffffd
c0008d40:	d1 e2                	shl    edx,1
c0008d42:	09 d0                	or     eax,edx
c0008d44:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d4a:	a8 02                	test   al,0x2
c0008d4c:	75 46                	jne    c0008d94 <Computer::detectFeatures()+0x7c>
c0008d4e:	f6 05 a1 64 02 c0 04 	test   BYTE PTR ds:0xc00264a1,0x4
c0008d55:	74 07                	je     c0008d5e <Computer::detectFeatures()+0x46>
c0008d57:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d5e:	e8 03 7f 01 00       	call   c0020c66 <x87Detect>
c0008d63:	83 e0 01             	and    eax,0x1
c0008d66:	c1 e0 04             	shl    eax,0x4
c0008d69:	88 c2                	mov    dl,al
c0008d6b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d71:	83 e0 ef             	and    eax,0xffffffef
c0008d74:	09 d0                	or     eax,edx
c0008d76:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d7c:	a8 10                	test   al,0x10
c0008d7e:	0f 85 2a 01 00 00    	jne    c0008eae <Computer::detectFeatures()+0x196>
c0008d84:	84 c0                	test   al,al
c0008d86:	0f 88 45 01 00 00    	js     c0008ed1 <Computer::detectFeatures()+0x1b9>
c0008d8c:	83 c4 1c             	add    esp,0x1c
c0008d8f:	5b                   	pop    ebx
c0008d90:	5e                   	pop    esi
c0008d91:	5f                   	pop    edi
c0008d92:	5d                   	pop    ebp
c0008d93:	c3                   	ret    
c0008d94:	83 ec 0c             	sub    esp,0xc
c0008d97:	6a 20                	push   0x20
c0008d99:	e8 64 9f 00 00       	call   c0012d02 <CPU::cpuidCheckEDX(unsigned int)>
c0008d9e:	83 e0 01             	and    eax,0x1
c0008da1:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008da8:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008dae:	83 e0 f7             	and    eax,0xfffffff7
c0008db1:	09 d0                	or     eax,edx
c0008db3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008db9:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dc0:	e8 3d 9f 00 00       	call   c0012d02 <CPU::cpuidCheckEDX(unsigned int)>
c0008dc5:	83 e0 01             	and    eax,0x1
c0008dc8:	88 c2                	mov    dl,al
c0008dca:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008dd0:	83 e0 fe             	and    eax,0xfffffffe
c0008dd3:	09 d0                	or     eax,edx
c0008dd5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008ddb:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008de2:	e8 1b 9f 00 00       	call   c0012d02 <CPU::cpuidCheckEDX(unsigned int)>
c0008de7:	c1 e0 07             	shl    eax,0x7
c0008dea:	88 c2                	mov    dl,al
c0008dec:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008df2:	83 e0 7f             	and    eax,0x7f
c0008df5:	09 d0                	or     eax,edx
c0008df7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008dfd:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e04:	e8 f9 9e 00 00       	call   c0012d02 <CPU::cpuidCheckEDX(unsigned int)>
c0008e09:	83 c4 10             	add    esp,0x10
c0008e0c:	83 e0 01             	and    eax,0x1
c0008e0f:	c1 e0 05             	shl    eax,0x5
c0008e12:	88 c2                	mov    dl,al
c0008e14:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e1a:	83 e0 df             	and    eax,0xffffffdf
c0008e1d:	09 d0                	or     eax,edx
c0008e1f:	f7 05 a0 64 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00264a0,0x401
c0008e29:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e2f:	0f 84 c2 00 00 00    	je     c0008ef7 <Computer::detectFeatures()+0x1df>
c0008e35:	83 e0 fe             	and    eax,0xfffffffe
c0008e38:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e3e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e44:	88 c2                	mov    dl,al
c0008e46:	83 e2 09             	and    edx,0x9
c0008e49:	fe ca                	dec    dl
c0008e4b:	75 09                	jne    c0008e56 <Computer::detectFeatures()+0x13e>
c0008e4d:	83 e0 fe             	and    eax,0xfffffffe
c0008e50:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e56:	83 ec 0c             	sub    esp,0xc
c0008e59:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e5d:	50                   	push   eax
c0008e5e:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e62:	55                   	push   ebp
c0008e63:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e67:	57                   	push   edi
c0008e68:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e6c:	56                   	push   esi
c0008e6d:	68 00 00 00 80       	push   0x80000000
c0008e72:	e8 07 9e 00 00       	call   c0012c7e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e77:	83 c4 20             	add    esp,0x20
c0008e7a:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e81:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e85:	0f 86 c3 fe ff ff    	jbe    c0008d4e <Computer::detectFeatures()+0x36>
c0008e8b:	83 ec 0c             	sub    esp,0xc
c0008e8e:	50                   	push   eax
c0008e8f:	55                   	push   ebp
c0008e90:	57                   	push   edi
c0008e91:	56                   	push   esi
c0008e92:	68 01 00 00 80       	push   0x80000001
c0008e97:	e8 e2 9d 00 00       	call   c0012c7e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e9c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008ea6:	83 c4 20             	add    esp,0x20
c0008ea9:	e9 a0 fe ff ff       	jmp    c0008d4e <Computer::detectFeatures()+0x36>
c0008eae:	e8 6d 7d 01 00       	call   c0020c20 <absolutelyNoChanceInHell>
c0008eb3:	88 c2                	mov    dl,al
c0008eb5:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008ebb:	c1 e2 07             	shl    edx,0x7
c0008ebe:	83 e0 7f             	and    eax,0x7f
c0008ec1:	09 d0                	or     eax,edx
c0008ec3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ec9:	84 c0                	test   al,al
c0008ecb:	0f 89 bb fe ff ff    	jns    c0008d8c <Computer::detectFeatures()+0x74>
c0008ed1:	e8 2a 7d 01 00       	call   c0020c00 <avxDetect>
c0008ed6:	83 e0 01             	and    eax,0x1
c0008ed9:	c1 e0 05             	shl    eax,0x5
c0008edc:	88 c2                	mov    dl,al
c0008ede:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008ee4:	83 e0 df             	and    eax,0xffffffdf
c0008ee7:	09 d0                	or     eax,edx
c0008ee9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008eef:	83 c4 1c             	add    esp,0x1c
c0008ef2:	5b                   	pop    ebx
c0008ef3:	5e                   	pop    esi
c0008ef4:	5f                   	pop    edi
c0008ef5:	5d                   	pop    ebp
c0008ef6:	c3                   	ret    
c0008ef7:	83 ec 0c             	sub    esp,0xc
c0008efa:	68 00 02 00 00       	push   0x200
c0008eff:	e8 fe 9d 00 00       	call   c0012d02 <CPU::cpuidCheckEDX(unsigned int)>
c0008f04:	83 c4 10             	add    esp,0x10
c0008f07:	83 e0 01             	and    eax,0x1
c0008f0a:	88 c2                	mov    dl,al
c0008f0c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f12:	83 e0 fe             	and    eax,0xfffffffe
c0008f15:	09 d0                	or     eax,edx
c0008f17:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f1d:	e9 1c ff ff ff       	jmp    c0008e3e <Computer::detectFeatures()+0x126>

c0008f22 <Computer::displayFeatures()>:
c0008f22:	c3                   	ret    
c0008f23:	90                   	nop

c0008f24 <Computer::rdmsr(unsigned int)>:
c0008f24:	83 ec 0c             	sub    esp,0xc
c0008f27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f2b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f32:	74 0a                	je     c0008f3e <Computer::rdmsr(unsigned int)+0x1a>
c0008f34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f38:	0f 32                	rdmsr  
c0008f3a:	83 c4 0c             	add    esp,0xc
c0008f3d:	c3                   	ret    
c0008f3e:	83 ec 0c             	sub    esp,0xc
c0008f41:	68 01 26 02 c0       	push   0xc0022601
c0008f46:	e8 56 b4 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c0008f4b:	83 c4 10             	add    esp,0x10
c0008f4e:	eb e4                	jmp    c0008f34 <Computer::rdmsr(unsigned int)+0x10>

c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0008f50:	57                   	push   edi
c0008f51:	56                   	push   esi
c0008f52:	52                   	push   edx
c0008f53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f57:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008f5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008f5f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f66:	74 0e                	je     c0008f76 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0008f68:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f6c:	89 f0                	mov    eax,esi
c0008f6e:	89 fa                	mov    edx,edi
c0008f70:	0f 30                	wrmsr  
c0008f72:	58                   	pop    eax
c0008f73:	5e                   	pop    esi
c0008f74:	5f                   	pop    edi
c0008f75:	c3                   	ret    
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	68 07 26 02 c0       	push   0xc0022607
c0008f7e:	e8 1e b4 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c0008f83:	83 c4 10             	add    esp,0x10
c0008f86:	eb e0                	jmp    c0008f68 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0008f88 <Computer::nmiEnabled()>:
c0008f88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f8c:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0008f92:	c3                   	ret    
c0008f93:	90                   	nop

c0008f94 <Computer::readCMOS(unsigned char)>:
c0008f94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f98:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0008f9f:	19 c0                	sbb    eax,eax
c0008fa1:	83 e0 80             	and    eax,0xffffff80
c0008fa4:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0008fa8:	e6 70                	out    0x70,al
c0008faa:	e4 71                	in     al,0x71
c0008fac:	c3                   	ret    
c0008fad:	90                   	nop

c0008fae <Computer::enableNMI(bool)>:
c0008fae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008fb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fb6:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0008fbc:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0008fc4:	eb ce                	jmp    c0008f94 <Computer::readCMOS(unsigned char)>

c0008fc6 <Computer::open(int, int, void*)>:
c0008fc6:	56                   	push   esi
c0008fc7:	53                   	push   ebx
c0008fc8:	83 ec 10             	sub    esp,0x10
c0008fcb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008fcf:	68 64 27 02 c0       	push   0xc0022764
c0008fd4:	e8 44 0a 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008fd9:	58                   	pop    eax
c0008fda:	f6 05 a0 64 02 c0 04 	test   BYTE PTR ds:0xc00264a0,0x4
c0008fe1:	5a                   	pop    edx
c0008fe2:	0f 94 05 60 58 02 c0 	sete   BYTE PTR ds:0xc0025860
c0008fe9:	68 58 01 00 00       	push   0x158
c0008fee:	68 0d 26 02 c0       	push   0xc002260d
c0008ff3:	e8 e7 3a 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c0008ff8:	59                   	pop    ecx
c0008ff9:	5e                   	pop    esi
c0008ffa:	68 14 01 00 00       	push   0x114
c0008fff:	68 23 26 02 c0       	push   0xc0022623
c0009004:	e8 d6 3a 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c0009009:	58                   	pop    eax
c000900a:	5a                   	pop    edx
c000900b:	6a 14                	push   0x14
c000900d:	68 37 26 02 c0       	push   0xc0022637
c0009012:	e8 c8 3a 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c0009017:	59                   	pop    ecx
c0009018:	5e                   	pop    esi
c0009019:	68 1f 07 00 00       	push   0x71f
c000901e:	68 4a 26 02 c0       	push   0xc002264a
c0009023:	e8 b7 3a 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c0009028:	58                   	pop    eax
c0009029:	5a                   	pop    edx
c000902a:	6a 5f                	push   0x5f
c000902c:	68 61 26 02 c0       	push   0xc0022661
c0009031:	e8 a9 3a 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c0009036:	c7 04 24 77 26 02 c0 	mov    DWORD PTR [esp],0xc0022677
c000903d:	e8 9d 3a 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c0009042:	c7 04 24 89 26 02 c0 	mov    DWORD PTR [esp],0xc0022689
c0009049:	e8 cf 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000904e:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0009055:	e8 69 09 00 00       	call   c00099c3 <malloc>
c000905a:	89 c6                	mov    esi,eax
c000905c:	89 04 24             	mov    DWORD PTR [esp],eax
c000905f:	e8 10 8e 00 00       	call   c0011e74 <ACPI::ACPI()>
c0009064:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000906a:	c7 04 24 a3 26 02 c0 	mov    DWORD PTR [esp],0xc00226a3
c0009071:	e8 a7 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009076:	59                   	pop    ecx
c0009077:	5e                   	pop    esi
c0009078:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000907e:	53                   	push   ebx
c000907f:	e8 a2 4e 00 00       	call   c000df26 <Device::addChild(Device*)>
c0009084:	c7 04 24 88 27 02 c0 	mov    DWORD PTR [esp],0xc0022788
c000908b:	e8 8d 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009090:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009093:	e8 80 fc ff ff       	call   c0008d18 <Computer::detectFeatures()>
c0009098:	c7 04 24 a8 27 02 c0 	mov    DWORD PTR [esp],0xc00227a8
c000909f:	e8 79 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090a4:	c7 04 24 bd 26 02 c0 	mov    DWORD PTR [esp],0xc00226bd
c00090ab:	e8 6d 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090b0:	58                   	pop    eax
c00090b1:	5a                   	pop    edx
c00090b2:	6a 01                	push   0x1
c00090b4:	53                   	push   ebx
c00090b5:	e8 f4 fe ff ff       	call   c0008fae <Computer::enableNMI(bool)>
c00090ba:	c7 04 24 b1 25 02 c0 	mov    DWORD PTR [esp],0xc00225b1
c00090c1:	e8 57 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090c6:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c00090cd:	e8 f1 08 00 00       	call   c00099c3 <malloc>
c00090d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00090d5:	89 c6                	mov    esi,eax
c00090d7:	e8 de 9c 00 00       	call   c0012dba <CPU::CPU()>
c00090dc:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c00090e2:	59                   	pop    ecx
c00090e3:	58                   	pop    eax
c00090e4:	56                   	push   esi
c00090e5:	53                   	push   ebx
c00090e6:	e8 3b 4e 00 00       	call   c000df26 <Device::addChild(Device*)>
c00090eb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00090f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00090f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00090f7:	6a 00                	push   0x0
c00090f9:	6a 00                	push   0x0
c00090fb:	50                   	push   eax
c00090fc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00090ff:	83 c4 14             	add    esp,0x14
c0009102:	68 c8 27 02 c0       	push   0xc00227c8
c0009107:	e8 11 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000910c:	e8 b1 53 00 00       	call   c000e4c2 <setupFPU()>
c0009111:	83 c4 10             	add    esp,0x10
c0009114:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000911a:	85 c0                	test   eax,eax
c000911c:	74 1f                	je     c000913d <Computer::open(int, int, void*)+0x177>
c000911e:	83 ec 08             	sub    esp,0x8
c0009121:	50                   	push   eax
c0009122:	53                   	push   ebx
c0009123:	e8 fe 4d 00 00       	call   c000df26 <Device::addChild(Device*)>
c0009128:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000912e:	8b 10                	mov    edx,DWORD PTR [eax]
c0009130:	6a 00                	push   0x0
c0009132:	6a 00                	push   0x0
c0009134:	6a 00                	push   0x0
c0009136:	50                   	push   eax
c0009137:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000913a:	83 c4 20             	add    esp,0x20
c000913d:	83 ec 0c             	sub    esp,0xc
c0009140:	68 ce 26 02 c0       	push   0xc00226ce
c0009145:	e8 d3 08 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000914a:	c7 04 24 6c 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a6c
c0009151:	e8 16 ed 00 00       	call   c0017e6c <setupMultitasking(void (*)())>
c0009156:	83 c4 14             	add    esp,0x14
c0009159:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000915e:	5b                   	pop    ebx
c000915f:	5e                   	pop    esi
c0009160:	c3                   	ret    
c0009161:	90                   	nop

c0009162 <Computer::disableNMI()>:
c0009162:	6a 00                	push   0x0
c0009164:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009168:	e8 41 fe ff ff       	call   c0008fae <Computer::enableNMI(bool)>
c000916d:	58                   	pop    eax
c000916e:	5a                   	pop    edx
c000916f:	c3                   	ret    

c0009170 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0009170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009174:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000917b:	19 c0                	sbb    eax,eax
c000917d:	83 e0 80             	and    eax,0xffffff80
c0009180:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009184:	e6 70                	out    0x70,al
c0009186:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000918a:	e6 71                	out    0x71,al
c000918c:	c3                   	ret    
c000918d:	90                   	nop

c000918e <Computer::handleNMI()>:
c000918e:	56                   	push   esi
c000918f:	53                   	push   ebx
c0009190:	83 ec 10             	sub    esp,0x10
c0009193:	e4 92                	in     al,0x92
c0009195:	89 c6                	mov    esi,eax
c0009197:	e4 61                	in     al,0x61
c0009199:	68 e9 26 02 c0       	push   0xc00226e9
c000919e:	88 c3                	mov    bl,al
c00091a0:	e8 3a 39 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c00091a5:	83 c4 10             	add    esp,0x10
c00091a8:	83 e6 10             	and    esi,0x10
c00091ab:	75 0d                	jne    c00091ba <Computer::handleNMI()+0x2c>
c00091ad:	f6 c3 40             	test   bl,0x40
c00091b0:	75 1d                	jne    c00091cf <Computer::handleNMI()+0x41>
c00091b2:	84 db                	test   bl,bl
c00091b4:	78 2d                	js     c00091e3 <Computer::handleNMI()+0x55>
c00091b6:	58                   	pop    eax
c00091b7:	5b                   	pop    ebx
c00091b8:	5e                   	pop    esi
c00091b9:	c3                   	ret    
c00091ba:	83 ec 0c             	sub    esp,0xc
c00091bd:	68 fa 26 02 c0       	push   0xc00226fa
c00091c2:	e8 da b1 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c00091c7:	83 c4 10             	add    esp,0x10
c00091ca:	f6 c3 40             	test   bl,0x40
c00091cd:	74 e3                	je     c00091b2 <Computer::handleNMI()+0x24>
c00091cf:	83 ec 0c             	sub    esp,0xc
c00091d2:	68 07 27 02 c0       	push   0xc0022707
c00091d7:	e8 c5 b1 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c00091dc:	83 c4 10             	add    esp,0x10
c00091df:	84 db                	test   bl,bl
c00091e1:	79 d3                	jns    c00091b6 <Computer::handleNMI()+0x28>
c00091e3:	c7 44 24 10 11 27 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022711
c00091eb:	5a                   	pop    edx
c00091ec:	5b                   	pop    ebx
c00091ed:	5e                   	pop    esi
c00091ee:	e9 ae b1 00 00       	jmp    c00143a1 <Krnl::panic(char const*)>
c00091f3:	90                   	nop

c00091f4 <Computer::setDiskActivityLight(int, bool)>:
c00091f4:	56                   	push   esi
c00091f5:	53                   	push   ebx
c00091f6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00091fa:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00091ff:	77 1b                	ja     c000921c <Computer::setDiskActivityLight(int, bool)+0x28>
c0009201:	e4 92                	in     al,0x92
c0009203:	bb 40 00 00 00       	mov    ebx,0x40
c0009208:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000920c:	89 da                	mov    edx,ebx
c000920e:	d3 e2                	shl    edx,cl
c0009210:	89 f1                	mov    ecx,esi
c0009212:	f7 d2                	not    edx
c0009214:	d3 e3                	shl    ebx,cl
c0009216:	21 d0                	and    eax,edx
c0009218:	09 d8                	or     eax,ebx
c000921a:	e6 92                	out    0x92,al
c000921c:	5b                   	pop    ebx
c000921d:	5e                   	pop    esi
c000921e:	c3                   	ret    
c000921f:	90                   	nop

c0009220 <GDTEntry::setBase(unsigned int)>:
c0009220:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009224:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009228:	89 c1                	mov    ecx,eax
c000922a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000922e:	c1 e9 10             	shr    ecx,0x10
c0009231:	c1 e8 18             	shr    eax,0x18
c0009234:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0009237:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000923a:	c3                   	ret    
c000923b:	90                   	nop

c000923c <GDTEntry::setLimit(unsigned int)>:
c000923c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009244:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0009247:	66 89 01             	mov    WORD PTR [ecx],ax
c000924a:	83 e2 f0             	and    edx,0xfffffff0
c000924d:	c1 e8 10             	shr    eax,0x10
c0009250:	83 e0 0f             	and    eax,0xf
c0009253:	09 d0                	or     eax,edx
c0009255:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0009258:	c3                   	ret    
c0009259:	90                   	nop

c000925a <GDT::GDT()>:
c000925a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000925e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009264:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009268:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000926e:	90                   	nop
c000926f:	c3                   	ret    

c0009270 <GDT::addEntry(GDTEntry)>:
c0009270:	53                   	push   ebx
c0009271:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009275:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009279:	8b 02                	mov    eax,DWORD PTR [edx]
c000927b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000927f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0009283:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0009287:	8d 48 01             	lea    ecx,[eax+0x1]
c000928a:	c1 e0 03             	shl    eax,0x3
c000928d:	89 0a                	mov    DWORD PTR [edx],ecx
c000928f:	5b                   	pop    ebx
c0009290:	c3                   	ret    
c0009291:	90                   	nop

c0009292 <GDT::getNumberOfEntries()>:
c0009292:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009296:	8b 00                	mov    eax,DWORD PTR [eax]
c0009298:	c3                   	ret    
c0009299:	90                   	nop

c000929a <GDT::flush()>:
c000929a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000929e:	8b 10                	mov    edx,DWORD PTR [eax]
c00092a0:	83 c0 04             	add    eax,0x4
c00092a3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00092aa:	a3 92 64 02 c0       	mov    ds:0xc0026492,eax
c00092af:	66 89 15 90 64 02 c0 	mov    WORD PTR ds:0xc0026490,dx
c00092b6:	e9 ca 70 ff ff       	jmp    c0000385 <loadGDT>
c00092bb:	90                   	nop

c00092bc <GDT::setup()>:
c00092bc:	55                   	push   ebp
c00092bd:	57                   	push   edi
c00092be:	56                   	push   esi
c00092bf:	53                   	push   ebx
c00092c0:	83 ec 3c             	sub    esp,0x3c
c00092c3:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c00092c7:	6a 00                	push   0x0
c00092c9:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c00092cd:	53                   	push   ebx
c00092ce:	e8 4d ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c00092d3:	6a 00                	push   0x0
c00092d5:	53                   	push   ebx
c00092d6:	e8 61 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c00092db:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c00092e3:	6a 00                	push   0x0
c00092e5:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00092e9:	53                   	push   ebx
c00092ea:	e8 31 ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c00092ef:	68 ff ff ff 00       	push   0xffffff
c00092f4:	53                   	push   ebx
c00092f5:	e8 42 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c00092fa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00092fe:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0009303:	0d 00 9a c0 00       	or     eax,0xc09a00
c0009308:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000930c:	83 c4 20             	add    esp,0x20
c000930f:	6a 00                	push   0x0
c0009311:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0009315:	53                   	push   ebx
c0009316:	e8 05 ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c000931b:	68 ff ff ff 00       	push   0xffffff
c0009320:	53                   	push   ebx
c0009321:	e8 16 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c0009326:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000932a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000932e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009332:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009336:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000933a:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000933f:	0d 00 92 c0 00       	or     eax,0xc09200
c0009344:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009348:	89 d8                	mov    eax,ebx
c000934a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000934e:	80 cc 60             	or     ah,0x60
c0009351:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009355:	83 c4 0c             	add    esp,0xc
c0009358:	89 f8                	mov    eax,edi
c000935a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000935e:	80 cc 60             	or     ah,0x60
c0009361:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009365:	89 c7                	mov    edi,eax
c0009367:	55                   	push   ebp
c0009368:	e8 03 ff ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000936d:	83 c4 0c             	add    esp,0xc
c0009370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009374:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009378:	55                   	push   ebp
c0009379:	e8 f2 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000937e:	83 c4 0c             	add    esp,0xc
c0009381:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009385:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009389:	55                   	push   ebp
c000938a:	e8 e1 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000938f:	83 c4 0c             	add    esp,0xc
c0009392:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009396:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000939a:	53                   	push   ebx
c000939b:	51                   	push   ecx
c000939c:	55                   	push   ebp
c000939d:	e8 ce fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c00093a2:	83 c4 0c             	add    esp,0xc
c00093a5:	57                   	push   edi
c00093a6:	56                   	push   esi
c00093a7:	55                   	push   ebp
c00093a8:	e8 c3 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c00093ad:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093b0:	e8 e5 fe ff ff       	call   c000929a <GDT::flush()>
c00093b5:	83 c4 4c             	add    esp,0x4c
c00093b8:	5b                   	pop    ebx
c00093b9:	5e                   	pop    esi
c00093ba:	5f                   	pop    edi
c00093bb:	5d                   	pop    ebp
c00093bc:	c3                   	ret    

c00093bd <idleFunction(void*)>:
c00093bd:	53                   	push   ebx
c00093be:	83 ec 08             	sub    esp,0x8
c00093c1:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c00093c6:	48                   	dec    eax
c00093c7:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c00093cc:	75 01                	jne    c00093cf <idleFunction(void*)+0x12>
c00093ce:	fb                   	sti    
c00093cf:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c00093d4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00093da:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c00093e1:	74 3c                	je     c000941f <idleFunction(void*)+0x62>
c00093e3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00093ea:	74 33                	je     c000941f <idleFunction(void*)+0x62>
c00093ec:	31 db                	xor    ebx,ebx
c00093ee:	52                   	push   edx
c00093ef:	52                   	push   edx
c00093f0:	68 e1 00 00 00       	push   0xe1
c00093f5:	50                   	push   eax
c00093f6:	e8 29 fb ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c00093fb:	53                   	push   ebx
c00093fc:	83 e0 02             	and    eax,0x2
c00093ff:	50                   	push   eax
c0009400:	68 e1 00 00 00       	push   0xe1
c0009405:	ff 35 88 64 02 c0    	push   DWORD PTR ds:0xc0026488
c000940b:	e8 40 fb ff ff       	call   c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>
c0009410:	83 c4 20             	add    esp,0x20
c0009413:	e8 9c 6d ff ff       	call   c00001b4 <doTPAUSE>
c0009418:	e8 09 7e 01 00       	call   c0021226 <idleCommon()>
c000941d:	eb f4                	jmp    c0009413 <idleFunction(void*)+0x56>
c000941f:	fb                   	sti    
c0009420:	f4                   	hlt    
c0009421:	e8 00 7e 01 00       	call   c0021226 <idleCommon()>
c0009426:	eb f7                	jmp    c000941f <idleFunction(void*)+0x62>

c0009428 <IDTEntry::IDTEntry(bool)>:
c0009428:	83 ec 04             	sub    esp,0x4
c000942b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000942f:	88 04 24             	mov    BYTE PTR [esp],al
c0009432:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009436:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000943c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009440:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009448:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000944b:	83 e2 f0             	and    edx,0xfffffff0
c000944e:	83 ca 0e             	or     edx,0xe
c0009451:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009454:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009458:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000945b:	83 e2 ef             	and    edx,0xffffffef
c000945e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009461:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0009465:	74 05                	je     c000946c <IDTEntry::IDTEntry(bool)+0x44>
c0009467:	b2 03                	mov    dl,0x3
c0009469:	eb 05                	jmp    c0009470 <IDTEntry::IDTEntry(bool)+0x48>
c000946b:	90                   	nop
c000946c:	b2 00                	mov    dl,0x0
c000946e:	66 90                	xchg   ax,ax
c0009470:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009474:	83 e2 03             	and    edx,0x3
c0009477:	88 d1                	mov    cl,dl
c0009479:	c1 e1 05             	shl    ecx,0x5
c000947c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000947f:	83 e2 9f             	and    edx,0xffffff9f
c0009482:	09 ca                	or     edx,ecx
c0009484:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009487:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000948b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000948e:	83 ca 80             	or     edx,0xffffff80
c0009491:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009494:	90                   	nop
c0009495:	83 c4 04             	add    esp,0x4
c0009498:	c3                   	ret    
c0009499:	90                   	nop

c000949a <IDTEntry::setOffset(unsigned int)>:
c000949a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000949e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094a2:	66 89 02             	mov    WORD PTR [edx],ax
c00094a5:	c1 e8 10             	shr    eax,0x10
c00094a8:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00094ac:	c3                   	ret    
c00094ad:	90                   	nop
c00094ae:	66 90                	xchg   ax,ax

c00094b0 <IDT::IDT()>:
c00094b0:	90                   	nop
c00094b1:	c3                   	ret    

c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00094b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094b6:	83 c0 30             	add    eax,0x30
c00094b9:	c3                   	ret    

c00094ba <IDT::addEntry(IDTEntry, int)>:
c00094ba:	53                   	push   ebx
c00094bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00094c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00094c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094cb:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00094ce:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00094d2:	5b                   	pop    ebx
c00094d3:	c3                   	ret    

c00094d4 <IDT::addEntry(int, void (*)(), bool)>:
c00094d4:	53                   	push   ebx
c00094d5:	83 ec 10             	sub    esp,0x10
c00094d8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00094dd:	50                   	push   eax
c00094de:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00094e2:	53                   	push   ebx
c00094e3:	e8 40 ff ff ff       	call   c0009428 <IDTEntry::IDTEntry(bool)>
c00094e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00094ec:	53                   	push   ebx
c00094ed:	e8 a8 ff ff ff       	call   c000949a <IDTEntry::setOffset(unsigned int)>
c00094f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00094f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00094fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00094fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009502:	e8 b3 ff ff ff       	call   c00094ba <IDT::addEntry(IDTEntry, int)>
c0009507:	83 c4 30             	add    esp,0x30
c000950a:	5b                   	pop    ebx
c000950b:	c3                   	ret    

c000950c <IDT::flush()>:
c000950c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009510:	66 c7 05 98 64 02 c0 ff 07 	mov    WORD PTR ds:0xc0026498,0x7ff
c0009519:	a3 9a 64 02 c0       	mov    ds:0xc002649a,eax
c000951e:	0f 01 1d 98 64 02 c0 	lidtd  ds:0xc0026498
c0009525:	c3                   	ret    

c0009526 <IDT::setup()>:
c0009526:	57                   	push   edi
c0009527:	56                   	push   esi
c0009528:	53                   	push   ebx
c0009529:	83 ec 10             	sub    esp,0x10
c000952c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009530:	6a 00                	push   0x0
c0009532:	68 a5 03 00 c0       	push   0xc00003a5
c0009537:	6a 00                	push   0x0
c0009539:	53                   	push   ebx
c000953a:	e8 95 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000953f:	6a 00                	push   0x0
c0009541:	68 b5 03 00 c0       	push   0xc00003b5
c0009546:	6a 01                	push   0x1
c0009548:	53                   	push   ebx
c0009549:	e8 86 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000954e:	83 c4 20             	add    esp,0x20
c0009551:	6a 00                	push   0x0
c0009553:	68 bf 03 00 c0       	push   0xc00003bf
c0009558:	6a 02                	push   0x2
c000955a:	53                   	push   ebx
c000955b:	e8 74 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009560:	6a 00                	push   0x0
c0009562:	68 c9 03 00 c0       	push   0xc00003c9
c0009567:	6a 03                	push   0x3
c0009569:	53                   	push   ebx
c000956a:	e8 65 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000956f:	83 c4 20             	add    esp,0x20
c0009572:	6a 00                	push   0x0
c0009574:	68 d3 03 00 c0       	push   0xc00003d3
c0009579:	6a 04                	push   0x4
c000957b:	53                   	push   ebx
c000957c:	e8 53 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009581:	6a 00                	push   0x0
c0009583:	68 dd 03 00 c0       	push   0xc00003dd
c0009588:	6a 05                	push   0x5
c000958a:	53                   	push   ebx
c000958b:	e8 44 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009590:	83 c4 20             	add    esp,0x20
c0009593:	6a 00                	push   0x0
c0009595:	68 e7 03 00 c0       	push   0xc00003e7
c000959a:	6a 06                	push   0x6
c000959c:	53                   	push   ebx
c000959d:	e8 32 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095a2:	6a 00                	push   0x0
c00095a4:	68 f1 03 00 c0       	push   0xc00003f1
c00095a9:	6a 07                	push   0x7
c00095ab:	53                   	push   ebx
c00095ac:	e8 23 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095b1:	83 c4 20             	add    esp,0x20
c00095b4:	6a 00                	push   0x0
c00095b6:	68 fb 03 00 c0       	push   0xc00003fb
c00095bb:	6a 08                	push   0x8
c00095bd:	53                   	push   ebx
c00095be:	e8 11 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095c3:	6a 00                	push   0x0
c00095c5:	68 03 04 00 c0       	push   0xc0000403
c00095ca:	6a 09                	push   0x9
c00095cc:	53                   	push   ebx
c00095cd:	e8 02 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095d2:	83 c4 20             	add    esp,0x20
c00095d5:	6a 00                	push   0x0
c00095d7:	68 0d 04 00 c0       	push   0xc000040d
c00095dc:	6a 0a                	push   0xa
c00095de:	53                   	push   ebx
c00095df:	e8 f0 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095e4:	6a 00                	push   0x0
c00095e6:	68 15 04 00 c0       	push   0xc0000415
c00095eb:	6a 0b                	push   0xb
c00095ed:	53                   	push   ebx
c00095ee:	e8 e1 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095f3:	83 c4 20             	add    esp,0x20
c00095f6:	6a 00                	push   0x0
c00095f8:	68 1d 04 00 c0       	push   0xc000041d
c00095fd:	6a 0c                	push   0xc
c00095ff:	53                   	push   ebx
c0009600:	e8 cf fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009605:	6a 00                	push   0x0
c0009607:	68 25 04 00 c0       	push   0xc0000425
c000960c:	6a 0d                	push   0xd
c000960e:	53                   	push   ebx
c000960f:	e8 c0 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009614:	83 c4 20             	add    esp,0x20
c0009617:	6a 00                	push   0x0
c0009619:	68 2d 04 00 c0       	push   0xc000042d
c000961e:	6a 0e                	push   0xe
c0009620:	53                   	push   ebx
c0009621:	e8 ae fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009626:	6a 00                	push   0x0
c0009628:	68 35 04 00 c0       	push   0xc0000435
c000962d:	6a 0f                	push   0xf
c000962f:	53                   	push   ebx
c0009630:	e8 9f fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009635:	83 c4 20             	add    esp,0x20
c0009638:	6a 00                	push   0x0
c000963a:	68 3f 04 00 c0       	push   0xc000043f
c000963f:	6a 10                	push   0x10
c0009641:	53                   	push   ebx
c0009642:	e8 8d fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009647:	6a 00                	push   0x0
c0009649:	68 49 04 00 c0       	push   0xc0000449
c000964e:	6a 11                	push   0x11
c0009650:	53                   	push   ebx
c0009651:	e8 7e fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009656:	83 c4 20             	add    esp,0x20
c0009659:	6a 00                	push   0x0
c000965b:	68 53 04 00 c0       	push   0xc0000453
c0009660:	6a 12                	push   0x12
c0009662:	53                   	push   ebx
c0009663:	e8 6c fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009668:	6a 01                	push   0x1
c000966a:	68 ed 04 00 c0       	push   0xc00004ed
c000966f:	6a 60                	push   0x60
c0009671:	53                   	push   ebx
c0009672:	e8 5d fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009677:	83 c4 20             	add    esp,0x20
c000967a:	6a 00                	push   0x0
c000967c:	68 f4 04 00 c0       	push   0xc00004f4
c0009681:	6a 20                	push   0x20
c0009683:	53                   	push   ebx
c0009684:	e8 4b fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009689:	6a 00                	push   0x0
c000968b:	68 df 04 00 c0       	push   0xc00004df
c0009690:	6a 21                	push   0x21
c0009692:	53                   	push   ebx
c0009693:	e8 3c fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009698:	83 c4 20             	add    esp,0x20
c000969b:	6a 00                	push   0x0
c000969d:	68 e6 04 00 c0       	push   0xc00004e6
c00096a2:	6a 22                	push   0x22
c00096a4:	53                   	push   ebx
c00096a5:	e8 2a fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096aa:	6a 00                	push   0x0
c00096ac:	68 5d 04 00 c0       	push   0xc000045d
c00096b1:	6a 23                	push   0x23
c00096b3:	53                   	push   ebx
c00096b4:	e8 1b fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096b9:	83 c4 20             	add    esp,0x20
c00096bc:	6a 00                	push   0x0
c00096be:	68 67 04 00 c0       	push   0xc0000467
c00096c3:	6a 24                	push   0x24
c00096c5:	53                   	push   ebx
c00096c6:	e8 09 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096cb:	6a 00                	push   0x0
c00096cd:	68 71 04 00 c0       	push   0xc0000471
c00096d2:	6a 25                	push   0x25
c00096d4:	53                   	push   ebx
c00096d5:	e8 fa fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096da:	83 c4 20             	add    esp,0x20
c00096dd:	6a 00                	push   0x0
c00096df:	68 7b 04 00 c0       	push   0xc000047b
c00096e4:	6a 26                	push   0x26
c00096e6:	53                   	push   ebx
c00096e7:	e8 e8 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096ec:	6a 00                	push   0x0
c00096ee:	68 85 04 00 c0       	push   0xc0000485
c00096f3:	6a 27                	push   0x27
c00096f5:	53                   	push   ebx
c00096f6:	e8 d9 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096fb:	83 c4 20             	add    esp,0x20
c00096fe:	6a 00                	push   0x0
c0009700:	68 8f 04 00 c0       	push   0xc000048f
c0009705:	6a 28                	push   0x28
c0009707:	53                   	push   ebx
c0009708:	e8 c7 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000970d:	6a 00                	push   0x0
c000970f:	68 99 04 00 c0       	push   0xc0000499
c0009714:	6a 29                	push   0x29
c0009716:	53                   	push   ebx
c0009717:	e8 b8 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000971c:	83 c4 20             	add    esp,0x20
c000971f:	6a 00                	push   0x0
c0009721:	68 a3 04 00 c0       	push   0xc00004a3
c0009726:	6a 2a                	push   0x2a
c0009728:	53                   	push   ebx
c0009729:	e8 a6 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000972e:	6a 00                	push   0x0
c0009730:	68 ad 04 00 c0       	push   0xc00004ad
c0009735:	6a 2b                	push   0x2b
c0009737:	53                   	push   ebx
c0009738:	e8 97 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000973d:	83 c4 20             	add    esp,0x20
c0009740:	6a 00                	push   0x0
c0009742:	68 b7 04 00 c0       	push   0xc00004b7
c0009747:	6a 2c                	push   0x2c
c0009749:	53                   	push   ebx
c000974a:	e8 85 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000974f:	6a 00                	push   0x0
c0009751:	68 c1 04 00 c0       	push   0xc00004c1
c0009756:	6a 2d                	push   0x2d
c0009758:	53                   	push   ebx
c0009759:	e8 76 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000975e:	83 c4 20             	add    esp,0x20
c0009761:	6a 00                	push   0x0
c0009763:	68 cb 04 00 c0       	push   0xc00004cb
c0009768:	6a 2e                	push   0x2e
c000976a:	53                   	push   ebx
c000976b:	e8 64 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009770:	6a 00                	push   0x0
c0009772:	68 d5 04 00 c0       	push   0xc00004d5
c0009777:	6a 2f                	push   0x2f
c0009779:	53                   	push   ebx
c000977a:	e8 55 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000977f:	83 c4 20             	add    esp,0x20
c0009782:	6a 00                	push   0x0
c0009784:	68 2b 05 00 c0       	push   0xc000052b
c0009789:	6a 30                	push   0x30
c000978b:	53                   	push   ebx
c000978c:	e8 43 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009791:	6a 00                	push   0x0
c0009793:	68 35 05 00 c0       	push   0xc0000535
c0009798:	6a 31                	push   0x31
c000979a:	53                   	push   ebx
c000979b:	e8 34 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097a0:	83 c4 20             	add    esp,0x20
c00097a3:	6a 00                	push   0x0
c00097a5:	68 3f 05 00 c0       	push   0xc000053f
c00097aa:	6a 32                	push   0x32
c00097ac:	53                   	push   ebx
c00097ad:	e8 22 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097b2:	6a 00                	push   0x0
c00097b4:	68 49 05 00 c0       	push   0xc0000549
c00097b9:	6a 33                	push   0x33
c00097bb:	53                   	push   ebx
c00097bc:	e8 13 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097c1:	83 c4 20             	add    esp,0x20
c00097c4:	6a 00                	push   0x0
c00097c6:	68 53 05 00 c0       	push   0xc0000553
c00097cb:	6a 34                	push   0x34
c00097cd:	53                   	push   ebx
c00097ce:	e8 01 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097d3:	6a 00                	push   0x0
c00097d5:	68 5d 05 00 c0       	push   0xc000055d
c00097da:	6a 35                	push   0x35
c00097dc:	53                   	push   ebx
c00097dd:	e8 f2 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097e2:	83 c4 20             	add    esp,0x20
c00097e5:	6a 00                	push   0x0
c00097e7:	68 67 05 00 c0       	push   0xc0000567
c00097ec:	6a 36                	push   0x36
c00097ee:	53                   	push   ebx
c00097ef:	e8 e0 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097f4:	6a 00                	push   0x0
c00097f6:	68 71 05 00 c0       	push   0xc0000571
c00097fb:	6a 37                	push   0x37
c00097fd:	53                   	push   ebx
c00097fe:	e8 d1 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009803:	83 c4 1c             	add    esp,0x1c
c0009806:	6a 03                	push   0x3
c0009808:	6a 02                	push   0x2
c000980a:	ff 35 b0 65 02 c0    	push   DWORD PTR ds:0xc00265b0
c0009810:	e8 a1 26 00 00       	call   c000beb6 <VAS::allocatePages(int, int)>
c0009815:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000981c:	89 c6                	mov    esi,eax
c000981e:	e8 a0 01 00 00       	call   c00099c3 <malloc>
c0009823:	81 c6 00 20 00 00    	add    esi,0x2000
c0009829:	89 04 24             	mov    DWORD PTR [esp],eax
c000982c:	89 c7                	mov    edi,eax
c000982e:	e8 1d 18 00 00       	call   c000b050 <TSS::TSS()>
c0009833:	83 c4 0c             	add    esp,0xc
c0009836:	68 fb 03 00 c0       	push   0xc00003fb
c000983b:	56                   	push   esi
c000983c:	57                   	push   edi
c000983d:	e8 52 18 00 00       	call   c000b094 <TSS::setup(unsigned long, unsigned long)>
c0009842:	89 c6                	mov    esi,eax
c0009844:	58                   	pop    eax
c0009845:	5a                   	pop    edx
c0009846:	6a 00                	push   0x0
c0009848:	8d 44 24 14          	lea    eax,[esp+0x14]
c000984c:	50                   	push   eax
c000984d:	e8 d6 fb ff ff       	call   c0009428 <IDTEntry::IDTEntry(bool)>
c0009852:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009856:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000985b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0009862:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0009868:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000986c:	80 ce 05             	or     dh,0x5
c000986f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0009872:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009876:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000987a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000987d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009880:	e8 87 fc ff ff       	call   c000950c <IDT::flush()>
c0009885:	83 c4 20             	add    esp,0x20
c0009888:	5b                   	pop    ebx
c0009889:	5e                   	pop    esi
c000988a:	5f                   	pop    edi
c000988b:	c3                   	ret    

c000988c <sbrk>:
c000988c:	55                   	push   ebp
c000988d:	57                   	push   edi
c000988e:	56                   	push   esi
c000988f:	53                   	push   ebx
c0009890:	83 ec 24             	sub    esp,0x24
c0009893:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009897:	53                   	push   ebx
c0009898:	68 18 28 02 c0       	push   0xc0022818
c000989d:	e8 3d 32 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c00098a2:	83 c4 10             	add    esp,0x10
c00098a5:	85 db                	test   ebx,ebx
c00098a7:	74 5f                	je     c0009908 <sbrk+0x7c>
c00098a9:	78 64                	js     c000990f <sbrk+0x83>
c00098ab:	a1 ec 56 02 c0       	mov    eax,ds:0xc00256ec
c00098b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00098b4:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c00098ba:	89 dd                	mov    ebp,ebx
c00098bc:	78 69                	js     c0009927 <sbrk+0x9b>
c00098be:	c1 fd 0c             	sar    ebp,0xc
c00098c1:	bb 00 00 00 00       	mov    ebx,0x0
c00098c6:	8b 35 b0 65 02 c0    	mov    esi,DWORD PTR ds:0xc00265b0
c00098cc:	8b 3d ec 56 02 c0    	mov    edi,DWORD PTR ds:0xc00256ec
c00098d2:	e8 22 05 00 00       	call   c0009df9 <Phys::allocatePage()>
c00098d7:	68 01 04 00 00       	push   0x401
c00098dc:	57                   	push   edi
c00098dd:	50                   	push   eax
c00098de:	56                   	push   esi
c00098df:	e8 d0 24 00 00       	call   c000bdb4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00098e4:	81 05 ec 56 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00256ec,0x1000
c00098ee:	43                   	inc    ebx
c00098ef:	83 c4 10             	add    esp,0x10
c00098f2:	39 dd                	cmp    ebp,ebx
c00098f4:	75 d0                	jne    c00098c6 <sbrk+0x3a>
c00098f6:	0f 20 d8             	mov    eax,cr3
c00098f9:	0f 22 d8             	mov    cr3,eax
c00098fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009900:	83 c4 1c             	add    esp,0x1c
c0009903:	5b                   	pop    ebx
c0009904:	5e                   	pop    esi
c0009905:	5f                   	pop    edi
c0009906:	5d                   	pop    ebp
c0009907:	c3                   	ret    
c0009908:	a1 ec 56 02 c0       	mov    eax,ds:0xc00256ec
c000990d:	eb f1                	jmp    c0009900 <sbrk+0x74>
c000990f:	83 ec 08             	sub    esp,0x8
c0009912:	53                   	push   ebx
c0009913:	68 44 28 02 c0       	push   0xc0022844
c0009918:	e8 c2 31 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000991d:	83 c4 10             	add    esp,0x10
c0009920:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009925:	eb d9                	jmp    c0009900 <sbrk+0x74>
c0009927:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c000992d:	eb 8f                	jmp    c00098be <sbrk+0x32>

c000992f <mmap>:
c000992f:	83 ec 18             	sub    esp,0x18
c0009932:	68 36 28 02 c0       	push   0xc0022836
c0009937:	e8 65 aa 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c000993c:	b8 00 00 00 00       	mov    eax,0x0
c0009941:	83 c4 1c             	add    esp,0x1c
c0009944:	c3                   	ret    

c0009945 <munmap>:
c0009945:	83 ec 18             	sub    esp,0x18
c0009948:	68 3b 28 02 c0       	push   0xc002283b
c000994d:	e8 4f aa 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c0009952:	b8 00 00 00 00       	mov    eax,0x0
c0009957:	83 c4 1c             	add    esp,0x1c
c000995a:	c3                   	ret    

c000995b <liballoc_lock()>:
c000995b:	fa                   	cli    
c000995c:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c0009962:	b8 00 00 00 00       	mov    eax,0x0
c0009967:	c3                   	ret    

c0009968 <liballoc_unlock()>:
c0009968:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000996d:	48                   	dec    eax
c000996e:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c0009973:	75 01                	jne    c0009976 <liballoc_unlock()+0xe>
c0009975:	fb                   	sti    
c0009976:	b8 00 00 00 00       	mov    eax,0x0
c000997b:	c3                   	ret    

c000997c <liballoc_alloc(int)>:
c000997c:	83 ec 10             	sub    esp,0x10
c000997f:	6a 01                	push   0x1
c0009981:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009985:	ff 35 b0 65 02 c0    	push   DWORD PTR ds:0xc00265b0
c000998b:	e8 26 25 00 00       	call   c000beb6 <VAS::allocatePages(int, int)>
c0009990:	83 c4 1c             	add    esp,0x1c
c0009993:	c3                   	ret    

c0009994 <liballoc_free(void*, int)>:
c0009994:	83 ec 14             	sub    esp,0x14
c0009997:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000999b:	ff 35 b0 65 02 c0    	push   DWORD PTR ds:0xc00265b0
c00099a1:	e8 ba 21 00 00       	call   c000bb60 <VAS::freeAllocatedPages(unsigned long)>
c00099a6:	b8 00 00 00 00       	mov    eax,0x0
c00099ab:	83 c4 1c             	add    esp,0x1c
c00099ae:	c3                   	ret    

c00099af <realloc>:
c00099af:	83 ec 14             	sub    esp,0x14
c00099b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ba:	e8 a1 7b ff ff       	call   c0001560 <dlrealloc>
c00099bf:	83 c4 1c             	add    esp,0x1c
c00099c2:	c3                   	ret    

c00099c3 <malloc>:
c00099c3:	83 ec 18             	sub    esp,0x18
c00099c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ca:	e8 54 76 ff ff       	call   c0001023 <dlmalloc>
c00099cf:	83 c4 1c             	add    esp,0x1c
c00099d2:	c3                   	ret    

c00099d3 <free>:
c00099d3:	83 ec 18             	sub    esp,0x18
c00099d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099da:	e8 e9 72 ff ff       	call   c0000cc8 <dlfree>
c00099df:	83 c4 1c             	add    esp,0x1c
c00099e2:	c3                   	ret    

c00099e3 <rfree>:
c00099e3:	83 ec 18             	sub    esp,0x18
c00099e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ea:	e8 d9 72 ff ff       	call   c0000cc8 <dlfree>
c00099ef:	83 c4 1c             	add    esp,0x1c
c00099f2:	c3                   	ret    

c00099f3 <calloc>:
c00099f3:	56                   	push   esi
c00099f4:	53                   	push   ebx
c00099f5:	83 ec 10             	sub    esp,0x10
c00099f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00099fc:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009a01:	53                   	push   ebx
c0009a02:	e8 bc ff ff ff       	call   c00099c3 <malloc>
c0009a07:	89 c6                	mov    esi,eax
c0009a09:	83 c4 0c             	add    esp,0xc
c0009a0c:	53                   	push   ebx
c0009a0d:	6a 00                	push   0x0
c0009a0f:	50                   	push   eax
c0009a10:	e8 6f 6c ff ff       	call   c0000684 <memset>
c0009a15:	89 f0                	mov    eax,esi
c0009a17:	83 c4 14             	add    esp,0x14
c0009a1a:	5b                   	pop    ebx
c0009a1b:	5e                   	pop    esi
c0009a1c:	c3                   	ret    

c0009a1d <Krnl::setBootMessage(char const*)>:
c0009a1d:	57                   	push   edi
c0009a1e:	56                   	push   esi
c0009a1f:	53                   	push   ebx
c0009a20:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009a26:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009a2d:	68 9e 00 00 00       	push   0x9e
c0009a32:	6a 00                	push   0x0
c0009a34:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009a38:	56                   	push   esi
c0009a39:	e8 46 6c ff ff       	call   c0000684 <memset>
c0009a3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009a41:	e8 5a 6c ff ff       	call   c00006a0 <strlen>
c0009a46:	ba 50 00 00 00       	mov    edx,0x50
c0009a4b:	83 c4 10             	add    esp,0x10
c0009a4e:	29 c2                	sub    edx,eax
c0009a50:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009a54:	d1 ea                	shr    edx,1
c0009a56:	84 c0                	test   al,al
c0009a58:	74 19                	je     c0009a73 <Krnl::setBootMessage(char const*)+0x56>
c0009a5a:	01 d2                	add    edx,edx
c0009a5c:	43                   	inc    ebx
c0009a5d:	01 f2                	add    edx,esi
c0009a5f:	80 cc 0f             	or     ah,0xf
c0009a62:	83 c2 02             	add    edx,0x2
c0009a65:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009a69:	43                   	inc    ebx
c0009a6a:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009a6f:	84 c0                	test   al,al
c0009a71:	75 ec                	jne    c0009a5f <Krnl::setBootMessage(char const*)+0x42>
c0009a73:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009a78:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009a7d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009a7f:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009a85:	5b                   	pop    ebx
c0009a86:	5e                   	pop    esi
c0009a87:	5f                   	pop    edi
c0009a88:	c3                   	ret    

c0009a89 <kernel_main>:
c0009a89:	57                   	push   edi
c0009a8a:	bf f9 03 00 00       	mov    edi,0x3f9
c0009a8f:	56                   	push   esi
c0009a90:	89 fa                	mov    edx,edi
c0009a92:	53                   	push   ebx
c0009a93:	31 f6                	xor    esi,esi
c0009a95:	83 ec 2c             	sub    esp,0x2c
c0009a98:	89 f0                	mov    eax,esi
c0009a9a:	ee                   	out    dx,al
c0009a9b:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009aa0:	b0 80                	mov    al,0x80
c0009aa2:	89 da                	mov    edx,ebx
c0009aa4:	ee                   	out    dx,al
c0009aa5:	b1 03                	mov    cl,0x3
c0009aa7:	ba f8 03 00 00       	mov    edx,0x3f8
c0009aac:	88 c8                	mov    al,cl
c0009aae:	ee                   	out    dx,al
c0009aaf:	89 f0                	mov    eax,esi
c0009ab1:	89 fa                	mov    edx,edi
c0009ab3:	ee                   	out    dx,al
c0009ab4:	88 c8                	mov    al,cl
c0009ab6:	89 da                	mov    edx,ebx
c0009ab8:	ee                   	out    dx,al
c0009ab9:	b0 c7                	mov    al,0xc7
c0009abb:	ba fa 03 00 00       	mov    edx,0x3fa
c0009ac0:	ee                   	out    dx,al
c0009ac1:	b0 0b                	mov    al,0xb
c0009ac3:	ba fc 03 00 00       	mov    edx,0x3fc
c0009ac8:	ee                   	out    dx,al
c0009ac9:	68 74 28 02 c0       	push   0xc0022874
c0009ace:	e8 0c 30 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c0009ad3:	e8 76 0a 00 00       	call   c000a54e <installVgaTextImplementation()>
c0009ad8:	0f b6 05 00 57 02 c0 	movzx  eax,BYTE PTR ds:0xc0025700
c0009adf:	83 c4 10             	add    esp,0x10
c0009ae2:	84 c0                	test   al,al
c0009ae4:	74 6c                	je     c0009b52 <kernel_main+0xc9>
c0009ae6:	31 db                	xor    ebx,ebx
c0009ae8:	bf 0a 00 00 00       	mov    edi,0xa
c0009aed:	be 05 00 00 00       	mov    esi,0x5
c0009af2:	31 c9                	xor    ecx,ecx
c0009af4:	eb 2a                	jmp    c0009b20 <kernel_main+0x97>
c0009af6:	3c 0d                	cmp    al,0xd
c0009af8:	74 1a                	je     c0009b14 <kernel_main+0x8b>
c0009afa:	3c 0a                	cmp    al,0xa
c0009afc:	74 40                	je     c0009b3e <kernel_main+0xb5>
c0009afe:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009b01:	80 cc 0e             	or     ah,0xe
c0009b04:	c1 e2 04             	shl    edx,0x4
c0009b07:	01 ca                	add    edx,ecx
c0009b09:	41                   	inc    ecx
c0009b0a:	01 fa                	add    edx,edi
c0009b0c:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009b14:	43                   	inc    ebx
c0009b15:	0f b6 83 00 57 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffda900]
c0009b1c:	84 c0                	test   al,al
c0009b1e:	74 32                	je     c0009b52 <kernel_main+0xc9>
c0009b20:	80 b9 36 57 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffda8ca],0xdb
c0009b27:	75 cd                	jne    c0009af6 <kernel_main+0x6d>
c0009b29:	0f b6 91 35 57 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffda8cb]
c0009b30:	83 e2 fe             	and    edx,0xfffffffe
c0009b33:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009b39:	75 bb                	jne    c0009af6 <kernel_main+0x6d>
c0009b3b:	47                   	inc    edi
c0009b3c:	eb b8                	jmp    c0009af6 <kernel_main+0x6d>
c0009b3e:	43                   	inc    ebx
c0009b3f:	46                   	inc    esi
c0009b40:	31 c9                	xor    ecx,ecx
c0009b42:	0f b6 83 00 57 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffda900]
c0009b49:	bf 0a 00 00 00       	mov    edi,0xa
c0009b4e:	84 c0                	test   al,al
c0009b50:	75 ce                	jne    c0009b20 <kernel_main+0x97>
c0009b52:	83 ec 0c             	sub    esp,0xc
c0009b55:	68 8c 28 02 c0       	push   0xc002288c
c0009b5a:	e8 be fe ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009b5f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009b64:	a3 a0 64 02 c0       	mov    ds:0xc00264a0,eax
c0009b69:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009b6e:	05 ff 0f 00 00       	add    eax,0xfff
c0009b73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b7b:	e8 f8 03 00 00       	call   c0009f78 <Phys::physicalMemorySetup(unsigned int)>
c0009b80:	e8 47 1d 00 00       	call   c000b8cc <Virt::virtualMemorySetup()>
c0009b85:	58                   	pop    eax
c0009b86:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0009b8a:	53                   	push   ebx
c0009b8b:	e8 f8 1d 00 00       	call   c000b988 <VAS::VAS()>
c0009b90:	89 1d b0 65 02 c0    	mov    DWORD PTR ds:0xc00265b0,ebx
c0009b96:	e8 85 64 ff ff       	call   c0000020 <callGlobalConstructors>
c0009b9b:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c0009ba2:	e8 1c fe ff ff       	call   c00099c3 <malloc>
c0009ba7:	89 04 24             	mov    DWORD PTR [esp],eax
c0009baa:	89 c6                	mov    esi,eax
c0009bac:	e8 09 f0 ff ff       	call   c0008bba <Computer::Computer()>
c0009bb1:	6a 00                	push   0x0
c0009bb3:	89 35 88 64 02 c0    	mov    DWORD PTR ds:0xc0026488,esi
c0009bb9:	6a 00                	push   0x0
c0009bbb:	6a 00                	push   0x0
c0009bbd:	56                   	push   esi
c0009bbe:	e8 03 f4 ff ff       	call   c0008fc6 <Computer::open(int, int, void*)>
c0009bc3:	83 c4 14             	add    esp,0x14
c0009bc6:	53                   	push   ebx
c0009bc7:	e8 6c 20 00 00       	call   c000bc38 <VAS::~VAS()>
c0009bcc:	83 c4 30             	add    esp,0x30
c0009bcf:	5b                   	pop    ebx
c0009bd0:	5e                   	pop    esi
c0009bd1:	5f                   	pop    edi
c0009bd2:	c3                   	ret    

c0009bd3 <Phys::allocateDMA(unsigned long)>:
c0009bd3:	55                   	push   ebp
c0009bd4:	31 ed                	xor    ebp,ebp
c0009bd6:	57                   	push   edi
c0009bd7:	56                   	push   esi
c0009bd8:	53                   	push   ebx
c0009bd9:	31 db                	xor    ebx,ebx
c0009bdb:	83 ec 28             	sub    esp,0x28
c0009bde:	68 ab 28 02 c0       	push   0xc00228ab
c0009be3:	e8 f7 2e 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c0009be8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009bec:	83 c4 10             	add    esp,0x10
c0009bef:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0009bf5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009bfd:	c1 ef 0c             	shr    edi,0xc
c0009c00:	31 c0                	xor    eax,eax
c0009c02:	eb 19                	jmp    c0009c1d <Phys::allocateDMA(unsigned long)+0x4a>
c0009c04:	85 c0                	test   eax,eax
c0009c06:	75 06                	jne    c0009c0e <Phys::allocateDMA(unsigned long)+0x3b>
c0009c08:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0009c0c:	89 dd                	mov    ebp,ebx
c0009c0e:	8d 70 01             	lea    esi,[eax+0x1]
c0009c11:	39 f7                	cmp    edi,esi
c0009c13:	74 3f                	je     c0009c54 <Phys::allocateDMA(unsigned long)+0x81>
c0009c15:	89 f0                	mov    eax,esi
c0009c17:	43                   	inc    ebx
c0009c18:	83 fb 0f             	cmp    ebx,0xf
c0009c1b:	7f 11                	jg     c0009c2e <Phys::allocateDMA(unsigned long)+0x5b>
c0009c1d:	80 bb bc 64 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9b44],0x0
c0009c24:	74 de                	je     c0009c04 <Phys::allocateDMA(unsigned long)+0x31>
c0009c26:	31 c0                	xor    eax,eax
c0009c28:	43                   	inc    ebx
c0009c29:	83 fb 0f             	cmp    ebx,0xf
c0009c2c:	7e ef                	jle    c0009c1d <Phys::allocateDMA(unsigned long)+0x4a>
c0009c2e:	83 ec 0c             	sub    esp,0xc
c0009c31:	68 df 28 02 c0       	push   0xc00228df
c0009c36:	e8 a4 2e 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c0009c3b:	c7 04 24 9c 29 02 c0 	mov    DWORD PTR [esp],0xc002299c
c0009c42:	e8 5a a7 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c0009c47:	83 c4 10             	add    esp,0x10
c0009c4a:	31 c0                	xor    eax,eax
c0009c4c:	83 c4 1c             	add    esp,0x1c
c0009c4f:	5b                   	pop    ebx
c0009c50:	5e                   	pop    esi
c0009c51:	5f                   	pop    edi
c0009c52:	5d                   	pop    ebp
c0009c53:	c3                   	ret    
c0009c54:	89 e9                	mov    ecx,ebp
c0009c56:	c1 f9 04             	sar    ecx,0x4
c0009c59:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009c5d:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0009c61:	89 ca                	mov    edx,ecx
c0009c63:	4a                   	dec    edx
c0009c64:	79 03                	jns    c0009c69 <Phys::allocateDMA(unsigned long)+0x96>
c0009c66:	8d 51 0e             	lea    edx,[ecx+0xe]
c0009c69:	c1 fa 04             	sar    edx,0x4
c0009c6c:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0009c70:	74 08                	je     c0009c7a <Phys::allocateDMA(unsigned long)+0xa7>
c0009c72:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009c76:	31 c0                	xor    eax,eax
c0009c78:	eb ae                	jmp    c0009c28 <Phys::allocateDMA(unsigned long)+0x55>
c0009c7a:	85 f6                	test   esi,esi
c0009c7c:	74 15                	je     c0009c93 <Phys::allocateDMA(unsigned long)+0xc0>
c0009c7e:	8d 95 bc 64 02 c0    	lea    edx,[ebp-0x3ffd9b44]
c0009c84:	8d 84 05 bd 64 02 c0 	lea    eax,[ebp+eax*1-0x3ffd9b43]
c0009c8b:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0009c8e:	42                   	inc    edx
c0009c8f:	39 d0                	cmp    eax,edx
c0009c91:	75 f8                	jne    c0009c8b <Phys::allocateDMA(unsigned long)+0xb8>
c0009c93:	83 ec 0c             	sub    esp,0xc
c0009c96:	01 3d b4 64 02 c0    	add    DWORD PTR ds:0xc00264b4,edi
c0009c9c:	68 c4 28 02 c0       	push   0xc00228c4
c0009ca1:	e8 39 2e 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c0009ca6:	83 c4 10             	add    esp,0x10
c0009ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009cad:	85 c0                	test   eax,eax
c0009caf:	74 23                	je     c0009cd4 <Phys::allocateDMA(unsigned long)+0x101>
c0009cb1:	83 ec 0c             	sub    esp,0xc
c0009cb4:	68 db 28 02 c0       	push   0xc00228db
c0009cb9:	e8 21 2e 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c0009cbe:	c7 04 24 9c 29 02 c0 	mov    DWORD PTR [esp],0xc002299c
c0009cc5:	e8 d7 a6 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c0009cca:	83 c4 10             	add    esp,0x10
c0009ccd:	89 f0                	mov    eax,esi
c0009ccf:	e9 43 ff ff ff       	jmp    c0009c17 <Phys::allocateDMA(unsigned long)+0x44>
c0009cd4:	c1 e5 0c             	shl    ebp,0xc
c0009cd7:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0009cdd:	e9 6a ff ff ff       	jmp    c0009c4c <Phys::allocateDMA(unsigned long)+0x79>

c0009ce2 <Phys::freeDMA(unsigned long, unsigned long)>:
c0009ce2:	83 ec 18             	sub    esp,0x18
c0009ce5:	68 e3 28 02 c0       	push   0xc00228e3
c0009cea:	e8 f0 2d 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c0009cef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009cf3:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0009cf9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009cfd:	c1 ea 0c             	shr    edx,0xc
c0009d00:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0009d05:	29 15 b4 64 02 c0    	sub    DWORD PTR ds:0xc00264b4,edx
c0009d0b:	c1 e8 0c             	shr    eax,0xc
c0009d0e:	83 c4 10             	add    esp,0x10
c0009d11:	85 d2                	test   edx,edx
c0009d13:	74 0f                	je     c0009d24 <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c0009d15:	05 bc 64 02 c0       	add    eax,0xc00264bc
c0009d1a:	01 c2                	add    edx,eax
c0009d1c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0009d1f:	40                   	inc    eax
c0009d20:	39 d0                	cmp    eax,edx
c0009d22:	75 f8                	jne    c0009d1c <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0009d24:	83 c4 0c             	add    esp,0xc
c0009d27:	c3                   	ret    

c0009d28 <Phys::setPageState(unsigned long, bool)>:
c0009d28:	56                   	push   esi
c0009d29:	ba 01 00 00 00       	mov    edx,0x1
c0009d2e:	53                   	push   ebx
c0009d2f:	8b 35 44 58 02 c0    	mov    esi,DWORD PTR ds:0xc0025844
c0009d35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009d39:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009d3d:	89 c8                	mov    eax,ecx
c0009d3f:	83 e1 07             	and    ecx,0x7
c0009d42:	c1 e8 03             	shr    eax,0x3
c0009d45:	d3 e3                	shl    ebx,cl
c0009d47:	01 c6                	add    esi,eax
c0009d49:	d3 e2                	shl    edx,cl
c0009d4b:	f7 d2                	not    edx
c0009d4d:	20 16                	and    BYTE PTR [esi],dl
c0009d4f:	03 05 44 58 02 c0    	add    eax,DWORD PTR ds:0xc0025844
c0009d55:	08 18                	or     BYTE PTR [eax],bl
c0009d57:	5b                   	pop    ebx
c0009d58:	5e                   	pop    esi
c0009d59:	c3                   	ret    

c0009d5a <Phys::getPageState(unsigned long)>:
c0009d5a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009d5e:	8b 15 44 58 02 c0    	mov    edx,DWORD PTR ds:0xc0025844
c0009d64:	89 c8                	mov    eax,ecx
c0009d66:	83 e1 07             	and    ecx,0x7
c0009d69:	c1 e8 03             	shr    eax,0x3
c0009d6c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0009d70:	d3 f8                	sar    eax,cl
c0009d72:	83 e0 01             	and    eax,0x1
c0009d75:	c3                   	ret    

c0009d76 <Phys::freePage(unsigned long)>:
c0009d76:	53                   	push   ebx
c0009d77:	83 ec 10             	sub    esp,0x10
c0009d7a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009d7e:	53                   	push   ebx
c0009d7f:	68 f9 28 02 c0       	push   0xc00228f9
c0009d84:	e8 56 2d 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c0009d89:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c0009d8f:	83 c4 10             	add    esp,0x10
c0009d92:	3d ff ff 00 00       	cmp    eax,0xffff
c0009d97:	76 3d                	jbe    c0009dd6 <Phys::freePage(unsigned long)+0x60>
c0009d99:	83 ec 0c             	sub    esp,0xc
c0009d9c:	c1 eb 0c             	shr    ebx,0xc
c0009d9f:	53                   	push   ebx
c0009da0:	e8 b5 ff ff ff       	call   c0009d5a <Phys::getPageState(unsigned long)>
c0009da5:	83 c4 10             	add    esp,0x10
c0009da8:	84 c0                	test   al,al
c0009daa:	74 19                	je     c0009dc5 <Phys::freePage(unsigned long)+0x4f>
c0009dac:	83 ec 08             	sub    esp,0x8
c0009daf:	ff 0d b4 64 02 c0    	dec    DWORD PTR ds:0xc00264b4
c0009db5:	6a 00                	push   0x0
c0009db7:	53                   	push   ebx
c0009db8:	e8 6b ff ff ff       	call   c0009d28 <Phys::setPageState(unsigned long, bool)>
c0009dbd:	83 c4 10             	add    esp,0x10
c0009dc0:	83 c4 08             	add    esp,0x8
c0009dc3:	5b                   	pop    ebx
c0009dc4:	c3                   	ret    
c0009dc5:	c7 44 24 10 23 29 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022923
c0009dcd:	83 c4 08             	add    esp,0x8
c0009dd0:	5b                   	pop    ebx
c0009dd1:	e9 cb a5 00 00       	jmp    c00143a1 <Krnl::panic(char const*)>
c0009dd6:	83 ec 08             	sub    esp,0x8
c0009dd9:	53                   	push   ebx
c0009dda:	68 0c 29 02 c0       	push   0xc002290c
c0009ddf:	e8 fb 2c 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c0009de4:	58                   	pop    eax
c0009de5:	5a                   	pop    edx
c0009de6:	68 00 10 00 00       	push   0x1000
c0009deb:	53                   	push   ebx
c0009dec:	e8 f1 fe ff ff       	call   c0009ce2 <Phys::freeDMA(unsigned long, unsigned long)>
c0009df1:	83 c4 10             	add    esp,0x10
c0009df4:	83 c4 08             	add    esp,0x8
c0009df7:	5b                   	pop    ebx
c0009df8:	c3                   	ret    

c0009df9 <Phys::allocatePage()>:
c0009df9:	56                   	push   esi
c0009dfa:	53                   	push   ebx
c0009dfb:	83 ec 14             	sub    esp,0x14
c0009dfe:	8b 35 a8 64 02 c0    	mov    esi,DWORD PTR ds:0xc00264a8
c0009e04:	89 f3                	mov    ebx,esi
c0009e06:	eb 0a                	jmp    c0009e12 <Phys::allocatePage()+0x19>
c0009e08:	89 1d a8 64 02 c0    	mov    DWORD PTR ds:0xc00264a8,ebx
c0009e0e:	39 de                	cmp    esi,ebx
c0009e10:	74 24                	je     c0009e36 <Phys::allocatePage()+0x3d>
c0009e12:	53                   	push   ebx
c0009e13:	e8 42 ff ff ff       	call   c0009d5a <Phys::getPageState(unsigned long)>
c0009e18:	5a                   	pop    edx
c0009e19:	84 c0                	test   al,al
c0009e1b:	74 69                	je     c0009e86 <Phys::allocatePage()+0x8d>
c0009e1d:	43                   	inc    ebx
c0009e1e:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0009e24:	75 e2                	jne    c0009e08 <Phys::allocatePage()+0xf>
c0009e26:	31 db                	xor    ebx,ebx
c0009e28:	c7 05 a8 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00264a8,0x0
c0009e32:	39 de                	cmp    esi,ebx
c0009e34:	75 dc                	jne    c0009e12 <Phys::allocatePage()+0x19>
c0009e36:	83 ec 0c             	sub    esp,0xc
c0009e39:	80 35 cc 64 02 c0 01 	xor    BYTE PTR ds:0xc00264cc,0x1
c0009e40:	68 c4 29 02 c0       	push   0xc00229c4
c0009e45:	e8 95 2c 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c0009e4a:	58                   	pop    eax
c0009e4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009e50:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009e53:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0009e59:	e8 10 29 00 00       	call   c000c76e <VAS::scanForEviction()>
c0009e5e:	83 c4 10             	add    esp,0x10
c0009e61:	85 c0                	test   eax,eax
c0009e63:	75 62                	jne    c0009ec7 <Phys::allocatePage()+0xce>
c0009e65:	83 ec 0c             	sub    esp,0xc
c0009e68:	68 e8 29 02 c0       	push   0xc00229e8
c0009e6d:	e8 2f a5 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c0009e72:	83 c4 10             	add    esp,0x10
c0009e75:	8b 1d a8 64 02 c0    	mov    ebx,DWORD PTR ds:0xc00264a8
c0009e7b:	53                   	push   ebx
c0009e7c:	e8 d9 fe ff ff       	call   c0009d5a <Phys::getPageState(unsigned long)>
c0009e81:	5a                   	pop    edx
c0009e82:	84 c0                	test   al,al
c0009e84:	75 97                	jne    c0009e1d <Phys::allocatePage()+0x24>
c0009e86:	6a 01                	push   0x1
c0009e88:	53                   	push   ebx
c0009e89:	e8 9a fe ff ff       	call   c0009d28 <Phys::setPageState(unsigned long, bool)>
c0009e8e:	5a                   	pop    edx
c0009e8f:	a1 b4 64 02 c0       	mov    eax,ds:0xc00264b4
c0009e94:	59                   	pop    ecx
c0009e95:	40                   	inc    eax
c0009e96:	8b 15 a8 64 02 c0    	mov    edx,DWORD PTR ds:0xc00264a8
c0009e9c:	a3 b4 64 02 c0       	mov    ds:0xc00264b4,eax
c0009ea1:	c1 e2 0c             	shl    edx,0xc
c0009ea4:	52                   	push   edx
c0009ea5:	ff 35 b8 64 02 c0    	push   DWORD PTR ds:0xc00264b8
c0009eab:	50                   	push   eax
c0009eac:	68 39 29 02 c0       	push   0xc0022939
c0009eb1:	e8 29 2c 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c0009eb6:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c0009ebb:	83 c4 10             	add    esp,0x10
c0009ebe:	c1 e0 0c             	shl    eax,0xc
c0009ec1:	83 c4 14             	add    esp,0x14
c0009ec4:	5b                   	pop    ebx
c0009ec5:	5e                   	pop    esi
c0009ec6:	c3                   	ret    
c0009ec7:	83 ec 08             	sub    esp,0x8
c0009eca:	89 c2                	mov    edx,eax
c0009ecc:	6a 01                	push   0x1
c0009ece:	c1 ea 0c             	shr    edx,0xc
c0009ed1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ed5:	52                   	push   edx
c0009ed6:	e8 4d fe ff ff       	call   c0009d28 <Phys::setPageState(unsigned long, bool)>
c0009edb:	83 c4 10             	add    esp,0x10
c0009ede:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ee2:	eb dd                	jmp    c0009ec1 <Phys::allocatePage()+0xc8>

c0009ee4 <Phys::allocateContiguousPages(int)>:
c0009ee4:	57                   	push   edi
c0009ee5:	56                   	push   esi
c0009ee6:	53                   	push   ebx
c0009ee7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009eeb:	fa                   	cli    
c0009eec:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c0009ef2:	31 db                	xor    ebx,ebx
c0009ef4:	85 db                	test   ebx,ebx
c0009ef6:	75 11                	jne    c0009f09 <Phys::allocateContiguousPages(int)+0x25>
c0009ef8:	e8 fc fe ff ff       	call   c0009df9 <Phys::allocatePage()>
c0009efd:	83 fe 01             	cmp    esi,0x1
c0009f00:	89 c7                	mov    edi,eax
c0009f02:	74 21                	je     c0009f25 <Phys::allocateContiguousPages(int)+0x41>
c0009f04:	bb 01 00 00 00       	mov    ebx,0x1
c0009f09:	e8 eb fe ff ff       	call   c0009df9 <Phys::allocatePage()>
c0009f0e:	89 da                	mov    edx,ebx
c0009f10:	c1 e2 0c             	shl    edx,0xc
c0009f13:	01 fa                	add    edx,edi
c0009f15:	39 c2                	cmp    edx,eax
c0009f17:	74 20                	je     c0009f39 <Phys::allocateContiguousPages(int)+0x55>
c0009f19:	bb 01 00 00 00       	mov    ebx,0x1
c0009f1e:	89 c7                	mov    edi,eax
c0009f20:	83 fe 01             	cmp    esi,0x1
c0009f23:	75 e4                	jne    c0009f09 <Phys::allocateContiguousPages(int)+0x25>
c0009f25:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c0009f2a:	48                   	dec    eax
c0009f2b:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c0009f30:	75 01                	jne    c0009f33 <Phys::allocateContiguousPages(int)+0x4f>
c0009f32:	fb                   	sti    
c0009f33:	89 f8                	mov    eax,edi
c0009f35:	5b                   	pop    ebx
c0009f36:	5e                   	pop    esi
c0009f37:	5f                   	pop    edi
c0009f38:	c3                   	ret    
c0009f39:	43                   	inc    ebx
c0009f3a:	39 f3                	cmp    ebx,esi
c0009f3c:	75 b6                	jne    c0009ef4 <Phys::allocateContiguousPages(int)+0x10>
c0009f3e:	eb e5                	jmp    c0009f25 <Phys::allocateContiguousPages(int)+0x41>

c0009f40 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0009f40:	56                   	push   esi
c0009f41:	53                   	push   ebx
c0009f42:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009f46:	39 1d ac 64 02 c0    	cmp    DWORD PTR ds:0xc00264ac,ebx
c0009f4c:	73 06                	jae    c0009f54 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0009f4e:	89 1d ac 64 02 c0    	mov    DWORD PTR ds:0xc00264ac,ebx
c0009f54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f58:	c1 eb 0c             	shr    ebx,0xc
c0009f5b:	c1 e8 0c             	shr    eax,0xc
c0009f5e:	39 d8                	cmp    eax,ebx
c0009f60:	73 13                	jae    c0009f75 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0009f62:	6a 00                	push   0x0
c0009f64:	8d 70 01             	lea    esi,[eax+0x1]
c0009f67:	50                   	push   eax
c0009f68:	e8 bb fd ff ff       	call   c0009d28 <Phys::setPageState(unsigned long, bool)>
c0009f6d:	5a                   	pop    edx
c0009f6e:	89 f0                	mov    eax,esi
c0009f70:	59                   	pop    ecx
c0009f71:	39 f3                	cmp    ebx,esi
c0009f73:	75 ed                	jne    c0009f62 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0009f75:	5b                   	pop    ebx
c0009f76:	5e                   	pop    esi
c0009f77:	c3                   	ret    

c0009f78 <Phys::physicalMemorySetup(unsigned int)>:
c0009f78:	55                   	push   ebp
c0009f79:	57                   	push   edi
c0009f7a:	56                   	push   esi
c0009f7b:	53                   	push   ebx
c0009f7c:	31 db                	xor    ebx,ebx
c0009f7e:	83 ec 40             	sub    esp,0x40
c0009f81:	6a 10                	push   0x10
c0009f83:	6a 00                	push   0x0
c0009f85:	68 bc 64 02 c0       	push   0xc00264bc
c0009f8a:	e8 f5 66 ff ff       	call   c0000684 <memset>
c0009f8f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0009f93:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f98:	05 00 10 00 00       	add    eax,0x1000
c0009f9d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009fa1:	5a                   	pop    edx
c0009fa2:	59                   	pop    ecx
c0009fa3:	50                   	push   eax
c0009fa4:	68 57 29 02 c0       	push   0xc0022957
c0009fa9:	e8 31 2b 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c0009fae:	83 c4 10             	add    esp,0x10
c0009fb1:	83 ec 08             	sub    esp,0x8
c0009fb4:	6a 01                	push   0x1
c0009fb6:	53                   	push   ebx
c0009fb7:	43                   	inc    ebx
c0009fb8:	e8 6b fd ff ff       	call   c0009d28 <Phys::setPageState(unsigned long, bool)>
c0009fbd:	83 c4 10             	add    esp,0x10
c0009fc0:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0009fc6:	75 e9                	jne    c0009fb1 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0009fc8:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0009fcf:	66 85 c0             	test   ax,ax
c0009fd2:	0f 84 8e 01 00 00    	je     c000a166 <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c0009fd8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fdc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009fe4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009fe8:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0009fed:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ff1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009ff9:	eb 15                	jmp    c000a010 <Phys::physicalMemorySetup(unsigned int)+0x98>
c0009ffb:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009fff:	83 c3 18             	add    ebx,0x18
c000a002:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a006:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000a00a:	0f 84 66 01 00 00    	je     c000a176 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a010:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a013:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a016:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a019:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a01d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a021:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a023:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a026:	01 f0                	add    eax,esi
c000a028:	55                   	push   ebp
c000a029:	11 fa                	adc    edx,edi
c000a02b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a02f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a033:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a037:	56                   	push   esi
c000a038:	68 18 2a 02 c0       	push   0xc0022a18
c000a03d:	e8 9d 2a 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000a042:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a046:	83 c4 10             	add    esp,0x10
c000a049:	09 f8                	or     eax,edi
c000a04b:	0f 85 25 01 00 00    	jne    c000a176 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a051:	4d                   	dec    ebp
c000a052:	75 a7                	jne    c0009ffb <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a054:	ba 00 00 08 00       	mov    edx,0x80000
c000a059:	89 c1                	mov    ecx,eax
c000a05b:	39 f2                	cmp    edx,esi
c000a05d:	19 f9                	sbb    ecx,edi
c000a05f:	0f 82 a7 00 00 00    	jb     c000a10c <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a065:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a069:	89 c1                	mov    ecx,eax
c000a06b:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a06f:	0f 83 97 00 00 00    	jae    c000a10c <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a075:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a07a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a07e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a082:	39 fa                	cmp    edx,edi
c000a084:	19 e8                	sbb    eax,ebp
c000a086:	0f 82 a5 01 00 00    	jb     c000a231 <Phys::physicalMemorySetup(unsigned int)+0x2b9>
c000a08c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a090:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a094:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a09a:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a09f:	83 d5 ff             	adc    ebp,0xffffffff
c000a0a2:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a0a6:	31 c0                	xor    eax,eax
c000a0a8:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a0ac:	39 fa                	cmp    edx,edi
c000a0ae:	89 c1                	mov    ecx,eax
c000a0b0:	19 e9                	sbb    ecx,ebp
c000a0b2:	0f 83 43 ff ff ff    	jae    c0009ffb <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a0b8:	be 00 00 08 00       	mov    esi,0x80000
c000a0bd:	57                   	push   edi
c000a0be:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a0c2:	57                   	push   edi
c000a0c3:	56                   	push   esi
c000a0c4:	68 3c 2a 02 c0       	push   0xc0022a3c
c000a0c9:	e8 11 2a 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000a0ce:	5d                   	pop    ebp
c000a0cf:	58                   	pop    eax
c000a0d0:	57                   	push   edi
c000a0d1:	56                   	push   esi
c000a0d2:	e8 69 fe ff ff       	call   c0009f40 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a0d7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a0db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a0df:	83 c4 0c             	add    esp,0xc
c000a0e2:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a0e6:	03 05 b8 64 02 c0    	add    eax,DWORD PTR ds:0xc00264b8
c000a0ec:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a0f3:	a3 b8 64 02 c0       	mov    ds:0xc00264b8,eax
c000a0f8:	52                   	push   edx
c000a0f9:	50                   	push   eax
c000a0fa:	68 7d 29 02 c0       	push   0xc002297d
c000a0ff:	e8 db 29 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000a104:	83 c4 10             	add    esp,0x10
c000a107:	e9 ef fe ff ff       	jmp    c0009ffb <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a10c:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a110:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a114:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a118:	39 ea                	cmp    edx,ebp
c000a11a:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a11e:	0f 82 d7 fe ff ff    	jb     c0009ffb <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a124:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a129:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a12d:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a131:	0f 83 c4 fe ff ff    	jae    c0009ffb <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a137:	39 ee                	cmp    esi,ebp
c000a139:	89 f8                	mov    eax,edi
c000a13b:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a13f:	0f 83 78 ff ff ff    	jae    c000a0bd <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a145:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a149:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a14d:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a151:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a155:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a159:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a15d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a161:	e9 57 ff ff ff       	jmp    c000a0bd <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a166:	83 ec 0c             	sub    esp,0xc
c000a169:	68 6f 29 02 c0       	push   0xc002296f
c000a16e:	e8 2e a2 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c000a173:	83 c4 10             	add    esp,0x10
c000a176:	83 ec 08             	sub    esp,0x8
c000a179:	6a 00                	push   0x0
c000a17b:	6a 05                	push   0x5
c000a17d:	e8 a6 fb ff ff       	call   c0009d28 <Phys::setPageState(unsigned long, bool)>
c000a182:	58                   	pop    eax
c000a183:	5a                   	pop    edx
c000a184:	6a 00                	push   0x0
c000a186:	6a 06                	push   0x6
c000a188:	e8 9b fb ff ff       	call   c0009d28 <Phys::setPageState(unsigned long, bool)>
c000a18d:	59                   	pop    ecx
c000a18e:	5b                   	pop    ebx
c000a18f:	bb 60 00 00 00       	mov    ebx,0x60
c000a194:	6a 00                	push   0x0
c000a196:	6a 07                	push   0x7
c000a198:	e8 8b fb ff ff       	call   c0009d28 <Phys::setPageState(unsigned long, bool)>
c000a19d:	83 05 b8 64 02 c0 03 	add    DWORD PTR ds:0xc00264b8,0x3
c000a1a4:	83 c4 10             	add    esp,0x10
c000a1a7:	83 ec 08             	sub    esp,0x8
c000a1aa:	6a 00                	push   0x0
c000a1ac:	53                   	push   ebx
c000a1ad:	43                   	inc    ebx
c000a1ae:	e8 75 fb ff ff       	call   c0009d28 <Phys::setPageState(unsigned long, bool)>
c000a1b3:	83 c4 10             	add    esp,0x10
c000a1b6:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000a1bc:	75 e9                	jne    c000a1a7 <Phys::physicalMemorySetup(unsigned int)+0x22f>
c000a1be:	a1 b8 64 02 c0       	mov    eax,ds:0xc00264b8
c000a1c3:	bb 40 01 00 00       	mov    ebx,0x140
c000a1c8:	83 c0 20             	add    eax,0x20
c000a1cb:	a3 b8 64 02 c0       	mov    ds:0xc00264b8,eax
c000a1d0:	eb 22                	jmp    c000a1f4 <Phys::physicalMemorySetup(unsigned int)+0x27c>
c000a1d2:	83 ec 08             	sub    esp,0x8
c000a1d5:	6a 00                	push   0x0
c000a1d7:	53                   	push   ebx
c000a1d8:	43                   	inc    ebx
c000a1d9:	e8 4a fb ff ff       	call   c0009d28 <Phys::setPageState(unsigned long, bool)>
c000a1de:	a1 b8 64 02 c0       	mov    eax,ds:0xc00264b8
c000a1e3:	83 c4 10             	add    esp,0x10
c000a1e6:	40                   	inc    eax
c000a1e7:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000a1ed:	a3 b8 64 02 c0       	mov    ds:0xc00264b8,eax
c000a1f2:	74 07                	je     c000a1fb <Phys::physicalMemorySetup(unsigned int)+0x283>
c000a1f4:	3d ff 03 00 00       	cmp    eax,0x3ff
c000a1f9:	7e d7                	jle    c000a1d2 <Phys::physicalMemorySetup(unsigned int)+0x25a>
c000a1fb:	bb d0 01 00 00       	mov    ebx,0x1d0
c000a200:	3d ff 07 00 00       	cmp    eax,0x7ff
c000a205:	7f 22                	jg     c000a229 <Phys::physicalMemorySetup(unsigned int)+0x2b1>
c000a207:	83 ec 08             	sub    esp,0x8
c000a20a:	6a 00                	push   0x0
c000a20c:	53                   	push   ebx
c000a20d:	43                   	inc    ebx
c000a20e:	e8 15 fb ff ff       	call   c0009d28 <Phys::setPageState(unsigned long, bool)>
c000a213:	a1 b8 64 02 c0       	mov    eax,ds:0xc00264b8
c000a218:	83 c4 10             	add    esp,0x10
c000a21b:	40                   	inc    eax
c000a21c:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000a222:	a3 b8 64 02 c0       	mov    ds:0xc00264b8,eax
c000a227:	75 d7                	jne    c000a200 <Phys::physicalMemorySetup(unsigned int)+0x288>
c000a229:	83 c4 3c             	add    esp,0x3c
c000a22c:	5b                   	pop    ebx
c000a22d:	5e                   	pop    esi
c000a22e:	5f                   	pop    edi
c000a22f:	5d                   	pop    ebp
c000a230:	c3                   	ret    
c000a231:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a239:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a241:	e9 46 fe ff ff       	jmp    c000a08c <Phys::physicalMemorySetup(unsigned int)+0x114>

c000a246 <Pipe::isAtty()>:
c000a246:	31 c0                	xor    eax,eax
c000a248:	c3                   	ret    
c000a249:	90                   	nop

c000a24a <Pipe::~Pipe()>:
c000a24a:	83 ec 0c             	sub    esp,0xc
c000a24d:	ba a8 2a 02 c0       	mov    edx,0xc0022aa8
c000a252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a256:	89 10                	mov    DWORD PTR [eax],edx
c000a258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a25c:	83 ec 0c             	sub    esp,0xc
c000a25f:	50                   	push   eax
c000a260:	e8 47 12 00 00       	call   c000b4ac <UnixFile::~UnixFile()>
c000a265:	83 c4 10             	add    esp,0x10
c000a268:	90                   	nop
c000a269:	83 c4 0c             	add    esp,0xc
c000a26c:	c3                   	ret    
c000a26d:	90                   	nop

c000a26e <Pipe::~Pipe()>:
c000a26e:	83 ec 0c             	sub    esp,0xc
c000a271:	83 ec 0c             	sub    esp,0xc
c000a274:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a278:	e8 cd ff ff ff       	call   c000a24a <Pipe::~Pipe()>
c000a27d:	83 c4 10             	add    esp,0x10
c000a280:	83 ec 08             	sub    esp,0x8
c000a283:	6a 20                	push   0x20
c000a285:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a289:	e8 70 27 00 00       	call   c000c9fe <operator delete(void*, unsigned long)>
c000a28e:	83 c4 10             	add    esp,0x10
c000a291:	83 c4 0c             	add    esp,0xc
c000a294:	c3                   	ret    
c000a295:	90                   	nop

c000a296 <Pipe::read(unsigned long long, void*, int*)>:
c000a296:	55                   	push   ebp
c000a297:	57                   	push   edi
c000a298:	56                   	push   esi
c000a299:	53                   	push   ebx
c000a29a:	83 ec 1c             	sub    esp,0x1c
c000a29d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a2a1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a2a5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a2a9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a2ac:	89 c8                	mov    eax,ecx
c000a2ae:	99                   	cdq    
c000a2af:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a2b3:	74 24                	je     c000a2d9 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a2b5:	39 f9                	cmp    ecx,edi
c000a2b7:	89 d1                	mov    ecx,edx
c000a2b9:	19 f1                	sbb    ecx,esi
c000a2bb:	73 1c                	jae    c000a2d9 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a2bd:	fa                   	cli    
c000a2be:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c000a2c4:	e8 ab dc 00 00       	call   c0017f74 <schedule()>
c000a2c9:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000a2ce:	48                   	dec    eax
c000a2cf:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c000a2d4:	75 d3                	jne    c000a2a9 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a2d6:	fb                   	sti    
c000a2d7:	eb d0                	jmp    c000a2a9 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a2d9:	39 f8                	cmp    eax,edi
c000a2db:	89 d1                	mov    ecx,edx
c000a2dd:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a2e0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a2e4:	19 f1                	sbb    ecx,esi
c000a2e6:	73 07                	jae    c000a2ef <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a2e8:	89 04 24             	mov    DWORD PTR [esp],eax
c000a2eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a2ef:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a2f2:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a2f5:	29 f7                	sub    edi,esi
c000a2f7:	89 f8                	mov    eax,edi
c000a2f9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a2fd:	99                   	cdq    
c000a2fe:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a305:	19 d0                	sbb    eax,edx
c000a307:	73 07                	jae    c000a310 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a309:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a30c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a310:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a313:	89 ea                	mov    edx,ebp
c000a315:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a319:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a31e:	74 0d                	je     c000a32d <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a320:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a323:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a327:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a32b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a32d:	85 d2                	test   edx,edx
c000a32f:	74 11                	je     c000a342 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a331:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a335:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a338:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a33c:	89 d1                	mov    ecx,edx
c000a33e:	89 c7                	mov    edi,eax
c000a340:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a342:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a345:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a348:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a34b:	99                   	cdq    
c000a34c:	89 f7                	mov    edi,esi
c000a34e:	03 04 24             	add    eax,DWORD PTR [esp]
c000a351:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a355:	c1 ff 1f             	sar    edi,0x1f
c000a358:	57                   	push   edi
c000a359:	56                   	push   esi
c000a35a:	52                   	push   edx
c000a35b:	50                   	push   eax
c000a35c:	e8 43 6d 01 00       	call   c00210a4 <__umoddi3>
c000a361:	83 c4 10             	add    esp,0x10
c000a364:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a367:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a36c:	75 10                	jne    c000a37e <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a36e:	83 ec 0c             	sub    esp,0xc
c000a371:	68 65 2a 02 c0       	push   0xc0022a65
c000a376:	e8 26 a0 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c000a37b:	83 c4 10             	add    esp,0x10
c000a37e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a382:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a385:	89 10                	mov    DWORD PTR [eax],edx
c000a387:	83 c4 1c             	add    esp,0x1c
c000a38a:	31 c0                	xor    eax,eax
c000a38c:	5b                   	pop    ebx
c000a38d:	5e                   	pop    esi
c000a38e:	5f                   	pop    edi
c000a38f:	5d                   	pop    ebp
c000a390:	c3                   	ret    
c000a391:	90                   	nop

c000a392 <Pipe::write(unsigned long long, void*, int*)>:
c000a392:	55                   	push   ebp
c000a393:	57                   	push   edi
c000a394:	56                   	push   esi
c000a395:	53                   	push   ebx
c000a396:	83 ec 1c             	sub    esp,0x1c
c000a399:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a39d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a3a1:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a3a4:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a3a8:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3ab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a3af:	89 d8                	mov    eax,ebx
c000a3b1:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a3b4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a3b8:	89 d6                	mov    esi,edx
c000a3ba:	89 d7                	mov    edi,edx
c000a3bc:	c1 ff 1f             	sar    edi,0x1f
c000a3bf:	03 34 24             	add    esi,DWORD PTR [esp]
c000a3c2:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a3c6:	c1 f8 1f             	sar    eax,0x1f
c000a3c9:	39 f3                	cmp    ebx,esi
c000a3cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a3cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a3d3:	19 f8                	sbb    eax,edi
c000a3d5:	b8 01 00 00 00       	mov    eax,0x1
c000a3da:	72 6e                	jb     c000a44a <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a3dc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a3df:	01 d0                	add    eax,edx
c000a3e1:	99                   	cdq    
c000a3e2:	f7 fb                	idiv   ebx
c000a3e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a3e8:	29 d3                	sub    ebx,edx
c000a3ea:	89 d7                	mov    edi,edx
c000a3ec:	89 de                	mov    esi,ebx
c000a3ee:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a3f1:	c1 fb 1f             	sar    ebx,0x1f
c000a3f4:	39 f2                	cmp    edx,esi
c000a3f6:	19 d8                	sbb    eax,ebx
c000a3f8:	b8 00 00 00 00       	mov    eax,0x0
c000a3fd:	72 04                	jb     c000a403 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000a3ff:	89 d0                	mov    eax,edx
c000a401:	29 f0                	sub    eax,esi
c000a403:	89 d3                	mov    ebx,edx
c000a405:	29 c3                	sub    ebx,eax
c000a407:	74 0b                	je     c000a414 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000a409:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000a40c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a410:	89 d9                	mov    ecx,ebx
c000a412:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a414:	85 c0                	test   eax,eax
c000a416:	74 0d                	je     c000a425 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000a418:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000a41c:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000a41f:	89 de                	mov    esi,ebx
c000a421:	89 c1                	mov    ecx,eax
c000a423:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a425:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000a428:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a42d:	75 10                	jne    c000a43f <Pipe::write(unsigned long long, void*, int*)+0xad>
c000a42f:	83 ec 0c             	sub    esp,0xc
c000a432:	68 81 2a 02 c0       	push   0xc0022a81
c000a437:	e8 65 9f 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c000a43c:	83 c4 10             	add    esp,0x10
c000a43f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a443:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a446:	89 08                	mov    DWORD PTR [eax],ecx
c000a448:	31 c0                	xor    eax,eax
c000a44a:	83 c4 1c             	add    esp,0x1c
c000a44d:	5b                   	pop    ebx
c000a44e:	5e                   	pop    esi
c000a44f:	5f                   	pop    edi
c000a450:	5d                   	pop    ebp
c000a451:	c3                   	ret    

c000a452 <Pipe::Pipe(int)>:
c000a452:	83 ec 0c             	sub    esp,0xc
c000a455:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a459:	83 ec 08             	sub    esp,0x8
c000a45c:	6a 00                	push   0x0
c000a45e:	50                   	push   eax
c000a45f:	e8 66 0e 00 00       	call   c000b2ca <UnixFile::UnixFile(int)>
c000a464:	83 c4 10             	add    esp,0x10
c000a467:	ba a8 2a 02 c0       	mov    edx,0xc0022aa8
c000a46c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a470:	89 10                	mov    DWORD PTR [eax],edx
c000a472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a476:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a47a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a47d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a481:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000a488:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a48c:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000a493:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a497:	83 ec 0c             	sub    esp,0xc
c000a49a:	50                   	push   eax
c000a49b:	e8 23 f5 ff ff       	call   c00099c3 <malloc>
c000a4a0:	83 c4 10             	add    esp,0x10
c000a4a3:	89 c2                	mov    edx,eax
c000a4a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4a9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a4ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4b0:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000a4b4:	90                   	nop
c000a4b5:	83 c4 0c             	add    esp,0xc
c000a4b8:	c3                   	ret    
c000a4b9:	90                   	nop

c000a4ba <VgaText::isAtty()>:
c000a4ba:	b0 01                	mov    al,0x1
c000a4bc:	c3                   	ret    
c000a4bd:	90                   	nop

c000a4be <VgaText::~VgaText()>:
c000a4be:	83 ec 0c             	sub    esp,0xc
c000a4c1:	ba 30 2b 02 c0       	mov    edx,0xc0022b30
c000a4c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4ca:	89 10                	mov    DWORD PTR [eax],edx
c000a4cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4d0:	83 ec 0c             	sub    esp,0xc
c000a4d3:	50                   	push   eax
c000a4d4:	e8 d3 0f 00 00       	call   c000b4ac <UnixFile::~UnixFile()>
c000a4d9:	83 c4 10             	add    esp,0x10
c000a4dc:	90                   	nop
c000a4dd:	83 c4 0c             	add    esp,0xc
c000a4e0:	c3                   	ret    
c000a4e1:	90                   	nop

c000a4e2 <VgaText::~VgaText()>:
c000a4e2:	83 ec 0c             	sub    esp,0xc
c000a4e5:	83 ec 0c             	sub    esp,0xc
c000a4e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4ec:	e8 cd ff ff ff       	call   c000a4be <VgaText::~VgaText()>
c000a4f1:	83 c4 10             	add    esp,0x10
c000a4f4:	83 ec 08             	sub    esp,0x8
c000a4f7:	68 c4 02 00 00       	push   0x2c4
c000a4fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a500:	e8 f9 24 00 00       	call   c000c9fe <operator delete(void*, unsigned long)>
c000a505:	83 c4 10             	add    esp,0x10
c000a508:	83 c4 0c             	add    esp,0xc
c000a50b:	c3                   	ret    

c000a50c <VgaText::read(unsigned long long, void*, int*)>:
c000a50c:	83 ec 10             	sub    esp,0x10
c000a50f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a513:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a517:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a51b:	e8 4e 58 00 00       	call   c000fd6e <readKeyboard(VgaText*, char*, unsigned long)>
c000a520:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a524:	89 02                	mov    DWORD PTR [edx],eax
c000a526:	31 c0                	xor    eax,eax
c000a528:	83 c4 1c             	add    esp,0x1c
c000a52b:	c3                   	ret    

c000a52c <setTerminalScrollLock(bool)>:
c000a52c:	c3                   	ret    

c000a52d <addToTerminalCycle(VgaText*)>:
c000a52d:	8b 15 00 65 02 c0    	mov    edx,DWORD PTR ds:0xc0026500
c000a533:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a537:	85 d2                	test   edx,edx
c000a539:	75 09                	jne    c000a544 <addToTerminalCycle(VgaText*)+0x17>
c000a53b:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000a53e:	a3 00 65 02 c0       	mov    ds:0xc0026500,eax
c000a543:	c3                   	ret    
c000a544:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000a547:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000a54a:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000a54d:	c3                   	ret    

c000a54e <installVgaTextImplementation()>:
c000a54e:	83 ec 10             	sub    esp,0x10
c000a551:	6a 20                	push   0x20
c000a553:	6a 00                	push   0x0
c000a555:	68 e0 64 02 c0       	push   0xc00264e0
c000a55a:	e8 25 61 ff ff       	call   c0000684 <memset>
c000a55f:	83 c4 1c             	add    esp,0x1c
c000a562:	c3                   	ret    

c000a563 <scrollTerminalScrollLock(int)>:
c000a563:	c3                   	ret    

c000a564 <VgaText::updateTitle()>:
c000a564:	53                   	push   ebx
c000a565:	31 c0                	xor    eax,eax
c000a567:	83 ec 58             	sub    esp,0x58
c000a56a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000a56e:	89 e1                	mov    ecx,esp
c000a570:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000a574:	40                   	inc    eax
c000a575:	83 f8 50             	cmp    eax,0x50
c000a578:	75 f6                	jne    c000a570 <VgaText::updateTitle()+0xc>
c000a57a:	31 c0                	xor    eax,eax
c000a57c:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000a583:	84 db                	test   bl,bl
c000a585:	74 06                	je     c000a58d <VgaText::updateTitle()+0x29>
c000a587:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000a58a:	40                   	inc    eax
c000a58b:	eb ef                	jmp    c000a57c <VgaText::updateTitle()+0x18>
c000a58d:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000a590:	85 c0                	test   eax,eax
c000a592:	74 09                	je     c000a59d <VgaText::updateTitle()+0x39>
c000a594:	53                   	push   ebx
c000a595:	53                   	push   ebx
c000a596:	51                   	push   ecx
c000a597:	52                   	push   edx
c000a598:	ff d0                	call   eax
c000a59a:	83 c4 10             	add    esp,0x10
c000a59d:	83 c4 58             	add    esp,0x58
c000a5a0:	5b                   	pop    ebx
c000a5a1:	c3                   	ret    

c000a5a2 <VgaText::load()>:
c000a5a2:	53                   	push   ebx
c000a5a3:	31 c0                	xor    eax,eax
c000a5a5:	83 ec 58             	sub    esp,0x58
c000a5a8:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000a5ac:	89 e2                	mov    edx,esp
c000a5ae:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000a5b2:	40                   	inc    eax
c000a5b3:	83 f8 50             	cmp    eax,0x50
c000a5b6:	75 f6                	jne    c000a5ae <VgaText::load()+0xc>
c000a5b8:	31 c0                	xor    eax,eax
c000a5ba:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000a5c1:	84 c9                	test   cl,cl
c000a5c3:	74 06                	je     c000a5cb <VgaText::load()+0x29>
c000a5c5:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a5c8:	40                   	inc    eax
c000a5c9:	eb ef                	jmp    c000a5ba <VgaText::load()+0x18>
c000a5cb:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000a5ce:	85 c0                	test   eax,eax
c000a5d0:	74 09                	je     c000a5db <VgaText::load()+0x39>
c000a5d2:	51                   	push   ecx
c000a5d3:	51                   	push   ecx
c000a5d4:	52                   	push   edx
c000a5d5:	53                   	push   ebx
c000a5d6:	ff d0                	call   eax
c000a5d8:	83 c4 10             	add    esp,0x10
c000a5db:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000a5de:	85 c0                	test   eax,eax
c000a5e0:	74 09                	je     c000a5eb <VgaText::load()+0x49>
c000a5e2:	83 ec 0c             	sub    esp,0xc
c000a5e5:	53                   	push   ebx
c000a5e6:	ff d0                	call   eax
c000a5e8:	83 c4 10             	add    esp,0x10
c000a5eb:	83 c4 58             	add    esp,0x58
c000a5ee:	5b                   	pop    ebx
c000a5ef:	c3                   	ret    

c000a5f0 <VgaText::updateCursor()>:
c000a5f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a5f4:	39 05 04 65 02 c0    	cmp    DWORD PTR ds:0xc0026504,eax
c000a5fa:	75 09                	jne    c000a605 <VgaText::updateCursor()+0x15>
c000a5fc:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000a5ff:	85 c0                	test   eax,eax
c000a601:	74 02                	je     c000a605 <VgaText::updateCursor()+0x15>
c000a603:	ff e0                	jmp    eax
c000a605:	c3                   	ret    

c000a606 <VgaText::doANSI_SGR(int)>:
c000a606:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a60a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a60e:	85 d2                	test   edx,edx
c000a610:	75 0b                	jne    c000a61d <VgaText::doANSI_SGR(int)+0x17>
c000a612:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000a615:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a618:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a61b:	eb 59                	jmp    c000a676 <VgaText::doANSI_SGR(int)+0x70>
c000a61d:	83 fa 07             	cmp    edx,0x7
c000a620:	75 0b                	jne    c000a62d <VgaText::doANSI_SGR(int)+0x27>
c000a622:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000a625:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000a628:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000a62b:	eb 49                	jmp    c000a676 <VgaText::doANSI_SGR(int)+0x70>
c000a62d:	83 fa 1b             	cmp    edx,0x1b
c000a630:	74 e0                	je     c000a612 <VgaText::doANSI_SGR(int)+0xc>
c000a632:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000a635:	83 f9 07             	cmp    ecx,0x7
c000a638:	77 09                	ja     c000a643 <VgaText::doANSI_SGR(int)+0x3d>
c000a63a:	8b 14 8d 80 58 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda780]
c000a641:	eb 20                	jmp    c000a663 <VgaText::doANSI_SGR(int)+0x5d>
c000a643:	8d 4a d8             	lea    ecx,[edx-0x28]
c000a646:	83 f9 07             	cmp    ecx,0x7
c000a649:	77 09                	ja     c000a654 <VgaText::doANSI_SGR(int)+0x4e>
c000a64b:	8b 14 8d 80 58 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda780]
c000a652:	eb 22                	jmp    c000a676 <VgaText::doANSI_SGR(int)+0x70>
c000a654:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000a657:	83 f9 07             	cmp    ecx,0x7
c000a65a:	77 0b                	ja     c000a667 <VgaText::doANSI_SGR(int)+0x61>
c000a65c:	8b 14 95 38 57 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda8c8]
c000a663:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a666:	c3                   	ret    
c000a667:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000a66a:	83 f9 07             	cmp    ecx,0x7
c000a66d:	77 0a                	ja     c000a679 <VgaText::doANSI_SGR(int)+0x73>
c000a66f:	8b 14 95 10 57 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda8f0]
c000a676:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a679:	c3                   	ret    

c000a67a <VgaText::setDefaultBgColour(VgaColour)>:
c000a67a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a67e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a682:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000a685:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a688:	c3                   	ret    
c000a689:	90                   	nop

c000a68a <VgaText::setDefaultFgColour(VgaColour)>:
c000a68a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a68e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a692:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000a695:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a698:	c3                   	ret    
c000a699:	90                   	nop

c000a69a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000a69a:	53                   	push   ebx
c000a69b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a69f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a6a3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a6a7:	51                   	push   ecx
c000a6a8:	e8 cd ff ff ff       	call   c000a67a <VgaText::setDefaultBgColour(VgaColour)>
c000a6ad:	58                   	pop    eax
c000a6ae:	5a                   	pop    edx
c000a6af:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000a6b3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a6b7:	5b                   	pop    ebx
c000a6b8:	eb d0                	jmp    c000a68a <VgaText::setDefaultFgColour(VgaColour)>

c000a6ba <VgaText::setTitleTextColour(VgaColour)>:
c000a6ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a6be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a6c2:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000a6c5:	e9 9a fe ff ff       	jmp    c000a564 <VgaText::updateTitle()>

c000a6ca <VgaText::setTitleColour(VgaColour)>:
c000a6ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a6ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a6d2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a6d5:	e9 8a fe ff ff       	jmp    c000a564 <VgaText::updateTitle()>

c000a6da <VgaText::setTitle(char*)>:
c000a6da:	53                   	push   ebx
c000a6db:	83 ec 10             	sub    esp,0x10
c000a6de:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a6e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6e6:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000a6ec:	50                   	push   eax
c000a6ed:	e8 4e 60 ff ff       	call   c0000740 <strcpy>
c000a6f2:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a6f6:	83 c4 18             	add    esp,0x18
c000a6f9:	5b                   	pop    ebx
c000a6fa:	e9 65 fe ff ff       	jmp    c000a564 <VgaText::updateTitle()>
c000a6ff:	90                   	nop

c000a700 <VgaText::combineColours(unsigned char, unsigned char)>:
c000a700:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000a704:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000a709:	83 e0 0f             	and    eax,0xf
c000a70c:	c1 e2 04             	shl    edx,0x4
c000a70f:	09 d0                	or     eax,edx
c000a711:	c3                   	ret    

c000a712 <VgaText::scrollScreen()>:
c000a712:	55                   	push   ebp
c000a713:	b9 01 00 00 00       	mov    ecx,0x1
c000a718:	57                   	push   edi
c000a719:	56                   	push   esi
c000a71a:	53                   	push   ebx
c000a71b:	83 ec 0c             	sub    esp,0xc
c000a71e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a722:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000a728:	31 ff                	xor    edi,edi
c000a72a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a72d:	83 f9 17             	cmp    ecx,0x17
c000a730:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000a733:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000a73a:	75 27                	jne    c000a763 <VgaText::scrollScreen()+0x51>
c000a73c:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000a73f:	01 f5                	add    ebp,esi
c000a741:	f7 c7 01 00 00 00    	test   edi,0x1
c000a747:	74 16                	je     c000a75f <VgaText::scrollScreen()+0x4d>
c000a749:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000a74d:	50                   	push   eax
c000a74e:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000a752:	50                   	push   eax
c000a753:	e8 a8 ff ff ff       	call   c000a700 <VgaText::combineColours(unsigned char, unsigned char)>
c000a758:	5a                   	pop    edx
c000a759:	5a                   	pop    edx
c000a75a:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000a75d:	eb 04                	jmp    c000a763 <VgaText::scrollScreen()+0x51>
c000a75f:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000a763:	47                   	inc    edi
c000a764:	46                   	inc    esi
c000a765:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000a76b:	75 bd                	jne    c000a72a <VgaText::scrollScreen()+0x18>
c000a76d:	41                   	inc    ecx
c000a76e:	83 f9 18             	cmp    ecx,0x18
c000a771:	75 af                	jne    c000a722 <VgaText::scrollScreen()+0x10>
c000a773:	39 1d 04 65 02 c0    	cmp    DWORD PTR ds:0xc0026504,ebx
c000a779:	75 1b                	jne    c000a796 <VgaText::scrollScreen()+0x84>
c000a77b:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000a77f:	74 05                	je     c000a786 <VgaText::scrollScreen()+0x74>
c000a781:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000a784:	eb 10                	jmp    c000a796 <VgaText::scrollScreen()+0x84>
c000a786:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000a789:	85 c0                	test   eax,eax
c000a78b:	74 09                	je     c000a796 <VgaText::scrollScreen()+0x84>
c000a78d:	83 ec 0c             	sub    esp,0xc
c000a790:	53                   	push   ebx
c000a791:	ff d0                	call   eax
c000a793:	83 c4 10             	add    esp,0x10
c000a796:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a79a:	83 c4 0c             	add    esp,0xc
c000a79d:	5b                   	pop    ebx
c000a79e:	5e                   	pop    esi
c000a79f:	5f                   	pop    edi
c000a7a0:	5d                   	pop    ebp
c000a7a1:	e9 4a fe ff ff       	jmp    c000a5f0 <VgaText::updateCursor()>

c000a7a6 <VgaText::combineCharAndColour(char, unsigned char)>:
c000a7a6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000a7ab:	c1 e0 08             	shl    eax,0x8
c000a7ae:	89 c2                	mov    edx,eax
c000a7b0:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000a7b5:	09 d0                	or     eax,edx
c000a7b7:	c3                   	ret    

c000a7b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000a7b8:	56                   	push   esi
c000a7b9:	53                   	push   ebx
c000a7ba:	51                   	push   ecx
c000a7bb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a7bf:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000a7c4:	50                   	push   eax
c000a7c5:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000a7ca:	50                   	push   eax
c000a7cb:	e8 30 ff ff ff       	call   c000a700 <VgaText::combineColours(unsigned char, unsigned char)>
c000a7d0:	5b                   	pop    ebx
c000a7d1:	0f b6 c0             	movzx  eax,al
c000a7d4:	5e                   	pop    esi
c000a7d5:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000a7da:	50                   	push   eax
c000a7db:	53                   	push   ebx
c000a7dc:	e8 c5 ff ff ff       	call   c000a7a6 <VgaText::combineCharAndColour(char, unsigned char)>
c000a7e1:	5a                   	pop    edx
c000a7e2:	5e                   	pop    esi
c000a7e3:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000a7e6:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000a7ec:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000a7f0:	0f b7 d2             	movzx  edx,dx
c000a7f3:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000a7f7:	39 0d 04 65 02 c0    	cmp    DWORD PTR ds:0xc0026504,ecx
c000a7fd:	75 10                	jne    c000a80f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000a7ff:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000a802:	85 c0                	test   eax,eax
c000a804:	74 09                	je     c000a80f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000a806:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000a80a:	5a                   	pop    edx
c000a80b:	5b                   	pop    ebx
c000a80c:	5e                   	pop    esi
c000a80d:	ff e0                	jmp    eax
c000a80f:	58                   	pop    eax
c000a810:	5b                   	pop    ebx
c000a811:	5e                   	pop    esi
c000a812:	c3                   	ret    
c000a813:	90                   	nop

c000a814 <VgaText::getCursorX()>:
c000a814:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a818:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000a81b:	c3                   	ret    

c000a81c <VgaText::getCursorY()>:
c000a81c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a820:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000a823:	c3                   	ret    

c000a824 <VgaText::setCursor(int, int)>:
c000a824:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a828:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a82c:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000a82f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a833:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a836:	e9 b5 fd ff ff       	jmp    c000a5f0 <VgaText::updateCursor()>

c000a83b <setActiveTerminal(VgaText*)>:
c000a83b:	53                   	push   ebx
c000a83c:	83 ec 08             	sub    esp,0x8
c000a83f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a843:	85 db                	test   ebx,ebx
c000a845:	75 11                	jne    c000a858 <setActiveTerminal(VgaText*)+0x1d>
c000a847:	c7 44 24 10 bc 2a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022abc
c000a84f:	83 c4 08             	add    esp,0x8
c000a852:	5b                   	pop    ebx
c000a853:	e9 49 9b 00 00       	jmp    c00143a1 <Krnl::panic(char const*)>
c000a858:	a1 04 65 02 c0       	mov    eax,ds:0xc0026504
c000a85d:	85 c0                	test   eax,eax
c000a85f:	74 0c                	je     c000a86d <setActiveTerminal(VgaText*)+0x32>
c000a861:	83 ec 0c             	sub    esp,0xc
c000a864:	50                   	push   eax
c000a865:	e8 86 fd ff ff       	call   c000a5f0 <VgaText::updateCursor()>
c000a86a:	83 c4 10             	add    esp,0x10
c000a86d:	89 1d 04 65 02 c0    	mov    DWORD PTR ds:0xc0026504,ebx
c000a873:	51                   	push   ecx
c000a874:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a877:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a87a:	53                   	push   ebx
c000a87b:	e8 a4 ff ff ff       	call   c000a824 <VgaText::setCursor(int, int)>
c000a880:	83 c4 10             	add    esp,0x10
c000a883:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000a887:	75 07                	jne    c000a890 <setActiveTerminal(VgaText*)+0x55>
c000a889:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000a890:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a894:	83 c4 08             	add    esp,0x8
c000a897:	5b                   	pop    ebx
c000a898:	e9 05 fd ff ff       	jmp    c000a5a2 <VgaText::load()>

c000a89d <doTerminalCycle()>:
c000a89d:	83 ec 18             	sub    esp,0x18
c000a8a0:	a1 00 65 02 c0       	mov    eax,ds:0xc0026500
c000a8a5:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000a8a8:	50                   	push   eax
c000a8a9:	a3 00 65 02 c0       	mov    ds:0xc0026500,eax
c000a8ae:	e8 88 ff ff ff       	call   c000a83b <setActiveTerminal(VgaText*)>
c000a8b3:	83 c4 1c             	add    esp,0x1c
c000a8b6:	c3                   	ret    
c000a8b7:	90                   	nop

c000a8b8 <VgaText::setCursorX(int)>:
c000a8b8:	83 ec 10             	sub    esp,0x10
c000a8bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a8bf:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000a8c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8c6:	50                   	push   eax
c000a8c7:	e8 58 ff ff ff       	call   c000a824 <VgaText::setCursor(int, int)>
c000a8cc:	83 c4 1c             	add    esp,0x1c
c000a8cf:	c3                   	ret    

c000a8d0 <VgaText::setCursorY(int)>:
c000a8d0:	83 ec 10             	sub    esp,0x10
c000a8d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a8d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a8db:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000a8de:	50                   	push   eax
c000a8df:	e8 40 ff ff ff       	call   c000a824 <VgaText::setCursor(int, int)>
c000a8e4:	83 c4 1c             	add    esp,0x1c
c000a8e7:	c3                   	ret    

c000a8e8 <VgaText::incrementCursor(bool)>:
c000a8e8:	56                   	push   esi
c000a8e9:	53                   	push   ebx
c000a8ea:	51                   	push   ecx
c000a8eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a8ef:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a8f3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a8f6:	40                   	inc    eax
c000a8f7:	83 f8 50             	cmp    eax,0x50
c000a8fa:	74 05                	je     c000a901 <VgaText::incrementCursor(bool)+0x19>
c000a8fc:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000a8ff:	eb 24                	jmp    c000a925 <VgaText::incrementCursor(bool)+0x3d>
c000a901:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a904:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a90b:	8d 50 01             	lea    edx,[eax+0x1]
c000a90e:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000a911:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000a914:	75 0f                	jne    c000a925 <VgaText::incrementCursor(bool)+0x3d>
c000a916:	83 ec 0c             	sub    esp,0xc
c000a919:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a91c:	53                   	push   ebx
c000a91d:	e8 f0 fd ff ff       	call   c000a712 <VgaText::scrollScreen()>
c000a922:	83 c4 10             	add    esp,0x10
c000a925:	89 f0                	mov    eax,esi
c000a927:	84 c0                	test   al,al
c000a929:	74 0c                	je     c000a937 <VgaText::incrementCursor(bool)+0x4f>
c000a92b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a92f:	5a                   	pop    edx
c000a930:	5b                   	pop    ebx
c000a931:	5e                   	pop    esi
c000a932:	e9 b9 fc ff ff       	jmp    c000a5f0 <VgaText::updateCursor()>
c000a937:	58                   	pop    eax
c000a938:	5b                   	pop    ebx
c000a939:	5e                   	pop    esi
c000a93a:	c3                   	ret    
c000a93b:	90                   	nop

c000a93c <VgaText::decrementCursor(bool)>:
c000a93c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a940:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a944:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000a947:	85 c0                	test   eax,eax
c000a949:	74 04                	je     c000a94f <VgaText::decrementCursor(bool)+0x13>
c000a94b:	48                   	dec    eax
c000a94c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000a94f:	84 c9                	test   cl,cl
c000a951:	74 09                	je     c000a95c <VgaText::decrementCursor(bool)+0x20>
c000a953:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a957:	e9 94 fc ff ff       	jmp    c000a5f0 <VgaText::updateCursor()>
c000a95c:	c3                   	ret    
c000a95d:	90                   	nop

c000a95e <VgaText::putchar(char, VgaColour, VgaColour)>:
c000a95e:	53                   	push   ebx
c000a95f:	83 ec 08             	sub    esp,0x8
c000a962:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a966:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a96a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a96e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a972:	3c 07                	cmp    al,0x7
c000a974:	75 2a                	jne    c000a9a0 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000a976:	a1 b8 65 02 c0       	mov    eax,ds:0xc00265b8
c000a97b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a983:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000a98b:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000a993:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a997:	83 c4 08             	add    esp,0x8
c000a99a:	5b                   	pop    ebx
c000a99b:	e9 5a 2f 00 00       	jmp    c000d8fa <Buzzer::beep(int, int, bool)>
c000a9a0:	3c 0d                	cmp    al,0xd
c000a9a2:	75 09                	jne    c000a9ad <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c000a9a4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a9ab:	eb 2c                	jmp    c000a9d9 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000a9ad:	3c 0a                	cmp    al,0xa
c000a9af:	75 31                	jne    c000a9e2 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c000a9b1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a9b4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a9bb:	8d 50 01             	lea    edx,[eax+0x1]
c000a9be:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000a9c1:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000a9c4:	75 0f                	jne    c000a9d5 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c000a9c6:	83 ec 0c             	sub    esp,0xc
c000a9c9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a9cc:	53                   	push   ebx
c000a9cd:	e8 40 fd ff ff       	call   c000a712 <VgaText::scrollScreen()>
c000a9d2:	83 c4 10             	add    esp,0x10
c000a9d5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a9d9:	83 c4 08             	add    esp,0x8
c000a9dc:	5b                   	pop    ebx
c000a9dd:	e9 0e fc ff ff       	jmp    c000a5f0 <VgaText::updateCursor()>
c000a9e2:	3c 08                	cmp    al,0x8
c000a9e4:	75 25                	jne    c000aa0b <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c000a9e6:	50                   	push   eax
c000a9e7:	50                   	push   eax
c000a9e8:	6a 01                	push   0x1
c000a9ea:	53                   	push   ebx
c000a9eb:	e8 4c ff ff ff       	call   c000a93c <VgaText::decrementCursor(bool)>
c000a9f0:	5a                   	pop    edx
c000a9f1:	59                   	pop    ecx
c000a9f2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a9f5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a9f8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000a9fb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000a9fe:	6a 20                	push   0x20
c000aa00:	53                   	push   ebx
c000aa01:	e8 b2 fd ff ff       	call   c000a7b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000aa06:	83 c4 28             	add    esp,0x28
c000aa09:	5b                   	pop    ebx
c000aa0a:	c3                   	ret    
c000aa0b:	83 ec 08             	sub    esp,0x8
c000aa0e:	0f be c0             	movsx  eax,al
c000aa11:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000aa14:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000aa17:	51                   	push   ecx
c000aa18:	52                   	push   edx
c000aa19:	50                   	push   eax
c000aa1a:	53                   	push   ebx
c000aa1b:	e8 98 fd ff ff       	call   c000a7b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000aa20:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000aa24:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000aa2c:	83 c4 28             	add    esp,0x28
c000aa2f:	5b                   	pop    ebx
c000aa30:	e9 b3 fe ff ff       	jmp    c000a8e8 <VgaText::incrementCursor(bool)>
c000aa35:	90                   	nop

c000aa36 <VgaText::doUpdate()>:
c000aa36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa3a:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000aa3d:	85 c0                	test   eax,eax
c000aa3f:	74 02                	je     c000aa43 <VgaText::doUpdate()+0xd>
c000aa41:	ff e0                	jmp    eax
c000aa43:	c3                   	ret    

c000aa44 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000aa44:	55                   	push   ebp
c000aa45:	31 ed                	xor    ebp,ebp
c000aa47:	57                   	push   edi
c000aa48:	56                   	push   esi
c000aa49:	53                   	push   ebx
c000aa4a:	83 ec 1c             	sub    esp,0x1c
c000aa4d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000aa51:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000aa56:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000aa5d:	50                   	push   eax
c000aa5e:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000aa63:	50                   	push   eax
c000aa64:	e8 97 fc ff ff       	call   c000a700 <VgaText::combineColours(unsigned char, unsigned char)>
c000aa69:	59                   	pop    ecx
c000aa6a:	0f b6 c0             	movzx  eax,al
c000aa6d:	5e                   	pop    esi
c000aa6e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aa73:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000aa77:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000aa7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa7e:	0f b7 f6             	movzx  esi,si
c000aa81:	01 f6                	add    esi,esi
c000aa83:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aa86:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000aa89:	84 c0                	test   al,al
c000aa8b:	0f 84 fd 00 00 00    	je     c000ab8e <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000aa91:	3c 0d                	cmp    al,0xd
c000aa93:	75 0c                	jne    c000aaa1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000aa95:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000aa9c:	e9 e7 00 00 00       	jmp    c000ab88 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000aaa1:	3c 0a                	cmp    al,0xa
c000aaa3:	75 47                	jne    c000aaec <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000aaa5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000aaa8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000aaaf:	8d 48 01             	lea    ecx,[eax+0x1]
c000aab2:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000aab5:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000aab8:	75 0f                	jne    c000aac9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000aaba:	83 ec 0c             	sub    esp,0xc
c000aabd:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000aac0:	53                   	push   ebx
c000aac1:	e8 4c fc ff ff       	call   c000a712 <VgaText::scrollScreen()>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	83 ec 0c             	sub    esp,0xc
c000aacc:	31 ed                	xor    ebp,ebp
c000aace:	53                   	push   ebx
c000aacf:	e8 1c fb ff ff       	call   c000a5f0 <VgaText::updateCursor()>
c000aad4:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aad9:	83 c4 10             	add    esp,0x10
c000aadc:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000aadf:	0f b7 f6             	movzx  esi,si
c000aae2:	01 f6                	add    esi,esi
c000aae4:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aae7:	e9 9c 00 00 00       	jmp    c000ab88 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000aaec:	3c 08                	cmp    al,0x8
c000aaee:	75 35                	jne    c000ab25 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000aaf0:	56                   	push   esi
c000aaf1:	56                   	push   esi
c000aaf2:	6a 01                	push   0x1
c000aaf4:	53                   	push   ebx
c000aaf5:	e8 42 fe ff ff       	call   c000a93c <VgaText::decrementCursor(bool)>
c000aafa:	58                   	pop    eax
c000aafb:	5a                   	pop    edx
c000aafc:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000aaff:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ab02:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000ab05:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ab08:	6a 20                	push   0x20
c000ab0a:	53                   	push   ebx
c000ab0b:	e8 a8 fc ff ff       	call   c000a7b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ab10:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ab15:	83 c4 20             	add    esp,0x20
c000ab18:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000ab1b:	0f b7 f6             	movzx  esi,si
c000ab1e:	01 f6                	add    esi,esi
c000ab20:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ab23:	eb 63                	jmp    c000ab88 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000ab25:	51                   	push   ecx
c000ab26:	51                   	push   ecx
c000ab27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab2b:	50                   	push   eax
c000ab2c:	e8 75 fc ff ff       	call   c000a7a6 <VgaText::combineCharAndColour(char, unsigned char)>
c000ab31:	83 c4 10             	add    esp,0x10
c000ab34:	66 89 06             	mov    WORD PTR [esi],ax
c000ab37:	39 1d 04 65 02 c0    	cmp    DWORD PTR ds:0xc0026504,ebx
c000ab3d:	75 21                	jne    c000ab60 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000ab3f:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000ab42:	85 c0                	test   eax,eax
c000ab44:	74 1a                	je     c000ab60 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000ab46:	52                   	push   edx
c000ab47:	52                   	push   edx
c000ab48:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ab4b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ab4e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab52:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab56:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000ab59:	51                   	push   ecx
c000ab5a:	53                   	push   ebx
c000ab5b:	ff d0                	call   eax
c000ab5d:	83 c4 20             	add    esp,0x20
c000ab60:	83 c6 02             	add    esi,0x2
c000ab63:	50                   	push   eax
c000ab64:	50                   	push   eax
c000ab65:	6a 00                	push   0x0
c000ab67:	53                   	push   ebx
c000ab68:	e8 7b fd ff ff       	call   c000a8e8 <VgaText::incrementCursor(bool)>
c000ab6d:	83 c4 10             	add    esp,0x10
c000ab70:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000ab74:	75 0d                	jne    c000ab83 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000ab76:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ab7b:	0f b7 f6             	movzx  esi,si
c000ab7e:	01 f6                	add    esi,esi
c000ab80:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ab83:	bd 01 00 00 00       	mov    ebp,0x1
c000ab88:	47                   	inc    edi
c000ab89:	e9 f8 fe ff ff       	jmp    c000aa86 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000ab8e:	83 ec 0c             	sub    esp,0xc
c000ab91:	53                   	push   ebx
c000ab92:	e8 59 fa ff ff       	call   c000a5f0 <VgaText::updateCursor()>
c000ab97:	83 c4 10             	add    esp,0x10
c000ab9a:	89 e8                	mov    eax,ebp
c000ab9c:	84 c0                	test   al,al
c000ab9e:	74 0c                	je     c000abac <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000aba0:	83 ec 0c             	sub    esp,0xc
c000aba3:	53                   	push   ebx
c000aba4:	e8 8d fe ff ff       	call   c000aa36 <VgaText::doUpdate()>
c000aba9:	83 c4 10             	add    esp,0x10
c000abac:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000abb3:	83 c4 1c             	add    esp,0x1c
c000abb6:	5b                   	pop    ebx
c000abb7:	5e                   	pop    esi
c000abb8:	5f                   	pop    edi
c000abb9:	5d                   	pop    ebp
c000abba:	c3                   	ret    
c000abbb:	90                   	nop

c000abbc <VgaText::clearScreen()>:
c000abbc:	57                   	push   edi
c000abbd:	56                   	push   esi
c000abbe:	31 f6                	xor    esi,esi
c000abc0:	53                   	push   ebx
c000abc1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000abc5:	52                   	push   edx
c000abc6:	6a 00                	push   0x0
c000abc8:	6a 00                	push   0x0
c000abca:	53                   	push   ebx
c000abcb:	e8 54 fc ff ff       	call   c000a824 <VgaText::setCursor(int, int)>
c000abd0:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000abd7:	83 c4 10             	add    esp,0x10
c000abda:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000abdd:	7e 20                	jle    c000abff <VgaText::clearScreen()+0x43>
c000abdf:	31 ff                	xor    edi,edi
c000abe1:	50                   	push   eax
c000abe2:	50                   	push   eax
c000abe3:	56                   	push   esi
c000abe4:	57                   	push   edi
c000abe5:	47                   	inc    edi
c000abe6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000abe9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000abec:	6a 20                	push   0x20
c000abee:	53                   	push   ebx
c000abef:	e8 c4 fb ff ff       	call   c000a7b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000abf4:	83 c4 20             	add    esp,0x20
c000abf7:	83 ff 50             	cmp    edi,0x50
c000abfa:	75 e5                	jne    c000abe1 <VgaText::clearScreen()+0x25>
c000abfc:	46                   	inc    esi
c000abfd:	eb db                	jmp    c000abda <VgaText::clearScreen()+0x1e>
c000abff:	83 ec 0c             	sub    esp,0xc
c000ac02:	53                   	push   ebx
c000ac03:	e8 2e fe ff ff       	call   c000aa36 <VgaText::doUpdate()>
c000ac08:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000ac0f:	83 c4 10             	add    esp,0x10
c000ac12:	5b                   	pop    ebx
c000ac13:	5e                   	pop    esi
c000ac14:	5f                   	pop    edi
c000ac15:	c3                   	ret    

c000ac16 <VgaText::putchar(char)>:
c000ac16:	56                   	push   esi
c000ac17:	53                   	push   ebx
c000ac18:	83 ec 14             	sub    esp,0x14
c000ac1b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ac1f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ac23:	3c 5b                	cmp    al,0x5b
c000ac25:	75 18                	jne    c000ac3f <VgaText::putchar(char)+0x29>
c000ac27:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000ac2b:	74 1f                	je     c000ac4c <VgaText::putchar(char)+0x36>
c000ac2d:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000ac33:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000ac3a:	e9 bd 00 00 00       	jmp    c000acfc <VgaText::putchar(char)+0xe6>
c000ac3f:	3c 1b                	cmp    al,0x1b
c000ac41:	75 09                	jne    c000ac4c <VgaText::putchar(char)+0x36>
c000ac43:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000ac47:	e9 b0 00 00 00       	jmp    c000acfc <VgaText::putchar(char)+0xe6>
c000ac4c:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000ac4f:	84 c9                	test   cl,cl
c000ac51:	0f 84 92 00 00 00    	je     c000ace9 <VgaText::putchar(char)+0xd3>
c000ac57:	8d 50 c0             	lea    edx,[eax-0x40]
c000ac5a:	80 fa 3e             	cmp    dl,0x3e
c000ac5d:	77 76                	ja     c000acd5 <VgaText::putchar(char)+0xbf>
c000ac5f:	3c 6d                	cmp    al,0x6d
c000ac61:	75 47                	jne    c000acaa <VgaText::putchar(char)+0x94>
c000ac63:	31 f6                	xor    esi,esi
c000ac65:	31 d2                	xor    edx,edx
c000ac67:	31 c0                	xor    eax,eax
c000ac69:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000ac6c:	7e 2d                	jle    c000ac9b <VgaText::putchar(char)+0x85>
c000ac6e:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000ac73:	80 fa 3b             	cmp    dl,0x3b
c000ac76:	75 17                	jne    c000ac8f <VgaText::putchar(char)+0x79>
c000ac78:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000ac7c:	50                   	push   eax
c000ac7d:	53                   	push   ebx
c000ac7e:	e8 83 f9 ff ff       	call   c000a606 <VgaText::doANSI_SGR(int)>
c000ac83:	59                   	pop    ecx
c000ac84:	31 d2                	xor    edx,edx
c000ac86:	58                   	pop    eax
c000ac87:	31 c0                	xor    eax,eax
c000ac89:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000ac8d:	eb 09                	jmp    c000ac98 <VgaText::putchar(char)+0x82>
c000ac8f:	6b c0 0a             	imul   eax,eax,0xa
c000ac92:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000ac96:	88 ca                	mov    dl,cl
c000ac98:	46                   	inc    esi
c000ac99:	eb ce                	jmp    c000ac69 <VgaText::putchar(char)+0x53>
c000ac9b:	84 d2                	test   dl,dl
c000ac9d:	74 2e                	je     c000accd <VgaText::putchar(char)+0xb7>
c000ac9f:	50                   	push   eax
c000aca0:	53                   	push   ebx
c000aca1:	e8 60 f9 ff ff       	call   c000a606 <VgaText::doANSI_SGR(int)>
c000aca6:	58                   	pop    eax
c000aca7:	5a                   	pop    edx
c000aca8:	eb 23                	jmp    c000accd <VgaText::putchar(char)+0xb7>
c000acaa:	3c 4a                	cmp    al,0x4a
c000acac:	75 1f                	jne    c000accd <VgaText::putchar(char)+0xb7>
c000acae:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000acb2:	75 19                	jne    c000accd <VgaText::putchar(char)+0xb7>
c000acb4:	83 ec 0c             	sub    esp,0xc
c000acb7:	53                   	push   ebx
c000acb8:	e8 ff fe ff ff       	call   c000abbc <VgaText::clearScreen()>
c000acbd:	83 c4 0c             	add    esp,0xc
c000acc0:	6a 00                	push   0x0
c000acc2:	6a 00                	push   0x0
c000acc4:	53                   	push   ebx
c000acc5:	e8 5a fb ff ff       	call   c000a824 <VgaText::setCursor(int, int)>
c000acca:	83 c4 10             	add    esp,0x10
c000accd:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000acd3:	eb 27                	jmp    c000acfc <VgaText::putchar(char)+0xe6>
c000acd5:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000acd8:	83 fa 0e             	cmp    edx,0xe
c000acdb:	7f 1f                	jg     c000acfc <VgaText::putchar(char)+0xe6>
c000acdd:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ace0:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000ace3:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000ace7:	eb 13                	jmp    c000acfc <VgaText::putchar(char)+0xe6>
c000ace9:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000acec:	0f be c0             	movsx  eax,al
c000acef:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000acf2:	50                   	push   eax
c000acf3:	53                   	push   ebx
c000acf4:	e8 65 fc ff ff       	call   c000a95e <VgaText::putchar(char, VgaColour, VgaColour)>
c000acf9:	83 c4 10             	add    esp,0x10
c000acfc:	83 c4 14             	add    esp,0x14
c000acff:	5b                   	pop    ebx
c000ad00:	5e                   	pop    esi
c000ad01:	c3                   	ret    

c000ad02 <VgaText::putx(unsigned int)>:
c000ad02:	57                   	push   edi
c000ad03:	b9 11 00 00 00       	mov    ecx,0x11
c000ad08:	56                   	push   esi
c000ad09:	be ca 2a 02 c0       	mov    esi,0xc0022aca
c000ad0e:	53                   	push   ebx
c000ad0f:	83 ec 20             	sub    esp,0x20
c000ad12:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ad16:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000ad1a:	fc                   	cld    
c000ad1b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ad1d:	be 08 00 00 00       	mov    esi,0x8
c000ad22:	50                   	push   eax
c000ad23:	50                   	push   eax
c000ad24:	89 d8                	mov    eax,ebx
c000ad26:	c1 e3 04             	shl    ebx,0x4
c000ad29:	c1 e8 1c             	shr    eax,0x1c
c000ad2c:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000ad31:	50                   	push   eax
c000ad32:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ad36:	e8 db fe ff ff       	call   c000ac16 <VgaText::putchar(char)>
c000ad3b:	83 c4 10             	add    esp,0x10
c000ad3e:	4e                   	dec    esi
c000ad3f:	75 e1                	jne    c000ad22 <VgaText::putx(unsigned int)+0x20>
c000ad41:	83 c4 20             	add    esp,0x20
c000ad44:	5b                   	pop    ebx
c000ad45:	5e                   	pop    esi
c000ad46:	5f                   	pop    edi
c000ad47:	c3                   	ret    

c000ad48 <VgaText::puts(char const*)>:
c000ad48:	53                   	push   ebx
c000ad49:	83 ec 08             	sub    esp,0x8
c000ad4c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ad50:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ad53:	84 c0                	test   al,al
c000ad55:	74 12                	je     c000ad69 <VgaText::puts(char const*)+0x21>
c000ad57:	43                   	inc    ebx
c000ad58:	51                   	push   ecx
c000ad59:	51                   	push   ecx
c000ad5a:	50                   	push   eax
c000ad5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad5f:	e8 b2 fe ff ff       	call   c000ac16 <VgaText::putchar(char)>
c000ad64:	83 c4 10             	add    esp,0x10
c000ad67:	eb e7                	jmp    c000ad50 <VgaText::puts(char const*)+0x8>
c000ad69:	83 c4 08             	add    esp,0x8
c000ad6c:	5b                   	pop    ebx
c000ad6d:	c3                   	ret    

c000ad6e <VgaText::VgaText(char const*)>:
c000ad6e:	57                   	push   edi
c000ad6f:	56                   	push   esi
c000ad70:	53                   	push   ebx
c000ad71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad75:	83 ec 08             	sub    esp,0x8
c000ad78:	6a 00                	push   0x0
c000ad7a:	50                   	push   eax
c000ad7b:	e8 4a 05 00 00       	call   c000b2ca <UnixFile::UnixFile(int)>
c000ad80:	83 c4 10             	add    esp,0x10
c000ad83:	ba 30 2b 02 c0       	mov    edx,0xc0022b30
c000ad88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad8c:	89 10                	mov    DWORD PTR [eax],edx
c000ad8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad92:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000ad99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad9d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000ada4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ada8:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000adac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adb0:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000adb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adb8:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000adbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adc3:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000adca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adce:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000add5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000add9:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000ade0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ade4:	8d 50 60             	lea    edx,[eax+0x60]
c000ade7:	bb e0 64 02 c0       	mov    ebx,0xc00264e0
c000adec:	b8 08 00 00 00       	mov    eax,0x8
c000adf1:	fc                   	cld    
c000adf2:	89 d7                	mov    edi,edx
c000adf4:	89 de                	mov    esi,ebx
c000adf6:	89 c1                	mov    ecx,eax
c000adf8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000adfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adfe:	05 82 00 00 00       	add    eax,0x82
c000ae03:	83 ec 08             	sub    esp,0x8
c000ae06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae0a:	50                   	push   eax
c000ae0b:	e8 30 59 ff ff       	call   c0000740 <strcpy>
c000ae10:	83 c4 10             	add    esp,0x10
c000ae13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae17:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000ae1e:	83 ec 0c             	sub    esp,0xc
c000ae21:	6a 01                	push   0x1
c000ae23:	e8 e5 08 00 00       	call   c000b70d <Virt::allocateKernelVirtualPages(int)>
c000ae28:	83 c4 10             	add    esp,0x10
c000ae2b:	89 c2                	mov    edx,eax
c000ae2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae31:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ae34:	8b 1d b0 65 02 c0    	mov    ebx,DWORD PTR ds:0xc00265b0
c000ae3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae3e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae41:	89 c6                	mov    esi,eax
c000ae43:	e8 b1 ef ff ff       	call   c0009df9 <Phys::allocatePage()>
c000ae48:	68 05 0c 00 00       	push   0xc05
c000ae4d:	56                   	push   esi
c000ae4e:	50                   	push   eax
c000ae4f:	53                   	push   ebx
c000ae50:	e8 5f 0f 00 00       	call   c000bdb4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ae55:	83 c4 10             	add    esp,0x10
c000ae58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae5c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae5f:	83 ec 04             	sub    esp,0x4
c000ae62:	68 00 0f 00 00       	push   0xf00
c000ae67:	6a 00                	push   0x0
c000ae69:	50                   	push   eax
c000ae6a:	e8 15 58 ff ff       	call   c0000684 <memset>
c000ae6f:	83 c4 10             	add    esp,0x10
c000ae72:	83 ec 04             	sub    esp,0x4
c000ae75:	6a 00                	push   0x0
c000ae77:	6a 07                	push   0x7
c000ae79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae7d:	e8 18 f8 ff ff       	call   c000a69a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000ae82:	83 c4 10             	add    esp,0x10
c000ae85:	83 ec 04             	sub    esp,0x4
c000ae88:	6a 00                	push   0x0
c000ae8a:	6a 00                	push   0x0
c000ae8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae90:	e8 8f f9 ff ff       	call   c000a824 <VgaText::setCursor(int, int)>
c000ae95:	83 c4 10             	add    esp,0x10
c000ae98:	83 ec 0c             	sub    esp,0xc
c000ae9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae9f:	e8 18 fd ff ff       	call   c000abbc <VgaText::clearScreen()>
c000aea4:	83 c4 10             	add    esp,0x10
c000aea7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeab:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000aeaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeb3:	05 02 01 00 00       	add    eax,0x102
c000aeb8:	83 ec 04             	sub    esp,0x4
c000aebb:	68 96 00 00 00       	push   0x96
c000aec0:	6a 00                	push   0x0
c000aec2:	50                   	push   eax
c000aec3:	e8 bc 57 ff ff       	call   c0000684 <memset>
c000aec8:	83 c4 10             	add    esp,0x10
c000aecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aecf:	05 98 01 00 00       	add    eax,0x198
c000aed4:	83 ec 04             	sub    esp,0x4
c000aed7:	68 2c 01 00 00       	push   0x12c
c000aedc:	6a 00                	push   0x0
c000aede:	50                   	push   eax
c000aedf:	e8 a0 57 ff ff       	call   c0000684 <memset>
c000aee4:	83 c4 10             	add    esp,0x10
c000aee7:	90                   	nop
c000aee8:	5b                   	pop    ebx
c000aee9:	5e                   	pop    esi
c000aeea:	5f                   	pop    edi
c000aeeb:	c3                   	ret    

c000aeec <VgaText::receiveKey(unsigned char)>:
c000aeec:	55                   	push   ebp
c000aeed:	57                   	push   edi
c000aeee:	56                   	push   esi
c000aeef:	53                   	push   ebx
c000aef0:	83 ec 1c             	sub    esp,0x1c
c000aef3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000aef7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000aefb:	84 db                	test   bl,bl
c000aefd:	0f 84 c9 00 00 00    	je     c000afcc <VgaText::receiveKey(unsigned char)+0xe0>
c000af03:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000af09:	80 fb 08             	cmp    bl,0x8
c000af0c:	75 2c                	jne    c000af3a <VgaText::receiveKey(unsigned char)+0x4e>
c000af0e:	83 ec 0c             	sub    esp,0xc
c000af11:	57                   	push   edi
c000af12:	e8 89 57 ff ff       	call   c00006a0 <strlen>
c000af17:	83 c4 10             	add    esp,0x10
c000af1a:	85 c0                	test   eax,eax
c000af1c:	74 41                	je     c000af5f <VgaText::receiveKey(unsigned char)+0x73>
c000af1e:	50                   	push   eax
c000af1f:	50                   	push   eax
c000af20:	6a 08                	push   0x8
c000af22:	56                   	push   esi
c000af23:	e8 ee fc ff ff       	call   c000ac16 <VgaText::putchar(char)>
c000af28:	89 3c 24             	mov    DWORD PTR [esp],edi
c000af2b:	e8 70 57 ff ff       	call   c00006a0 <strlen>
c000af30:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000af38:	eb 22                	jmp    c000af5c <VgaText::receiveKey(unsigned char)+0x70>
c000af3a:	0f be c3             	movsx  eax,bl
c000af3d:	52                   	push   edx
c000af3e:	52                   	push   edx
c000af3f:	50                   	push   eax
c000af40:	56                   	push   esi
c000af41:	e8 d0 fc ff ff       	call   c000ac16 <VgaText::putchar(char)>
c000af46:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000af4a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000af4f:	59                   	pop    ecx
c000af50:	5d                   	pop    ebp
c000af51:	8d 44 24 16          	lea    eax,[esp+0x16]
c000af55:	50                   	push   eax
c000af56:	57                   	push   edi
c000af57:	e8 24 59 ff ff       	call   c0000880 <strcat>
c000af5c:	83 c4 10             	add    esp,0x10
c000af5f:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000af66:	75 05                	jne    c000af6d <VgaText::receiveKey(unsigned char)+0x81>
c000af68:	80 fb 0a             	cmp    bl,0xa
c000af6b:	75 53                	jne    c000afc0 <VgaText::receiveKey(unsigned char)+0xd4>
c000af6d:	83 ec 0c             	sub    esp,0xc
c000af70:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c000af76:	53                   	push   ebx
c000af77:	e8 24 57 ff ff       	call   c00006a0 <strlen>
c000af7c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000af7f:	89 c5                	mov    ebp,eax
c000af81:	e8 1a 57 ff ff       	call   c00006a0 <strlen>
c000af86:	83 c4 10             	add    esp,0x10
c000af89:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000af8d:	3d 2c 01 00 00       	cmp    eax,0x12c
c000af92:	76 10                	jbe    c000afa4 <VgaText::receiveKey(unsigned char)+0xb8>
c000af94:	83 ec 0c             	sub    esp,0xc
c000af97:	68 db 2a 02 c0       	push   0xc0022adb
c000af9c:	e8 00 94 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c000afa1:	83 c4 10             	add    esp,0x10
c000afa4:	50                   	push   eax
c000afa5:	50                   	push   eax
c000afa6:	57                   	push   edi
c000afa7:	53                   	push   ebx
c000afa8:	e8 d3 58 ff ff       	call   c0000880 <strcat>
c000afad:	83 c4 0c             	add    esp,0xc
c000afb0:	68 96 00 00 00       	push   0x96
c000afb5:	6a 00                	push   0x0
c000afb7:	57                   	push   edi
c000afb8:	e8 c7 56 ff ff       	call   c0000684 <memset>
c000afbd:	83 c4 10             	add    esp,0x10
c000afc0:	83 ec 0c             	sub    esp,0xc
c000afc3:	56                   	push   esi
c000afc4:	e8 6d fa ff ff       	call   c000aa36 <VgaText::doUpdate()>
c000afc9:	83 c4 10             	add    esp,0x10
c000afcc:	83 c4 1c             	add    esp,0x1c
c000afcf:	5b                   	pop    ebx
c000afd0:	5e                   	pop    esi
c000afd1:	5f                   	pop    edi
c000afd2:	5d                   	pop    ebp
c000afd3:	c3                   	ret    

c000afd4 <VgaText::write(unsigned long long, void*, int*)>:
c000afd4:	55                   	push   ebp
c000afd5:	57                   	push   edi
c000afd6:	56                   	push   esi
c000afd7:	53                   	push   ebx
c000afd8:	83 ec 0c             	sub    esp,0xc
c000afdb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000afdf:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000afe3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000afe7:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000afee:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000aff1:	39 eb                	cmp    ebx,ebp
c000aff3:	74 13                	je     c000b008 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000aff5:	43                   	inc    ebx
c000aff6:	50                   	push   eax
c000aff7:	50                   	push   eax
c000aff8:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000affc:	50                   	push   eax
c000affd:	56                   	push   esi
c000affe:	e8 13 fc ff ff       	call   c000ac16 <VgaText::putchar(char)>
c000b003:	83 c4 10             	add    esp,0x10
c000b006:	eb e9                	jmp    c000aff1 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000b008:	83 ec 0c             	sub    esp,0xc
c000b00b:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000b012:	56                   	push   esi
c000b013:	e8 1e fa ff ff       	call   c000aa36 <VgaText::doUpdate()>
c000b018:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b01c:	89 38                	mov    DWORD PTR [eax],edi
c000b01e:	83 c4 1c             	add    esp,0x1c
c000b021:	31 c0                	xor    eax,eax
c000b023:	5b                   	pop    ebx
c000b024:	5e                   	pop    esi
c000b025:	5f                   	pop    edi
c000b026:	5d                   	pop    ebp
c000b027:	c3                   	ret    

c000b028 <newTerminal(char*)>:
c000b028:	83 ec 28             	sub    esp,0x28
c000b02b:	68 c4 02 00 00       	push   0x2c4
c000b030:	e8 8e e9 ff ff       	call   c00099c3 <malloc>
c000b035:	5a                   	pop    edx
c000b036:	59                   	pop    ecx
c000b037:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b03b:	50                   	push   eax
c000b03c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b040:	e8 29 fd ff ff       	call   c000ad6e <VgaText::VgaText(char const*)>
c000b045:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b049:	83 c4 2c             	add    esp,0x2c
c000b04c:	c3                   	ret    
c000b04d:	66 90                	xchg   ax,ax
c000b04f:	90                   	nop

c000b050 <TSS::TSS()>:
c000b050:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b054:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b05b:	90                   	nop
c000b05c:	c3                   	ret    
c000b05d:	90                   	nop
c000b05e:	66 90                	xchg   ax,ax

c000b060 <TSS::setESP(unsigned long)>:
c000b060:	55                   	push   ebp
c000b061:	89 e5                	mov    ebp,esp
c000b063:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b066:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b069:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b06c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b06f:	90                   	nop
c000b070:	5d                   	pop    ebp
c000b071:	c3                   	ret    
c000b072:	66 90                	xchg   ax,ax

c000b074 <TSS::flush()>:
c000b074:	55                   	push   ebp
c000b075:	89 e5                	mov    ebp,esp
c000b077:	83 ec 10             	sub    esp,0x10
c000b07a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b07d:	8b 00                	mov    eax,DWORD PTR [eax]
c000b07f:	83 c8 03             	or     eax,0x3
c000b082:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b086:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b08a:	66 89 d0             	mov    ax,dx
c000b08d:	0f 00 d8             	ltr    ax
c000b090:	90                   	nop
c000b091:	c9                   	leave  
c000b092:	c3                   	ret    
c000b093:	90                   	nop

c000b094 <TSS::setup(unsigned long, unsigned long)>:
c000b094:	55                   	push   ebp
c000b095:	89 e5                	mov    ebp,esp
c000b097:	83 ec 18             	sub    esp,0x18
c000b09a:	83 ec 0c             	sub    esp,0xc
c000b09d:	6a 68                	push   0x68
c000b09f:	e8 1f e9 ff ff       	call   c00099c3 <malloc>
c000b0a4:	83 c4 10             	add    esp,0x10
c000b0a7:	89 c2                	mov    edx,eax
c000b0a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0ac:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b0af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0b5:	83 ec 04             	sub    esp,0x4
c000b0b8:	6a 68                	push   0x68
c000b0ba:	6a 00                	push   0x0
c000b0bc:	50                   	push   eax
c000b0bd:	e8 c2 55 ff ff       	call   c0000684 <memset>
c000b0c2:	83 c4 10             	add    esp,0x10
c000b0c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0cb:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b0d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0d7:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b0dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0e3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b0e6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b0e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0ef:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b0f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0fb:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b101:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b104:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b107:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b10d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b110:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b113:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b119:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b11c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b11f:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b125:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b128:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b12b:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b131:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b134:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b137:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b13a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b13d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b140:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b143:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b146:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b149:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b14c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b14f:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b156:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b159:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b15c:	0f 20 da             	mov    edx,cr3
c000b15f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b162:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b165:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b168:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b16b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b16e:	83 ec 08             	sub    esp,0x8
c000b171:	50                   	push   eax
c000b172:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b175:	50                   	push   eax
c000b176:	e8 a5 e0 ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c000b17b:	83 c4 10             	add    esp,0x10
c000b17e:	83 ec 08             	sub    esp,0x8
c000b181:	6a 68                	push   0x68
c000b183:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b186:	50                   	push   eax
c000b187:	e8 b0 e0 ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c000b18c:	83 c4 10             	add    esp,0x10
c000b18f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b193:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b196:	83 e0 0f             	and    eax,0xf
c000b199:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b19c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b19f:	83 c8 40             	or     eax,0x40
c000b1a2:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b1a5:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c000b1aa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b1b0:	05 78 01 00 00       	add    eax,0x178
c000b1b5:	83 ec 04             	sub    esp,0x4
c000b1b8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b1bb:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b1be:	50                   	push   eax
c000b1bf:	e8 ac e0 ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000b1c4:	83 c4 10             	add    esp,0x10
c000b1c7:	89 c2                	mov    edx,eax
c000b1c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b1cc:	89 10                	mov    DWORD PTR [eax],edx
c000b1ce:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c000b1d3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b1d9:	05 78 01 00 00       	add    eax,0x178
c000b1de:	83 ec 0c             	sub    esp,0xc
c000b1e1:	50                   	push   eax
c000b1e2:	e8 b3 e0 ff ff       	call   c000929a <GDT::flush()>
c000b1e7:	83 c4 10             	add    esp,0x10
c000b1ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b1ed:	8b 00                	mov    eax,DWORD PTR [eax]
c000b1ef:	c9                   	leave  
c000b1f0:	c3                   	ret    
c000b1f1:	90                   	nop

c000b1f2 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b1f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b1fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b1fd:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b202:	75 08                	jne    c000b20c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b204:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b20a:	eb 38                	jmp    c000b244 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b20c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b211:	75 17                	jne    c000b22a <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b213:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b218:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b21b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b221:	8b 10                	mov    edx,DWORD PTR [eax]
c000b223:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b227:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b22a:	89 c1                	mov    ecx,eax
c000b22c:	83 e1 fd             	and    ecx,0xfffffffd
c000b22f:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b235:	74 cd                	je     c000b204 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b237:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b23c:	83 e0 ef             	and    eax,0xffffffef
c000b23f:	83 f8 08             	cmp    eax,0x8
c000b242:	76 c0                	jbe    c000b204 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b244:	31 c0                	xor    eax,eax
c000b246:	c3                   	ret    
c000b247:	90                   	nop

c000b248 <ReservedFilename::isAtty()>:
c000b248:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b24c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b24f:	31 c0                	xor    eax,eax
c000b251:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b257:	74 09                	je     c000b262 <ReservedFilename::isAtty()+0x1a>
c000b259:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b25f:	0f 94 c0             	sete   al
c000b262:	c3                   	ret    
c000b263:	90                   	nop

c000b264 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b264:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b268:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b26c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b26f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b273:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b278:	75 08                	jne    c000b282 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b27a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b280:	eb 3d                	jmp    c000b2bf <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b282:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b287:	75 17                	jne    c000b2a0 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b289:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b28e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b291:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b297:	8b 10                	mov    edx,DWORD PTR [eax]
c000b299:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b29d:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b2a0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b2a5:	75 04                	jne    c000b2ab <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b2a7:	89 0a                	mov    DWORD PTR [edx],ecx
c000b2a9:	eb 14                	jmp    c000b2bf <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b2ab:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b2b0:	74 c8                	je     c000b27a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b2b2:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b2b7:	83 e0 ef             	and    eax,0xffffffef
c000b2ba:	83 f8 08             	cmp    eax,0x8
c000b2bd:	76 bb                	jbe    c000b27a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b2bf:	31 c0                	xor    eax,eax
c000b2c1:	c3                   	ret    

c000b2c2 <UnixFile::getFileDescriptor()>:
c000b2c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b2c9:	c3                   	ret    

c000b2ca <UnixFile::UnixFile(int)>:
c000b2ca:	53                   	push   ebx
c000b2cb:	83 ec 28             	sub    esp,0x28
c000b2ce:	ba f8 2b 02 c0       	mov    edx,0xc0022bf8
c000b2d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b2d7:	89 10                	mov    DWORD PTR [eax],edx
c000b2d9:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b2e1:	0f 8f 8c 01 00 00    	jg     c000b473 <UnixFile::UnixFile(int)+0x1a9>
c000b2e7:	a1 c0 58 02 c0       	mov    eax,ds:0xc00258c0
c000b2ec:	8d 50 01             	lea    edx,[eax+0x1]
c000b2ef:	89 15 c0 58 02 c0    	mov    DWORD PTR ds:0xc00258c0,edx
c000b2f5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b2f9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b2fc:	83 ec 08             	sub    esp,0x8
c000b2ff:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b303:	68 98 65 02 c0       	push   0xc0026598
c000b308:	e8 7f 5f 01 00       	call   c002128c <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b30d:	83 c4 10             	add    esp,0x10
c000b310:	a0 94 65 02 c0       	mov    al,ds:0xc0026594
c000b315:	83 f0 01             	xor    eax,0x1
c000b318:	84 c0                	test   al,al
c000b31a:	0f 84 54 01 00 00    	je     c000b474 <UnixFile::UnixFile(int)+0x1aa>
c000b320:	c6 05 94 65 02 c0 01 	mov    BYTE PTR ds:0xc0026594,0x1
c000b327:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b32f:	83 ec 0c             	sub    esp,0xc
c000b332:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b336:	e8 88 e6 ff ff       	call   c00099c3 <malloc>
c000b33b:	83 c4 10             	add    esp,0x10
c000b33e:	89 c3                	mov    ebx,eax
c000b340:	83 ec 08             	sub    esp,0x8
c000b343:	68 03 ff ff 0f       	push   0xfffff03
c000b348:	53                   	push   ebx
c000b349:	e8 2c 01 00 00       	call   c000b47a <ReservedFilename::ReservedFilename(int)>
c000b34e:	83 c4 10             	add    esp,0x10
c000b351:	89 1d 8c 65 02 c0    	mov    DWORD PTR ds:0xc002658c,ebx
c000b357:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b35f:	83 ec 0c             	sub    esp,0xc
c000b362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b366:	e8 58 e6 ff ff       	call   c00099c3 <malloc>
c000b36b:	83 c4 10             	add    esp,0x10
c000b36e:	89 c3                	mov    ebx,eax
c000b370:	83 ec 08             	sub    esp,0x8
c000b373:	68 01 ff ff 0f       	push   0xfffff01
c000b378:	53                   	push   ebx
c000b379:	e8 fc 00 00 00       	call   c000b47a <ReservedFilename::ReservedFilename(int)>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 1d 90 65 02 c0    	mov    DWORD PTR ds:0xc0026590,ebx
c000b387:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b38f:	83 ec 0c             	sub    esp,0xc
c000b392:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b396:	e8 28 e6 ff ff       	call   c00099c3 <malloc>
c000b39b:	83 c4 10             	add    esp,0x10
c000b39e:	89 c3                	mov    ebx,eax
c000b3a0:	83 ec 08             	sub    esp,0x8
c000b3a3:	68 00 ff ff 0f       	push   0xfffff00
c000b3a8:	53                   	push   ebx
c000b3a9:	e8 cc 00 00 00       	call   c000b47a <ReservedFilename::ReservedFilename(int)>
c000b3ae:	83 c4 10             	add    esp,0x10
c000b3b1:	89 1d 84 65 02 c0    	mov    DWORD PTR ds:0xc0026584,ebx
c000b3b7:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b3bf:	83 ec 0c             	sub    esp,0xc
c000b3c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b3c6:	e8 f8 e5 ff ff       	call   c00099c3 <malloc>
c000b3cb:	83 c4 10             	add    esp,0x10
c000b3ce:	89 c3                	mov    ebx,eax
c000b3d0:	83 ec 08             	sub    esp,0x8
c000b3d3:	68 02 ff ff 0f       	push   0xfffff02
c000b3d8:	53                   	push   ebx
c000b3d9:	e8 9c 00 00 00       	call   c000b47a <ReservedFilename::ReservedFilename(int)>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 1d 88 65 02 c0    	mov    DWORD PTR ds:0xc0026588,ebx
c000b3e7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b3ef:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b3f4:	7f 7e                	jg     c000b474 <UnixFile::UnixFile(int)+0x1aa>
c000b3f6:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000b3fe:	83 ec 0c             	sub    esp,0xc
c000b401:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b405:	e8 b9 e5 ff ff       	call   c00099c3 <malloc>
c000b40a:	83 c4 10             	add    esp,0x10
c000b40d:	89 c3                	mov    ebx,eax
c000b40f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b413:	05 10 ff ff 0f       	add    eax,0xfffff10
c000b418:	83 ec 08             	sub    esp,0x8
c000b41b:	50                   	push   eax
c000b41c:	53                   	push   ebx
c000b41d:	e8 58 00 00 00       	call   c000b47a <ReservedFilename::ReservedFilename(int)>
c000b422:	83 c4 10             	add    esp,0x10
c000b425:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b429:	89 1c 85 60 65 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9aa0],ebx
c000b430:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000b438:	83 ec 0c             	sub    esp,0xc
c000b43b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b43f:	e8 7f e5 ff ff       	call   c00099c3 <malloc>
c000b444:	83 c4 10             	add    esp,0x10
c000b447:	89 c3                	mov    ebx,eax
c000b449:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b44d:	05 20 ff ff 0f       	add    eax,0xfffff20
c000b452:	83 ec 08             	sub    esp,0x8
c000b455:	50                   	push   eax
c000b456:	53                   	push   ebx
c000b457:	e8 1e 00 00 00       	call   c000b47a <ReservedFilename::ReservedFilename(int)>
c000b45c:	83 c4 10             	add    esp,0x10
c000b45f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b463:	89 1c 85 20 65 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9ae0],ebx
c000b46a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b46e:	e9 7c ff ff ff       	jmp    c000b3ef <UnixFile::UnixFile(int)+0x125>
c000b473:	90                   	nop
c000b474:	83 c4 28             	add    esp,0x28
c000b477:	5b                   	pop    ebx
c000b478:	c3                   	ret    
c000b479:	90                   	nop

c000b47a <ReservedFilename::ReservedFilename(int)>:
c000b47a:	83 ec 0c             	sub    esp,0xc
c000b47d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b481:	83 ec 08             	sub    esp,0x8
c000b484:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b488:	50                   	push   eax
c000b489:	e8 3c fe ff ff       	call   c000b2ca <UnixFile::UnixFile(int)>
c000b48e:	83 c4 10             	add    esp,0x10
c000b491:	ba 14 2c 02 c0       	mov    edx,0xc0022c14
c000b496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b49a:	89 10                	mov    DWORD PTR [eax],edx
c000b49c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b4a4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b4a7:	90                   	nop
c000b4a8:	83 c4 0c             	add    esp,0xc
c000b4ab:	c3                   	ret    

c000b4ac <UnixFile::~UnixFile()>:
c000b4ac:	83 ec 1c             	sub    esp,0x1c
c000b4af:	ba f8 2b 02 c0       	mov    edx,0xc0022bf8
c000b4b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b4b8:	89 10                	mov    DWORD PTR [eax],edx
c000b4ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b4be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b4c1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000b4c6:	7f 73                	jg     c000b53b <UnixFile::~UnixFile()+0x8f>
c000b4c8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b4d0:	83 ec 0c             	sub    esp,0xc
c000b4d3:	68 98 65 02 c0       	push   0xc0026598
c000b4d8:	e8 83 5e 01 00       	call   c0021360 <LinkedList<UnixFile>::getFirstElement()>
c000b4dd:	83 c4 10             	add    esp,0x10
c000b4e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4e4:	83 ec 0c             	sub    esp,0xc
c000b4e7:	68 98 65 02 c0       	push   0xc0026598
c000b4ec:	e8 77 5e 01 00       	call   c0021368 <LinkedList<UnixFile>::removeFirst()>
c000b4f1:	83 c4 10             	add    esp,0x10
c000b4f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4f8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000b4fc:	74 40                	je     c000b53e <UnixFile::~UnixFile()+0x92>
c000b4fe:	83 ec 08             	sub    esp,0x8
c000b501:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b505:	68 98 65 02 c0       	push   0xc0026598
c000b50a:	e8 7d 5d 01 00       	call   c002128c <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b50f:	83 c4 10             	add    esp,0x10
c000b512:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b516:	8d 50 01             	lea    edx,[eax+0x1]
c000b519:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b51d:	3d 88 13 00 00       	cmp    eax,0x1388
c000b522:	0f 94 c0             	sete   al
c000b525:	84 c0                	test   al,al
c000b527:	74 a7                	je     c000b4d0 <UnixFile::~UnixFile()+0x24>
c000b529:	83 ec 0c             	sub    esp,0xc
c000b52c:	68 d0 2b 02 c0       	push   0xc0022bd0
c000b531:	e8 6b 8e 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c000b536:	83 c4 10             	add    esp,0x10
c000b539:	eb 95                	jmp    c000b4d0 <UnixFile::~UnixFile()+0x24>
c000b53b:	90                   	nop
c000b53c:	eb 01                	jmp    c000b53f <UnixFile::~UnixFile()+0x93>
c000b53e:	90                   	nop
c000b53f:	90                   	nop
c000b540:	83 c4 1c             	add    esp,0x1c
c000b543:	c3                   	ret    

c000b544 <UnixFile::~UnixFile()>:
c000b544:	83 ec 0c             	sub    esp,0xc
c000b547:	83 ec 0c             	sub    esp,0xc
c000b54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b54e:	e8 59 ff ff ff       	call   c000b4ac <UnixFile::~UnixFile()>
c000b553:	83 c4 10             	add    esp,0x10
c000b556:	83 ec 08             	sub    esp,0x8
c000b559:	6a 0c                	push   0xc
c000b55b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b55f:	e8 9a 14 00 00       	call   c000c9fe <operator delete(void*, unsigned long)>
c000b564:	83 c4 10             	add    esp,0x10
c000b567:	83 c4 0c             	add    esp,0xc
c000b56a:	c3                   	ret    
c000b56b:	90                   	nop

c000b56c <ReservedFilename::~ReservedFilename()>:
c000b56c:	83 ec 0c             	sub    esp,0xc
c000b56f:	ba 14 2c 02 c0       	mov    edx,0xc0022c14
c000b574:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b578:	89 10                	mov    DWORD PTR [eax],edx
c000b57a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b57e:	83 ec 0c             	sub    esp,0xc
c000b581:	50                   	push   eax
c000b582:	e8 25 ff ff ff       	call   c000b4ac <UnixFile::~UnixFile()>
c000b587:	83 c4 10             	add    esp,0x10
c000b58a:	90                   	nop
c000b58b:	83 c4 0c             	add    esp,0xc
c000b58e:	c3                   	ret    
c000b58f:	90                   	nop

c000b590 <ReservedFilename::~ReservedFilename()>:
c000b590:	83 ec 0c             	sub    esp,0xc
c000b593:	83 ec 0c             	sub    esp,0xc
c000b596:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b59a:	e8 cd ff ff ff       	call   c000b56c <ReservedFilename::~ReservedFilename()>
c000b59f:	83 c4 10             	add    esp,0x10
c000b5a2:	83 ec 08             	sub    esp,0x8
c000b5a5:	6a 0c                	push   0xc
c000b5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5ab:	e8 4e 14 00 00       	call   c000c9fe <operator delete(void*, unsigned long)>
c000b5b0:	83 c4 10             	add    esp,0x10
c000b5b3:	83 c4 0c             	add    esp,0xc
c000b5b6:	c3                   	ret    

c000b5b7 <getFromFileDescriptor(int)>:
c000b5b7:	53                   	push   ebx
c000b5b8:	83 ec 08             	sub    esp,0x8
c000b5bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b5bf:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000b5c5:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000b5cb:	7f 2c                	jg     c000b5f9 <getFromFileDescriptor(int)+0x42>
c000b5cd:	83 ec 0c             	sub    esp,0xc
c000b5d0:	68 98 65 02 c0       	push   0xc0026598
c000b5d5:	e8 86 5d 01 00       	call   c0021360 <LinkedList<UnixFile>::getFirstElement()>
c000b5da:	83 c4 10             	add    esp,0x10
c000b5dd:	85 c0                	test   eax,eax
c000b5df:	75 04                	jne    c000b5e5 <getFromFileDescriptor(int)+0x2e>
c000b5e1:	31 c0                	xor    eax,eax
c000b5e3:	eb 6e                	jmp    c000b653 <getFromFileDescriptor(int)+0x9c>
c000b5e5:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000b5e8:	74 69                	je     c000b653 <getFromFileDescriptor(int)+0x9c>
c000b5ea:	52                   	push   edx
c000b5eb:	52                   	push   edx
c000b5ec:	50                   	push   eax
c000b5ed:	68 98 65 02 c0       	push   0xc0026598
c000b5f2:	e8 13 5e 01 00       	call   c002140a <LinkedList<UnixFile>::getNext(UnixFile*)>
c000b5f7:	eb e1                	jmp    c000b5da <getFromFileDescriptor(int)+0x23>
c000b5f9:	a1 8c 65 02 c0       	mov    eax,ds:0xc002658c
c000b5fe:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000b604:	74 4d                	je     c000b653 <getFromFileDescriptor(int)+0x9c>
c000b606:	a1 90 65 02 c0       	mov    eax,ds:0xc0026590
c000b60b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000b611:	74 40                	je     c000b653 <getFromFileDescriptor(int)+0x9c>
c000b613:	a1 88 65 02 c0       	mov    eax,ds:0xc0026588
c000b618:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000b61e:	74 33                	je     c000b653 <getFromFileDescriptor(int)+0x9c>
c000b620:	a1 84 65 02 c0       	mov    eax,ds:0xc0026584
c000b625:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000b62b:	74 26                	je     c000b653 <getFromFileDescriptor(int)+0x9c>
c000b62d:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000b633:	83 f8 08             	cmp    eax,0x8
c000b636:	77 09                	ja     c000b641 <getFromFileDescriptor(int)+0x8a>
c000b638:	8b 04 85 60 65 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9aa0]
c000b63f:	eb 12                	jmp    c000b653 <getFromFileDescriptor(int)+0x9c>
c000b641:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000b647:	83 fb 08             	cmp    ebx,0x8
c000b64a:	77 95                	ja     c000b5e1 <getFromFileDescriptor(int)+0x2a>
c000b64c:	8b 04 9d 20 65 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd9ae0]
c000b653:	83 c4 08             	add    esp,0x8
c000b656:	5b                   	pop    ebx
c000b657:	c3                   	ret    

c000b658 <__static_initialization_and_destruction_0(int, int)>:
c000b658:	83 ec 0c             	sub    esp,0xc
c000b65b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b660:	75 34                	jne    c000b696 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b662:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000b66a:	75 2a                	jne    c000b696 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b66c:	83 ec 0c             	sub    esp,0xc
c000b66f:	68 98 65 02 c0       	push   0xc0026598
c000b674:	e8 d1 5b 01 00       	call   c002124a <LinkedList<UnixFile>::LinkedList()>
c000b679:	83 c4 10             	add    esp,0x10
c000b67c:	83 ec 04             	sub    esp,0x4
c000b67f:	68 e8 56 02 c0       	push   0xc00256e8
c000b684:	68 98 65 02 c0       	push   0xc0026598
c000b689:	68 48 12 02 c0       	push   0xc0021248
c000b68e:	e8 e5 12 00 00       	call   c000c978 <__cxa_atexit>
c000b693:	83 c4 10             	add    esp,0x10
c000b696:	90                   	nop
c000b697:	83 c4 0c             	add    esp,0xc
c000b69a:	c3                   	ret    

c000b69b <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000b69b:	83 ec 0c             	sub    esp,0xc
c000b69e:	83 ec 08             	sub    esp,0x8
c000b6a1:	68 ff ff 00 00       	push   0xffff
c000b6a6:	6a 01                	push   0x1
c000b6a8:	e8 ab ff ff ff       	call   c000b658 <__static_initialization_and_destruction_0(int, int)>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	83 c4 0c             	add    esp,0xc
c000b6b3:	c3                   	ret    

c000b6b4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000b6b4:	53                   	push   ebx
c000b6b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b6bd:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000b6c3:	89 c8                	mov    eax,ecx
c000b6c5:	d1 e8                	shr    eax,1
c000b6c7:	03 05 c8 58 02 c0    	add    eax,DWORD PTR ds:0xc00258c8
c000b6cd:	83 e1 01             	and    ecx,0x1
c000b6d0:	8a 10                	mov    dl,BYTE PTR [eax]
c000b6d2:	75 09                	jne    c000b6dd <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000b6d4:	83 e2 f0             	and    edx,0xfffffff0
c000b6d7:	09 da                	or     edx,ebx
c000b6d9:	88 10                	mov    BYTE PTR [eax],dl
c000b6db:	5b                   	pop    ebx
c000b6dc:	c3                   	ret    
c000b6dd:	c1 e3 04             	shl    ebx,0x4
c000b6e0:	83 e2 0f             	and    edx,0xf
c000b6e3:	09 da                	or     edx,ebx
c000b6e5:	88 10                	mov    BYTE PTR [eax],dl
c000b6e7:	5b                   	pop    ebx
c000b6e8:	c3                   	ret    

c000b6e9 <Virt::getPageState(unsigned long)>:
c000b6e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6ed:	8b 0d c8 58 02 c0    	mov    ecx,DWORD PTR ds:0xc00258c8
c000b6f3:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000b6f9:	89 d0                	mov    eax,edx
c000b6fb:	d1 e8                	shr    eax,1
c000b6fd:	83 e2 01             	and    edx,0x1
c000b700:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000b703:	75 04                	jne    c000b709 <Virt::getPageState(unsigned long)+0x20>
c000b705:	83 e0 0f             	and    eax,0xf
c000b708:	c3                   	ret    
c000b709:	c0 e8 04             	shr    al,0x4
c000b70c:	c3                   	ret    

c000b70d <Virt::allocateKernelVirtualPages(int)>:
c000b70d:	55                   	push   ebp
c000b70e:	31 ed                	xor    ebp,ebp
c000b710:	57                   	push   edi
c000b711:	56                   	push   esi
c000b712:	53                   	push   ebx
c000b713:	31 db                	xor    ebx,ebx
c000b715:	83 ec 1c             	sub    esp,0x1c
c000b718:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b71c:	8b 3d c4 58 02 c0    	mov    edi,DWORD PTR ds:0xc00258c4
c000b722:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000b727:	57                   	push   edi
c000b728:	e8 bc ff ff ff       	call   c000b6e9 <Virt::getPageState(unsigned long)>
c000b72d:	5a                   	pop    edx
c000b72e:	84 c0                	test   al,al
c000b730:	75 3a                	jne    c000b76c <Virt::allocateKernelVirtualPages(int)+0x5f>
c000b732:	85 db                	test   ebx,ebx
c000b734:	75 02                	jne    c000b738 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000b736:	89 fd                	mov    ebp,edi
c000b738:	43                   	inc    ebx
c000b739:	39 f3                	cmp    ebx,esi
c000b73b:	74 5a                	je     c000b797 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000b73d:	47                   	inc    edi
c000b73e:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b744:	76 31                	jbe    c000b777 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000b746:	c7 05 c4 58 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00258c4,0xc8000
c000b750:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000b755:	75 28                	jne    c000b77f <Virt::allocateKernelVirtualPages(int)+0x72>
c000b757:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000b75c:	bf 00 80 0c 00       	mov    edi,0xc8000
c000b761:	57                   	push   edi
c000b762:	e8 82 ff ff ff       	call   c000b6e9 <Virt::getPageState(unsigned long)>
c000b767:	5a                   	pop    edx
c000b768:	84 c0                	test   al,al
c000b76a:	74 c6                	je     c000b732 <Virt::allocateKernelVirtualPages(int)+0x25>
c000b76c:	31 db                	xor    ebx,ebx
c000b76e:	47                   	inc    edi
c000b76f:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b775:	77 cf                	ja     c000b746 <Virt::allocateKernelVirtualPages(int)+0x39>
c000b777:	89 3d c4 58 02 c0    	mov    DWORD PTR ds:0xc00258c4,edi
c000b77d:	eb a8                	jmp    c000b727 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b77f:	83 ec 0c             	sub    esp,0xc
c000b782:	68 28 2c 02 c0       	push   0xc0022c28
c000b787:	e8 15 8c 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c000b78c:	8b 3d c4 58 02 c0    	mov    edi,DWORD PTR ds:0xc00258c4
c000b792:	83 c4 10             	add    esp,0x10
c000b795:	eb 90                	jmp    c000b727 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b797:	89 2d c4 58 02 c0    	mov    DWORD PTR ds:0xc00258c4,ebp
c000b79d:	4b                   	dec    ebx
c000b79e:	74 5f                	je     c000b7ff <Virt::allocateKernelVirtualPages(int)+0xf2>
c000b7a0:	85 f6                	test   esi,esi
c000b7a2:	74 3d                	je     c000b7e1 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b7a4:	89 e8                	mov    eax,ebp
c000b7a6:	31 db                	xor    ebx,ebx
c000b7a8:	8d 7e ff             	lea    edi,[esi-0x1]
c000b7ab:	eb 14                	jmp    c000b7c1 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000b7ad:	6a 01                	push   0x1
c000b7af:	43                   	inc    ebx
c000b7b0:	50                   	push   eax
c000b7b1:	e8 fe fe ff ff       	call   c000b6b4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b7b6:	58                   	pop    eax
c000b7b7:	39 f3                	cmp    ebx,esi
c000b7b9:	5a                   	pop    edx
c000b7ba:	74 25                	je     c000b7e1 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b7bc:	a1 c4 58 02 c0       	mov    eax,ds:0xc00258c4
c000b7c1:	8d 50 01             	lea    edx,[eax+0x1]
c000b7c4:	85 db                	test   ebx,ebx
c000b7c6:	89 15 c4 58 02 c0    	mov    DWORD PTR ds:0xc00258c4,edx
c000b7cc:	74 20                	je     c000b7ee <Virt::allocateKernelVirtualPages(int)+0xe1>
c000b7ce:	39 df                	cmp    edi,ebx
c000b7d0:	75 db                	jne    c000b7ad <Virt::allocateKernelVirtualPages(int)+0xa0>
c000b7d2:	6a 03                	push   0x3
c000b7d4:	43                   	inc    ebx
c000b7d5:	50                   	push   eax
c000b7d6:	e8 d9 fe ff ff       	call   c000b6b4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b7db:	59                   	pop    ecx
c000b7dc:	39 f3                	cmp    ebx,esi
c000b7de:	58                   	pop    eax
c000b7df:	75 db                	jne    c000b7bc <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b7e1:	83 c4 1c             	add    esp,0x1c
c000b7e4:	89 e8                	mov    eax,ebp
c000b7e6:	5b                   	pop    ebx
c000b7e7:	c1 e0 0c             	shl    eax,0xc
c000b7ea:	5e                   	pop    esi
c000b7eb:	5f                   	pop    edi
c000b7ec:	5d                   	pop    ebp
c000b7ed:	c3                   	ret    
c000b7ee:	6a 02                	push   0x2
c000b7f0:	bb 01 00 00 00       	mov    ebx,0x1
c000b7f5:	50                   	push   eax
c000b7f6:	e8 b9 fe ff ff       	call   c000b6b4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b7fb:	58                   	pop    eax
c000b7fc:	5a                   	pop    edx
c000b7fd:	eb bd                	jmp    c000b7bc <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b7ff:	6a 04                	push   0x4
c000b801:	8d 45 01             	lea    eax,[ebp+0x1]
c000b804:	55                   	push   ebp
c000b805:	a3 c4 58 02 c0       	mov    ds:0xc00258c4,eax
c000b80a:	e8 a5 fe ff ff       	call   c000b6b4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b80f:	59                   	pop    ecx
c000b810:	89 e8                	mov    eax,ebp
c000b812:	5b                   	pop    ebx
c000b813:	c1 e0 0c             	shl    eax,0xc
c000b816:	83 c4 1c             	add    esp,0x1c
c000b819:	5b                   	pop    ebx
c000b81a:	5e                   	pop    esi
c000b81b:	5f                   	pop    edi
c000b81c:	5d                   	pop    ebp
c000b81d:	c3                   	ret    

c000b81e <Virt::freeSwapfilePage(unsigned long)>:
c000b81e:	53                   	push   ebx
c000b81f:	8b 15 ac 65 02 c0    	mov    edx,DWORD PTR ds:0xc00265ac
c000b825:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b829:	b8 01 00 00 00       	mov    eax,0x1
c000b82e:	89 cb                	mov    ebx,ecx
c000b830:	d3 e0                	shl    eax,cl
c000b832:	c1 eb 05             	shr    ebx,0x5
c000b835:	f7 d0                	not    eax
c000b837:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000b83a:	5b                   	pop    ebx
c000b83b:	c3                   	ret    

c000b83c <Virt::swapIDToSector(unsigned long)>:
c000b83c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b840:	0f af 05 cc 58 02 c0 	imul   eax,DWORD PTR ds:0xc00258cc
c000b847:	03 05 d4 58 02 c0    	add    eax,DWORD PTR ds:0xc00258d4
c000b84d:	c3                   	ret    

c000b84e <Virt::allocateSwapfilePage()>:
c000b84e:	55                   	push   ebp
c000b84f:	31 d2                	xor    edx,edx
c000b851:	57                   	push   edi
c000b852:	56                   	push   esi
c000b853:	53                   	push   ebx
c000b854:	83 ec 0c             	sub    esp,0xc
c000b857:	8b 0d cc 58 02 c0    	mov    ecx,DWORD PTR ds:0xc00258cc
c000b85d:	a1 d0 58 02 c0       	mov    eax,ds:0xc00258d0
c000b862:	f7 f1                	div    ecx
c000b864:	39 0d d0 58 02 c0    	cmp    DWORD PTR ds:0xc00258d0,ecx
c000b86a:	72 2d                	jb     c000b899 <Virt::allocateSwapfilePage()+0x4b>
c000b86c:	8b 35 ac 65 02 c0    	mov    esi,DWORD PTR ds:0xc00265ac
c000b872:	8b 16                	mov    edx,DWORD PTR [esi]
c000b874:	f6 c2 01             	test   dl,0x1
c000b877:	74 3c                	je     c000b8b5 <Virt::allocateSwapfilePage()+0x67>
c000b879:	31 c9                	xor    ecx,ecx
c000b87b:	bf 01 00 00 00       	mov    edi,0x1
c000b880:	eb 12                	jmp    c000b894 <Virt::allocateSwapfilePage()+0x46>
c000b882:	89 fd                	mov    ebp,edi
c000b884:	89 ca                	mov    edx,ecx
c000b886:	d3 e5                	shl    ebp,cl
c000b888:	c1 ea 05             	shr    edx,0x5
c000b88b:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000b88e:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b890:	85 ea                	test   edx,ebp
c000b892:	74 2a                	je     c000b8be <Virt::allocateSwapfilePage()+0x70>
c000b894:	41                   	inc    ecx
c000b895:	39 c8                	cmp    eax,ecx
c000b897:	77 e9                	ja     c000b882 <Virt::allocateSwapfilePage()+0x34>
c000b899:	83 ec 0c             	sub    esp,0xc
c000b89c:	68 e0 2d 02 c0       	push   0xc0022de0
c000b8a1:	e8 fb 8a 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c000b8a6:	83 c4 10             	add    esp,0x10
c000b8a9:	31 c9                	xor    ecx,ecx
c000b8ab:	83 c4 0c             	add    esp,0xc
c000b8ae:	89 c8                	mov    eax,ecx
c000b8b0:	5b                   	pop    ebx
c000b8b1:	5e                   	pop    esi
c000b8b2:	5f                   	pop    edi
c000b8b3:	5d                   	pop    ebp
c000b8b4:	c3                   	ret    
c000b8b5:	89 f3                	mov    ebx,esi
c000b8b7:	bd 01 00 00 00       	mov    ebp,0x1
c000b8bc:	31 c9                	xor    ecx,ecx
c000b8be:	09 ea                	or     edx,ebp
c000b8c0:	89 c8                	mov    eax,ecx
c000b8c2:	89 13                	mov    DWORD PTR [ebx],edx
c000b8c4:	83 c4 0c             	add    esp,0xc
c000b8c7:	5b                   	pop    ebx
c000b8c8:	5e                   	pop    esi
c000b8c9:	5f                   	pop    edi
c000b8ca:	5d                   	pop    ebp
c000b8cb:	c3                   	ret    

c000b8cc <Virt::virtualMemorySetup()>:
c000b8cc:	53                   	push   ebx
c000b8cd:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000b8d2:	6a 0f                	push   0xf
c000b8d4:	53                   	push   ebx
c000b8d5:	43                   	inc    ebx
c000b8d6:	e8 d9 fd ff ff       	call   c000b6b4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b8db:	58                   	pop    eax
c000b8dc:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000b8e2:	5a                   	pop    edx
c000b8e3:	75 ed                	jne    c000b8d2 <Virt::virtualMemorySetup()+0x6>
c000b8e5:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000b8ea:	6a 00                	push   0x0
c000b8ec:	53                   	push   ebx
c000b8ed:	43                   	inc    ebx
c000b8ee:	e8 c1 fd ff ff       	call   c000b6b4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b8f3:	59                   	pop    ecx
c000b8f4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000b8fa:	58                   	pop    eax
c000b8fb:	75 ed                	jne    c000b8ea <Virt::virtualMemorySetup()+0x1e>
c000b8fd:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000b902:	6a 0f                	push   0xf
c000b904:	53                   	push   ebx
c000b905:	43                   	inc    ebx
c000b906:	e8 a9 fd ff ff       	call   c000b6b4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b90b:	58                   	pop    eax
c000b90c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000b912:	5a                   	pop    edx
c000b913:	75 ed                	jne    c000b902 <Virt::virtualMemorySetup()+0x36>
c000b915:	5b                   	pop    ebx
c000b916:	c3                   	ret    

c000b917 <Virt::setupPageSwapping(int)>:
c000b917:	53                   	push   ebx
c000b918:	83 ec 0c             	sub    esp,0xc
c000b91b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b91f:	a1 48 6a 02 c0       	mov    eax,ds:0xc0026a48
c000b924:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b92a:	8b 10                	mov    edx,DWORD PTR [eax]
c000b92c:	53                   	push   ebx
c000b92d:	c1 e3 0b             	shl    ebx,0xb
c000b930:	68 f7 2d 02 c0       	push   0xc0022df7
c000b935:	50                   	push   eax
c000b936:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000b939:	89 1d d0 58 02 c0    	mov    DWORD PTR ds:0xc00258d0,ebx
c000b93f:	c6 05 d8 58 02 c0 43 	mov    BYTE PTR ds:0xc00258d8,0x43
c000b946:	c1 eb 08             	shr    ebx,0x8
c000b949:	a3 d4 58 02 c0       	mov    ds:0xc00258d4,eax
c000b94e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b951:	c7 05 cc 58 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00258cc,0x8
c000b95b:	e8 63 e0 ff ff       	call   c00099c3 <malloc>
c000b960:	83 c4 0c             	add    esp,0xc
c000b963:	89 c1                	mov    ecx,eax
c000b965:	a3 ac 65 02 c0       	mov    ds:0xc00265ac,eax
c000b96a:	31 d2                	xor    edx,edx
c000b96c:	a1 d0 58 02 c0       	mov    eax,ds:0xc00258d0
c000b971:	f7 35 cc 58 02 c0    	div    DWORD PTR ds:0xc00258cc
c000b977:	c1 e8 05             	shr    eax,0x5
c000b97a:	50                   	push   eax
c000b97b:	6a 00                	push   0x0
c000b97d:	51                   	push   ecx
c000b97e:	e8 01 4d ff ff       	call   c0000684 <memset>
c000b983:	83 c4 18             	add    esp,0x18
c000b986:	5b                   	pop    ebx
c000b987:	c3                   	ret    

c000b988 <VAS::VAS()>:
c000b988:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b98c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b993:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b997:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000b99e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9a2:	a3 b0 65 02 c0       	mov    ds:0xc00265b0,eax
c000b9a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9ab:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000b9af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9b3:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000b9b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9ba:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000b9c1:	90                   	nop
c000b9c2:	c3                   	ret    
c000b9c3:	90                   	nop

c000b9c4 <VAS::VAS(VAS*)>:
c000b9c4:	83 ec 0c             	sub    esp,0xc
c000b9c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9cb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b9d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9d6:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000b9dd:	83 ec 0c             	sub    esp,0xc
c000b9e0:	68 48 2c 02 c0       	push   0xc0022c48
c000b9e5:	e8 b7 89 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c000b9ea:	83 c4 10             	add    esp,0x10
c000b9ed:	90                   	nop
c000b9ee:	83 c4 0c             	add    esp,0xc
c000b9f1:	c3                   	ret    

c000b9f2 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000b9f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9f6:	89 c2                	mov    edx,eax
c000b9f8:	c1 e8 0a             	shr    eax,0xa
c000b9fb:	c1 ea 16             	shr    edx,0x16
c000b9fe:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000ba03:	19 c9                	sbb    ecx,ecx
c000ba05:	c1 e2 0c             	shl    edx,0xc
c000ba08:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000ba0e:	25 fc 0f 00 00       	and    eax,0xffc
c000ba13:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000ba1a:	01 d0                	add    eax,edx
c000ba1c:	c3                   	ret    
c000ba1d:	90                   	nop

c000ba1e <VAS::getPageTableEntry(unsigned long)>:
c000ba1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ba22:	89 ca                	mov    edx,ecx
c000ba24:	c1 e9 0a             	shr    ecx,0xa
c000ba27:	c1 ea 16             	shr    edx,0x16
c000ba2a:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000ba30:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000ba36:	c1 e0 0c             	shl    eax,0xc
c000ba39:	8d 04 08             	lea    eax,[eax+ecx*1]
c000ba3c:	c3                   	ret    

c000ba3d <Virt::freeKernelVirtualPages(unsigned long)>:
c000ba3d:	57                   	push   edi
c000ba3e:	56                   	push   esi
c000ba3f:	be 01 00 00 00       	mov    esi,0x1
c000ba44:	53                   	push   ebx
c000ba45:	83 ec 10             	sub    esp,0x10
c000ba48:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ba4c:	c1 eb 0c             	shr    ebx,0xc
c000ba4f:	eb 3f                	jmp    c000ba90 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000ba51:	83 ec 08             	sub    esp,0x8
c000ba54:	57                   	push   edi
c000ba55:	ff 35 b0 65 02 c0    	push   DWORD PTR ds:0xc00265b0
c000ba5b:	e8 be ff ff ff       	call   c000ba1e <VAS::getPageTableEntry(unsigned long)>
c000ba60:	83 c4 10             	add    esp,0x10
c000ba63:	8b 00                	mov    eax,DWORD PTR [eax]
c000ba65:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000ba69:	f6 c4 04             	test   ah,0x4
c000ba6c:	75 5f                	jne    c000bacd <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000ba6e:	80 fa 04             	cmp    dl,0x4
c000ba71:	74 78                	je     c000baeb <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000ba73:	80 fa 02             	cmp    dl,0x2
c000ba76:	0f 84 88 00 00 00    	je     c000bb04 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000ba7c:	80 fa 03             	cmp    dl,0x3
c000ba7f:	0f 84 ad 00 00 00    	je     c000bb32 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000ba85:	fe ca                	dec    dl
c000ba87:	0f 84 92 00 00 00    	je     c000bb1f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000ba8d:	43                   	inc    ebx
c000ba8e:	31 f6                	xor    esi,esi
c000ba90:	53                   	push   ebx
c000ba91:	89 df                	mov    edi,ebx
c000ba93:	e8 51 fc ff ff       	call   c000b6e9 <Virt::getPageState(unsigned long)>
c000ba98:	c1 e7 0c             	shl    edi,0xc
c000ba9b:	59                   	pop    ecx
c000ba9c:	84 c0                	test   al,al
c000ba9e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000baa2:	75 ad                	jne    c000ba51 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000baa4:	83 ec 0c             	sub    esp,0xc
c000baa7:	68 0e 2e 02 c0       	push   0xc0022e0e
c000baac:	e8 f0 88 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c000bab1:	58                   	pop    eax
c000bab2:	5a                   	pop    edx
c000bab3:	57                   	push   edi
c000bab4:	ff 35 b0 65 02 c0    	push   DWORD PTR ds:0xc00265b0
c000baba:	e8 5f ff ff ff       	call   c000ba1e <VAS::getPageTableEntry(unsigned long)>
c000babf:	83 c4 10             	add    esp,0x10
c000bac2:	8b 00                	mov    eax,DWORD PTR [eax]
c000bac4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bac8:	f6 c4 04             	test   ah,0x4
c000bacb:	74 c0                	je     c000ba8d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bacd:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000bad1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bad6:	83 ec 0c             	sub    esp,0xc
c000bad9:	50                   	push   eax
c000bada:	e8 97 e2 ff ff       	call   c0009d76 <Phys::freePage(unsigned long)>
c000badf:	83 c4 10             	add    esp,0x10
c000bae2:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bae6:	80 fa 04             	cmp    dl,0x4
c000bae9:	75 88                	jne    c000ba73 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000baeb:	89 f0                	mov    eax,esi
c000baed:	84 c0                	test   al,al
c000baef:	75 47                	jne    c000bb38 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000baf1:	c7 44 24 20 6c 2c 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022c6c
c000baf9:	83 c4 10             	add    esp,0x10
c000bafc:	5b                   	pop    ebx
c000bafd:	5e                   	pop    esi
c000bafe:	5f                   	pop    edi
c000baff:	e9 9d 88 00 00       	jmp    c00143a1 <Krnl::panic(char const*)>
c000bb04:	89 f0                	mov    eax,esi
c000bb06:	84 c0                	test   al,al
c000bb08:	75 15                	jne    c000bb1f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000bb0a:	83 ec 0c             	sub    esp,0xc
c000bb0d:	68 2a 2e 02 c0       	push   0xc0022e2a
c000bb12:	e8 8a 88 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c000bb17:	83 c4 10             	add    esp,0x10
c000bb1a:	e9 6e ff ff ff       	jmp    c000ba8d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bb1f:	83 ec 08             	sub    esp,0x8
c000bb22:	6a 00                	push   0x0
c000bb24:	53                   	push   ebx
c000bb25:	e8 8a fb ff ff       	call   c000b6b4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bb2a:	83 c4 10             	add    esp,0x10
c000bb2d:	e9 5b ff ff ff       	jmp    c000ba8d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bb32:	89 f0                	mov    eax,esi
c000bb34:	84 c0                	test   al,al
c000bb36:	75 15                	jne    c000bb4d <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000bb38:	83 ec 08             	sub    esp,0x8
c000bb3b:	6a 00                	push   0x0
c000bb3d:	53                   	push   ebx
c000bb3e:	e8 71 fb ff ff       	call   c000b6b4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bb43:	83 c4 10             	add    esp,0x10
c000bb46:	83 c4 10             	add    esp,0x10
c000bb49:	5b                   	pop    ebx
c000bb4a:	5e                   	pop    esi
c000bb4b:	5f                   	pop    edi
c000bb4c:	c3                   	ret    
c000bb4d:	c7 44 24 20 46 2e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022e46
c000bb55:	83 c4 10             	add    esp,0x10
c000bb58:	5b                   	pop    ebx
c000bb59:	5e                   	pop    esi
c000bb5a:	5f                   	pop    edi
c000bb5b:	e9 41 88 00 00       	jmp    c00143a1 <Krnl::panic(char const*)>

c000bb60 <VAS::freeAllocatedPages(unsigned long)>:
c000bb60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bb64:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bb68:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000bb6c:	74 09                	je     c000bb77 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000bb6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bb72:	e9 c6 fe ff ff       	jmp    c000ba3d <Virt::freeKernelVirtualPages(unsigned long)>
c000bb77:	c7 44 24 04 90 2c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022c90
c000bb7f:	e9 5b 0f 00 00       	jmp    c000cadf <Dbg::kprintf(char const*, ...)>

c000bb84 <VAS::virtualToPhysical(unsigned long)>:
c000bb84:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000bb88:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000bb8c:	e8 8d fe ff ff       	call   c000ba1e <VAS::getPageTableEntry(unsigned long)>
c000bb91:	5a                   	pop    edx
c000bb92:	8b 00                	mov    eax,DWORD PTR [eax]
c000bb94:	59                   	pop    ecx
c000bb95:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bb9a:	c3                   	ret    
c000bb9b:	90                   	nop

c000bb9c <VAS::reflagRange(unsigned long, int, int, int)>:
c000bb9c:	55                   	push   ebp
c000bb9d:	57                   	push   edi
c000bb9e:	56                   	push   esi
c000bb9f:	53                   	push   ebx
c000bba0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bba4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000bba8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bbac:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bbb0:	85 db                	test   ebx,ebx
c000bbb2:	7e 22                	jle    c000bbd6 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000bbb4:	c1 e3 0c             	shl    ebx,0xc
c000bbb7:	01 f3                	add    ebx,esi
c000bbb9:	56                   	push   esi
c000bbba:	81 c6 00 10 00 00    	add    esi,0x1000
c000bbc0:	55                   	push   ebp
c000bbc1:	e8 58 fe ff ff       	call   c000ba1e <VAS::getPageTableEntry(unsigned long)>
c000bbc6:	5a                   	pop    edx
c000bbc7:	59                   	pop    ecx
c000bbc8:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bbca:	21 f9                	and    ecx,edi
c000bbcc:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000bbd0:	39 f3                	cmp    ebx,esi
c000bbd2:	89 08                	mov    DWORD PTR [eax],ecx
c000bbd4:	75 e3                	jne    c000bbb9 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000bbd6:	5b                   	pop    ebx
c000bbd7:	5e                   	pop    esi
c000bbd8:	5f                   	pop    edi
c000bbd9:	5d                   	pop    ebp
c000bbda:	c3                   	ret    
c000bbdb:	90                   	nop

c000bbdc <VAS::setToWriteCombining(unsigned long, int)>:
c000bbdc:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c000bbe1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bbe7:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000bbee:	75 01                	jne    c000bbf1 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000bbf0:	c3                   	ret    
c000bbf1:	68 80 00 00 00       	push   0x80
c000bbf6:	6a ff                	push   0xffffffff
c000bbf8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbfc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc04:	e8 93 ff ff ff       	call   c000bb9c <VAS::reflagRange(unsigned long, int, int, int)>
c000bc09:	83 c4 14             	add    esp,0x14
c000bc0c:	c3                   	ret    
c000bc0d:	90                   	nop

c000bc0e <VAS::mapOtherVASIn(bool, VAS*)>:
c000bc0e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bc13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bc17:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000bc1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc1e:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000bc21:	19 c0                	sbb    eax,eax
c000bc23:	83 ca 03             	or     edx,0x3
c000bc26:	83 e0 fc             	and    eax,0xfffffffc
c000bc29:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000bc30:	0f 20 d8             	mov    eax,cr3
c000bc33:	0f 22 d8             	mov    cr3,eax
c000bc36:	c3                   	ret    
c000bc37:	90                   	nop

c000bc38 <VAS::~VAS()>:
c000bc38:	83 ec 2c             	sub    esp,0x2c
c000bc3b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bc43:	fa                   	cli    
c000bc44:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000bc49:	40                   	inc    eax
c000bc4a:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c000bc4f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bc54:	8b 00                	mov    eax,DWORD PTR [eax]
c000bc56:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bc59:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bc5f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000bc63:	6a 01                	push   0x1
c000bc65:	50                   	push   eax
c000bc66:	e8 a3 ff ff ff       	call   c000bc0e <VAS::mapOtherVASIn(bool, VAS*)>
c000bc6b:	83 c4 0c             	add    esp,0xc
c000bc6e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bc76:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000bc7e:	0f 8f d4 00 00 00    	jg     c000bd58 <VAS::~VAS()+0x120>
c000bc84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc88:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bc8b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bc8f:	c1 e2 02             	shl    edx,0x2
c000bc92:	01 d0                	add    eax,edx
c000bc94:	8b 00                	mov    eax,DWORD PTR [eax]
c000bc96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc9e:	83 e0 01             	and    eax,0x1
c000bca1:	0f 84 a8 00 00 00    	je     c000bd4f <VAS::~VAS()+0x117>
c000bca7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bcaf:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000bcb7:	7f 72                	jg     c000bd2b <VAS::~VAS()+0xf3>
c000bcb9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bcbd:	c1 e0 0a             	shl    eax,0xa
c000bcc0:	89 c2                	mov    edx,eax
c000bcc2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bcc6:	01 d0                	add    eax,edx
c000bcc8:	c1 e0 0c             	shl    eax,0xc
c000bccb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bccf:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bcd4:	8b 00                	mov    eax,DWORD PTR [eax]
c000bcd6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bcd9:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bcdf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bce3:	6a 01                	push   0x1
c000bce5:	50                   	push   eax
c000bce6:	e8 07 fd ff ff       	call   c000b9f2 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000bceb:	83 c4 0c             	add    esp,0xc
c000bcee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bcf2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bcf6:	8b 00                	mov    eax,DWORD PTR [eax]
c000bcf8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bcfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd00:	25 01 04 00 00       	and    eax,0x401
c000bd05:	3d 01 04 00 00       	cmp    eax,0x401
c000bd0a:	75 19                	jne    c000bd25 <VAS::~VAS()+0xed>
c000bd0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd10:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bd15:	83 ec 0c             	sub    esp,0xc
c000bd18:	50                   	push   eax
c000bd19:	e8 58 e0 ff ff       	call   c0009d76 <Phys::freePage(unsigned long)>
c000bd1e:	83 c4 10             	add    esp,0x10
c000bd21:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bd25:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bd29:	eb 84                	jmp    c000bcaf <VAS::~VAS()+0x77>
c000bd2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd2f:	25 00 04 00 00       	and    eax,0x400
c000bd34:	74 19                	je     c000bd4f <VAS::~VAS()+0x117>
c000bd36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd3a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bd3f:	83 ec 0c             	sub    esp,0xc
c000bd42:	50                   	push   eax
c000bd43:	e8 2e e0 ff ff       	call   c0009d76 <Phys::freePage(unsigned long)>
c000bd48:	83 c4 10             	add    esp,0x10
c000bd4b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bd4f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000bd53:	e9 1e ff ff ff       	jmp    c000bc76 <VAS::~VAS()+0x3e>
c000bd58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bd5c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bd5f:	83 ec 0c             	sub    esp,0xc
c000bd62:	50                   	push   eax
c000bd63:	e8 d5 fc ff ff       	call   c000ba3d <Virt::freeKernelVirtualPages(unsigned long)>
c000bd68:	83 c4 10             	add    esp,0x10
c000bd6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bd6f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000bd72:	83 ec 0c             	sub    esp,0xc
c000bd75:	50                   	push   eax
c000bd76:	e8 fb df ff ff       	call   c0009d76 <Phys::freePage(unsigned long)>
c000bd7b:	83 c4 10             	add    esp,0x10
c000bd7e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bd82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bd86:	c1 e0 02             	shl    eax,0x2
c000bd89:	83 ec 08             	sub    esp,0x8
c000bd8c:	50                   	push   eax
c000bd8d:	68 b4 2c 02 c0       	push   0xc0022cb4
c000bd92:	e8 48 0d 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000bd97:	83 c4 10             	add    esp,0x10
c000bd9a:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000bd9f:	48                   	dec    eax
c000bda0:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c000bda5:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000bdaa:	85 c0                	test   eax,eax
c000bdac:	75 01                	jne    c000bdaf <VAS::~VAS()+0x177>
c000bdae:	fb                   	sti    
c000bdaf:	90                   	nop
c000bdb0:	83 c4 2c             	add    esp,0x2c
c000bdb3:	c3                   	ret    

c000bdb4 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000bdb4:	55                   	push   ebp
c000bdb5:	57                   	push   edi
c000bdb6:	56                   	push   esi
c000bdb7:	53                   	push   ebx
c000bdb8:	83 ec 1c             	sub    esp,0x1c
c000bdbb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000bdbf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000bdc3:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000bdc9:	77 08                	ja     c000bdd3 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000bdcb:	0f 20 d8             	mov    eax,cr3
c000bdce:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000bdd1:	75 47                	jne    c000be1a <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000bdd3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bdd7:	09 d8                	or     eax,ebx
c000bdd9:	a9 ff 0f 00 00       	test   eax,0xfff
c000bdde:	75 57                	jne    c000be37 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000bde0:	89 de                	mov    esi,ebx
c000bde2:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bde5:	c1 ee 16             	shr    esi,0x16
c000bde8:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000bdef:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000bdf3:	74 54                	je     c000be49 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000bdf5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bdf9:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000bdff:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000be03:	c1 e6 0c             	shl    esi,0xc
c000be06:	c1 eb 0a             	shr    ebx,0xa
c000be09:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000be0f:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000be12:	83 c4 1c             	add    esp,0x1c
c000be15:	5b                   	pop    ebx
c000be16:	5e                   	pop    esi
c000be17:	5f                   	pop    edi
c000be18:	5d                   	pop    ebp
c000be19:	c3                   	ret    
c000be1a:	83 ec 0c             	sub    esp,0xc
c000be1d:	68 d4 2c 02 c0       	push   0xc0022cd4
c000be22:	e8 b8 0c 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000be27:	83 c4 10             	add    esp,0x10
c000be2a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000be2e:	09 d8                	or     eax,ebx
c000be30:	a9 ff 0f 00 00       	test   eax,0xfff
c000be35:	74 a9                	je     c000bde0 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000be37:	83 ec 0c             	sub    esp,0xc
c000be3a:	68 3c 2d 02 c0       	push   0xc0022d3c
c000be3f:	e8 5d 85 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c000be44:	83 c4 10             	add    esp,0x10
c000be47:	eb 97                	jmp    c000bde0 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000be49:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be4d:	e8 a7 df ff ff       	call   c0009df9 <Phys::allocatePage()>
c000be52:	83 ec 0c             	sub    esp,0xc
c000be55:	89 c5                	mov    ebp,eax
c000be57:	8b 0d b0 65 02 c0    	mov    ecx,DWORD PTR ds:0xc00265b0
c000be5d:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000be61:	6a 01                	push   0x1
c000be63:	e8 a5 f8 ff ff       	call   c000b70d <Virt::allocateKernelVirtualPages(int)>
c000be68:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000be6f:	6a 01                	push   0x1
c000be71:	50                   	push   eax
c000be72:	55                   	push   ebp
c000be73:	81 cd 07 04 00 00    	or     ebp,0x407
c000be79:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000be7d:	51                   	push   ecx
c000be7e:	e8 27 02 00 00       	call   c000c0aa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000be83:	83 c4 1c             	add    esp,0x1c
c000be86:	68 00 10 00 00       	push   0x1000
c000be8b:	6a 00                	push   0x0
c000be8d:	50                   	push   eax
c000be8e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be92:	e8 ed 47 ff ff       	call   c0000684 <memset>
c000be97:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000be9b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000be9e:	e8 9a fb ff ff       	call   c000ba3d <Virt::freeKernelVirtualPages(unsigned long)>
c000bea3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bea7:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000beaa:	83 c4 10             	add    esp,0x10
c000bead:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000beb0:	e9 40 ff ff ff       	jmp    c000bdf5 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c000beb5:	90                   	nop

c000beb6 <VAS::allocatePages(int, int)>:
c000beb6:	55                   	push   ebp
c000beb7:	57                   	push   edi
c000beb8:	56                   	push   esi
c000beb9:	53                   	push   ebx
c000beba:	83 ec 1c             	sub    esp,0x1c
c000bebd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000bec1:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c000bec6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000becc:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000bed2:	83 e0 01             	and    eax,0x1
c000bed5:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000bed9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000bedd:	0f 85 cc 00 00 00    	jne    c000bfaf <VAS::allocatePages(int, int)+0xf9>
c000bee3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bee6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000beea:	85 c0                	test   eax,eax
c000beec:	0f 84 a1 00 00 00    	je     c000bf93 <VAS::allocatePages(int, int)+0xdd>
c000bef2:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000bef6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000befa:	c1 e6 0c             	shl    esi,0xc
c000befd:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000bf01:	85 c0                	test   eax,eax
c000bf03:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000bf06:	7e 33                	jle    c000bf3b <VAS::allocatePages(int, int)+0x85>
c000bf08:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bf0c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bf10:	81 cd 00 04 00 00    	or     ebp,0x400
c000bf16:	e8 de de ff ff       	call   c0009df9 <Phys::allocatePage()>
c000bf1b:	55                   	push   ebp
c000bf1c:	53                   	push   ebx
c000bf1d:	50                   	push   eax
c000bf1e:	57                   	push   edi
c000bf1f:	e8 90 fe ff ff       	call   c000bdb4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bf24:	83 c4 10             	add    esp,0x10
c000bf27:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bf2c:	74 03                	je     c000bf31 <VAS::allocatePages(int, int)+0x7b>
c000bf2e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf31:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf37:	39 de                	cmp    esi,ebx
c000bf39:	75 db                	jne    c000bf16 <VAS::allocatePages(int, int)+0x60>
c000bf3b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bf40:	75 12                	jne    c000bf54 <VAS::allocatePages(int, int)+0x9e>
c000bf42:	0f 20 d8             	mov    eax,cr3
c000bf45:	0f 22 d8             	mov    cr3,eax
c000bf48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf4c:	83 c4 1c             	add    esp,0x1c
c000bf4f:	5b                   	pop    ebx
c000bf50:	5e                   	pop    esi
c000bf51:	5f                   	pop    edi
c000bf52:	5d                   	pop    ebp
c000bf53:	c3                   	ret    
c000bf54:	c1 ee 0a             	shr    esi,0xa
c000bf57:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bf5b:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000bf61:	c1 eb 0a             	shr    ebx,0xa
c000bf64:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000bf6a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bf70:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bf76:	39 c3                	cmp    ebx,eax
c000bf78:	77 ce                	ja     c000bf48 <VAS::allocatePages(int, int)+0x92>
c000bf7a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf7d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf83:	39 d8                	cmp    eax,ebx
c000bf85:	73 f3                	jae    c000bf7a <VAS::allocatePages(int, int)+0xc4>
c000bf87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf8b:	83 c4 1c             	add    esp,0x1c
c000bf8e:	5b                   	pop    ebx
c000bf8f:	5e                   	pop    esi
c000bf90:	5f                   	pop    edi
c000bf91:	5d                   	pop    ebp
c000bf92:	c3                   	ret    
c000bf93:	83 ec 0c             	sub    esp,0xc
c000bf96:	68 60 2d 02 c0       	push   0xc0022d60
c000bf9b:	e8 01 84 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bfa7:	83 c4 10             	add    esp,0x10
c000bfaa:	e9 43 ff ff ff       	jmp    c000bef2 <VAS::allocatePages(int, int)+0x3c>
c000bfaf:	83 ec 0c             	sub    esp,0xc
c000bfb2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000bfb6:	e8 52 f7 ff ff       	call   c000b70d <Virt::allocateKernelVirtualPages(int)>
c000bfbb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bfbf:	83 c4 10             	add    esp,0x10
c000bfc2:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000bfc7:	0f 87 9b 00 00 00    	ja     c000c068 <VAS::allocatePages(int, int)+0x1b2>
c000bfcd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000bfd1:	85 d2                	test   edx,edx
c000bfd3:	7e 3c                	jle    c000c011 <VAS::allocatePages(int, int)+0x15b>
c000bfd5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000bfd9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000bfdd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bfe1:	c1 e5 0c             	shl    ebp,0xc
c000bfe4:	81 ce 00 04 00 00    	or     esi,0x400
c000bfea:	01 dd                	add    ebp,ebx
c000bfec:	e8 08 de ff ff       	call   c0009df9 <Phys::allocatePage()>
c000bff1:	56                   	push   esi
c000bff2:	53                   	push   ebx
c000bff3:	50                   	push   eax
c000bff4:	57                   	push   edi
c000bff5:	e8 ba fd ff ff       	call   c000bdb4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bffa:	83 c4 10             	add    esp,0x10
c000bffd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c002:	74 03                	je     c000c007 <VAS::allocatePages(int, int)+0x151>
c000c004:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c007:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c00d:	39 dd                	cmp    ebp,ebx
c000c00f:	75 db                	jne    c000bfec <VAS::allocatePages(int, int)+0x136>
c000c011:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c016:	0f 84 26 ff ff ff    	je     c000bf42 <VAS::allocatePages(int, int)+0x8c>
c000c01c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c020:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c024:	89 d3                	mov    ebx,edx
c000c026:	c1 e0 0c             	shl    eax,0xc
c000c029:	c1 eb 0a             	shr    ebx,0xa
c000c02c:	01 d0                	add    eax,edx
c000c02e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c034:	c1 e8 0a             	shr    eax,0xa
c000c037:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c03d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c042:	2d 00 00 40 00       	sub    eax,0x400000
c000c047:	39 c3                	cmp    ebx,eax
c000c049:	0f 87 f9 fe ff ff    	ja     c000bf48 <VAS::allocatePages(int, int)+0x92>
c000c04f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c052:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c058:	39 d8                	cmp    eax,ebx
c000c05a:	73 f3                	jae    c000c04f <VAS::allocatePages(int, int)+0x199>
c000c05c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c060:	83 c4 1c             	add    esp,0x1c
c000c063:	5b                   	pop    ebx
c000c064:	5e                   	pop    esi
c000c065:	5f                   	pop    edi
c000c066:	5d                   	pop    ebp
c000c067:	c3                   	ret    
c000c068:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c000c06d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c073:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000c07a:	0f 84 4d ff ff ff    	je     c000bfcd <VAS::allocatePages(int, int)+0x117>
c000c080:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c088:	e9 40 ff ff ff       	jmp    c000bfcd <VAS::allocatePages(int, int)+0x117>
c000c08d:	90                   	nop

c000c08e <VAS::setCPUSpecific(unsigned long)>:
c000c08e:	83 ec 0c             	sub    esp,0xc
c000c091:	6a 05                	push   0x5
c000c093:	68 00 00 40 c2       	push   0xc2400000
c000c098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0a0:	e8 0f fd ff ff       	call   c000bdb4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c0a5:	83 c4 1c             	add    esp,0x1c
c000c0a8:	c3                   	ret    
c000c0a9:	90                   	nop

c000c0aa <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c0aa:	55                   	push   ebp
c000c0ab:	57                   	push   edi
c000c0ac:	56                   	push   esi
c000c0ad:	53                   	push   ebx
c000c0ae:	83 ec 1c             	sub    esp,0x1c
c000c0b1:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c000c0b6:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c0ba:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c0c0:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c0c4:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c0ca:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c0ce:	83 e0 01             	and    eax,0x1
c000c0d1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c0d5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c0d9:	85 c0                	test   eax,eax
c000c0db:	7e 39                	jle    c000c116 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c0dd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c0e1:	89 f3                	mov    ebx,esi
c000c0e3:	c1 e0 0c             	shl    eax,0xc
c000c0e6:	01 f0                	add    eax,esi
c000c0e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c0ec:	55                   	push   ebp
c000c0ed:	53                   	push   ebx
c000c0ee:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c0f2:	29 f0                	sub    eax,esi
c000c0f4:	01 d8                	add    eax,ebx
c000c0f6:	50                   	push   eax
c000c0f7:	57                   	push   edi
c000c0f8:	e8 b7 fc ff ff       	call   c000bdb4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c0fd:	83 c4 10             	add    esp,0x10
c000c100:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c105:	74 03                	je     c000c10a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c107:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c10a:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c110:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c114:	75 d6                	jne    c000c0ec <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c116:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c11b:	75 10                	jne    c000c12d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c11d:	0f 20 d8             	mov    eax,cr3
c000c120:	0f 22 d8             	mov    cr3,eax
c000c123:	83 c4 1c             	add    esp,0x1c
c000c126:	89 f0                	mov    eax,esi
c000c128:	5b                   	pop    ebx
c000c129:	5e                   	pop    esi
c000c12a:	5f                   	pop    edi
c000c12b:	5d                   	pop    ebp
c000c12c:	c3                   	ret    
c000c12d:	89 f3                	mov    ebx,esi
c000c12f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c133:	c1 eb 0a             	shr    ebx,0xa
c000c136:	c1 e0 0c             	shl    eax,0xc
c000c139:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c13f:	01 f0                	add    eax,esi
c000c141:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c147:	c1 e8 0a             	shr    eax,0xa
c000c14a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c14f:	2d 00 00 40 00       	sub    eax,0x400000
c000c154:	39 c3                	cmp    ebx,eax
c000c156:	77 cb                	ja     c000c123 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c158:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c15b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c161:	39 d8                	cmp    eax,ebx
c000c163:	73 f3                	jae    c000c158 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c165:	83 c4 1c             	add    esp,0x1c
c000c168:	89 f0                	mov    eax,esi
c000c16a:	5b                   	pop    ebx
c000c16b:	5e                   	pop    esi
c000c16c:	5f                   	pop    edi
c000c16d:	5d                   	pop    ebp
c000c16e:	c3                   	ret    
c000c16f:	90                   	nop

c000c170 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c170:	55                   	push   ebp
c000c171:	57                   	push   edi
c000c172:	56                   	push   esi
c000c173:	53                   	push   ebx
c000c174:	83 ec 1c             	sub    esp,0x1c
c000c177:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c17b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c17f:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c183:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c187:	a9 ff 0f 00 00       	test   eax,0xfff
c000c18c:	75 4a                	jne    c000c1d8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c18e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c192:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c195:	c1 eb 16             	shr    ebx,0x16
c000c198:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c19f:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c1a3:	74 4d                	je     c000c1f2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c1a5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1a9:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c1ad:	c1 e8 0a             	shr    eax,0xa
c000c1b0:	80 fa 01             	cmp    dl,0x1
c000c1b3:	19 d2                	sbb    edx,edx
c000c1b5:	c1 e3 0c             	shl    ebx,0xc
c000c1b8:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c1bc:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c1c2:	25 fc 0f 00 00       	and    eax,0xffc
c000c1c7:	01 d8                	add    eax,ebx
c000c1c9:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c1d0:	83 c4 1c             	add    esp,0x1c
c000c1d3:	5b                   	pop    ebx
c000c1d4:	5e                   	pop    esi
c000c1d5:	5f                   	pop    edi
c000c1d6:	5d                   	pop    ebp
c000c1d7:	c3                   	ret    
c000c1d8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c1dc:	83 ec 0c             	sub    esp,0xc
c000c1df:	68 8c 2d 02 c0       	push   0xc0022d8c
c000c1e4:	e8 b8 81 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c000c1e9:	83 c4 10             	add    esp,0x10
c000c1ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c1f0:	eb 9c                	jmp    c000c18e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c1f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1f6:	e8 fe db ff ff       	call   c0009df9 <Phys::allocatePage()>
c000c1fb:	83 ec 0c             	sub    esp,0xc
c000c1fe:	89 c5                	mov    ebp,eax
c000c200:	8b 0d b0 65 02 c0    	mov    ecx,DWORD PTR ds:0xc00265b0
c000c206:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c20a:	6a 01                	push   0x1
c000c20c:	e8 fc f4 ff ff       	call   c000b70d <Virt::allocateKernelVirtualPages(int)>
c000c211:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c218:	6a 01                	push   0x1
c000c21a:	50                   	push   eax
c000c21b:	55                   	push   ebp
c000c21c:	81 cd 07 04 00 00    	or     ebp,0x407
c000c222:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c226:	51                   	push   ecx
c000c227:	e8 7e fe ff ff       	call   c000c0aa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c22c:	83 c4 1c             	add    esp,0x1c
c000c22f:	68 00 10 00 00       	push   0x1000
c000c234:	6a 00                	push   0x0
c000c236:	50                   	push   eax
c000c237:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c23b:	e8 44 44 ff ff       	call   c0000684 <memset>
c000c240:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c244:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c247:	e8 f1 f7 ff ff       	call   c000ba3d <Virt::freeKernelVirtualPages(unsigned long)>
c000c24c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c255:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c259:	e9 47 ff ff ff       	jmp    c000c1a5 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c25e <VAS::VAS(bool)>:
c000c25e:	53                   	push   ebx
c000c25f:	83 ec 28             	sub    esp,0x28
c000c262:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c266:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c26a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c26e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c275:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c279:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c280:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c284:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c288:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c28b:	e8 69 db ff ff       	call   c0009df9 <Phys::allocatePage()>
c000c290:	89 c2                	mov    edx,eax
c000c292:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c296:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c299:	8b 1d b0 65 02 c0    	mov    ebx,DWORD PTR ds:0xc00265b0
c000c29f:	83 ec 0c             	sub    esp,0xc
c000c2a2:	6a 01                	push   0x1
c000c2a4:	e8 64 f4 ff ff       	call   c000b70d <Virt::allocateKernelVirtualPages(int)>
c000c2a9:	83 c4 10             	add    esp,0x10
c000c2ac:	89 c2                	mov    edx,eax
c000c2ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c2b2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c2b5:	83 ec 0c             	sub    esp,0xc
c000c2b8:	6a 03                	push   0x3
c000c2ba:	6a 01                	push   0x1
c000c2bc:	52                   	push   edx
c000c2bd:	50                   	push   eax
c000c2be:	53                   	push   ebx
c000c2bf:	e8 e6 fd ff ff       	call   c000c0aa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c2c4:	83 c4 20             	add    esp,0x20
c000c2c7:	89 c2                	mov    edx,eax
c000c2c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c2cd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c2d0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c2d8:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c2e0:	7f 1c                	jg     c000c2fe <VAS::VAS(bool)+0xa0>
c000c2e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c2e6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c2e9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c2ed:	c1 e2 02             	shl    edx,0x2
c000c2f0:	01 d0                	add    eax,edx
c000c2f2:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c2f8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c2fc:	eb da                	jmp    c000c2d8 <VAS::VAS(bool)+0x7a>
c000c2fe:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c306:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c30e:	7f 7a                	jg     c000c38a <VAS::VAS(bool)+0x12c>
c000c310:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c314:	2d 00 02 00 00       	sub    eax,0x200
c000c319:	c1 e0 0c             	shl    eax,0xc
c000c31c:	83 c8 03             	or     eax,0x3
c000c31f:	89 c2                	mov    edx,eax
c000c321:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c000c326:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c32c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c332:	83 e0 10             	and    eax,0x10
c000c335:	84 c0                	test   al,al
c000c337:	74 07                	je     c000c340 <VAS::VAS(bool)+0xe2>
c000c339:	b8 00 01 00 00       	mov    eax,0x100
c000c33e:	eb 05                	jmp    c000c345 <VAS::VAS(bool)+0xe7>
c000c340:	b8 00 00 00 00       	mov    eax,0x0
c000c345:	09 d0                	or     eax,edx
c000c347:	89 c1                	mov    ecx,eax
c000c349:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c34d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c350:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c354:	c1 e2 02             	shl    edx,0x2
c000c357:	01 d0                	add    eax,edx
c000c359:	89 ca                	mov    edx,ecx
c000c35b:	89 10                	mov    DWORD PTR [eax],edx
c000c35d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c361:	2d 40 03 00 00       	sub    eax,0x340
c000c366:	83 f8 7f             	cmp    eax,0x7f
c000c369:	77 16                	ja     c000c381 <VAS::VAS(bool)+0x123>
c000c36b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c36f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c372:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c376:	c1 e2 02             	shl    edx,0x2
c000c379:	01 d0                	add    eax,edx
c000c37b:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c381:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c385:	e9 7c ff ff ff       	jmp    c000c306 <VAS::VAS(bool)+0xa8>
c000c38a:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c000c38f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c395:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c39b:	83 e0 10             	and    eax,0x10
c000c39e:	84 c0                	test   al,al
c000c3a0:	74 07                	je     c000c3a9 <VAS::VAS(bool)+0x14b>
c000c3a2:	b8 03 41 00 00       	mov    eax,0x4103
c000c3a7:	eb 05                	jmp    c000c3ae <VAS::VAS(bool)+0x150>
c000c3a9:	b8 03 40 00 00       	mov    eax,0x4003
c000c3ae:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c3b2:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c3b5:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c3bb:	89 02                	mov    DWORD PTR [edx],eax
c000c3bd:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c000c3c2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c3c8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c3ce:	83 ec 08             	sub    esp,0x8
c000c3d1:	50                   	push   eax
c000c3d2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3d6:	e8 b3 fc ff ff       	call   c000c08e <VAS::setCPUSpecific(unsigned long)>
c000c3db:	83 c4 10             	add    esp,0x10
c000c3de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c3e2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c3e5:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c000c3ea:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c3f0:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c3f6:	83 e0 10             	and    eax,0x10
c000c3f9:	84 c0                	test   al,al
c000c3fb:	74 07                	je     c000c404 <VAS::VAS(bool)+0x1a6>
c000c3fd:	b8 00 01 00 00       	mov    eax,0x100
c000c402:	eb 05                	jmp    c000c409 <VAS::VAS(bool)+0x1ab>
c000c404:	b8 00 00 00 00       	mov    eax,0x0
c000c409:	09 c2                	or     edx,eax
c000c40b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c40f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c412:	05 fc 0f 00 00       	add    eax,0xffc
c000c417:	83 ca 03             	or     edx,0x3
c000c41a:	89 10                	mov    DWORD PTR [eax],edx
c000c41c:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c000c421:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c427:	83 ec 0c             	sub    esp,0xc
c000c42a:	50                   	push   eax
c000c42b:	e8 f6 1d 00 00       	call   c000e226 <Device::getName()>
c000c430:	83 c4 10             	add    esp,0x10
c000c433:	83 ec 08             	sub    esp,0x8
c000c436:	68 60 2e 02 c0       	push   0xc0022e60
c000c43b:	50                   	push   eax
c000c43c:	e8 8b 43 ff ff       	call   c00007cc <strcmp>
c000c441:	83 c4 10             	add    esp,0x10
c000c444:	85 c0                	test   eax,eax
c000c446:	0f 94 c0             	sete   al
c000c449:	84 c0                	test   al,al
c000c44b:	0f 84 87 00 00 00    	je     c000c4d8 <VAS::VAS(bool)+0x27a>
c000c451:	fa                   	cli    
c000c452:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000c457:	40                   	inc    eax
c000c458:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c000c45d:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c000c462:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c468:	05 7c 09 00 00       	add    eax,0x97c
c000c46d:	83 ec 0c             	sub    esp,0xc
c000c470:	50                   	push   eax
c000c471:	e8 3c d0 ff ff       	call   c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c476:	83 c4 10             	add    esp,0x10
c000c479:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c47e:	89 c3                	mov    ebx,eax
c000c480:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c000c485:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c48b:	05 7c 09 00 00       	add    eax,0x97c
c000c490:	83 ec 0c             	sub    esp,0xc
c000c493:	50                   	push   eax
c000c494:	e8 19 d0 ff ff       	call   c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c499:	83 c4 10             	add    esp,0x10
c000c49c:	83 ec 08             	sub    esp,0x8
c000c49f:	50                   	push   eax
c000c4a0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4a4:	e8 75 f5 ff ff       	call   c000ba1e <VAS::getPageTableEntry(unsigned long)>
c000c4a9:	83 c4 10             	add    esp,0x10
c000c4ac:	8b 00                	mov    eax,DWORD PTR [eax]
c000c4ae:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c4b3:	6a 11                	push   0x11
c000c4b5:	53                   	push   ebx
c000c4b6:	50                   	push   eax
c000c4b7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4bb:	e8 f4 f8 ff ff       	call   c000bdb4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c4c0:	83 c4 10             	add    esp,0x10
c000c4c3:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000c4c8:	48                   	dec    eax
c000c4c9:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c000c4ce:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000c4d3:	85 c0                	test   eax,eax
c000c4d5:	75 01                	jne    c000c4d8 <VAS::VAS(bool)+0x27a>
c000c4d7:	fb                   	sti    
c000c4d8:	90                   	nop
c000c4d9:	83 c4 28             	add    esp,0x28
c000c4dc:	5b                   	pop    ebx
c000c4dd:	c3                   	ret    

c000c4de <VAS::evict(unsigned long)>:
c000c4de:	55                   	push   ebp
c000c4df:	57                   	push   edi
c000c4e0:	56                   	push   esi
c000c4e1:	53                   	push   ebx
c000c4e2:	83 ec 28             	sub    esp,0x28
c000c4e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c4e9:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c4ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4f1:	68 6e 2e 02 c0       	push   0xc0022e6e
c000c4f6:	e8 e4 05 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000c4fb:	e8 4e f3 ff ff       	call   c000b84e <Virt::allocateSwapfilePage()>
c000c500:	5a                   	pop    edx
c000c501:	89 c7                	mov    edi,eax
c000c503:	59                   	pop    ecx
c000c504:	50                   	push   eax
c000c505:	68 8b 2e 02 c0       	push   0xc0022e8b
c000c50a:	e8 d0 05 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000c50f:	83 c4 10             	add    esp,0x10
c000c512:	8b 1d cc 58 02 c0    	mov    ebx,DWORD PTR ds:0xc00258cc
c000c518:	85 db                	test   ebx,ebx
c000c51a:	7e 3d                	jle    c000c559 <VAS::evict(unsigned long)+0x7b>
c000c51c:	89 ee                	mov    esi,ebp
c000c51e:	31 db                	xor    ebx,ebx
c000c520:	83 ec 0c             	sub    esp,0xc
c000c523:	57                   	push   edi
c000c524:	e8 13 f3 ff ff       	call   c000b83c <Virt::swapIDToSector(unsigned long)>
c000c529:	89 34 24             	mov    DWORD PTR [esp],esi
c000c52c:	01 d8                	add    eax,ebx
c000c52e:	6a 01                	push   0x1
c000c530:	31 d2                	xor    edx,edx
c000c532:	43                   	inc    ebx
c000c533:	52                   	push   edx
c000c534:	81 c6 00 02 00 00    	add    esi,0x200
c000c53a:	50                   	push   eax
c000c53b:	0f be 05 d8 58 02 c0 	movsx  eax,BYTE PTR ds:0xc00258d8
c000c542:	ff 34 85 3c 69 02 c0 	push   DWORD PTR [eax*4-0x3ffd96c4]
c000c549:	e8 1a 3d 00 00       	call   c0010268 <LogicalDisk::write(unsigned long long, int, void*)>
c000c54e:	83 c4 20             	add    esp,0x20
c000c551:	39 1d cc 58 02 c0    	cmp    DWORD PTR ds:0xc00258cc,ebx
c000c557:	7f c7                	jg     c000c520 <VAS::evict(unsigned long)+0x42>
c000c559:	83 ec 08             	sub    esp,0x8
c000c55c:	c1 e7 0b             	shl    edi,0xb
c000c55f:	55                   	push   ebp
c000c560:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c564:	e8 b5 f4 ff ff       	call   c000ba1e <VAS::getPageTableEntry(unsigned long)>
c000c569:	5a                   	pop    edx
c000c56a:	89 c6                	mov    esi,eax
c000c56c:	59                   	pop    ecx
c000c56d:	ff 30                	push   DWORD PTR [eax]
c000c56f:	68 9b 2e 02 c0       	push   0xc0022e9b
c000c574:	e8 66 05 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000c579:	8b 16                	mov    edx,DWORD PTR [esi]
c000c57b:	89 d3                	mov    ebx,edx
c000c57d:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000c583:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c589:	09 d7                	or     edi,edx
c000c58b:	89 3e                	mov    DWORD PTR [esi],edi
c000c58d:	5e                   	pop    esi
c000c58e:	58                   	pop    eax
c000c58f:	57                   	push   edi
c000c590:	68 b4 2e 02 c0       	push   0xc0022eb4
c000c595:	e8 45 05 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000c59a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c59d:	ff 05 a8 65 02 c0    	inc    DWORD PTR ds:0xc00265a8
c000c5a3:	e8 ce d7 ff ff       	call   c0009d76 <Phys::freePage(unsigned long)>
c000c5a8:	0f 20 d8             	mov    eax,cr3
c000c5ab:	0f 22 d8             	mov    cr3,eax
c000c5ae:	ff 35 a8 65 02 c0    	push   DWORD PTR ds:0xc00265a8
c000c5b4:	55                   	push   ebp
c000c5b5:	53                   	push   ebx
c000c5b6:	68 b0 2d 02 c0       	push   0xc0022db0
c000c5bb:	e8 1f 05 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000c5c0:	a1 a4 65 02 c0       	mov    eax,ds:0xc00265a4
c000c5c5:	c7 44 24 50 cd 2e 02 c0 	mov    DWORD PTR [esp+0x50],0xc0022ecd
c000c5cd:	8d 50 01             	lea    edx,[eax+0x1]
c000c5d0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000c5d4:	89 15 a4 65 02 c0    	mov    DWORD PTR ds:0xc00265a4,edx
c000c5da:	83 c4 3c             	add    esp,0x3c
c000c5dd:	5b                   	pop    ebx
c000c5de:	5e                   	pop    esi
c000c5df:	5f                   	pop    edi
c000c5e0:	5d                   	pop    ebp
c000c5e1:	e9 f9 04 00 00       	jmp    c000cadf <Dbg::kprintf(char const*, ...)>

c000c5e6 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000c5e6:	55                   	push   ebp
c000c5e7:	57                   	push   edi
c000c5e8:	56                   	push   esi
c000c5e9:	53                   	push   ebx
c000c5ea:	83 ec 24             	sub    esp,0x24
c000c5ed:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c5f1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c5f5:	68 de 2e 02 c0       	push   0xc0022ede
c000c5fa:	e8 e0 04 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000c5ff:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000c603:	58                   	pop    eax
c000c604:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000c60a:	5a                   	pop    edx
c000c60b:	57                   	push   edi
c000c60c:	53                   	push   ebx
c000c60d:	e8 0c f4 ff ff       	call   c000ba1e <VAS::getPageTableEntry(unsigned long)>
c000c612:	59                   	pop    ecx
c000c613:	5e                   	pop    esi
c000c614:	89 c6                	mov    esi,eax
c000c616:	ff 30                	push   DWORD PTR [eax]
c000c618:	68 f1 2e 02 c0       	push   0xc0022ef1
c000c61d:	e8 bd 04 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000c622:	83 c4 10             	add    esp,0x10
c000c625:	85 ff                	test   edi,edi
c000c627:	74 0a                	je     c000c633 <VAS::tryLoadBackOffDisk(unsigned long)+0x4d>
c000c629:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000c62b:	f7 c5 01 00 00 00    	test   ebp,0x1
c000c631:	74 0a                	je     c000c63d <VAS::tryLoadBackOffDisk(unsigned long)+0x57>
c000c633:	83 c4 1c             	add    esp,0x1c
c000c636:	31 c0                	xor    eax,eax
c000c638:	5b                   	pop    ebx
c000c639:	5e                   	pop    esi
c000c63a:	5f                   	pop    edi
c000c63b:	5d                   	pop    ebp
c000c63c:	c3                   	ret    
c000c63d:	83 ec 08             	sub    esp,0x8
c000c640:	c1 ed 0b             	shr    ebp,0xb
c000c643:	55                   	push   ebp
c000c644:	68 ff 2e 02 c0       	push   0xc0022eff
c000c649:	e8 91 04 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000c64e:	e8 a6 d7 ff ff       	call   c0009df9 <Phys::allocatePage()>
c000c653:	59                   	pop    ecx
c000c654:	5a                   	pop    edx
c000c655:	50                   	push   eax
c000c656:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c65a:	68 0a 2f 02 c0       	push   0xc0022f0a
c000c65f:	e8 7b 04 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000c664:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c668:	8b 16                	mov    edx,DWORD PTR [esi]
c000c66a:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000c670:	09 d0                	or     eax,edx
c000c672:	0d 01 08 00 00       	or     eax,0x801
c000c677:	89 06                	mov    DWORD PTR [esi],eax
c000c679:	59                   	pop    ecx
c000c67a:	5e                   	pop    esi
c000c67b:	50                   	push   eax
c000c67c:	68 1f 2f 02 c0       	push   0xc0022f1f
c000c681:	e8 59 04 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000c686:	0f 20 d8             	mov    eax,cr3
c000c689:	83 c4 0c             	add    esp,0xc
c000c68c:	53                   	push   ebx
c000c68d:	50                   	push   eax
c000c68e:	68 37 2f 02 c0       	push   0xc0022f37
c000c693:	e8 47 04 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000c698:	c7 04 24 4f 2f 02 c0 	mov    DWORD PTR [esp],0xc0022f4f
c000c69f:	e8 3b 04 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000c6a4:	83 c4 10             	add    esp,0x10
c000c6a7:	a1 cc 58 02 c0       	mov    eax,ds:0xc00258cc
c000c6ac:	85 c0                	test   eax,eax
c000c6ae:	7e 3d                	jle    c000c6ed <VAS::tryLoadBackOffDisk(unsigned long)+0x107>
c000c6b0:	89 fe                	mov    esi,edi
c000c6b2:	31 db                	xor    ebx,ebx
c000c6b4:	83 ec 0c             	sub    esp,0xc
c000c6b7:	55                   	push   ebp
c000c6b8:	e8 7f f1 ff ff       	call   c000b83c <Virt::swapIDToSector(unsigned long)>
c000c6bd:	89 34 24             	mov    DWORD PTR [esp],esi
c000c6c0:	01 d8                	add    eax,ebx
c000c6c2:	6a 01                	push   0x1
c000c6c4:	31 d2                	xor    edx,edx
c000c6c6:	43                   	inc    ebx
c000c6c7:	52                   	push   edx
c000c6c8:	81 c6 00 02 00 00    	add    esi,0x200
c000c6ce:	50                   	push   eax
c000c6cf:	0f be 05 d8 58 02 c0 	movsx  eax,BYTE PTR ds:0xc00258d8
c000c6d6:	ff 34 85 3c 69 02 c0 	push   DWORD PTR [eax*4-0x3ffd96c4]
c000c6dd:	e8 1a 3b 00 00       	call   c00101fc <LogicalDisk::read(unsigned long long, int, void*)>
c000c6e2:	83 c4 20             	add    esp,0x20
c000c6e5:	39 1d cc 58 02 c0    	cmp    DWORD PTR ds:0xc00258cc,ebx
c000c6eb:	7f c7                	jg     c000c6b4 <VAS::tryLoadBackOffDisk(unsigned long)+0xce>
c000c6ed:	a1 a8 65 02 c0       	mov    eax,ds:0xc00265a8
c000c6f2:	48                   	dec    eax
c000c6f3:	52                   	push   edx
c000c6f4:	a3 a8 65 02 c0       	mov    ds:0xc00265a8,eax
c000c6f9:	50                   	push   eax
c000c6fa:	57                   	push   edi
c000c6fb:	68 5f 2f 02 c0       	push   0xc0022f5f
c000c700:	e8 da 03 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000c705:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000c708:	e8 11 f1 ff ff       	call   c000b81e <Virt::freeSwapfilePage(unsigned long)>
c000c70d:	c7 04 24 74 2f 02 c0 	mov    DWORD PTR [esp],0xc0022f74
c000c714:	e8 c6 03 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000c719:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000c71e:	83 c4 10             	add    esp,0x10
c000c721:	48                   	dec    eax
c000c722:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c000c727:	85 c0                	test   eax,eax
c000c729:	75 01                	jne    c000c72c <VAS::tryLoadBackOffDisk(unsigned long)+0x146>
c000c72b:	fb                   	sti    
c000c72c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c730:	25 ff 0f 00 00       	and    eax,0xfff
c000c735:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000c73a:	77 20                	ja     c000c75c <VAS::tryLoadBackOffDisk(unsigned long)+0x176>
c000c73c:	0f 20 d8             	mov    eax,cr3
c000c73f:	0f 22 d8             	mov    cr3,eax
c000c742:	83 ec 0c             	sub    esp,0xc
c000c745:	68 9a 2f 02 c0       	push   0xc0022f9a
c000c74a:	e8 90 03 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000c74f:	83 c4 10             	add    esp,0x10
c000c752:	b0 01                	mov    al,0x1
c000c754:	83 c4 1c             	add    esp,0x1c
c000c757:	5b                   	pop    ebx
c000c758:	5e                   	pop    esi
c000c759:	5f                   	pop    edi
c000c75a:	5d                   	pop    ebp
c000c75b:	c3                   	ret    
c000c75c:	83 ec 0c             	sub    esp,0xc
c000c75f:	68 8a 2f 02 c0       	push   0xc0022f8a
c000c764:	e8 76 03 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000c769:	83 c4 10             	add    esp,0x10
c000c76c:	eb ce                	jmp    c000c73c <VAS::tryLoadBackOffDisk(unsigned long)+0x156>

c000c76e <VAS::scanForEviction()>:
c000c76e:	57                   	push   edi
c000c76f:	31 ff                	xor    edi,edi
c000c771:	56                   	push   esi
c000c772:	53                   	push   ebx
c000c773:	83 ec 10             	sub    esp,0x10
c000c776:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c77a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c77d:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c783:	75 0e                	jne    c000c793 <VAS::scanForEviction()+0x25>
c000c785:	89 da                	mov    edx,ebx
c000c787:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c78a:	c1 ea 16             	shr    edx,0x16
c000c78d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c791:	74 4e                	je     c000c7e1 <VAS::scanForEviction()+0x73>
c000c793:	53                   	push   ebx
c000c794:	56                   	push   esi
c000c795:	e8 84 f2 ff ff       	call   c000ba1e <VAS::getPageTableEntry(unsigned long)>
c000c79a:	5a                   	pop    edx
c000c79b:	8b 10                	mov    edx,DWORD PTR [eax]
c000c79d:	59                   	pop    ecx
c000c79e:	89 d1                	mov    ecx,edx
c000c7a0:	81 e1 01 08 00 00    	and    ecx,0x801
c000c7a6:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000c7ac:	74 3e                	je     c000c7ec <VAS::scanForEviction()+0x7e>
c000c7ae:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c7b4:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000c7ba:	76 2b                	jbe    c000c7e7 <VAS::scanForEviction()+0x79>
c000c7bc:	47                   	inc    edi
c000c7bd:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000c7c4:	83 ff 03             	cmp    edi,0x3
c000c7c7:	74 32                	je     c000c7fb <VAS::scanForEviction()+0x8d>
c000c7c9:	31 db                	xor    ebx,ebx
c000c7cb:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c7d1:	75 c0                	jne    c000c793 <VAS::scanForEviction()+0x25>
c000c7d3:	89 da                	mov    edx,ebx
c000c7d5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7d8:	c1 ea 16             	shr    edx,0x16
c000c7db:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c7df:	75 b2                	jne    c000c793 <VAS::scanForEviction()+0x25>
c000c7e1:	81 c3 00 00 40 00    	add    ebx,0x400000
c000c7e7:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000c7ea:	eb 91                	jmp    c000c77d <VAS::scanForEviction()+0xf>
c000c7ec:	f6 c2 20             	test   dl,0x20
c000c7ef:	74 13                	je     c000c804 <VAS::scanForEviction()+0x96>
c000c7f1:	83 e2 df             	and    edx,0xffffffdf
c000c7f4:	89 10                	mov    DWORD PTR [eax],edx
c000c7f6:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c7f9:	eb b3                	jmp    c000c7ae <VAS::scanForEviction()+0x40>
c000c7fb:	83 c4 10             	add    esp,0x10
c000c7fe:	31 c0                	xor    eax,eax
c000c800:	5b                   	pop    ebx
c000c801:	5e                   	pop    esi
c000c802:	5f                   	pop    edi
c000c803:	c3                   	ret    
c000c804:	83 ec 08             	sub    esp,0x8
c000c807:	89 d0                	mov    eax,edx
c000c809:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c80e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c812:	53                   	push   ebx
c000c813:	68 a8 2f 02 c0       	push   0xc0022fa8
c000c818:	e8 c2 02 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000c81d:	58                   	pop    eax
c000c81e:	5a                   	pop    edx
c000c81f:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c822:	56                   	push   esi
c000c823:	e8 b6 fc ff ff       	call   c000c4de <VAS::evict(unsigned long)>
c000c828:	59                   	pop    ecx
c000c829:	5b                   	pop    ebx
c000c82a:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c82d:	68 bc 2f 02 c0       	push   0xc0022fbc
c000c832:	e8 a8 02 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000c837:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000c83e:	83 c4 10             	add    esp,0x10
c000c841:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c845:	83 c4 10             	add    esp,0x10
c000c848:	5b                   	pop    ebx
c000c849:	5e                   	pop    esi
c000c84a:	5f                   	pop    edi
c000c84b:	c3                   	ret    

c000c84c <mapVASFirstTime>:
c000c84c:	55                   	push   ebp
c000c84d:	57                   	push   edi
c000c84e:	56                   	push   esi
c000c84f:	53                   	push   ebx
c000c850:	83 ec 0c             	sub    esp,0xc
c000c853:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000c858:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000c85b:	4a                   	dec    edx
c000c85c:	0f 84 fe 00 00 00    	je     c000c960 <mapVASFirstTime+0x114>
c000c862:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000c865:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000c868:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000c86d:	c1 e5 15             	shl    ebp,0x15
c000c870:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000c875:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000c87b:	29 eb                	sub    ebx,ebp
c000c87d:	29 ef                	sub    edi,ebp
c000c87f:	83 ec 08             	sub    esp,0x8
c000c882:	53                   	push   ebx
c000c883:	68 e8 2f 02 c0       	push   0xc0022fe8
c000c888:	e8 52 02 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000c88d:	e8 67 d5 ff ff       	call   c0009df9 <Phys::allocatePage()>
c000c892:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000c899:	6a 01                	push   0x1
c000c89b:	53                   	push   ebx
c000c89c:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000c8a2:	50                   	push   eax
c000c8a3:	56                   	push   esi
c000c8a4:	e8 01 f8 ff ff       	call   c000c0aa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c8a9:	83 c4 20             	add    esp,0x20
c000c8ac:	39 fb                	cmp    ebx,edi
c000c8ae:	75 cf                	jne    c000c87f <mapVASFirstTime+0x33>
c000c8b0:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000c8b5:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000c8ba:	29 eb                	sub    ebx,ebp
c000c8bc:	29 ef                	sub    edi,ebp
c000c8be:	83 ec 08             	sub    esp,0x8
c000c8c1:	53                   	push   ebx
c000c8c2:	68 04 30 02 c0       	push   0xc0023004
c000c8c7:	e8 13 02 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000c8cc:	58                   	pop    eax
c000c8cd:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000c8d1:	5a                   	pop    edx
c000c8d2:	19 c0                	sbb    eax,eax
c000c8d4:	83 e0 04             	and    eax,0x4
c000c8d7:	05 03 04 00 00       	add    eax,0x403
c000c8dc:	50                   	push   eax
c000c8dd:	68 29 2f 02 c0       	push   0xc0022f29
c000c8e2:	e8 f8 01 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000c8e7:	e8 0d d5 ff ff       	call   c0009df9 <Phys::allocatePage()>
c000c8ec:	59                   	pop    ecx
c000c8ed:	89 c5                	mov    ebp,eax
c000c8ef:	58                   	pop    eax
c000c8f0:	55                   	push   ebp
c000c8f1:	68 18 30 02 c0       	push   0xc0023018
c000c8f6:	e8 e4 01 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000c8fb:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000c8ff:	19 d2                	sbb    edx,edx
c000c901:	83 e2 04             	and    edx,0x4
c000c904:	81 c2 03 04 00 00    	add    edx,0x403
c000c90a:	89 14 24             	mov    DWORD PTR [esp],edx
c000c90d:	6a 01                	push   0x1
c000c90f:	53                   	push   ebx
c000c910:	55                   	push   ebp
c000c911:	56                   	push   esi
c000c912:	e8 93 f7 ff ff       	call   c000c0aa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c917:	83 c4 18             	add    esp,0x18
c000c91a:	53                   	push   ebx
c000c91b:	56                   	push   esi
c000c91c:	e8 fd f0 ff ff       	call   c000ba1e <VAS::getPageTableEntry(unsigned long)>
c000c921:	5a                   	pop    edx
c000c922:	59                   	pop    ecx
c000c923:	ff 30                	push   DWORD PTR [eax]
c000c925:	68 34 30 02 c0       	push   0xc0023034
c000c92a:	e8 b0 01 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000c92f:	0f 20 d8             	mov    eax,cr3
c000c932:	83 c4 0c             	add    esp,0xc
c000c935:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000c93b:	56                   	push   esi
c000c93c:	50                   	push   eax
c000c93d:	68 37 2f 02 c0       	push   0xc0022f37
c000c942:	e8 98 01 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000c947:	83 c4 10             	add    esp,0x10
c000c94a:	39 df                	cmp    edi,ebx
c000c94c:	0f 85 6c ff ff ff    	jne    c000c8be <mapVASFirstTime+0x72>
c000c952:	0f 20 d8             	mov    eax,cr3
c000c955:	0f 22 d8             	mov    cr3,eax
c000c958:	83 c4 0c             	add    esp,0xc
c000c95b:	5b                   	pop    ebx
c000c95c:	5e                   	pop    esi
c000c95d:	5f                   	pop    edi
c000c95e:	5d                   	pop    ebp
c000c95f:	c3                   	ret    
c000c960:	83 ec 0c             	sub    esp,0xc
c000c963:	68 cf 2f 02 c0       	push   0xc0022fcf
c000c968:	e8 72 01 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000c96d:	83 c4 10             	add    esp,0x10
c000c970:	83 c4 0c             	add    esp,0xc
c000c973:	5b                   	pop    ebx
c000c974:	5e                   	pop    esi
c000c975:	5f                   	pop    edi
c000c976:	5d                   	pop    ebp
c000c977:	c3                   	ret    

c000c978 <__cxa_atexit>:
c000c978:	31 c0                	xor    eax,eax
c000c97a:	c3                   	ret    

c000c97b <__cxa_finalize>:
c000c97b:	c3                   	ret    

c000c97c <__stack_chk_fail>:
c000c97c:	55                   	push   ebp
c000c97d:	89 e5                	mov    ebp,esp
c000c97f:	83 ec 14             	sub    esp,0x14
c000c982:	68 3f 30 02 c0       	push   0xc002303f
c000c987:	e8 53 01 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000c98c:	58                   	pop    eax
c000c98d:	5a                   	pop    edx
c000c98e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c991:	68 8f 30 02 c0       	push   0xc002308f
c000c996:	e8 44 01 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000c99b:	59                   	pop    ecx
c000c99c:	58                   	pop    eax
c000c99d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c9a0:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c9a3:	68 8f 30 02 c0       	push   0xc002308f
c000c9a8:	e8 32 01 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000c9ad:	5a                   	pop    edx
c000c9ae:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c9b1:	59                   	pop    ecx
c000c9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000c9b4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c9b7:	68 8f 30 02 c0       	push   0xc002308f
c000c9bc:	e8 1e 01 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000c9c1:	5a                   	pop    edx
c000c9c2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c9c5:	59                   	pop    ecx
c000c9c6:	8b 00                	mov    eax,DWORD PTR [eax]
c000c9c8:	8b 00                	mov    eax,DWORD PTR [eax]
c000c9ca:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c9cd:	68 8f 30 02 c0       	push   0xc002308f
c000c9d2:	e8 08 01 00 00       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000c9d7:	c7 04 24 97 30 02 c0 	mov    DWORD PTR [esp],0xc0023097
c000c9de:	e8 be 79 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c000c9e3:	83 c4 10             	add    esp,0x10
c000c9e6:	c9                   	leave  
c000c9e7:	c3                   	ret    

c000c9e8 <__cxa_pure_virtual>:
c000c9e8:	83 ec 18             	sub    esp,0x18
c000c9eb:	68 af 30 02 c0       	push   0xc00230af
c000c9f0:	e8 ac 79 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c000c9f5:	83 c4 1c             	add    esp,0x1c
c000c9f8:	c3                   	ret    

c000c9f9 <operator new[](unsigned long)>:
c000c9f9:	e9 c5 cf ff ff       	jmp    c00099c3 <malloc>

c000c9fe <operator delete(void*, unsigned long)>:
c000c9fe:	e9 e0 cf ff ff       	jmp    c00099e3 <rfree>

c000ca03 <operator delete[](void*)>:
c000ca03:	e9 db cf ff ff       	jmp    c00099e3 <rfree>

c000ca08 <operator delete[](void*, unsigned long)>:
c000ca08:	e9 d6 cf ff ff       	jmp    c00099e3 <rfree>

c000ca0d <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000ca0d:	55                   	push   ebp
c000ca0e:	b9 11 00 00 00       	mov    ecx,0x11
c000ca13:	57                   	push   edi
c000ca14:	56                   	push   esi
c000ca15:	be ca 2a 02 c0       	mov    esi,0xc0022aca
c000ca1a:	53                   	push   ebx
c000ca1b:	83 ec 20             	sub    esp,0x20
c000ca1e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ca22:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000ca26:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000ca2a:	fc                   	cld    
c000ca2b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ca2d:	89 ee                	mov    esi,ebp
c000ca2f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ca33:	eb 02                	jmp    c000ca37 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000ca35:	89 c6                	mov    esi,eax
c000ca37:	31 d2                	xor    edx,edx
c000ca39:	41                   	inc    ecx
c000ca3a:	89 f0                	mov    eax,esi
c000ca3c:	f7 f3                	div    ebx
c000ca3e:	39 de                	cmp    esi,ebx
c000ca40:	73 f3                	jae    c000ca35 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000ca42:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ca45:	eb 02                	jmp    c000ca49 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000ca47:	89 c5                	mov    ebp,eax
c000ca49:	31 d2                	xor    edx,edx
c000ca4b:	49                   	dec    ecx
c000ca4c:	89 e8                	mov    eax,ebp
c000ca4e:	f7 f3                	div    ebx
c000ca50:	39 dd                	cmp    ebp,ebx
c000ca52:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000ca56:	88 11                	mov    BYTE PTR [ecx],dl
c000ca58:	73 ed                	jae    c000ca47 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000ca5a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ca5e:	83 c4 20             	add    esp,0x20
c000ca61:	5b                   	pop    ebx
c000ca62:	5e                   	pop    esi
c000ca63:	5f                   	pop    edi
c000ca64:	5d                   	pop    ebp
c000ca65:	c3                   	ret    

c000ca66 <Dbg::logc(char)>:
c000ca66:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ca6a:	f6 05 a0 64 02 c0 10 	test   BYTE PTR ds:0xc00264a0,0x10
c000ca71:	75 12                	jne    c000ca85 <Dbg::logc(char)+0x1f>
c000ca73:	ba fd 03 00 00       	mov    edx,0x3fd
c000ca78:	ec                   	in     al,dx
c000ca79:	a8 20                	test   al,0x20
c000ca7b:	74 fb                	je     c000ca78 <Dbg::logc(char)+0x12>
c000ca7d:	ba f8 03 00 00       	mov    edx,0x3f8
c000ca82:	88 c8                	mov    al,cl
c000ca84:	ee                   	out    dx,al
c000ca85:	c3                   	ret    

c000ca86 <Dbg::logs(char*)>:
c000ca86:	53                   	push   ebx
c000ca87:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ca8b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ca8e:	84 c0                	test   al,al
c000ca90:	74 0f                	je     c000caa1 <Dbg::logs(char*)+0x1b>
c000ca92:	50                   	push   eax
c000ca93:	43                   	inc    ebx
c000ca94:	e8 cd ff ff ff       	call   c000ca66 <Dbg::logc(char)>
c000ca99:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ca9c:	5a                   	pop    edx
c000ca9d:	84 c0                	test   al,al
c000ca9f:	75 f1                	jne    c000ca92 <Dbg::logs(char*)+0xc>
c000caa1:	5b                   	pop    ebx
c000caa2:	c3                   	ret    

c000caa3 <Dbg::logWriteInt(unsigned int)>:
c000caa3:	83 ec 10             	sub    esp,0x10
c000caa6:	6a 0a                	push   0xa
c000caa8:	8d 44 24 08          	lea    eax,[esp+0x8]
c000caac:	50                   	push   eax
c000caad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cab1:	e8 57 ff ff ff       	call   c000ca0d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000cab6:	50                   	push   eax
c000cab7:	e8 ca ff ff ff       	call   c000ca86 <Dbg::logs(char*)>
c000cabc:	83 c4 20             	add    esp,0x20
c000cabf:	c3                   	ret    

c000cac0 <Dbg::logWriteIntBase(unsigned int, int)>:
c000cac0:	83 ec 10             	sub    esp,0x10
c000cac3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cac7:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cacb:	50                   	push   eax
c000cacc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cad0:	e8 38 ff ff ff       	call   c000ca0d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000cad5:	50                   	push   eax
c000cad6:	e8 ab ff ff ff       	call   c000ca86 <Dbg::logs(char*)>
c000cadb:	83 c4 20             	add    esp,0x20
c000cade:	c3                   	ret    

c000cadf <Dbg::kprintf(char const*, ...)>:
c000cadf:	55                   	push   ebp
c000cae0:	57                   	push   edi
c000cae1:	56                   	push   esi
c000cae2:	53                   	push   ebx
c000cae3:	83 ec 0c             	sub    esp,0xc
c000cae6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000caea:	f6 05 a0 64 02 c0 10 	test   BYTE PTR ds:0xc00264a0,0x10
c000caf1:	74 08                	je     c000cafb <Dbg::kprintf(char const*, ...)+0x1c>
c000caf3:	83 c4 0c             	add    esp,0xc
c000caf6:	5b                   	pop    ebx
c000caf7:	5e                   	pop    esi
c000caf8:	5f                   	pop    edi
c000caf9:	5d                   	pop    ebp
c000cafa:	c3                   	ret    
c000cafb:	8d 44 24 24          	lea    eax,[esp+0x24]
c000caff:	31 db                	xor    ebx,ebx
c000cb01:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cb05:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000cb08:	84 c0                	test   al,al
c000cb0a:	74 e7                	je     c000caf3 <Dbg::kprintf(char const*, ...)+0x14>
c000cb0c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cb0f:	3c 25                	cmp    al,0x25
c000cb11:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cb14:	75 44                	jne    c000cb5a <Dbg::kprintf(char const*, ...)+0x7b>
c000cb16:	83 c3 02             	add    ebx,0x2
c000cb19:	8a 07                	mov    al,BYTE PTR [edi]
c000cb1b:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000cb1e:	83 e8 25             	sub    eax,0x25
c000cb21:	3c 53                	cmp    al,0x53
c000cb23:	0f 87 c9 00 00 00    	ja     c000cbf2 <Dbg::kprintf(char const*, ...)+0x113>
c000cb29:	0f b6 c0             	movzx  eax,al
c000cb2c:	ff 24 85 c4 30 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdcf3c]
c000cb33:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cb37:	89 c8                	mov    eax,ecx
c000cb39:	83 c1 04             	add    ecx,0x4
c000cb3c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cb40:	ff 30                	push   DWORD PTR [eax]
c000cb42:	e8 5c ff ff ff       	call   c000caa3 <Dbg::logWriteInt(unsigned int)>
c000cb47:	5f                   	pop    edi
c000cb48:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000cb4c:	84 c0                	test   al,al
c000cb4e:	74 a3                	je     c000caf3 <Dbg::kprintf(char const*, ...)+0x14>
c000cb50:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cb53:	3c 25                	cmp    al,0x25
c000cb55:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cb58:	74 bc                	je     c000cb16 <Dbg::kprintf(char const*, ...)+0x37>
c000cb5a:	50                   	push   eax
c000cb5b:	89 eb                	mov    ebx,ebp
c000cb5d:	e8 04 ff ff ff       	call   c000ca66 <Dbg::logc(char)>
c000cb62:	89 fd                	mov    ebp,edi
c000cb64:	58                   	pop    eax
c000cb65:	eb e1                	jmp    c000cb48 <Dbg::kprintf(char const*, ...)+0x69>
c000cb67:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cb6b:	89 c8                	mov    eax,ecx
c000cb6d:	83 c1 04             	add    ecx,0x4
c000cb70:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cb74:	ff 30                	push   DWORD PTR [eax]
c000cb76:	e8 0b ff ff ff       	call   c000ca86 <Dbg::logs(char*)>
c000cb7b:	58                   	pop    eax
c000cb7c:	eb ca                	jmp    c000cb48 <Dbg::kprintf(char const*, ...)+0x69>
c000cb7e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb82:	89 d0                	mov    eax,edx
c000cb84:	83 c2 04             	add    edx,0x4
c000cb87:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb8b:	ff 30                	push   DWORD PTR [eax]
c000cb8d:	e8 11 ff ff ff       	call   c000caa3 <Dbg::logWriteInt(unsigned int)>
c000cb92:	58                   	pop    eax
c000cb93:	eb b3                	jmp    c000cb48 <Dbg::kprintf(char const*, ...)+0x69>
c000cb95:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb99:	89 d0                	mov    eax,edx
c000cb9b:	83 c2 04             	add    edx,0x4
c000cb9e:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000cba1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cba5:	50                   	push   eax
c000cba6:	e8 bb fe ff ff       	call   c000ca66 <Dbg::logc(char)>
c000cbab:	58                   	pop    eax
c000cbac:	eb 9a                	jmp    c000cb48 <Dbg::kprintf(char const*, ...)+0x69>
c000cbae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cbb2:	89 c8                	mov    eax,ecx
c000cbb4:	83 c1 04             	add    ecx,0x4
c000cbb7:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cbbb:	6a 10                	push   0x10
c000cbbd:	ff 30                	push   DWORD PTR [eax]
c000cbbf:	e8 fc fe ff ff       	call   c000cac0 <Dbg::logWriteIntBase(unsigned int, int)>
c000cbc4:	59                   	pop    ecx
c000cbc5:	5f                   	pop    edi
c000cbc6:	eb 80                	jmp    c000cb48 <Dbg::kprintf(char const*, ...)+0x69>
c000cbc8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cbcc:	89 d0                	mov    eax,edx
c000cbce:	83 c2 08             	add    edx,0x8
c000cbd1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cbd5:	6a 10                	push   0x10
c000cbd7:	ff 30                	push   DWORD PTR [eax]
c000cbd9:	e8 e2 fe ff ff       	call   c000cac0 <Dbg::logWriteIntBase(unsigned int, int)>
c000cbde:	58                   	pop    eax
c000cbdf:	5a                   	pop    edx
c000cbe0:	e9 63 ff ff ff       	jmp    c000cb48 <Dbg::kprintf(char const*, ...)+0x69>
c000cbe5:	6a 25                	push   0x25
c000cbe7:	e8 7a fe ff ff       	call   c000ca66 <Dbg::logc(char)>
c000cbec:	58                   	pop    eax
c000cbed:	e9 56 ff ff ff       	jmp    c000cb48 <Dbg::kprintf(char const*, ...)+0x69>
c000cbf2:	6a 25                	push   0x25
c000cbf4:	e8 6d fe ff ff       	call   c000ca66 <Dbg::logc(char)>
c000cbf9:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000cbfc:	50                   	push   eax
c000cbfd:	e8 64 fe ff ff       	call   c000ca66 <Dbg::logc(char)>
c000cc02:	5a                   	pop    edx
c000cc03:	59                   	pop    ecx
c000cc04:	e9 3f ff ff ff       	jmp    c000cb48 <Dbg::kprintf(char const*, ...)+0x69>
c000cc09:	90                   	nop

c000cc0a <File::read(unsigned long long, void*, int*)>:
c000cc0a:	53                   	push   ebx
c000cc0b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc0f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cc13:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cc1a:	3c 19                	cmp    al,0x19
c000cc1c:	77 35                	ja     c000cc53 <File::read(unsigned long long, void*, int*)+0x49>
c000cc1e:	8b 04 85 40 6a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd95c0]
c000cc25:	85 c0                	test   eax,eax
c000cc27:	74 2a                	je     c000cc53 <File::read(unsigned long long, void*, int*)+0x49>
c000cc29:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cc2f:	85 c0                	test   eax,eax
c000cc31:	74 20                	je     c000cc53 <File::read(unsigned long long, void*, int*)+0x49>
c000cc33:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cc37:	74 21                	je     c000cc5a <File::read(unsigned long long, void*, int*)+0x50>
c000cc39:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cc3b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cc3f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cc45:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc49:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc4d:	5b                   	pop    ebx
c000cc4e:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000cc51:	ff e0                	jmp    eax
c000cc53:	b8 0b 00 00 00       	mov    eax,0xb
c000cc58:	eb 05                	jmp    c000cc5f <File::read(unsigned long long, void*, int*)+0x55>
c000cc5a:	b8 05 00 00 00       	mov    eax,0x5
c000cc5f:	5b                   	pop    ebx
c000cc60:	c3                   	ret    
c000cc61:	90                   	nop

c000cc62 <File::write(unsigned long long, void*, int*)>:
c000cc62:	53                   	push   ebx
c000cc63:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc67:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cc6b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cc72:	3c 19                	cmp    al,0x19
c000cc74:	77 35                	ja     c000ccab <File::write(unsigned long long, void*, int*)+0x49>
c000cc76:	8b 04 85 40 6a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd95c0]
c000cc7d:	85 c0                	test   eax,eax
c000cc7f:	74 2a                	je     c000ccab <File::write(unsigned long long, void*, int*)+0x49>
c000cc81:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cc87:	85 c0                	test   eax,eax
c000cc89:	74 20                	je     c000ccab <File::write(unsigned long long, void*, int*)+0x49>
c000cc8b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cc8f:	74 21                	je     c000ccb2 <File::write(unsigned long long, void*, int*)+0x50>
c000cc91:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cc93:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cc97:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cc9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cca1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cca5:	5b                   	pop    ebx
c000cca6:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000cca9:	ff e0                	jmp    eax
c000ccab:	b8 0b 00 00 00       	mov    eax,0xb
c000ccb0:	eb 05                	jmp    c000ccb7 <File::write(unsigned long long, void*, int*)+0x55>
c000ccb2:	b8 05 00 00 00       	mov    eax,0x5
c000ccb7:	5b                   	pop    ebx
c000ccb8:	c3                   	ret    
c000ccb9:	90                   	nop

c000ccba <Directory::read(unsigned long long, void*, int*)>:
c000ccba:	53                   	push   ebx
c000ccbb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ccbf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ccc3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ccca:	3c 19                	cmp    al,0x19
c000cccc:	77 35                	ja     c000cd03 <Directory::read(unsigned long long, void*, int*)+0x49>
c000ccce:	8b 04 85 40 6a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd95c0]
c000ccd5:	85 c0                	test   eax,eax
c000ccd7:	74 2a                	je     c000cd03 <Directory::read(unsigned long long, void*, int*)+0x49>
c000ccd9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ccdf:	85 c0                	test   eax,eax
c000cce1:	74 20                	je     c000cd03 <Directory::read(unsigned long long, void*, int*)+0x49>
c000cce3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cce7:	74 21                	je     c000cd0a <Directory::read(unsigned long long, void*, int*)+0x50>
c000cce9:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ccef:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ccf5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ccf9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ccfd:	5b                   	pop    ebx
c000ccfe:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000cd01:	ff e0                	jmp    eax
c000cd03:	b8 0b 00 00 00       	mov    eax,0xb
c000cd08:	eb 05                	jmp    c000cd0f <Directory::read(unsigned long long, void*, int*)+0x55>
c000cd0a:	b8 05 00 00 00       	mov    eax,0x5
c000cd0f:	5b                   	pop    ebx
c000cd10:	c3                   	ret    
c000cd11:	90                   	nop

c000cd12 <Directory::write(unsigned long long, void*, int*)>:
c000cd12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd16:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000cd1d:	b8 0b 00 00 00       	mov    eax,0xb
c000cd22:	80 fa 19             	cmp    dl,0x19
c000cd25:	77 18                	ja     c000cd3f <Directory::write(unsigned long long, void*, int*)+0x2d>
c000cd27:	8b 14 95 40 6a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd95c0]
c000cd2e:	85 d2                	test   edx,edx
c000cd30:	74 0d                	je     c000cd3f <Directory::write(unsigned long long, void*, int*)+0x2d>
c000cd32:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000cd39:	19 c0                	sbb    eax,eax
c000cd3b:	83 e0 0a             	and    eax,0xa
c000cd3e:	40                   	inc    eax
c000cd3f:	c3                   	ret    

c000cd40 <File::isAtty()>:
c000cd40:	31 c0                	xor    eax,eax
c000cd42:	c3                   	ret    
c000cd43:	90                   	nop

c000cd44 <Directory::isAtty()>:
c000cd44:	31 c0                	xor    eax,eax
c000cd46:	c3                   	ret    
c000cd47:	90                   	nop

c000cd48 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000cd48:	b8 0a 00 00 00       	mov    eax,0xa
c000cd4d:	c3                   	ret    

c000cd4e <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000cd4e:	b8 0a 00 00 00       	mov    eax,0xa
c000cd53:	c3                   	ret    

c000cd54 <Filesystem::allocateSwapfile(char const*, int)>:
c000cd54:	31 c0                	xor    eax,eax
c000cd56:	31 d2                	xor    edx,edx
c000cd58:	c3                   	ret    
c000cd59:	90                   	nop

c000cd5a <File::~File()>:
c000cd5a:	83 ec 0c             	sub    esp,0xc
c000cd5d:	ba 84 32 02 c0       	mov    edx,0xc0023284
c000cd62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd66:	89 10                	mov    DWORD PTR [eax],edx
c000cd68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd6c:	83 ec 0c             	sub    esp,0xc
c000cd6f:	50                   	push   eax
c000cd70:	e8 37 e7 ff ff       	call   c000b4ac <UnixFile::~UnixFile()>
c000cd75:	83 c4 10             	add    esp,0x10
c000cd78:	90                   	nop
c000cd79:	83 c4 0c             	add    esp,0xc
c000cd7c:	c3                   	ret    
c000cd7d:	90                   	nop

c000cd7e <File::~File()>:
c000cd7e:	83 ec 0c             	sub    esp,0xc
c000cd81:	83 ec 0c             	sub    esp,0xc
c000cd84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd88:	e8 cd ff ff ff       	call   c000cd5a <File::~File()>
c000cd8d:	83 c4 10             	add    esp,0x10
c000cd90:	83 ec 08             	sub    esp,0x8
c000cd93:	68 14 01 00 00       	push   0x114
c000cd98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9c:	e8 5d fc ff ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c000cda1:	83 c4 10             	add    esp,0x10
c000cda4:	83 c4 0c             	add    esp,0xc
c000cda7:	c3                   	ret    

c000cda8 <Directory::~Directory()>:
c000cda8:	83 ec 0c             	sub    esp,0xc
c000cdab:	ba a0 32 02 c0       	mov    edx,0xc00232a0
c000cdb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdb4:	89 10                	mov    DWORD PTR [eax],edx
c000cdb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdba:	83 ec 0c             	sub    esp,0xc
c000cdbd:	50                   	push   eax
c000cdbe:	e8 e9 e6 ff ff       	call   c000b4ac <UnixFile::~UnixFile()>
c000cdc3:	83 c4 10             	add    esp,0x10
c000cdc6:	90                   	nop
c000cdc7:	83 c4 0c             	add    esp,0xc
c000cdca:	c3                   	ret    
c000cdcb:	90                   	nop

c000cdcc <Directory::~Directory()>:
c000cdcc:	83 ec 0c             	sub    esp,0xc
c000cdcf:	83 ec 0c             	sub    esp,0xc
c000cdd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd6:	e8 cd ff ff ff       	call   c000cda8 <Directory::~Directory()>
c000cddb:	83 c4 10             	add    esp,0x10
c000cdde:	83 ec 08             	sub    esp,0x8
c000cde1:	68 14 01 00 00       	push   0x114
c000cde6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdea:	e8 0f fc ff ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c000cdef:	83 c4 10             	add    esp,0x10
c000cdf2:	83 c4 0c             	add    esp,0xc
c000cdf5:	c3                   	ret    

c000cdf6 <Filesystem::Filesystem()>:
c000cdf6:	ba 1c 32 02 c0       	mov    edx,0xc002321c
c000cdfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cdff:	89 10                	mov    DWORD PTR [eax],edx
c000ce01:	8b 15 b4 65 02 c0    	mov    edx,DWORD PTR ds:0xc00265b4
c000ce07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce0b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ce0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce12:	a3 b4 65 02 c0       	mov    ds:0xc00265b4,eax
c000ce17:	90                   	nop
c000ce18:	c3                   	ret    
c000ce19:	90                   	nop

c000ce1a <Filesystem::~Filesystem()>:
c000ce1a:	ba 1c 32 02 c0       	mov    edx,0xc002321c
c000ce1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce23:	89 10                	mov    DWORD PTR [eax],edx
c000ce25:	90                   	nop
c000ce26:	c3                   	ret    
c000ce27:	90                   	nop

c000ce28 <Filesystem::~Filesystem()>:
c000ce28:	83 ec 0c             	sub    esp,0xc
c000ce2b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ce2f:	e8 e6 ff ff ff       	call   c000ce1a <Filesystem::~Filesystem()>
c000ce34:	83 c4 04             	add    esp,0x4
c000ce37:	83 ec 08             	sub    esp,0x8
c000ce3a:	6a 08                	push   0x8
c000ce3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce40:	e8 b9 fb ff ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c000ce45:	83 c4 10             	add    esp,0x10
c000ce48:	83 c4 0c             	add    esp,0xc
c000ce4b:	c3                   	ret    

c000ce4c <Fs::getcwd(Process*, char*, int)>:
c000ce4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce50:	31 c0                	xor    eax,eax
c000ce52:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000ce55:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ce59:	7d 15                	jge    c000ce70 <Fs::getcwd(Process*, char*, int)+0x24>
c000ce5b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ce5f:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000ce66:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ce69:	84 c9                	test   cl,cl
c000ce6b:	74 06                	je     c000ce73 <Fs::getcwd(Process*, char*, int)+0x27>
c000ce6d:	40                   	inc    eax
c000ce6e:	eb e2                	jmp    c000ce52 <Fs::getcwd(Process*, char*, int)+0x6>
c000ce70:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ce73:	31 c0                	xor    eax,eax
c000ce75:	c3                   	ret    

c000ce76 <Fs::initVFS()>:
c000ce76:	83 ec 18             	sub    esp,0x18
c000ce79:	6a 08                	push   0x8
c000ce7b:	e8 43 cb ff ff       	call   c00099c3 <malloc>
c000ce80:	89 04 24             	mov    DWORD PTR [esp],eax
c000ce83:	e8 70 e3 00 00       	call   c001b1f8 <FAT::FAT()>
c000ce88:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ce8f:	e8 2f cb ff ff       	call   c00099c3 <malloc>
c000ce94:	89 04 24             	mov    DWORD PTR [esp],eax
c000ce97:	e8 ba f5 00 00       	call   c001c456 <ISO9660::ISO9660()>
c000ce9c:	83 c4 1c             	add    esp,0x1c
c000ce9f:	c3                   	ret    

c000cea0 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000cea0:	55                   	push   ebp
c000cea1:	57                   	push   edi
c000cea2:	56                   	push   esi
c000cea3:	53                   	push   ebx
c000cea4:	81 ec 10 04 00 00    	sub    esp,0x410
c000ceaa:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000ceb1:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000ceb8:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000cebf:	68 00 04 00 00       	push   0x400
c000cec4:	6a 00                	push   0x0
c000cec6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000ceca:	56                   	push   esi
c000cecb:	e8 b4 37 ff ff       	call   c0000684 <memset>
c000ced0:	83 c4 10             	add    esp,0x10
c000ced3:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000ced7:	75 0b                	jne    c000cee4 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000ced9:	50                   	push   eax
c000ceda:	50                   	push   eax
c000cedb:	57                   	push   edi
c000cedc:	56                   	push   esi
c000cedd:	e8 5e 38 ff ff       	call   c0000740 <strcpy>
c000cee2:	eb 41                	jmp    c000cf25 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000cee4:	8a 07                	mov    al,BYTE PTR [edi]
c000cee6:	3c 5c                	cmp    al,0x5c
c000cee8:	74 04                	je     c000ceee <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000ceea:	3c 2f                	cmp    al,0x2f
c000ceec:	75 18                	jne    c000cf06 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000ceee:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000cef1:	3c 60                	cmp    al,0x60
c000cef3:	7e 03                	jle    c000cef8 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000cef5:	83 e8 20             	sub    eax,0x20
c000cef8:	88 04 24             	mov    BYTE PTR [esp],al
c000cefb:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000cf02:	50                   	push   eax
c000cf03:	50                   	push   eax
c000cf04:	eb 18                	jmp    c000cf1e <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000cf06:	50                   	push   eax
c000cf07:	50                   	push   eax
c000cf08:	55                   	push   ebp
c000cf09:	56                   	push   esi
c000cf0a:	e8 31 38 ff ff       	call   c0000740 <strcpy>
c000cf0f:	5a                   	pop    edx
c000cf10:	59                   	pop    ecx
c000cf11:	68 ba 48 02 c0       	push   0xc00248ba
c000cf16:	56                   	push   esi
c000cf17:	e8 64 39 ff ff       	call   c0000880 <strcat>
c000cf1c:	5d                   	pop    ebp
c000cf1d:	58                   	pop    eax
c000cf1e:	57                   	push   edi
c000cf1f:	56                   	push   esi
c000cf20:	e8 5b 39 ff ff       	call   c0000880 <strcat>
c000cf25:	83 c4 10             	add    esp,0x10
c000cf28:	8a 04 24             	mov    al,BYTE PTR [esp]
c000cf2b:	3c 60                	cmp    al,0x60
c000cf2d:	7e 03                	jle    c000cf32 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000cf2f:	83 e8 20             	sub    eax,0x20
c000cf32:	88 04 24             	mov    BYTE PTR [esp],al
c000cf35:	88 03                	mov    BYTE PTR [ebx],al
c000cf37:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000cf3e:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000cf44:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000cf48:	bf 03 00 00 00       	mov    edi,0x3
c000cf4d:	b8 03 00 00 00       	mov    eax,0x3
c000cf52:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000cf55:	84 d2                	test   dl,dl
c000cf57:	0f 84 91 00 00 00    	je     c000cfee <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000cf5d:	8d 4f 01             	lea    ecx,[edi+0x1]
c000cf60:	80 fa 5c             	cmp    dl,0x5c
c000cf63:	74 05                	je     c000cf6a <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000cf65:	80 fa 2f             	cmp    dl,0x2f
c000cf68:	75 12                	jne    c000cf7c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000cf6a:	89 c5                	mov    ebp,eax
c000cf6c:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000cf71:	74 09                	je     c000cf7c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000cf73:	40                   	inc    eax
c000cf74:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000cf78:	89 cf                	mov    edi,ecx
c000cf7a:	eb d6                	jmp    c000cf52 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000cf7c:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000cf81:	75 5b                	jne    c000cfde <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000cf83:	80 fa 2e             	cmp    dl,0x2e
c000cf86:	75 56                	jne    c000cfde <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000cf88:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000cf8c:	74 19                	je     c000cfa7 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000cf8e:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000cf93:	74 53                	je     c000cfe8 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000cf95:	89 f9                	mov    ecx,edi
c000cf97:	41                   	inc    ecx
c000cf98:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000cf9b:	80 fa 2f             	cmp    dl,0x2f
c000cf9e:	74 f7                	je     c000cf97 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000cfa0:	80 fa 5c             	cmp    dl,0x5c
c000cfa3:	74 f2                	je     c000cf97 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000cfa5:	eb d1                	jmp    c000cf78 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cfa7:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000cfac:	74 3a                	je     c000cfe8 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000cfae:	83 f8 03             	cmp    eax,0x3
c000cfb1:	74 c5                	je     c000cf78 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cfb3:	41                   	inc    ecx
c000cfb4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000cfb7:	80 fa 2f             	cmp    dl,0x2f
c000cfba:	74 f7                	je     c000cfb3 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000cfbc:	80 fa 5c             	cmp    dl,0x5c
c000cfbf:	74 f2                	je     c000cfb3 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000cfc1:	48                   	dec    eax
c000cfc2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000cfc6:	75 06                	jne    c000cfce <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000cfc8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cfcc:	eb f3                	jmp    c000cfc1 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000cfce:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000cfd2:	74 07                	je     c000cfdb <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000cfd4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cfd8:	48                   	dec    eax
c000cfd9:	eb f3                	jmp    c000cfce <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000cfdb:	40                   	inc    eax
c000cfdc:	eb 9a                	jmp    c000cf78 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cfde:	80 fa 2f             	cmp    dl,0x2f
c000cfe1:	74 95                	je     c000cf78 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cfe3:	80 fa 5c             	cmp    dl,0x5c
c000cfe6:	74 90                	je     c000cf78 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cfe8:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000cfeb:	40                   	inc    eax
c000cfec:	eb 8a                	jmp    c000cf78 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cfee:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cff2:	83 ec 0c             	sub    esp,0xc
c000cff5:	53                   	push   ebx
c000cff6:	e8 a5 36 ff ff       	call   c00006a0 <strlen>
c000cffb:	83 c4 10             	add    esp,0x10
c000cffe:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000d003:	75 26                	jne    c000d02b <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000d005:	83 ec 0c             	sub    esp,0xc
c000d008:	53                   	push   ebx
c000d009:	e8 92 36 ff ff       	call   c00006a0 <strlen>
c000d00e:	83 c4 10             	add    esp,0x10
c000d011:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000d016:	74 26                	je     c000d03e <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000d018:	83 ec 0c             	sub    esp,0xc
c000d01b:	53                   	push   ebx
c000d01c:	e8 7f 36 ff ff       	call   c00006a0 <strlen>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000d029:	eb c7                	jmp    c000cff2 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000d02b:	83 ec 0c             	sub    esp,0xc
c000d02e:	53                   	push   ebx
c000d02f:	e8 6c 36 ff ff       	call   c00006a0 <strlen>
c000d034:	83 c4 10             	add    esp,0x10
c000d037:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d03c:	74 c7                	je     c000d005 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000d03e:	81 c4 0c 04 00 00    	add    esp,0x40c
c000d044:	5b                   	pop    ebx
c000d045:	5e                   	pop    esi
c000d046:	5f                   	pop    edi
c000d047:	5d                   	pop    ebp
c000d048:	c3                   	ret    
c000d049:	90                   	nop

c000d04a <File::File(char const*, Process*)>:
c000d04a:	83 ec 0c             	sub    esp,0xc
c000d04d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d051:	83 ec 08             	sub    esp,0x8
c000d054:	6a 00                	push   0x0
c000d056:	50                   	push   eax
c000d057:	e8 6e e2 ff ff       	call   c000b2ca <UnixFile::UnixFile(int)>
c000d05c:	83 c4 10             	add    esp,0x10
c000d05f:	ba 84 32 02 c0       	mov    edx,0xc0023284
c000d064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d068:	89 10                	mov    DWORD PTR [eax],edx
c000d06a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d06e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d078:	83 c0 0d             	add    eax,0xd
c000d07b:	83 ec 04             	sub    esp,0x4
c000d07e:	52                   	push   edx
c000d07f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d083:	50                   	push   eax
c000d084:	e8 17 fe ff ff       	call   c000cea0 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d089:	83 c4 10             	add    esp,0x10
c000d08c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d090:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d093:	8d 50 bf             	lea    edx,[eax-0x41]
c000d096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d09a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d0a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0a4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d0a8:	90                   	nop
c000d0a9:	83 c4 0c             	add    esp,0xc
c000d0ac:	c3                   	ret    
c000d0ad:	90                   	nop

c000d0ae <File::open(FileOpenMode)>:
c000d0ae:	53                   	push   ebx
c000d0af:	b8 0b 00 00 00       	mov    eax,0xb
c000d0b4:	83 ec 08             	sub    esp,0x8
c000d0b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d0bb:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d0c2:	80 fa 19             	cmp    dl,0x19
c000d0c5:	77 40                	ja     c000d107 <File::open(FileOpenMode)+0x59>
c000d0c7:	8b 14 95 40 6a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd95c0]
c000d0ce:	85 d2                	test   edx,edx
c000d0d0:	74 35                	je     c000d107 <File::open(FileOpenMode)+0x59>
c000d0d2:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d0d8:	85 d2                	test   edx,edx
c000d0da:	74 2b                	je     c000d107 <File::open(FileOpenMode)+0x59>
c000d0dc:	b8 06 00 00 00       	mov    eax,0x6
c000d0e1:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d0e5:	75 20                	jne    c000d107 <File::open(FileOpenMode)+0x59>
c000d0e7:	8b 02                	mov    eax,DWORD PTR [edx]
c000d0e9:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d0ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0f3:	51                   	push   ecx
c000d0f4:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d0f7:	51                   	push   ecx
c000d0f8:	52                   	push   edx
c000d0f9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d0fc:	83 c4 10             	add    esp,0x10
c000d0ff:	85 c0                	test   eax,eax
c000d101:	75 04                	jne    c000d107 <File::open(FileOpenMode)+0x59>
c000d103:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d107:	83 c4 08             	add    esp,0x8
c000d10a:	5b                   	pop    ebx
c000d10b:	c3                   	ret    

c000d10c <File::close()>:
c000d10c:	53                   	push   ebx
c000d10d:	b8 0b 00 00 00       	mov    eax,0xb
c000d112:	83 ec 08             	sub    esp,0x8
c000d115:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d119:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d120:	80 fa 19             	cmp    dl,0x19
c000d123:	77 41                	ja     c000d166 <File::close()+0x5a>
c000d125:	8b 1c 95 40 6a 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd95c0]
c000d12c:	85 db                	test   ebx,ebx
c000d12e:	74 36                	je     c000d166 <File::close()+0x5a>
c000d130:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d137:	74 2d                	je     c000d166 <File::close()+0x5a>
c000d139:	b8 05 00 00 00       	mov    eax,0x5
c000d13e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d142:	74 22                	je     c000d166 <File::close()+0x5a>
c000d144:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d148:	8b 04 95 40 6a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd95c0]
c000d14f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d155:	53                   	push   ebx
c000d156:	53                   	push   ebx
c000d157:	8b 10                	mov    edx,DWORD PTR [eax]
c000d159:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d15f:	50                   	push   eax
c000d160:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d163:	83 c4 10             	add    esp,0x10
c000d166:	83 c4 08             	add    esp,0x8
c000d169:	5b                   	pop    ebx
c000d16a:	c3                   	ret    
c000d16b:	90                   	nop

c000d16c <File::seek(unsigned long long)>:
c000d16c:	56                   	push   esi
c000d16d:	53                   	push   ebx
c000d16e:	b8 0b 00 00 00       	mov    eax,0xb
c000d173:	51                   	push   ecx
c000d174:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d178:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d17c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d183:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d187:	80 fa 19             	cmp    dl,0x19
c000d18a:	77 31                	ja     c000d1bd <File::seek(unsigned long long)+0x51>
c000d18c:	8b 14 95 40 6a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd95c0]
c000d193:	85 d2                	test   edx,edx
c000d195:	74 26                	je     c000d1bd <File::seek(unsigned long long)+0x51>
c000d197:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d19d:	85 d2                	test   edx,edx
c000d19f:	74 1c                	je     c000d1bd <File::seek(unsigned long long)+0x51>
c000d1a1:	b8 05 00 00 00       	mov    eax,0x5
c000d1a6:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d1aa:	74 11                	je     c000d1bd <File::seek(unsigned long long)+0x51>
c000d1ac:	8b 02                	mov    eax,DWORD PTR [edx]
c000d1ae:	53                   	push   ebx
c000d1af:	51                   	push   ecx
c000d1b0:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d1b6:	52                   	push   edx
c000d1b7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d1ba:	83 c4 10             	add    esp,0x10
c000d1bd:	5a                   	pop    edx
c000d1be:	5b                   	pop    ebx
c000d1bf:	5e                   	pop    esi
c000d1c0:	c3                   	ret    
c000d1c1:	90                   	nop

c000d1c2 <File::tell(unsigned long long*)>:
c000d1c2:	83 ec 0c             	sub    esp,0xc
c000d1c5:	b8 0b 00 00 00       	mov    eax,0xb
c000d1ca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d1ce:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d1d5:	80 fa 19             	cmp    dl,0x19
c000d1d8:	77 34                	ja     c000d20e <File::tell(unsigned long long*)+0x4c>
c000d1da:	8b 14 95 40 6a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd95c0]
c000d1e1:	85 d2                	test   edx,edx
c000d1e3:	74 29                	je     c000d20e <File::tell(unsigned long long*)+0x4c>
c000d1e5:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d1eb:	85 d2                	test   edx,edx
c000d1ed:	74 1f                	je     c000d20e <File::tell(unsigned long long*)+0x4c>
c000d1ef:	b8 05 00 00 00       	mov    eax,0x5
c000d1f4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d1f8:	74 14                	je     c000d20e <File::tell(unsigned long long*)+0x4c>
c000d1fa:	50                   	push   eax
c000d1fb:	8b 02                	mov    eax,DWORD PTR [edx]
c000d1fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d201:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d207:	52                   	push   edx
c000d208:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d20b:	83 c4 10             	add    esp,0x10
c000d20e:	83 c4 0c             	add    esp,0xc
c000d211:	c3                   	ret    

c000d212 <File::rewind()>:
c000d212:	83 ec 10             	sub    esp,0x10
c000d215:	6a 00                	push   0x0
c000d217:	6a 00                	push   0x0
c000d219:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d21d:	e8 4a ff ff ff       	call   c000d16c <File::seek(unsigned long long)>
c000d222:	83 c4 1c             	add    esp,0x1c
c000d225:	c3                   	ret    

c000d226 <File::unlink()>:
c000d226:	83 ec 0c             	sub    esp,0xc
c000d229:	b8 0b 00 00 00       	mov    eax,0xb
c000d22e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d232:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d239:	80 f9 19             	cmp    cl,0x19
c000d23c:	77 2f                	ja     c000d26d <File::unlink()+0x47>
c000d23e:	8b 0c 8d 40 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95c0]
c000d245:	85 c9                	test   ecx,ecx
c000d247:	74 24                	je     c000d26d <File::unlink()+0x47>
c000d249:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d24f:	85 c9                	test   ecx,ecx
c000d251:	74 1a                	je     c000d26d <File::unlink()+0x47>
c000d253:	b8 06 00 00 00       	mov    eax,0x6
c000d258:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d25c:	75 0f                	jne    c000d26d <File::unlink()+0x47>
c000d25e:	83 c2 0d             	add    edx,0xd
c000d261:	50                   	push   eax
c000d262:	50                   	push   eax
c000d263:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d265:	52                   	push   edx
c000d266:	51                   	push   ecx
c000d267:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d26a:	83 c4 10             	add    esp,0x10
c000d26d:	83 c4 0c             	add    esp,0xc
c000d270:	c3                   	ret    
c000d271:	90                   	nop

c000d272 <File::rename(char const*)>:
c000d272:	83 ec 0c             	sub    esp,0xc
c000d275:	b8 0b 00 00 00       	mov    eax,0xb
c000d27a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d27e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d285:	80 f9 19             	cmp    cl,0x19
c000d288:	77 32                	ja     c000d2bc <File::rename(char const*)+0x4a>
c000d28a:	8b 0c 8d 40 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95c0]
c000d291:	85 c9                	test   ecx,ecx
c000d293:	74 27                	je     c000d2bc <File::rename(char const*)+0x4a>
c000d295:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d29b:	85 c9                	test   ecx,ecx
c000d29d:	74 1d                	je     c000d2bc <File::rename(char const*)+0x4a>
c000d29f:	b8 06 00 00 00       	mov    eax,0x6
c000d2a4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d2a8:	75 12                	jne    c000d2bc <File::rename(char const*)+0x4a>
c000d2aa:	83 c2 0d             	add    edx,0xd
c000d2ad:	50                   	push   eax
c000d2ae:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d2b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d2b4:	52                   	push   edx
c000d2b5:	51                   	push   ecx
c000d2b6:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d2b9:	83 c4 10             	add    esp,0x10
c000d2bc:	83 c4 0c             	add    esp,0xc
c000d2bf:	c3                   	ret    

c000d2c0 <File::chfatattr(unsigned char, unsigned char)>:
c000d2c0:	57                   	push   edi
c000d2c1:	b8 0b 00 00 00       	mov    eax,0xb
c000d2c6:	56                   	push   esi
c000d2c7:	53                   	push   ebx
c000d2c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d2cc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d2d0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d2d7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d2db:	80 f9 19             	cmp    cl,0x19
c000d2de:	77 37                	ja     c000d317 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d2e0:	8b 0c 8d 40 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95c0]
c000d2e7:	85 c9                	test   ecx,ecx
c000d2e9:	74 2c                	je     c000d317 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d2eb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d2f1:	85 c9                	test   ecx,ecx
c000d2f3:	74 22                	je     c000d317 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d2f5:	b8 06 00 00 00       	mov    eax,0x6
c000d2fa:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d2fe:	75 17                	jne    c000d317 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d300:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d302:	89 f0                	mov    eax,esi
c000d304:	83 c2 0d             	add    edx,0xd
c000d307:	0f b6 f0             	movzx  esi,al
c000d30a:	0f b6 db             	movzx  ebx,bl
c000d30d:	56                   	push   esi
c000d30e:	53                   	push   ebx
c000d30f:	52                   	push   edx
c000d310:	51                   	push   ecx
c000d311:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d314:	83 c4 10             	add    esp,0x10
c000d317:	5b                   	pop    ebx
c000d318:	5e                   	pop    esi
c000d319:	5f                   	pop    edi
c000d31a:	c3                   	ret    
c000d31b:	90                   	nop

c000d31c <File::exists()>:
c000d31c:	83 ec 0c             	sub    esp,0xc
c000d31f:	31 c0                	xor    eax,eax
c000d321:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d325:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d32c:	80 f9 19             	cmp    cl,0x19
c000d32f:	77 24                	ja     c000d355 <File::exists()+0x39>
c000d331:	8b 0c 8d 40 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95c0]
c000d338:	85 c9                	test   ecx,ecx
c000d33a:	74 19                	je     c000d355 <File::exists()+0x39>
c000d33c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d342:	85 c9                	test   ecx,ecx
c000d344:	74 0f                	je     c000d355 <File::exists()+0x39>
c000d346:	83 c2 0d             	add    edx,0xd
c000d349:	50                   	push   eax
c000d34a:	50                   	push   eax
c000d34b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d34d:	52                   	push   edx
c000d34e:	51                   	push   ecx
c000d34f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d352:	83 c4 10             	add    esp,0x10
c000d355:	83 c4 0c             	add    esp,0xc
c000d358:	c3                   	ret    
c000d359:	90                   	nop

c000d35a <File::stat(unsigned long long*, bool*)>:
c000d35a:	56                   	push   esi
c000d35b:	53                   	push   ebx
c000d35c:	50                   	push   eax
c000d35d:	b8 0b 00 00 00       	mov    eax,0xb
c000d362:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d366:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d36a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d371:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d375:	80 f9 19             	cmp    cl,0x19
c000d378:	77 3d                	ja     c000d3b7 <File::stat(unsigned long long*, bool*)+0x5d>
c000d37a:	8b 0c 8d 40 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95c0]
c000d381:	85 c9                	test   ecx,ecx
c000d383:	74 32                	je     c000d3b7 <File::stat(unsigned long long*, bool*)+0x5d>
c000d385:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d38b:	85 c9                	test   ecx,ecx
c000d38d:	74 28                	je     c000d3b7 <File::stat(unsigned long long*, bool*)+0x5d>
c000d38f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d391:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d395:	74 13                	je     c000d3aa <File::stat(unsigned long long*, bool*)+0x50>
c000d397:	83 ec 04             	sub    esp,0x4
c000d39a:	56                   	push   esi
c000d39b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d3a1:	51                   	push   ecx
c000d3a2:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d3a5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d3a8:	eb 0a                	jmp    c000d3b4 <File::stat(unsigned long long*, bool*)+0x5a>
c000d3aa:	53                   	push   ebx
c000d3ab:	83 c2 0d             	add    edx,0xd
c000d3ae:	56                   	push   esi
c000d3af:	52                   	push   edx
c000d3b0:	51                   	push   ecx
c000d3b1:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d3b4:	83 c4 10             	add    esp,0x10
c000d3b7:	5a                   	pop    edx
c000d3b8:	5b                   	pop    ebx
c000d3b9:	5e                   	pop    esi
c000d3ba:	c3                   	ret    

c000d3bb <Fs::setcwd(Process*, char*)>:
c000d3bb:	55                   	push   ebp
c000d3bc:	57                   	push   edi
c000d3bd:	56                   	push   esi
c000d3be:	53                   	push   ebx
c000d3bf:	81 ec 20 02 00 00    	sub    esp,0x220
c000d3c5:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d3cc:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d3d2:	57                   	push   edi
c000d3d3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d3da:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d3de:	56                   	push   esi
c000d3df:	e8 bc fa ff ff       	call   c000cea0 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d3e4:	89 34 24             	mov    DWORD PTR [esp],esi
c000d3e7:	e8 b4 32 ff ff       	call   c00006a0 <strlen>
c000d3ec:	83 c4 10             	add    esp,0x10
c000d3ef:	83 f8 02             	cmp    eax,0x2
c000d3f2:	77 17                	ja     c000d40b <Fs::setcwd(Process*, char*)+0x50>
c000d3f4:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000d3f9:	83 e8 41             	sub    eax,0x41
c000d3fc:	83 f8 19             	cmp    eax,0x19
c000d3ff:	76 24                	jbe    c000d425 <Fs::setcwd(Process*, char*)+0x6a>
c000d401:	b8 03 00 00 00       	mov    eax,0x3
c000d406:	e9 e0 00 00 00       	jmp    c000d4eb <Fs::setcwd(Process*, char*)+0x130>
c000d40b:	83 ec 0c             	sub    esp,0xc
c000d40e:	56                   	push   esi
c000d40f:	e8 8c 32 ff ff       	call   c00006a0 <strlen>
c000d414:	83 c4 10             	add    esp,0x10
c000d417:	83 f8 03             	cmp    eax,0x3
c000d41a:	75 34                	jne    c000d450 <Fs::setcwd(Process*, char*)+0x95>
c000d41c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d421:	75 2d                	jne    c000d450 <Fs::setcwd(Process*, char*)+0x95>
c000d423:	eb cf                	jmp    c000d3f4 <Fs::setcwd(Process*, char*)+0x39>
c000d425:	8b 14 85 40 6a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd95c0]
c000d42c:	b8 05 00 00 00       	mov    eax,0x5
c000d431:	85 d2                	test   edx,edx
c000d433:	0f 84 b2 00 00 00    	je     c000d4eb <Fs::setcwd(Process*, char*)+0x130>
c000d439:	b8 06 00 00 00       	mov    eax,0x6
c000d43e:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d445:	0f 85 92 00 00 00    	jne    c000d4dd <Fs::setcwd(Process*, char*)+0x122>
c000d44b:	e9 9b 00 00 00       	jmp    c000d4eb <Fs::setcwd(Process*, char*)+0x130>
c000d450:	83 ec 0c             	sub    esp,0xc
c000d453:	68 14 01 00 00       	push   0x114
c000d458:	e8 66 c5 ff ff       	call   c00099c3 <malloc>
c000d45d:	83 c4 0c             	add    esp,0xc
c000d460:	89 c3                	mov    ebx,eax
c000d462:	55                   	push   ebp
c000d463:	56                   	push   esi
c000d464:	50                   	push   eax
c000d465:	e8 e0 fb ff ff       	call   c000d04a <File::File(char const*, Process*)>
c000d46a:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000d46f:	83 c4 0c             	add    esp,0xc
c000d472:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000d476:	50                   	push   eax
c000d477:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d47b:	50                   	push   eax
c000d47c:	53                   	push   ebx
c000d47d:	e8 d8 fe ff ff       	call   c000d35a <File::stat(unsigned long long*, bool*)>
c000d482:	83 c4 10             	add    esp,0x10
c000d485:	83 f8 02             	cmp    eax,0x2
c000d488:	74 04                	je     c000d48e <Fs::setcwd(Process*, char*)+0xd3>
c000d48a:	85 c0                	test   eax,eax
c000d48c:	74 1c                	je     c000d4aa <Fs::setcwd(Process*, char*)+0xef>
c000d48e:	b8 01 00 00 00       	mov    eax,0x1
c000d493:	85 db                	test   ebx,ebx
c000d495:	74 54                	je     c000d4eb <Fs::setcwd(Process*, char*)+0x130>
c000d497:	83 ec 0c             	sub    esp,0xc
c000d49a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d49c:	53                   	push   ebx
c000d49d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d4a0:	83 c4 10             	add    esp,0x10
c000d4a3:	b8 01 00 00 00       	mov    eax,0x1
c000d4a8:	eb 41                	jmp    c000d4eb <Fs::setcwd(Process*, char*)+0x130>
c000d4aa:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d4af:	75 1c                	jne    c000d4cd <Fs::setcwd(Process*, char*)+0x112>
c000d4b1:	b8 02 00 00 00       	mov    eax,0x2
c000d4b6:	85 db                	test   ebx,ebx
c000d4b8:	74 31                	je     c000d4eb <Fs::setcwd(Process*, char*)+0x130>
c000d4ba:	83 ec 0c             	sub    esp,0xc
c000d4bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d4bf:	53                   	push   ebx
c000d4c0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d4c3:	83 c4 10             	add    esp,0x10
c000d4c6:	b8 02 00 00 00       	mov    eax,0x2
c000d4cb:	eb 1e                	jmp    c000d4eb <Fs::setcwd(Process*, char*)+0x130>
c000d4cd:	85 db                	test   ebx,ebx
c000d4cf:	74 0c                	je     c000d4dd <Fs::setcwd(Process*, char*)+0x122>
c000d4d1:	83 ec 0c             	sub    esp,0xc
c000d4d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d4d6:	53                   	push   ebx
c000d4d7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d4da:	83 c4 10             	add    esp,0x10
c000d4dd:	50                   	push   eax
c000d4de:	50                   	push   eax
c000d4df:	56                   	push   esi
c000d4e0:	57                   	push   edi
c000d4e1:	e8 5a 32 ff ff       	call   c0000740 <strcpy>
c000d4e6:	83 c4 10             	add    esp,0x10
c000d4e9:	31 c0                	xor    eax,eax
c000d4eb:	81 c4 1c 02 00 00    	add    esp,0x21c
c000d4f1:	5b                   	pop    ebx
c000d4f2:	5e                   	pop    esi
c000d4f3:	5f                   	pop    edi
c000d4f4:	5d                   	pop    ebp
c000d4f5:	c3                   	ret    

c000d4f6 <Directory::Directory(char const*, Process*)>:
c000d4f6:	83 ec 0c             	sub    esp,0xc
c000d4f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4fd:	83 ec 08             	sub    esp,0x8
c000d500:	6a 00                	push   0x0
c000d502:	50                   	push   eax
c000d503:	e8 c2 dd ff ff       	call   c000b2ca <UnixFile::UnixFile(int)>
c000d508:	83 c4 10             	add    esp,0x10
c000d50b:	ba a0 32 02 c0       	mov    edx,0xc00232a0
c000d510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d514:	89 10                	mov    DWORD PTR [eax],edx
c000d516:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d51a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d524:	83 c0 0d             	add    eax,0xd
c000d527:	83 ec 04             	sub    esp,0x4
c000d52a:	52                   	push   edx
c000d52b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d52f:	50                   	push   eax
c000d530:	e8 6b f9 ff ff       	call   c000cea0 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d535:	83 c4 10             	add    esp,0x10
c000d538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d53c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d53f:	8d 50 bf             	lea    edx,[eax-0x41]
c000d542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d546:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d54c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d550:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d554:	90                   	nop
c000d555:	83 c4 0c             	add    esp,0xc
c000d558:	c3                   	ret    
c000d559:	90                   	nop

c000d55a <Directory::open()>:
c000d55a:	53                   	push   ebx
c000d55b:	b8 0b 00 00 00       	mov    eax,0xb
c000d560:	83 ec 08             	sub    esp,0x8
c000d563:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d567:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d56e:	80 fa 19             	cmp    dl,0x19
c000d571:	77 3d                	ja     c000d5b0 <Directory::open()+0x56>
c000d573:	8b 14 95 40 6a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd95c0]
c000d57a:	85 d2                	test   edx,edx
c000d57c:	74 32                	je     c000d5b0 <Directory::open()+0x56>
c000d57e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d584:	85 d2                	test   edx,edx
c000d586:	74 28                	je     c000d5b0 <Directory::open()+0x56>
c000d588:	b8 06 00 00 00       	mov    eax,0x6
c000d58d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d591:	75 1d                	jne    c000d5b0 <Directory::open()+0x56>
c000d593:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d599:	50                   	push   eax
c000d59a:	8b 02                	mov    eax,DWORD PTR [edx]
c000d59c:	51                   	push   ecx
c000d59d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d5a0:	51                   	push   ecx
c000d5a1:	52                   	push   edx
c000d5a2:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000d5a5:	83 c4 10             	add    esp,0x10
c000d5a8:	85 c0                	test   eax,eax
c000d5aa:	75 04                	jne    c000d5b0 <Directory::open()+0x56>
c000d5ac:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d5b0:	83 c4 08             	add    esp,0x8
c000d5b3:	5b                   	pop    ebx
c000d5b4:	c3                   	ret    
c000d5b5:	90                   	nop

c000d5b6 <Directory::close()>:
c000d5b6:	53                   	push   ebx
c000d5b7:	b8 0b 00 00 00       	mov    eax,0xb
c000d5bc:	83 ec 08             	sub    esp,0x8
c000d5bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d5c3:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d5ca:	80 fa 19             	cmp    dl,0x19
c000d5cd:	77 41                	ja     c000d610 <Directory::close()+0x5a>
c000d5cf:	8b 1c 95 40 6a 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd95c0]
c000d5d6:	85 db                	test   ebx,ebx
c000d5d8:	74 36                	je     c000d610 <Directory::close()+0x5a>
c000d5da:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d5e1:	74 2d                	je     c000d610 <Directory::close()+0x5a>
c000d5e3:	b8 05 00 00 00       	mov    eax,0x5
c000d5e8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d5ec:	74 22                	je     c000d610 <Directory::close()+0x5a>
c000d5ee:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d5f2:	8b 04 95 40 6a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd95c0]
c000d5f9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d5ff:	53                   	push   ebx
c000d600:	53                   	push   ebx
c000d601:	8b 10                	mov    edx,DWORD PTR [eax]
c000d603:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d609:	50                   	push   eax
c000d60a:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000d60d:	83 c4 10             	add    esp,0x10
c000d610:	83 c4 08             	add    esp,0x8
c000d613:	5b                   	pop    ebx
c000d614:	c3                   	ret    
c000d615:	90                   	nop

c000d616 <Directory::unlink()>:
c000d616:	83 ec 0c             	sub    esp,0xc
c000d619:	b8 0b 00 00 00       	mov    eax,0xb
c000d61e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d622:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d629:	80 f9 19             	cmp    cl,0x19
c000d62c:	77 2f                	ja     c000d65d <Directory::unlink()+0x47>
c000d62e:	8b 0c 8d 40 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95c0]
c000d635:	85 c9                	test   ecx,ecx
c000d637:	74 24                	je     c000d65d <Directory::unlink()+0x47>
c000d639:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d63f:	85 c9                	test   ecx,ecx
c000d641:	74 1a                	je     c000d65d <Directory::unlink()+0x47>
c000d643:	b8 06 00 00 00       	mov    eax,0x6
c000d648:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d64c:	75 0f                	jne    c000d65d <Directory::unlink()+0x47>
c000d64e:	83 c2 0d             	add    edx,0xd
c000d651:	50                   	push   eax
c000d652:	50                   	push   eax
c000d653:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d655:	52                   	push   edx
c000d656:	51                   	push   ecx
c000d657:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d65a:	83 c4 10             	add    esp,0x10
c000d65d:	83 c4 0c             	add    esp,0xc
c000d660:	c3                   	ret    
c000d661:	90                   	nop

c000d662 <Directory::rename(char const*)>:
c000d662:	83 ec 0c             	sub    esp,0xc
c000d665:	b8 0b 00 00 00       	mov    eax,0xb
c000d66a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d66e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d675:	80 f9 19             	cmp    cl,0x19
c000d678:	77 32                	ja     c000d6ac <Directory::rename(char const*)+0x4a>
c000d67a:	8b 0c 8d 40 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95c0]
c000d681:	85 c9                	test   ecx,ecx
c000d683:	74 27                	je     c000d6ac <Directory::rename(char const*)+0x4a>
c000d685:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d68b:	85 c9                	test   ecx,ecx
c000d68d:	74 1d                	je     c000d6ac <Directory::rename(char const*)+0x4a>
c000d68f:	b8 06 00 00 00       	mov    eax,0x6
c000d694:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d698:	75 12                	jne    c000d6ac <Directory::rename(char const*)+0x4a>
c000d69a:	83 c2 0d             	add    edx,0xd
c000d69d:	50                   	push   eax
c000d69e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d6a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d6a4:	52                   	push   edx
c000d6a5:	51                   	push   ecx
c000d6a6:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d6a9:	83 c4 10             	add    esp,0x10
c000d6ac:	83 c4 0c             	add    esp,0xc
c000d6af:	c3                   	ret    

c000d6b0 <Directory::exists()>:
c000d6b0:	83 ec 0c             	sub    esp,0xc
c000d6b3:	31 c0                	xor    eax,eax
c000d6b5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d6b9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d6c0:	80 f9 19             	cmp    cl,0x19
c000d6c3:	77 24                	ja     c000d6e9 <Directory::exists()+0x39>
c000d6c5:	8b 0c 8d 40 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95c0]
c000d6cc:	85 c9                	test   ecx,ecx
c000d6ce:	74 19                	je     c000d6e9 <Directory::exists()+0x39>
c000d6d0:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d6d6:	85 c9                	test   ecx,ecx
c000d6d8:	74 0f                	je     c000d6e9 <Directory::exists()+0x39>
c000d6da:	83 c2 0d             	add    edx,0xd
c000d6dd:	50                   	push   eax
c000d6de:	50                   	push   eax
c000d6df:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d6e1:	52                   	push   edx
c000d6e2:	51                   	push   ecx
c000d6e3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d6e6:	83 c4 10             	add    esp,0x10
c000d6e9:	83 c4 0c             	add    esp,0xc
c000d6ec:	c3                   	ret    
c000d6ed:	90                   	nop

c000d6ee <Directory::read(dirent*)>:
c000d6ee:	83 ec 1c             	sub    esp,0x1c
c000d6f1:	b8 0b 00 00 00       	mov    eax,0xb
c000d6f6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d6fa:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d701:	80 fa 19             	cmp    dl,0x19
c000d704:	77 30                	ja     c000d736 <Directory::read(dirent*)+0x48>
c000d706:	8b 14 95 40 6a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd95c0]
c000d70d:	85 d2                	test   edx,edx
c000d70f:	74 25                	je     c000d736 <Directory::read(dirent*)+0x48>
c000d711:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d718:	74 1c                	je     c000d736 <Directory::read(dirent*)+0x48>
c000d71a:	83 ec 0c             	sub    esp,0xc
c000d71d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d71f:	8d 54 24 18          	lea    edx,[esp+0x18]
c000d723:	52                   	push   edx
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	6a 00                	push   0x0
c000d72a:	68 10 01 00 00       	push   0x110
c000d72f:	51                   	push   ecx
c000d730:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000d733:	83 c4 20             	add    esp,0x20
c000d736:	83 c4 1c             	add    esp,0x1c
c000d739:	c3                   	ret    

c000d73a <Directory::create()>:
c000d73a:	83 ec 0c             	sub    esp,0xc
c000d73d:	b8 0b 00 00 00       	mov    eax,0xb
c000d742:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d746:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d74d:	80 f9 19             	cmp    cl,0x19
c000d750:	77 2f                	ja     c000d781 <Directory::create()+0x47>
c000d752:	8b 0c 8d 40 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95c0]
c000d759:	85 c9                	test   ecx,ecx
c000d75b:	74 24                	je     c000d781 <Directory::create()+0x47>
c000d75d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d763:	85 c9                	test   ecx,ecx
c000d765:	74 1a                	je     c000d781 <Directory::create()+0x47>
c000d767:	b8 06 00 00 00       	mov    eax,0x6
c000d76c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d770:	75 0f                	jne    c000d781 <Directory::create()+0x47>
c000d772:	83 c2 0d             	add    edx,0xd
c000d775:	50                   	push   eax
c000d776:	50                   	push   eax
c000d777:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d779:	52                   	push   edx
c000d77a:	51                   	push   ecx
c000d77b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000d77e:	83 c4 10             	add    esp,0x10
c000d781:	83 c4 0c             	add    esp,0xc
c000d784:	c3                   	ret    
c000d785:	90                   	nop

c000d786 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000d786:	b8 0a 00 00 00       	mov    eax,0xa
c000d78b:	c3                   	ret    

c000d78c <Bus::Bus(char const*)>:
c000d78c:	83 ec 0c             	sub    esp,0xc
c000d78f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d793:	83 ec 08             	sub    esp,0x8
c000d796:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d79a:	50                   	push   eax
c000d79b:	e8 8a 09 00 00       	call   c000e12a <Device::Device(char const*)>
c000d7a0:	83 c4 10             	add    esp,0x10
c000d7a3:	ba bc 32 02 c0       	mov    edx,0xc00232bc
c000d7a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ac:	89 10                	mov    DWORD PTR [eax],edx
c000d7ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7b2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000d7bc:	90                   	nop
c000d7bd:	83 c4 0c             	add    esp,0xc
c000d7c0:	c3                   	ret    
c000d7c1:	90                   	nop
c000d7c2:	66 90                	xchg   ax,ax

c000d7c4 <Bus::~Bus()>:
c000d7c4:	83 ec 0c             	sub    esp,0xc
c000d7c7:	ba bc 32 02 c0       	mov    edx,0xc00232bc
c000d7cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7d0:	89 10                	mov    DWORD PTR [eax],edx
c000d7d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7d6:	83 ec 0c             	sub    esp,0xc
c000d7d9:	50                   	push   eax
c000d7da:	e8 15 06 00 00       	call   c000ddf4 <Device::~Device()>
c000d7df:	83 c4 10             	add    esp,0x10
c000d7e2:	90                   	nop
c000d7e3:	83 c4 0c             	add    esp,0xc
c000d7e6:	c3                   	ret    
c000d7e7:	90                   	nop

c000d7e8 <Bus::~Bus()>:
c000d7e8:	83 ec 0c             	sub    esp,0xc
c000d7eb:	83 ec 0c             	sub    esp,0xc
c000d7ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7f2:	e8 cd ff ff ff       	call   c000d7c4 <Bus::~Bus()>
c000d7f7:	83 c4 10             	add    esp,0x10
c000d7fa:	83 ec 08             	sub    esp,0x8
c000d7fd:	68 58 01 00 00       	push   0x158
c000d802:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d806:	e8 f3 f1 ff ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c000d80b:	83 c4 10             	add    esp,0x10
c000d80e:	83 c4 0c             	add    esp,0xc
c000d811:	c3                   	ret    
c000d812:	66 90                	xchg   ax,ax

c000d814 <Buzzer::Buzzer(char const*)>:
c000d814:	83 ec 0c             	sub    esp,0xc
c000d817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d81b:	83 ec 08             	sub    esp,0x8
c000d81e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d822:	50                   	push   eax
c000d823:	e8 02 09 00 00       	call   c000e12a <Device::Device(char const*)>
c000d828:	83 c4 10             	add    esp,0x10
c000d82b:	ba e8 32 02 c0       	mov    edx,0xc00232e8
c000d830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d834:	89 10                	mov    DWORD PTR [eax],edx
c000d836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d83a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000d844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d848:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000d852:	90                   	nop
c000d853:	83 c4 0c             	add    esp,0xc
c000d856:	c3                   	ret    
c000d857:	90                   	nop

c000d858 <Buzzer::~Buzzer()>:
c000d858:	83 ec 0c             	sub    esp,0xc
c000d85b:	ba e8 32 02 c0       	mov    edx,0xc00232e8
c000d860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d864:	89 10                	mov    DWORD PTR [eax],edx
c000d866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86a:	83 ec 0c             	sub    esp,0xc
c000d86d:	50                   	push   eax
c000d86e:	e8 81 05 00 00       	call   c000ddf4 <Device::~Device()>
c000d873:	83 c4 10             	add    esp,0x10
c000d876:	90                   	nop
c000d877:	83 c4 0c             	add    esp,0xc
c000d87a:	c3                   	ret    
c000d87b:	90                   	nop

c000d87c <Buzzer::~Buzzer()>:
c000d87c:	83 ec 0c             	sub    esp,0xc
c000d87f:	83 ec 0c             	sub    esp,0xc
c000d882:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d886:	e8 cd ff ff ff       	call   c000d858 <Buzzer::~Buzzer()>
c000d88b:	83 c4 10             	add    esp,0x10
c000d88e:	83 ec 08             	sub    esp,0x8
c000d891:	68 5c 01 00 00       	push   0x15c
c000d896:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d89a:	e8 5f f1 ff ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c000d89f:	83 c4 10             	add    esp,0x10
c000d8a2:	83 c4 0c             	add    esp,0xc
c000d8a5:	c3                   	ret    

c000d8a6 <Buzzer::stop()>:
c000d8a6:	83 ec 14             	sub    esp,0x14
c000d8a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d8ad:	8b 10                	mov    edx,DWORD PTR [eax]
c000d8af:	6a 00                	push   0x0
c000d8b1:	50                   	push   eax
c000d8b2:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d8b5:	83 c4 1c             	add    esp,0x1c
c000d8b8:	c3                   	ret    

c000d8b9 <beepThread(void*)>:
c000d8b9:	53                   	push   ebx
c000d8ba:	83 ec 08             	sub    esp,0x8
c000d8bd:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000d8c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d8c6:	48                   	dec    eax
c000d8c7:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c000d8cc:	75 02                	jne    c000d8d0 <beepThread(void*)+0x17>
c000d8ce:	fb                   	sti    
c000d8cf:	90                   	nop
c000d8d0:	83 ec 0c             	sub    esp,0xc
c000d8d3:	6b 83 58 01 00 00 0a 	imul   eax,DWORD PTR [ebx+0x158],0xa
c000d8da:	50                   	push   eax
c000d8db:	e8 8c a9 00 00       	call   c001826c <milliTenthSleep(unsigned int)>
c000d8e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d8e3:	e8 be ff ff ff       	call   c000d8a6 <Buzzer::stop()>
c000d8e8:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000d8f0:	83 c4 18             	add    esp,0x18
c000d8f3:	5b                   	pop    ebx
c000d8f4:	e9 73 a8 00 00       	jmp    c001816c <blockTask(TaskState)>
c000d8f9:	90                   	nop

c000d8fa <Buzzer::beep(int, int, bool)>:
c000d8fa:	57                   	push   edi
c000d8fb:	56                   	push   esi
c000d8fc:	53                   	push   ebx
c000d8fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d901:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000d905:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d909:	50                   	push   eax
c000d90a:	50                   	push   eax
c000d90b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d90d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d911:	53                   	push   ebx
c000d912:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d915:	83 c4 10             	add    esp,0x10
c000d918:	89 f8                	mov    eax,edi
c000d91a:	84 c0                	test   al,al
c000d91c:	74 1e                	je     c000d93c <Buzzer::beep(int, int, bool)+0x42>
c000d91e:	83 ec 0c             	sub    esp,0xc
c000d921:	6b f6 0a             	imul   esi,esi,0xa
c000d924:	56                   	push   esi
c000d925:	e8 42 a9 00 00       	call   c001826c <milliTenthSleep(unsigned int)>
c000d92a:	83 c4 10             	add    esp,0x10
c000d92d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d931:	5b                   	pop    ebx
c000d932:	5e                   	pop    esi
c000d933:	5f                   	pop    edi
c000d934:	e9 6d ff ff ff       	jmp    c000d8a6 <Buzzer::stop()>
c000d939:	8d 76 00             	lea    esi,[esi+0x0]
c000d93c:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000d942:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000d947:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000d94f:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d953:	c7 44 24 14 b9 d8 00 c0 	mov    DWORD PTR [esp+0x14],0xc000d8b9
c000d95b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d95f:	5b                   	pop    ebx
c000d960:	5e                   	pop    esi
c000d961:	5f                   	pop    edi
c000d962:	e9 f1 a3 00 00       	jmp    c0017d58 <Process::createThread(void (*)(void*), void*, int)>
c000d967:	90                   	nop

c000d968 <User::loadClockSettings(int)>:
c000d968:	53                   	push   ebx
c000d969:	83 ec 14             	sub    esp,0x14
c000d96c:	68 14 01 00 00       	push   0x114
c000d971:	e8 4d c0 ff ff       	call   c00099c3 <malloc>
c000d976:	83 c4 0c             	add    esp,0xc
c000d979:	89 c3                	mov    ebx,eax
c000d97b:	ff 35 70 79 02 c0    	push   DWORD PTR ds:0xc0027970
c000d981:	68 10 33 02 c0       	push   0xc0023310
c000d986:	50                   	push   eax
c000d987:	e8 be f6 ff ff       	call   c000d04a <File::File(char const*, Process*)>
c000d98c:	58                   	pop    eax
c000d98d:	5a                   	pop    edx
c000d98e:	6a 01                	push   0x1
c000d990:	53                   	push   ebx
c000d991:	e8 18 f7 ff ff       	call   c000d0ae <File::open(FileOpenMode)>
c000d996:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d999:	e8 6e f7 ff ff       	call   c000d10c <File::close()>
c000d99e:	83 c4 10             	add    esp,0x10
c000d9a1:	85 db                	test   ebx,ebx
c000d9a3:	74 0f                	je     c000d9b4 <User::loadClockSettings(int)+0x4c>
c000d9a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d9a7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d9ab:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d9ae:	83 c4 08             	add    esp,0x8
c000d9b1:	5b                   	pop    ebx
c000d9b2:	ff e0                	jmp    eax
c000d9b4:	83 c4 08             	add    esp,0x8
c000d9b7:	5b                   	pop    ebx
c000d9b8:	c3                   	ret    
c000d9b9:	90                   	nop

c000d9ba <Clock::Clock(char const*)>:
c000d9ba:	83 ec 0c             	sub    esp,0xc
c000d9bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9c1:	83 ec 08             	sub    esp,0x8
c000d9c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9c8:	50                   	push   eax
c000d9c9:	e8 5c 07 00 00       	call   c000e12a <Device::Device(char const*)>
c000d9ce:	83 c4 10             	add    esp,0x10
c000d9d1:	ba 38 33 02 c0       	mov    edx,0xc0023338
c000d9d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9da:	89 10                	mov    DWORD PTR [eax],edx
c000d9dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9e0:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000d9ea:	90                   	nop
c000d9eb:	83 c4 0c             	add    esp,0xc
c000d9ee:	c3                   	ret    
c000d9ef:	90                   	nop

c000d9f0 <Clock::~Clock()>:
c000d9f0:	83 ec 0c             	sub    esp,0xc
c000d9f3:	ba 38 33 02 c0       	mov    edx,0xc0023338
c000d9f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9fc:	89 10                	mov    DWORD PTR [eax],edx
c000d9fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da02:	83 ec 0c             	sub    esp,0xc
c000da05:	50                   	push   eax
c000da06:	e8 e9 03 00 00       	call   c000ddf4 <Device::~Device()>
c000da0b:	83 c4 10             	add    esp,0x10
c000da0e:	90                   	nop
c000da0f:	83 c4 0c             	add    esp,0xc
c000da12:	c3                   	ret    
c000da13:	90                   	nop

c000da14 <Clock::~Clock()>:
c000da14:	83 ec 0c             	sub    esp,0xc
c000da17:	83 ec 0c             	sub    esp,0xc
c000da1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da1e:	e8 cd ff ff ff       	call   c000d9f0 <Clock::~Clock()>
c000da23:	83 c4 10             	add    esp,0x10
c000da26:	83 ec 08             	sub    esp,0x8
c000da29:	68 58 01 00 00       	push   0x158
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	e8 c7 ef ff ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c000da37:	83 c4 10             	add    esp,0x10
c000da3a:	83 c4 0c             	add    esp,0xc
c000da3d:	c3                   	ret    

c000da3e <Clock::timeInSecondsLocal()>:
c000da3e:	53                   	push   ebx
c000da3f:	83 ec 14             	sub    esp,0x14
c000da42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000da46:	8b 10                	mov    edx,DWORD PTR [eax]
c000da48:	50                   	push   eax
c000da49:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000da4c:	0f b6 0d bc 65 02 c0 	movzx  ecx,BYTE PTR ds:0xc00265bc
c000da53:	03 0d c0 65 02 c0    	add    ecx,DWORD PTR ds:0xc00265c0
c000da59:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000da5f:	89 cb                	mov    ebx,ecx
c000da61:	c1 fb 1f             	sar    ebx,0x1f
c000da64:	01 c8                	add    eax,ecx
c000da66:	11 da                	adc    edx,ebx
c000da68:	83 c4 10             	add    esp,0x10
c000da6b:	31 c9                	xor    ecx,ecx
c000da6d:	80 3d bd 65 02 c0 00 	cmp    BYTE PTR ds:0xc00265bd,0x0
c000da74:	74 05                	je     c000da7b <Clock::timeInSecondsLocal()+0x3d>
c000da76:	b9 08 07 00 00       	mov    ecx,0x708
c000da7b:	31 db                	xor    ebx,ebx
c000da7d:	01 c8                	add    eax,ecx
c000da7f:	11 da                	adc    edx,ebx
c000da81:	83 c4 08             	add    esp,0x8
c000da84:	5b                   	pop    ebx
c000da85:	c3                   	ret    

c000da86 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000da86:	57                   	push   edi
c000da87:	56                   	push   esi
c000da88:	53                   	push   ebx
c000da89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000da8d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000da91:	8b 01                	mov    eax,DWORD PTR [ecx]
c000da93:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000da97:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000da9a:	0f b6 05 bc 65 02 c0 	movzx  eax,BYTE PTR ds:0xc00265bc
c000daa1:	03 05 c0 65 02 c0    	add    eax,DWORD PTR ds:0xc00265c0
c000daa7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000daad:	99                   	cdq    
c000daae:	29 c6                	sub    esi,eax
c000dab0:	19 d7                	sbb    edi,edx
c000dab2:	89 f0                	mov    eax,esi
c000dab4:	89 fa                	mov    edx,edi
c000dab6:	31 f6                	xor    esi,esi
c000dab8:	80 3d bd 65 02 c0 00 	cmp    BYTE PTR ds:0xc00265bd,0x0
c000dabf:	74 05                	je     c000dac6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000dac1:	be 08 07 00 00       	mov    esi,0x708
c000dac6:	31 ff                	xor    edi,edi
c000dac8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000dacc:	29 f0                	sub    eax,esi
c000dace:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dad2:	19 fa                	sbb    edx,edi
c000dad4:	89 d8                	mov    eax,ebx
c000dad6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dada:	5b                   	pop    ebx
c000dadb:	5e                   	pop    esi
c000dadc:	5f                   	pop    edi
c000dadd:	ff e0                	jmp    eax

c000dadf <datetimeToSeconds(datetime_t)>:
c000dadf:	55                   	push   ebp
c000dae0:	57                   	push   edi
c000dae1:	56                   	push   esi
c000dae2:	53                   	push   ebx
c000dae3:	83 ec 14             	sub    esp,0x14
c000dae6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000daea:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000daee:	89 d3                	mov    ebx,edx
c000daf0:	0f b6 c6             	movzx  eax,dh
c000daf3:	c1 eb 10             	shr    ebx,0x10
c000daf6:	48                   	dec    eax
c000daf7:	66 81 eb 6c 07       	sub    bx,0x76c
c000dafc:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000db00:	0f b6 f5             	movzx  esi,ch
c000db03:	89 cf                	mov    edi,ecx
c000db05:	6b f6 3c             	imul   esi,esi,0x3c
c000db08:	c1 ef 10             	shr    edi,0x10
c000db0b:	0f b6 c9             	movzx  ecx,cl
c000db0e:	89 f8                	mov    eax,edi
c000db10:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000db16:	0f b6 f8             	movzx  edi,al
c000db19:	0f b6 d2             	movzx  edx,dl
c000db1c:	01 fe                	add    esi,edi
c000db1e:	01 f1                	add    ecx,esi
c000db20:	0f b7 f3             	movzx  esi,bx
c000db23:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000db27:	c1 f9 1f             	sar    ecx,0x1f
c000db2a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000db2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000db33:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000db38:	8b 0c 8d 80 33 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcc80]
c000db3f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000db43:	76 29                	jbe    c000db6e <datetimeToSeconds(datetime_t)+0x8f>
c000db45:	f6 c3 03             	test   bl,0x3
c000db48:	75 24                	jne    c000db6e <datetimeToSeconds(datetime_t)+0x8f>
c000db4a:	31 d2                	xor    edx,edx
c000db4c:	bf 64 00 00 00       	mov    edi,0x64
c000db51:	89 d8                	mov    eax,ebx
c000db53:	66 f7 f7             	div    di
c000db56:	66 85 d2             	test   dx,dx
c000db59:	75 12                	jne    c000db6d <datetimeToSeconds(datetime_t)+0x8e>
c000db5b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000db61:	bf 90 01 00 00       	mov    edi,0x190
c000db66:	99                   	cdq    
c000db67:	f7 ff                	idiv   edi
c000db69:	85 d2                	test   edx,edx
c000db6b:	75 01                	jne    c000db6e <datetimeToSeconds(datetime_t)+0x8f>
c000db6d:	41                   	inc    ecx
c000db6e:	66 83 fb 46          	cmp    bx,0x46
c000db72:	76 45                	jbe    c000dbb9 <datetimeToSeconds(datetime_t)+0xda>
c000db74:	bb 46 00 00 00       	mov    ebx,0x46
c000db79:	bf 64 00 00 00       	mov    edi,0x64
c000db7e:	bd 90 01 00 00       	mov    ebp,0x190
c000db83:	b8 6d 01 00 00       	mov    eax,0x16d
c000db88:	f6 c3 03             	test   bl,0x3
c000db8b:	75 23                	jne    c000dbb0 <datetimeToSeconds(datetime_t)+0xd1>
c000db8d:	89 d8                	mov    eax,ebx
c000db8f:	99                   	cdq    
c000db90:	f7 ff                	idiv   edi
c000db92:	b8 6e 01 00 00       	mov    eax,0x16e
c000db97:	85 d2                	test   edx,edx
c000db99:	75 15                	jne    c000dbb0 <datetimeToSeconds(datetime_t)+0xd1>
c000db9b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000dba1:	99                   	cdq    
c000dba2:	f7 fd                	idiv   ebp
c000dba4:	83 fa 01             	cmp    edx,0x1
c000dba7:	19 c0                	sbb    eax,eax
c000dba9:	f7 d0                	not    eax
c000dbab:	05 6e 01 00 00       	add    eax,0x16e
c000dbb0:	01 c1                	add    ecx,eax
c000dbb2:	43                   	inc    ebx
c000dbb3:	39 f3                	cmp    ebx,esi
c000dbb5:	7c cc                	jl     c000db83 <datetimeToSeconds(datetime_t)+0xa4>
c000dbb7:	eb 35                	jmp    c000dbee <datetimeToSeconds(datetime_t)+0x10f>
c000dbb9:	74 33                	je     c000dbee <datetimeToSeconds(datetime_t)+0x10f>
c000dbbb:	b8 45 00 00 00       	mov    eax,0x45
c000dbc0:	89 c2                	mov    edx,eax
c000dbc2:	83 e2 03             	and    edx,0x3
c000dbc5:	39 f0                	cmp    eax,esi
c000dbc7:	7e 0f                	jle    c000dbd8 <datetimeToSeconds(datetime_t)+0xf9>
c000dbc9:	83 fa 01             	cmp    edx,0x1
c000dbcc:	19 d2                	sbb    edx,edx
c000dbce:	48                   	dec    eax
c000dbcf:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000dbd6:	eb e8                	jmp    c000dbc0 <datetimeToSeconds(datetime_t)+0xe1>
c000dbd8:	b8 6d 01 00 00       	mov    eax,0x16d
c000dbdd:	85 d2                	test   edx,edx
c000dbdf:	75 0b                	jne    c000dbec <datetimeToSeconds(datetime_t)+0x10d>
c000dbe1:	66 83 fb 01          	cmp    bx,0x1
c000dbe5:	19 c0                	sbb    eax,eax
c000dbe7:	05 6e 01 00 00       	add    eax,0x16e
c000dbec:	29 c1                	sub    ecx,eax
c000dbee:	b8 80 51 01 00       	mov    eax,0x15180
c000dbf3:	f7 e9                	imul   ecx
c000dbf5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000dbf9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000dbfd:	83 c4 14             	add    esp,0x14
c000dc00:	5b                   	pop    ebx
c000dc01:	5e                   	pop    esi
c000dc02:	5f                   	pop    edi
c000dc03:	5d                   	pop    ebp
c000dc04:	c3                   	ret    
c000dc05:	90                   	nop

c000dc06 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000dc06:	57                   	push   edi
c000dc07:	56                   	push   esi
c000dc08:	53                   	push   ebx
c000dc09:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dc0d:	8b 06                	mov    eax,DWORD PTR [esi]
c000dc0f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000dc12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dc16:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dc1a:	e8 c0 fe ff ff       	call   c000dadf <datetimeToSeconds(datetime_t)>
c000dc1f:	59                   	pop    ecx
c000dc20:	0f b6 0d bc 65 02 c0 	movzx  ecx,BYTE PTR ds:0xc00265bc
c000dc27:	5b                   	pop    ebx
c000dc28:	03 0d c0 65 02 c0    	add    ecx,DWORD PTR ds:0xc00265c0
c000dc2e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000dc34:	89 cb                	mov    ebx,ecx
c000dc36:	c1 fb 1f             	sar    ebx,0x1f
c000dc39:	29 c8                	sub    eax,ecx
c000dc3b:	19 da                	sbb    edx,ebx
c000dc3d:	31 c9                	xor    ecx,ecx
c000dc3f:	80 3d bd 65 02 c0 00 	cmp    BYTE PTR ds:0xc00265bd,0x0
c000dc46:	74 05                	je     c000dc4d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000dc48:	b9 08 07 00 00       	mov    ecx,0x708
c000dc4d:	31 db                	xor    ebx,ebx
c000dc4f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000dc53:	29 c8                	sub    eax,ecx
c000dc55:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dc59:	19 da                	sbb    edx,ebx
c000dc5b:	89 f8                	mov    eax,edi
c000dc5d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dc61:	5b                   	pop    ebx
c000dc62:	5e                   	pop    esi
c000dc63:	5f                   	pop    edi
c000dc64:	ff e0                	jmp    eax

c000dc66 <secondsToDatetime(unsigned long long)>:
c000dc66:	55                   	push   ebp
c000dc67:	57                   	push   edi
c000dc68:	56                   	push   esi
c000dc69:	53                   	push   ebx
c000dc6a:	83 ec 1c             	sub    esp,0x1c
c000dc6d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dc71:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000dc75:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dc79:	6a 00                	push   0x0
c000dc7b:	68 80 51 01 00       	push   0x15180
c000dc80:	55                   	push   ebp
c000dc81:	57                   	push   edi
c000dc82:	e8 1d 33 01 00       	call   c0020fa4 <__udivdi3>
c000dc87:	83 c4 10             	add    esp,0x10
c000dc8a:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000dc90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc94:	6a 00                	push   0x0
c000dc96:	68 80 51 01 00       	push   0x15180
c000dc9b:	55                   	push   ebp
c000dc9c:	57                   	push   edi
c000dc9d:	bf 10 0e 00 00       	mov    edi,0xe10
c000dca2:	e8 fd 33 01 00       	call   c00210a4 <__umoddi3>
c000dca7:	83 c4 10             	add    esp,0x10
c000dcaa:	99                   	cdq    
c000dcab:	f7 ff                	idiv   edi
c000dcad:	bf 3c 00 00 00       	mov    edi,0x3c
c000dcb2:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000dcb5:	89 d0                	mov    eax,edx
c000dcb7:	99                   	cdq    
c000dcb8:	f7 ff                	idiv   edi
c000dcba:	85 db                	test   ebx,ebx
c000dcbc:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000dcbf:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000dcc2:	79 11                	jns    c000dcd5 <secondsToDatetime(unsigned long long)+0x6f>
c000dcc4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dcc8:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000dcce:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000dcd3:	eb 07                	jmp    c000dcdc <secondsToDatetime(unsigned long long)+0x76>
c000dcd5:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000dcda:	89 d8                	mov    eax,ebx
c000dcdc:	bf b4 05 00 00       	mov    edi,0x5b4
c000dce1:	99                   	cdq    
c000dce2:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000dce7:	f7 f9                	idiv   ecx
c000dce9:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000dcee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dcf2:	31 d2                	xor    edx,edx
c000dcf4:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000dcfc:	01 c3                	add    ebx,eax
c000dcfe:	89 d8                	mov    eax,ebx
c000dd00:	f7 f1                	div    ecx
c000dd02:	31 d2                	xor    edx,edx
c000dd04:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000dd07:	89 d8                	mov    eax,ebx
c000dd09:	f7 f7                	div    edi
c000dd0b:	31 d2                	xor    edx,edx
c000dd0d:	29 c1                	sub    ecx,eax
c000dd0f:	89 d8                	mov    eax,ebx
c000dd11:	f7 f5                	div    ebp
c000dd13:	bd 6d 01 00 00       	mov    ebp,0x16d
c000dd18:	29 c1                	sub    ecx,eax
c000dd1a:	31 d2                	xor    edx,edx
c000dd1c:	89 c8                	mov    eax,ecx
c000dd1e:	f7 f5                	div    ebp
c000dd20:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000dd25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dd29:	31 d2                	xor    edx,edx
c000dd2b:	89 c8                	mov    eax,ecx
c000dd2d:	f7 f5                	div    ebp
c000dd2f:	31 d2                	xor    edx,edx
c000dd31:	01 c3                	add    ebx,eax
c000dd33:	89 c8                	mov    eax,ecx
c000dd35:	f7 f7                	div    edi
c000dd37:	bf 99 00 00 00       	mov    edi,0x99
c000dd3c:	29 c3                	sub    ebx,eax
c000dd3e:	31 d2                	xor    edx,edx
c000dd40:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000dd48:	29 c3                	sub    ebx,eax
c000dd4a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000dd4d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000dd50:	bb 05 00 00 00       	mov    ebx,0x5
c000dd55:	83 c1 02             	add    ecx,0x2
c000dd58:	89 c8                	mov    eax,ecx
c000dd5a:	f7 f7                	div    edi
c000dd5c:	31 d2                	xor    edx,edx
c000dd5e:	89 c7                	mov    edi,eax
c000dd60:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000dd66:	83 c0 02             	add    eax,0x2
c000dd69:	f7 f3                	div    ebx
c000dd6b:	89 eb                	mov    ebx,ebp
c000dd6d:	29 c3                	sub    ebx,eax
c000dd6f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000dd75:	88 1e                	mov    BYTE PTR [esi],bl
c000dd77:	19 c0                	sbb    eax,eax
c000dd79:	31 d2                	xor    edx,edx
c000dd7b:	83 e0 0c             	and    eax,0xc
c000dd7e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000dd82:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000dd8a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dd8e:	83 f9 01             	cmp    ecx,0x1
c000dd91:	0f 96 c2             	setbe  dl
c000dd94:	41                   	inc    ecx
c000dd95:	01 d0                	add    eax,edx
c000dd97:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000dd9a:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000dd9e:	83 c4 1c             	add    esp,0x1c
c000dda1:	89 f0                	mov    eax,esi
c000dda3:	5b                   	pop    ebx
c000dda4:	5e                   	pop    esi
c000dda5:	5f                   	pop    edi
c000dda6:	5d                   	pop    ebp
c000dda7:	c2 04 00             	ret    0x4

c000ddaa <Clock::timeInDatetimeLocal()>:
c000ddaa:	53                   	push   ebx
c000ddab:	83 ec 14             	sub    esp,0x14
c000ddae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ddb2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ddb6:	e8 83 fc ff ff       	call   c000da3e <Clock::timeInSecondsLocal()>
c000ddbb:	83 c4 0c             	add    esp,0xc
c000ddbe:	52                   	push   edx
c000ddbf:	50                   	push   eax
c000ddc0:	53                   	push   ebx
c000ddc1:	e8 a0 fe ff ff       	call   c000dc66 <secondsToDatetime(unsigned long long)>
c000ddc6:	89 d8                	mov    eax,ebx
c000ddc8:	83 c4 14             	add    esp,0x14
c000ddcb:	5b                   	pop    ebx
c000ddcc:	c2 04 00             	ret    0x4
c000ddcf:	90                   	nop

c000ddd0 <Device::hibernate()>:
c000ddd0:	c3                   	ret    
c000ddd1:	90                   	nop

c000ddd2 <Device::wake()>:
c000ddd2:	c3                   	ret    
c000ddd3:	90                   	nop

c000ddd4 <Device::detect()>:
c000ddd4:	c3                   	ret    
c000ddd5:	90                   	nop

c000ddd6 <Device::disableLegacy()>:
c000ddd6:	c3                   	ret    
c000ddd7:	90                   	nop

c000ddd8 <Device::powerSaving(PowerSavingLevel)>:
c000ddd8:	c3                   	ret    
c000ddd9:	90                   	nop

c000ddda <DriverlessDevice::close(int, int, void*)>:
c000ddda:	31 c0                	xor    eax,eax
c000dddc:	c3                   	ret    
c000dddd:	90                   	nop

c000ddde <DriverlessDevice::detect()>:
c000ddde:	c3                   	ret    
c000dddf:	90                   	nop

c000dde0 <DriverlessDevice::open(int, int, void*)>:
c000dde0:	83 ec 18             	sub    esp,0x18
c000dde3:	68 b0 33 02 c0       	push   0xc00233b0
c000dde8:	e8 b4 65 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c000dded:	83 c8 ff             	or     eax,0xffffffff
c000ddf0:	83 c4 1c             	add    esp,0x1c
c000ddf3:	c3                   	ret    

c000ddf4 <Device::~Device()>:
c000ddf4:	ba 10 34 02 c0       	mov    edx,0xc0023410
c000ddf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ddfd:	89 10                	mov    DWORD PTR [eax],edx
c000ddff:	90                   	nop
c000de00:	c3                   	ret    
c000de01:	90                   	nop

c000de02 <Device::~Device()>:
c000de02:	83 ec 0c             	sub    esp,0xc
c000de05:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000de09:	e8 e6 ff ff ff       	call   c000ddf4 <Device::~Device()>
c000de0e:	83 c4 04             	add    esp,0x4
c000de11:	83 ec 08             	sub    esp,0x8
c000de14:	68 58 01 00 00       	push   0x158
c000de19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de1d:	e8 dc eb ff ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c000de22:	83 c4 10             	add    esp,0x10
c000de25:	83 c4 0c             	add    esp,0xc
c000de28:	c3                   	ret    
c000de29:	90                   	nop

c000de2a <Device::findAndLoadDriver()>:
c000de2a:	c7 44 24 04 ce 33 02 c0 	mov    DWORD PTR [esp+0x4],0xc00233ce
c000de32:	e9 a8 ec ff ff       	jmp    c000cadf <Dbg::kprintf(char const*, ...)>
c000de37:	90                   	nop

c000de38 <Device::preOpenPCI(PCIDeviceInfo)>:
c000de38:	57                   	push   edi
c000de39:	b9 09 00 00 00       	mov    ecx,0x9
c000de3e:	56                   	push   esi
c000de3f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000de43:	8d 74 24 10          	lea    esi,[esp+0x10]
c000de47:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000de51:	81 c7 18 01 00 00    	add    edi,0x118
c000de57:	fc                   	cld    
c000de58:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000de5a:	5e                   	pop    esi
c000de5b:	5f                   	pop    edi
c000de5c:	c3                   	ret    
c000de5d:	90                   	nop

c000de5e <Device::preOpenACPI(void*, char*, char*)>:
c000de5e:	57                   	push   edi
c000de5f:	b9 1e 00 00 00       	mov    ecx,0x1e
c000de64:	56                   	push   esi
c000de65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de69:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de6d:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000de77:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000de7d:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000de83:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000de87:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000de89:	b9 0e 00 00 00       	mov    ecx,0xe
c000de8e:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000de94:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000de98:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000de9a:	5e                   	pop    esi
c000de9b:	5f                   	pop    edi
c000de9c:	c3                   	ret    
c000de9d:	90                   	nop

c000de9e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000de9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dea2:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000dea7:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000deae:	75 0b                	jne    c000debb <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000deb0:	8b 00                	mov    eax,DWORD PTR [eax]
c000deb2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000deb6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000deb9:	eb 1e                	jmp    c000ded9 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000debb:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c000dec0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000dec6:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000decc:	8b 08                	mov    ecx,DWORD PTR [eax]
c000dece:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000ded2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ded6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000ded9:	ff e0                	jmp    eax
c000dedb:	90                   	nop

c000dedc <Device::getParent()>:
c000dedc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dee0:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000dee6:	c3                   	ret    
c000dee7:	90                   	nop

c000dee8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000dee8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000deec:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000def1:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000def8:	75 0b                	jne    c000df05 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000defa:	8b 00                	mov    eax,DWORD PTR [eax]
c000defc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000df00:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000df03:	eb 1e                	jmp    c000df23 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000df05:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c000df0a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000df10:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000df16:	8b 08                	mov    ecx,DWORD PTR [eax]
c000df18:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000df1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000df20:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000df23:	ff e0                	jmp    eax
c000df25:	90                   	nop

c000df26 <Device::addChild(Device*)>:
c000df26:	53                   	push   ebx
c000df27:	83 ec 08             	sub    esp,0x8
c000df2a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000df2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000df32:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000df38:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000df3e:	8b 13                	mov    edx,DWORD PTR [ebx]
c000df40:	85 d2                	test   edx,edx
c000df42:	74 04                	je     c000df48 <Device::addChild(Device*)+0x22>
c000df44:	89 d3                	mov    ebx,edx
c000df46:	eb f6                	jmp    c000df3e <Device::addChild(Device*)+0x18>
c000df48:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000df4b:	83 ec 0c             	sub    esp,0xc
c000df4e:	6a 08                	push   0x8
c000df50:	e8 6e ba ff ff       	call   c00099c3 <malloc>
c000df55:	89 03                	mov    DWORD PTR [ebx],eax
c000df57:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000df5d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000df64:	83 c4 18             	add    esp,0x18
c000df67:	5b                   	pop    ebx
c000df68:	c3                   	ret    
c000df69:	90                   	nop

c000df6a <Device::removeAllChildren()>:
c000df6a:	56                   	push   esi
c000df6b:	53                   	push   ebx
c000df6c:	52                   	push   edx
c000df6d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df71:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000df77:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000df7a:	74 17                	je     c000df93 <Device::removeAllChildren()+0x29>
c000df7c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000df7f:	85 c0                	test   eax,eax
c000df81:	74 0c                	je     c000df8f <Device::removeAllChildren()+0x25>
c000df83:	83 ec 0c             	sub    esp,0xc
c000df86:	8b 10                	mov    edx,DWORD PTR [eax]
c000df88:	50                   	push   eax
c000df89:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000df8c:	83 c4 10             	add    esp,0x10
c000df8f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000df91:	eb e4                	jmp    c000df77 <Device::removeAllChildren()+0xd>
c000df93:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000df99:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000df9f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000dfa5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000dfac:	58                   	pop    eax
c000dfad:	5b                   	pop    ebx
c000dfae:	5e                   	pop    esi
c000dfaf:	c3                   	ret    

c000dfb0 <Device::hibernateAll()>:
c000dfb0:	53                   	push   ebx
c000dfb1:	83 ec 14             	sub    esp,0x14
c000dfb4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dfb8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dfba:	53                   	push   ebx
c000dfbb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000dfbe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dfc4:	83 c4 10             	add    esp,0x10
c000dfc7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dfca:	74 0f                	je     c000dfdb <Device::hibernateAll()+0x2b>
c000dfcc:	83 ec 0c             	sub    esp,0xc
c000dfcf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dfd2:	e8 d9 ff ff ff       	call   c000dfb0 <Device::hibernateAll()>
c000dfd7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dfd9:	eb e9                	jmp    c000dfc4 <Device::hibernateAll()+0x14>
c000dfdb:	83 c4 08             	add    esp,0x8
c000dfde:	5b                   	pop    ebx
c000dfdf:	c3                   	ret    

c000dfe0 <Device::wakeAll()>:
c000dfe0:	53                   	push   ebx
c000dfe1:	83 ec 14             	sub    esp,0x14
c000dfe4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dfe8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dfea:	53                   	push   ebx
c000dfeb:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000dfee:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dff4:	83 c4 10             	add    esp,0x10
c000dff7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dffa:	74 0f                	je     c000e00b <Device::wakeAll()+0x2b>
c000dffc:	83 ec 0c             	sub    esp,0xc
c000dfff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e002:	e8 d9 ff ff ff       	call   c000dfe0 <Device::wakeAll()>
c000e007:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e009:	eb e9                	jmp    c000dff4 <Device::wakeAll()+0x14>
c000e00b:	83 c4 08             	add    esp,0x8
c000e00e:	5b                   	pop    ebx
c000e00f:	c3                   	ret    

c000e010 <Device::detectAll()>:
c000e010:	53                   	push   ebx
c000e011:	83 ec 14             	sub    esp,0x14
c000e014:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e018:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e01a:	53                   	push   ebx
c000e01b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000e01e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e024:	83 c4 10             	add    esp,0x10
c000e027:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e02a:	74 0f                	je     c000e03b <Device::detectAll()+0x2b>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e032:	e8 d9 ff ff ff       	call   c000e010 <Device::detectAll()>
c000e037:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e039:	eb e9                	jmp    c000e024 <Device::detectAll()+0x14>
c000e03b:	83 c4 08             	add    esp,0x8
c000e03e:	5b                   	pop    ebx
c000e03f:	c3                   	ret    

c000e040 <Device::disableLegacyAll()>:
c000e040:	53                   	push   ebx
c000e041:	83 ec 14             	sub    esp,0x14
c000e044:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e048:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e04a:	53                   	push   ebx
c000e04b:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000e04e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e054:	83 c4 10             	add    esp,0x10
c000e057:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e05a:	74 0f                	je     c000e06b <Device::disableLegacyAll()+0x2b>
c000e05c:	83 ec 0c             	sub    esp,0xc
c000e05f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e062:	e8 d9 ff ff ff       	call   c000e040 <Device::disableLegacyAll()>
c000e067:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e069:	eb e9                	jmp    c000e054 <Device::disableLegacyAll()+0x14>
c000e06b:	83 c4 08             	add    esp,0x8
c000e06e:	5b                   	pop    ebx
c000e06f:	c3                   	ret    

c000e070 <Device::loadDriversForAll()>:
c000e070:	53                   	push   ebx
c000e071:	83 ec 08             	sub    esp,0x8
c000e074:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e078:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e07f:	75 0c                	jne    c000e08d <Device::loadDriversForAll()+0x1d>
c000e081:	83 ec 0c             	sub    esp,0xc
c000e084:	53                   	push   ebx
c000e085:	e8 a0 fd ff ff       	call   c000de2a <Device::findAndLoadDriver()>
c000e08a:	83 c4 10             	add    esp,0x10
c000e08d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e093:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e096:	74 12                	je     c000e0aa <Device::loadDriversForAll()+0x3a>
c000e098:	83 ec 0c             	sub    esp,0xc
c000e09b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e09e:	e8 cd ff ff ff       	call   c000e070 <Device::loadDriversForAll()>
c000e0a3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e0a5:	83 c4 10             	add    esp,0x10
c000e0a8:	eb e9                	jmp    c000e093 <Device::loadDriversForAll()+0x23>
c000e0aa:	83 c4 08             	add    esp,0x8
c000e0ad:	5b                   	pop    ebx
c000e0ae:	c3                   	ret    
c000e0af:	90                   	nop

c000e0b0 <Device::closeAll()>:
c000e0b0:	53                   	push   ebx
c000e0b1:	83 ec 08             	sub    esp,0x8
c000e0b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e0b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e0ba:	6a 00                	push   0x0
c000e0bc:	6a 00                	push   0x0
c000e0be:	6a 00                	push   0x0
c000e0c0:	53                   	push   ebx
c000e0c1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e0c4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e0ca:	83 c4 10             	add    esp,0x10
c000e0cd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e0d0:	74 0f                	je     c000e0e1 <Device::closeAll()+0x31>
c000e0d2:	83 ec 0c             	sub    esp,0xc
c000e0d5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0d8:	e8 d3 ff ff ff       	call   c000e0b0 <Device::closeAll()>
c000e0dd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e0df:	eb e9                	jmp    c000e0ca <Device::closeAll()+0x1a>
c000e0e1:	83 c4 08             	add    esp,0x8
c000e0e4:	5b                   	pop    ebx
c000e0e5:	c3                   	ret    

c000e0e6 <Device::powerSavingAll(PowerSavingLevel)>:
c000e0e6:	56                   	push   esi
c000e0e7:	53                   	push   ebx
c000e0e8:	83 ec 0c             	sub    esp,0xc
c000e0eb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e0ef:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e0f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e0f5:	56                   	push   esi
c000e0f6:	53                   	push   ebx
c000e0f7:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e0fa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e100:	83 c4 10             	add    esp,0x10
c000e103:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e106:	74 0f                	je     c000e117 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e108:	52                   	push   edx
c000e109:	52                   	push   edx
c000e10a:	56                   	push   esi
c000e10b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e10e:	e8 d3 ff ff ff       	call   c000e0e6 <Device::powerSavingAll(PowerSavingLevel)>
c000e113:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e115:	eb e9                	jmp    c000e100 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e117:	58                   	pop    eax
c000e118:	5b                   	pop    ebx
c000e119:	5e                   	pop    esi
c000e11a:	c3                   	ret    
c000e11b:	90                   	nop

c000e11c <Device::setName(char const*)>:
c000e11c:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e124:	e9 17 26 ff ff       	jmp    c0000740 <strcpy>
c000e129:	90                   	nop

c000e12a <Device::Device(char const*)>:
c000e12a:	83 ec 1c             	sub    esp,0x1c
c000e12d:	ba 10 34 02 c0       	mov    edx,0xc0023410
c000e132:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e136:	89 10                	mov    DWORD PTR [eax],edx
c000e138:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e13c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e146:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e14a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e154:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e158:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e162:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e166:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e170:	83 ec 08             	sub    esp,0x8
c000e173:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e177:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e17b:	e8 9c ff ff ff       	call   c000e11c <Device::setName(char const*)>
c000e180:	83 c4 10             	add    esp,0x10
c000e183:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e18b:	83 ec 0c             	sub    esp,0xc
c000e18e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e192:	e8 2c b8 ff ff       	call   c00099c3 <malloc>
c000e197:	83 c4 10             	add    esp,0x10
c000e19a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e1a0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e1a7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e1ab:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e1b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1b5:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e1bb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e1c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1c5:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e1cb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e1d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1d6:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e1dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1e1:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e1e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1ec:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e1f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1fa:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e204:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e208:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e212:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e216:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e220:	90                   	nop
c000e221:	83 c4 1c             	add    esp,0x1c
c000e224:	c3                   	ret    
c000e225:	90                   	nop

c000e226 <Device::getName()>:
c000e226:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e22a:	05 d0 00 00 00       	add    eax,0xd0
c000e22f:	c3                   	ret    

c000e230 <DriverlessDevice::DriverlessDevice(char const*)>:
c000e230:	83 ec 0c             	sub    esp,0xc
c000e233:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e237:	83 ec 08             	sub    esp,0x8
c000e23a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e23e:	50                   	push   eax
c000e23f:	e8 e6 fe ff ff       	call   c000e12a <Device::Device(char const*)>
c000e244:	83 c4 10             	add    esp,0x10
c000e247:	ba 3c 34 02 c0       	mov    edx,0xc002343c
c000e24c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e250:	89 10                	mov    DWORD PTR [eax],edx
c000e252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e256:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e260:	90                   	nop
c000e261:	83 c4 0c             	add    esp,0xc
c000e264:	c3                   	ret    
c000e265:	90                   	nop

c000e266 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e266:	57                   	push   edi
c000e267:	56                   	push   esi
c000e268:	53                   	push   ebx
c000e269:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e26d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e271:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e275:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e27b:	75 0c                	jne    c000e289 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e27d:	52                   	push   edx
c000e27e:	52                   	push   edx
c000e27f:	53                   	push   ebx
c000e280:	56                   	push   esi
c000e281:	e8 d0 31 01 00       	call   c0021456 <LinkedList<Device>::addElement(Device*)>
c000e286:	83 c4 10             	add    esp,0x10
c000e289:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e28f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e292:	74 12                	je     c000e2a6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e294:	50                   	push   eax
c000e295:	57                   	push   edi
c000e296:	56                   	push   esi
c000e297:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e29a:	e8 c7 ff ff ff       	call   c000e266 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e29f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e2a1:	83 c4 10             	add    esp,0x10
c000e2a4:	eb e9                	jmp    c000e28f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e2a6:	5b                   	pop    ebx
c000e2a7:	5e                   	pop    esi
c000e2a8:	5f                   	pop    edi
c000e2a9:	c3                   	ret    

c000e2aa <getDevicesOfType(DeviceType)>:
c000e2aa:	53                   	push   ebx
c000e2ab:	83 ec 14             	sub    esp,0x14
c000e2ae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e2b2:	53                   	push   ebx
c000e2b3:	e8 7a 32 01 00       	call   c0021532 <LinkedList<Device>::LinkedList()>
c000e2b8:	83 c4 0c             	add    esp,0xc
c000e2bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e2bf:	53                   	push   ebx
c000e2c0:	ff 35 88 64 02 c0    	push   DWORD PTR ds:0xc0026488
c000e2c6:	e8 9b ff ff ff       	call   c000e266 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e2cb:	89 d8                	mov    eax,ebx
c000e2cd:	83 c4 18             	add    esp,0x18
c000e2d0:	5b                   	pop    ebx
c000e2d1:	c2 04 00             	ret    0x4

c000e2d4 <HardDiskController::HardDiskController(char const*)>:
c000e2d4:	83 ec 0c             	sub    esp,0xc
c000e2d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2db:	83 ec 08             	sub    esp,0x8
c000e2de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2e2:	50                   	push   eax
c000e2e3:	e8 42 fe ff ff       	call   c000e12a <Device::Device(char const*)>
c000e2e8:	83 c4 10             	add    esp,0x10
c000e2eb:	ba 68 34 02 c0       	mov    edx,0xc0023468
c000e2f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2f4:	89 10                	mov    DWORD PTR [eax],edx
c000e2f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2fa:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000e304:	90                   	nop
c000e305:	83 c4 0c             	add    esp,0xc
c000e308:	c3                   	ret    
c000e309:	90                   	nop
c000e30a:	66 90                	xchg   ax,ax

c000e30c <HardDiskController::~HardDiskController()>:
c000e30c:	83 ec 0c             	sub    esp,0xc
c000e30f:	ba 68 34 02 c0       	mov    edx,0xc0023468
c000e314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e318:	89 10                	mov    DWORD PTR [eax],edx
c000e31a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e31e:	83 ec 0c             	sub    esp,0xc
c000e321:	50                   	push   eax
c000e322:	e8 cd fa ff ff       	call   c000ddf4 <Device::~Device()>
c000e327:	83 c4 10             	add    esp,0x10
c000e32a:	90                   	nop
c000e32b:	83 c4 0c             	add    esp,0xc
c000e32e:	c3                   	ret    
c000e32f:	90                   	nop

c000e330 <HardDiskController::~HardDiskController()>:
c000e330:	83 ec 0c             	sub    esp,0xc
c000e333:	83 ec 0c             	sub    esp,0xc
c000e336:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e33a:	e8 cd ff ff ff       	call   c000e30c <HardDiskController::~HardDiskController()>
c000e33f:	83 c4 10             	add    esp,0x10
c000e342:	83 ec 08             	sub    esp,0x8
c000e345:	68 58 01 00 00       	push   0x158
c000e34a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e34e:	e8 ab e6 ff ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	83 c4 0c             	add    esp,0xc
c000e359:	c3                   	ret    

c000e35a <PhysicalDisk::eject()>:
c000e35a:	83 c8 ff             	or     eax,0xffffffff
c000e35d:	c3                   	ret    

c000e35e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000e35e:	83 ec 0c             	sub    esp,0xc
c000e361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e365:	83 ec 08             	sub    esp,0x8
c000e368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e36c:	50                   	push   eax
c000e36d:	e8 b8 fd ff ff       	call   c000e12a <Device::Device(char const*)>
c000e372:	83 c4 10             	add    esp,0x10
c000e375:	ba 94 34 02 c0       	mov    edx,0xc0023494
c000e37a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e37e:	89 10                	mov    DWORD PTR [eax],edx
c000e380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e384:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000e38b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e38f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000e396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e39a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000e3a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3a8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e3ac:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000e3b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3b6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e3c0:	90                   	nop
c000e3c1:	83 c4 0c             	add    esp,0xc
c000e3c4:	c3                   	ret    
c000e3c5:	90                   	nop

c000e3c6 <PhysicalDisk::startCache()>:
c000e3c6:	56                   	push   esi
c000e3c7:	53                   	push   ebx
c000e3c8:	83 ec 10             	sub    esp,0x10
c000e3cb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e3cf:	6a 44                	push   0x44
c000e3d1:	e8 ed b5 ff ff       	call   c00099c3 <malloc>
c000e3d6:	89 c6                	mov    esi,eax
c000e3d8:	58                   	pop    eax
c000e3d9:	5a                   	pop    edx
c000e3da:	53                   	push   ebx
c000e3db:	56                   	push   esi
c000e3dc:	e8 2f 26 00 00       	call   c0010a10 <VCache::VCache(PhysicalDisk*)>
c000e3e1:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e3e7:	83 c4 14             	add    esp,0x14
c000e3ea:	5b                   	pop    ebx
c000e3eb:	5e                   	pop    esi
c000e3ec:	c3                   	ret    
c000e3ed:	90                   	nop

c000e3ee <PhysicalDisk::~PhysicalDisk()>:
c000e3ee:	83 ec 0c             	sub    esp,0xc
c000e3f1:	ba 94 34 02 c0       	mov    edx,0xc0023494
c000e3f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3fa:	89 10                	mov    DWORD PTR [eax],edx
c000e3fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e400:	83 ec 0c             	sub    esp,0xc
c000e403:	50                   	push   eax
c000e404:	e8 eb f9 ff ff       	call   c000ddf4 <Device::~Device()>
c000e409:	83 c4 10             	add    esp,0x10
c000e40c:	90                   	nop
c000e40d:	83 c4 0c             	add    esp,0xc
c000e410:	c3                   	ret    
c000e411:	90                   	nop

c000e412 <PhysicalDisk::~PhysicalDisk()>:
c000e412:	83 ec 0c             	sub    esp,0xc
c000e415:	83 ec 0c             	sub    esp,0xc
c000e418:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e41c:	e8 cd ff ff ff       	call   c000e3ee <PhysicalDisk::~PhysicalDisk()>
c000e421:	83 c4 10             	add    esp,0x10
c000e424:	83 ec 08             	sub    esp,0x8
c000e427:	68 6c 01 00 00       	push   0x16c
c000e42c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e430:	e8 c9 e5 ff ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c000e435:	83 c4 10             	add    esp,0x10
c000e438:	83 c4 0c             	add    esp,0xc
c000e43b:	c3                   	ret    

c000e43c <FPU::FPU(char const*)>:
c000e43c:	83 ec 0c             	sub    esp,0xc
c000e43f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e443:	83 ec 08             	sub    esp,0x8
c000e446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e44a:	50                   	push   eax
c000e44b:	e8 da fc ff ff       	call   c000e12a <Device::Device(char const*)>
c000e450:	83 c4 10             	add    esp,0x10
c000e453:	ba d8 34 02 c0       	mov    edx,0xc00234d8
c000e458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e45c:	89 10                	mov    DWORD PTR [eax],edx
c000e45e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e462:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e46c:	90                   	nop
c000e46d:	83 c4 0c             	add    esp,0xc
c000e470:	c3                   	ret    
c000e471:	90                   	nop
c000e472:	66 90                	xchg   ax,ax

c000e474 <FPU::~FPU()>:
c000e474:	83 ec 0c             	sub    esp,0xc
c000e477:	ba d8 34 02 c0       	mov    edx,0xc00234d8
c000e47c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e480:	89 10                	mov    DWORD PTR [eax],edx
c000e482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e486:	83 ec 0c             	sub    esp,0xc
c000e489:	50                   	push   eax
c000e48a:	e8 65 f9 ff ff       	call   c000ddf4 <Device::~Device()>
c000e48f:	83 c4 10             	add    esp,0x10
c000e492:	90                   	nop
c000e493:	83 c4 0c             	add    esp,0xc
c000e496:	c3                   	ret    
c000e497:	90                   	nop

c000e498 <FPU::~FPU()>:
c000e498:	83 ec 0c             	sub    esp,0xc
c000e49b:	83 ec 0c             	sub    esp,0xc
c000e49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4a2:	e8 cd ff ff ff       	call   c000e474 <FPU::~FPU()>
c000e4a7:	83 c4 10             	add    esp,0x10
c000e4aa:	83 ec 08             	sub    esp,0x8
c000e4ad:	68 58 01 00 00       	push   0x158
c000e4b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4b6:	e8 43 e5 ff ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c000e4bb:	83 c4 10             	add    esp,0x10
c000e4be:	83 c4 0c             	add    esp,0xc
c000e4c1:	c3                   	ret    

c000e4c2 <setupFPU()>:
c000e4c2:	53                   	push   ebx
c000e4c3:	83 ec 08             	sub    esp,0x8
c000e4c6:	8b 15 88 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026488
c000e4cc:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c000e4d3:	74 1b                	je     c000e4f0 <setupFPU()+0x2e>
c000e4d5:	83 ec 0c             	sub    esp,0xc
c000e4d8:	68 58 01 00 00       	push   0x158
c000e4dd:	e8 e1 b4 ff ff       	call   c00099c3 <malloc>
c000e4e2:	89 c3                	mov    ebx,eax
c000e4e4:	89 04 24             	mov    DWORD PTR [esp],eax
c000e4e7:	e8 48 16 01 00       	call   c001fb34 <AVX::AVX()>
c000e4ec:	eb 62                	jmp    c000e550 <setupFPU()+0x8e>
c000e4ee:	66 90                	xchg   ax,ax
c000e4f0:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c000e4f6:	84 c0                	test   al,al
c000e4f8:	79 1a                	jns    c000e514 <setupFPU()+0x52>
c000e4fa:	83 ec 0c             	sub    esp,0xc
c000e4fd:	68 58 01 00 00       	push   0x158
c000e502:	e8 bc b4 ff ff       	call   c00099c3 <malloc>
c000e507:	89 c3                	mov    ebx,eax
c000e509:	89 04 24             	mov    DWORD PTR [esp],eax
c000e50c:	e8 53 17 01 00       	call   c001fc64 <SSE::SSE()>
c000e511:	eb 3d                	jmp    c000e550 <setupFPU()+0x8e>
c000e513:	90                   	nop
c000e514:	a8 20                	test   al,0x20
c000e516:	74 1c                	je     c000e534 <setupFPU()+0x72>
c000e518:	83 ec 0c             	sub    esp,0xc
c000e51b:	68 58 01 00 00       	push   0x158
c000e520:	e8 9e b4 ff ff       	call   c00099c3 <malloc>
c000e525:	89 c3                	mov    ebx,eax
c000e527:	89 04 24             	mov    DWORD PTR [esp],eax
c000e52a:	e8 99 16 01 00       	call   c001fbc8 <MMX::MMX()>
c000e52f:	eb 1f                	jmp    c000e550 <setupFPU()+0x8e>
c000e531:	8d 76 00             	lea    esi,[esi+0x0]
c000e534:	a8 10                	test   al,0x10
c000e536:	74 20                	je     c000e558 <setupFPU()+0x96>
c000e538:	83 ec 0c             	sub    esp,0xc
c000e53b:	68 58 01 00 00       	push   0x158
c000e540:	e8 7e b4 ff ff       	call   c00099c3 <malloc>
c000e545:	89 c3                	mov    ebx,eax
c000e547:	89 04 24             	mov    DWORD PTR [esp],eax
c000e54a:	e8 a9 17 01 00       	call   c001fcf8 <x87::x87()>
c000e54f:	90                   	nop
c000e550:	83 c4 10             	add    esp,0x10
c000e553:	eb 27                	jmp    c000e57c <setupFPU()+0xba>
c000e555:	8d 76 00             	lea    esi,[esi+0x0]
c000e558:	83 e0 ef             	and    eax,0xffffffef
c000e55b:	83 ec 0c             	sub    esp,0xc
c000e55e:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c000e564:	68 c4 34 02 c0       	push   0xc00234c4
c000e569:	e8 71 e5 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000e56e:	0f 20 c0             	mov    eax,cr0
c000e571:	83 c8 04             	or     eax,0x4
c000e574:	0f 22 c0             	mov    cr0,eax
c000e577:	31 db                	xor    ebx,ebx
c000e579:	83 c4 10             	add    esp,0x10
c000e57c:	89 d8                	mov    eax,ebx
c000e57e:	83 c4 08             	add    esp,0x8
c000e581:	5b                   	pop    ebx
c000e582:	c3                   	ret    
c000e583:	90                   	nop

c000e584 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000e584:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e588:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e58c:	c1 e0 04             	shl    eax,0x4
c000e58f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000e593:	8d 50 10             	lea    edx,[eax+0x10]
c000e596:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000e59c:	74 08                	je     c000e5a6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000e59e:	83 c0 04             	add    eax,0x4
c000e5a1:	39 d0                	cmp    eax,edx
c000e5a3:	75 f1                	jne    c000e596 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000e5a5:	c3                   	ret    
c000e5a6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e5b0:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e5ba:	eb e2                	jmp    c000e59e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000e5bc <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000e5bc:	57                   	push   edi
c000e5bd:	31 c0                	xor    eax,eax
c000e5bf:	56                   	push   esi
c000e5c0:	53                   	push   ebx
c000e5c1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e5c5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e5c9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e5cd:	89 da                	mov    edx,ebx
c000e5cf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e5d3:	c1 e2 04             	shl    edx,0x4
c000e5d6:	01 ca                	add    edx,ecx
c000e5d8:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000e5e0:	74 16                	je     c000e5f8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000e5e2:	40                   	inc    eax
c000e5e3:	83 f8 04             	cmp    eax,0x4
c000e5e6:	75 f0                	jne    c000e5d8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000e5e8:	c7 44 24 10 08 35 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023508
c000e5f0:	5b                   	pop    ebx
c000e5f1:	5e                   	pop    esi
c000e5f2:	5f                   	pop    edi
c000e5f3:	e9 a9 5d 00 00       	jmp    c00143a1 <Krnl::panic(char const*)>
c000e5f8:	8d 04 98             	lea    eax,[eax+ebx*4]
c000e5fb:	8d 04 81             	lea    eax,[ecx+eax*4]
c000e5fe:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000e604:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000e60a:	5b                   	pop    ebx
c000e60b:	5e                   	pop    esi
c000e60c:	5f                   	pop    edi
c000e60d:	c3                   	ret    

c000e60e <doubleFault(regs*, void*)>:
c000e60e:	55                   	push   ebp
c000e60f:	89 e5                	mov    ebp,esp
c000e611:	83 ec 08             	sub    esp,0x8
c000e614:	83 ec 0c             	sub    esp,0xc
c000e617:	68 15 35 02 c0       	push   0xc0023515
c000e61c:	e8 80 5d 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c000e621:	83 c4 10             	add    esp,0x10
c000e624:	90                   	nop
c000e625:	c9                   	leave  
c000e626:	c3                   	ret    
c000e627:	90                   	nop

c000e628 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e628:	56                   	push   esi
c000e629:	53                   	push   ebx
c000e62a:	50                   	push   eax
c000e62b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e62f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e633:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e638:	75 35                	jne    c000e66f <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000e63a:	8d 43 20             	lea    eax,[ebx+0x20]
c000e63d:	31 d2                	xor    edx,edx
c000e63f:	89 c1                	mov    ecx,eax
c000e641:	c1 e1 04             	shl    ecx,0x4
c000e644:	01 f1                	add    ecx,esi
c000e646:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000e64e:	74 3e                	je     c000e68e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000e650:	42                   	inc    edx
c000e651:	83 fa 04             	cmp    edx,0x4
c000e654:	75 f0                	jne    c000e646 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000e656:	83 ec 0c             	sub    esp,0xc
c000e659:	68 2f 35 02 c0       	push   0xc002352f
c000e65e:	e8 3e 5d 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c000e663:	83 c4 10             	add    esp,0x10
c000e666:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e66b:	5a                   	pop    edx
c000e66c:	5b                   	pop    ebx
c000e66d:	5e                   	pop    esi
c000e66e:	c3                   	ret    
c000e66f:	83 ec 0c             	sub    esp,0xc
c000e672:	56                   	push   esi
c000e673:	e8 ae fb ff ff       	call   c000e226 <Device::getName()>
c000e678:	83 c4 10             	add    esp,0x10
c000e67b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e67e:	75 ba                	jne    c000e63a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e680:	83 fb 0f             	cmp    ebx,0xf
c000e683:	7f 29                	jg     c000e6ae <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000e685:	0f b6 9b 80 5b 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffda480]
c000e68c:	eb ac                	jmp    c000e63a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e68e:	8d 04 82             	lea    eax,[edx+eax*4]
c000e691:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e695:	8d 04 86             	lea    eax,[esi+eax*4]
c000e698:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000e69e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e6a2:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000e6a8:	89 d8                	mov    eax,ebx
c000e6aa:	5a                   	pop    edx
c000e6ab:	5b                   	pop    ebx
c000e6ac:	5e                   	pop    esi
c000e6ad:	c3                   	ret    
c000e6ae:	83 ec 0c             	sub    esp,0xc
c000e6b1:	68 22 35 02 c0       	push   0xc0023522
c000e6b6:	e8 e6 5c 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c000e6bb:	83 c4 10             	add    esp,0x10
c000e6be:	e9 77 ff ff ff       	jmp    c000e63a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e6c3:	90                   	nop

c000e6c4 <InterruptController::clearAllHandlers(int, bool)>:
c000e6c4:	56                   	push   esi
c000e6c5:	53                   	push   ebx
c000e6c6:	52                   	push   edx
c000e6c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e6cb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e6cf:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000e6d4:	75 61                	jne    c000e737 <InterruptController::clearAllHandlers(int, bool)+0x73>
c000e6d6:	8d 46 20             	lea    eax,[esi+0x20]
c000e6d9:	c1 e6 04             	shl    esi,0x4
c000e6dc:	c1 e0 04             	shl    eax,0x4
c000e6df:	01 de                	add    esi,ebx
c000e6e1:	01 d8                	add    eax,ebx
c000e6e3:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000e6ed:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000e6f7:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000e701:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e70b:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000e715:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000e71f:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000e729:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000e733:	58                   	pop    eax
c000e734:	5b                   	pop    ebx
c000e735:	5e                   	pop    esi
c000e736:	c3                   	ret    
c000e737:	83 ec 0c             	sub    esp,0xc
c000e73a:	53                   	push   ebx
c000e73b:	e8 e6 fa ff ff       	call   c000e226 <Device::getName()>
c000e740:	83 c4 10             	add    esp,0x10
c000e743:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e746:	75 8e                	jne    c000e6d6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e748:	83 fe 0f             	cmp    esi,0xf
c000e74b:	7f 09                	jg     c000e756 <InterruptController::clearAllHandlers(int, bool)+0x92>
c000e74d:	0f b6 b6 80 5b 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffda480]
c000e754:	eb 80                	jmp    c000e6d6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e756:	83 ec 0c             	sub    esp,0xc
c000e759:	68 3c 35 02 c0       	push   0xc002353c
c000e75e:	e8 3e 5c 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c000e763:	83 c4 10             	add    esp,0x10
c000e766:	e9 6b ff ff ff       	jmp    c000e6d6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e76b:	90                   	nop

c000e76c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e76c:	56                   	push   esi
c000e76d:	53                   	push   ebx
c000e76e:	52                   	push   edx
c000e76f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e773:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e777:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e77c:	75 3a                	jne    c000e7b8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000e77e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e782:	8d 50 20             	lea    edx,[eax+0x20]
c000e785:	c1 e2 04             	shl    edx,0x4
c000e788:	8d 04 16             	lea    eax,[esi+edx*1]
c000e78b:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000e78f:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000e795:	74 0b                	je     c000e7a2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000e797:	83 c0 04             	add    eax,0x4
c000e79a:	39 d0                	cmp    eax,edx
c000e79c:	75 f1                	jne    c000e78f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000e79e:	58                   	pop    eax
c000e79f:	5b                   	pop    ebx
c000e7a0:	5e                   	pop    esi
c000e7a1:	c3                   	ret    
c000e7a2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e7ac:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e7b6:	eb df                	jmp    c000e797 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000e7b8:	83 ec 0c             	sub    esp,0xc
c000e7bb:	56                   	push   esi
c000e7bc:	e8 65 fa ff ff       	call   c000e226 <Device::getName()>
c000e7c1:	83 c4 10             	add    esp,0x10
c000e7c4:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e7c7:	75 b5                	jne    c000e77e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000e7c9:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000e7ce:	7f 11                	jg     c000e7e1 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000e7d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e7d4:	0f b6 80 80 5b 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda480]
c000e7db:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e7df:	eb 9d                	jmp    c000e77e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000e7e1:	83 ec 0c             	sub    esp,0xc
c000e7e4:	68 49 35 02 c0       	push   0xc0023549
c000e7e9:	e8 b3 5b 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c000e7ee:	83 c4 10             	add    esp,0x10
c000e7f1:	eb 8b                	jmp    c000e77e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000e7f3 <nmiHandler(regs*, void*)>:
c000e7f3:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c000e7f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e7fc:	e9 8d a9 ff ff       	jmp    c000918e <Computer::handleNMI()>

c000e801 <int_handler>:
c000e801:	55                   	push   ebp
c000e802:	57                   	push   edi
c000e803:	56                   	push   esi
c000e804:	53                   	push   ebx
c000e805:	83 ec 0c             	sub    esp,0xc
c000e808:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000e80c:	80 3d 64 6f 02 c0 00 	cmp    BYTE PTR ds:0xc0026f64,0x0
c000e813:	74 0b                	je     c000e820 <int_handler+0x1f>
c000e815:	fa                   	cli    
c000e816:	f4                   	hlt    
c000e817:	80 3d 64 6f 02 c0 00 	cmp    BYTE PTR ds:0xc0026f64,0x0
c000e81e:	75 f5                	jne    c000e815 <int_handler+0x14>
c000e820:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c000e825:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000e828:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e82e:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000e834:	8d 43 e0             	lea    eax,[ebx-0x20]
c000e837:	83 f8 17             	cmp    eax,0x17
c000e83a:	77 13                	ja     c000e84f <int_handler+0x4e>
c000e83c:	83 ec 08             	sub    esp,0x8
c000e83f:	8b 17                	mov    edx,DWORD PTR [edi]
c000e841:	8d 43 e0             	lea    eax,[ebx-0x20]
c000e844:	0f b6 c0             	movzx  eax,al
c000e847:	50                   	push   eax
c000e848:	57                   	push   edi
c000e849:	ff 52 38             	call   DWORD PTR [edx+0x38]
c000e84c:	83 c4 10             	add    esp,0x10
c000e84f:	83 c3 15             	add    ebx,0x15
c000e852:	c1 e3 04             	shl    ebx,0x4
c000e855:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c000e859:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c000e860:	31 db                	xor    ebx,ebx
c000e862:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000e866:	85 c0                	test   eax,eax
c000e868:	74 13                	je     c000e87d <int_handler+0x7c>
c000e86a:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000e86d:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000e871:	74 1c                	je     c000e88f <int_handler+0x8e>
c000e873:	83 ec 08             	sub    esp,0x8
c000e876:	52                   	push   edx
c000e877:	56                   	push   esi
c000e878:	ff d0                	call   eax
c000e87a:	83 c4 10             	add    esp,0x10
c000e87d:	43                   	inc    ebx
c000e87e:	83 fb 04             	cmp    ebx,0x4
c000e881:	75 df                	jne    c000e862 <int_handler+0x61>
c000e883:	83 c4 0c             	add    esp,0xc
c000e886:	31 c0                	xor    eax,eax
c000e888:	5b                   	pop    ebx
c000e889:	31 d2                	xor    edx,edx
c000e88b:	5e                   	pop    esi
c000e88c:	5f                   	pop    edi
c000e88d:	5d                   	pop    ebp
c000e88e:	c3                   	ret    
c000e88f:	83 ec 08             	sub    esp,0x8
c000e892:	52                   	push   edx
c000e893:	56                   	push   esi
c000e894:	ff d0                	call   eax
c000e896:	83 c4 10             	add    esp,0x10
c000e899:	83 c4 0c             	add    esp,0xc
c000e89c:	5b                   	pop    ebx
c000e89d:	5e                   	pop    esi
c000e89e:	5f                   	pop    edi
c000e89f:	5d                   	pop    ebp
c000e8a0:	c3                   	ret    
c000e8a1:	90                   	nop

c000e8a2 <InterruptController::InterruptController(char const*)>:
c000e8a2:	83 ec 1c             	sub    esp,0x1c
c000e8a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8a9:	83 ec 08             	sub    esp,0x8
c000e8ac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e8b0:	50                   	push   eax
c000e8b1:	e8 74 f8 ff ff       	call   c000e12a <Device::Device(char const*)>
c000e8b6:	83 c4 10             	add    esp,0x10
c000e8b9:	ba 00 38 02 c0       	mov    edx,0xc0023800
c000e8be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8c2:	89 10                	mov    DWORD PTR [eax],edx
c000e8c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8c8:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000e8d2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e8da:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000e8e2:	7f 5e                	jg     c000e942 <InterruptController::InterruptController(char const*)+0xa0>
c000e8e4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e8ec:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000e8f1:	7f 49                	jg     c000e93c <InterruptController::InterruptController(char const*)+0x9a>
c000e8f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e8fb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e902:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e906:	01 ca                	add    edx,ecx
c000e908:	83 c2 54             	add    edx,0x54
c000e90b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000e913:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e917:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e91b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e922:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e926:	01 ca                	add    edx,ecx
c000e928:	81 c2 54 04 00 00    	add    edx,0x454
c000e92e:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000e936:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000e93a:	eb b0                	jmp    c000e8ec <InterruptController::InterruptController(char const*)+0x4a>
c000e93c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e940:	eb 98                	jmp    c000e8da <InterruptController::InterruptController(char const*)+0x38>
c000e942:	90                   	nop
c000e943:	83 c4 1c             	add    esp,0x1c
c000e946:	c3                   	ret    
c000e947:	90                   	nop

c000e948 <InterruptController::~InterruptController()>:
c000e948:	83 ec 0c             	sub    esp,0xc
c000e94b:	ba 00 38 02 c0       	mov    edx,0xc0023800
c000e950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e954:	89 10                	mov    DWORD PTR [eax],edx
c000e956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e95a:	83 ec 0c             	sub    esp,0xc
c000e95d:	50                   	push   eax
c000e95e:	e8 91 f4 ff ff       	call   c000ddf4 <Device::~Device()>
c000e963:	83 c4 10             	add    esp,0x10
c000e966:	90                   	nop
c000e967:	83 c4 0c             	add    esp,0xc
c000e96a:	c3                   	ret    
c000e96b:	90                   	nop

c000e96c <InterruptController::~InterruptController()>:
c000e96c:	83 ec 0c             	sub    esp,0xc
c000e96f:	83 ec 0c             	sub    esp,0xc
c000e972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e976:	e8 cd ff ff ff       	call   c000e948 <InterruptController::~InterruptController()>
c000e97b:	83 c4 10             	add    esp,0x10
c000e97e:	83 ec 08             	sub    esp,0x8
c000e981:	68 58 21 00 00       	push   0x2158
c000e986:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e98a:	e8 6f e0 ff ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c000e98f:	83 c4 10             	add    esp,0x10
c000e992:	83 c4 0c             	add    esp,0xc
c000e995:	c3                   	ret    

c000e996 <displayDebugInfo(regs*)>:
c000e996:	55                   	push   ebp
c000e997:	57                   	push   edi
c000e998:	56                   	push   esi
c000e999:	53                   	push   ebx
c000e99a:	83 ec 24             	sub    esp,0x24
c000e99d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e9a1:	0f 20 c2             	mov    edx,cr0
c000e9a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e9a8:	0f 20 d7             	mov    edi,cr2
c000e9ab:	0f 20 de             	mov    esi,cr3
c000e9ae:	0f 20 e5             	mov    ebp,cr4
c000e9b1:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000e9b4:	68 56 35 02 c0       	push   0xc0023556
c000e9b9:	e8 21 e1 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000e9be:	59                   	pop    ecx
c000e9bf:	58                   	pop    eax
c000e9c0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e9c3:	68 61 35 02 c0       	push   0xc0023561
c000e9c8:	e8 12 e1 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000e9cd:	58                   	pop    eax
c000e9ce:	5a                   	pop    edx
c000e9cf:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e9d2:	68 6c 35 02 c0       	push   0xc002356c
c000e9d7:	e8 03 e1 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000e9dc:	59                   	pop    ecx
c000e9dd:	58                   	pop    eax
c000e9de:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e9e1:	68 77 35 02 c0       	push   0xc0023577
c000e9e6:	e8 f4 e0 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000e9eb:	58                   	pop    eax
c000e9ec:	5a                   	pop    edx
c000e9ed:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e9f0:	68 82 35 02 c0       	push   0xc0023582
c000e9f5:	e8 e5 e0 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000e9fa:	59                   	pop    ecx
c000e9fb:	58                   	pop    eax
c000e9fc:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000e9ff:	68 8d 35 02 c0       	push   0xc002358d
c000ea04:	e8 d6 e0 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000ea09:	58                   	pop    eax
c000ea0a:	5a                   	pop    edx
c000ea0b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ea0e:	68 98 35 02 c0       	push   0xc0023598
c000ea13:	e8 c7 e0 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000ea18:	59                   	pop    ecx
c000ea19:	58                   	pop    eax
c000ea1a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ea1d:	68 a3 35 02 c0       	push   0xc00235a3
c000ea22:	e8 b8 e0 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000ea27:	58                   	pop    eax
c000ea28:	5a                   	pop    edx
c000ea29:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000ea2c:	68 ae 35 02 c0       	push   0xc00235ae
c000ea31:	e8 a9 e0 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000ea36:	59                   	pop    ecx
c000ea37:	58                   	pop    eax
c000ea38:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ea3b:	68 bd 35 02 c0       	push   0xc00235bd
c000ea40:	e8 9a e0 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000ea45:	58                   	pop    eax
c000ea46:	5a                   	pop    edx
c000ea47:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ea4a:	68 c8 35 02 c0       	push   0xc00235c8
c000ea4f:	e8 8b e0 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000ea54:	59                   	pop    ecx
c000ea55:	58                   	pop    eax
c000ea56:	57                   	push   edi
c000ea57:	68 d3 35 02 c0       	push   0xc00235d3
c000ea5c:	e8 7e e0 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000ea61:	58                   	pop    eax
c000ea62:	5a                   	pop    edx
c000ea63:	56                   	push   esi
c000ea64:	68 de 35 02 c0       	push   0xc00235de
c000ea69:	e8 71 e0 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000ea6e:	59                   	pop    ecx
c000ea6f:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ea74:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea7a:	e8 bc bd ff ff       	call   c000a83b <setActiveTerminal(VgaText*)>
c000ea7f:	58                   	pop    eax
c000ea80:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000ea83:	5a                   	pop    edx
c000ea84:	c1 e0 05             	shl    eax,0x5
c000ea87:	05 e0 58 02 c0       	add    eax,0xc00258e0
c000ea8c:	50                   	push   eax
c000ea8d:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ea92:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea98:	e8 ab c2 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c000ea9d:	59                   	pop    ecx
c000ea9e:	58                   	pop    eax
c000ea9f:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000eaa4:	68 e9 35 02 c0       	push   0xc00235e9
c000eaa9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eaaf:	e8 94 c2 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c000eab4:	58                   	pop    eax
c000eab5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eaba:	5a                   	pop    edx
c000eabb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000eabe:	83 c0 0c             	add    eax,0xc
c000eac1:	50                   	push   eax
c000eac2:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000eac7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eacd:	e8 76 c2 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c000ead2:	59                   	pop    ecx
c000ead3:	58                   	pop    eax
c000ead4:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ead9:	68 f2 35 02 c0       	push   0xc00235f2
c000eade:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eae4:	e8 5f c2 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c000eae9:	58                   	pop    eax
c000eaea:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000eaef:	5a                   	pop    edx
c000eaf0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000eaf3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eaf9:	e8 04 c2 ff ff       	call   c000ad02 <VgaText::putx(unsigned int)>
c000eafe:	59                   	pop    ecx
c000eaff:	58                   	pop    eax
c000eb00:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000eb05:	68 fa 35 02 c0       	push   0xc00235fa
c000eb0a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb10:	e8 33 c2 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c000eb15:	58                   	pop    eax
c000eb16:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000eb1b:	5a                   	pop    edx
c000eb1c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000eb1f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb25:	e8 d8 c1 ff ff       	call   c000ad02 <VgaText::putx(unsigned int)>
c000eb2a:	59                   	pop    ecx
c000eb2b:	58                   	pop    eax
c000eb2c:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000eb31:	68 02 36 02 c0       	push   0xc0023602
c000eb36:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb3c:	e8 07 c2 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c000eb41:	58                   	pop    eax
c000eb42:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000eb47:	5a                   	pop    edx
c000eb48:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000eb4b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb51:	e8 ac c1 ff ff       	call   c000ad02 <VgaText::putx(unsigned int)>
c000eb56:	59                   	pop    ecx
c000eb57:	58                   	pop    eax
c000eb58:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000eb5d:	68 0a 36 02 c0       	push   0xc002360a
c000eb62:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb68:	e8 db c1 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c000eb6d:	58                   	pop    eax
c000eb6e:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000eb73:	5a                   	pop    edx
c000eb74:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000eb77:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb7d:	e8 80 c1 ff ff       	call   c000ad02 <VgaText::putx(unsigned int)>
c000eb82:	59                   	pop    ecx
c000eb83:	58                   	pop    eax
c000eb84:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000eb89:	68 12 36 02 c0       	push   0xc0023612
c000eb8e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb94:	e8 af c1 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c000eb99:	58                   	pop    eax
c000eb9a:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000eb9f:	5a                   	pop    edx
c000eba0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000eba3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eba9:	e8 54 c1 ff ff       	call   c000ad02 <VgaText::putx(unsigned int)>
c000ebae:	59                   	pop    ecx
c000ebaf:	58                   	pop    eax
c000ebb0:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ebb5:	68 1a 36 02 c0       	push   0xc002361a
c000ebba:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebc0:	e8 83 c1 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c000ebc5:	58                   	pop    eax
c000ebc6:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ebcb:	5a                   	pop    edx
c000ebcc:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000ebcf:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebd5:	e8 28 c1 ff ff       	call   c000ad02 <VgaText::putx(unsigned int)>
c000ebda:	59                   	pop    ecx
c000ebdb:	58                   	pop    eax
c000ebdc:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ebe1:	68 22 36 02 c0       	push   0xc0023622
c000ebe6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebec:	e8 57 c1 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c000ebf1:	58                   	pop    eax
c000ebf2:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ebf7:	5a                   	pop    edx
c000ebf8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ebfc:	52                   	push   edx
c000ebfd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec03:	e8 fa c0 ff ff       	call   c000ad02 <VgaText::putx(unsigned int)>
c000ec08:	59                   	pop    ecx
c000ec09:	58                   	pop    eax
c000ec0a:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ec0f:	68 2b 36 02 c0       	push   0xc002362b
c000ec14:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec1a:	e8 29 c1 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c000ec1f:	58                   	pop    eax
c000ec20:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ec25:	5a                   	pop    edx
c000ec26:	57                   	push   edi
c000ec27:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec2d:	e8 d0 c0 ff ff       	call   c000ad02 <VgaText::putx(unsigned int)>
c000ec32:	59                   	pop    ecx
c000ec33:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ec38:	5f                   	pop    edi
c000ec39:	68 33 36 02 c0       	push   0xc0023633
c000ec3e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec44:	e8 ff c0 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c000ec49:	58                   	pop    eax
c000ec4a:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ec4f:	5a                   	pop    edx
c000ec50:	56                   	push   esi
c000ec51:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec57:	e8 a6 c0 ff ff       	call   c000ad02 <VgaText::putx(unsigned int)>
c000ec5c:	59                   	pop    ecx
c000ec5d:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ec62:	5e                   	pop    esi
c000ec63:	68 3b 36 02 c0       	push   0xc002363b
c000ec68:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec6e:	e8 d5 c0 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c000ec73:	5f                   	pop    edi
c000ec74:	58                   	pop    eax
c000ec75:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ec7a:	55                   	push   ebp
c000ec7b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec81:	e8 7c c0 ff ff       	call   c000ad02 <VgaText::putx(unsigned int)>
c000ec86:	58                   	pop    eax
c000ec87:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ec8c:	5a                   	pop    edx
c000ec8d:	68 43 36 02 c0       	push   0xc0023643
c000ec92:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec98:	e8 ab c0 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c000ec9d:	0f 21 c0             	mov    eax,db0
c000eca0:	59                   	pop    ecx
c000eca1:	5e                   	pop    esi
c000eca2:	50                   	push   eax
c000eca3:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000eca8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecae:	e8 4f c0 ff ff       	call   c000ad02 <VgaText::putx(unsigned int)>
c000ecb3:	5f                   	pop    edi
c000ecb4:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ecb9:	5d                   	pop    ebp
c000ecba:	68 4c 36 02 c0       	push   0xc002364c
c000ecbf:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecc5:	e8 7e c0 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c000ecca:	0f 21 c8             	mov    eax,db1
c000eccd:	5a                   	pop    edx
c000ecce:	59                   	pop    ecx
c000eccf:	50                   	push   eax
c000ecd0:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ecd5:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecdb:	e8 22 c0 ff ff       	call   c000ad02 <VgaText::putx(unsigned int)>
c000ece0:	5e                   	pop    esi
c000ece1:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ece6:	5f                   	pop    edi
c000ece7:	68 54 36 02 c0       	push   0xc0023654
c000ecec:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecf2:	e8 51 c0 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c000ecf7:	0f 21 d0             	mov    eax,db2
c000ecfa:	5d                   	pop    ebp
c000ecfb:	5a                   	pop    edx
c000ecfc:	50                   	push   eax
c000ecfd:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ed02:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed08:	e8 f5 bf ff ff       	call   c000ad02 <VgaText::putx(unsigned int)>
c000ed0d:	59                   	pop    ecx
c000ed0e:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ed13:	5e                   	pop    esi
c000ed14:	68 5c 36 02 c0       	push   0xc002365c
c000ed19:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed1f:	e8 24 c0 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c000ed24:	0f 21 d8             	mov    eax,db3
c000ed27:	5f                   	pop    edi
c000ed28:	5d                   	pop    ebp
c000ed29:	50                   	push   eax
c000ed2a:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ed2f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed35:	e8 c8 bf ff ff       	call   c000ad02 <VgaText::putx(unsigned int)>
c000ed3a:	58                   	pop    eax
c000ed3b:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ed40:	5a                   	pop    edx
c000ed41:	68 64 36 02 c0       	push   0xc0023664
c000ed46:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed4c:	e8 f7 bf ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c000ed51:	0f 21 f0             	mov    eax,db6
c000ed54:	59                   	pop    ecx
c000ed55:	5e                   	pop    esi
c000ed56:	50                   	push   eax
c000ed57:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ed5c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed62:	e8 9b bf ff ff       	call   c000ad02 <VgaText::putx(unsigned int)>
c000ed67:	5f                   	pop    edi
c000ed68:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ed6d:	5d                   	pop    ebp
c000ed6e:	68 6c 36 02 c0       	push   0xc002366c
c000ed73:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed79:	e8 ca bf ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c000ed7e:	0f 21 f8             	mov    eax,db7
c000ed81:	5a                   	pop    edx
c000ed82:	59                   	pop    ecx
c000ed83:	50                   	push   eax
c000ed84:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ed89:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed8f:	e8 6e bf ff ff       	call   c000ad02 <VgaText::putx(unsigned int)>
c000ed94:	5e                   	pop    esi
c000ed95:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ed98:	e8 a0 87 00 00       	call   c001753d <Thr::getDriverNameFromAddress(unsigned long)>
c000ed9d:	83 c4 10             	add    esp,0x10
c000eda0:	85 c0                	test   eax,eax
c000eda2:	74 7d                	je     c000ee21 <displayDebugInfo(regs*)+0x48b>
c000eda4:	89 c6                	mov    esi,eax
c000eda6:	50                   	push   eax
c000eda7:	50                   	push   eax
c000eda8:	56                   	push   esi
c000eda9:	68 74 36 02 c0       	push   0xc0023674
c000edae:	e8 2c dd ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000edb3:	5a                   	pop    edx
c000edb4:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000edb9:	59                   	pop    ecx
c000edba:	68 82 36 02 c0       	push   0xc0023682
c000edbf:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edc5:	e8 7e bf ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c000edca:	5f                   	pop    edi
c000edcb:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000edd0:	5d                   	pop    ebp
c000edd1:	56                   	push   esi
c000edd2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edd8:	e8 6b bf ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c000eddd:	58                   	pop    eax
c000edde:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ede3:	5a                   	pop    edx
c000ede4:	68 8e 36 02 c0       	push   0xc002368e
c000ede9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edef:	e8 54 bf ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c000edf4:	59                   	pop    ecx
c000edf5:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000edfa:	8b b8 06 05 00 00    	mov    edi,DWORD PTR [eax+0x506]
c000ee00:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ee03:	e8 6c 87 00 00       	call   c0017574 <Thr::getDriverOffsetFromAddress(unsigned long)>
c000ee08:	5b                   	pop    ebx
c000ee09:	5d                   	pop    ebp
c000ee0a:	50                   	push   eax
c000ee0b:	57                   	push   edi
c000ee0c:	e8 f1 be ff ff       	call   c000ad02 <VgaText::putx(unsigned int)>
c000ee11:	58                   	pop    eax
c000ee12:	5a                   	pop    edx
c000ee13:	56                   	push   esi
c000ee14:	68 9a 36 02 c0       	push   0xc002369a
c000ee19:	e8 c1 dc ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000ee1e:	83 c4 10             	add    esp,0x10
c000ee21:	fa                   	cli    
c000ee22:	f4                   	hlt    
c000ee23:	eb fe                	jmp    c000ee23 <displayDebugInfo(regs*)+0x48d>

c000ee25 <x87EmulHandler(regs*, void*)>:
c000ee25:	83 ec 0c             	sub    esp,0xc
c000ee28:	0f 20 c2             	mov    edx,cr0
c000ee2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ee30:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c000ee34:	75 4b                	jne    c000ee81 <x87EmulHandler(regs*, void*)+0x5c>
c000ee36:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c000ee3b:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c000ee41:	85 c0                	test   eax,eax
c000ee43:	74 05                	je     c000ee4a <x87EmulHandler(regs*, void*)+0x25>
c000ee45:	83 e2 08             	and    edx,0x8
c000ee48:	75 17                	jne    c000ee61 <x87EmulHandler(regs*, void*)+0x3c>
c000ee4a:	83 ec 0c             	sub    esp,0xc
c000ee4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ee51:	e8 94 ab 00 00       	call   c00199ea <Vm::x87Handler(regs*)>
c000ee56:	83 c4 10             	add    esp,0x10
c000ee59:	84 c0                	test   al,al
c000ee5b:	74 24                	je     c000ee81 <x87EmulHandler(regs*, void*)+0x5c>
c000ee5d:	83 c4 0c             	add    esp,0xc
c000ee60:	c3                   	ret    
c000ee61:	83 ec 0c             	sub    esp,0xc
c000ee64:	68 c0 36 02 c0       	push   0xc00236c0
c000ee69:	e8 71 dc ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000ee6e:	0f 06                	clts   
c000ee70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ee75:	83 c4 10             	add    esp,0x10
c000ee78:	a3 c8 65 02 c0       	mov    ds:0xc00265c8,eax
c000ee7d:	83 c4 0c             	add    esp,0xc
c000ee80:	c3                   	ret    
c000ee81:	83 ec 0c             	sub    esp,0xc
c000ee84:	68 aa 36 02 c0       	push   0xc00236aa
c000ee89:	e8 51 dc ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000ee8e:	5a                   	pop    edx
c000ee8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ee93:	e8 fe fa ff ff       	call   c000e996 <displayDebugInfo(regs*)>

c000ee98 <gpFault(regs*, void*)>:
c000ee98:	53                   	push   ebx
c000ee99:	83 ec 14             	sub    esp,0x14
c000ee9c:	c7 05 c4 65 02 c0 a6 8e 01 c0 	mov    DWORD PTR ds:0xc00265c4,0xc0018ea6
c000eea6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eeaa:	53                   	push   ebx
c000eeab:	e8 f6 9f 00 00       	call   c0018ea6 <Vm::faultHandler(regs*)>
c000eeb0:	83 c4 10             	add    esp,0x10
c000eeb3:	84 c0                	test   al,al
c000eeb5:	74 05                	je     c000eebc <gpFault(regs*, void*)+0x24>
c000eeb7:	83 c4 08             	add    esp,0x8
c000eeba:	5b                   	pop    ebx
c000eebb:	c3                   	ret    
c000eebc:	83 ec 0c             	sub    esp,0xc
c000eebf:	68 cd 36 02 c0       	push   0xc00236cd
c000eec4:	e8 16 dc ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000eec9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecc:	e8 c5 fa ff ff       	call   c000e996 <displayDebugInfo(regs*)>

c000eed1 <pgFault(regs*, void*)>:
c000eed1:	53                   	push   ebx
c000eed2:	83 ec 10             	sub    esp,0x10
c000eed5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000eed9:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000eedc:	68 e8 36 02 c0       	push   0xc00236e8
c000eee1:	e8 f9 db ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000eee6:	0f 20 d0             	mov    eax,cr2
c000eee9:	5a                   	pop    edx
c000eeea:	59                   	pop    ecx
c000eeeb:	50                   	push   eax
c000eeec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eef1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000eef4:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000eefa:	e8 e7 d6 ff ff       	call   c000c5e6 <VAS::tryLoadBackOffDisk(unsigned long)>
c000eeff:	83 c4 10             	add    esp,0x10
c000ef02:	84 c0                	test   al,al
c000ef04:	74 05                	je     c000ef0b <pgFault(regs*, void*)+0x3a>
c000ef06:	83 c4 08             	add    esp,0x8
c000ef09:	5b                   	pop    ebx
c000ef0a:	c3                   	ret    
c000ef0b:	83 ec 0c             	sub    esp,0xc
c000ef0e:	68 fd 36 02 c0       	push   0xc00236fd
c000ef13:	e8 c7 db ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000ef18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef1b:	e8 76 fa ff ff       	call   c000e996 <displayDebugInfo(regs*)>

c000ef20 <otherISRHandler(regs*, void*)>:
c000ef20:	53                   	push   ebx
c000ef21:	83 ec 0c             	sub    esp,0xc
c000ef24:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ef28:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000ef2b:	50                   	push   eax
c000ef2c:	50                   	push   eax
c000ef2d:	68 0a 37 02 c0       	push   0xc002370a
c000ef32:	e8 a8 db ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000ef37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef3a:	e8 57 fa ff ff       	call   c000e996 <displayDebugInfo(regs*)>

c000ef3f <opcodeFault(regs*, void*)>:
c000ef3f:	55                   	push   ebp
c000ef40:	89 e5                	mov    ebp,esp
c000ef42:	56                   	push   esi
c000ef43:	53                   	push   ebx
c000ef44:	83 ec 30             	sub    esp,0x30
c000ef47:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c000ef4c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ef52:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000ef58:	84 c0                	test   al,al
c000ef5a:	74 24                	je     c000ef80 <opcodeFault(regs*, void*)+0x41>
c000ef5c:	83 ec 0c             	sub    esp,0xc
c000ef5f:	68 28 37 02 c0       	push   0xc0023728
c000ef64:	e8 76 db ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000ef69:	83 c4 10             	add    esp,0x10
c000ef6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef6f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef72:	8d 50 19             	lea    edx,[eax+0x19]
c000ef75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef78:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef7b:	e9 7b 03 00 00       	jmp    c000f2fb <opcodeFault(regs*, void*)+0x3bc>
c000ef80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef83:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef86:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000ef89:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000ef8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef90:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef93:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000ef96:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef99:	8a 00                	mov    al,BYTE PTR [eax]
c000ef9b:	3c f0                	cmp    al,0xf0
c000ef9d:	75 17                	jne    c000efb6 <opcodeFault(regs*, void*)+0x77>
c000ef9f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000efa2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efa5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000efa8:	8d 50 01             	lea    edx,[eax+0x1]
c000efab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efae:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000efb1:	e9 d6 00 00 00       	jmp    c000f08c <opcodeFault(regs*, void*)+0x14d>
c000efb6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efb9:	8a 00                	mov    al,BYTE PTR [eax]
c000efbb:	3c f2                	cmp    al,0xf2
c000efbd:	74 09                	je     c000efc8 <opcodeFault(regs*, void*)+0x89>
c000efbf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efc2:	8a 00                	mov    al,BYTE PTR [eax]
c000efc4:	3c f3                	cmp    al,0xf3
c000efc6:	75 1b                	jne    c000efe3 <opcodeFault(regs*, void*)+0xa4>
c000efc8:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000efcc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000efcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efd2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000efd5:	8d 50 01             	lea    edx,[eax+0x1]
c000efd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efdb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000efde:	e9 a9 00 00 00       	jmp    c000f08c <opcodeFault(regs*, void*)+0x14d>
c000efe3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efe6:	8a 00                	mov    al,BYTE PTR [eax]
c000efe8:	3c 66                	cmp    al,0x66
c000efea:	75 1b                	jne    c000f007 <opcodeFault(regs*, void*)+0xc8>
c000efec:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000eff0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000eff3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eff6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000eff9:	8d 50 01             	lea    edx,[eax+0x1]
c000effc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efff:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f002:	e9 85 00 00 00       	jmp    c000f08c <opcodeFault(regs*, void*)+0x14d>
c000f007:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f00a:	8a 00                	mov    al,BYTE PTR [eax]
c000f00c:	3c 67                	cmp    al,0x67
c000f00e:	75 18                	jne    c000f028 <opcodeFault(regs*, void*)+0xe9>
c000f010:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f014:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f017:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f01a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f01d:	8d 50 01             	lea    edx,[eax+0x1]
c000f020:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f023:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f026:	eb 64                	jmp    c000f08c <opcodeFault(regs*, void*)+0x14d>
c000f028:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f02b:	8a 00                	mov    al,BYTE PTR [eax]
c000f02d:	3c 2e                	cmp    al,0x2e
c000f02f:	74 09                	je     c000f03a <opcodeFault(regs*, void*)+0xfb>
c000f031:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f034:	8a 00                	mov    al,BYTE PTR [eax]
c000f036:	3c 3e                	cmp    al,0x3e
c000f038:	75 18                	jne    c000f052 <opcodeFault(regs*, void*)+0x113>
c000f03a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f03e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f041:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f044:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f047:	8d 50 01             	lea    edx,[eax+0x1]
c000f04a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f04d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f050:	eb 3a                	jmp    c000f08c <opcodeFault(regs*, void*)+0x14d>
c000f052:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f055:	8a 00                	mov    al,BYTE PTR [eax]
c000f057:	3c 36                	cmp    al,0x36
c000f059:	74 1b                	je     c000f076 <opcodeFault(regs*, void*)+0x137>
c000f05b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f05e:	8a 00                	mov    al,BYTE PTR [eax]
c000f060:	3c 26                	cmp    al,0x26
c000f062:	74 12                	je     c000f076 <opcodeFault(regs*, void*)+0x137>
c000f064:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f067:	8a 00                	mov    al,BYTE PTR [eax]
c000f069:	3c 64                	cmp    al,0x64
c000f06b:	74 09                	je     c000f076 <opcodeFault(regs*, void*)+0x137>
c000f06d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f070:	8a 00                	mov    al,BYTE PTR [eax]
c000f072:	3c 65                	cmp    al,0x65
c000f074:	75 16                	jne    c000f08c <opcodeFault(regs*, void*)+0x14d>
c000f076:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f07a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f07d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f080:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f083:	8d 50 01             	lea    edx,[eax+0x1]
c000f086:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f089:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f08c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f08f:	8a 00                	mov    al,BYTE PTR [eax]
c000f091:	3c 0f                	cmp    al,0xf
c000f093:	0f 85 8d 01 00 00    	jne    c000f226 <opcodeFault(regs*, void*)+0x2e7>
c000f099:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f09c:	40                   	inc    eax
c000f09d:	8a 00                	mov    al,BYTE PTR [eax]
c000f09f:	3c c7                	cmp    al,0xc7
c000f0a1:	0f 85 7f 01 00 00    	jne    c000f226 <opcodeFault(regs*, void*)+0x2e7>
c000f0a7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f0aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0ad:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f0b0:	8d 50 01             	lea    edx,[eax+0x1]
c000f0b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0b6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f0b9:	8d 45 d2             	lea    eax,[ebp-0x2e]
c000f0bc:	50                   	push   eax
c000f0bd:	8d 45 d3             	lea    eax,[ebp-0x2d]
c000f0c0:	50                   	push   eax
c000f0c1:	8d 45 d4             	lea    eax,[ebp-0x2c]
c000f0c4:	50                   	push   eax
c000f0c5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f0c8:	e8 ed 49 00 00       	call   c0013aba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f0cd:	83 c4 10             	add    esp,0x10
c000f0d0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f0d3:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c000f0d6:	83 f0 01             	xor    eax,0x1
c000f0d9:	84 c0                	test   al,al
c000f0db:	0f 84 45 01 00 00    	je     c000f226 <opcodeFault(regs*, void*)+0x2e7>
c000f0e1:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c000f0e4:	3c 01                	cmp    al,0x1
c000f0e6:	0f 85 3a 01 00 00    	jne    c000f226 <opcodeFault(regs*, void*)+0x2e7>
c000f0ec:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f0ef:	83 f0 01             	xor    eax,0x1
c000f0f2:	84 c0                	test   al,al
c000f0f4:	0f 84 2c 01 00 00    	je     c000f226 <opcodeFault(regs*, void*)+0x2e7>
c000f0fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0fd:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f100:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f103:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000f10a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f10d:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f110:	89 c2                	mov    edx,eax
c000f112:	b8 00 00 00 00       	mov    eax,0x0
c000f117:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f11a:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f11d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f120:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f123:	ba 00 00 00 00       	mov    edx,0x0
c000f128:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c000f12b:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c000f12e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f131:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f134:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f137:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c000f13e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f141:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f144:	89 c2                	mov    edx,eax
c000f146:	b8 00 00 00 00       	mov    eax,0x0
c000f14b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f14e:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c000f151:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f154:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f157:	ba 00 00 00 00       	mov    edx,0x0
c000f15c:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c000f15f:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c000f162:	fa                   	cli    
c000f163:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000f168:	40                   	inc    eax
c000f169:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c000f16e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f171:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f174:	8b 00                	mov    eax,DWORD PTR [eax]
c000f176:	89 c1                	mov    ecx,eax
c000f178:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c000f17b:	89 cb                	mov    ebx,ecx
c000f17d:	89 d0                	mov    eax,edx
c000f17f:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c000f182:	89 c6                	mov    esi,eax
c000f184:	89 f0                	mov    eax,esi
c000f186:	09 d8                	or     eax,ebx
c000f188:	85 c0                	test   eax,eax
c000f18a:	75 21                	jne    c000f1ad <opcodeFault(regs*, void*)+0x26e>
c000f18c:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c000f18f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f192:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f195:	89 01                	mov    DWORD PTR [ecx],eax
c000f197:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f19a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f19d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f1a0:	83 c8 40             	or     eax,0x40
c000f1a3:	89 c2                	mov    edx,eax
c000f1a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1a8:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f1ab:	eb 3e                	jmp    c000f1eb <opcodeFault(regs*, void*)+0x2ac>
c000f1ad:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f1b0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f1b3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1b5:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f1b8:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f1bb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000f1be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1c1:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000f1c4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f1c7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f1ca:	89 d0                	mov    eax,edx
c000f1cc:	31 d2                	xor    edx,edx
c000f1ce:	89 c3                	mov    ebx,eax
c000f1d0:	89 d6                	mov    esi,edx
c000f1d2:	89 da                	mov    edx,ebx
c000f1d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1d7:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000f1da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1dd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f1e0:	83 e0 bf             	and    eax,0xffffffbf
c000f1e3:	89 c2                	mov    edx,eax
c000f1e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1e8:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f1eb:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000f1f0:	48                   	dec    eax
c000f1f1:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c000f1f6:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000f1fb:	85 c0                	test   eax,eax
c000f1fd:	75 01                	jne    c000f200 <opcodeFault(regs*, void*)+0x2c1>
c000f1ff:	fb                   	sti    
c000f200:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f203:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f206:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000f209:	01 c2                	add    edx,eax
c000f20b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f20e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f211:	83 ec 0c             	sub    esp,0xc
c000f214:	68 4b 37 02 c0       	push   0xc002374b
c000f219:	e8 c1 d8 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000f21e:	83 c4 10             	add    esp,0x10
c000f221:	e9 d5 00 00 00       	jmp    c000f2fb <opcodeFault(regs*, void*)+0x3bc>
c000f226:	83 ec 0c             	sub    esp,0xc
c000f229:	68 5e 37 02 c0       	push   0xc002375e
c000f22e:	e8 ac d8 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000f233:	83 c4 10             	add    esp,0x10
c000f236:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f239:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f23c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f23f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f242:	c1 e0 04             	shl    eax,0x4
c000f245:	01 d0                	add    eax,edx
c000f247:	83 c0 03             	add    eax,0x3
c000f24a:	8a 00                	mov    al,BYTE PTR [eax]
c000f24c:	0f b6 d8             	movzx  ebx,al
c000f24f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f252:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f255:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f258:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f25b:	c1 e0 04             	shl    eax,0x4
c000f25e:	01 d0                	add    eax,edx
c000f260:	83 c0 02             	add    eax,0x2
c000f263:	8a 00                	mov    al,BYTE PTR [eax]
c000f265:	0f b6 c8             	movzx  ecx,al
c000f268:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f26b:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f26e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f271:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f274:	c1 e0 04             	shl    eax,0x4
c000f277:	01 d0                	add    eax,edx
c000f279:	40                   	inc    eax
c000f27a:	8a 00                	mov    al,BYTE PTR [eax]
c000f27c:	0f b6 d0             	movzx  edx,al
c000f27f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f282:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000f285:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f288:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f28b:	c1 e0 04             	shl    eax,0x4
c000f28e:	01 f0                	add    eax,esi
c000f290:	8a 00                	mov    al,BYTE PTR [eax]
c000f292:	0f b6 c0             	movzx  eax,al
c000f295:	83 ec 0c             	sub    esp,0xc
c000f298:	53                   	push   ebx
c000f299:	51                   	push   ecx
c000f29a:	52                   	push   edx
c000f29b:	50                   	push   eax
c000f29c:	68 70 37 02 c0       	push   0xc0023770
c000f2a1:	e8 39 d8 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000f2a6:	83 c4 20             	add    esp,0x20
c000f2a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2ac:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f2af:	83 c0 03             	add    eax,0x3
c000f2b2:	8a 00                	mov    al,BYTE PTR [eax]
c000f2b4:	0f b6 d8             	movzx  ebx,al
c000f2b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2ba:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f2bd:	83 c0 02             	add    eax,0x2
c000f2c0:	8a 00                	mov    al,BYTE PTR [eax]
c000f2c2:	0f b6 c8             	movzx  ecx,al
c000f2c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2c8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f2cb:	40                   	inc    eax
c000f2cc:	8a 00                	mov    al,BYTE PTR [eax]
c000f2ce:	0f b6 d0             	movzx  edx,al
c000f2d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2d4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f2d7:	8a 00                	mov    al,BYTE PTR [eax]
c000f2d9:	0f b6 c0             	movzx  eax,al
c000f2dc:	83 ec 0c             	sub    esp,0xc
c000f2df:	53                   	push   ebx
c000f2e0:	51                   	push   ecx
c000f2e1:	52                   	push   edx
c000f2e2:	50                   	push   eax
c000f2e3:	68 98 37 02 c0       	push   0xc0023798
c000f2e8:	e8 f2 d7 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c000f2ed:	83 c4 20             	add    esp,0x20
c000f2f0:	83 ec 0c             	sub    esp,0xc
c000f2f3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f2f6:	e8 9b f6 ff ff       	call   c000e996 <displayDebugInfo(regs*)>
c000f2fb:	8d 65 f8             	lea    esp,[ebp-0x8]
c000f2fe:	5b                   	pop    ebx
c000f2ff:	5e                   	pop    esi
c000f300:	5d                   	pop    ebp
c000f301:	c3                   	ret    

c000f302 <displayProgramFault(char const*)>:
c000f302:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f307:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f30a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000f310:	85 c0                	test   eax,eax
c000f312:	74 15                	je     c000f329 <displayProgramFault(char const*)+0x27>
c000f314:	83 ec 0c             	sub    esp,0xc
c000f317:	6a 04                	push   0x4
c000f319:	6a 0f                	push   0xf
c000f31b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f31f:	50                   	push   eax
c000f320:	e8 1f b7 ff ff       	call   c000aa44 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000f325:	83 c4 1c             	add    esp,0x1c
c000f328:	c3                   	ret    
c000f329:	c3                   	ret    

c000f32a <setupInterruptController()>:
c000f32a:	55                   	push   ebp
c000f32b:	89 e5                	mov    ebp,esp
c000f32d:	53                   	push   ebx
c000f32e:	83 ec 24             	sub    esp,0x24
c000f331:	b8 00 00 00 00       	mov    eax,0x0
c000f336:	85 c0                	test   eax,eax
c000f338:	0f 95 c0             	setne  al
c000f33b:	84 c0                	test   al,al
c000f33d:	74 5b                	je     c000f39a <setupInterruptController()+0x70>
c000f33f:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000f346:	83 ec 0c             	sub    esp,0xc
c000f349:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f34c:	e8 72 a6 ff ff       	call   c00099c3 <malloc>
c000f351:	83 c4 10             	add    esp,0x10
c000f354:	89 c3                	mov    ebx,eax
c000f356:	83 ec 0c             	sub    esp,0xc
c000f359:	53                   	push   ebx
c000f35a:	e8 d7 0b 01 00       	call   c001ff36 <APIC::APIC()>
c000f35f:	83 c4 10             	add    esp,0x10
c000f362:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f365:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000f368:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f36b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f36d:	83 c0 08             	add    eax,0x8
c000f370:	8b 00                	mov    eax,DWORD PTR [eax]
c000f372:	6a 00                	push   0x0
c000f374:	6a 00                	push   0x0
c000f376:	6a 00                	push   0x0
c000f378:	52                   	push   edx
c000f379:	ff d0                	call   eax
c000f37b:	83 c4 10             	add    esp,0x10
c000f37e:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c000f383:	83 ec 08             	sub    esp,0x8
c000f386:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f389:	50                   	push   eax
c000f38a:	e8 97 eb ff ff       	call   c000df26 <Device::addChild(Device*)>
c000f38f:	83 c4 10             	add    esp,0x10
c000f392:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f395:	e9 79 03 00 00       	jmp    c000f713 <setupInterruptController()+0x3e9>
c000f39a:	a0 a0 6d 02 c0       	mov    al,ds:0xc0026da0
c000f39f:	84 c0                	test   al,al
c000f3a1:	75 14                	jne    c000f3b7 <setupInterruptController()+0x8d>
c000f3a3:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c000f3a8:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000f3ae:	83 e2 fe             	and    edx,0xfffffffe
c000f3b1:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000f3b7:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c000f3bc:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000f3c2:	83 e0 01             	and    eax,0x1
c000f3c5:	84 c0                	test   al,al
c000f3c7:	0f 95 c0             	setne  al
c000f3ca:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000f3cd:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000f3d4:	83 ec 0c             	sub    esp,0xc
c000f3d7:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000f3da:	e8 e4 a5 ff ff       	call   c00099c3 <malloc>
c000f3df:	83 c4 10             	add    esp,0x10
c000f3e2:	89 c3                	mov    ebx,eax
c000f3e4:	83 ec 0c             	sub    esp,0xc
c000f3e7:	53                   	push   ebx
c000f3e8:	e8 a1 10 01 00       	call   c002048e <PIC::PIC()>
c000f3ed:	83 c4 10             	add    esp,0x10
c000f3f0:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f3f3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f3f6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3f9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3fb:	83 c0 08             	add    eax,0x8
c000f3fe:	8b 00                	mov    eax,DWORD PTR [eax]
c000f400:	6a 00                	push   0x0
c000f402:	6a 00                	push   0x0
c000f404:	6a 00                	push   0x0
c000f406:	52                   	push   edx
c000f407:	ff d0                	call   eax
c000f409:	83 c4 10             	add    esp,0x10
c000f40c:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000f410:	74 73                	je     c000f485 <setupInterruptController()+0x15b>
c000f412:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f415:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f418:	8b 00                	mov    eax,DWORD PTR [eax]
c000f41a:	83 c0 0c             	add    eax,0xc
c000f41d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f41f:	6a 00                	push   0x0
c000f421:	6a 00                	push   0x0
c000f423:	6a 00                	push   0x0
c000f425:	52                   	push   edx
c000f426:	ff d0                	call   eax
c000f428:	83 c4 10             	add    esp,0x10
c000f42b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f42f:	74 15                	je     c000f446 <setupInterruptController()+0x11c>
c000f431:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f434:	8b 00                	mov    eax,DWORD PTR [eax]
c000f436:	83 c0 04             	add    eax,0x4
c000f439:	8b 00                	mov    eax,DWORD PTR [eax]
c000f43b:	83 ec 0c             	sub    esp,0xc
c000f43e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f441:	ff d0                	call   eax
c000f443:	83 c4 10             	add    esp,0x10
c000f446:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000f44d:	83 ec 0c             	sub    esp,0xc
c000f450:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000f453:	e8 6b a5 ff ff       	call   c00099c3 <malloc>
c000f458:	83 c4 10             	add    esp,0x10
c000f45b:	89 c3                	mov    ebx,eax
c000f45d:	83 ec 0c             	sub    esp,0xc
c000f460:	53                   	push   ebx
c000f461:	e8 d0 0a 01 00       	call   c001ff36 <APIC::APIC()>
c000f466:	83 c4 10             	add    esp,0x10
c000f469:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f46c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f46f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f472:	8b 00                	mov    eax,DWORD PTR [eax]
c000f474:	83 c0 08             	add    eax,0x8
c000f477:	8b 00                	mov    eax,DWORD PTR [eax]
c000f479:	6a 00                	push   0x0
c000f47b:	6a 00                	push   0x0
c000f47d:	6a 00                	push   0x0
c000f47f:	52                   	push   edx
c000f480:	ff d0                	call   eax
c000f482:	83 c4 10             	add    esp,0x10
c000f485:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c000f48a:	83 ec 08             	sub    esp,0x8
c000f48d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f490:	50                   	push   eax
c000f491:	e8 90 ea ff ff       	call   c000df26 <Device::addChild(Device*)>
c000f496:	83 c4 10             	add    esp,0x10
c000f499:	c7 05 c8 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00265c8,0x0
c000f4a3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4a6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4a8:	83 c0 24             	add    eax,0x24
c000f4ab:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4ad:	6a 00                	push   0x0
c000f4af:	68 20 ef 00 c0       	push   0xc000ef20
c000f4b4:	6a 00                	push   0x0
c000f4b6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4b9:	ff d0                	call   eax
c000f4bb:	83 c4 10             	add    esp,0x10
c000f4be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4c1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4c3:	83 c0 24             	add    eax,0x24
c000f4c6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4c8:	6a 00                	push   0x0
c000f4ca:	68 20 ef 00 c0       	push   0xc000ef20
c000f4cf:	6a 01                	push   0x1
c000f4d1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4d4:	ff d0                	call   eax
c000f4d6:	83 c4 10             	add    esp,0x10
c000f4d9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4dc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4de:	83 c0 24             	add    eax,0x24
c000f4e1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4e3:	6a 00                	push   0x0
c000f4e5:	68 f3 e7 00 c0       	push   0xc000e7f3
c000f4ea:	6a 02                	push   0x2
c000f4ec:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4ef:	ff d0                	call   eax
c000f4f1:	83 c4 10             	add    esp,0x10
c000f4f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4f7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4f9:	83 c0 24             	add    eax,0x24
c000f4fc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4fe:	6a 00                	push   0x0
c000f500:	68 20 ef 00 c0       	push   0xc000ef20
c000f505:	6a 03                	push   0x3
c000f507:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f50a:	ff d0                	call   eax
c000f50c:	83 c4 10             	add    esp,0x10
c000f50f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f512:	8b 00                	mov    eax,DWORD PTR [eax]
c000f514:	83 c0 24             	add    eax,0x24
c000f517:	8b 00                	mov    eax,DWORD PTR [eax]
c000f519:	6a 00                	push   0x0
c000f51b:	68 20 ef 00 c0       	push   0xc000ef20
c000f520:	6a 04                	push   0x4
c000f522:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f525:	ff d0                	call   eax
c000f527:	83 c4 10             	add    esp,0x10
c000f52a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f52d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f52f:	83 c0 24             	add    eax,0x24
c000f532:	8b 00                	mov    eax,DWORD PTR [eax]
c000f534:	6a 00                	push   0x0
c000f536:	68 20 ef 00 c0       	push   0xc000ef20
c000f53b:	6a 05                	push   0x5
c000f53d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f540:	ff d0                	call   eax
c000f542:	83 c4 10             	add    esp,0x10
c000f545:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f548:	8b 00                	mov    eax,DWORD PTR [eax]
c000f54a:	83 c0 24             	add    eax,0x24
c000f54d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f54f:	6a 00                	push   0x0
c000f551:	68 3f ef 00 c0       	push   0xc000ef3f
c000f556:	6a 06                	push   0x6
c000f558:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f55b:	ff d0                	call   eax
c000f55d:	83 c4 10             	add    esp,0x10
c000f560:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f563:	8b 00                	mov    eax,DWORD PTR [eax]
c000f565:	83 c0 24             	add    eax,0x24
c000f568:	8b 00                	mov    eax,DWORD PTR [eax]
c000f56a:	6a 00                	push   0x0
c000f56c:	68 25 ee 00 c0       	push   0xc000ee25
c000f571:	6a 07                	push   0x7
c000f573:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f576:	ff d0                	call   eax
c000f578:	83 c4 10             	add    esp,0x10
c000f57b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f57e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f580:	83 c0 24             	add    eax,0x24
c000f583:	8b 00                	mov    eax,DWORD PTR [eax]
c000f585:	6a 00                	push   0x0
c000f587:	68 0e e6 00 c0       	push   0xc000e60e
c000f58c:	6a 08                	push   0x8
c000f58e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f591:	ff d0                	call   eax
c000f593:	83 c4 10             	add    esp,0x10
c000f596:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f599:	8b 00                	mov    eax,DWORD PTR [eax]
c000f59b:	83 c0 24             	add    eax,0x24
c000f59e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5a0:	6a 00                	push   0x0
c000f5a2:	68 20 ef 00 c0       	push   0xc000ef20
c000f5a7:	6a 09                	push   0x9
c000f5a9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5ac:	ff d0                	call   eax
c000f5ae:	83 c4 10             	add    esp,0x10
c000f5b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5b4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5b6:	83 c0 24             	add    eax,0x24
c000f5b9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5bb:	6a 00                	push   0x0
c000f5bd:	68 20 ef 00 c0       	push   0xc000ef20
c000f5c2:	6a 0a                	push   0xa
c000f5c4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5c7:	ff d0                	call   eax
c000f5c9:	83 c4 10             	add    esp,0x10
c000f5cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5cf:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5d1:	83 c0 24             	add    eax,0x24
c000f5d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5d6:	6a 00                	push   0x0
c000f5d8:	68 20 ef 00 c0       	push   0xc000ef20
c000f5dd:	6a 0b                	push   0xb
c000f5df:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5e2:	ff d0                	call   eax
c000f5e4:	83 c4 10             	add    esp,0x10
c000f5e7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5ea:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5ec:	83 c0 24             	add    eax,0x24
c000f5ef:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5f1:	6a 00                	push   0x0
c000f5f3:	68 20 ef 00 c0       	push   0xc000ef20
c000f5f8:	6a 0c                	push   0xc
c000f5fa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5fd:	ff d0                	call   eax
c000f5ff:	83 c4 10             	add    esp,0x10
c000f602:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f605:	8b 00                	mov    eax,DWORD PTR [eax]
c000f607:	83 c0 24             	add    eax,0x24
c000f60a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f60c:	6a 00                	push   0x0
c000f60e:	68 98 ee 00 c0       	push   0xc000ee98
c000f613:	6a 0d                	push   0xd
c000f615:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f618:	ff d0                	call   eax
c000f61a:	83 c4 10             	add    esp,0x10
c000f61d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f620:	8b 00                	mov    eax,DWORD PTR [eax]
c000f622:	83 c0 24             	add    eax,0x24
c000f625:	8b 00                	mov    eax,DWORD PTR [eax]
c000f627:	6a 00                	push   0x0
c000f629:	68 d1 ee 00 c0       	push   0xc000eed1
c000f62e:	6a 0e                	push   0xe
c000f630:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f633:	ff d0                	call   eax
c000f635:	83 c4 10             	add    esp,0x10
c000f638:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f63b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f63d:	83 c0 24             	add    eax,0x24
c000f640:	8b 00                	mov    eax,DWORD PTR [eax]
c000f642:	6a 00                	push   0x0
c000f644:	68 20 ef 00 c0       	push   0xc000ef20
c000f649:	6a 0f                	push   0xf
c000f64b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f64e:	ff d0                	call   eax
c000f650:	83 c4 10             	add    esp,0x10
c000f653:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f656:	8b 00                	mov    eax,DWORD PTR [eax]
c000f658:	83 c0 24             	add    eax,0x24
c000f65b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f65d:	6a 00                	push   0x0
c000f65f:	68 20 ef 00 c0       	push   0xc000ef20
c000f664:	6a 10                	push   0x10
c000f666:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f669:	ff d0                	call   eax
c000f66b:	83 c4 10             	add    esp,0x10
c000f66e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f671:	8b 00                	mov    eax,DWORD PTR [eax]
c000f673:	83 c0 24             	add    eax,0x24
c000f676:	8b 00                	mov    eax,DWORD PTR [eax]
c000f678:	6a 00                	push   0x0
c000f67a:	68 20 ef 00 c0       	push   0xc000ef20
c000f67f:	6a 11                	push   0x11
c000f681:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f684:	ff d0                	call   eax
c000f686:	83 c4 10             	add    esp,0x10
c000f689:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f68c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f68e:	83 c0 24             	add    eax,0x24
c000f691:	8b 00                	mov    eax,DWORD PTR [eax]
c000f693:	6a 00                	push   0x0
c000f695:	68 20 ef 00 c0       	push   0xc000ef20
c000f69a:	6a 12                	push   0x12
c000f69c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f69f:	ff d0                	call   eax
c000f6a1:	83 c4 10             	add    esp,0x10
c000f6a4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6a7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6a9:	83 c0 24             	add    eax,0x24
c000f6ac:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6ae:	6a 00                	push   0x0
c000f6b0:	68 20 ef 00 c0       	push   0xc000ef20
c000f6b5:	6a 13                	push   0x13
c000f6b7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f6ba:	ff d0                	call   eax
c000f6bc:	83 c4 10             	add    esp,0x10
c000f6bf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6c2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6c4:	83 c0 24             	add    eax,0x24
c000f6c7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6c9:	6a 00                	push   0x0
c000f6cb:	68 20 ef 00 c0       	push   0xc000ef20
c000f6d0:	6a 14                	push   0x14
c000f6d2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f6d5:	ff d0                	call   eax
c000f6d7:	83 c4 10             	add    esp,0x10
c000f6da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6dd:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6df:	83 c0 24             	add    eax,0x24
c000f6e2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6e4:	6a 00                	push   0x0
c000f6e6:	68 20 ef 00 c0       	push   0xc000ef20
c000f6eb:	6a 1e                	push   0x1e
c000f6ed:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f6f0:	ff d0                	call   eax
c000f6f2:	83 c4 10             	add    esp,0x10
c000f6f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6f8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6fa:	83 c0 24             	add    eax,0x24
c000f6fd:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6ff:	6a 00                	push   0x0
c000f701:	68 b3 65 01 c0       	push   0xc00165b3
c000f706:	6a 60                	push   0x60
c000f708:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f70b:	ff d0                	call   eax
c000f70d:	83 c4 10             	add    esp,0x10
c000f710:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f713:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f716:	c9                   	leave  
c000f717:	c3                   	ret    

c000f718 <InterruptController::convertLegacyIRQNumber(int)>:
c000f718:	55                   	push   ebp
c000f719:	89 e5                	mov    ebp,esp
c000f71b:	83 ec 08             	sub    esp,0x8
c000f71e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f721:	83 ec 0c             	sub    esp,0xc
c000f724:	50                   	push   eax
c000f725:	e8 fc ea ff ff       	call   c000e226 <Device::getName()>
c000f72a:	83 c4 10             	add    esp,0x10
c000f72d:	8a 00                	mov    al,BYTE PTR [eax]
c000f72f:	3c 41                	cmp    al,0x41
c000f731:	0f 94 c0             	sete   al
c000f734:	84 c0                	test   al,al
c000f736:	74 28                	je     c000f760 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f738:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000f73c:	7f 12                	jg     c000f750 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000f73e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f741:	05 80 5b 02 c0       	add    eax,0xc0025b80
c000f746:	8a 00                	mov    al,BYTE PTR [eax]
c000f748:	0f b6 c0             	movzx  eax,al
c000f74b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000f74e:	eb 10                	jmp    c000f760 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f750:	83 ec 0c             	sub    esp,0xc
c000f753:	68 c0 37 02 c0       	push   0xc00237c0
c000f758:	e8 44 4c 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c000f75d:	83 c4 10             	add    esp,0x10
c000f760:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f763:	c9                   	leave  
c000f764:	c3                   	ret    
c000f765:	90                   	nop

c000f766 <startGUI(void*)>:
c000f766:	55                   	push   ebp
c000f767:	89 e5                	mov    ebp,esp
c000f769:	53                   	push   ebx
c000f76a:	83 ec 04             	sub    esp,0x4
c000f76d:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000f772:	48                   	dec    eax
c000f773:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c000f778:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000f77d:	85 c0                	test   eax,eax
c000f77f:	75 01                	jne    c000f782 <startGUI(void*)+0x1c>
c000f781:	fb                   	sti    
c000f782:	8b 1d 88 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026488
c000f788:	83 ec 08             	sub    esp,0x8
c000f78b:	6a 01                	push   0x1
c000f78d:	68 40 38 02 c0       	push   0xc0023840
c000f792:	e8 f7 7d 00 00       	call   c001758e <Thr::loadDLL(char const*, bool)>
c000f797:	83 c4 10             	add    esp,0x10
c000f79a:	83 ec 08             	sub    esp,0x8
c000f79d:	53                   	push   ebx
c000f79e:	50                   	push   eax
c000f79f:	e8 1b 80 00 00       	call   c00177bf <Thr::executeDLL(unsigned long, void*)>
c000f7a4:	83 c4 10             	add    esp,0x10
c000f7a7:	8b 1d 88 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026488
c000f7ad:	83 ec 08             	sub    esp,0x8
c000f7b0:	6a 01                	push   0x1
c000f7b2:	68 5a 38 02 c0       	push   0xc002385a
c000f7b7:	e8 d2 7d 00 00       	call   c001758e <Thr::loadDLL(char const*, bool)>
c000f7bc:	83 c4 10             	add    esp,0x10
c000f7bf:	83 ec 08             	sub    esp,0x8
c000f7c2:	53                   	push   ebx
c000f7c3:	50                   	push   eax
c000f7c4:	e8 f6 7f 00 00       	call   c00177bf <Thr::executeDLL(unsigned long, void*)>
c000f7c9:	83 c4 10             	add    esp,0x10
c000f7cc:	90                   	nop
c000f7cd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f7d0:	c9                   	leave  
c000f7d1:	c3                   	ret    

c000f7d2 <startGUIVESA(void*)>:
c000f7d2:	55                   	push   ebp
c000f7d3:	89 e5                	mov    ebp,esp
c000f7d5:	53                   	push   ebx
c000f7d6:	83 ec 04             	sub    esp,0x4
c000f7d9:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000f7de:	48                   	dec    eax
c000f7df:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c000f7e4:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000f7e9:	85 c0                	test   eax,eax
c000f7eb:	75 01                	jne    c000f7ee <startGUIVESA(void*)+0x1c>
c000f7ed:	fb                   	sti    
c000f7ee:	8b 1d 88 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026488
c000f7f4:	83 ec 08             	sub    esp,0x8
c000f7f7:	6a 01                	push   0x1
c000f7f9:	68 74 38 02 c0       	push   0xc0023874
c000f7fe:	e8 8b 7d 00 00       	call   c001758e <Thr::loadDLL(char const*, bool)>
c000f803:	83 c4 10             	add    esp,0x10
c000f806:	83 ec 08             	sub    esp,0x8
c000f809:	53                   	push   ebx
c000f80a:	50                   	push   eax
c000f80b:	e8 af 7f 00 00       	call   c00177bf <Thr::executeDLL(unsigned long, void*)>
c000f810:	83 c4 10             	add    esp,0x10
c000f813:	8b 1d 88 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026488
c000f819:	83 ec 08             	sub    esp,0x8
c000f81c:	6a 01                	push   0x1
c000f81e:	68 5a 38 02 c0       	push   0xc002385a
c000f823:	e8 66 7d 00 00       	call   c001758e <Thr::loadDLL(char const*, bool)>
c000f828:	83 c4 10             	add    esp,0x10
c000f82b:	83 ec 08             	sub    esp,0x8
c000f82e:	53                   	push   ebx
c000f82f:	50                   	push   eax
c000f830:	e8 8a 7f 00 00       	call   c00177bf <Thr::executeDLL(unsigned long, void*)>
c000f835:	83 c4 10             	add    esp,0x10
c000f838:	90                   	nop
c000f839:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f83c:	c9                   	leave  
c000f83d:	c3                   	ret    

c000f83e <sendKeyToTerminal(unsigned char)>:
c000f83e:	55                   	push   ebp
c000f83f:	89 e5                	mov    ebp,esp
c000f841:	83 ec 28             	sub    esp,0x28
c000f844:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f847:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000f84a:	a1 04 65 02 c0       	mov    eax,ds:0xc0026504
c000f84f:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000f853:	83 ec 08             	sub    esp,0x8
c000f856:	52                   	push   edx
c000f857:	50                   	push   eax
c000f858:	e8 8f b6 ff ff       	call   c000aeec <VgaText::receiveKey(unsigned char)>
c000f85d:	83 c4 10             	add    esp,0x10
c000f860:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000f864:	0f 85 8f 00 00 00    	jne    c000f8f9 <sendKeyToTerminal(unsigned char)+0xbb>
c000f86a:	fa                   	cli    
c000f86b:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000f870:	40                   	inc    eax
c000f871:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c000f876:	a1 44 79 02 c0       	mov    eax,ds:0xc0027944
c000f87b:	40                   	inc    eax
c000f87c:	a3 44 79 02 c0       	mov    ds:0xc0027944,eax
c000f881:	a1 e0 65 02 c0       	mov    eax,ds:0xc00265e0
c000f886:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f889:	c7 05 e0 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00265e0,0x0
c000f893:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f897:	74 1f                	je     c000f8b8 <sendKeyToTerminal(unsigned char)+0x7a>
c000f899:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f89c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000f89f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f8a2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f8a5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f8a8:	83 ec 0c             	sub    esp,0xc
c000f8ab:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f8ae:	e8 7d 8b 00 00       	call   c0018430 <unblockTask(ThreadControlBlock*)>
c000f8b3:	83 c4 10             	add    esp,0x10
c000f8b6:	eb db                	jmp    c000f893 <sendKeyToTerminal(unsigned char)+0x55>
c000f8b8:	a1 44 79 02 c0       	mov    eax,ds:0xc0027944
c000f8bd:	48                   	dec    eax
c000f8be:	a3 44 79 02 c0       	mov    ds:0xc0027944,eax
c000f8c3:	a1 44 79 02 c0       	mov    eax,ds:0xc0027944
c000f8c8:	85 c0                	test   eax,eax
c000f8ca:	75 18                	jne    c000f8e4 <sendKeyToTerminal(unsigned char)+0xa6>
c000f8cc:	a1 40 79 02 c0       	mov    eax,ds:0xc0027940
c000f8d1:	85 c0                	test   eax,eax
c000f8d3:	74 0f                	je     c000f8e4 <sendKeyToTerminal(unsigned char)+0xa6>
c000f8d5:	c7 05 40 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027940,0x0
c000f8df:	e8 90 86 00 00       	call   c0017f74 <schedule()>
c000f8e4:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000f8e9:	48                   	dec    eax
c000f8ea:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c000f8ef:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000f8f4:	85 c0                	test   eax,eax
c000f8f6:	75 01                	jne    c000f8f9 <sendKeyToTerminal(unsigned char)+0xbb>
c000f8f8:	fb                   	sti    
c000f8f9:	90                   	nop
c000f8fa:	c9                   	leave  
c000f8fb:	c3                   	ret    

c000f8fc <sendKeyboardToken(KeyboardToken)>:
c000f8fc:	55                   	push   ebp
c000f8fd:	89 e5                	mov    ebp,esp
c000f8ff:	83 ec 18             	sub    esp,0x18
c000f902:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000f905:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f908:	0f b7 c0             	movzx  eax,ax
c000f90b:	83 f2 01             	xor    edx,0x1
c000f90e:	88 90 00 66 02 c0    	mov    BYTE PTR [eax-0x3ffd9a00],dl
c000f914:	a1 e8 65 02 c0       	mov    eax,ds:0xc00265e8
c000f919:	85 c0                	test   eax,eax
c000f91b:	74 24                	je     c000f941 <sendKeyboardToken(KeyboardToken)+0x45>
c000f91d:	8b 0d e8 65 02 c0    	mov    ecx,DWORD PTR ds:0xc00265e8
c000f923:	83 ec 04             	sub    esp,0x4
c000f926:	68 00 66 02 c0       	push   0xc0026600
c000f92b:	83 ec 08             	sub    esp,0x8
c000f92e:	89 e2                	mov    edx,esp
c000f930:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f933:	89 02                	mov    DWORD PTR [edx],eax
c000f935:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f938:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000f93c:	ff d1                	call   ecx
c000f93e:	83 c4 10             	add    esp,0x10
c000f941:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f944:	66 3d 03 02          	cmp    ax,0x203
c000f948:	75 07                	jne    c000f951 <sendKeyboardToken(KeyboardToken)+0x55>
c000f94a:	a0 00 67 02 c0       	mov    al,ds:0xc0026700
c000f94f:	84 c0                	test   al,al
c000f951:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000f955:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000f958:	a0 08 6a 02 c0       	mov    al,ds:0xc0026a08
c000f95d:	38 c2                	cmp    dl,al
c000f95f:	74 1c                	je     c000f97d <sendKeyboardToken(KeyboardToken)+0x81>
c000f961:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000f964:	a2 08 6a 02 c0       	mov    ds:0xc0026a08,al
c000f969:	a0 08 6a 02 c0       	mov    al,ds:0xc0026a08
c000f96e:	0f b6 c0             	movzx  eax,al
c000f971:	83 ec 0c             	sub    esp,0xc
c000f974:	50                   	push   eax
c000f975:	e8 b2 ab ff ff       	call   c000a52c <setTerminalScrollLock(bool)>
c000f97a:	83 c4 10             	add    esp,0x10
c000f97d:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000f980:	84 c0                	test   al,al
c000f982:	0f 84 ae 00 00 00    	je     c000fa36 <sendKeyboardToken(KeyboardToken)+0x13a>
c000f988:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f98b:	66 3d 10 03          	cmp    ax,0x310
c000f98f:	75 06                	jne    c000f997 <sendKeyboardToken(KeyboardToken)+0x9b>
c000f991:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000f997:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f99a:	66 3d 11 03          	cmp    ax,0x311
c000f99e:	75 06                	jne    c000f9a6 <sendKeyboardToken(KeyboardToken)+0xaa>
c000f9a0:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000f9a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9a9:	66 3d 12 03          	cmp    ax,0x312
c000f9ad:	75 06                	jne    c000f9b5 <sendKeyboardToken(KeyboardToken)+0xb9>
c000f9af:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000f9b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9b8:	66 3d 13 03          	cmp    ax,0x313
c000f9bc:	75 06                	jne    c000f9c4 <sendKeyboardToken(KeyboardToken)+0xc8>
c000f9be:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000f9c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9c7:	66 3d 14 03          	cmp    ax,0x314
c000f9cb:	75 06                	jne    c000f9d3 <sendKeyboardToken(KeyboardToken)+0xd7>
c000f9cd:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000f9d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9d6:	66 3d 15 03          	cmp    ax,0x315
c000f9da:	75 06                	jne    c000f9e2 <sendKeyboardToken(KeyboardToken)+0xe6>
c000f9dc:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000f9e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9e5:	66 3d 16 03          	cmp    ax,0x316
c000f9e9:	75 06                	jne    c000f9f1 <sendKeyboardToken(KeyboardToken)+0xf5>
c000f9eb:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000f9f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9f4:	66 3d 17 03          	cmp    ax,0x317
c000f9f8:	75 06                	jne    c000fa00 <sendKeyboardToken(KeyboardToken)+0x104>
c000f9fa:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000fa00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa03:	66 3d 18 03          	cmp    ax,0x318
c000fa07:	75 06                	jne    c000fa0f <sendKeyboardToken(KeyboardToken)+0x113>
c000fa09:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000fa0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa12:	66 3d 19 03          	cmp    ax,0x319
c000fa16:	75 06                	jne    c000fa1e <sendKeyboardToken(KeyboardToken)+0x122>
c000fa18:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000fa1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa21:	66 3d 1a 03          	cmp    ax,0x31a
c000fa25:	0f 85 c9 00 00 00    	jne    c000faf4 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000fa2b:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000fa31:	e9 be 00 00 00       	jmp    c000faf4 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000fa36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa39:	66 3d 10 03          	cmp    ax,0x310
c000fa3d:	75 0a                	jne    c000fa49 <sendKeyboardToken(KeyboardToken)+0x14d>
c000fa3f:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000fa45:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa4c:	66 3d 11 03          	cmp    ax,0x311
c000fa50:	75 0a                	jne    c000fa5c <sendKeyboardToken(KeyboardToken)+0x160>
c000fa52:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000fa58:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa5f:	66 3d 12 03          	cmp    ax,0x312
c000fa63:	75 0a                	jne    c000fa6f <sendKeyboardToken(KeyboardToken)+0x173>
c000fa65:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000fa6b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa72:	66 3d 13 03          	cmp    ax,0x313
c000fa76:	75 0a                	jne    c000fa82 <sendKeyboardToken(KeyboardToken)+0x186>
c000fa78:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000fa7e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa85:	66 3d 14 03          	cmp    ax,0x314
c000fa89:	75 0a                	jne    c000fa95 <sendKeyboardToken(KeyboardToken)+0x199>
c000fa8b:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000fa91:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa98:	66 3d 15 03          	cmp    ax,0x315
c000fa9c:	75 0a                	jne    c000faa8 <sendKeyboardToken(KeyboardToken)+0x1ac>
c000fa9e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000faa4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000faa8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000faab:	66 3d 16 03          	cmp    ax,0x316
c000faaf:	75 0a                	jne    c000fabb <sendKeyboardToken(KeyboardToken)+0x1bf>
c000fab1:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000fab7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fabb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fabe:	66 3d 17 03          	cmp    ax,0x317
c000fac2:	75 0a                	jne    c000face <sendKeyboardToken(KeyboardToken)+0x1d2>
c000fac4:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000faca:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000face:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fad1:	66 3d 18 03          	cmp    ax,0x318
c000fad5:	75 0a                	jne    c000fae1 <sendKeyboardToken(KeyboardToken)+0x1e5>
c000fad7:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000fadd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fae1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fae4:	66 3d 19 03          	cmp    ax,0x319
c000fae8:	75 0a                	jne    c000faf4 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000faea:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000faf0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000faf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000faf7:	66 3d 00 02          	cmp    ax,0x200
c000fafb:	75 2c                	jne    c000fb29 <sendKeyboardToken(KeyboardToken)+0x22d>
c000fafd:	a0 00 6a 02 c0       	mov    al,ds:0xc0026a00
c000fb02:	83 f0 01             	xor    eax,0x1
c000fb05:	84 c0                	test   al,al
c000fb07:	74 20                	je     c000fb29 <sendKeyboardToken(KeyboardToken)+0x22d>
c000fb09:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000fb0e:	6a 01                	push   0x1
c000fb10:	6a 00                	push   0x0
c000fb12:	68 66 f7 00 c0       	push   0xc000f766
c000fb17:	50                   	push   eax
c000fb18:	e8 3b 82 00 00       	call   c0017d58 <Process::createThread(void (*)(void*), void*, int)>
c000fb1d:	83 c4 10             	add    esp,0x10
c000fb20:	c6 05 00 6a 02 c0 01 	mov    BYTE PTR ds:0xc0026a00,0x1
c000fb27:	eb 33                	jmp    c000fb5c <sendKeyboardToken(KeyboardToken)+0x260>
c000fb29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb2c:	66 3d 01 02          	cmp    ax,0x201
c000fb30:	75 2a                	jne    c000fb5c <sendKeyboardToken(KeyboardToken)+0x260>
c000fb32:	a0 00 6a 02 c0       	mov    al,ds:0xc0026a00
c000fb37:	83 f0 01             	xor    eax,0x1
c000fb3a:	84 c0                	test   al,al
c000fb3c:	74 1e                	je     c000fb5c <sendKeyboardToken(KeyboardToken)+0x260>
c000fb3e:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000fb43:	6a 01                	push   0x1
c000fb45:	6a 00                	push   0x0
c000fb47:	68 d2 f7 00 c0       	push   0xc000f7d2
c000fb4c:	50                   	push   eax
c000fb4d:	e8 06 82 00 00       	call   c0017d58 <Process::createThread(void (*)(void*), void*, int)>
c000fb52:	83 c4 10             	add    esp,0x10
c000fb55:	c6 05 00 6a 02 c0 01 	mov    BYTE PTR ds:0xc0026a00,0x1
c000fb5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb5f:	66 3d 1d 03          	cmp    ax,0x31d
c000fb63:	75 06                	jne    c000fb6b <sendKeyboardToken(KeyboardToken)+0x26f>
c000fb65:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000fb6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb6e:	66 3d 1c 03          	cmp    ax,0x31c
c000fb72:	75 06                	jne    c000fb7a <sendKeyboardToken(KeyboardToken)+0x27e>
c000fb74:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000fb7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb7d:	66 3d 1b 03          	cmp    ax,0x31b
c000fb81:	75 06                	jne    c000fb89 <sendKeyboardToken(KeyboardToken)+0x28d>
c000fb83:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000fb89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb8c:	66 3d 1e 03          	cmp    ax,0x31e
c000fb90:	75 06                	jne    c000fb98 <sendKeyboardToken(KeyboardToken)+0x29c>
c000fb92:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000fb98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb9b:	66 3d 1f 03          	cmp    ax,0x31f
c000fb9f:	75 06                	jne    c000fba7 <sendKeyboardToken(KeyboardToken)+0x2ab>
c000fba1:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000fba7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbaa:	66 3d 1a 03          	cmp    ax,0x31a
c000fbae:	75 06                	jne    c000fbb6 <sendKeyboardToken(KeyboardToken)+0x2ba>
c000fbb0:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000fbb6:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000fbba:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fbbd:	83 f0 01             	xor    eax,0x1
c000fbc0:	84 c0                	test   al,al
c000fbc2:	74 77                	je     c000fc3b <sendKeyboardToken(KeyboardToken)+0x33f>
c000fbc4:	a0 01 67 02 c0       	mov    al,ds:0xc0026701
c000fbc9:	84 c0                	test   al,al
c000fbcb:	74 41                	je     c000fc0e <sendKeyboardToken(KeyboardToken)+0x312>
c000fbcd:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fbd1:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000fbd5:	74 2b                	je     c000fc02 <sendKeyboardToken(KeyboardToken)+0x306>
c000fbd7:	8b 15 04 6a 02 c0    	mov    edx,DWORD PTR ds:0xc0026a04
c000fbdd:	89 d0                	mov    eax,edx
c000fbdf:	c1 e0 02             	shl    eax,0x2
c000fbe2:	01 d0                	add    eax,edx
c000fbe4:	01 c0                	add    eax,eax
c000fbe6:	a3 04 6a 02 c0       	mov    ds:0xc0026a04,eax
c000fbeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbee:	0f b7 c0             	movzx  eax,ax
c000fbf1:	8d 50 d0             	lea    edx,[eax-0x30]
c000fbf4:	a1 04 6a 02 c0       	mov    eax,ds:0xc0026a04
c000fbf9:	01 d0                	add    eax,edx
c000fbfb:	a3 04 6a 02 c0       	mov    ds:0xc0026a04,eax
c000fc00:	eb 6d                	jmp    c000fc6f <sendKeyboardToken(KeyboardToken)+0x373>
c000fc02:	c7 05 04 6a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026a04,0x0
c000fc0c:	eb 61                	jmp    c000fc6f <sendKeyboardToken(KeyboardToken)+0x373>
c000fc0e:	a1 04 6a 02 c0       	mov    eax,ds:0xc0026a04
c000fc13:	85 c0                	test   eax,eax
c000fc15:	74 18                	je     c000fc2f <sendKeyboardToken(KeyboardToken)+0x333>
c000fc17:	a1 04 6a 02 c0       	mov    eax,ds:0xc0026a04
c000fc1c:	0f b6 c0             	movzx  eax,al
c000fc1f:	83 ec 0c             	sub    esp,0xc
c000fc22:	50                   	push   eax
c000fc23:	e8 16 fc ff ff       	call   c000f83e <sendKeyToTerminal(unsigned char)>
c000fc28:	83 c4 10             	add    esp,0x10
c000fc2b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fc2f:	c7 05 04 6a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026a04,0x0
c000fc39:	eb 34                	jmp    c000fc6f <sendKeyboardToken(KeyboardToken)+0x373>
c000fc3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc3e:	66 3d 01 01          	cmp    ax,0x101
c000fc42:	75 2b                	jne    c000fc6f <sendKeyboardToken(KeyboardToken)+0x373>
c000fc44:	a1 04 6a 02 c0       	mov    eax,ds:0xc0026a04
c000fc49:	85 c0                	test   eax,eax
c000fc4b:	74 18                	je     c000fc65 <sendKeyboardToken(KeyboardToken)+0x369>
c000fc4d:	a1 04 6a 02 c0       	mov    eax,ds:0xc0026a04
c000fc52:	0f b6 c0             	movzx  eax,al
c000fc55:	83 ec 0c             	sub    esp,0xc
c000fc58:	50                   	push   eax
c000fc59:	e8 e0 fb ff ff       	call   c000f83e <sendKeyToTerminal(unsigned char)>
c000fc5e:	83 c4 10             	add    esp,0x10
c000fc61:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fc65:	c7 05 04 6a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026a04,0x0
c000fc6f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000fc72:	83 f0 01             	xor    eax,0x1
c000fc75:	84 c0                	test   al,al
c000fc77:	74 4c                	je     c000fcc5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fc79:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fc7c:	83 f0 01             	xor    eax,0x1
c000fc7f:	84 c0                	test   al,al
c000fc81:	74 42                	je     c000fcc5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fc83:	a0 00 67 02 c0       	mov    al,ds:0xc0026700
c000fc88:	83 f0 01             	xor    eax,0x1
c000fc8b:	84 c0                	test   al,al
c000fc8d:	74 36                	je     c000fcc5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fc8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc92:	66 83 f8 1f          	cmp    ax,0x1f
c000fc96:	76 09                	jbe    c000fca1 <sendKeyboardToken(KeyboardToken)+0x3a5>
c000fc98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc9b:	66 83 f8 7e          	cmp    ax,0x7e
c000fc9f:	76 12                	jbe    c000fcb3 <sendKeyboardToken(KeyboardToken)+0x3b7>
c000fca1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fca4:	66 83 f8 0a          	cmp    ax,0xa
c000fca8:	74 09                	je     c000fcb3 <sendKeyboardToken(KeyboardToken)+0x3b7>
c000fcaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcad:	66 83 f8 08          	cmp    ax,0x8
c000fcb1:	75 12                	jne    c000fcc5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fcb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcb6:	0f b6 c0             	movzx  eax,al
c000fcb9:	83 ec 0c             	sub    esp,0xc
c000fcbc:	50                   	push   eax
c000fcbd:	e8 7c fb ff ff       	call   c000f83e <sendKeyToTerminal(unsigned char)>
c000fcc2:	83 c4 10             	add    esp,0x10
c000fcc5:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000fcc8:	83 f0 01             	xor    eax,0x1
c000fccb:	84 c0                	test   al,al
c000fccd:	74 4f                	je     c000fd1e <sendKeyboardToken(KeyboardToken)+0x422>
c000fccf:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fcd2:	83 f0 01             	xor    eax,0x1
c000fcd5:	84 c0                	test   al,al
c000fcd7:	74 45                	je     c000fd1e <sendKeyboardToken(KeyboardToken)+0x422>
c000fcd9:	a0 00 67 02 c0       	mov    al,ds:0xc0026700
c000fcde:	84 c0                	test   al,al
c000fce0:	74 3c                	je     c000fd1e <sendKeyboardToken(KeyboardToken)+0x422>
c000fce2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fce5:	66 83 f8 3f          	cmp    ax,0x3f
c000fce9:	76 33                	jbe    c000fd1e <sendKeyboardToken(KeyboardToken)+0x422>
c000fceb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcee:	66 83 f8 7f          	cmp    ax,0x7f
c000fcf2:	77 2a                	ja     c000fd1e <sendKeyboardToken(KeyboardToken)+0x422>
c000fcf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcf7:	88 c2                	mov    dl,al
c000fcf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcfc:	66 83 f8 5f          	cmp    ax,0x5f
c000fd00:	76 04                	jbe    c000fd06 <sendKeyboardToken(KeyboardToken)+0x40a>
c000fd02:	b0 20                	mov    al,0x20
c000fd04:	eb 02                	jmp    c000fd08 <sendKeyboardToken(KeyboardToken)+0x40c>
c000fd06:	b0 00                	mov    al,0x0
c000fd08:	29 c2                	sub    edx,eax
c000fd0a:	88 d0                	mov    al,dl
c000fd0c:	83 e8 40             	sub    eax,0x40
c000fd0f:	0f b6 c0             	movzx  eax,al
c000fd12:	83 ec 0c             	sub    esp,0xc
c000fd15:	50                   	push   eax
c000fd16:	e8 23 fb ff ff       	call   c000f83e <sendKeyToTerminal(unsigned char)>
c000fd1b:	83 c4 10             	add    esp,0x10
c000fd1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd21:	66 3d 00 03          	cmp    ax,0x300
c000fd25:	75 0f                	jne    c000fd36 <sendKeyboardToken(KeyboardToken)+0x43a>
c000fd27:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fd2a:	83 f0 01             	xor    eax,0x1
c000fd2d:	84 c0                	test   al,al
c000fd2f:	74 05                	je     c000fd36 <sendKeyboardToken(KeyboardToken)+0x43a>
c000fd31:	e8 67 ab ff ff       	call   c000a89d <doTerminalCycle()>
c000fd36:	90                   	nop
c000fd37:	c9                   	leave  
c000fd38:	c3                   	ret    

c000fd39 <clearInternalKeybuffer(VgaText*)>:
c000fd39:	55                   	push   ebp
c000fd3a:	89 e5                	mov    ebp,esp
c000fd3c:	83 ec 08             	sub    esp,0x8
c000fd3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd42:	05 98 01 00 00       	add    eax,0x198
c000fd47:	83 ec 0c             	sub    esp,0xc
c000fd4a:	50                   	push   eax
c000fd4b:	e8 50 09 ff ff       	call   c00006a0 <strlen>
c000fd50:	83 c4 10             	add    esp,0x10
c000fd53:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fd56:	81 c2 98 01 00 00    	add    edx,0x198
c000fd5c:	83 ec 04             	sub    esp,0x4
c000fd5f:	50                   	push   eax
c000fd60:	6a 00                	push   0x0
c000fd62:	52                   	push   edx
c000fd63:	e8 1c 09 ff ff       	call   c0000684 <memset>
c000fd68:	83 c4 10             	add    esp,0x10
c000fd6b:	90                   	nop
c000fd6c:	c9                   	leave  
c000fd6d:	c3                   	ret    

c000fd6e <readKeyboard(VgaText*, char*, unsigned long)>:
c000fd6e:	55                   	push   ebp
c000fd6f:	89 e5                	mov    ebp,esp
c000fd71:	83 ec 18             	sub    esp,0x18
c000fd74:	a1 e8 65 02 c0       	mov    eax,ds:0xc00265e8
c000fd79:	85 c0                	test   eax,eax
c000fd7b:	74 2a                	je     c000fda7 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000fd7d:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000fd83:	8b 0d e8 65 02 c0    	mov    ecx,DWORD PTR ds:0xc00265e8
c000fd89:	83 ec 04             	sub    esp,0x4
c000fd8c:	68 00 66 02 c0       	push   0xc0026600
c000fd91:	83 ec 08             	sub    esp,0x8
c000fd94:	89 e2                	mov    edx,esp
c000fd96:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000fd99:	89 02                	mov    DWORD PTR [edx],eax
c000fd9b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fd9e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000fda2:	ff d1                	call   ecx
c000fda4:	83 c4 10             	add    esp,0x10
c000fda7:	fb                   	sti    
c000fda8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000fdaf:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000fdb3:	0f 84 a1 00 00 00    	je     c000fe5a <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000fdb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdbc:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c000fdc2:	84 c0                	test   al,al
c000fdc4:	75 28                	jne    c000fdee <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000fdc6:	fa                   	cli    
c000fdc7:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000fdcc:	40                   	inc    eax
c000fdcd:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c000fdd2:	e8 9d 81 00 00       	call   c0017f74 <schedule()>
c000fdd7:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000fddc:	48                   	dec    eax
c000fddd:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c000fde2:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000fde7:	85 c0                	test   eax,eax
c000fde9:	75 ce                	jne    c000fdb9 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000fdeb:	fb                   	sti    
c000fdec:	eb cb                	jmp    c000fdb9 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000fdee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fdf1:	8d 50 01             	lea    edx,[eax+0x1]
c000fdf4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000fdf7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fdfa:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c000fe00:	88 10                	mov    BYTE PTR [eax],dl
c000fe02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe05:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c000fe0b:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000fe0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe11:	05 98 01 00 00       	add    eax,0x198
c000fe16:	83 ec 0c             	sub    esp,0xc
c000fe19:	50                   	push   eax
c000fe1a:	e8 81 08 ff ff       	call   c00006a0 <strlen>
c000fe1f:	83 c4 10             	add    esp,0x10
c000fe22:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fe25:	81 c2 98 01 00 00    	add    edx,0x198
c000fe2b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000fe2e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fe31:	81 c2 98 01 00 00    	add    edx,0x198
c000fe37:	83 ec 04             	sub    esp,0x4
c000fe3a:	50                   	push   eax
c000fe3b:	51                   	push   ecx
c000fe3c:	52                   	push   edx
c000fe3d:	e8 7a 07 ff ff       	call   c00005bc <memmove>
c000fe42:	83 c4 10             	add    esp,0x10
c000fe45:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000fe48:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000fe4b:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000fe4f:	0f 85 5a ff ff ff    	jne    c000fdaf <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000fe55:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe58:	eb 03                	jmp    c000fe5d <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000fe5a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe5d:	c9                   	leave  
c000fe5e:	c3                   	ret    
c000fe5f:	90                   	nop

c000fe60 <Keyboard::Keyboard(char const*)>:
c000fe60:	83 ec 0c             	sub    esp,0xc
c000fe63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe67:	83 ec 08             	sub    esp,0x8
c000fe6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe6e:	50                   	push   eax
c000fe6f:	e8 b6 e2 ff ff       	call   c000e12a <Device::Device(char const*)>
c000fe74:	83 c4 10             	add    esp,0x10
c000fe77:	ba 98 38 02 c0       	mov    edx,0xc0023898
c000fe7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe80:	89 10                	mov    DWORD PTR [eax],edx
c000fe82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe86:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000fe90:	c6 05 e4 65 02 c0 01 	mov    BYTE PTR ds:0xc00265e4,0x1
c000fe97:	90                   	nop
c000fe98:	83 c4 0c             	add    esp,0xc
c000fe9b:	c3                   	ret    

c000fe9c <Keyboard::~Keyboard()>:
c000fe9c:	83 ec 0c             	sub    esp,0xc
c000fe9f:	ba 98 38 02 c0       	mov    edx,0xc0023898
c000fea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fea8:	89 10                	mov    DWORD PTR [eax],edx
c000feaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000feae:	83 ec 0c             	sub    esp,0xc
c000feb1:	50                   	push   eax
c000feb2:	e8 3d df ff ff       	call   c000ddf4 <Device::~Device()>
c000feb7:	83 c4 10             	add    esp,0x10
c000feba:	90                   	nop
c000febb:	83 c4 0c             	add    esp,0xc
c000febe:	c3                   	ret    
c000febf:	90                   	nop

c000fec0 <Keyboard::~Keyboard()>:
c000fec0:	83 ec 0c             	sub    esp,0xc
c000fec3:	83 ec 0c             	sub    esp,0xc
c000fec6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000feca:	e8 cd ff ff ff       	call   c000fe9c <Keyboard::~Keyboard()>
c000fecf:	83 c4 10             	add    esp,0x10
c000fed2:	83 ec 08             	sub    esp,0x8
c000fed5:	68 5c 01 00 00       	push   0x15c
c000feda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fede:	e8 1b cb ff ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c000fee3:	83 c4 10             	add    esp,0x10
c000fee6:	83 c4 0c             	add    esp,0xc
c000fee9:	c3                   	ret    

c000feea <LogicalDisk::close(int, int, void*)>:
c000feea:	83 c8 ff             	or     eax,0xffffffff
c000feed:	c3                   	ret    

c000feee <LogicalDisk::~LogicalDisk()>:
c000feee:	83 ec 0c             	sub    esp,0xc
c000fef1:	ba 10 39 02 c0       	mov    edx,0xc0023910
c000fef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fefa:	89 10                	mov    DWORD PTR [eax],edx
c000fefc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff00:	83 ec 0c             	sub    esp,0xc
c000ff03:	50                   	push   eax
c000ff04:	e8 eb de ff ff       	call   c000ddf4 <Device::~Device()>
c000ff09:	83 c4 10             	add    esp,0x10
c000ff0c:	90                   	nop
c000ff0d:	83 c4 0c             	add    esp,0xc
c000ff10:	c3                   	ret    
c000ff11:	90                   	nop

c000ff12 <LogicalDisk::~LogicalDisk()>:
c000ff12:	83 ec 0c             	sub    esp,0xc
c000ff15:	83 ec 0c             	sub    esp,0xc
c000ff18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff1c:	e8 cd ff ff ff       	call   c000feee <LogicalDisk::~LogicalDisk()>
c000ff21:	83 c4 10             	add    esp,0x10
c000ff24:	83 ec 08             	sub    esp,0x8
c000ff27:	68 74 01 00 00       	push   0x174
c000ff2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff30:	e8 c9 ca ff ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c000ff35:	83 c4 10             	add    esp,0x10
c000ff38:	83 c4 0c             	add    esp,0xc
c000ff3b:	c3                   	ret    

c000ff3c <LogicalDisk::open(int, int, void*)>:
c000ff3c:	83 ec 18             	sub    esp,0x18
c000ff3f:	68 c4 38 02 c0       	push   0xc00238c4
c000ff44:	e8 58 44 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c000ff49:	83 c8 ff             	or     eax,0xffffffff
c000ff4c:	83 c4 1c             	add    esp,0x1c
c000ff4f:	c3                   	ret    

c000ff50 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000ff50:	53                   	push   ebx
c000ff51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ff55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ff59:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ff5d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000ff63:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000ff69:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000ff6f:	77 10                	ja     c000ff81 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000ff71:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000ff77:	89 d3                	mov    ebx,edx
c000ff79:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000ff7f:	72 05                	jb     c000ff86 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000ff81:	83 c8 ff             	or     eax,0xffffffff
c000ff84:	89 c2                	mov    edx,eax
c000ff86:	5b                   	pop    ebx
c000ff87:	c3                   	ret    

c000ff88 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000ff88:	56                   	push   esi
c000ff89:	83 c8 ff             	or     eax,0xffffffff
c000ff8c:	53                   	push   ebx
c000ff8d:	89 c2                	mov    edx,eax
c000ff8f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ff93:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000ff97:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ff9b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ffa1:	77 27                	ja     c000ffca <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ffa3:	89 d8                	mov    eax,ebx
c000ffa5:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000ffab:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000ffb1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ffb6:	89 c2                	mov    edx,eax
c000ffb8:	73 10                	jae    c000ffca <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ffba:	89 c8                	mov    eax,ecx
c000ffbc:	89 da                	mov    edx,ebx
c000ffbe:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000ffc4:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000ffca:	5b                   	pop    ebx
c000ffcb:	5e                   	pop    esi
c000ffcc:	c3                   	ret    
c000ffcd:	90                   	nop

c000ffce <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ffce:	83 ec 1c             	sub    esp,0x1c
c000ffd1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ffd5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ffd9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ffe1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ffe5:	89 04 24             	mov    DWORD PTR [esp],eax
c000ffe8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ffec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000fff0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fff4:	83 ec 08             	sub    esp,0x8
c000fff7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fffb:	50                   	push   eax
c000fffc:	e8 29 e1 ff ff       	call   c000e12a <Device::Device(char const*)>
c0010001:	83 c4 10             	add    esp,0x10
c0010004:	ba 10 39 02 c0       	mov    edx,0xc0023910
c0010009:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001000d:	89 10                	mov    DWORD PTR [eax],edx
c001000f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010013:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001001a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001001e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010025:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010029:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0010033:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010037:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001003b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001003f:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0010045:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001004b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001004f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010052:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010056:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001005c:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0010062:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010066:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001006a:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0010070:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010074:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001007e:	90                   	nop
c001007f:	83 c4 1c             	add    esp,0x1c
c0010082:	c3                   	ret    
c0010083:	90                   	nop

c0010084 <LogicalDisk::assignDriveLetter()>:
c0010084:	55                   	push   ebp
c0010085:	57                   	push   edi
c0010086:	56                   	push   esi
c0010087:	53                   	push   ebx
c0010088:	83 ec 14             	sub    esp,0x14
c001008b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001008f:	8b 3d 20 6a 02 c0    	mov    edi,DWORD PTR ds:0xc0026a20
c0010095:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001009b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001009f:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00100a5:	8b 3d 24 6a 02 c0    	mov    edi,DWORD PTR ds:0xc0026a24
c00100ab:	3c 01                	cmp    al,0x1
c00100ad:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00100b1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00100b5:	19 c0                	sbb    eax,eax
c00100b7:	83 e0 02             	and    eax,0x2
c00100ba:	83 c0 41             	add    eax,0x41
c00100bd:	0f be e8             	movsx  ebp,al
c00100c0:	3c 43                	cmp    al,0x43
c00100c2:	75 10                	jne    c00100d4 <LogicalDisk::assignDriveLetter()+0x50>
c00100c4:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00100cb:	75 5d                	jne    c001012a <LogicalDisk::assignDriveLetter()+0xa6>
c00100cd:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00100d2:	75 56                	jne    c001012a <LogicalDisk::assignDriveLetter()+0xa6>
c00100d4:	8d 75 bf             	lea    esi,[ebp-0x41]
c00100d7:	ba 01 00 00 00       	mov    edx,0x1
c00100dc:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00100e0:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00100e4:	d3 e2                	shl    edx,cl
c00100e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00100ea:	89 d7                	mov    edi,edx
c00100ec:	89 d6                	mov    esi,edx
c00100ee:	c1 ff 1f             	sar    edi,0x1f
c00100f1:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00100f5:	21 f9                	and    ecx,edi
c00100f7:	09 d1                	or     ecx,edx
c00100f9:	75 2f                	jne    c001012a <LogicalDisk::assignDriveLetter()+0xa6>
c00100fb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00100ff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010103:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0010109:	09 f2                	or     edx,esi
c001010b:	89 15 20 6a 02 c0    	mov    DWORD PTR ds:0xc0026a20,edx
c0010111:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010115:	09 fa                	or     edx,edi
c0010117:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001011b:	89 15 24 6a 02 c0    	mov    DWORD PTR ds:0xc0026a24,edx
c0010121:	89 1c bd 40 6a 02 c0 	mov    DWORD PTR [edi*4-0x3ffd95c0],ebx
c0010128:	eb 08                	jmp    c0010132 <LogicalDisk::assignDriveLetter()+0xae>
c001012a:	45                   	inc    ebp
c001012b:	40                   	inc    eax
c001012c:	3c 5b                	cmp    al,0x5b
c001012e:	75 90                	jne    c00100c0 <LogicalDisk::assignDriveLetter()+0x3c>
c0010130:	31 c0                	xor    eax,eax
c0010132:	83 c4 14             	add    esp,0x14
c0010135:	5b                   	pop    ebx
c0010136:	5e                   	pop    esi
c0010137:	5f                   	pop    edi
c0010138:	5d                   	pop    ebp
c0010139:	c3                   	ret    

c001013a <LogicalDisk::mount()>:
c001013a:	56                   	push   esi
c001013b:	53                   	push   ebx
c001013c:	53                   	push   ebx
c001013d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010141:	8b 1d b4 65 02 c0    	mov    ebx,DWORD PTR ds:0xc00265b4
c0010147:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0010151:	85 db                	test   ebx,ebx
c0010153:	74 27                	je     c001017c <LogicalDisk::mount()+0x42>
c0010155:	51                   	push   ecx
c0010156:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001015d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001015f:	83 e8 41             	sub    eax,0x41
c0010162:	50                   	push   eax
c0010163:	56                   	push   esi
c0010164:	53                   	push   ebx
c0010165:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010168:	83 c4 10             	add    esp,0x10
c001016b:	84 c0                	test   al,al
c001016d:	74 08                	je     c0010177 <LogicalDisk::mount()+0x3d>
c001016f:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0010175:	eb 07                	jmp    c001017e <LogicalDisk::mount()+0x44>
c0010177:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001017a:	eb d5                	jmp    c0010151 <LogicalDisk::mount()+0x17>
c001017c:	31 c0                	xor    eax,eax
c001017e:	5a                   	pop    edx
c001017f:	5b                   	pop    ebx
c0010180:	5e                   	pop    esi
c0010181:	c3                   	ret    

c0010182 <LogicalDisk::unmount()>:
c0010182:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010186:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0010190:	c3                   	ret    
c0010191:	90                   	nop

c0010192 <LogicalDisk::eject()>:
c0010192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010196:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001019c:	8b 10                	mov    edx,DWORD PTR [eax]
c001019e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00101a2:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00101a5:	90                   	nop

c00101a6 <LogicalDisk::unassignDriveLetter()>:
c00101a6:	57                   	push   edi
c00101a7:	56                   	push   esi
c00101a8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00101ac:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00101b3:	84 c9                	test   cl,cl
c00101b5:	75 0f                	jne    c00101c6 <LogicalDisk::unassignDriveLetter()+0x20>
c00101b7:	c7 44 24 0c e8 38 02 c0 	mov    DWORD PTR [esp+0xc],0xc00238e8
c00101bf:	5e                   	pop    esi
c00101c0:	5f                   	pop    edi
c00101c1:	e9 db 41 00 00       	jmp    c00143a1 <Krnl::panic(char const*)>
c00101c6:	83 e9 41             	sub    ecx,0x41
c00101c9:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00101d0:	b8 01 00 00 00       	mov    eax,0x1
c00101d5:	c7 04 8d 40 6a 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd95c0],0x0
c00101e0:	d3 e0                	shl    eax,cl
c00101e2:	89 c7                	mov    edi,eax
c00101e4:	f7 d0                	not    eax
c00101e6:	c1 ff 1f             	sar    edi,0x1f
c00101e9:	21 05 20 6a 02 c0    	and    DWORD PTR ds:0xc0026a20,eax
c00101ef:	89 fe                	mov    esi,edi
c00101f1:	f7 d6                	not    esi
c00101f3:	21 35 24 6a 02 c0    	and    DWORD PTR ds:0xc0026a24,esi
c00101f9:	5e                   	pop    esi
c00101fa:	5f                   	pop    edi
c00101fb:	c3                   	ret    

c00101fc <LogicalDisk::read(unsigned long long, int, void*)>:
c00101fc:	57                   	push   edi
c00101fd:	56                   	push   esi
c00101fe:	53                   	push   ebx
c00101ff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010203:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010207:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001020b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001020f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010215:	77 41                	ja     c0010258 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0010217:	99                   	cdq    
c0010218:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001021e:	01 c8                	add    eax,ecx
c0010220:	11 da                	adc    edx,ebx
c0010222:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0010228:	19 d7                	sbb    edi,edx
c001022a:	72 33                	jb     c001025f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001022c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0010232:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010238:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001023c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010240:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0010246:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001024c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010250:	5b                   	pop    ebx
c0010251:	5e                   	pop    esi
c0010252:	5f                   	pop    edi
c0010253:	e9 3c 0b 00 00       	jmp    c0010d94 <VCache::read(unsigned long long, int, void*)>
c0010258:	b8 05 00 00 00       	mov    eax,0x5
c001025d:	eb 05                	jmp    c0010264 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001025f:	b8 07 00 00 00       	mov    eax,0x7
c0010264:	5b                   	pop    ebx
c0010265:	5e                   	pop    esi
c0010266:	5f                   	pop    edi
c0010267:	c3                   	ret    

c0010268 <LogicalDisk::write(unsigned long long, int, void*)>:
c0010268:	57                   	push   edi
c0010269:	56                   	push   esi
c001026a:	53                   	push   ebx
c001026b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001026f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010273:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010277:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001027b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010281:	77 41                	ja     c00102c4 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0010283:	99                   	cdq    
c0010284:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001028a:	01 c8                	add    eax,ecx
c001028c:	11 da                	adc    edx,ebx
c001028e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0010294:	19 d7                	sbb    edi,edx
c0010296:	72 33                	jb     c00102cb <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0010298:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001029e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00102a4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00102a8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00102ac:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00102b2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00102b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00102bc:	5b                   	pop    ebx
c00102bd:	5e                   	pop    esi
c00102be:	5f                   	pop    edi
c00102bf:	e9 8c 09 00 00       	jmp    c0010c50 <VCache::write(unsigned long long, int, void*)>
c00102c4:	b8 05 00 00 00       	mov    eax,0x5
c00102c9:	eb 05                	jmp    c00102d0 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00102cb:	b8 07 00 00 00       	mov    eax,0x7
c00102d0:	5b                   	pop    ebx
c00102d1:	5e                   	pop    esi
c00102d2:	5f                   	pop    edi
c00102d3:	c3                   	ret    

c00102d4 <Mouse::Mouse(char const*)>:
c00102d4:	83 ec 0c             	sub    esp,0xc
c00102d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102db:	83 ec 08             	sub    esp,0x8
c00102de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102e2:	50                   	push   eax
c00102e3:	e8 42 de ff ff       	call   c000e12a <Device::Device(char const*)>
c00102e8:	83 c4 10             	add    esp,0x10
c00102eb:	ba 3c 39 02 c0       	mov    edx,0xc002393c
c00102f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102f4:	89 10                	mov    DWORD PTR [eax],edx
c00102f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102fa:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0010304:	90                   	nop
c0010305:	83 c4 0c             	add    esp,0xc
c0010308:	c3                   	ret    
c0010309:	90                   	nop
c001030a:	66 90                	xchg   ax,ax

c001030c <Mouse::~Mouse()>:
c001030c:	83 ec 0c             	sub    esp,0xc
c001030f:	ba 3c 39 02 c0       	mov    edx,0xc002393c
c0010314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010318:	89 10                	mov    DWORD PTR [eax],edx
c001031a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001031e:	83 ec 0c             	sub    esp,0xc
c0010321:	50                   	push   eax
c0010322:	e8 cd da ff ff       	call   c000ddf4 <Device::~Device()>
c0010327:	83 c4 10             	add    esp,0x10
c001032a:	90                   	nop
c001032b:	83 c4 0c             	add    esp,0xc
c001032e:	c3                   	ret    
c001032f:	90                   	nop

c0010330 <Mouse::~Mouse()>:
c0010330:	83 ec 0c             	sub    esp,0xc
c0010333:	83 ec 0c             	sub    esp,0xc
c0010336:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001033a:	e8 cd ff ff ff       	call   c001030c <Mouse::~Mouse()>
c001033f:	83 c4 10             	add    esp,0x10
c0010342:	83 ec 08             	sub    esp,0x8
c0010345:	68 58 01 00 00       	push   0x158
c001034a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001034e:	e8 ab c6 ff ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c0010353:	83 c4 10             	add    esp,0x10
c0010356:	83 c4 0c             	add    esp,0xc
c0010359:	c3                   	ret    

c001035a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001035a:	55                   	push   ebp
c001035b:	57                   	push   edi
c001035c:	56                   	push   esi
c001035d:	53                   	push   ebx
c001035e:	81 ec 28 01 00 00    	sub    esp,0x128
c0010364:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001036b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0010372:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0010379:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0010380:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010384:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010388:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001038f:	e8 92 de ff ff       	call   c000e226 <Device::getName()>
c0010394:	5a                   	pop    edx
c0010395:	59                   	pop    ecx
c0010396:	50                   	push   eax
c0010397:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001039b:	55                   	push   ebp
c001039c:	e8 9f 03 ff ff       	call   c0000740 <strcpy>
c00103a1:	5b                   	pop    ebx
c00103a2:	58                   	pop    eax
c00103a3:	68 60 39 02 c0       	push   0xc0023960
c00103a8:	55                   	push   ebp
c00103a9:	e8 d2 04 ff ff       	call   c0000880 <strcat>
c00103ae:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00103b5:	e8 09 96 ff ff       	call   c00099c3 <malloc>
c00103ba:	83 c4 0c             	add    esp,0xc
c00103bd:	89 c3                	mov    ebx,eax
c00103bf:	57                   	push   edi
c00103c0:	56                   	push   esi
c00103c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00103c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00103c9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00103d0:	55                   	push   ebp
c00103d1:	50                   	push   eax
c00103d2:	e8 f7 fb ff ff       	call   c000ffce <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00103d7:	83 c4 14             	add    esp,0x14
c00103da:	53                   	push   ebx
c00103db:	e8 a4 fc ff ff       	call   c0010084 <LogicalDisk::assignDriveLetter()>
c00103e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00103e3:	e8 52 fd ff ff       	call   c001013a <LogicalDisk::mount()>
c00103e8:	58                   	pop    eax
c00103e9:	5a                   	pop    edx
c00103ea:	53                   	push   ebx
c00103eb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00103f2:	e8 2f db ff ff       	call   c000df26 <Device::addChild(Device*)>
c00103f7:	81 c4 2c 01 00 00    	add    esp,0x12c
c00103fd:	5b                   	pop    ebx
c00103fe:	5e                   	pop    esi
c00103ff:	5f                   	pop    edi
c0010400:	5d                   	pop    ebp
c0010401:	c3                   	ret    

c0010402 <createPartitionsForDisk(PhysicalDisk*)>:
c0010402:	55                   	push   ebp
c0010403:	57                   	push   edi
c0010404:	56                   	push   esi
c0010405:	53                   	push   ebx
c0010406:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001040c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0010413:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0010419:	3d 00 02 00 00       	cmp    eax,0x200
c001041e:	74 27                	je     c0010447 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0010420:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0010426:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001042c:	83 ec 10             	sub    esp,0x10
c001042f:	0f a4 f7 0a          	shld   edi,esi,0xa
c0010433:	99                   	cdq    
c0010434:	c1 e6 0a             	shl    esi,0xa
c0010437:	52                   	push   edx
c0010438:	89 fd                	mov    ebp,edi
c001043a:	50                   	push   eax
c001043b:	55                   	push   ebp
c001043c:	56                   	push   esi
c001043d:	e8 62 0b 01 00       	call   c0020fa4 <__udivdi3>
c0010442:	e9 b1 00 00 00       	jmp    c00104f8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010447:	83 ec 0c             	sub    esp,0xc
c001044a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001044c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0010450:	56                   	push   esi
c0010451:	6a 01                	push   0x1
c0010453:	6a 00                	push   0x0
c0010455:	6a 00                	push   0x0
c0010457:	53                   	push   ebx
c0010458:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001045b:	83 c4 20             	add    esp,0x20
c001045e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0010466:	75 0a                	jne    c0010472 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0010468:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0010470:	74 2c                	je     c001049e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0010472:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010478:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001047e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010484:	83 ec 10             	sub    esp,0x10
c0010487:	0f a4 c2 0a          	shld   edx,eax,0xa
c001048b:	89 f7                	mov    edi,esi
c001048d:	c1 e0 0a             	shl    eax,0xa
c0010490:	c1 ff 1f             	sar    edi,0x1f
c0010493:	57                   	push   edi
c0010494:	56                   	push   esi
c0010495:	52                   	push   edx
c0010496:	50                   	push   eax
c0010497:	e8 08 0b 01 00       	call   c0020fa4 <__udivdi3>
c001049c:	eb 5a                	jmp    c00104f8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001049e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00104a5:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00104ac:	83 e1 7f             	and    ecx,0x7f
c00104af:	83 e0 7f             	and    eax,0x7f
c00104b2:	01 c1                	add    ecx,eax
c00104b4:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00104bb:	83 e0 7f             	and    eax,0x7f
c00104be:	01 c1                	add    ecx,eax
c00104c0:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00104c7:	83 e0 7f             	and    eax,0x7f
c00104ca:	00 c1                	add    cl,al
c00104cc:	74 41                	je     c001050f <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00104ce:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00104d4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00104da:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00104e0:	83 ec 10             	sub    esp,0x10
c00104e3:	0f a4 c2 0a          	shld   edx,eax,0xa
c00104e7:	89 f7                	mov    edi,esi
c00104e9:	c1 e0 0a             	shl    eax,0xa
c00104ec:	c1 ff 1f             	sar    edi,0x1f
c00104ef:	57                   	push   edi
c00104f0:	56                   	push   esi
c00104f1:	52                   	push   edx
c00104f2:	50                   	push   eax
c00104f3:	e8 ac 0a 01 00       	call   c0020fa4 <__udivdi3>
c00104f8:	83 c4 14             	add    esp,0x14
c00104fb:	52                   	push   edx
c00104fc:	50                   	push   eax
c00104fd:	6a 00                	push   0x0
c00104ff:	6a 00                	push   0x0
c0010501:	53                   	push   ebx
c0010502:	e8 53 fe ff ff       	call   c001035a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010507:	83 c4 20             	add    esp,0x20
c001050a:	e9 79 01 00 00       	jmp    c0010688 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001050f:	89 f0                	mov    eax,esi
c0010511:	31 f6                	xor    esi,esi
c0010513:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001051a:	75 02                	jne    c001051e <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c001051c:	89 f1                	mov    ecx,esi
c001051e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0010525:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c001052c:	c1 e2 08             	shl    edx,0x8
c001052f:	c1 e7 10             	shl    edi,0x10
c0010532:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c001053a:	09 fa                	or     edx,edi
c001053c:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0010544:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c001054b:	83 c0 10             	add    eax,0x10
c001054e:	09 fa                	or     edx,edi
c0010550:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0010557:	c1 e7 18             	shl    edi,0x18
c001055a:	09 fa                	or     edx,edi
c001055c:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0010563:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0010567:	c1 e7 10             	shl    edi,0x10
c001056a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0010571:	c1 e2 08             	shl    edx,0x8
c0010574:	09 fa                	or     edx,edi
c0010576:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c001057d:	09 fa                	or     edx,edi
c001057f:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0010586:	c1 e7 18             	shl    edi,0x18
c0010589:	09 fa                	or     edx,edi
c001058b:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c001058f:	46                   	inc    esi
c0010590:	83 fe 04             	cmp    esi,0x4
c0010593:	0f 85 7a ff ff ff    	jne    c0010513 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0010599:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001059d:	83 f0 01             	xor    eax,0x1
c00105a0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00105a4:	75 57                	jne    c00105fd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00105a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00105aa:	83 f0 01             	xor    eax,0x1
c00105ad:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00105b1:	75 4a                	jne    c00105fd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00105b3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00105b7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00105bf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00105c7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00105cd:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00105d3:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00105d9:	0f a4 c2 0a          	shld   edx,eax,0xa
c00105dd:	89 f7                	mov    edi,esi
c00105df:	c1 e0 0a             	shl    eax,0xa
c00105e2:	c1 ff 1f             	sar    edi,0x1f
c00105e5:	57                   	push   edi
c00105e6:	56                   	push   esi
c00105e7:	52                   	push   edx
c00105e8:	50                   	push   eax
c00105e9:	e8 b6 09 01 00       	call   c0020fa4 <__udivdi3>
c00105ee:	83 c4 10             	add    esp,0x10
c00105f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00105f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00105f9:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00105fd:	84 c9                	test   cl,cl
c00105ff:	74 53                	je     c0010654 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0010601:	0f b6 c9             	movzx  ecx,cl
c0010604:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010608:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001060c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010610:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010614:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010618:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001061c:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0010620:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0010624:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010628:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001062c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010630:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010634:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0010638:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c001063c:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0010640:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0010644:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010648:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001064c:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0010650:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0010654:	31 ed                	xor    ebp,ebp
c0010656:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001065a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001065e:	89 f8                	mov    eax,edi
c0010660:	09 f0                	or     eax,esi
c0010662:	74 1e                	je     c0010682 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010664:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0010668:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001066c:	89 d1                	mov    ecx,edx
c001066e:	09 c1                	or     ecx,eax
c0010670:	74 10                	je     c0010682 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010672:	83 ec 0c             	sub    esp,0xc
c0010675:	57                   	push   edi
c0010676:	56                   	push   esi
c0010677:	52                   	push   edx
c0010678:	50                   	push   eax
c0010679:	53                   	push   ebx
c001067a:	e8 db fc ff ff       	call   c001035a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001067f:	83 c4 20             	add    esp,0x20
c0010682:	45                   	inc    ebp
c0010683:	83 fd 04             	cmp    ebp,0x4
c0010686:	75 ce                	jne    c0010656 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0010688:	81 c4 5c 02 00 00    	add    esp,0x25c
c001068e:	5b                   	pop    ebx
c001068f:	5e                   	pop    esi
c0010690:	5f                   	pop    edi
c0010691:	5d                   	pop    ebp
c0010692:	c3                   	ret    
c0010693:	90                   	nop

c0010694 <Serial::Serial(char const*)>:
c0010694:	83 ec 0c             	sub    esp,0xc
c0010697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001069b:	83 ec 08             	sub    esp,0x8
c001069e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106a2:	50                   	push   eax
c00106a3:	e8 82 da ff ff       	call   c000e12a <Device::Device(char const*)>
c00106a8:	83 c4 10             	add    esp,0x10
c00106ab:	ba 74 39 02 c0       	mov    edx,0xc0023974
c00106b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106b4:	89 10                	mov    DWORD PTR [eax],edx
c00106b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106ba:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00106c4:	90                   	nop
c00106c5:	83 c4 0c             	add    esp,0xc
c00106c8:	c3                   	ret    
c00106c9:	90                   	nop
c00106ca:	66 90                	xchg   ax,ax

c00106cc <Serial::~Serial()>:
c00106cc:	83 ec 0c             	sub    esp,0xc
c00106cf:	ba 74 39 02 c0       	mov    edx,0xc0023974
c00106d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106d8:	89 10                	mov    DWORD PTR [eax],edx
c00106da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106de:	83 ec 0c             	sub    esp,0xc
c00106e1:	50                   	push   eax
c00106e2:	e8 0d d7 ff ff       	call   c000ddf4 <Device::~Device()>
c00106e7:	83 c4 10             	add    esp,0x10
c00106ea:	90                   	nop
c00106eb:	83 c4 0c             	add    esp,0xc
c00106ee:	c3                   	ret    
c00106ef:	90                   	nop

c00106f0 <Serial::~Serial()>:
c00106f0:	83 ec 0c             	sub    esp,0xc
c00106f3:	83 ec 0c             	sub    esp,0xc
c00106f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106fa:	e8 cd ff ff ff       	call   c00106cc <Serial::~Serial()>
c00106ff:	83 c4 10             	add    esp,0x10
c0010702:	83 ec 08             	sub    esp,0x8
c0010705:	68 58 01 00 00       	push   0x158
c001070a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001070e:	e8 eb c2 ff ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c0010713:	83 c4 10             	add    esp,0x10
c0010716:	83 c4 0c             	add    esp,0xc
c0010719:	c3                   	ret    
c001071a:	66 90                	xchg   ax,ax

c001071c <Timer::Timer(char const*)>:
c001071c:	83 ec 0c             	sub    esp,0xc
c001071f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010723:	83 ec 08             	sub    esp,0x8
c0010726:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001072a:	50                   	push   eax
c001072b:	e8 fa d9 ff ff       	call   c000e12a <Device::Device(char const*)>
c0010730:	83 c4 10             	add    esp,0x10
c0010733:	ba b8 39 02 c0       	mov    edx,0xc00239b8
c0010738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001073c:	89 10                	mov    DWORD PTR [eax],edx
c001073e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010742:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c001074c:	90                   	nop
c001074d:	83 c4 0c             	add    esp,0xc
c0010750:	c3                   	ret    
c0010751:	90                   	nop
c0010752:	66 90                	xchg   ax,ax

c0010754 <Timer::~Timer()>:
c0010754:	83 ec 0c             	sub    esp,0xc
c0010757:	ba b8 39 02 c0       	mov    edx,0xc00239b8
c001075c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010760:	89 10                	mov    DWORD PTR [eax],edx
c0010762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010766:	83 ec 0c             	sub    esp,0xc
c0010769:	50                   	push   eax
c001076a:	e8 85 d6 ff ff       	call   c000ddf4 <Device::~Device()>
c001076f:	83 c4 10             	add    esp,0x10
c0010772:	90                   	nop
c0010773:	83 c4 0c             	add    esp,0xc
c0010776:	c3                   	ret    
c0010777:	90                   	nop

c0010778 <Timer::~Timer()>:
c0010778:	83 ec 0c             	sub    esp,0xc
c001077b:	83 ec 0c             	sub    esp,0xc
c001077e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010782:	e8 cd ff ff ff       	call   c0010754 <Timer::~Timer()>
c0010787:	83 c4 10             	add    esp,0x10
c001078a:	83 ec 08             	sub    esp,0x8
c001078d:	68 5c 01 00 00       	push   0x15c
c0010792:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010796:	e8 63 c2 ff ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c001079b:	83 c4 10             	add    esp,0x10
c001079e:	83 c4 0c             	add    esp,0xc
c00107a1:	c3                   	ret    

c00107a2 <Timer::read()>:
c00107a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107a6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00107ac:	c3                   	ret    

c00107ad <timerHandler(unsigned int)>:
c00107ad:	56                   	push   esi
c00107ae:	53                   	push   ebx
c00107af:	51                   	push   ecx
c00107b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107b4:	01 05 ac 6a 02 c0    	add    DWORD PTR ds:0xc0026aac,eax
c00107ba:	80 3d 8d 64 02 c0 00 	cmp    BYTE PTR ds:0xc002648d,0x0
c00107c1:	0f 84 49 01 00 00    	je     c0010910 <timerHandler(unsigned int)+0x163>
c00107c7:	fa                   	cli    
c00107c8:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c00107ce:	83 ec 0c             	sub    esp,0xc
c00107d1:	ff 05 44 79 02 c0    	inc    DWORD PTR ds:0xc0027944
c00107d7:	68 58 79 02 c0       	push   0xc0027958
c00107dc:	e8 93 0d 01 00       	call   c0021574 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00107e1:	83 c4 10             	add    esp,0x10
c00107e4:	84 c0                	test   al,al
c00107e6:	0f 85 a0 00 00 00    	jne    c001088c <timerHandler(unsigned int)+0xdf>
c00107ec:	83 ec 0c             	sub    esp,0xc
c00107ef:	68 58 79 02 c0       	push   0xc0027958
c00107f4:	e8 97 0d 01 00       	call   c0021590 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00107f9:	83 c4 10             	add    esp,0x10
c00107fc:	89 c6                	mov    esi,eax
c00107fe:	66 90                	xchg   ax,ax
c0010800:	83 ec 0c             	sub    esp,0xc
c0010803:	68 58 79 02 c0       	push   0xc0027958
c0010808:	e8 83 0d 01 00       	call   c0021590 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001080d:	c7 04 24 58 79 02 c0 	mov    DWORD PTR [esp],0xc0027958
c0010814:	89 c3                	mov    ebx,eax
c0010816:	e8 7d 0d 01 00       	call   c0021598 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001081b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001081e:	83 c4 10             	add    esp,0x10
c0010821:	3b 05 ac 6a 02 c0    	cmp    eax,DWORD PTR ds:0xc0026aac
c0010827:	77 23                	ja     c001084c <timerHandler(unsigned int)+0x9f>
c0010829:	83 ec 0c             	sub    esp,0xc
c001082c:	53                   	push   ebx
c001082d:	e8 fe 7b 00 00       	call   c0018430 <unblockTask(ThreadControlBlock*)>
c0010832:	83 c4 10             	add    esp,0x10
c0010835:	39 de                	cmp    esi,ebx
c0010837:	75 27                	jne    c0010860 <timerHandler(unsigned int)+0xb3>
c0010839:	83 ec 0c             	sub    esp,0xc
c001083c:	68 58 79 02 c0       	push   0xc0027958
c0010841:	e8 4a 0d 01 00       	call   c0021590 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010846:	89 c6                	mov    esi,eax
c0010848:	eb 12                	jmp    c001085c <timerHandler(unsigned int)+0xaf>
c001084a:	66 90                	xchg   ax,ax
c001084c:	52                   	push   edx
c001084d:	52                   	push   edx
c001084e:	53                   	push   ebx
c001084f:	68 58 79 02 c0       	push   0xc0027958
c0010854:	e8 f7 0d 01 00       	call   c0021650 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0010859:	8d 76 00             	lea    esi,[esi+0x0]
c001085c:	83 c4 10             	add    esp,0x10
c001085f:	90                   	nop
c0010860:	83 ec 0c             	sub    esp,0xc
c0010863:	68 58 79 02 c0       	push   0xc0027958
c0010868:	e8 07 0d 01 00       	call   c0021574 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001086d:	83 c4 10             	add    esp,0x10
c0010870:	84 c0                	test   al,al
c0010872:	75 18                	jne    c001088c <timerHandler(unsigned int)+0xdf>
c0010874:	83 ec 0c             	sub    esp,0xc
c0010877:	68 58 79 02 c0       	push   0xc0027958
c001087c:	e8 0f 0d 01 00       	call   c0021590 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010881:	83 c4 10             	add    esp,0x10
c0010884:	39 f0                	cmp    eax,esi
c0010886:	0f 85 74 ff ff ff    	jne    c0010800 <timerHandler(unsigned int)+0x53>
c001088c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010891:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c0010895:	74 41                	je     c00108d8 <timerHandler(unsigned int)+0x12b>
c0010897:	80 3d 8c 64 02 c0 00 	cmp    BYTE PTR ds:0xc002648c,0x0
c001089e:	74 38                	je     c00108d8 <timerHandler(unsigned int)+0x12b>
c00108a0:	fa                   	cli    
c00108a1:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c00108a7:	a1 ac 6a 02 c0       	mov    eax,ds:0xc0026aac
c00108ac:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00108b2:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c00108b5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00108bb:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c00108be:	72 08                	jb     c00108c8 <timerHandler(unsigned int)+0x11b>
c00108c0:	e8 af 76 00 00       	call   c0017f74 <schedule()>
c00108c5:	8d 76 00             	lea    esi,[esi+0x0]
c00108c8:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c00108cd:	48                   	dec    eax
c00108ce:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c00108d3:	75 03                	jne    c00108d8 <timerHandler(unsigned int)+0x12b>
c00108d5:	fb                   	sti    
c00108d6:	66 90                	xchg   ax,ax
c00108d8:	a1 44 79 02 c0       	mov    eax,ds:0xc0027944
c00108dd:	48                   	dec    eax
c00108de:	a3 44 79 02 c0       	mov    ds:0xc0027944,eax
c00108e3:	75 1b                	jne    c0010900 <timerHandler(unsigned int)+0x153>
c00108e5:	83 3d 40 79 02 c0 00 	cmp    DWORD PTR ds:0xc0027940,0x0
c00108ec:	74 12                	je     c0010900 <timerHandler(unsigned int)+0x153>
c00108ee:	c7 05 40 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027940,0x0
c00108f8:	e8 77 76 00 00       	call   c0017f74 <schedule()>
c00108fd:	8d 76 00             	lea    esi,[esi+0x0]
c0010900:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c0010905:	48                   	dec    eax
c0010906:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c001090b:	75 03                	jne    c0010910 <timerHandler(unsigned int)+0x163>
c001090d:	fb                   	sti    
c001090e:	66 90                	xchg   ax,ax
c0010910:	58                   	pop    eax
c0010911:	5b                   	pop    ebx
c0010912:	5e                   	pop    esi
c0010913:	c3                   	ret    

c0010914 <setupTimer(int)>:
c0010914:	57                   	push   edi
c0010915:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c001091a:	56                   	push   esi
c001091b:	53                   	push   ebx
c001091c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010920:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010926:	83 ec 0c             	sub    esp,0xc
c0010929:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001092f:	e8 f2 d8 ff ff       	call   c000e226 <Device::getName()>
c0010934:	83 c4 10             	add    esp,0x10
c0010937:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001093a:	0f 85 94 00 00 00    	jne    c00109d4 <setupTimer(int)+0xc0>
c0010940:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c0010945:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c001094c:	0f 84 82 00 00 00    	je     c00109d4 <setupTimer(int)+0xc0>
c0010952:	83 ec 0c             	sub    esp,0xc
c0010955:	68 5c 01 00 00       	push   0x15c
c001095a:	e8 64 90 ff ff       	call   c00099c3 <malloc>
c001095f:	89 04 24             	mov    DWORD PTR [esp],eax
c0010962:	89 c3                	mov    ebx,eax
c0010964:	e8 0f 02 01 00       	call   c0020b78 <PIT::PIT()>
c0010969:	59                   	pop    ecx
c001096a:	5f                   	pop    edi
c001096b:	53                   	push   ebx
c001096c:	ff 35 88 64 02 c0    	push   DWORD PTR ds:0xc0026488
c0010972:	e8 af d5 ff ff       	call   c000df26 <Device::addChild(Device*)>
c0010977:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010979:	6a 00                	push   0x0
c001097b:	6a 00                	push   0x0
c001097d:	56                   	push   esi
c001097e:	53                   	push   ebx
c001097f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010982:	83 c4 14             	add    esp,0x14
c0010985:	68 60 01 00 00       	push   0x160
c001098a:	e8 34 90 ff ff       	call   c00099c3 <malloc>
c001098f:	89 04 24             	mov    DWORD PTR [esp],eax
c0010992:	89 c7                	mov    edi,eax
c0010994:	e8 93 00 01 00       	call   c0020a2c <APICTimer::APICTimer()>
c0010999:	6a 00                	push   0x0
c001099b:	6a 00                	push   0x0
c001099d:	56                   	push   esi
c001099e:	57                   	push   edi
c001099f:	e8 88 ff 00 00       	call   c002092c <APICTimer::open(int, int, void*)>
c00109a4:	83 c4 20             	add    esp,0x20
c00109a7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00109a9:	6a 00                	push   0x0
c00109ab:	6a 00                	push   0x0
c00109ad:	6a 00                	push   0x0
c00109af:	53                   	push   ebx
c00109b0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00109b3:	58                   	pop    eax
c00109b4:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c00109b9:	5a                   	pop    edx
c00109ba:	57                   	push   edi
c00109bb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00109c1:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00109c7:	e8 5a d5 ff ff       	call   c000df26 <Device::addChild(Device*)>
c00109cc:	83 c4 10             	add    esp,0x10
c00109cf:	eb 37                	jmp    c0010a08 <setupTimer(int)+0xf4>
c00109d1:	8d 76 00             	lea    esi,[esi+0x0]
c00109d4:	83 ec 0c             	sub    esp,0xc
c00109d7:	68 5c 01 00 00       	push   0x15c
c00109dc:	e8 e2 8f ff ff       	call   c00099c3 <malloc>
c00109e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00109e4:	89 c3                	mov    ebx,eax
c00109e6:	e8 8d 01 01 00       	call   c0020b78 <PIT::PIT()>
c00109eb:	58                   	pop    eax
c00109ec:	5a                   	pop    edx
c00109ed:	53                   	push   ebx
c00109ee:	ff 35 88 64 02 c0    	push   DWORD PTR ds:0xc0026488
c00109f4:	e8 2d d5 ff ff       	call   c000df26 <Device::addChild(Device*)>
c00109f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00109fb:	6a 00                	push   0x0
c00109fd:	6a 00                	push   0x0
c00109ff:	56                   	push   esi
c0010a00:	53                   	push   ebx
c0010a01:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010a04:	83 c4 20             	add    esp,0x20
c0010a07:	90                   	nop
c0010a08:	89 d8                	mov    eax,ebx
c0010a0a:	5b                   	pop    ebx
c0010a0b:	5e                   	pop    esi
c0010a0c:	5f                   	pop    edi
c0010a0d:	c3                   	ret    
c0010a0e:	66 90                	xchg   ax,ax

c0010a10 <VCache::VCache(PhysicalDisk*)>:
c0010a10:	53                   	push   ebx
c0010a11:	83 ec 18             	sub    esp,0x18
c0010a14:	ba 08 3b 02 c0       	mov    edx,0xc0023b08
c0010a19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a1d:	89 10                	mov    DWORD PTR [eax],edx
c0010a1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a23:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0010a2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a2e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0010a35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a39:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0010a40:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0010a47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a4b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0010a52:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010a59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a5d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0010a64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a68:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010a6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a70:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0010a77:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0010a7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a82:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010a86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a8a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0010a8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a92:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010a96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a9a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010aa1:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0010aa9:	83 ec 0c             	sub    esp,0xc
c0010aac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010ab0:	e8 0e 8f ff ff       	call   c00099c3 <malloc>
c0010ab5:	83 c4 10             	add    esp,0x10
c0010ab8:	89 c3                	mov    ebx,eax
c0010aba:	83 ec 0c             	sub    esp,0xc
c0010abd:	53                   	push   ebx
c0010abe:	e8 81 72 00 00       	call   c0017d44 <Mutex::Mutex()>
c0010ac3:	83 c4 10             	add    esp,0x10
c0010ac6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010aca:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010acd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ad1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010ad5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010ad8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010adc:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0010ae3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010ae7:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0010aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010af1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010af4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010af8:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0010afe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010b04:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010b08:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0010b0b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0010b0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b12:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010b16:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010b1a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010b20:	05 00 01 00 00       	add    eax,0x100
c0010b25:	c1 e0 04             	shl    eax,0x4
c0010b28:	83 ec 0c             	sub    esp,0xc
c0010b2b:	50                   	push   eax
c0010b2c:	e8 92 8e ff ff       	call   c00099c3 <malloc>
c0010b31:	83 c4 10             	add    esp,0x10
c0010b34:	89 c2                	mov    edx,eax
c0010b36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b3a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010b3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b41:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010b48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b4c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010b50:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010b54:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010b5a:	c1 e0 06             	shl    eax,0x6
c0010b5d:	83 ec 0c             	sub    esp,0xc
c0010b60:	50                   	push   eax
c0010b61:	e8 5d 8e ff ff       	call   c00099c3 <malloc>
c0010b66:	83 c4 10             	add    esp,0x10
c0010b69:	89 c2                	mov    edx,eax
c0010b6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b6f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010b72:	90                   	nop
c0010b73:	83 c4 18             	add    esp,0x18
c0010b76:	5b                   	pop    ebx
c0010b77:	c3                   	ret    

c0010b78 <VCache::invalidateReadBuffer()>:
c0010b78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b7c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0010b82:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010b86:	c3                   	ret    
c0010b87:	90                   	nop

c0010b88 <VCache::writeWriteBuffer()>:
c0010b88:	53                   	push   ebx
c0010b89:	83 ec 0c             	sub    esp,0xc
c0010b8c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010b90:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010b93:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010b96:	68 e0 39 02 c0       	push   0xc00239e0
c0010b9b:	e8 3f bf ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c0010ba0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010ba3:	5a                   	pop    edx
c0010ba4:	8b 10                	mov    edx,DWORD PTR [eax]
c0010ba6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010ba9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010bac:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010baf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010bb2:	50                   	push   eax
c0010bb3:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010bb6:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0010bbd:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0010bc4:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0010bc8:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0010bcf:	83 c4 28             	add    esp,0x28
c0010bd2:	5b                   	pop    ebx
c0010bd3:	c3                   	ret    

c0010bd4 <VCache::~VCache()>:
c0010bd4:	83 ec 0c             	sub    esp,0xc
c0010bd7:	ba 08 3b 02 c0       	mov    edx,0xc0023b08
c0010bdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010be0:	89 10                	mov    DWORD PTR [eax],edx
c0010be2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010be6:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0010be9:	84 c0                	test   al,al
c0010beb:	74 0f                	je     c0010bfc <VCache::~VCache()+0x28>
c0010bed:	83 ec 0c             	sub    esp,0xc
c0010bf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bf4:	e8 8f ff ff ff       	call   c0010b88 <VCache::writeWriteBuffer()>
c0010bf9:	83 c4 10             	add    esp,0x10
c0010bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c00:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0010c03:	83 ec 0c             	sub    esp,0xc
c0010c06:	50                   	push   eax
c0010c07:	e8 c7 8d ff ff       	call   c00099d3 <free>
c0010c0c:	83 c4 10             	add    esp,0x10
c0010c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c13:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0010c16:	83 ec 0c             	sub    esp,0xc
c0010c19:	50                   	push   eax
c0010c1a:	e8 b4 8d ff ff       	call   c00099d3 <free>
c0010c1f:	83 c4 10             	add    esp,0x10
c0010c22:	90                   	nop
c0010c23:	83 c4 0c             	add    esp,0xc
c0010c26:	c3                   	ret    
c0010c27:	90                   	nop

c0010c28 <VCache::~VCache()>:
c0010c28:	83 ec 0c             	sub    esp,0xc
c0010c2b:	83 ec 0c             	sub    esp,0xc
c0010c2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c32:	e8 9d ff ff ff       	call   c0010bd4 <VCache::~VCache()>
c0010c37:	83 c4 10             	add    esp,0x10
c0010c3a:	83 ec 08             	sub    esp,0x8
c0010c3d:	6a 44                	push   0x44
c0010c3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c43:	e8 b6 bd ff ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c0010c48:	83 c4 10             	add    esp,0x10
c0010c4b:	83 c4 0c             	add    esp,0xc
c0010c4e:	c3                   	ret    
c0010c4f:	90                   	nop

c0010c50 <VCache::write(unsigned long long, int, void*)>:
c0010c50:	55                   	push   ebp
c0010c51:	31 c0                	xor    eax,eax
c0010c53:	57                   	push   edi
c0010c54:	56                   	push   esi
c0010c55:	53                   	push   ebx
c0010c56:	83 ec 0c             	sub    esp,0xc
c0010c59:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010c5d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010c61:	8b 6c 24 28          	mov    ebp,DWORD PTR [esp+0x28]
c0010c65:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010c69:	8d 76 00             	lea    esi,[esi+0x0]
c0010c6c:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0010c70:	7d 16                	jge    c0010c88 <VCache::write(unsigned long long, int, void*)+0x38>
c0010c72:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010c75:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0010c7b:	0f af c8             	imul   ecx,eax
c0010c7e:	89 ca                	mov    edx,ecx
c0010c80:	01 f2                	add    edx,esi
c0010c82:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010c84:	40                   	inc    eax
c0010c85:	eb e5                	jmp    c0010c6c <VCache::write(unsigned long long, int, void*)+0x1c>
c0010c87:	90                   	nop
c0010c88:	83 ec 0c             	sub    esp,0xc
c0010c8b:	68 04 3a 02 c0       	push   0xc0023a04
c0010c90:	e8 4a be ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c0010c95:	83 c4 10             	add    esp,0x10
c0010c98:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010c9c:	74 0e                	je     c0010cac <VCache::write(unsigned long long, int, void*)+0x5c>
c0010c9e:	83 ec 0c             	sub    esp,0xc
c0010ca1:	53                   	push   ebx
c0010ca2:	e8 d1 fe ff ff       	call   c0010b78 <VCache::invalidateReadBuffer()>
c0010ca7:	83 c4 10             	add    esp,0x10
c0010caa:	66 90                	xchg   ax,ax
c0010cac:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010cb0:	74 66                	je     c0010d18 <VCache::write(unsigned long long, int, void*)+0xc8>
c0010cb2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010cb5:	99                   	cdq    
c0010cb6:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0010cb9:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0010cbc:	31 f8                	xor    eax,edi
c0010cbe:	89 d1                	mov    ecx,edx
c0010cc0:	89 ca                	mov    edx,ecx
c0010cc2:	31 ea                	xor    edx,ebp
c0010cc4:	09 d0                	or     eax,edx
c0010cc6:	75 44                	jne    c0010d0c <VCache::write(unsigned long long, int, void*)+0xbc>
c0010cc8:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0010ccd:	75 3d                	jne    c0010d0c <VCache::write(unsigned long long, int, void*)+0xbc>
c0010ccf:	83 ec 0c             	sub    esp,0xc
c0010cd2:	68 2b 3a 02 c0       	push   0xc0023a2b
c0010cd7:	e8 03 be ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c0010cdc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010cdf:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0010ce2:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010ce8:	0f af f9             	imul   edi,ecx
c0010ceb:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0010cee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010cf0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010cf3:	83 c4 10             	add    esp,0x10
c0010cf6:	40                   	inc    eax
c0010cf7:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0010cfa:	83 f8 40             	cmp    eax,0x40
c0010cfd:	75 7d                	jne    c0010d7c <VCache::write(unsigned long long, int, void*)+0x12c>
c0010cff:	83 ec 0c             	sub    esp,0xc
c0010d02:	53                   	push   ebx
c0010d03:	e8 80 fe ff ff       	call   c0010b88 <VCache::writeWriteBuffer()>
c0010d08:	eb 42                	jmp    c0010d4c <VCache::write(unsigned long long, int, void*)+0xfc>
c0010d0a:	66 90                	xchg   ax,ax
c0010d0c:	83 ec 0c             	sub    esp,0xc
c0010d0f:	53                   	push   ebx
c0010d10:	e8 73 fe ff ff       	call   c0010b88 <VCache::writeWriteBuffer()>
c0010d15:	83 c4 10             	add    esp,0x10
c0010d18:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c0010d1d:	7f 35                	jg     c0010d54 <VCache::write(unsigned long long, int, void*)+0x104>
c0010d1f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010d23:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0010d26:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0010d29:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c0010d2c:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0010d30:	52                   	push   edx
c0010d31:	56                   	push   esi
c0010d32:	6a 01                	push   0x1
c0010d34:	68 41 3a 02 c0       	push   0xc0023a41
c0010d39:	e8 a1 bd ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c0010d3e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010d41:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0010d44:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010d4a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d4c:	83 c4 10             	add    esp,0x10
c0010d4f:	eb 2b                	jmp    c0010d7c <VCache::write(unsigned long long, int, void*)+0x12c>
c0010d51:	8d 76 00             	lea    esi,[esi+0x0]
c0010d54:	50                   	push   eax
c0010d55:	56                   	push   esi
c0010d56:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0010d5a:	68 62 3a 02 c0       	push   0xc0023a62
c0010d5f:	e8 7b bd ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c0010d64:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010d67:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d69:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d6c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010d70:	55                   	push   ebp
c0010d71:	57                   	push   edi
c0010d72:	50                   	push   eax
c0010d73:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010d76:	83 c4 20             	add    esp,0x20
c0010d79:	8d 76 00             	lea    esi,[esi+0x0]
c0010d7c:	83 ec 0c             	sub    esp,0xc
c0010d7f:	68 7f 3a 02 c0       	push   0xc0023a7f
c0010d84:	e8 56 bd ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c0010d89:	83 c4 1c             	add    esp,0x1c
c0010d8c:	31 c0                	xor    eax,eax
c0010d8e:	5b                   	pop    ebx
c0010d8f:	5e                   	pop    esi
c0010d90:	5f                   	pop    edi
c0010d91:	5d                   	pop    ebp
c0010d92:	c3                   	ret    
c0010d93:	90                   	nop

c0010d94 <VCache::read(unsigned long long, int, void*)>:
c0010d94:	55                   	push   ebp
c0010d95:	57                   	push   edi
c0010d96:	56                   	push   esi
c0010d97:	53                   	push   ebx
c0010d98:	83 ec 1c             	sub    esp,0x1c
c0010d9b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010d9f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010da3:	89 04 24             	mov    DWORD PTR [esp],eax
c0010da6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010daa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010dae:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010db2:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0010db6:	31 c0                	xor    eax,eax
c0010db8:	39 f0                	cmp    eax,esi
c0010dba:	7d 18                	jge    c0010dd4 <VCache::read(unsigned long long, int, void*)+0x40>
c0010dbc:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010dbf:	8b ba 5c 01 00 00    	mov    edi,DWORD PTR [edx+0x15c]
c0010dc5:	0f af f8             	imul   edi,eax
c0010dc8:	89 fa                	mov    edx,edi
c0010dca:	01 ea                	add    edx,ebp
c0010dcc:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010dce:	40                   	inc    eax
c0010dcf:	eb e7                	jmp    c0010db8 <VCache::read(unsigned long long, int, void*)+0x24>
c0010dd1:	8d 76 00             	lea    esi,[esi+0x0]
c0010dd4:	83 ec 0c             	sub    esp,0xc
c0010dd7:	68 9f 3a 02 c0       	push   0xc0023a9f
c0010ddc:	e8 fe bc ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c0010de1:	83 c4 10             	add    esp,0x10
c0010de4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010de8:	74 0e                	je     c0010df8 <VCache::read(unsigned long long, int, void*)+0x64>
c0010dea:	83 ec 0c             	sub    esp,0xc
c0010ded:	53                   	push   ebx
c0010dee:	e8 95 fd ff ff       	call   c0010b88 <VCache::writeWriteBuffer()>
c0010df3:	83 c4 10             	add    esp,0x10
c0010df6:	66 90                	xchg   ax,ax
c0010df8:	83 fe 01             	cmp    esi,0x1
c0010dfb:	75 7b                	jne    c0010e78 <VCache::read(unsigned long long, int, void*)+0xe4>
c0010dfd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010e00:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0010e07:	75 6f                	jne    c0010e78 <VCache::read(unsigned long long, int, void*)+0xe4>
c0010e09:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0010e0c:	89 d1                	mov    ecx,edx
c0010e0e:	f7 d9                	neg    ecx
c0010e10:	89 cf                	mov    edi,ecx
c0010e12:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010e16:	c1 ff 1f             	sar    edi,0x1f
c0010e19:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0010e1c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010e20:	89 ce                	mov    esi,ecx
c0010e22:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010e26:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0010e2a:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010e2e:	89 cf                	mov    edi,ecx
c0010e30:	74 0a                	je     c0010e3c <VCache::read(unsigned long long, int, void*)+0xa8>
c0010e32:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0010e35:	75 05                	jne    c0010e3c <VCache::read(unsigned long long, int, void*)+0xa8>
c0010e37:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0010e3a:	74 1c                	je     c0010e58 <VCache::read(unsigned long long, int, void*)+0xc4>
c0010e3c:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0010e40:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0010e43:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0010e46:	83 ec 0c             	sub    esp,0xc
c0010e49:	8b 08                	mov    ecx,DWORD PTR [eax]
c0010e4b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010e4e:	52                   	push   edx
c0010e4f:	57                   	push   edi
c0010e50:	56                   	push   esi
c0010e51:	50                   	push   eax
c0010e52:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0010e55:	83 c4 20             	add    esp,0x20
c0010e58:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010e5b:	89 ef                	mov    edi,ebp
c0010e5d:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010e63:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0010e66:	8d 70 ff             	lea    esi,[eax-0x1]
c0010e69:	23 34 24             	and    esi,DWORD PTR [esp]
c0010e6c:	0f af f1             	imul   esi,ecx
c0010e6f:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0010e72:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e74:	eb 32                	jmp    c0010ea8 <VCache::read(unsigned long long, int, void*)+0x114>
c0010e76:	66 90                	xchg   ax,ax
c0010e78:	83 ec 0c             	sub    esp,0xc
c0010e7b:	53                   	push   ebx
c0010e7c:	e8 f7 fc ff ff       	call   c0010b78 <VCache::invalidateReadBuffer()>
c0010e81:	83 c4 0c             	add    esp,0xc
c0010e84:	55                   	push   ebp
c0010e85:	56                   	push   esi
c0010e86:	68 c5 3a 02 c0       	push   0xc0023ac5
c0010e8b:	e8 4f bc ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c0010e90:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010e93:	8b 10                	mov    edx,DWORD PTR [eax]
c0010e95:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010e98:	56                   	push   esi
c0010e99:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e9d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010ea1:	50                   	push   eax
c0010ea2:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0010ea5:	83 c4 20             	add    esp,0x20
c0010ea8:	83 ec 0c             	sub    esp,0xc
c0010eab:	68 e1 3a 02 c0       	push   0xc0023ae1
c0010eb0:	e8 2a bc ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c0010eb5:	83 c4 2c             	add    esp,0x2c
c0010eb8:	31 c0                	xor    eax,eax
c0010eba:	5b                   	pop    ebx
c0010ebb:	5e                   	pop    esi
c0010ebc:	5f                   	pop    edi
c0010ebd:	5d                   	pop    ebp
c0010ebe:	c3                   	ret    
c0010ebf:	90                   	nop

c0010ec0 <Video::putrect(int, int, int, int, unsigned int)>:
c0010ec0:	55                   	push   ebp
c0010ec1:	57                   	push   edi
c0010ec2:	56                   	push   esi
c0010ec3:	53                   	push   ebx
c0010ec4:	83 ec 1c             	sub    esp,0x1c
c0010ec7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010ecb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010ecf:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0010ed3:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010ed7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010edb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010edf:	01 df                	add    edi,ebx
c0010ee1:	39 fb                	cmp    ebx,edi
c0010ee3:	7d 1f                	jge    c0010f04 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0010ee5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0010ee9:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0010eed:	7d 12                	jge    c0010f01 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0010eef:	8b 16                	mov    edx,DWORD PTR [esi]
c0010ef1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010ef5:	53                   	push   ebx
c0010ef6:	55                   	push   ebp
c0010ef7:	45                   	inc    ebp
c0010ef8:	56                   	push   esi
c0010ef9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0010efc:	83 c4 10             	add    esp,0x10
c0010eff:	eb e8                	jmp    c0010ee9 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0010f01:	43                   	inc    ebx
c0010f02:	eb dd                	jmp    c0010ee1 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0010f04:	83 c4 1c             	add    esp,0x1c
c0010f07:	5b                   	pop    ebx
c0010f08:	5e                   	pop    esi
c0010f09:	5f                   	pop    edi
c0010f0a:	5d                   	pop    ebp
c0010f0b:	c3                   	ret    

c0010f0c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0010f0c:	55                   	push   ebp
c0010f0d:	57                   	push   edi
c0010f0e:	31 ff                	xor    edi,edi
c0010f10:	56                   	push   esi
c0010f11:	53                   	push   ebx
c0010f12:	83 ec 1c             	sub    esp,0x1c
c0010f15:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0010f19:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010f1d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0010f24:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0010f29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010f2d:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0010f31:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0010f35:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0010f38:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0010f3c:	01 f9                	add    ecx,edi
c0010f3e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0010f42:	7d 2f                	jge    c0010f73 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0010f44:	31 f6                	xor    esi,esi
c0010f46:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0010f4a:	01 f2                	add    edx,esi
c0010f4c:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0010f50:	7d 1a                	jge    c0010f6c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0010f52:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010f55:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0010f58:	46                   	inc    esi
c0010f59:	51                   	push   ecx
c0010f5a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010f5e:	52                   	push   edx
c0010f5f:	55                   	push   ebp
c0010f60:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0010f63:	83 c4 10             	add    esp,0x10
c0010f66:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010f6a:	eb da                	jmp    c0010f46 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0010f6c:	47                   	inc    edi
c0010f6d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0010f71:	eb c5                	jmp    c0010f38 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0010f73:	83 c4 1c             	add    esp,0x1c
c0010f76:	5b                   	pop    ebx
c0010f77:	5e                   	pop    esi
c0010f78:	5f                   	pop    edi
c0010f79:	5d                   	pop    ebp
c0010f7a:	c3                   	ret    
c0010f7b:	90                   	nop

c0010f7c <Video::blit(unsigned int*, int, int, int, int)>:
c0010f7c:	55                   	push   ebp
c0010f7d:	57                   	push   edi
c0010f7e:	56                   	push   esi
c0010f7f:	53                   	push   ebx
c0010f80:	83 ec 1c             	sub    esp,0x1c
c0010f83:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010f87:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010f8b:	85 c0                	test   eax,eax
c0010f8d:	79 02                	jns    c0010f91 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0010f8f:	31 c0                	xor    eax,eax
c0010f91:	c1 e0 02             	shl    eax,0x2
c0010f94:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0010f98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f9c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0010fa0:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0010fa4:	39 d8                	cmp    eax,ebx
c0010fa6:	7e 49                	jle    c0010ff1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0010fa8:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0010fae:	7c 41                	jl     c0010ff1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0010fb0:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0010fb4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0010fb8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0010fbc:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0010fc0:	39 f9                	cmp    ecx,edi
c0010fc2:	7e 22                	jle    c0010fe6 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0010fc4:	83 c5 04             	add    ebp,0x4
c0010fc7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0010fcd:	7c 14                	jl     c0010fe3 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0010fcf:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0010fd1:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0010fd4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0010fd8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0010fdc:	56                   	push   esi
c0010fdd:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0010fe0:	83 c4 10             	add    esp,0x10
c0010fe3:	47                   	inc    edi
c0010fe4:	eb d2                	jmp    c0010fb8 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0010fe6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fea:	43                   	inc    ebx
c0010feb:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0010fef:	eb ab                	jmp    c0010f9c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0010ff1:	83 c4 1c             	add    esp,0x1c
c0010ff4:	5b                   	pop    ebx
c0010ff5:	5e                   	pop    esi
c0010ff6:	5f                   	pop    edi
c0010ff7:	5d                   	pop    ebp
c0010ff8:	c3                   	ret    
c0010ff9:	90                   	nop

c0010ffa <Video::clearScreen(unsigned int)>:
c0010ffa:	57                   	push   edi
c0010ffb:	56                   	push   esi
c0010ffc:	53                   	push   ebx
c0010ffd:	31 db                	xor    ebx,ebx
c0010fff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011003:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0011009:	7e 1f                	jle    c001102a <Video::clearScreen(unsigned int)+0x30>
c001100b:	31 ff                	xor    edi,edi
c001100d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0011013:	7e 12                	jle    c0011027 <Video::clearScreen(unsigned int)+0x2d>
c0011015:	8b 06                	mov    eax,DWORD PTR [esi]
c0011017:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001101b:	53                   	push   ebx
c001101c:	57                   	push   edi
c001101d:	47                   	inc    edi
c001101e:	56                   	push   esi
c001101f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011022:	83 c4 10             	add    esp,0x10
c0011025:	eb e6                	jmp    c001100d <Video::clearScreen(unsigned int)+0x13>
c0011027:	43                   	inc    ebx
c0011028:	eb d9                	jmp    c0011003 <Video::clearScreen(unsigned int)+0x9>
c001102a:	5b                   	pop    ebx
c001102b:	5e                   	pop    esi
c001102c:	5f                   	pop    edi
c001102d:	c3                   	ret    

c001102e <Video::putpixel(int, int, unsigned int)>:
c001102e:	c7 44 24 04 10 3b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023b10
c0011036:	e9 66 33 00 00       	jmp    c00143a1 <Krnl::panic(char const*)>
c001103b:	90                   	nop

c001103c <Video::Video(char const*)>:
c001103c:	83 ec 0c             	sub    esp,0xc
c001103f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011043:	83 ec 08             	sub    esp,0x8
c0011046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001104a:	50                   	push   eax
c001104b:	e8 da d0 ff ff       	call   c000e12a <Device::Device(char const*)>
c0011050:	83 c4 10             	add    esp,0x10
c0011053:	ba 80 3b 02 c0       	mov    edx,0xc0023b80
c0011058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001105c:	89 10                	mov    DWORD PTR [eax],edx
c001105e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011062:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001106c:	90                   	nop
c001106d:	83 c4 0c             	add    esp,0xc
c0011070:	c3                   	ret    
c0011071:	90                   	nop

c0011072 <Video::~Video()>:
c0011072:	83 ec 0c             	sub    esp,0xc
c0011075:	ba 80 3b 02 c0       	mov    edx,0xc0023b80
c001107a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001107e:	89 10                	mov    DWORD PTR [eax],edx
c0011080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011084:	83 ec 0c             	sub    esp,0xc
c0011087:	50                   	push   eax
c0011088:	e8 67 cd ff ff       	call   c000ddf4 <Device::~Device()>
c001108d:	83 c4 10             	add    esp,0x10
c0011090:	90                   	nop
c0011091:	83 c4 0c             	add    esp,0xc
c0011094:	c3                   	ret    
c0011095:	90                   	nop

c0011096 <Video::~Video()>:
c0011096:	83 ec 0c             	sub    esp,0xc
c0011099:	83 ec 0c             	sub    esp,0xc
c001109c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110a0:	e8 cd ff ff ff       	call   c0011072 <Video::~Video()>
c00110a5:	83 c4 10             	add    esp,0x10
c00110a8:	83 ec 08             	sub    esp,0x8
c00110ab:	68 64 01 00 00       	push   0x164
c00110b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110b4:	e8 45 b9 ff ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c00110b9:	83 c4 10             	add    esp,0x10
c00110bc:	83 c4 0c             	add    esp,0xc
c00110bf:	c3                   	ret    

c00110c0 <Video::isMonochrome()>:
c00110c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110c4:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00110ca:	c3                   	ret    
c00110cb:	90                   	nop

c00110cc <Video::getWidth()>:
c00110cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110d0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00110d6:	c3                   	ret    
c00110d7:	90                   	nop

c00110d8 <Video::getHeight()>:
c00110d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110dc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00110e2:	c3                   	ret    
c00110e3:	90                   	nop

c00110e4 <Video::drawCursor(int, int, unsigned char*, int)>:
c00110e4:	55                   	push   ebp
c00110e5:	57                   	push   edi
c00110e6:	56                   	push   esi
c00110e7:	53                   	push   ebx
c00110e8:	83 ec 2c             	sub    esp,0x2c
c00110eb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00110ef:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00110f3:	83 f8 01             	cmp    eax,0x1
c00110f6:	19 c9                	sbb    ecx,ecx
c00110f8:	31 db                	xor    ebx,ebx
c00110fa:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00110fe:	89 cd                	mov    ebp,ecx
c0011100:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0011108:	f7 d5                	not    ebp
c001110a:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0011110:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0011114:	01 d8                	add    eax,ebx
c0011116:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001111a:	56                   	push   esi
c001111b:	e8 b8 ff ff ff       	call   c00110d8 <Video::getHeight()>
c0011120:	59                   	pop    ecx
c0011121:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0011125:	7e 70                	jle    c0011197 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0011127:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001112b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001112f:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0011132:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011136:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001113a:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0011141:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011145:	89 f8                	mov    eax,edi
c0011147:	83 c0 20             	add    eax,0x20
c001114a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001114e:	56                   	push   esi
c001114f:	e8 78 ff ff ff       	call   c00110cc <Video::getWidth()>
c0011154:	5a                   	pop    edx
c0011155:	39 c7                	cmp    edi,eax
c0011157:	7d 34                	jge    c001118d <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0011159:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001115e:	74 05                	je     c0011165 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0011160:	8b 06                	mov    eax,DWORD PTR [esi]
c0011162:	55                   	push   ebp
c0011163:	eb 0d                	jmp    c0011172 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0011165:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001116a:	74 12                	je     c001117e <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001116c:	8b 06                	mov    eax,DWORD PTR [esi]
c001116e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011172:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011176:	57                   	push   edi
c0011177:	56                   	push   esi
c0011178:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001117b:	83 c4 10             	add    esp,0x10
c001117e:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0011182:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0011186:	47                   	inc    edi
c0011187:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001118b:	75 c1                	jne    c001114e <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001118d:	43                   	inc    ebx
c001118e:	83 fb 20             	cmp    ebx,0x20
c0011191:	0f 85 79 ff ff ff    	jne    c0011110 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0011197:	83 c4 2c             	add    esp,0x2c
c001119a:	5b                   	pop    ebx
c001119b:	5e                   	pop    esi
c001119c:	5f                   	pop    edi
c001119d:	5d                   	pop    ebp
c001119e:	c3                   	ret    
c001119f:	90                   	nop

c00111a0 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00111a0:	55                   	push   ebp
c00111a1:	57                   	push   edi
c00111a2:	56                   	push   esi
c00111a3:	53                   	push   ebx
c00111a4:	83 ec 28             	sub    esp,0x28
c00111a7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00111ab:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00111af:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c00111b3:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00111b7:	c1 e6 08             	shl    esi,0x8
c00111ba:	01 c6                	add    esi,eax
c00111bc:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00111c0:	c1 e0 08             	shl    eax,0x8
c00111c3:	01 d0                	add    eax,edx
c00111c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00111c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00111cd:	0f af c6             	imul   eax,esi
c00111d0:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00111d7:	50                   	push   eax
c00111d8:	e8 e6 87 ff ff       	call   c00099c3 <malloc>
c00111dd:	83 c4 10             	add    esp,0x10
c00111e0:	89 c7                	mov    edi,eax
c00111e2:	85 c0                	test   eax,eax
c00111e4:	75 10                	jne    c00111f6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c00111e6:	83 ec 0c             	sub    esp,0xc
c00111e9:	68 31 3b 02 c0       	push   0xc0023b31
c00111ee:	e8 ae 31 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c00111f3:	83 c4 10             	add    esp,0x10
c00111f6:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00111f9:	ba 12 00 00 00       	mov    edx,0x12
c00111fe:	84 c0                	test   al,al
c0011200:	74 11                	je     c0011213 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0011202:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0011206:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c001120a:	c1 fa 03             	sar    edx,0x3
c001120d:	0f af d1             	imul   edx,ecx
c0011210:	83 c2 12             	add    edx,0x12
c0011213:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0011217:	74 04                	je     c001121d <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0011219:	85 f6                	test   esi,esi
c001121b:	75 12                	jne    c001122f <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c001121d:	83 ec 0c             	sub    esp,0xc
c0011220:	68 41 3b 02 c0       	push   0xc0023b41
c0011225:	e8 b5 b8 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001122a:	e9 b8 00 00 00       	jmp    c00112e7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c001122f:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0011233:	80 f9 02             	cmp    cl,0x2
c0011236:	0f 85 96 00 00 00    	jne    c00112d2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c001123c:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0011241:	75 0e                	jne    c0011251 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011243:	84 c0                	test   al,al
c0011245:	75 0a                	jne    c0011251 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011247:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001124a:	83 e8 18             	sub    eax,0x18
c001124d:	a8 f7                	test   al,0xf7
c001124f:	74 0a                	je     c001125b <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0011251:	83 ec 0c             	sub    esp,0xc
c0011254:	68 56 3b 02 c0       	push   0xc0023b56
c0011259:	eb 7f                	jmp    c00112da <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c001125b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011263:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001126b:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c001126f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011277:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001127b:	75 0c                	jne    c0011289 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001127d:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0011282:	c1 e0 18             	shl    eax,0x18
c0011285:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011289:	45                   	inc    ebp
c001128a:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c001128f:	c1 e1 10             	shl    ecx,0x10
c0011292:	89 c8                	mov    eax,ecx
c0011294:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0011299:	c1 e1 08             	shl    ecx,0x8
c001129c:	09 c1                	or     ecx,eax
c001129e:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c00112a2:	09 c1                	or     ecx,eax
c00112a4:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c00112a8:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c00112ac:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00112b0:	c1 f8 03             	sar    eax,0x3
c00112b3:	01 c2                	add    edx,eax
c00112b5:	89 e8                	mov    eax,ebp
c00112b7:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00112bb:	39 c6                	cmp    esi,eax
c00112bd:	7f b0                	jg     c001126f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c00112bf:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00112c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00112c7:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00112ca:	7e 22                	jle    c00112ee <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c00112cc:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c00112d0:	eb 99                	jmp    c001126b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00112d2:	50                   	push   eax
c00112d3:	50                   	push   eax
c00112d4:	51                   	push   ecx
c00112d5:	68 64 3b 02 c0       	push   0xc0023b64
c00112da:	e8 00 b8 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c00112df:	89 3c 24             	mov    DWORD PTR [esp],edi
c00112e2:	e8 ec 86 ff ff       	call   c00099d3 <free>
c00112e7:	83 c4 10             	add    esp,0x10
c00112ea:	31 ff                	xor    edi,edi
c00112ec:	eb 0f                	jmp    c00112fd <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c00112ee:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00112f2:	89 30                	mov    DWORD PTR [eax],esi
c00112f4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00112f8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00112fb:	89 30                	mov    DWORD PTR [eax],esi
c00112fd:	83 c4 1c             	add    esp,0x1c
c0011300:	89 f8                	mov    eax,edi
c0011302:	5b                   	pop    ebx
c0011303:	5e                   	pop    esi
c0011304:	5f                   	pop    edi
c0011305:	5d                   	pop    ebp
c0011306:	c3                   	ret    
c0011307:	90                   	nop

c0011308 <Video::putTGA(int, int, unsigned char*, int)>:
c0011308:	55                   	push   ebp
c0011309:	57                   	push   edi
c001130a:	56                   	push   esi
c001130b:	53                   	push   ebx
c001130c:	83 ec 28             	sub    esp,0x28
c001130f:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0011313:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011317:	50                   	push   eax
c0011318:	8d 44 24 18          	lea    eax,[esp+0x18]
c001131c:	50                   	push   eax
c001131d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011321:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011325:	56                   	push   esi
c0011326:	e8 75 fe ff ff       	call   c00111a0 <Video::tgaParse(unsigned char*, int, int*, int*)>
c001132b:	83 c4 20             	add    esp,0x20
c001132e:	85 c0                	test   eax,eax
c0011330:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011334:	74 35                	je     c001136b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011336:	89 c7                	mov    edi,eax
c0011338:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001133c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0011340:	39 d8                	cmp    eax,ebx
c0011342:	7e 27                	jle    c001136b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011344:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011348:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001134c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0011350:	39 e8                	cmp    eax,ebp
c0011352:	7e 14                	jle    c0011368 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0011354:	8b 06                	mov    eax,DWORD PTR [esi]
c0011356:	83 c7 04             	add    edi,0x4
c0011359:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c001135c:	53                   	push   ebx
c001135d:	55                   	push   ebp
c001135e:	45                   	inc    ebp
c001135f:	56                   	push   esi
c0011360:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011363:	83 c4 10             	add    esp,0x10
c0011366:	eb e0                	jmp    c0011348 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0011368:	43                   	inc    ebx
c0011369:	eb cd                	jmp    c0011338 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001136b:	83 c4 1c             	add    esp,0x1c
c001136e:	5b                   	pop    ebx
c001136f:	5e                   	pop    esi
c0011370:	5f                   	pop    edi
c0011371:	5d                   	pop    ebp
c0011372:	c3                   	ret    
c0011373:	90                   	nop

c0011374 <ACPI::close(int, int, void*)>:
c0011374:	83 ec 1c             	sub    esp,0x1c
c0011377:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001137f:	74 0b                	je     c001138c <ACPI::close(int, int, void*)+0x18>
c0011381:	b8 00 00 00 00       	mov    eax,0x0
c0011386:	e9 99 00 00 00       	jmp    c0011424 <ACPI::close(int, int, void*)+0xb0>
c001138b:	90                   	nop
c001138c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0011391:	75 29                	jne    c00113bc <ACPI::close(int, int, void*)+0x48>
c0011393:	a1 c8 6a 02 c0       	mov    eax,ds:0xc0026ac8
c0011398:	85 c0                	test   eax,eax
c001139a:	74 08                	je     c00113a4 <ACPI::close(int, int, void*)+0x30>
c001139c:	a1 c8 6a 02 c0       	mov    eax,ds:0xc0026ac8
c00113a1:	ff d0                	call   eax
c00113a3:	90                   	nop
c00113a4:	83 ec 0c             	sub    esp,0xc
c00113a7:	68 c0 3b 02 c0       	push   0xc0023bc0
c00113ac:	e8 f0 2f 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c00113b1:	83 c4 10             	add    esp,0x10
c00113b4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113b9:	eb 69                	jmp    c0011424 <ACPI::close(int, int, void*)+0xb0>
c00113bb:	90                   	nop
c00113bc:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00113c1:	75 59                	jne    c001141c <ACPI::close(int, int, void*)+0xa8>
c00113c3:	a1 c4 6a 02 c0       	mov    eax,ds:0xc0026ac4
c00113c8:	85 c0                	test   eax,eax
c00113ca:	74 08                	je     c00113d4 <ACPI::close(int, int, void*)+0x60>
c00113cc:	a1 c4 6a 02 c0       	mov    eax,ds:0xc0026ac4
c00113d1:	ff d0                	call   eax
c00113d3:	90                   	nop
c00113d4:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00113d9:	8d 76 00             	lea    esi,[esi+0x0]
c00113dc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00113e1:	83 e0 02             	and    eax,0x2
c00113e4:	74 1e                	je     c0011404 <ACPI::close(int, int, void*)+0x90>
c00113e6:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00113ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00113f1:	89 c2                	mov    edx,eax
c00113f3:	ec                   	in     al,dx
c00113f4:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00113f8:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00113fc:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011400:	eb da                	jmp    c00113dc <ACPI::close(int, int, void*)+0x68>
c0011402:	66 90                	xchg   ax,ax
c0011404:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001140b:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0011410:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0011414:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011418:	ee                   	out    dx,al
c0011419:	8d 76 00             	lea    esi,[esi+0x0]
c001141c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011421:	8d 76 00             	lea    esi,[esi+0x0]
c0011424:	83 c4 1c             	add    esp,0x1c
c0011427:	c3                   	ret    

c0011428 <findRSDP()>:
c0011428:	83 ec 1c             	sub    esp,0x1c
c001142b:	83 ec 0c             	sub    esp,0xc
c001142e:	68 9b 3c 02 c0       	push   0xc0023c9b
c0011433:	e8 e5 85 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011438:	83 c4 10             	add    esp,0x10
c001143b:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c0011440:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011446:	83 e0 04             	and    eax,0x4
c0011449:	84 c0                	test   al,al
c001144b:	75 0b                	jne    c0011458 <findRSDP()+0x30>
c001144d:	b8 00 00 00 00       	mov    eax,0x0
c0011452:	e9 a1 00 00 00       	jmp    c00114f8 <findRSDP()+0xd0>
c0011457:	90                   	nop
c0011458:	a1 b8 64 02 c0       	mov    eax,ds:0xc00264b8
c001145d:	3d ff 07 00 00       	cmp    eax,0x7ff
c0011462:	7f 1c                	jg     c0011480 <findRSDP()+0x58>
c0011464:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c0011469:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001146f:	83 e2 fb             	and    edx,0xfffffffb
c0011472:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011478:	b8 00 00 00 00       	mov    eax,0x0
c001147d:	eb 79                	jmp    c00114f8 <findRSDP()+0xd0>
c001147f:	90                   	nop
c0011480:	83 ec 0c             	sub    esp,0xc
c0011483:	68 ab 3c 02 c0       	push   0xc0023cab
c0011488:	e8 90 85 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001148d:	83 c4 10             	add    esp,0x10
c0011490:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0011498:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00114a0:	77 3e                	ja     c00114e0 <findRSDP()+0xb8>
c00114a2:	83 ec 04             	sub    esp,0x4
c00114a5:	6a 08                	push   0x8
c00114a7:	68 c4 3c 02 c0       	push   0xc0023cc4
c00114ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00114b0:	e8 cb f0 fe ff       	call   c0000580 <memcmp>
c00114b5:	83 c4 10             	add    esp,0x10
c00114b8:	85 c0                	test   eax,eax
c00114ba:	0f 94 c0             	sete   al
c00114bd:	84 c0                	test   al,al
c00114bf:	74 17                	je     c00114d8 <findRSDP()+0xb0>
c00114c1:	83 ec 0c             	sub    esp,0xc
c00114c4:	68 cd 3c 02 c0       	push   0xc0023ccd
c00114c9:	e8 4f 85 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00114ce:	83 c4 10             	add    esp,0x10
c00114d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00114d5:	eb 21                	jmp    c00114f8 <findRSDP()+0xd0>
c00114d7:	90                   	nop
c00114d8:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00114dd:	eb b9                	jmp    c0011498 <findRSDP()+0x70>
c00114df:	90                   	nop
c00114e0:	83 ec 0c             	sub    esp,0xc
c00114e3:	68 db 3c 02 c0       	push   0xc0023cdb
c00114e8:	e8 30 85 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00114ed:	83 c4 10             	add    esp,0x10
c00114f0:	b8 00 00 00 00       	mov    eax,0x0
c00114f5:	8d 76 00             	lea    esi,[esi+0x0]
c00114f8:	83 c4 1c             	add    esp,0x1c
c00114fb:	c3                   	ret    

c00114fc <loadACPITables(unsigned char*)>:
c00114fc:	57                   	push   edi
c00114fd:	56                   	push   esi
c00114fe:	53                   	push   ebx
c00114ff:	83 ec 60             	sub    esp,0x60
c0011502:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c0011507:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001150d:	83 e0 04             	and    eax,0x4
c0011510:	84 c0                	test   al,al
c0011512:	0f 84 3c 02 00 00    	je     c0011754 <loadACPITables(unsigned char*)+0x258>
c0011518:	a0 e0 6c 02 c0       	mov    al,ds:0xc0026ce0
c001151d:	84 c0                	test   al,al
c001151f:	74 77                	je     c0011598 <loadACPITables(unsigned char*)+0x9c>
c0011521:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011525:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0011529:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001152d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011530:	83 e8 24             	sub    eax,0x24
c0011533:	c1 e8 03             	shr    eax,0x3
c0011536:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001153a:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0011542:	66 90                	xchg   ax,ax
c0011544:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011548:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001154c:	0f 8d b6 00 00 00    	jge    c0011608 <loadACPITables(unsigned char*)+0x10c>
c0011552:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011556:	83 c0 24             	add    eax,0x24
c0011559:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001155d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0011561:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011565:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011569:	c1 e0 03             	shl    eax,0x3
c001156c:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0011570:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011574:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011577:	8b 00                	mov    eax,DWORD PTR [eax]
c0011579:	89 c1                	mov    ecx,eax
c001157b:	a1 cc 6a 02 c0       	mov    eax,ds:0xc0026acc
c0011580:	8d 50 01             	lea    edx,[eax+0x1]
c0011583:	89 15 cc 6a 02 c0    	mov    DWORD PTR ds:0xc0026acc,edx
c0011589:	89 ca                	mov    edx,ecx
c001158b:	89 14 c5 e4 6a 02 c0 	mov    DWORD PTR [eax*8-0x3ffd951c],edx
c0011592:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0011596:	eb ac                	jmp    c0011544 <loadACPITables(unsigned char*)+0x48>
c0011598:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001159c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00115a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00115a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115a7:	83 e8 24             	sub    eax,0x24
c00115aa:	c1 e8 02             	shr    eax,0x2
c00115ad:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00115b1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00115b9:	8d 76 00             	lea    esi,[esi+0x0]
c00115bc:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00115c0:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c00115c4:	7d 42                	jge    c0011608 <loadACPITables(unsigned char*)+0x10c>
c00115c6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00115ca:	83 c0 24             	add    eax,0x24
c00115cd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00115d1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00115d5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00115d9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00115dd:	c1 e0 02             	shl    eax,0x2
c00115e0:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00115e4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00115e8:	8b 08                	mov    ecx,DWORD PTR [eax]
c00115ea:	a1 cc 6a 02 c0       	mov    eax,ds:0xc0026acc
c00115ef:	8d 50 01             	lea    edx,[eax+0x1]
c00115f2:	89 15 cc 6a 02 c0    	mov    DWORD PTR ds:0xc0026acc,edx
c00115f8:	89 ca                	mov    edx,ecx
c00115fa:	89 14 c5 e4 6a 02 c0 	mov    DWORD PTR [eax*8-0x3ffd951c],edx
c0011601:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0011605:	eb b5                	jmp    c00115bc <loadACPITables(unsigned char*)+0xc0>
c0011607:	90                   	nop
c0011608:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0011610:	a1 cc 6a 02 c0       	mov    eax,ds:0xc0026acc
c0011615:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0011619:	0f 8d 39 01 00 00    	jge    c0011758 <loadACPITables(unsigned char*)+0x25c>
c001161f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011623:	8b 04 c5 e4 6a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd951c]
c001162a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001162e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011632:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011636:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001163a:	25 ff 0f 00 00       	and    eax,0xfff
c001163f:	89 c6                	mov    esi,eax
c0011641:	8b 1d b0 65 02 c0    	mov    ebx,DWORD PTR ds:0xc00265b0
c0011647:	83 ec 0c             	sub    esp,0xc
c001164a:	6a 01                	push   0x1
c001164c:	e8 bc a0 ff ff       	call   c000b70d <Virt::allocateKernelVirtualPages(int)>
c0011651:	83 c4 10             	add    esp,0x10
c0011654:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011658:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001165e:	83 ec 0c             	sub    esp,0xc
c0011661:	6a 01                	push   0x1
c0011663:	6a 01                	push   0x1
c0011665:	50                   	push   eax
c0011666:	52                   	push   edx
c0011667:	53                   	push   ebx
c0011668:	e8 3d aa ff ff       	call   c000c0aa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001166d:	83 c4 20             	add    esp,0x20
c0011670:	09 f0                	or     eax,esi
c0011672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011676:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001167a:	c1 e0 03             	shl    eax,0x3
c001167d:	05 e0 6a 02 c0       	add    eax,0xc0026ae0
c0011682:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011686:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001168a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001168e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0011696:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001169a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001169e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00116a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00116a6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00116aa:	89 c6                	mov    esi,eax
c00116ac:	89 d7                	mov    edi,edx
c00116ae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00116b0:	89 c8                	mov    eax,ecx
c00116b2:	89 fa                	mov    edx,edi
c00116b4:	89 f3                	mov    ebx,esi
c00116b6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00116ba:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00116be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00116cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00116d1:	05 00 10 00 00       	add    eax,0x1000
c00116d6:	c1 e8 0c             	shr    eax,0xc
c00116d9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00116dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116e1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00116e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116e9:	25 ff 0f 00 00       	and    eax,0xfff
c00116ee:	89 c6                	mov    esi,eax
c00116f0:	8b 1d b0 65 02 c0    	mov    ebx,DWORD PTR ds:0xc00265b0
c00116f6:	83 ec 0c             	sub    esp,0xc
c00116f9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00116fd:	e8 0b a0 ff ff       	call   c000b70d <Virt::allocateKernelVirtualPages(int)>
c0011702:	83 c4 10             	add    esp,0x10
c0011705:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011709:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001170f:	83 ec 0c             	sub    esp,0xc
c0011712:	6a 01                	push   0x1
c0011714:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011718:	50                   	push   eax
c0011719:	52                   	push   edx
c001171a:	53                   	push   ebx
c001171b:	e8 8a a9 ff ff       	call   c000c0aa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011720:	83 c4 20             	add    esp,0x20
c0011723:	09 f0                	or     eax,esi
c0011725:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011729:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001172d:	83 ec 0c             	sub    esp,0xc
c0011730:	50                   	push   eax
c0011731:	e8 07 a3 ff ff       	call   c000ba3d <Virt::freeKernelVirtualPages(unsigned long)>
c0011736:	83 c4 10             	add    esp,0x10
c0011739:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001173d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011741:	89 14 c5 e4 6a 02 c0 	mov    DWORD PTR [eax*8-0x3ffd951c],edx
c0011748:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c001174c:	e9 bf fe ff ff       	jmp    c0011610 <loadACPITables(unsigned char*)+0x114>
c0011751:	8d 76 00             	lea    esi,[esi+0x0]
c0011754:	90                   	nop
c0011755:	8d 76 00             	lea    esi,[esi+0x0]
c0011758:	83 c4 60             	add    esp,0x60
c001175b:	5b                   	pop    ebx
c001175c:	5e                   	pop    esi
c001175d:	5f                   	pop    edi
c001175e:	c3                   	ret    
c001175f:	90                   	nop

c0011760 <findRSDT(unsigned char*)>:
c0011760:	57                   	push   edi
c0011761:	56                   	push   esi
c0011762:	53                   	push   ebx
c0011763:	83 ec 50             	sub    esp,0x50
c0011766:	83 ec 0c             	sub    esp,0xc
c0011769:	68 ef 3c 02 c0       	push   0xc0023cef
c001176e:	e8 aa 82 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011773:	83 c4 10             	add    esp,0x10
c0011776:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c001177b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011781:	83 e0 04             	and    eax,0x4
c0011784:	84 c0                	test   al,al
c0011786:	75 0c                	jne    c0011794 <findRSDT(unsigned char*)+0x34>
c0011788:	b8 00 00 00 00       	mov    eax,0x0
c001178d:	e9 86 01 00 00       	jmp    c0011918 <findRSDT(unsigned char*)+0x1b8>
c0011792:	66 90                	xchg   ax,ax
c0011794:	83 ec 0c             	sub    esp,0xc
c0011797:	68 01 3d 02 c0       	push   0xc0023d01
c001179c:	e8 7c 82 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00117a1:	83 c4 10             	add    esp,0x10
c00117a4:	89 e0                	mov    eax,esp
c00117a6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00117aa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00117ae:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00117b2:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c00117ba:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00117be:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00117c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00117c6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00117ca:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00117ce:	89 c6                	mov    esi,eax
c00117d0:	89 d7                	mov    edi,edx
c00117d2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00117d4:	89 c8                	mov    eax,ecx
c00117d6:	89 fa                	mov    edx,edi
c00117d8:	89 f3                	mov    ebx,esi
c00117da:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00117de:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00117e2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00117e6:	83 ec 0c             	sub    esp,0xc
c00117e9:	68 13 3d 02 c0       	push   0xc0023d13
c00117ee:	e8 2a 82 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00117f3:	83 c4 10             	add    esp,0x10
c00117f6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00117fa:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c00117fe:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0011806:	83 ec 0c             	sub    esp,0xc
c0011809:	68 25 3d 02 c0       	push   0xc0023d25
c001180e:	e8 0a 82 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011813:	83 c4 10             	add    esp,0x10
c0011816:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001181a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001181e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011826:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001182a:	83 ec 04             	sub    esp,0x4
c001182d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011831:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011835:	68 e4 3b 02 c0       	push   0xc0023be4
c001183a:	e8 a0 b2 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001183f:	83 c4 10             	add    esp,0x10
c0011842:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011846:	25 ff 0f 00 00       	and    eax,0xfff
c001184b:	89 c6                	mov    esi,eax
c001184d:	8b 1d b0 65 02 c0    	mov    ebx,DWORD PTR ds:0xc00265b0
c0011853:	83 ec 0c             	sub    esp,0xc
c0011856:	6a 02                	push   0x2
c0011858:	e8 b0 9e ff ff       	call   c000b70d <Virt::allocateKernelVirtualPages(int)>
c001185d:	83 c4 10             	add    esp,0x10
c0011860:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0011864:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001186a:	83 ec 0c             	sub    esp,0xc
c001186d:	6a 01                	push   0x1
c001186f:	6a 02                	push   0x2
c0011871:	50                   	push   eax
c0011872:	52                   	push   edx
c0011873:	53                   	push   ebx
c0011874:	e8 31 a8 ff ff       	call   c000c0aa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011879:	83 c4 20             	add    esp,0x20
c001187c:	09 f0                	or     eax,esi
c001187e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011882:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011886:	25 ff 0f 00 00       	and    eax,0xfff
c001188b:	89 c6                	mov    esi,eax
c001188d:	8b 1d b0 65 02 c0    	mov    ebx,DWORD PTR ds:0xc00265b0
c0011893:	83 ec 0c             	sub    esp,0xc
c0011896:	6a 02                	push   0x2
c0011898:	e8 70 9e ff ff       	call   c000b70d <Virt::allocateKernelVirtualPages(int)>
c001189d:	83 c4 10             	add    esp,0x10
c00118a0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00118a4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00118aa:	83 ec 0c             	sub    esp,0xc
c00118ad:	6a 01                	push   0x1
c00118af:	6a 02                	push   0x2
c00118b1:	50                   	push   eax
c00118b2:	52                   	push   edx
c00118b3:	53                   	push   ebx
c00118b4:	e8 f1 a7 ff ff       	call   c000c0aa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00118b9:	83 c4 20             	add    esp,0x20
c00118bc:	09 f0                	or     eax,esi
c00118be:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00118c2:	83 ec 04             	sub    esp,0x4
c00118c5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00118c9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00118cd:	68 04 3c 02 c0       	push   0xc0023c04
c00118d2:	e8 08 b2 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c00118d7:	83 c4 10             	add    esp,0x10
c00118da:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00118df:	75 13                	jne    c00118f4 <findRSDT(unsigned char*)+0x194>
c00118e1:	c6 05 e0 6c 02 c0 00 	mov    BYTE PTR ds:0xc0026ce0,0x0
c00118e8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00118ec:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00118f0:	eb 22                	jmp    c0011914 <findRSDT(unsigned char*)+0x1b4>
c00118f2:	66 90                	xchg   ax,ax
c00118f4:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c00118f9:	75 11                	jne    c001190c <findRSDT(unsigned char*)+0x1ac>
c00118fb:	c6 05 e0 6c 02 c0 01 	mov    BYTE PTR ds:0xc0026ce0,0x1
c0011902:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011906:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001190a:	eb 08                	jmp    c0011914 <findRSDT(unsigned char*)+0x1b4>
c001190c:	b8 00 00 00 00       	mov    eax,0x0
c0011911:	eb 05                	jmp    c0011918 <findRSDT(unsigned char*)+0x1b8>
c0011913:	90                   	nop
c0011914:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011918:	83 c4 50             	add    esp,0x50
c001191b:	5b                   	pop    ebx
c001191c:	5e                   	pop    esi
c001191d:	5f                   	pop    edi
c001191e:	c3                   	ret    
c001191f:	90                   	nop

c0011920 <findDataTable(unsigned char*, char*)>:
c0011920:	83 ec 1c             	sub    esp,0x1c
c0011923:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c0011928:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001192e:	83 e0 04             	and    eax,0x4
c0011931:	84 c0                	test   al,al
c0011933:	75 07                	jne    c001193c <findDataTable(unsigned char*, char*)+0x1c>
c0011935:	b8 00 00 00 00       	mov    eax,0x0
c001193a:	eb 58                	jmp    c0011994 <findDataTable(unsigned char*, char*)+0x74>
c001193c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011944:	a1 cc 6a 02 c0       	mov    eax,ds:0xc0026acc
c0011949:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001194d:	7d 3d                	jge    c001198c <findDataTable(unsigned char*, char*)+0x6c>
c001194f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011953:	c1 e0 03             	shl    eax,0x3
c0011956:	05 e0 6a 02 c0       	add    eax,0xc0026ae0
c001195b:	83 ec 04             	sub    esp,0x4
c001195e:	6a 04                	push   0x4
c0011960:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011964:	50                   	push   eax
c0011965:	e8 16 ec fe ff       	call   c0000580 <memcmp>
c001196a:	83 c4 10             	add    esp,0x10
c001196d:	85 c0                	test   eax,eax
c001196f:	0f 94 c0             	sete   al
c0011972:	84 c0                	test   al,al
c0011974:	74 0e                	je     c0011984 <findDataTable(unsigned char*, char*)+0x64>
c0011976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001197a:	8b 04 c5 e4 6a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd951c]
c0011981:	eb 11                	jmp    c0011994 <findDataTable(unsigned char*, char*)+0x74>
c0011983:	90                   	nop
c0011984:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011988:	eb ba                	jmp    c0011944 <findDataTable(unsigned char*, char*)+0x24>
c001198a:	66 90                	xchg   ax,ax
c001198c:	b8 00 00 00 00       	mov    eax,0x0
c0011991:	8d 76 00             	lea    esi,[esi+0x0]
c0011994:	83 c4 1c             	add    esp,0x1c
c0011997:	c3                   	ret    

c0011998 <scanMADT()>:
c0011998:	53                   	push   ebx
c0011999:	83 ec 38             	sub    esp,0x38
c001199c:	83 ec 0c             	sub    esp,0xc
c001199f:	68 37 3d 02 c0       	push   0xc0023d37
c00119a4:	e8 74 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00119a9:	83 c4 10             	add    esp,0x10
c00119ac:	a1 a0 64 02 c0       	mov    eax,ds:0xc00264a0
c00119b1:	25 00 04 00 00       	and    eax,0x400
c00119b6:	74 14                	je     c00119cc <scanMADT()+0x34>
c00119b8:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c00119bd:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00119c3:	83 e2 fb             	and    edx,0xfffffffb
c00119c6:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00119cc:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c00119d1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00119d7:	83 e0 04             	and    eax,0x4
c00119da:	84 c0                	test   al,al
c00119dc:	0f 84 82 04 00 00    	je     c0011e64 <scanMADT()+0x4cc>
c00119e2:	83 ec 0c             	sub    esp,0xc
c00119e5:	68 44 3d 02 c0       	push   0xc0023d44
c00119ea:	e8 2e 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00119ef:	83 c4 10             	add    esp,0x10
c00119f2:	e8 31 fa ff ff       	call   c0011428 <findRSDP()>
c00119f7:	a3 ec 6c 02 c0       	mov    ds:0xc0026cec,eax
c00119fc:	a1 ec 6c 02 c0       	mov    eax,ds:0xc0026cec
c0011a01:	85 c0                	test   eax,eax
c0011a03:	75 1b                	jne    c0011a20 <scanMADT()+0x88>
c0011a05:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c0011a0a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011a10:	83 e2 fb             	and    edx,0xfffffffb
c0011a13:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011a19:	e9 4e 04 00 00       	jmp    c0011e6c <scanMADT()+0x4d4>
c0011a1e:	66 90                	xchg   ax,ax
c0011a20:	83 ec 0c             	sub    esp,0xc
c0011a23:	68 56 3d 02 c0       	push   0xc0023d56
c0011a28:	e8 f0 7f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011a2d:	83 c4 10             	add    esp,0x10
c0011a30:	a1 ec 6c 02 c0       	mov    eax,ds:0xc0026cec
c0011a35:	83 ec 0c             	sub    esp,0xc
c0011a38:	50                   	push   eax
c0011a39:	e8 22 fd ff ff       	call   c0011760 <findRSDT(unsigned char*)>
c0011a3e:	83 c4 10             	add    esp,0x10
c0011a41:	a3 e8 6c 02 c0       	mov    ds:0xc0026ce8,eax
c0011a46:	a1 e8 6c 02 c0       	mov    eax,ds:0xc0026ce8
c0011a4b:	85 c0                	test   eax,eax
c0011a4d:	75 19                	jne    c0011a68 <scanMADT()+0xd0>
c0011a4f:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c0011a54:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011a5a:	83 e2 fb             	and    edx,0xfffffffb
c0011a5d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011a63:	e9 04 04 00 00       	jmp    c0011e6c <scanMADT()+0x4d4>
c0011a68:	83 ec 0c             	sub    esp,0xc
c0011a6b:	68 66 3d 02 c0       	push   0xc0023d66
c0011a70:	e8 a8 7f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011a75:	83 c4 10             	add    esp,0x10
c0011a78:	a1 e8 6c 02 c0       	mov    eax,ds:0xc0026ce8
c0011a7d:	83 ec 0c             	sub    esp,0xc
c0011a80:	50                   	push   eax
c0011a81:	e8 76 fa ff ff       	call   c00114fc <loadACPITables(unsigned char*)>
c0011a86:	83 c4 10             	add    esp,0x10
c0011a89:	a1 e8 6c 02 c0       	mov    eax,ds:0xc0026ce8
c0011a8e:	83 ec 08             	sub    esp,0x8
c0011a91:	68 7e 3d 02 c0       	push   0xc0023d7e
c0011a96:	50                   	push   eax
c0011a97:	e8 84 fe ff ff       	call   c0011920 <findDataTable(unsigned char*, char*)>
c0011a9c:	83 c4 10             	add    esp,0x10
c0011a9f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011aa3:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0011aa8:	75 1a                	jne    c0011ac4 <scanMADT()+0x12c>
c0011aaa:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c0011aaf:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011ab5:	83 e2 fe             	and    edx,0xfffffffe
c0011ab8:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011abe:	e9 a9 03 00 00       	jmp    c0011e6c <scanMADT()+0x4d4>
c0011ac3:	90                   	nop
c0011ac4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011acc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ad0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011ad3:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0011ad7:	0f 87 8f 03 00 00    	ja     c0011e6c <scanMADT()+0x4d4>
c0011add:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0011ae5:	0f 87 81 03 00 00    	ja     c0011e6c <scanMADT()+0x4d4>
c0011aeb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011aef:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011af3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011af7:	8d 50 01             	lea    edx,[eax+0x1]
c0011afa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011afe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011b02:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011b06:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0011b0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b0e:	8d 50 01             	lea    edx,[eax+0x1]
c0011b11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011b15:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011b19:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011b1d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0011b21:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0011b26:	0f 86 3c 03 00 00    	jbe    c0011e68 <scanMADT()+0x4d0>
c0011b2c:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0011b31:	75 59                	jne    c0011b8c <scanMADT()+0x1f4>
c0011b33:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b37:	8d 50 01             	lea    edx,[eax+0x1]
c0011b3a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011b3e:	8a 15 e0 6e 02 c0    	mov    dl,BYTE PTR ds:0xc0026ee0
c0011b44:	0f b6 d2             	movzx  edx,dl
c0011b47:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011b4b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011b4f:	88 82 20 6f 02 c0    	mov    BYTE PTR [edx-0x3ffd90e0],al
c0011b55:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b59:	8d 50 01             	lea    edx,[eax+0x1]
c0011b5c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011b60:	8a 15 e0 6e 02 c0    	mov    dl,BYTE PTR ds:0xc0026ee0
c0011b66:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011b69:	88 0d e0 6e 02 c0    	mov    BYTE PTR ds:0xc0026ee0,cl
c0011b6f:	0f b6 d2             	movzx  edx,dl
c0011b72:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011b76:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011b7a:	88 82 00 6f 02 c0    	mov    BYTE PTR [edx-0x3ffd9100],al
c0011b80:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011b85:	e9 c6 02 00 00       	jmp    c0011e50 <scanMADT()+0x4b8>
c0011b8a:	66 90                	xchg   ax,ax
c0011b8c:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0011b91:	0f 85 15 01 00 00    	jne    c0011cac <scanMADT()+0x314>
c0011b97:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b9b:	8d 50 01             	lea    edx,[eax+0x1]
c0011b9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011ba2:	8a 15 a0 6d 02 c0    	mov    dl,BYTE PTR ds:0xc0026da0
c0011ba8:	0f b6 d2             	movzx  edx,dl
c0011bab:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011baf:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011bb3:	88 82 c0 6d 02 c0    	mov    BYTE PTR [edx-0x3ffd9240],al
c0011bb9:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0011bbd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011bc1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bc5:	01 d0                	add    eax,edx
c0011bc7:	83 c0 2c             	add    eax,0x2c
c0011bca:	8a 00                	mov    al,BYTE PTR [eax]
c0011bcc:	0f b6 d0             	movzx  edx,al
c0011bcf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bd3:	8d 48 01             	lea    ecx,[eax+0x1]
c0011bd6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011bda:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011bde:	0f b6 c0             	movzx  eax,al
c0011be1:	c1 e0 08             	shl    eax,0x8
c0011be4:	89 d1                	mov    ecx,edx
c0011be6:	09 c1                	or     ecx,eax
c0011be8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bec:	8d 50 02             	lea    edx,[eax+0x2]
c0011bef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011bf3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011bf7:	0f b6 c0             	movzx  eax,al
c0011bfa:	c1 e0 10             	shl    eax,0x10
c0011bfd:	09 c1                	or     ecx,eax
c0011bff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c03:	8d 50 03             	lea    edx,[eax+0x3]
c0011c06:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c0a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011c0e:	0f b6 c0             	movzx  eax,al
c0011c11:	c1 e0 18             	shl    eax,0x18
c0011c14:	09 c1                	or     ecx,eax
c0011c16:	89 ca                	mov    edx,ecx
c0011c18:	a0 a0 6d 02 c0       	mov    al,ds:0xc0026da0
c0011c1d:	0f b6 c0             	movzx  eax,al
c0011c20:	89 14 85 e0 6d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9220],edx
c0011c27:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011c2c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011c30:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c34:	01 d0                	add    eax,edx
c0011c36:	83 c0 2c             	add    eax,0x2c
c0011c39:	8a 00                	mov    al,BYTE PTR [eax]
c0011c3b:	0f b6 d0             	movzx  edx,al
c0011c3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c42:	8d 48 01             	lea    ecx,[eax+0x1]
c0011c45:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c49:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011c4d:	0f b6 c0             	movzx  eax,al
c0011c50:	c1 e0 08             	shl    eax,0x8
c0011c53:	89 d1                	mov    ecx,edx
c0011c55:	09 c1                	or     ecx,eax
c0011c57:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c5b:	8d 50 02             	lea    edx,[eax+0x2]
c0011c5e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c62:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011c66:	0f b6 c0             	movzx  eax,al
c0011c69:	c1 e0 10             	shl    eax,0x10
c0011c6c:	09 c1                	or     ecx,eax
c0011c6e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c72:	8d 50 03             	lea    edx,[eax+0x3]
c0011c75:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c79:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011c7d:	0f b6 c0             	movzx  eax,al
c0011c80:	c1 e0 18             	shl    eax,0x18
c0011c83:	09 c1                	or     ecx,eax
c0011c85:	89 ca                	mov    edx,ecx
c0011c87:	a0 a0 6d 02 c0       	mov    al,ds:0xc0026da0
c0011c8c:	0f b6 c0             	movzx  eax,al
c0011c8f:	89 14 85 60 6e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd91a0],edx
c0011c96:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011c9b:	a0 a0 6d 02 c0       	mov    al,ds:0xc0026da0
c0011ca0:	40                   	inc    eax
c0011ca1:	a2 a0 6d 02 c0       	mov    ds:0xc0026da0,al
c0011ca6:	e9 a5 01 00 00       	jmp    c0011e50 <scanMADT()+0x4b8>
c0011cab:	90                   	nop
c0011cac:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0011cb1:	0f 85 e9 00 00 00    	jne    c0011da0 <scanMADT()+0x408>
c0011cb7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cbb:	8d 50 01             	lea    edx,[eax+0x1]
c0011cbe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011cc2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011cc6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011cca:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0011cce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cd2:	8d 50 01             	lea    edx,[eax+0x1]
c0011cd5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011cd9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011cdd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011ce1:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0011ce5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011ce9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ced:	01 d0                	add    eax,edx
c0011cef:	83 c0 2c             	add    eax,0x2c
c0011cf2:	8a 00                	mov    al,BYTE PTR [eax]
c0011cf4:	0f b6 d0             	movzx  edx,al
c0011cf7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cfb:	8d 48 01             	lea    ecx,[eax+0x1]
c0011cfe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011d02:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011d06:	0f b6 c0             	movzx  eax,al
c0011d09:	c1 e0 08             	shl    eax,0x8
c0011d0c:	89 d1                	mov    ecx,edx
c0011d0e:	09 c1                	or     ecx,eax
c0011d10:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d14:	8d 50 02             	lea    edx,[eax+0x2]
c0011d17:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011d1b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011d1f:	0f b6 c0             	movzx  eax,al
c0011d22:	c1 e0 10             	shl    eax,0x10
c0011d25:	09 c1                	or     ecx,eax
c0011d27:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d2b:	8d 50 03             	lea    edx,[eax+0x3]
c0011d2e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011d32:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011d36:	0f b6 c0             	movzx  eax,al
c0011d39:	c1 e0 18             	shl    eax,0x18
c0011d3c:	09 c8                	or     eax,ecx
c0011d3e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011d42:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011d47:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d4b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d4f:	01 d0                	add    eax,edx
c0011d51:	83 c0 2c             	add    eax,0x2c
c0011d54:	8a 00                	mov    al,BYTE PTR [eax]
c0011d56:	0f b6 c0             	movzx  eax,al
c0011d59:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011d5d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011d60:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d64:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0011d68:	0f b6 d2             	movzx  edx,dl
c0011d6b:	c1 e2 08             	shl    edx,0x8
c0011d6e:	09 d0                	or     eax,edx
c0011d70:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0011d75:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011d7a:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0011d7f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011d83:	88 90 80 5b 02 c0    	mov    BYTE PTR [eax-0x3ffda480],dl
c0011d89:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0011d8e:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0011d93:	66 89 84 12 80 6d 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd9280],ax
c0011d9b:	e9 b0 00 00 00       	jmp    c0011e50 <scanMADT()+0x4b8>
c0011da0:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0011da5:	0f 85 99 00 00 00    	jne    c0011e44 <scanMADT()+0x4ac>
c0011dab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011daf:	8d 50 01             	lea    edx,[eax+0x1]
c0011db2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011db6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011dba:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011dbe:	0f b6 c0             	movzx  eax,al
c0011dc1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011dc5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011dc9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011dcd:	01 d0                	add    eax,edx
c0011dcf:	83 c0 2c             	add    eax,0x2c
c0011dd2:	8a 00                	mov    al,BYTE PTR [eax]
c0011dd4:	0f b6 d0             	movzx  edx,al
c0011dd7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ddb:	8d 48 01             	lea    ecx,[eax+0x1]
c0011dde:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011de2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011de6:	0f b6 c0             	movzx  eax,al
c0011de9:	c1 e0 08             	shl    eax,0x8
c0011dec:	09 d0                	or     eax,edx
c0011dee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011df2:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011df7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011dfb:	8d 50 01             	lea    edx,[eax+0x1]
c0011dfe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011e02:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011e06:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011e0a:	0f b6 c0             	movzx  eax,al
c0011e0d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e15:	c1 e0 08             	shl    eax,0x8
c0011e18:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011e1c:	89 c1                	mov    ecx,eax
c0011e1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e22:	c1 e0 18             	shl    eax,0x18
c0011e25:	89 c3                	mov    ebx,eax
c0011e27:	a1 f0 6c 02 c0       	mov    eax,ds:0xc0026cf0
c0011e2c:	8d 50 01             	lea    edx,[eax+0x1]
c0011e2f:	89 15 f0 6c 02 c0    	mov    DWORD PTR ds:0xc0026cf0,edx
c0011e35:	09 d9                	or     ecx,ebx
c0011e37:	89 ca                	mov    edx,ecx
c0011e39:	89 14 85 00 6d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9300],edx
c0011e40:	eb 0e                	jmp    c0011e50 <scanMADT()+0x4b8>
c0011e42:	66 90                	xchg   ax,ax
c0011e44:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0011e49:	75 05                	jne    c0011e50 <scanMADT()+0x4b8>
c0011e4b:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0011e50:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0011e55:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011e59:	01 d0                	add    eax,edx
c0011e5b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011e5f:	e9 68 fc ff ff       	jmp    c0011acc <scanMADT()+0x134>
c0011e64:	90                   	nop
c0011e65:	eb 05                	jmp    c0011e6c <scanMADT()+0x4d4>
c0011e67:	90                   	nop
c0011e68:	90                   	nop
c0011e69:	8d 76 00             	lea    esi,[esi+0x0]
c0011e6c:	83 c4 38             	add    esp,0x38
c0011e6f:	5b                   	pop    ebx
c0011e70:	c3                   	ret    
c0011e71:	90                   	nop
c0011e72:	66 90                	xchg   ax,ax

c0011e74 <ACPI::ACPI()>:
c0011e74:	83 ec 0c             	sub    esp,0xc
c0011e77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e7b:	83 ec 08             	sub    esp,0x8
c0011e7e:	68 83 3d 02 c0       	push   0xc0023d83
c0011e83:	50                   	push   eax
c0011e84:	e8 a1 c2 ff ff       	call   c000e12a <Device::Device(char const*)>
c0011e89:	83 c4 10             	add    esp,0x10
c0011e8c:	ba 0c 3f 02 c0       	mov    edx,0xc0023f0c
c0011e91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e95:	89 10                	mov    DWORD PTR [eax],edx
c0011e97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e9b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0011ea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ea6:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0011eb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011eb4:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0011ebe:	83 ec 0c             	sub    esp,0xc
c0011ec1:	68 88 3d 02 c0       	push   0xc0023d88
c0011ec6:	e8 52 7b ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011ecb:	83 c4 10             	add    esp,0x10
c0011ece:	e8 c5 fa ff ff       	call   c0011998 <scanMADT()>
c0011ed3:	90                   	nop
c0011ed4:	83 c4 0c             	add    esp,0xc
c0011ed7:	c3                   	ret    

c0011ed8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0011ed8:	83 ec 2c             	sub    esp,0x2c
c0011edb:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0011edf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011ee3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011ee7:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0011eeb:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0011ef0:	88 d0                	mov    al,dl
c0011ef2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0011ef6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011efb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011f03:	90                   	nop
c0011f04:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f08:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011f0e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0011f12:	0f 8d 9c 00 00 00    	jge    c0011fb4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c0011f18:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f1c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f20:	83 c2 2a             	add    edx,0x2a
c0011f23:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0011f27:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0011f2c:	75 7a                	jne    c0011fa8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0011f2e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f32:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f36:	83 c2 2a             	add    edx,0x2a
c0011f39:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0011f3d:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0011f41:	75 65                	jne    c0011fa8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0011f43:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011f48:	74 3a                	je     c0011f84 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c0011f4a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f4e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f52:	83 c2 2a             	add    edx,0x2a
c0011f55:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0011f59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f5d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011f60:	39 c2                	cmp    edx,eax
c0011f62:	74 10                	je     c0011f74 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c0011f64:	83 ec 0c             	sub    esp,0xc
c0011f67:	68 24 3c 02 c0       	push   0xc0023c24
c0011f6c:	e8 30 24 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c0011f71:	83 c4 10             	add    esp,0x10
c0011f74:	83 ec 0c             	sub    esp,0xc
c0011f77:	68 96 3d 02 c0       	push   0xc0023d96
c0011f7c:	e8 20 24 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c0011f81:	83 c4 10             	add    esp,0x10
c0011f84:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0011f88:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f8c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f90:	83 c2 2a             	add    edx,0x2a
c0011f93:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0011f97:	8b 02                	mov    eax,DWORD PTR [edx]
c0011f99:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0011f9c:	89 01                	mov    DWORD PTR [ecx],eax
c0011f9e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0011fa1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0011fa6:	66 90                	xchg   ax,ax
c0011fa8:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011fac:	e9 53 ff ff ff       	jmp    c0011f04 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c0011fb1:	8d 76 00             	lea    esi,[esi+0x0]
c0011fb4:	90                   	nop
c0011fb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fb9:	83 c4 2c             	add    esp,0x2c
c0011fbc:	c2 04 00             	ret    0x4
c0011fbf:	90                   	nop

c0011fc0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0011fc0:	83 ec 1c             	sub    esp,0x1c
c0011fc3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011fc7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0011fcb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011fcf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011fd4:	88 c8                	mov    al,cl
c0011fd6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0011fda:	88 d0                	mov    al,dl
c0011fdc:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0011fe0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fe4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0011fea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fee:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0011ff1:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0011ff5:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0011ff9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ffd:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012003:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012007:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001200a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001200e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0012013:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012017:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001201d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0012021:	8d 48 01             	lea    ecx,[eax+0x1]
c0012024:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012028:	83 c2 2a             	add    edx,0x2a
c001202b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001202f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012033:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012039:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001203d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0012040:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012044:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0012048:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001204c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012052:	8d 50 01             	lea    edx,[eax+0x1]
c0012055:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012059:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001205f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012063:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012069:	3d 00 02 00 00       	cmp    eax,0x200
c001206e:	75 10                	jne    c0012080 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0012070:	83 ec 0c             	sub    esp,0xc
c0012073:	68 a5 3d 02 c0       	push   0xc0023da5
c0012078:	e8 24 23 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c001207d:	83 c4 10             	add    esp,0x10
c0012080:	90                   	nop
c0012081:	83 c4 1c             	add    esp,0x1c
c0012084:	c3                   	ret    
c0012085:	90                   	nop
c0012086:	66 90                	xchg   ax,ax

c0012088 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0012088:	b8 00 00 00 00       	mov    eax,0x0
c001208d:	c3                   	ret    
c001208e:	66 90                	xchg   ax,ax

c0012090 <ACPI::detectPCI()>:
c0012090:	53                   	push   ebx
c0012091:	83 ec 28             	sub    esp,0x28
c0012094:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012099:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c001209e:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c00120a3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00120a9:	83 e0 04             	and    eax,0x4
c00120ac:	84 c0                	test   al,al
c00120ae:	74 2c                	je     c00120dc <ACPI::detectPCI()+0x4c>
c00120b0:	a1 e8 6c 02 c0       	mov    eax,ds:0xc0026ce8
c00120b5:	83 ec 08             	sub    esp,0x8
c00120b8:	68 c2 3d 02 c0       	push   0xc0023dc2
c00120bd:	50                   	push   eax
c00120be:	e8 5d f8 ff ff       	call   c0011920 <findDataTable(unsigned char*, char*)>
c00120c3:	83 c4 10             	add    esp,0x10
c00120c6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00120ca:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00120cf:	74 0b                	je     c00120dc <ACPI::detectPCI()+0x4c>
c00120d1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00120d6:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c00120db:	90                   	nop
c00120dc:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c00120e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00120e8:	8a 00                	mov    al,BYTE PTR [eax]
c00120ea:	3c 01                	cmp    al,0x1
c00120ec:	75 0e                	jne    c00120fc <ACPI::detectPCI()+0x6c>
c00120ee:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00120f3:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c00120f8:	eb 2a                	jmp    c0012124 <ACPI::detectPCI()+0x94>
c00120fa:	66 90                	xchg   ax,ax
c00120fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012100:	8a 00                	mov    al,BYTE PTR [eax]
c0012102:	3c 02                	cmp    al,0x2
c0012104:	75 1e                	jne    c0012124 <ACPI::detectPCI()+0x94>
c0012106:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001210b:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0012110:	74 12                	je     c0012124 <ACPI::detectPCI()+0x94>
c0012112:	83 ec 0c             	sub    esp,0xc
c0012115:	68 54 3c 02 c0       	push   0xc0023c54
c001211a:	e8 82 22 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c001211f:	83 c4 10             	add    esp,0x10
c0012122:	66 90                	xchg   ax,ax
c0012124:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012128:	83 f0 01             	xor    eax,0x1
c001212b:	84 c0                	test   al,al
c001212d:	74 41                	je     c0012170 <ACPI::detectPCI()+0xe0>
c001212f:	e8 1c e0 fe ff       	call   c0000150 <manualPCIProbe>
c0012134:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012138:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001213d:	75 0d                	jne    c001214c <ACPI::detectPCI()+0xbc>
c001213f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0012144:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0012149:	eb 25                	jmp    c0012170 <ACPI::detectPCI()+0xe0>
c001214b:	90                   	nop
c001214c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0012151:	75 1d                	jne    c0012170 <ACPI::detectPCI()+0xe0>
c0012153:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0012158:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c001215d:	74 11                	je     c0012170 <ACPI::detectPCI()+0xe0>
c001215f:	83 ec 0c             	sub    esp,0xc
c0012162:	68 54 3c 02 c0       	push   0xc0023c54
c0012167:	e8 35 22 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c001216c:	83 c4 10             	add    esp,0x10
c001216f:	90                   	nop
c0012170:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012175:	0f 84 85 00 00 00    	je     c0012200 <ACPI::detectPCI()+0x170>
c001217b:	83 ec 0c             	sub    esp,0xc
c001217e:	68 c7 3d 02 c0       	push   0xc0023dc7
c0012183:	e8 95 78 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012188:	83 c4 10             	add    esp,0x10
c001218b:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c0012193:	83 ec 0c             	sub    esp,0xc
c0012196:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001219a:	e8 24 78 ff ff       	call   c00099c3 <malloc>
c001219f:	83 c4 10             	add    esp,0x10
c00121a2:	89 c3                	mov    ebx,eax
c00121a4:	83 ec 0c             	sub    esp,0xc
c00121a7:	53                   	push   ebx
c00121a8:	e8 dd a9 00 00       	call   c001cb8a <PCI::PCI()>
c00121ad:	83 c4 10             	add    esp,0x10
c00121b0:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00121b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121b8:	83 ec 08             	sub    esp,0x8
c00121bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121bf:	50                   	push   eax
c00121c0:	e8 61 bd ff ff       	call   c000df26 <Device::addChild(Device*)>
c00121c5:	83 c4 10             	add    esp,0x10
c00121c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00121ce:	83 c0 08             	add    eax,0x8
c00121d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00121d3:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c00121d8:	74 0a                	je     c00121e4 <ACPI::detectPCI()+0x154>
c00121da:	ba 01 00 00 00       	mov    edx,0x1
c00121df:	eb 0b                	jmp    c00121ec <ACPI::detectPCI()+0x15c>
c00121e1:	8d 76 00             	lea    esi,[esi+0x0]
c00121e4:	ba 02 00 00 00       	mov    edx,0x2
c00121e9:	8d 76 00             	lea    esi,[esi+0x0]
c00121ec:	6a 00                	push   0x0
c00121ee:	6a 00                	push   0x0
c00121f0:	52                   	push   edx
c00121f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00121f5:	ff d0                	call   eax
c00121f7:	83 c4 10             	add    esp,0x10
c00121fa:	e9 a1 00 00 00       	jmp    c00122a0 <ACPI::detectPCI()+0x210>
c00121ff:	90                   	nop
c0012200:	83 ec 0c             	sub    esp,0xc
c0012203:	68 df 3d 02 c0       	push   0xc0023ddf
c0012208:	e8 d2 a8 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001220d:	83 c4 10             	add    esp,0x10
c0012210:	83 ec 0c             	sub    esp,0xc
c0012213:	68 ea 3d 02 c0       	push   0xc0023dea
c0012218:	e8 00 78 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001221d:	83 c4 10             	add    esp,0x10
c0012220:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0012227:	83 ec 0c             	sub    esp,0xc
c001222a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001222e:	e8 90 77 ff ff       	call   c00099c3 <malloc>
c0012233:	83 c4 10             	add    esp,0x10
c0012236:	89 c3                	mov    ebx,eax
c0012238:	83 ec 0c             	sub    esp,0xc
c001223b:	53                   	push   ebx
c001223c:	e8 b3 b4 00 00       	call   c001d6f4 <IDE::IDE()>
c0012241:	83 c4 10             	add    esp,0x10
c0012244:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0012248:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001224c:	83 ec 08             	sub    esp,0x8
c001224f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012253:	50                   	push   eax
c0012254:	e8 cd bc ff ff       	call   c000df26 <Device::addChild(Device*)>
c0012259:	83 c4 10             	add    esp,0x10
c001225c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012260:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c001226a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001226e:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0012277:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001227b:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0012284:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012288:	8b 00                	mov    eax,DWORD PTR [eax]
c001228a:	83 c0 08             	add    eax,0x8
c001228d:	8b 00                	mov    eax,DWORD PTR [eax]
c001228f:	6a 00                	push   0x0
c0012291:	6a 00                	push   0x0
c0012293:	6a 00                	push   0x0
c0012295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012299:	ff d0                	call   eax
c001229b:	83 c4 10             	add    esp,0x10
c001229e:	66 90                	xchg   ax,ax
c00122a0:	90                   	nop
c00122a1:	83 c4 28             	add    esp,0x28
c00122a4:	5b                   	pop    ebx
c00122a5:	c3                   	ret    
c00122a6:	66 90                	xchg   ax,ax

c00122a8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00122a8:	83 ec 1c             	sub    esp,0x1c
c00122ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00122af:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00122b2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00122b6:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c00122bb:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00122c0:	83 ec 08             	sub    esp,0x8
c00122c3:	52                   	push   edx
c00122c4:	50                   	push   eax
c00122c5:	e8 ca 6c ff ff       	call   c0008f94 <Computer::readCMOS(unsigned char)>
c00122ca:	83 c4 10             	add    esp,0x10
c00122cd:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00122d1:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c00122d6:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00122db:	83 ec 04             	sub    esp,0x4
c00122de:	6a 01                	push   0x1
c00122e0:	52                   	push   edx
c00122e1:	50                   	push   eax
c00122e2:	e8 89 6e ff ff       	call   c0009170 <Computer::writeCMOS(unsigned char, unsigned char)>
c00122e7:	83 c4 10             	add    esp,0x10
c00122ea:	90                   	nop
c00122eb:	83 c4 1c             	add    esp,0x1c
c00122ee:	c3                   	ret    
c00122ef:	90                   	nop

c00122f0 <ACPI::sleep()>:
c00122f0:	83 ec 0c             	sub    esp,0xc
c00122f3:	a1 c0 6a 02 c0       	mov    eax,ds:0xc0026ac0
c00122f8:	85 c0                	test   eax,eax
c00122fa:	74 08                	je     c0012304 <ACPI::sleep()+0x14>
c00122fc:	a1 c0 6a 02 c0       	mov    eax,ds:0xc0026ac0
c0012301:	ff d0                	call   eax
c0012303:	90                   	nop
c0012304:	90                   	nop
c0012305:	83 c4 0c             	add    esp,0xc
c0012308:	c3                   	ret    
c0012309:	90                   	nop
c001230a:	66 90                	xchg   ax,ax

c001230c <ACPI::open(int, int, void*)>:
c001230c:	57                   	push   edi
c001230d:	56                   	push   esi
c001230e:	53                   	push   ebx
c001230f:	81 ec 70 01 00 00    	sub    esp,0x170
c0012315:	83 ec 0c             	sub    esp,0xc
c0012318:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001231f:	e8 6c fd ff ff       	call   c0012090 <ACPI::detectPCI()>
c0012324:	83 c4 10             	add    esp,0x10
c0012327:	83 ec 0c             	sub    esp,0xc
c001232a:	68 7c 3c 02 c0       	push   0xc0023c7c
c001232f:	e8 e9 76 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012334:	83 c4 10             	add    esp,0x10
c0012337:	83 ec 0c             	sub    esp,0xc
c001233a:	68 ff 3d 02 c0       	push   0xc0023dff
c001233f:	e8 d3 47 00 00       	call   c0016b17 <Thr::loadKernelSymbolTable(char const*)>
c0012344:	83 c4 10             	add    esp,0x10
c0012347:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c001234f:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c001235a:	83 ec 0c             	sub    esp,0xc
c001235d:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012364:	e8 5a 76 ff ff       	call   c00099c3 <malloc>
c0012369:	83 c4 10             	add    esp,0x10
c001236c:	89 c3                	mov    ebx,eax
c001236e:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c0012373:	83 ec 04             	sub    esp,0x4
c0012376:	50                   	push   eax
c0012377:	68 1d 3e 02 c0       	push   0xc0023e1d
c001237c:	53                   	push   ebx
c001237d:	e8 c8 ac ff ff       	call   c000d04a <File::File(char const*, Process*)>
c0012382:	83 c4 10             	add    esp,0x10
c0012385:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c001238c:	83 ec 08             	sub    esp,0x8
c001238f:	6a 01                	push   0x1
c0012391:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012398:	e8 11 ad ff ff       	call   c000d0ae <File::open(FileOpenMode)>
c001239d:	83 c4 10             	add    esp,0x10
c00123a0:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c00123a7:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c00123af:	75 17                	jne    c00123c8 <ACPI::open(int, int, void*)+0xbc>
c00123b1:	83 ec 0c             	sub    esp,0xc
c00123b4:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c00123bb:	e8 4c ad ff ff       	call   c000d10c <File::close()>
c00123c0:	83 c4 10             	add    esp,0x10
c00123c3:	eb 0b                	jmp    c00123d0 <ACPI::open(int, int, void*)+0xc4>
c00123c5:	8d 76 00             	lea    esi,[esi+0x0]
c00123c8:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c00123d0:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c00123d8:	74 1e                	je     c00123f8 <ACPI::open(int, int, void*)+0xec>
c00123da:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c00123e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00123e3:	83 c0 08             	add    eax,0x8
c00123e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00123e8:	83 ec 0c             	sub    esp,0xc
c00123eb:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c00123f2:	ff d0                	call   eax
c00123f4:	83 c4 10             	add    esp,0x10
c00123f7:	90                   	nop
c00123f8:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c00123ff:	83 f0 01             	xor    eax,0x1
c0012402:	84 c0                	test   al,al
c0012404:	74 42                	je     c0012448 <ACPI::open(int, int, void*)+0x13c>
c0012406:	83 ec 0c             	sub    esp,0xc
c0012409:	68 3b 3e 02 c0       	push   0xc0023e3b
c001240e:	e8 0a 76 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012413:	83 c4 10             	add    esp,0x10
c0012416:	83 ec 04             	sub    esp,0x4
c0012419:	6a 0c                	push   0xc
c001241b:	68 56 3e 02 c0       	push   0xc0023e56
c0012420:	68 67 3e 02 c0       	push   0xc0023e67
c0012425:	e8 57 2d 00 00       	call   c0015181 <Reg::readIntWithDefault(char*, char*, int)>
c001242a:	83 c4 10             	add    esp,0x10
c001242d:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c0012434:	83 ec 0c             	sub    esp,0xc
c0012437:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c001243e:	e8 d4 94 ff ff       	call   c000b917 <Virt::setupPageSwapping(int)>
c0012443:	83 c4 10             	add    esp,0x10
c0012446:	66 90                	xchg   ax,ax
c0012448:	83 ec 0c             	sub    esp,0xc
c001244b:	68 86 25 02 c0       	push   0xc0022586
c0012450:	e8 c8 75 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012455:	83 c4 10             	add    esp,0x10
c0012458:	8b 1d 88 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026488
c001245e:	83 ec 08             	sub    esp,0x8
c0012461:	6a 01                	push   0x1
c0012463:	68 6e 3e 02 c0       	push   0xc0023e6e
c0012468:	e8 21 51 00 00       	call   c001758e <Thr::loadDLL(char const*, bool)>
c001246d:	83 c4 10             	add    esp,0x10
c0012470:	83 ec 08             	sub    esp,0x8
c0012473:	53                   	push   ebx
c0012474:	50                   	push   eax
c0012475:	e8 45 53 00 00       	call   c00177bf <Thr::executeDLL(unsigned long, void*)>
c001247a:	83 c4 10             	add    esp,0x10
c001247d:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0012484:	83 ec 08             	sub    esp,0x8
c0012487:	6a 12                	push   0x12
c0012489:	50                   	push   eax
c001248a:	e8 1b be ff ff       	call   c000e2aa <getDevicesOfType(DeviceType)>
c001248f:	83 c4 0c             	add    esp,0xc
c0012492:	66 90                	xchg   ax,ax
c0012494:	83 ec 0c             	sub    esp,0xc
c0012497:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001249e:	50                   	push   eax
c001249f:	e8 dc f2 00 00       	call   c0021780 <LinkedList<Device>::isEmpty()>
c00124a4:	83 c4 10             	add    esp,0x10
c00124a7:	83 f0 01             	xor    eax,0x1
c00124aa:	84 c0                	test   al,al
c00124ac:	0f 84 46 01 00 00    	je     c00125f8 <ACPI::open(int, int, void*)+0x2ec>
c00124b2:	83 ec 0c             	sub    esp,0xc
c00124b5:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00124bc:	50                   	push   eax
c00124bd:	e8 da f2 00 00       	call   c002179c <LinkedList<Device>::getFirstElement()>
c00124c2:	83 c4 10             	add    esp,0x10
c00124c5:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c00124cc:	83 ec 0c             	sub    esp,0xc
c00124cf:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00124d6:	50                   	push   eax
c00124d7:	e8 c8 f2 00 00       	call   c00217a4 <LinkedList<Device>::removeFirst()>
c00124dc:	83 c4 10             	add    esp,0x10
c00124df:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c00124e6:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c00124ed:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c00124f4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00124f8:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c00124fe:	ba 09 00 00 00       	mov    edx,0x9
c0012503:	fc                   	cld    
c0012504:	89 c7                	mov    edi,eax
c0012506:	89 de                	mov    esi,ebx
c0012508:	89 d1                	mov    ecx,edx
c001250a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001250c:	83 ec 08             	sub    esp,0x8
c001250f:	8d 44 24 38          	lea    eax,[esp+0x38]
c0012513:	50                   	push   eax
c0012514:	83 ec 24             	sub    esp,0x24
c0012517:	89 e0                	mov    eax,esp
c0012519:	89 c3                	mov    ebx,eax
c001251b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001251f:	ba 09 00 00 00       	mov    edx,0x9
c0012524:	89 df                	mov    edi,ebx
c0012526:	89 c6                	mov    esi,eax
c0012528:	89 d1                	mov    ecx,edx
c001252a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001252c:	e8 37 ab 00 00       	call   c001d068 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0012531:	83 c4 30             	add    esp,0x30
c0012534:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c001253b:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c0012543:	0f 84 4b ff ff ff    	je     c0012494 <ACPI::open(int, int, void*)+0x188>
c0012549:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0012554:	83 ec 0c             	sub    esp,0xc
c0012557:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001255e:	e8 60 74 ff ff       	call   c00099c3 <malloc>
c0012563:	83 c4 10             	add    esp,0x10
c0012566:	89 c3                	mov    ebx,eax
c0012568:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c001256d:	83 ec 04             	sub    esp,0x4
c0012570:	50                   	push   eax
c0012571:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012578:	53                   	push   ebx
c0012579:	e8 cc aa ff ff       	call   c000d04a <File::File(char const*, Process*)>
c001257e:	83 c4 10             	add    esp,0x10
c0012581:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0012588:	83 ec 0c             	sub    esp,0xc
c001258b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012592:	e8 85 ad ff ff       	call   c000d31c <File::exists()>
c0012597:	83 c4 10             	add    esp,0x10
c001259a:	84 c0                	test   al,al
c001259c:	74 2a                	je     c00125c8 <ACPI::open(int, int, void*)+0x2bc>
c001259e:	83 ec 08             	sub    esp,0x8
c00125a1:	6a 01                	push   0x1
c00125a3:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c00125aa:	e8 df 4f 00 00       	call   c001758e <Thr::loadDLL(char const*, bool)>
c00125af:	83 c4 10             	add    esp,0x10
c00125b2:	83 ec 08             	sub    esp,0x8
c00125b5:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c00125bc:	50                   	push   eax
c00125bd:	e8 fd 51 00 00       	call   c00177bf <Thr::executeDLL(unsigned long, void*)>
c00125c2:	83 c4 10             	add    esp,0x10
c00125c5:	8d 76 00             	lea    esi,[esi+0x0]
c00125c8:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c00125d0:	0f 84 be fe ff ff    	je     c0012494 <ACPI::open(int, int, void*)+0x188>
c00125d6:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c00125dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00125df:	83 c0 08             	add    eax,0x8
c00125e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00125e4:	83 ec 0c             	sub    esp,0xc
c00125e7:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00125ee:	ff d0                	call   eax
c00125f0:	83 c4 10             	add    esp,0x10
c00125f3:	e9 9c fe ff ff       	jmp    c0012494 <ACPI::open(int, int, void*)+0x188>
c00125f8:	83 ec 0c             	sub    esp,0xc
c00125fb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012602:	50                   	push   eax
c0012603:	e8 74 f1 00 00       	call   c002177c <LinkedList<Device>::~LinkedList()>
c0012608:	83 c4 10             	add    esp,0x10
c001260b:	8b 1d 88 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026488
c0012611:	83 ec 08             	sub    esp,0x8
c0012614:	6a 01                	push   0x1
c0012616:	68 89 3e 02 c0       	push   0xc0023e89
c001261b:	e8 6e 4f 00 00       	call   c001758e <Thr::loadDLL(char const*, bool)>
c0012620:	83 c4 10             	add    esp,0x10
c0012623:	83 ec 08             	sub    esp,0x8
c0012626:	53                   	push   ebx
c0012627:	50                   	push   eax
c0012628:	e8 92 51 00 00       	call   c00177bf <Thr::executeDLL(unsigned long, void*)>
c001262d:	83 c4 10             	add    esp,0x10
c0012630:	8b 1d 88 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026488
c0012636:	83 ec 08             	sub    esp,0x8
c0012639:	6a 01                	push   0x1
c001263b:	68 a6 3e 02 c0       	push   0xc0023ea6
c0012640:	e8 49 4f 00 00       	call   c001758e <Thr::loadDLL(char const*, bool)>
c0012645:	83 c4 10             	add    esp,0x10
c0012648:	83 ec 08             	sub    esp,0x8
c001264b:	53                   	push   ebx
c001264c:	50                   	push   eax
c001264d:	e8 6d 51 00 00       	call   c00177bf <Thr::executeDLL(unsigned long, void*)>
c0012652:	83 c4 10             	add    esp,0x10
c0012655:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c001265a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012660:	83 e0 04             	and    eax,0x4
c0012663:	84 c0                	test   al,al
c0012665:	0f 84 15 01 00 00    	je     c0012780 <ACPI::open(int, int, void*)+0x474>
c001266b:	83 ec 0c             	sub    esp,0xc
c001266e:	68 c3 3e 02 c0       	push   0xc0023ec3
c0012673:	e8 a5 73 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012678:	83 c4 10             	add    esp,0x10
c001267b:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0012686:	83 ec 0c             	sub    esp,0xc
c0012689:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0012690:	e8 2e 73 ff ff       	call   c00099c3 <malloc>
c0012695:	83 c4 10             	add    esp,0x10
c0012698:	89 c3                	mov    ebx,eax
c001269a:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c001269f:	83 ec 04             	sub    esp,0x4
c00126a2:	50                   	push   eax
c00126a3:	68 e0 3e 02 c0       	push   0xc0023ee0
c00126a8:	53                   	push   ebx
c00126a9:	e8 9c a9 ff ff       	call   c000d04a <File::File(char const*, Process*)>
c00126ae:	83 c4 10             	add    esp,0x10
c00126b1:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c00126b8:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00126c0:	74 1a                	je     c00126dc <ACPI::open(int, int, void*)+0x3d0>
c00126c2:	83 ec 0c             	sub    esp,0xc
c00126c5:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00126cc:	e8 4b ac ff ff       	call   c000d31c <File::exists()>
c00126d1:	83 c4 10             	add    esp,0x10
c00126d4:	84 c0                	test   al,al
c00126d6:	74 04                	je     c00126dc <ACPI::open(int, int, void*)+0x3d0>
c00126d8:	b0 01                	mov    al,0x1
c00126da:	eb 04                	jmp    c00126e0 <ACPI::open(int, int, void*)+0x3d4>
c00126dc:	b0 00                	mov    al,0x0
c00126de:	66 90                	xchg   ax,ax
c00126e0:	84 c0                	test   al,al
c00126e2:	74 28                	je     c001270c <ACPI::open(int, int, void*)+0x400>
c00126e4:	83 ec 08             	sub    esp,0x8
c00126e7:	6a 01                	push   0x1
c00126e9:	68 e0 3e 02 c0       	push   0xc0023ee0
c00126ee:	e8 9b 4e 00 00       	call   c001758e <Thr::loadDLL(char const*, bool)>
c00126f3:	83 c4 10             	add    esp,0x10
c00126f6:	83 ec 08             	sub    esp,0x8
c00126f9:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0012700:	50                   	push   eax
c0012701:	e8 b9 50 00 00       	call   c00177bf <Thr::executeDLL(unsigned long, void*)>
c0012706:	83 c4 10             	add    esp,0x10
c0012709:	8d 76 00             	lea    esi,[esi+0x0]
c001270c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012714:	74 2a                	je     c0012740 <ACPI::open(int, int, void*)+0x434>
c0012716:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001271e:	74 20                	je     c0012740 <ACPI::open(int, int, void*)+0x434>
c0012720:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0012727:	8b 00                	mov    eax,DWORD PTR [eax]
c0012729:	83 c0 08             	add    eax,0x8
c001272c:	8b 00                	mov    eax,DWORD PTR [eax]
c001272e:	83 ec 0c             	sub    esp,0xc
c0012731:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012738:	ff d0                	call   eax
c001273a:	83 c4 10             	add    esp,0x10
c001273d:	8d 76 00             	lea    esi,[esi+0x0]
c0012740:	a1 e8 6c 02 c0       	mov    eax,ds:0xc0026ce8
c0012745:	83 ec 08             	sub    esp,0x8
c0012748:	68 fd 3e 02 c0       	push   0xc0023efd
c001274d:	50                   	push   eax
c001274e:	e8 cd f1 ff ff       	call   c0011920 <findDataTable(unsigned char*, char*)>
c0012753:	83 c4 10             	add    esp,0x10
c0012756:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c001275d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0012765:	74 19                	je     c0012780 <ACPI::open(int, int, void*)+0x474>
c0012767:	83 ec 08             	sub    esp,0x8
c001276a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012771:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0012778:	e8 2b fb ff ff       	call   c00122a8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001277d:	83 c4 10             	add    esp,0x10
c0012780:	b8 00 00 00 00       	mov    eax,0x0
c0012785:	81 c4 70 01 00 00    	add    esp,0x170
c001278b:	5b                   	pop    ebx
c001278c:	5e                   	pop    esi
c001278d:	5f                   	pop    edi
c001278e:	c3                   	ret    
c001278f:	90                   	nop

c0012790 <CPU::close(int, int, void*)>:
c0012790:	31 c0                	xor    eax,eax
c0012792:	c3                   	ret    
c0012793:	90                   	nop

c0012794 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0012794:	55                   	push   ebp
c0012795:	57                   	push   edi
c0012796:	56                   	push   esi
c0012797:	53                   	push   ebx
c0012798:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001279c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00127a0:	89 ce                	mov    esi,ecx
c00127a2:	89 d5                	mov    ebp,edx
c00127a4:	80 f9 04             	cmp    cl,0x4
c00127a7:	75 28                	jne    c00127d1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00127a9:	8d 42 f9             	lea    eax,[edx-0x7]
c00127ac:	3c 03                	cmp    al,0x3
c00127ae:	0f 86 63 01 00 00    	jbe    c0012917 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00127b4:	80 fa 03             	cmp    dl,0x3
c00127b7:	0f 84 5a 01 00 00    	je     c0012917 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00127bd:	8d 7a f2             	lea    edi,[edx-0xe]
c00127c0:	b8 50 5d 02 c0       	mov    eax,0xc0025d50
c00127c5:	89 fb                	mov    ebx,edi
c00127c7:	80 fb 01             	cmp    bl,0x1
c00127ca:	77 4e                	ja     c001281a <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00127cc:	e9 52 01 00 00       	jmp    c0012923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127d1:	80 f9 05             	cmp    cl,0x5
c00127d4:	75 4d                	jne    c0012823 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00127d6:	b8 60 5d 02 c0       	mov    eax,0xc0025d60
c00127db:	80 fa 03             	cmp    dl,0x3
c00127de:	0f 86 3f 01 00 00    	jbe    c0012923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127e4:	8d 7a fa             	lea    edi,[edx-0x6]
c00127e7:	b8 70 5d 02 c0       	mov    eax,0xc0025d70
c00127ec:	89 fb                	mov    ebx,edi
c00127ee:	80 fb 01             	cmp    bl,0x1
c00127f1:	0f 86 2c 01 00 00    	jbe    c0012923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127f7:	b8 80 5d 02 c0       	mov    eax,0xc0025d80
c00127fc:	80 fa 08             	cmp    dl,0x8
c00127ff:	0f 84 1e 01 00 00    	je     c0012923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012805:	89 d7                	mov    edi,edx
c0012807:	b8 90 5d 02 c0       	mov    eax,0xc0025d90
c001280c:	83 e7 fb             	and    edi,0xfffffffb
c001280f:	89 fb                	mov    ebx,edi
c0012811:	80 fb 09             	cmp    bl,0x9
c0012814:	0f 84 09 01 00 00    	je     c0012923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001281a:	31 c0                	xor    eax,eax
c001281c:	89 eb                	mov    ebx,ebp
c001281e:	0f b6 fb             	movzx  edi,bl
c0012821:	eb 30                	jmp    c0012853 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0012823:	31 c0                	xor    eax,eax
c0012825:	80 f9 06             	cmp    cl,0x6
c0012828:	75 f2                	jne    c001281c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001282a:	80 fa 0a             	cmp    dl,0xa
c001282d:	77 ed                	ja     c001281c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001282f:	bf de 05 00 00       	mov    edi,0x5de
c0012834:	0f a3 d7             	bt     edi,edx
c0012837:	73 e3                	jae    c001281c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012839:	b8 a0 5d 02 c0       	mov    eax,0xc0025da0
c001283e:	e9 e0 00 00 00       	jmp    c0012923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012843:	39 c7                	cmp    edi,eax
c0012845:	0f 84 d3 00 00 00    	je     c001291e <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001284b:	40                   	inc    eax
c001284c:	3d d0 00 00 00       	cmp    eax,0xd0
c0012851:	74 09                	je     c001285c <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0012853:	89 f3                	mov    ebx,esi
c0012855:	80 fb 0f             	cmp    bl,0xf
c0012858:	75 f1                	jne    c001284b <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c001285a:	eb e7                	jmp    c0012843 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c001285c:	80 f9 10             	cmp    cl,0x10
c001285f:	75 14                	jne    c0012875 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0012861:	8d 42 fc             	lea    eax,[edx-0x4]
c0012864:	83 e0 fb             	and    eax,0xfffffffb
c0012867:	3c 02                	cmp    al,0x2
c0012869:	76 34                	jbe    c001289f <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c001286b:	b8 85 40 02 c0       	mov    eax,0xc0024085
c0012870:	80 fa 02             	cmp    dl,0x2
c0012873:	eb 24                	jmp    c0012899 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0012875:	80 f9 11             	cmp    cl,0x11
c0012878:	75 13                	jne    c001288d <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001287a:	b8 85 40 02 c0       	mov    eax,0xc0024085
c001287f:	80 fa 03             	cmp    dl,0x3
c0012882:	0f 85 9b 00 00 00    	jne    c0012923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012888:	e9 91 00 00 00       	jmp    c001291e <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001288d:	80 f9 12             	cmp    cl,0x12
c0012890:	75 14                	jne    c00128a6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0012892:	b8 85 40 02 c0       	mov    eax,0xc0024085
c0012897:	fe ca                	dec    dl
c0012899:	0f 85 84 00 00 00    	jne    c0012923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001289f:	b8 c0 5d 02 c0       	mov    eax,0xc0025dc0
c00128a4:	eb 7d                	jmp    c0012923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128a6:	80 f9 14             	cmp    cl,0x14
c00128a9:	75 12                	jne    c00128bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00128ab:	4a                   	dec    edx
c00128ac:	b8 85 40 02 c0       	mov    eax,0xc0024085
c00128b1:	80 fa 01             	cmp    dl,0x1
c00128b4:	77 6d                	ja     c0012923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128b6:	b8 d0 5d 02 c0       	mov    eax,0xc0025dd0
c00128bb:	eb 66                	jmp    c0012923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128bd:	80 f9 15             	cmp    cl,0x15
c00128c0:	75 31                	jne    c00128f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00128c2:	b8 e0 5d 02 c0       	mov    eax,0xc0025de0
c00128c7:	80 fa 01             	cmp    dl,0x1
c00128ca:	74 57                	je     c0012923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128cc:	b8 85 40 02 c0       	mov    eax,0xc0024085
c00128d1:	80 fa 13             	cmp    dl,0x13
c00128d4:	76 0c                	jbe    c00128e2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00128d6:	80 fa 30             	cmp    dl,0x30
c00128d9:	75 48                	jne    c0012923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128db:	b8 00 5e 02 c0       	mov    eax,0xc0025e00
c00128e0:	eb 41                	jmp    c0012923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128e2:	b9 04 00 09 00       	mov    ecx,0x90004
c00128e7:	0f a3 d1             	bt     ecx,edx
c00128ea:	73 37                	jae    c0012923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128ec:	b8 f0 5d 02 c0       	mov    eax,0xc0025df0
c00128f1:	eb 30                	jmp    c0012923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128f3:	b8 85 40 02 c0       	mov    eax,0xc0024085
c00128f8:	80 f9 16             	cmp    cl,0x16
c00128fb:	75 26                	jne    c0012923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128fd:	b8 10 5e 02 c0       	mov    eax,0xc0025e10
c0012902:	84 d2                	test   dl,dl
c0012904:	74 1d                	je     c0012923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012906:	b8 85 40 02 c0       	mov    eax,0xc0024085
c001290b:	80 fa 30             	cmp    dl,0x30
c001290e:	75 13                	jne    c0012923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012910:	b8 20 5e 02 c0       	mov    eax,0xc0025e20
c0012915:	eb 0c                	jmp    c0012923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012917:	b8 40 5d 02 c0       	mov    eax,0xc0025d40
c001291c:	eb 05                	jmp    c0012923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001291e:	b8 b0 5d 02 c0       	mov    eax,0xc0025db0
c0012923:	5b                   	pop    ebx
c0012924:	5e                   	pop    esi
c0012925:	5f                   	pop    edi
c0012926:	5d                   	pop    ebp
c0012927:	c3                   	ret    

c0012928 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0012928:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001292c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012930:	80 f9 04             	cmp    cl,0x4
c0012933:	75 6b                	jne    c00129a0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0012935:	b8 a0 5b 02 c0       	mov    eax,0xc0025ba0
c001293a:	80 fa 01             	cmp    dl,0x1
c001293d:	0f 86 92 02 00 00    	jbe    c0012bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012943:	b8 b0 5b 02 c0       	mov    eax,0xc0025bb0
c0012948:	80 fa 02             	cmp    dl,0x2
c001294b:	0f 84 84 02 00 00    	je     c0012bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012951:	b8 c0 5b 02 c0       	mov    eax,0xc0025bc0
c0012956:	80 fa 03             	cmp    dl,0x3
c0012959:	0f 84 76 02 00 00    	je     c0012bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001295f:	b8 d0 5b 02 c0       	mov    eax,0xc0025bd0
c0012964:	80 fa 04             	cmp    dl,0x4
c0012967:	0f 84 68 02 00 00    	je     c0012bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001296d:	b8 e0 5b 02 c0       	mov    eax,0xc0025be0
c0012972:	80 fa 05             	cmp    dl,0x5
c0012975:	0f 84 5a 02 00 00    	je     c0012bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001297b:	b8 c0 5b 02 c0       	mov    eax,0xc0025bc0
c0012980:	80 fa 07             	cmp    dl,0x7
c0012983:	0f 84 4c 02 00 00    	je     c0012bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012989:	83 ea 08             	sub    edx,0x8
c001298c:	b8 85 40 02 c0       	mov    eax,0xc0024085
c0012991:	80 fa 01             	cmp    dl,0x1
c0012994:	0f 87 3b 02 00 00    	ja     c0012bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001299a:	b8 f0 5b 02 c0       	mov    eax,0xc0025bf0
c001299f:	c3                   	ret    
c00129a0:	80 f9 05             	cmp    cl,0x5
c00129a3:	75 45                	jne    c00129ea <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00129a5:	8d 4a ff             	lea    ecx,[edx-0x1]
c00129a8:	b8 00 5c 02 c0       	mov    eax,0xc0025c00
c00129ad:	80 f9 02             	cmp    cl,0x2
c00129b0:	0f 86 1f 02 00 00    	jbe    c0012bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129b6:	80 fa 04             	cmp    dl,0x4
c00129b9:	0f 84 f3 01 00 00    	je     c0012bb2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00129bf:	80 fa 07             	cmp    dl,0x7
c00129c2:	0f 84 0d 02 00 00    	je     c0012bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129c8:	b8 10 5c 02 c0       	mov    eax,0xc0025c10
c00129cd:	80 fa 08             	cmp    dl,0x8
c00129d0:	0f 84 ff 01 00 00    	je     c0012bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129d6:	b8 85 40 02 c0       	mov    eax,0xc0024085
c00129db:	80 fa 09             	cmp    dl,0x9
c00129de:	0f 85 f1 01 00 00    	jne    c0012bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129e4:	b8 20 5c 02 c0       	mov    eax,0xc0025c20
c00129e9:	c3                   	ret    
c00129ea:	80 f9 06             	cmp    cl,0x6
c00129ed:	0f 85 85 01 00 00    	jne    c0012b78 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00129f3:	b8 30 5c 02 c0       	mov    eax,0xc0025c30
c00129f8:	80 fa 01             	cmp    dl,0x1
c00129fb:	0f 84 d4 01 00 00    	je     c0012bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a01:	8d 42 fb             	lea    eax,[edx-0x5]
c0012a04:	3c 01                	cmp    al,0x1
c0012a06:	0f 86 ac 01 00 00    	jbe    c0012bb8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0012a0c:	80 fa 03             	cmp    dl,0x3
c0012a0f:	0f 84 a3 01 00 00    	je     c0012bb8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0012a15:	8d 4a f9             	lea    ecx,[edx-0x7]
c0012a18:	b8 50 5c 02 c0       	mov    eax,0xc0025c50
c0012a1d:	80 f9 01             	cmp    cl,0x1
c0012a20:	0f 86 af 01 00 00    	jbe    c0012bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a26:	80 fa 09             	cmp    dl,0x9
c0012a29:	0f 84 8f 01 00 00    	je     c0012bbe <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0012a2f:	8d 4a f6             	lea    ecx,[edx-0xa]
c0012a32:	80 f9 01             	cmp    cl,0x1
c0012a35:	0f 86 9a 01 00 00    	jbe    c0012bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a3b:	b8 60 5c 02 c0       	mov    eax,0xc0025c60
c0012a40:	80 fa 0d             	cmp    dl,0xd
c0012a43:	0f 84 8c 01 00 00    	je     c0012bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a49:	b8 70 5c 02 c0       	mov    eax,0xc0025c70
c0012a4e:	80 fa 0e             	cmp    dl,0xe
c0012a51:	0f 84 7e 01 00 00    	je     c0012bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a57:	b8 80 5c 02 c0       	mov    eax,0xc0025c80
c0012a5c:	80 fa 0f             	cmp    dl,0xf
c0012a5f:	0f 84 70 01 00 00    	je     c0012bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a65:	b8 60 5c 02 c0       	mov    eax,0xc0025c60
c0012a6a:	80 fa 15             	cmp    dl,0x15
c0012a6d:	0f 84 62 01 00 00    	je     c0012bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a73:	8d 4a ea             	lea    ecx,[edx-0x16]
c0012a76:	b8 80 5c 02 c0       	mov    eax,0xc0025c80
c0012a7b:	80 f9 01             	cmp    cl,0x1
c0012a7e:	0f 86 51 01 00 00    	jbe    c0012bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a84:	80 fa 1a             	cmp    dl,0x1a
c0012a87:	0f 84 37 01 00 00    	je     c0012bc4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0012a8d:	80 fa 1c             	cmp    dl,0x1c
c0012a90:	0f 84 34 01 00 00    	je     c0012bca <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0012a96:	80 fa 1d             	cmp    dl,0x1d
c0012a99:	0f 84 36 01 00 00    	je     c0012bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a9f:	b8 b0 5c 02 c0       	mov    eax,0xc0025cb0
c0012aa4:	80 fa 25             	cmp    dl,0x25
c0012aa7:	0f 84 28 01 00 00    	je     c0012bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012aad:	8d 4a da             	lea    ecx,[edx-0x26]
c0012ab0:	b8 a0 5c 02 c0       	mov    eax,0xc0025ca0
c0012ab5:	80 f9 01             	cmp    cl,0x1
c0012ab8:	0f 86 17 01 00 00    	jbe    c0012bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012abe:	b8 c0 5c 02 c0       	mov    eax,0xc0025cc0
c0012ac3:	80 fa 2a             	cmp    dl,0x2a
c0012ac6:	0f 84 09 01 00 00    	je     c0012bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012acc:	b8 b0 5c 02 c0       	mov    eax,0xc0025cb0
c0012ad1:	80 fa 2c             	cmp    dl,0x2c
c0012ad4:	0f 84 fb 00 00 00    	je     c0012bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ada:	b8 c0 5c 02 c0       	mov    eax,0xc0025cc0
c0012adf:	80 fa 2d             	cmp    dl,0x2d
c0012ae2:	0f 84 ed 00 00 00    	je     c0012bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ae8:	b8 90 5c 02 c0       	mov    eax,0xc0025c90
c0012aed:	80 fa 2e             	cmp    dl,0x2e
c0012af0:	0f 84 df 00 00 00    	je     c0012bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012af6:	b8 b0 5c 02 c0       	mov    eax,0xc0025cb0
c0012afb:	80 fa 2f             	cmp    dl,0x2f
c0012afe:	0f 84 d1 00 00 00    	je     c0012bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b04:	8d 4a cb             	lea    ecx,[edx-0x35]
c0012b07:	b8 a0 5c 02 c0       	mov    eax,0xc0025ca0
c0012b0c:	80 f9 01             	cmp    cl,0x1
c0012b0f:	0f 86 c0 00 00 00    	jbe    c0012bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b15:	b8 d0 5c 02 c0       	mov    eax,0xc0025cd0
c0012b1a:	80 fa 37             	cmp    dl,0x37
c0012b1d:	0f 84 b2 00 00 00    	je     c0012bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b23:	b8 e0 5c 02 c0       	mov    eax,0xc0025ce0
c0012b28:	80 fa 3a             	cmp    dl,0x3a
c0012b2b:	0f 84 a4 00 00 00    	je     c0012bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b31:	b8 f0 5c 02 c0       	mov    eax,0xc0025cf0
c0012b36:	80 fa 3c             	cmp    dl,0x3c
c0012b39:	0f 84 96 00 00 00    	je     c0012bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b3f:	b8 00 5d 02 c0       	mov    eax,0xc0025d00
c0012b44:	80 fa 3d             	cmp    dl,0x3d
c0012b47:	0f 84 88 00 00 00    	je     c0012bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b4d:	b8 e0 5c 02 c0       	mov    eax,0xc0025ce0
c0012b52:	80 fa 3e             	cmp    dl,0x3e
c0012b55:	74 7e                	je     c0012bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b57:	8d 42 bb             	lea    eax,[edx-0x45]
c0012b5a:	3c 01                	cmp    al,0x1
c0012b5c:	76 72                	jbe    c0012bd0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0012b5e:	80 fa 3f             	cmp    dl,0x3f
c0012b61:	74 6d                	je     c0012bd0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0012b63:	80 fa 4a             	cmp    dl,0x4a
c0012b66:	74 0a                	je     c0012b72 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0012b68:	b8 85 40 02 c0       	mov    eax,0xc0024085
c0012b6d:	80 fa 4d             	cmp    dl,0x4d
c0012b70:	75 63                	jne    c0012bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b72:	b8 d0 5c 02 c0       	mov    eax,0xc0025cd0
c0012b77:	c3                   	ret    
c0012b78:	b8 85 40 02 c0       	mov    eax,0xc0024085
c0012b7d:	80 f9 0b             	cmp    cl,0xb
c0012b80:	75 0a                	jne    c0012b8c <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0012b82:	fe ca                	dec    dl
c0012b84:	75 4f                	jne    c0012bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b86:	b8 10 5d 02 c0       	mov    eax,0xc0025d10
c0012b8b:	c3                   	ret    
c0012b8c:	80 f9 0f             	cmp    cl,0xf
c0012b8f:	75 44                	jne    c0012bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b91:	b8 20 5d 02 c0       	mov    eax,0xc0025d20
c0012b96:	80 fa 02             	cmp    dl,0x2
c0012b99:	76 3a                	jbe    c0012bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b9b:	8d 42 fd             	lea    eax,[edx-0x3]
c0012b9e:	3c 01                	cmp    al,0x1
c0012ba0:	76 0a                	jbe    c0012bac <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0012ba2:	b8 85 40 02 c0       	mov    eax,0xc0024085
c0012ba7:	80 fa 06             	cmp    dl,0x6
c0012baa:	75 29                	jne    c0012bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012bac:	b8 30 5d 02 c0       	mov    eax,0xc0025d30
c0012bb1:	c3                   	ret    
c0012bb2:	b8 10 5c 02 c0       	mov    eax,0xc0025c10
c0012bb7:	c3                   	ret    
c0012bb8:	b8 40 5c 02 c0       	mov    eax,0xc0025c40
c0012bbd:	c3                   	ret    
c0012bbe:	b8 60 5c 02 c0       	mov    eax,0xc0025c60
c0012bc3:	c3                   	ret    
c0012bc4:	b8 90 5c 02 c0       	mov    eax,0xc0025c90
c0012bc9:	c3                   	ret    
c0012bca:	b8 a0 5c 02 c0       	mov    eax,0xc0025ca0
c0012bcf:	c3                   	ret    
c0012bd0:	b8 f0 5c 02 c0       	mov    eax,0xc0025cf0
c0012bd5:	c3                   	ret    

c0012bd6 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0012bd6:	60                   	pusha  
c0012bd7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012bdb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012bdf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012be3:	9c                   	pushf  
c0012be4:	fa                   	cli    
c0012be5:	0f 09                	wbinvd 
c0012be7:	0f 30                	wrmsr  
c0012be9:	9d                   	popf   
c0012bea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012bee:	89 02                	mov    DWORD PTR [edx],eax
c0012bf0:	61                   	popa   
c0012bf1:	c3                   	ret    

c0012bf2 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0012bf2:	60                   	pusha  
c0012bf3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012bf7:	9c                   	pushf  
c0012bf8:	fa                   	cli    
c0012bf9:	0f 09                	wbinvd 
c0012bfb:	31 c0                	xor    eax,eax
c0012bfd:	31 d2                	xor    edx,edx
c0012bff:	0f 32                	rdmsr  
c0012c01:	9d                   	popf   
c0012c02:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c06:	89 02                	mov    DWORD PTR [edx],eax
c0012c08:	61                   	popa   
c0012c09:	c3                   	ret    

c0012c0a <CPU::AMD_K6_writeback(int, int, int)>:
c0012c0a:	56                   	push   esi
c0012c0b:	53                   	push   ebx
c0012c0c:	83 ec 10             	sub    esp,0x10
c0012c0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012c13:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0012c18:	75 5d                	jne    c0012c77 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012c1a:	83 f8 08             	cmp    eax,0x8
c0012c1d:	75 09                	jne    c0012c28 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0012c1f:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0012c24:	7e 13                	jle    c0012c39 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0012c26:	eb 30                	jmp    c0012c58 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0012c28:	83 f8 06             	cmp    eax,0x6
c0012c2b:	7c 4a                	jl     c0012c77 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012c2d:	83 f8 07             	cmp    eax,0x7
c0012c30:	7e 07                	jle    c0012c39 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0012c32:	83 f8 09             	cmp    eax,0x9
c0012c35:	74 21                	je     c0012c58 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0012c37:	eb 3e                	jmp    c0012c77 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012c39:	89 e6                	mov    esi,esp
c0012c3b:	8b 1d ac 64 02 c0    	mov    ebx,DWORD PTR ds:0xc00264ac
c0012c41:	56                   	push   esi
c0012c42:	c1 eb 15             	shr    ebx,0x15
c0012c45:	68 82 00 00 c0       	push   0xc0000082
c0012c4a:	83 e3 7e             	and    ebx,0x7e
c0012c4d:	e8 a0 ff ff ff       	call   c0012bf2 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0012c52:	56                   	push   esi
c0012c53:	6a 00                	push   0x0
c0012c55:	53                   	push   ebx
c0012c56:	eb 12                	jmp    c0012c6a <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0012c58:	89 e3                	mov    ebx,esp
c0012c5a:	53                   	push   ebx
c0012c5b:	68 82 00 00 c0       	push   0xc0000082
c0012c60:	e8 8d ff ff ff       	call   c0012bf2 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0012c65:	53                   	push   ebx
c0012c66:	6a 00                	push   0x0
c0012c68:	6a 00                	push   0x0
c0012c6a:	68 82 00 00 c0       	push   0xc0000082
c0012c6f:	e8 62 ff ff ff       	call   c0012bd6 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0012c74:	83 c4 18             	add    esp,0x18
c0012c77:	83 c4 10             	add    esp,0x10
c0012c7a:	5b                   	pop    ebx
c0012c7b:	5e                   	pop    esi
c0012c7c:	c3                   	ret    
c0012c7d:	90                   	nop

c0012c7e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0012c7e:	55                   	push   ebp
c0012c7f:	57                   	push   edi
c0012c80:	56                   	push   esi
c0012c81:	53                   	push   ebx
c0012c82:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012c86:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012c8a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0012c8e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0012c92:	39 05 40 5e 02 c0    	cmp    DWORD PTR ds:0xc0025e40,eax
c0012c98:	75 23                	jne    c0012cbd <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0012c9a:	a1 4c 6f 02 c0       	mov    eax,ds:0xc0026f4c
c0012c9f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012ca3:	89 06                	mov    DWORD PTR [esi],eax
c0012ca5:	a1 48 6f 02 c0       	mov    eax,ds:0xc0026f48
c0012caa:	89 07                	mov    DWORD PTR [edi],eax
c0012cac:	a1 44 6f 02 c0       	mov    eax,ds:0xc0026f44
c0012cb1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0012cb4:	a1 40 6f 02 c0       	mov    eax,ds:0xc0026f40
c0012cb9:	89 02                	mov    DWORD PTR [edx],eax
c0012cbb:	eb 3f                	jmp    c0012cfc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0012cbd:	31 c9                	xor    ecx,ecx
c0012cbf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012cc3:	0f a2                	cpuid  
c0012cc5:	89 06                	mov    DWORD PTR [esi],eax
c0012cc7:	89 1f                	mov    DWORD PTR [edi],ebx
c0012cc9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012ccd:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0012cd0:	89 10                	mov    DWORD PTR [eax],edx
c0012cd2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012cd6:	a3 40 5e 02 c0       	mov    ds:0xc0025e40,eax
c0012cdb:	8b 06                	mov    eax,DWORD PTR [esi]
c0012cdd:	a3 4c 6f 02 c0       	mov    ds:0xc0026f4c,eax
c0012ce2:	8b 07                	mov    eax,DWORD PTR [edi]
c0012ce4:	a3 48 6f 02 c0       	mov    ds:0xc0026f48,eax
c0012ce9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012cec:	a3 44 6f 02 c0       	mov    ds:0xc0026f44,eax
c0012cf1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012cf5:	8b 00                	mov    eax,DWORD PTR [eax]
c0012cf7:	a3 40 6f 02 c0       	mov    ds:0xc0026f40,eax
c0012cfc:	5b                   	pop    ebx
c0012cfd:	5e                   	pop    esi
c0012cfe:	5f                   	pop    edi
c0012cff:	5d                   	pop    ebp
c0012d00:	c3                   	ret    
c0012d01:	90                   	nop

c0012d02 <CPU::cpuidCheckEDX(unsigned int)>:
c0012d02:	83 ec 10             	sub    esp,0x10
c0012d05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d09:	50                   	push   eax
c0012d0a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d0e:	50                   	push   eax
c0012d0f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d13:	50                   	push   eax
c0012d14:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d18:	50                   	push   eax
c0012d19:	6a 01                	push   0x1
c0012d1b:	e8 5e ff ff ff       	call   c0012c7e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012d20:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012d24:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0012d28:	0f 95 c0             	setne  al
c0012d2b:	83 c4 24             	add    esp,0x24
c0012d2e:	c3                   	ret    
c0012d2f:	90                   	nop

c0012d30 <CPU::cpuidCheckECX(unsigned int)>:
c0012d30:	83 ec 10             	sub    esp,0x10
c0012d33:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d37:	50                   	push   eax
c0012d38:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d3c:	50                   	push   eax
c0012d3d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d41:	50                   	push   eax
c0012d42:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d46:	50                   	push   eax
c0012d47:	6a 01                	push   0x1
c0012d49:	e8 30 ff ff ff       	call   c0012c7e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012d4e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012d52:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0012d56:	0f 95 c0             	setne  al
c0012d59:	83 c4 24             	add    esp,0x24
c0012d5c:	c3                   	ret    
c0012d5d:	90                   	nop

c0012d5e <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0012d5e:	83 ec 10             	sub    esp,0x10
c0012d61:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d65:	50                   	push   eax
c0012d66:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d6a:	50                   	push   eax
c0012d6b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d6f:	50                   	push   eax
c0012d70:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d74:	50                   	push   eax
c0012d75:	6a 07                	push   0x7
c0012d77:	e8 02 ff ff ff       	call   c0012c7e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012d7c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012d80:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0012d84:	0f 95 c0             	setne  al
c0012d87:	83 c4 24             	add    esp,0x24
c0012d8a:	c3                   	ret    
c0012d8b:	90                   	nop

c0012d8c <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0012d8c:	83 ec 10             	sub    esp,0x10
c0012d8f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d93:	50                   	push   eax
c0012d94:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d98:	50                   	push   eax
c0012d99:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d9d:	50                   	push   eax
c0012d9e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012da2:	50                   	push   eax
c0012da3:	6a 07                	push   0x7
c0012da5:	e8 d4 fe ff ff       	call   c0012c7e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012daa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012dae:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0012db2:	0f 95 c0             	setne  al
c0012db5:	83 c4 24             	add    esp,0x24
c0012db8:	c3                   	ret    
c0012db9:	90                   	nop

c0012dba <CPU::CPU()>:
c0012dba:	83 ec 0c             	sub    esp,0xc
c0012dbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dc1:	83 ec 08             	sub    esp,0x8
c0012dc4:	68 85 40 02 c0       	push   0xc0024085
c0012dc9:	50                   	push   eax
c0012dca:	e8 5b b3 ff ff       	call   c000e12a <Device::Device(char const*)>
c0012dcf:	83 c4 10             	add    esp,0x10
c0012dd2:	ba a8 42 02 c0       	mov    edx,0xc00242a8
c0012dd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ddb:	89 10                	mov    DWORD PTR [eax],edx
c0012ddd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012de1:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0012deb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012def:	05 78 01 00 00       	add    eax,0x178
c0012df4:	83 ec 0c             	sub    esp,0xc
c0012df7:	50                   	push   eax
c0012df8:	e8 5d 64 ff ff       	call   c000925a <GDT::GDT()>
c0012dfd:	83 c4 10             	add    esp,0x10
c0012e00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e04:	05 7c 09 00 00       	add    eax,0x97c
c0012e09:	83 ec 0c             	sub    esp,0xc
c0012e0c:	50                   	push   eax
c0012e0d:	e8 9e 66 ff ff       	call   c00094b0 <IDT::IDT()>
c0012e12:	83 c4 10             	add    esp,0x10
c0012e15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e19:	05 7c 11 00 00       	add    eax,0x117c
c0012e1e:	83 ec 0c             	sub    esp,0xc
c0012e21:	50                   	push   eax
c0012e22:	e8 29 82 ff ff       	call   c000b050 <TSS::TSS()>
c0012e27:	83 c4 10             	add    esp,0x10
c0012e2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e2e:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0012e35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e39:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0012e43:	90                   	nop
c0012e44:	83 c4 0c             	add    esp,0xc
c0012e47:	c3                   	ret    

c0012e48 <CPU::displayFeatures()>:
c0012e48:	c3                   	ret    
c0012e49:	90                   	nop

c0012e4a <CPU::detectFeatures()>:
c0012e4a:	55                   	push   ebp
c0012e4b:	57                   	push   edi
c0012e4c:	56                   	push   esi
c0012e4d:	53                   	push   ebx
c0012e4e:	83 ec 50             	sub    esp,0x50
c0012e51:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0012e55:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0012e5f:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0012e66:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0012e6c:	6a 0d                	push   0xd
c0012e6e:	6a 00                	push   0x0
c0012e70:	55                   	push   ebp
c0012e71:	e8 0e d8 fe ff       	call   c0000684 <memset>
c0012e76:	83 c4 10             	add    esp,0x10
c0012e79:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c0012e7e:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0012e85:	0f 84 22 09 00 00    	je     c00137ad <CPU::detectFeatures()+0x963>
c0012e8b:	83 ec 0c             	sub    esp,0xc
c0012e8e:	89 ef                	mov    edi,ebp
c0012e90:	6a 10                	push   0x10
c0012e92:	e8 6b fe ff ff       	call   c0012d02 <CPU::cpuidCheckEDX(unsigned int)>
c0012e97:	83 e0 01             	and    eax,0x1
c0012e9a:	8d 14 00             	lea    edx,[eax+eax*1]
c0012e9d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012ea3:	83 e0 fd             	and    eax,0xfffffffd
c0012ea6:	09 d0                	or     eax,edx
c0012ea8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012eae:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0012eb5:	e8 48 fe ff ff       	call   c0012d02 <CPU::cpuidCheckEDX(unsigned int)>
c0012eba:	83 e0 01             	and    eax,0x1
c0012ebd:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0012ec4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012eca:	83 e0 fb             	and    eax,0xfffffffb
c0012ecd:	09 d0                	or     eax,edx
c0012ecf:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012ed5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012edc:	e8 21 fe ff ff       	call   c0012d02 <CPU::cpuidCheckEDX(unsigned int)>
c0012ee1:	83 e0 01             	and    eax,0x1
c0012ee4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0012eeb:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012ef1:	83 e0 f7             	and    eax,0xfffffff7
c0012ef4:	09 d0                	or     eax,edx
c0012ef6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012efc:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0012f03:	e8 fa fd ff ff       	call   c0012d02 <CPU::cpuidCheckEDX(unsigned int)>
c0012f08:	83 e0 01             	and    eax,0x1
c0012f0b:	c1 e0 04             	shl    eax,0x4
c0012f0e:	88 c2                	mov    dl,al
c0012f10:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012f16:	83 e0 ef             	and    eax,0xffffffef
c0012f19:	09 d0                	or     eax,edx
c0012f1b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012f21:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0012f28:	e8 d5 fd ff ff       	call   c0012d02 <CPU::cpuidCheckEDX(unsigned int)>
c0012f2d:	83 e0 01             	and    eax,0x1
c0012f30:	c1 e0 05             	shl    eax,0x5
c0012f33:	88 c2                	mov    dl,al
c0012f35:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012f3b:	83 e0 df             	and    eax,0xffffffdf
c0012f3e:	09 d0                	or     eax,edx
c0012f40:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012f46:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0012f4d:	e8 b0 fd ff ff       	call   c0012d02 <CPU::cpuidCheckEDX(unsigned int)>
c0012f52:	83 e0 01             	and    eax,0x1
c0012f55:	8d 14 00             	lea    edx,[eax+eax*1]
c0012f58:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0012f5e:	83 e0 fd             	and    eax,0xfffffffd
c0012f61:	09 d0                	or     eax,edx
c0012f63:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0012f69:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0012f70:	e8 8d fd ff ff       	call   c0012d02 <CPU::cpuidCheckEDX(unsigned int)>
c0012f75:	83 e0 01             	and    eax,0x1
c0012f78:	c1 e0 06             	shl    eax,0x6
c0012f7b:	88 c2                	mov    dl,al
c0012f7d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0012f83:	83 e0 bf             	and    eax,0xffffffbf
c0012f86:	09 d0                	or     eax,edx
c0012f88:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0012f8e:	58                   	pop    eax
c0012f8f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012f93:	50                   	push   eax
c0012f94:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012f98:	50                   	push   eax
c0012f99:	8d 74 24 28          	lea    esi,[esp+0x28]
c0012f9d:	56                   	push   esi
c0012f9e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012fa2:	50                   	push   eax
c0012fa3:	6a 00                	push   0x0
c0012fa5:	e8 d4 fc ff ff       	call   c0012c7e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012faa:	b8 04 00 00 00       	mov    eax,0x4
c0012faf:	89 c1                	mov    ecx,eax
c0012fb1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012fb3:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0012fb9:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012fbd:	89 c1                	mov    ecx,eax
c0012fbf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012fc1:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0012fc7:	8d 74 24 38          	lea    esi,[esp+0x38]
c0012fcb:	89 c1                	mov    ecx,eax
c0012fcd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012fcf:	83 c4 18             	add    esp,0x18
c0012fd2:	68 30 3f 02 c0       	push   0xc0023f30
c0012fd7:	55                   	push   ebp
c0012fd8:	e8 ef d7 fe ff       	call   c00007cc <strcmp>
c0012fdd:	83 c4 10             	add    esp,0x10
c0012fe0:	85 c0                	test   eax,eax
c0012fe2:	75 0f                	jne    c0012ff3 <CPU::detectFeatures()+0x1a9>
c0012fe4:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0012fee:	e9 22 02 00 00       	jmp    c0013215 <CPU::detectFeatures()+0x3cb>
c0012ff3:	50                   	push   eax
c0012ff4:	50                   	push   eax
c0012ff5:	68 3d 3f 02 c0       	push   0xc0023f3d
c0012ffa:	55                   	push   ebp
c0012ffb:	e8 cc d7 fe ff       	call   c00007cc <strcmp>
c0013000:	83 c4 10             	add    esp,0x10
c0013003:	85 c0                	test   eax,eax
c0013005:	74 dd                	je     c0012fe4 <CPU::detectFeatures()+0x19a>
c0013007:	50                   	push   eax
c0013008:	50                   	push   eax
c0013009:	68 4a 3f 02 c0       	push   0xc0023f4a
c001300e:	55                   	push   ebp
c001300f:	e8 b8 d7 fe ff       	call   c00007cc <strcmp>
c0013014:	83 c4 10             	add    esp,0x10
c0013017:	85 c0                	test   eax,eax
c0013019:	74 2a                	je     c0013045 <CPU::detectFeatures()+0x1fb>
c001301b:	50                   	push   eax
c001301c:	50                   	push   eax
c001301d:	68 57 3f 02 c0       	push   0xc0023f57
c0013022:	55                   	push   ebp
c0013023:	e8 a4 d7 fe ff       	call   c00007cc <strcmp>
c0013028:	83 c4 10             	add    esp,0x10
c001302b:	85 c0                	test   eax,eax
c001302d:	74 16                	je     c0013045 <CPU::detectFeatures()+0x1fb>
c001302f:	50                   	push   eax
c0013030:	50                   	push   eax
c0013031:	68 64 3f 02 c0       	push   0xc0023f64
c0013036:	55                   	push   ebp
c0013037:	e8 90 d7 fe ff       	call   c00007cc <strcmp>
c001303c:	83 c4 10             	add    esp,0x10
c001303f:	85 c0                	test   eax,eax
c0013041:	74 48                	je     c001308b <CPU::detectFeatures()+0x241>
c0013043:	eb 0f                	jmp    c0013054 <CPU::detectFeatures()+0x20a>
c0013045:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001304f:	e9 c1 01 00 00       	jmp    c0013215 <CPU::detectFeatures()+0x3cb>
c0013054:	50                   	push   eax
c0013055:	50                   	push   eax
c0013056:	68 71 3f 02 c0       	push   0xc0023f71
c001305b:	55                   	push   ebp
c001305c:	e8 6b d7 fe ff       	call   c00007cc <strcmp>
c0013061:	83 c4 10             	add    esp,0x10
c0013064:	85 c0                	test   eax,eax
c0013066:	74 23                	je     c001308b <CPU::detectFeatures()+0x241>
c0013068:	57                   	push   edi
c0013069:	57                   	push   edi
c001306a:	68 7e 3f 02 c0       	push   0xc0023f7e
c001306f:	55                   	push   ebp
c0013070:	e8 57 d7 fe ff       	call   c00007cc <strcmp>
c0013075:	83 c4 10             	add    esp,0x10
c0013078:	85 c0                	test   eax,eax
c001307a:	75 1e                	jne    c001309a <CPU::detectFeatures()+0x250>
c001307c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013086:	e9 8a 01 00 00       	jmp    c0013215 <CPU::detectFeatures()+0x3cb>
c001308b:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0013095:	e9 7b 01 00 00       	jmp    c0013215 <CPU::detectFeatures()+0x3cb>
c001309a:	56                   	push   esi
c001309b:	56                   	push   esi
c001309c:	68 8b 3f 02 c0       	push   0xc0023f8b
c00130a1:	55                   	push   ebp
c00130a2:	e8 25 d7 fe ff       	call   c00007cc <strcmp>
c00130a7:	83 c4 10             	add    esp,0x10
c00130aa:	85 c0                	test   eax,eax
c00130ac:	75 0f                	jne    c00130bd <CPU::detectFeatures()+0x273>
c00130ae:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00130b8:	e9 58 01 00 00       	jmp    c0013215 <CPU::detectFeatures()+0x3cb>
c00130bd:	51                   	push   ecx
c00130be:	51                   	push   ecx
c00130bf:	68 4a 3f 02 c0       	push   0xc0023f4a
c00130c4:	55                   	push   ebp
c00130c5:	e8 02 d7 fe ff       	call   c00007cc <strcmp>
c00130ca:	83 c4 10             	add    esp,0x10
c00130cd:	85 c0                	test   eax,eax
c00130cf:	75 0f                	jne    c00130e0 <CPU::detectFeatures()+0x296>
c00130d1:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00130db:	e9 35 01 00 00       	jmp    c0013215 <CPU::detectFeatures()+0x3cb>
c00130e0:	52                   	push   edx
c00130e1:	52                   	push   edx
c00130e2:	68 98 3f 02 c0       	push   0xc0023f98
c00130e7:	55                   	push   ebp
c00130e8:	e8 df d6 fe ff       	call   c00007cc <strcmp>
c00130ed:	83 c4 10             	add    esp,0x10
c00130f0:	85 c0                	test   eax,eax
c00130f2:	75 0f                	jne    c0013103 <CPU::detectFeatures()+0x2b9>
c00130f4:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00130fe:	e9 12 01 00 00       	jmp    c0013215 <CPU::detectFeatures()+0x3cb>
c0013103:	50                   	push   eax
c0013104:	50                   	push   eax
c0013105:	68 a5 3f 02 c0       	push   0xc0023fa5
c001310a:	55                   	push   ebp
c001310b:	e8 bc d6 fe ff       	call   c00007cc <strcmp>
c0013110:	83 c4 10             	add    esp,0x10
c0013113:	85 c0                	test   eax,eax
c0013115:	75 0f                	jne    c0013126 <CPU::detectFeatures()+0x2dc>
c0013117:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0013121:	e9 ef 00 00 00       	jmp    c0013215 <CPU::detectFeatures()+0x3cb>
c0013126:	50                   	push   eax
c0013127:	50                   	push   eax
c0013128:	68 b2 3f 02 c0       	push   0xc0023fb2
c001312d:	55                   	push   ebp
c001312e:	e8 99 d6 fe ff       	call   c00007cc <strcmp>
c0013133:	83 c4 10             	add    esp,0x10
c0013136:	85 c0                	test   eax,eax
c0013138:	75 0f                	jne    c0013149 <CPU::detectFeatures()+0x2ff>
c001313a:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0013144:	e9 cc 00 00 00       	jmp    c0013215 <CPU::detectFeatures()+0x3cb>
c0013149:	50                   	push   eax
c001314a:	50                   	push   eax
c001314b:	68 bf 3f 02 c0       	push   0xc0023fbf
c0013150:	55                   	push   ebp
c0013151:	e8 76 d6 fe ff       	call   c00007cc <strcmp>
c0013156:	83 c4 10             	add    esp,0x10
c0013159:	85 c0                	test   eax,eax
c001315b:	75 0f                	jne    c001316c <CPU::detectFeatures()+0x322>
c001315d:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0013167:	e9 a9 00 00 00       	jmp    c0013215 <CPU::detectFeatures()+0x3cb>
c001316c:	50                   	push   eax
c001316d:	50                   	push   eax
c001316e:	68 cc 3f 02 c0       	push   0xc0023fcc
c0013173:	55                   	push   ebp
c0013174:	e8 53 d6 fe ff       	call   c00007cc <strcmp>
c0013179:	83 c4 10             	add    esp,0x10
c001317c:	85 c0                	test   eax,eax
c001317e:	75 0f                	jne    c001318f <CPU::detectFeatures()+0x345>
c0013180:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001318a:	e9 86 00 00 00       	jmp    c0013215 <CPU::detectFeatures()+0x3cb>
c001318f:	50                   	push   eax
c0013190:	50                   	push   eax
c0013191:	68 d9 3f 02 c0       	push   0xc0023fd9
c0013196:	55                   	push   ebp
c0013197:	e8 30 d6 fe ff       	call   c00007cc <strcmp>
c001319c:	83 c4 10             	add    esp,0x10
c001319f:	85 c0                	test   eax,eax
c00131a1:	75 0c                	jne    c00131af <CPU::detectFeatures()+0x365>
c00131a3:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00131ad:	eb 66                	jmp    c0013215 <CPU::detectFeatures()+0x3cb>
c00131af:	50                   	push   eax
c00131b0:	50                   	push   eax
c00131b1:	68 e6 3f 02 c0       	push   0xc0023fe6
c00131b6:	55                   	push   ebp
c00131b7:	e8 10 d6 fe ff       	call   c00007cc <strcmp>
c00131bc:	83 c4 10             	add    esp,0x10
c00131bf:	85 c0                	test   eax,eax
c00131c1:	75 0c                	jne    c00131cf <CPU::detectFeatures()+0x385>
c00131c3:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00131cd:	eb 46                	jmp    c0013215 <CPU::detectFeatures()+0x3cb>
c00131cf:	57                   	push   edi
c00131d0:	57                   	push   edi
c00131d1:	68 f3 3f 02 c0       	push   0xc0023ff3
c00131d6:	55                   	push   ebp
c00131d7:	e8 f0 d5 fe ff       	call   c00007cc <strcmp>
c00131dc:	83 c4 10             	add    esp,0x10
c00131df:	85 c0                	test   eax,eax
c00131e1:	74 e0                	je     c00131c3 <CPU::detectFeatures()+0x379>
c00131e3:	56                   	push   esi
c00131e4:	56                   	push   esi
c00131e5:	68 00 40 02 c0       	push   0xc0024000
c00131ea:	55                   	push   ebp
c00131eb:	e8 dc d5 fe ff       	call   c00007cc <strcmp>
c00131f0:	83 c4 10             	add    esp,0x10
c00131f3:	85 c0                	test   eax,eax
c00131f5:	74 cc                	je     c00131c3 <CPU::detectFeatures()+0x379>
c00131f7:	51                   	push   ecx
c00131f8:	51                   	push   ecx
c00131f9:	68 0d 40 02 c0       	push   0xc002400d
c00131fe:	55                   	push   ebp
c00131ff:	e8 c8 d5 fe ff       	call   c00007cc <strcmp>
c0013204:	83 c4 10             	add    esp,0x10
c0013207:	85 c0                	test   eax,eax
c0013209:	74 b8                	je     c00131c3 <CPU::detectFeatures()+0x379>
c001320b:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0013215:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001321a:	0f 86 be 00 00 00    	jbe    c00132de <CPU::detectFeatures()+0x494>
c0013220:	83 ec 0c             	sub    esp,0xc
c0013223:	68 80 00 00 00       	push   0x80
c0013228:	e8 31 fb ff ff       	call   c0012d5e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001322d:	83 e0 01             	and    eax,0x1
c0013230:	c1 e0 06             	shl    eax,0x6
c0013233:	88 c2                	mov    dl,al
c0013235:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001323b:	83 e0 bf             	and    eax,0xffffffbf
c001323e:	09 d0                	or     eax,edx
c0013240:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013246:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001324d:	e8 0c fb ff ff       	call   c0012d5e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013252:	83 e0 01             	and    eax,0x1
c0013255:	c1 e0 04             	shl    eax,0x4
c0013258:	88 c2                	mov    dl,al
c001325a:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013260:	83 e0 ef             	and    eax,0xffffffef
c0013263:	09 d0                	or     eax,edx
c0013265:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001326b:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0013272:	e8 e7 fa ff ff       	call   c0012d5e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013277:	c1 e0 07             	shl    eax,0x7
c001327a:	88 c2                	mov    dl,al
c001327c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013282:	83 e0 7f             	and    eax,0x7f
c0013285:	09 d0                	or     eax,edx
c0013287:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001328d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013294:	e8 f3 fa ff ff       	call   c0012d8c <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013299:	83 e0 01             	and    eax,0x1
c001329c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00132a3:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00132a9:	83 e0 f7             	and    eax,0xfffffff7
c00132ac:	09 d0                	or     eax,edx
c00132ae:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00132b4:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00132bb:	e8 cc fa ff ff       	call   c0012d8c <CPU::cpuidCheckExtendedECX(unsigned int)>
c00132c0:	83 c4 10             	add    esp,0x10
c00132c3:	83 e0 01             	and    eax,0x1
c00132c6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00132cd:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00132d3:	83 e0 fb             	and    eax,0xfffffffb
c00132d6:	09 d0                	or     eax,edx
c00132d8:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00132de:	83 ec 0c             	sub    esp,0xc
c00132e1:	8d 44 24 28          	lea    eax,[esp+0x28]
c00132e5:	50                   	push   eax
c00132e6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00132ea:	50                   	push   eax
c00132eb:	8d 74 24 28          	lea    esi,[esp+0x28]
c00132ef:	56                   	push   esi
c00132f0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00132f4:	50                   	push   eax
c00132f5:	6a 01                	push   0x1
c00132f7:	e8 82 f9 ff ff       	call   c0012c7e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00132fc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013300:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0013306:	88 ca                	mov    dl,cl
c0013308:	83 e0 f0             	and    eax,0xfffffff0
c001330b:	83 e2 0f             	and    edx,0xf
c001330e:	09 d0                	or     eax,edx
c0013310:	88 ca                	mov    dl,cl
c0013312:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0013318:	c0 ea 04             	shr    dl,0x4
c001331b:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001331f:	0f b6 c2             	movzx  eax,dl
c0013322:	83 c4 20             	add    esp,0x20
c0013325:	c1 e0 06             	shl    eax,0x6
c0013328:	89 c7                	mov    edi,eax
c001332a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013330:	66 25 3f c0          	and    ax,0xc03f
c0013334:	09 f8                	or     eax,edi
c0013336:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001333d:	89 c8                	mov    eax,ecx
c001333f:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0013346:	c1 e8 08             	shr    eax,0x8
c0013349:	83 e5 3f             	and    ebp,0x3f
c001334c:	83 e0 0f             	and    eax,0xf
c001334f:	89 c7                	mov    edi,eax
c0013351:	c1 e7 06             	shl    edi,0x6
c0013354:	09 ef                	or     edi,ebp
c0013356:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c001335d:	89 fa                	mov    edx,edi
c001335f:	83 e5 c0             	and    ebp,0xffffffc0
c0013362:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0013368:	88 c2                	mov    dl,al
c001336a:	c0 ea 02             	shr    dl,0x2
c001336d:	89 d7                	mov    edi,edx
c001336f:	09 ef                	or     edi,ebp
c0013371:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0013377:	89 fa                	mov    edx,edi
c0013379:	83 e5 cf             	and    ebp,0xffffffcf
c001337c:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0013382:	89 cf                	mov    edi,ecx
c0013384:	c1 ef 0c             	shr    edi,0xc
c0013387:	83 e7 03             	and    edi,0x3
c001338a:	c1 e7 04             	shl    edi,0x4
c001338d:	09 ef                	or     edi,ebp
c001338f:	3c 06                	cmp    al,0x6
c0013391:	89 fa                	mov    edx,edi
c0013393:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0013399:	74 04                	je     c001339f <CPU::detectFeatures()+0x555>
c001339b:	3c 0f                	cmp    al,0xf
c001339d:	75 5c                	jne    c00133fb <CPU::detectFeatures()+0x5b1>
c001339f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00133a3:	89 cf                	mov    edi,ecx
c00133a5:	c1 ef 10             	shr    edi,0x10
c00133a8:	c1 e7 04             	shl    edi,0x4
c00133ab:	09 fa                	or     edx,edi
c00133ad:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c00133b3:	0f b6 d2             	movzx  edx,dl
c00133b6:	66 81 e7 3f c0       	and    di,0xc03f
c00133bb:	c1 e2 06             	shl    edx,0x6
c00133be:	09 fa                	or     edx,edi
c00133c0:	3c 0f                	cmp    al,0xf
c00133c2:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00133c9:	75 30                	jne    c00133fb <CPU::detectFeatures()+0x5b1>
c00133cb:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00133d1:	c1 e9 14             	shr    ecx,0x14
c00133d4:	83 e0 3f             	and    eax,0x3f
c00133d7:	83 c1 0f             	add    ecx,0xf
c00133da:	88 ca                	mov    dl,cl
c00133dc:	c0 e9 02             	shr    cl,0x2
c00133df:	c1 e2 06             	shl    edx,0x6
c00133e2:	09 d0                	or     eax,edx
c00133e4:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00133ea:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00133f0:	83 e0 c0             	and    eax,0xffffffc0
c00133f3:	09 c1                	or     ecx,eax
c00133f5:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00133fb:	83 ec 0c             	sub    esp,0xc
c00133fe:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0013405:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013409:	50                   	push   eax
c001340a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001340e:	55                   	push   ebp
c001340f:	56                   	push   esi
c0013410:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0013414:	57                   	push   edi
c0013415:	68 00 00 00 80       	push   0x80000000
c001341a:	e8 5f f8 ff ff       	call   c0012c7e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001341f:	83 c4 20             	add    esp,0x20
c0013422:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001342a:	76 22                	jbe    c001344e <CPU::detectFeatures()+0x604>
c001342c:	83 ec 0c             	sub    esp,0xc
c001342f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013433:	50                   	push   eax
c0013434:	55                   	push   ebp
c0013435:	56                   	push   esi
c0013436:	57                   	push   edi
c0013437:	68 01 00 00 80       	push   0x80000001
c001343c:	e8 3d f8 ff ff       	call   c0012c7e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013441:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001344b:	83 c4 20             	add    esp,0x20
c001344e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0013454:	83 f8 01             	cmp    eax,0x1
c0013457:	75 6f                	jne    c00134c8 <CPU::detectFeatures()+0x67e>
c0013459:	51                   	push   ecx
c001345a:	51                   	push   ecx
c001345b:	68 19 40 02 c0       	push   0xc0024019
c0013460:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013464:	56                   	push   esi
c0013465:	e8 d6 d2 fe ff       	call   c0000740 <strcpy>
c001346a:	5f                   	pop    edi
c001346b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013471:	5d                   	pop    ebp
c0013472:	66 c1 e8 06          	shr    ax,0x6
c0013476:	0f b6 c0             	movzx  eax,al
c0013479:	50                   	push   eax
c001347a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013480:	c1 e8 0e             	shr    eax,0xe
c0013483:	0f b6 c0             	movzx  eax,al
c0013486:	50                   	push   eax
c0013487:	e8 9c f4 ff ff       	call   c0012928 <CPU::lookupIntelName(unsigned char, unsigned char)>
c001348c:	5a                   	pop    edx
c001348d:	59                   	pop    ecx
c001348e:	50                   	push   eax
c001348f:	56                   	push   esi
c0013490:	e8 eb d3 fe ff       	call   c0000880 <strcat>
c0013495:	5f                   	pop    edi
c0013496:	5d                   	pop    ebp
c0013497:	56                   	push   esi
c0013498:	53                   	push   ebx
c0013499:	e8 7e ac ff ff       	call   c000e11c <Device::setName(char const*)>
c001349e:	58                   	pop    eax
c001349f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00134a5:	5a                   	pop    edx
c00134a6:	68 20 40 02 c0       	push   0xc0024020
c00134ab:	50                   	push   eax
c00134ac:	e8 1b d3 fe ff       	call   c00007cc <strcmp>
c00134b1:	83 c4 10             	add    esp,0x10
c00134b4:	85 c0                	test   eax,eax
c00134b6:	0f 85 71 03 00 00    	jne    c001382d <CPU::detectFeatures()+0x9e3>
c00134bc:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00134c3:	e9 65 03 00 00       	jmp    c001382d <CPU::detectFeatures()+0x9e3>
c00134c8:	83 f8 02             	cmp    eax,0x2
c00134cb:	0f 85 b5 00 00 00    	jne    c0013586 <CPU::detectFeatures()+0x73c>
c00134d1:	57                   	push   edi
c00134d2:	57                   	push   edi
c00134d3:	68 32 40 02 c0       	push   0xc0024032
c00134d8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00134dc:	56                   	push   esi
c00134dd:	e8 5e d2 fe ff       	call   c0000740 <strcpy>
c00134e2:	5d                   	pop    ebp
c00134e3:	58                   	pop    eax
c00134e4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00134ea:	66 c1 e8 06          	shr    ax,0x6
c00134ee:	0f b6 c0             	movzx  eax,al
c00134f1:	50                   	push   eax
c00134f2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00134f8:	c1 e8 0e             	shr    eax,0xe
c00134fb:	0f b6 c0             	movzx  eax,al
c00134fe:	50                   	push   eax
c00134ff:	e8 90 f2 ff ff       	call   c0012794 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0013504:	5a                   	pop    edx
c0013505:	59                   	pop    ecx
c0013506:	50                   	push   eax
c0013507:	56                   	push   esi
c0013508:	e8 73 d3 fe ff       	call   c0000880 <strcat>
c001350d:	5f                   	pop    edi
c001350e:	5d                   	pop    ebp
c001350f:	56                   	push   esi
c0013510:	53                   	push   ebx
c0013511:	e8 06 ac ff ff       	call   c000e11c <Device::setName(char const*)>
c0013516:	58                   	pop    eax
c0013517:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001351d:	5a                   	pop    edx
c001351e:	68 37 40 02 c0       	push   0xc0024037
c0013523:	50                   	push   eax
c0013524:	e8 a3 d2 fe ff       	call   c00007cc <strcmp>
c0013529:	83 c4 10             	add    esp,0x10
c001352c:	85 c0                	test   eax,eax
c001352e:	75 20                	jne    c0013550 <CPU::detectFeatures()+0x706>
c0013530:	8b 15 88 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026488
c0013536:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001353c:	a8 01                	test   al,0x1
c001353e:	74 10                	je     c0013550 <CPU::detectFeatures()+0x706>
c0013540:	83 e0 fe             	and    eax,0xfffffffe
c0013543:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0013549:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0013550:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013556:	c1 e8 0e             	shr    eax,0xe
c0013559:	3c 05                	cmp    al,0x5
c001355b:	0f 85 cc 02 00 00    	jne    c001382d <CPU::detectFeatures()+0x9e3>
c0013561:	56                   	push   esi
c0013562:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0013568:	83 e0 0f             	and    eax,0xf
c001356b:	50                   	push   eax
c001356c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013572:	66 c1 e8 06          	shr    ax,0x6
c0013576:	0f b6 c0             	movzx  eax,al
c0013579:	50                   	push   eax
c001357a:	6a 05                	push   0x5
c001357c:	e8 89 f6 ff ff       	call   c0012c0a <CPU::AMD_K6_writeback(int, int, int)>
c0013581:	e9 1f 02 00 00       	jmp    c00137a5 <CPU::detectFeatures()+0x95b>
c0013586:	8d 50 fd             	lea    edx,[eax-0x3]
c0013589:	83 fa 01             	cmp    edx,0x1
c001358c:	76 09                	jbe    c0013597 <CPU::detectFeatures()+0x74d>
c001358e:	83 f8 06             	cmp    eax,0x6
c0013591:	0f 85 91 01 00 00    	jne    c0013728 <CPU::detectFeatures()+0x8de>
c0013597:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001359d:	c1 ea 0e             	shr    edx,0xe
c00135a0:	80 fa 05             	cmp    dl,0x5
c00135a3:	75 7b                	jne    c0013620 <CPU::detectFeatures()+0x7d6>
c00135a5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00135ab:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00135b0:	66 81 fa 00 01       	cmp    dx,0x100
c00135b5:	75 0c                	jne    c00135c3 <CPU::detectFeatures()+0x779>
c00135b7:	51                   	push   ecx
c00135b8:	51                   	push   ecx
c00135b9:	68 3e 40 02 c0       	push   0xc002403e
c00135be:	e9 dc 01 00 00       	jmp    c001379f <CPU::detectFeatures()+0x955>
c00135c3:	66 81 fa 00 02       	cmp    dx,0x200
c00135c8:	75 0c                	jne    c00135d6 <CPU::detectFeatures()+0x78c>
c00135ca:	52                   	push   edx
c00135cb:	52                   	push   edx
c00135cc:	68 51 40 02 c0       	push   0xc0024051
c00135d1:	e9 c9 01 00 00       	jmp    c001379f <CPU::detectFeatures()+0x955>
c00135d6:	66 81 fa 40 02       	cmp    dx,0x240
c00135db:	75 0c                	jne    c00135e9 <CPU::detectFeatures()+0x79f>
c00135dd:	50                   	push   eax
c00135de:	50                   	push   eax
c00135df:	68 63 40 02 c0       	push   0xc0024063
c00135e4:	e9 b6 01 00 00       	jmp    c001379f <CPU::detectFeatures()+0x955>
c00135e9:	83 f8 06             	cmp    eax,0x6
c00135ec:	75 0c                	jne    c00135fa <CPU::detectFeatures()+0x7b0>
c00135ee:	50                   	push   eax
c00135ef:	50                   	push   eax
c00135f0:	68 75 40 02 c0       	push   0xc0024075
c00135f5:	e9 a5 01 00 00       	jmp    c001379f <CPU::detectFeatures()+0x955>
c00135fa:	83 f8 04             	cmp    eax,0x4
c00135fd:	75 0c                	jne    c001360b <CPU::detectFeatures()+0x7c1>
c00135ff:	50                   	push   eax
c0013600:	50                   	push   eax
c0013601:	68 81 40 02 c0       	push   0xc0024081
c0013606:	e9 94 01 00 00       	jmp    c001379f <CPU::detectFeatures()+0x955>
c001360b:	83 f8 03             	cmp    eax,0x3
c001360e:	0f 85 19 02 00 00    	jne    c001382d <CPU::detectFeatures()+0x9e3>
c0013614:	50                   	push   eax
c0013615:	50                   	push   eax
c0013616:	68 89 40 02 c0       	push   0xc0024089
c001361b:	e9 7f 01 00 00       	jmp    c001379f <CPU::detectFeatures()+0x955>
c0013620:	80 fa 06             	cmp    dl,0x6
c0013623:	0f 85 db 00 00 00    	jne    c0013704 <CPU::detectFeatures()+0x8ba>
c0013629:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001362f:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013634:	66 81 fa 80 01       	cmp    dx,0x180
c0013639:	75 0c                	jne    c0013647 <CPU::detectFeatures()+0x7fd>
c001363b:	50                   	push   eax
c001363c:	50                   	push   eax
c001363d:	68 94 40 02 c0       	push   0xc0024094
c0013642:	e9 58 01 00 00       	jmp    c001379f <CPU::detectFeatures()+0x955>
c0013647:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001364d:	66 f7 c1 80 ff       	test   cx,0xff80
c0013652:	75 0c                	jne    c0013660 <CPU::detectFeatures()+0x816>
c0013654:	50                   	push   eax
c0013655:	50                   	push   eax
c0013656:	68 a4 40 02 c0       	push   0xc00240a4
c001365b:	e9 3f 01 00 00       	jmp    c001379f <CPU::detectFeatures()+0x955>
c0013660:	66 81 fa 40 02       	cmp    dx,0x240
c0013665:	75 0c                	jne    c0013673 <CPU::detectFeatures()+0x829>
c0013667:	55                   	push   ebp
c0013668:	55                   	push   ebp
c0013669:	68 ab 40 02 c0       	push   0xc00240ab
c001366e:	e9 2c 01 00 00       	jmp    c001379f <CPU::detectFeatures()+0x955>
c0013673:	66 81 fa 80 02       	cmp    dx,0x280
c0013678:	75 0c                	jne    c0013686 <CPU::detectFeatures()+0x83c>
c001367a:	57                   	push   edi
c001367b:	57                   	push   edi
c001367c:	68 b4 40 02 c0       	push   0xc00240b4
c0013681:	e9 19 01 00 00       	jmp    c001379f <CPU::detectFeatures()+0x955>
c0013686:	66 81 fa 40 03       	cmp    dx,0x340
c001368b:	74 ed                	je     c001367a <CPU::detectFeatures()+0x830>
c001368d:	66 81 fa c0 03       	cmp    dx,0x3c0
c0013692:	75 0c                	jne    c00136a0 <CPU::detectFeatures()+0x856>
c0013694:	56                   	push   esi
c0013695:	56                   	push   esi
c0013696:	68 bb 40 02 c0       	push   0xc00240bb
c001369b:	e9 ff 00 00 00       	jmp    c001379f <CPU::detectFeatures()+0x955>
c00136a0:	83 f8 06             	cmp    eax,0x6
c00136a3:	0f 84 45 ff ff ff    	je     c00135ee <CPU::detectFeatures()+0x7a4>
c00136a9:	83 f8 04             	cmp    eax,0x4
c00136ac:	0f 84 4d ff ff ff    	je     c00135ff <CPU::detectFeatures()+0x7b5>
c00136b2:	83 f8 03             	cmp    eax,0x3
c00136b5:	0f 85 72 01 00 00    	jne    c001382d <CPU::detectFeatures()+0x9e3>
c00136bb:	51                   	push   ecx
c00136bc:	51                   	push   ecx
c00136bd:	68 c4 40 02 c0       	push   0xc00240c4
c00136c2:	53                   	push   ebx
c00136c3:	e8 54 aa ff ff       	call   c000e11c <Device::setName(char const*)>
c00136c8:	b1 c1                	mov    cl,0xc1
c00136ca:	88 c8                	mov    al,cl
c00136cc:	e6 22                	out    0x22,al
c00136ce:	e4 23                	in     al,0x23
c00136d0:	88 c2                	mov    dl,al
c00136d2:	88 c8                	mov    al,cl
c00136d4:	e6 22                	out    0x22,al
c00136d6:	88 d0                	mov    al,dl
c00136d8:	83 c8 10             	or     eax,0x10
c00136db:	e6 23                	out    0x23,al
c00136dd:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00136e4:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00136e7:	89 d0                	mov    eax,edx
c00136e9:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00136ef:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00136f3:	40                   	inc    eax
c00136f4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00136fa:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00136ff:	e9 a1 00 00 00       	jmp    c00137a5 <CPU::detectFeatures()+0x95b>
c0013704:	83 f8 06             	cmp    eax,0x6
c0013707:	0f 84 e1 fe ff ff    	je     c00135ee <CPU::detectFeatures()+0x7a4>
c001370d:	83 f8 04             	cmp    eax,0x4
c0013710:	0f 84 e9 fe ff ff    	je     c00135ff <CPU::detectFeatures()+0x7b5>
c0013716:	83 f8 03             	cmp    eax,0x3
c0013719:	0f 85 0e 01 00 00    	jne    c001382d <CPU::detectFeatures()+0x9e3>
c001371f:	52                   	push   edx
c0013720:	52                   	push   edx
c0013721:	68 cf 40 02 c0       	push   0xc00240cf
c0013726:	eb 77                	jmp    c001379f <CPU::detectFeatures()+0x955>
c0013728:	83 f8 07             	cmp    eax,0x7
c001372b:	75 09                	jne    c0013736 <CPU::detectFeatures()+0x8ec>
c001372d:	50                   	push   eax
c001372e:	50                   	push   eax
c001372f:	68 d9 40 02 c0       	push   0xc00240d9
c0013734:	eb 69                	jmp    c001379f <CPU::detectFeatures()+0x955>
c0013736:	83 f8 0a             	cmp    eax,0xa
c0013739:	75 09                	jne    c0013744 <CPU::detectFeatures()+0x8fa>
c001373b:	50                   	push   eax
c001373c:	50                   	push   eax
c001373d:	68 e4 40 02 c0       	push   0xc00240e4
c0013742:	eb 5b                	jmp    c001379f <CPU::detectFeatures()+0x955>
c0013744:	83 f8 0b             	cmp    eax,0xb
c0013747:	75 09                	jne    c0013752 <CPU::detectFeatures()+0x908>
c0013749:	50                   	push   eax
c001374a:	50                   	push   eax
c001374b:	68 ec 40 02 c0       	push   0xc00240ec
c0013750:	eb 4d                	jmp    c001379f <CPU::detectFeatures()+0x955>
c0013752:	83 f8 08             	cmp    eax,0x8
c0013755:	75 09                	jne    c0013760 <CPU::detectFeatures()+0x916>
c0013757:	50                   	push   eax
c0013758:	50                   	push   eax
c0013759:	68 f5 40 02 c0       	push   0xc00240f5
c001375e:	eb 3f                	jmp    c001379f <CPU::detectFeatures()+0x955>
c0013760:	83 f8 09             	cmp    eax,0x9
c0013763:	75 09                	jne    c001376e <CPU::detectFeatures()+0x924>
c0013765:	50                   	push   eax
c0013766:	50                   	push   eax
c0013767:	68 fd 40 02 c0       	push   0xc00240fd
c001376c:	eb 31                	jmp    c001379f <CPU::detectFeatures()+0x955>
c001376e:	83 f8 05             	cmp    eax,0x5
c0013771:	75 09                	jne    c001377c <CPU::detectFeatures()+0x932>
c0013773:	50                   	push   eax
c0013774:	50                   	push   eax
c0013775:	68 05 41 02 c0       	push   0xc0024105
c001377a:	eb 23                	jmp    c001379f <CPU::detectFeatures()+0x955>
c001377c:	83 f8 0c             	cmp    eax,0xc
c001377f:	75 09                	jne    c001378a <CPU::detectFeatures()+0x940>
c0013781:	55                   	push   ebp
c0013782:	55                   	push   ebp
c0013783:	68 13 41 02 c0       	push   0xc0024113
c0013788:	eb 15                	jmp    c001379f <CPU::detectFeatures()+0x955>
c001378a:	83 f8 0d             	cmp    eax,0xd
c001378d:	75 09                	jne    c0013798 <CPU::detectFeatures()+0x94e>
c001378f:	57                   	push   edi
c0013790:	57                   	push   edi
c0013791:	68 1e 41 02 c0       	push   0xc002411e
c0013796:	eb 07                	jmp    c001379f <CPU::detectFeatures()+0x955>
c0013798:	56                   	push   esi
c0013799:	56                   	push   esi
c001379a:	68 32 41 02 c0       	push   0xc0024132
c001379f:	53                   	push   ebx
c00137a0:	e8 77 a9 ff ff       	call   c000e11c <Device::setName(char const*)>
c00137a5:	83 c4 10             	add    esp,0x10
c00137a8:	e9 80 00 00 00       	jmp    c001382d <CPU::detectFeatures()+0x9e3>
c00137ad:	51                   	push   ecx
c00137ae:	51                   	push   ecx
c00137af:	68 7e 3f 02 c0       	push   0xc0023f7e
c00137b4:	55                   	push   ebp
c00137b5:	e8 86 cf fe ff       	call   c0000740 <strcpy>
c00137ba:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00137c4:	e8 1a ca fe ff       	call   c00001e3 <is486>
c00137c9:	83 c4 10             	add    esp,0x10
c00137cc:	85 c0                	test   eax,eax
c00137ce:	74 2b                	je     c00137fb <CPU::detectFeatures()+0x9b1>
c00137d0:	52                   	push   edx
c00137d1:	52                   	push   edx
c00137d2:	68 3e 41 02 c0       	push   0xc002413e
c00137d7:	53                   	push   ebx
c00137d8:	e8 3f a9 ff ff       	call   c000e11c <Device::setName(char const*)>
c00137dd:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00137e4:	0f 20 c0             	mov    eax,cr0
c00137e7:	83 e0 14             	and    eax,0x14
c00137ea:	83 c4 10             	add    esp,0x10
c00137ed:	83 f8 04             	cmp    eax,0x4
c00137f0:	75 1f                	jne    c0013811 <CPU::detectFeatures()+0x9c7>
c00137f2:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00137f9:	eb 32                	jmp    c001382d <CPU::detectFeatures()+0x9e3>
c00137fb:	50                   	push   eax
c00137fc:	50                   	push   eax
c00137fd:	68 49 41 02 c0       	push   0xc0024149
c0013802:	53                   	push   ebx
c0013803:	e8 14 a9 ff ff       	call   c000e11c <Device::setName(char const*)>
c0013808:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c001380f:	eb d3                	jmp    c00137e4 <CPU::detectFeatures()+0x99a>
c0013811:	e8 a8 c9 fe ff       	call   c00001be <hasLegacyFPU>
c0013816:	83 e0 01             	and    eax,0x1
c0013819:	8d 14 00             	lea    edx,[eax+eax*1]
c001381c:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013822:	83 e0 fd             	and    eax,0xfffffffd
c0013825:	09 d0                	or     eax,edx
c0013827:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001382d:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0013834:	83 c4 4c             	add    esp,0x4c
c0013837:	5b                   	pop    ebx
c0013838:	5e                   	pop    esi
c0013839:	5f                   	pop    edi
c001383a:	5d                   	pop    ebp
c001383b:	c3                   	ret    

c001383c <CPU::setupSMEP()>:
c001383c:	0f 20 e0             	mov    eax,cr4
c001383f:	0d 00 00 10 00       	or     eax,0x100000
c0013844:	0f 22 e0             	mov    cr4,eax
c0013847:	c3                   	ret    

c0013848 <CPU::setupUMIP()>:
c0013848:	0f 20 e0             	mov    eax,cr4
c001384b:	80 cc 08             	or     ah,0x8
c001384e:	0f 22 e0             	mov    cr4,eax
c0013851:	c3                   	ret    

c0013852 <CPU::setupTSC()>:
c0013852:	0f 20 e0             	mov    eax,cr4
c0013855:	83 c8 04             	or     eax,0x4
c0013858:	0f 22 e0             	mov    cr4,eax
c001385b:	c3                   	ret    

c001385c <CPU::setupLargePages()>:
c001385c:	0f 20 e0             	mov    eax,cr4
c001385f:	83 c8 10             	or     eax,0x10
c0013862:	0f 22 e0             	mov    cr4,eax
c0013865:	c3                   	ret    

c0013866 <CPU::setupPAT()>:
c0013866:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c001386b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0013872:	74 2c                	je     c00138a0 <CPU::setupPAT()+0x3a>
c0013874:	53                   	push   ebx
c0013875:	83 ec 10             	sub    esp,0x10
c0013878:	68 77 02 00 00       	push   0x277
c001387d:	50                   	push   eax
c001387e:	e8 a1 56 ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c0013883:	83 e2 f8             	and    edx,0xfffffff8
c0013886:	83 ca 01             	or     edx,0x1
c0013889:	52                   	push   edx
c001388a:	50                   	push   eax
c001388b:	68 77 02 00 00       	push   0x277
c0013890:	ff 35 88 64 02 c0    	push   DWORD PTR ds:0xc0026488
c0013896:	e8 b5 56 ff ff       	call   c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>
c001389b:	83 c4 28             	add    esp,0x28
c001389e:	5b                   	pop    ebx
c001389f:	c3                   	ret    
c00138a0:	c3                   	ret    
c00138a1:	90                   	nop

c00138a2 <CPU::setupMTRR()>:
c00138a2:	c3                   	ret    
c00138a3:	90                   	nop

c00138a4 <CPU::setupGlobalPages()>:
c00138a4:	0f 20 e0             	mov    eax,cr4
c00138a7:	0c 80                	or     al,0x80
c00138a9:	0f 22 e0             	mov    cr4,eax
c00138ac:	c3                   	ret    
c00138ad:	90                   	nop

c00138ae <CPU::allowUsermodeDataAccess()>:
c00138ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00138b2:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00138b9:	74 03                	je     c00138be <CPU::allowUsermodeDataAccess()+0x10>
c00138bb:	0f 01 cb             	stac   
c00138be:	c3                   	ret    
c00138bf:	90                   	nop

c00138c0 <CPU::prohibitUsermodeDataAccess()>:
c00138c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00138c4:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00138cb:	74 03                	je     c00138d0 <CPU::prohibitUsermodeDataAccess()+0x10>
c00138cd:	0f 01 ca             	clac   
c00138d0:	c3                   	ret    
c00138d1:	90                   	nop

c00138d2 <CPU::setupSMAP()>:
c00138d2:	0f 20 e0             	mov    eax,cr4
c00138d5:	0d 00 00 20 00       	or     eax,0x200000
c00138da:	0f 22 e0             	mov    cr4,eax
c00138dd:	eb e1                	jmp    c00138c0 <CPU::prohibitUsermodeDataAccess()>
c00138df:	90                   	nop

c00138e0 <CPU::setupFeatures()>:
c00138e0:	83 ec 0c             	sub    esp,0xc
c00138e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00138e7:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c00138ee:	74 07                	je     c00138f7 <CPU::setupFeatures()+0x17>
c00138f0:	52                   	push   edx
c00138f1:	e8 46 ff ff ff       	call   c001383c <CPU::setupSMEP()>
c00138f6:	58                   	pop    eax
c00138f7:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c00138fe:	74 07                	je     c0013907 <CPU::setupFeatures()+0x27>
c0013900:	52                   	push   edx
c0013901:	e8 cc ff ff ff       	call   c00138d2 <CPU::setupSMAP()>
c0013906:	58                   	pop    eax
c0013907:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c001390e:	74 07                	je     c0013917 <CPU::setupFeatures()+0x37>
c0013910:	52                   	push   edx
c0013911:	e8 32 ff ff ff       	call   c0013848 <CPU::setupUMIP()>
c0013916:	58                   	pop    eax
c0013917:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c001391e:	74 07                	je     c0013927 <CPU::setupFeatures()+0x47>
c0013920:	52                   	push   edx
c0013921:	e8 2c ff ff ff       	call   c0013852 <CPU::setupTSC()>
c0013926:	58                   	pop    eax
c0013927:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c001392e:	74 07                	je     c0013937 <CPU::setupFeatures()+0x57>
c0013930:	52                   	push   edx
c0013931:	e8 26 ff ff ff       	call   c001385c <CPU::setupLargePages()>
c0013936:	59                   	pop    ecx
c0013937:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c001393e:	74 07                	je     c0013947 <CPU::setupFeatures()+0x67>
c0013940:	52                   	push   edx
c0013941:	e8 5e ff ff ff       	call   c00138a4 <CPU::setupGlobalPages()>
c0013946:	58                   	pop    eax
c0013947:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c001394e:	74 0c                	je     c001395c <CPU::setupFeatures()+0x7c>
c0013950:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013954:	83 c4 0c             	add    esp,0xc
c0013957:	e9 0a ff ff ff       	jmp    c0013866 <CPU::setupPAT()>
c001395c:	83 c4 0c             	add    esp,0xc
c001395f:	c3                   	ret    

c0013960 <CPU::open(int, int, void*)>:
c0013960:	57                   	push   edi
c0013961:	56                   	push   esi
c0013962:	53                   	push   ebx
c0013963:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013967:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001396b:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0013971:	83 ec 0c             	sub    esp,0xc
c0013974:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001397a:	68 54 41 02 c0       	push   0xc0024154
c001397f:	e8 99 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013984:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001398a:	89 04 24             	mov    DWORD PTR [esp],eax
c001398d:	e8 2a 59 ff ff       	call   c00092bc <GDT::setup()>
c0013992:	c7 04 24 66 41 02 c0 	mov    DWORD PTR [esp],0xc0024166
c0013999:	e8 7f 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001399e:	83 c4 0c             	add    esp,0xc
c00139a1:	6a 00                	push   0x0
c00139a3:	68 ef be ad de       	push   0xdeadbeef
c00139a8:	57                   	push   edi
c00139a9:	e8 e6 76 ff ff       	call   c000b094 <TSS::setup(unsigned long, unsigned long)>
c00139ae:	c7 04 24 78 41 02 c0 	mov    DWORD PTR [esp],0xc0024178
c00139b5:	e8 63 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139ba:	89 3c 24             	mov    DWORD PTR [esp],edi
c00139bd:	e8 b2 76 ff ff       	call   c000b074 <TSS::flush()>
c00139c2:	c7 04 24 8c 41 02 c0 	mov    DWORD PTR [esp],0xc002418c
c00139c9:	e8 4f 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139ce:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00139d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00139d7:	e8 4a 5b ff ff       	call   c0009526 <IDT::setup()>
c00139dc:	c7 04 24 9e 41 02 c0 	mov    DWORD PTR [esp],0xc002419e
c00139e3:	e8 35 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139e8:	b8 00 04 00 00       	mov    eax,0x400
c00139ed:	0f 23 f8             	mov    db7,eax
c00139f0:	c7 04 24 bc 41 02 c0 	mov    DWORD PTR [esp],0xc00241bc
c00139f7:	e8 21 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139fc:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0013a06:	e8 ee 63 ff ff       	call   c0009df9 <Phys::allocatePage()>
c0013a0b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0013a11:	89 30                	mov    DWORD PTR [eax],esi
c0013a13:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0013a19:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0013a1c:	c7 04 24 de 41 02 c0 	mov    DWORD PTR [esp],0xc00241de
c0013a23:	e8 f5 5f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013a28:	58                   	pop    eax
c0013a29:	5a                   	pop    edx
c0013a2a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0013a30:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013a34:	e8 55 86 ff ff       	call   c000c08e <VAS::setCPUSpecific(unsigned long)>
c0013a39:	c7 04 24 06 42 02 c0 	mov    DWORD PTR [esp],0xc0024206
c0013a40:	e8 d8 5f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013a45:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013a48:	e8 fd f3 ff ff       	call   c0012e4a <CPU::detectFeatures()>
c0013a4d:	c7 04 24 29 42 02 c0 	mov    DWORD PTR [esp],0xc0024229
c0013a54:	e8 c4 5f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013a59:	e8 cc b8 ff ff       	call   c000f32a <setupInterruptController()>
c0013a5e:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0013a64:	c7 04 24 4d 42 02 c0 	mov    DWORD PTR [esp],0xc002424d
c0013a6b:	e8 ad 5f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013a70:	a1 a0 64 02 c0       	mov    eax,ds:0xc00264a0
c0013a75:	83 e0 10             	and    eax,0x10
c0013a78:	83 f8 01             	cmp    eax,0x1
c0013a7b:	19 c0                	sbb    eax,eax
c0013a7d:	83 e0 46             	and    eax,0x46
c0013a80:	83 c0 1e             	add    eax,0x1e
c0013a83:	89 04 24             	mov    DWORD PTR [esp],eax
c0013a86:	e8 89 ce ff ff       	call   c0010914 <setupTimer(int)>
c0013a8b:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0013a91:	c7 04 24 68 42 02 c0 	mov    DWORD PTR [esp],0xc0024268
c0013a98:	e8 80 5f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013a9d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013aa0:	e8 3b fe ff ff       	call   c00138e0 <CPU::setupFeatures()>
c0013aa5:	c7 04 24 83 42 02 c0 	mov    DWORD PTR [esp],0xc0024283
c0013aac:	e8 6c 5f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013ab1:	83 c4 10             	add    esp,0x10
c0013ab4:	31 c0                	xor    eax,eax
c0013ab6:	5b                   	pop    ebx
c0013ab7:	5e                   	pop    esi
c0013ab8:	5f                   	pop    edi
c0013ab9:	c3                   	ret    

c0013aba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0013aba:	57                   	push   edi
c0013abb:	56                   	push   esi
c0013abc:	53                   	push   ebx
c0013abd:	51                   	push   ecx
c0013abe:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013ac2:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0013ac5:	0f 02 c0             	lar    eax,ax
c0013ac8:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0013acb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013acf:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0013ad2:	88 ca                	mov    dl,cl
c0013ad4:	c0 ea 06             	shr    dl,0x6
c0013ad7:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0013adb:	89 ca                	mov    edx,ecx
c0013add:	66 c1 ea 03          	shr    dx,0x3
c0013ae1:	83 e2 07             	and    edx,0x7
c0013ae4:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0013ae9:	88 17                	mov    BYTE PTR [edi],dl
c0013aeb:	0f 84 a6 01 00 00    	je     c0013c97 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0013af1:	83 e1 07             	and    ecx,0x7
c0013af4:	80 f9 04             	cmp    cl,0x4
c0013af7:	0f 84 98 00 00 00    	je     c0013b95 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0013afd:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013b02:	0f 95 c0             	setne  al
c0013b05:	80 f9 05             	cmp    cl,0x5
c0013b08:	0f 95 c2             	setne  dl
c0013b0b:	08 c2                	or     dl,al
c0013b0d:	74 79                	je     c0013b88 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0013b0f:	84 c9                	test   cl,cl
c0013b11:	75 05                	jne    c0013b18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0013b13:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0013b16:	eb 3c                	jmp    c0013b54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013b18:	80 f9 01             	cmp    cl,0x1
c0013b1b:	75 05                	jne    c0013b22 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0013b1d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0013b20:	eb 32                	jmp    c0013b54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013b22:	80 f9 02             	cmp    cl,0x2
c0013b25:	75 05                	jne    c0013b2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0013b27:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0013b2a:	eb 28                	jmp    c0013b54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013b2c:	31 c0                	xor    eax,eax
c0013b2e:	80 f9 03             	cmp    cl,0x3
c0013b31:	75 05                	jne    c0013b38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0013b33:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013b36:	eb 1c                	jmp    c0013b54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013b38:	80 f9 05             	cmp    cl,0x5
c0013b3b:	75 05                	jne    c0013b42 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0013b3d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0013b40:	eb 12                	jmp    c0013b54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013b42:	80 f9 06             	cmp    cl,0x6
c0013b45:	75 05                	jne    c0013b4c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0013b47:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013b4a:	eb 08                	jmp    c0013b54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013b4c:	80 f9 07             	cmp    cl,0x7
c0013b4f:	75 03                	jne    c0013b54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013b51:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013b54:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0013b59:	75 10                	jne    c0013b6b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0013b5b:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0013b5f:	b9 03 00 00 00       	mov    ecx,0x3
c0013b64:	01 d0                	add    eax,edx
c0013b66:	e9 37 01 00 00       	jmp    c0013ca2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013b6b:	b9 02 00 00 00       	mov    ecx,0x2
c0013b70:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0013b75:	0f 85 27 01 00 00    	jne    c0013ca2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013b7b:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0013b7e:	b9 06 00 00 00       	mov    ecx,0x6
c0013b83:	e9 1a 01 00 00       	jmp    c0013ca2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013b88:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0013b8b:	b9 06 00 00 00       	mov    ecx,0x6
c0013b90:	e9 0f 01 00 00       	jmp    c0013ca4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013b95:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0013b98:	88 ca                	mov    dl,cl
c0013b9a:	c0 ea 06             	shr    dl,0x6
c0013b9d:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0013ba1:	89 ca                	mov    edx,ecx
c0013ba3:	66 c1 ea 03          	shr    dx,0x3
c0013ba7:	83 e2 07             	and    edx,0x7
c0013baa:	80 e1 07             	and    cl,0x7
c0013bad:	75 05                	jne    c0013bb4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0013baf:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0013bb2:	eb 4c                	jmp    c0013c00 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013bb4:	80 f9 01             	cmp    cl,0x1
c0013bb7:	75 05                	jne    c0013bbe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0013bb9:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0013bbc:	eb 42                	jmp    c0013c00 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013bbe:	80 f9 02             	cmp    cl,0x2
c0013bc1:	75 05                	jne    c0013bc8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0013bc3:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0013bc6:	eb 38                	jmp    c0013c00 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013bc8:	80 f9 03             	cmp    cl,0x3
c0013bcb:	75 05                	jne    c0013bd2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0013bcd:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0013bd0:	eb 2e                	jmp    c0013c00 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013bd2:	80 f9 04             	cmp    cl,0x4
c0013bd5:	75 12                	jne    c0013be9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0013bd7:	f6 c4 60             	test   ah,0x60
c0013bda:	75 08                	jne    c0013be4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0013bdc:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0013bdf:	8d 78 14             	lea    edi,[eax+0x14]
c0013be2:	eb 1c                	jmp    c0013c00 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013be4:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0013be7:	eb 17                	jmp    c0013c00 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013be9:	80 f9 05             	cmp    cl,0x5
c0013bec:	75 05                	jne    c0013bf3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0013bee:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0013bf1:	eb 0d                	jmp    c0013c00 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013bf3:	80 f9 06             	cmp    cl,0x6
c0013bf6:	75 05                	jne    c0013bfd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0013bf8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0013bfb:	eb 03                	jmp    c0013c00 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013bfd:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0013c00:	84 d2                	test   dl,dl
c0013c02:	75 05                	jne    c0013c09 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0013c04:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0013c07:	eb 3c                	jmp    c0013c45 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013c09:	80 fa 01             	cmp    dl,0x1
c0013c0c:	75 05                	jne    c0013c13 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0013c0e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0013c11:	eb 32                	jmp    c0013c45 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013c13:	80 fa 02             	cmp    dl,0x2
c0013c16:	75 05                	jne    c0013c1d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0013c18:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0013c1b:	eb 28                	jmp    c0013c45 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013c1d:	80 fa 03             	cmp    dl,0x3
c0013c20:	75 05                	jne    c0013c27 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0013c22:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013c25:	eb 1e                	jmp    c0013c45 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013c27:	31 c0                	xor    eax,eax
c0013c29:	80 fa 04             	cmp    dl,0x4
c0013c2c:	74 17                	je     c0013c45 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013c2e:	80 fa 05             	cmp    dl,0x5
c0013c31:	75 05                	jne    c0013c38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0013c33:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0013c36:	eb 0d                	jmp    c0013c45 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013c38:	80 fa 06             	cmp    dl,0x6
c0013c3b:	75 05                	jne    c0013c42 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0013c3d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013c40:	eb 03                	jmp    c0013c45 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013c42:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013c45:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013c4a:	0f 94 c2             	sete   dl
c0013c4d:	80 f9 05             	cmp    cl,0x5
c0013c50:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0013c54:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0013c59:	d3 e0                	shl    eax,cl
c0013c5b:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0013c5f:	74 0a                	je     c0013c6b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0013c61:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0013c64:	b9 07 00 00 00       	mov    ecx,0x7
c0013c69:	eb 37                	jmp    c0013ca2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013c6b:	01 f8                	add    eax,edi
c0013c6d:	b9 03 00 00 00       	mov    ecx,0x3
c0013c72:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013c77:	74 2b                	je     c0013ca4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013c79:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0013c7e:	75 0d                	jne    c0013c8d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0013c80:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0013c84:	01 c8                	add    eax,ecx
c0013c86:	b9 04 00 00 00       	mov    ecx,0x4
c0013c8b:	eb 17                	jmp    c0013ca4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013c8d:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0013c90:	b9 07 00 00 00       	mov    ecx,0x7
c0013c95:	eb 0d                	jmp    c0013ca4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013c97:	b9 02 00 00 00       	mov    ecx,0x2
c0013c9c:	b2 01                	mov    dl,0x1
c0013c9e:	31 c0                	xor    eax,eax
c0013ca0:	eb 02                	jmp    c0013ca4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013ca2:	31 d2                	xor    edx,edx
c0013ca4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013ca8:	89 0b                	mov    DWORD PTR [ebx],ecx
c0013caa:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013cae:	88 11                	mov    BYTE PTR [ecx],dl
c0013cb0:	5a                   	pop    edx
c0013cb1:	5b                   	pop    ebx
c0013cb2:	5e                   	pop    esi
c0013cb3:	5f                   	pop    edi
c0013cb4:	c3                   	ret    

c0013cb5 <Krnl::smpEntry()>:
c0013cb5:	eb fe                	jmp    c0013cb5 <Krnl::smpEntry()>

c0013cb7 <Krnl::startCPU(int)>:
c0013cb7:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c0013cbc:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0013cc3:	0f 84 36 01 00 00    	je     c0013dff <Krnl::startCPU(int)+0x148>
c0013cc9:	53                   	push   ebx
c0013cca:	83 ec 10             	sub    esp,0x10
c0013ccd:	fa                   	cli    
c0013cce:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c0013cd4:	6a 1b                	push   0x1b
c0013cd6:	ff 35 88 64 02 c0    	push   DWORD PTR ds:0xc0026488
c0013cdc:	e8 43 52 ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c0013ce1:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013ce6:	89 c3                	mov    ebx,eax
c0013ce8:	58                   	pop    eax
c0013ce9:	5a                   	pop    edx
c0013cea:	53                   	push   ebx
c0013ceb:	68 cc 42 02 c0       	push   0xc00242cc
c0013cf0:	e8 ea 8d ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c0013cf5:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013cff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d03:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013d0d:	c1 e0 18             	shl    eax,0x18
c0013d10:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0013d16:	83 c4 10             	add    esp,0x10
c0013d19:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0013d1f:	09 c2                	or     edx,eax
c0013d21:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0013d27:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0013d2d:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013d33:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0013d39:	80 cd c5             	or     ch,0xc5
c0013d3c:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013d42:	f3 90                	pause  
c0013d44:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013d46:	0f ba e1 0c          	bt     ecx,0xc
c0013d4a:	72 f6                	jb     c0013d42 <Krnl::startCPU(int)+0x8b>
c0013d4c:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013d52:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013d58:	09 c1                	or     ecx,eax
c0013d5a:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0013d60:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013d66:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0013d6c:	80 cd 85             	or     ch,0x85
c0013d6f:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013d75:	f3 90                	pause  
c0013d77:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013d79:	0f ba e1 0c          	bt     ecx,0xc
c0013d7d:	72 f6                	jb     c0013d75 <Krnl::startCPU(int)+0xbe>
c0013d7f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013d89:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013d8f:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013d95:	09 c1                	or     ecx,eax
c0013d97:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0013d9d:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013da3:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0013da9:	81 c9 02 06 00 00    	or     ecx,0x602
c0013daf:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013db5:	f3 90                	pause  
c0013db7:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013db9:	0f ba e1 0c          	bt     ecx,0xc
c0013dbd:	72 f6                	jb     c0013db5 <Krnl::startCPU(int)+0xfe>
c0013dbf:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013dc9:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013dcf:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013dd5:	09 c8                	or     eax,ecx
c0013dd7:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0013ddd:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0013de3:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0013de8:	0d 02 06 00 00       	or     eax,0x602
c0013ded:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0013df3:	f3 90                	pause  
c0013df5:	8b 02                	mov    eax,DWORD PTR [edx]
c0013df7:	0f ba e0 0c          	bt     eax,0xc
c0013dfb:	72 f6                	jb     c0013df3 <Krnl::startCPU(int)+0x13c>
c0013dfd:	eb fe                	jmp    c0013dfd <Krnl::startCPU(int)+0x146>
c0013dff:	c3                   	ret    

c0013e00 <Krnl::startCPUs()>:
c0013e00:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c0013e05:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013e0b:	88 c2                	mov    dl,al
c0013e0d:	83 e2 0a             	and    edx,0xa
c0013e10:	80 fa 0a             	cmp    dl,0xa
c0013e13:	75 09                	jne    c0013e1e <Krnl::startCPUs()+0x1e>
c0013e15:	a8 01                	test   al,0x1
c0013e17:	74 05                	je     c0013e1e <Krnl::startCPUs()+0x1e>
c0013e19:	e9 7d c3 fe ff       	jmp    c000019b <prepareTramp>
c0013e1e:	c3                   	ret    
c0013e1f:	90                   	nop

c0013e20 <EnvVarContainer::getEnv(char const*)>:
c0013e20:	57                   	push   edi
c0013e21:	56                   	push   esi
c0013e22:	53                   	push   ebx
c0013e23:	31 db                	xor    ebx,ebx
c0013e25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013e29:	39 1e                	cmp    DWORD PTR [esi],ebx
c0013e2b:	7e 2b                	jle    c0013e58 <EnvVarContainer::getEnv(char const*)+0x38>
c0013e2d:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0013e34:	50                   	push   eax
c0013e35:	50                   	push   eax
c0013e36:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013e39:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0013e3c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013e40:	e8 87 c9 fe ff       	call   c00007cc <strcmp>
c0013e45:	83 c4 10             	add    esp,0x10
c0013e48:	85 c0                	test   eax,eax
c0013e4a:	75 09                	jne    c0013e55 <EnvVarContainer::getEnv(char const*)+0x35>
c0013e4c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013e4f:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0013e53:	eb 05                	jmp    c0013e5a <EnvVarContainer::getEnv(char const*)+0x3a>
c0013e55:	43                   	inc    ebx
c0013e56:	eb d1                	jmp    c0013e29 <EnvVarContainer::getEnv(char const*)+0x9>
c0013e58:	31 c0                	xor    eax,eax
c0013e5a:	5b                   	pop    ebx
c0013e5b:	5e                   	pop    esi
c0013e5c:	5f                   	pop    edi
c0013e5d:	c3                   	ret    

c0013e5e <EnvVarContainer::setEnv(char const*, char const*)>:
c0013e5e:	55                   	push   ebp
c0013e5f:	57                   	push   edi
c0013e60:	56                   	push   esi
c0013e61:	53                   	push   ebx
c0013e62:	83 ec 28             	sub    esp,0x28
c0013e65:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0013e69:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0013e6d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0013e71:	56                   	push   esi
c0013e72:	e8 29 c8 fe ff       	call   c00006a0 <strlen>
c0013e77:	40                   	inc    eax
c0013e78:	89 04 24             	mov    DWORD PTR [esp],eax
c0013e7b:	e8 43 5b ff ff       	call   c00099c3 <malloc>
c0013e80:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e83:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013e87:	e8 14 c8 fe ff       	call   c00006a0 <strlen>
c0013e8c:	40                   	inc    eax
c0013e8d:	89 04 24             	mov    DWORD PTR [esp],eax
c0013e90:	e8 2e 5b ff ff       	call   c00099c3 <malloc>
c0013e95:	89 34 24             	mov    DWORD PTR [esp],esi
c0013e98:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013e9c:	e8 ff c7 fe ff       	call   c00006a0 <strlen>
c0013ea1:	83 c4 0c             	add    esp,0xc
c0013ea4:	40                   	inc    eax
c0013ea5:	50                   	push   eax
c0013ea6:	6a 00                	push   0x0
c0013ea8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013eac:	e8 d3 c7 fe ff       	call   c0000684 <memset>
c0013eb1:	89 34 24             	mov    DWORD PTR [esp],esi
c0013eb4:	e8 e7 c7 fe ff       	call   c00006a0 <strlen>
c0013eb9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013ebd:	8d 48 01             	lea    ecx,[eax+0x1]
c0013ec0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ec2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ec5:	89 de                	mov    esi,ebx
c0013ec7:	e8 d4 c7 fe ff       	call   c00006a0 <strlen>
c0013ecc:	83 c4 0c             	add    esp,0xc
c0013ecf:	40                   	inc    eax
c0013ed0:	50                   	push   eax
c0013ed1:	6a 00                	push   0x0
c0013ed3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ed7:	e8 a8 c7 fe ff       	call   c0000684 <memset>
c0013edc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013edf:	e8 bc c7 fe ff       	call   c00006a0 <strlen>
c0013ee4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013ee8:	8d 48 01             	lea    ecx,[eax+0x1]
c0013eeb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013eed:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013ef0:	40                   	inc    eax
c0013ef1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013ef4:	c1 e0 03             	shl    eax,0x3
c0013ef7:	5a                   	pop    edx
c0013ef8:	59                   	pop    ecx
c0013ef9:	50                   	push   eax
c0013efa:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0013efd:	e8 ad 5a ff ff       	call   c00099af <realloc>
c0013f02:	8d 74 24 18          	lea    esi,[esp+0x18]
c0013f06:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0013f09:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0013f0c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0013f10:	b9 08 00 00 00       	mov    ecx,0x8
c0013f15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013f17:	83 c4 2c             	add    esp,0x2c
c0013f1a:	5b                   	pop    ebx
c0013f1b:	5e                   	pop    esi
c0013f1c:	5f                   	pop    edi
c0013f1d:	5d                   	pop    ebp
c0013f1e:	c3                   	ret    
c0013f1f:	90                   	nop

c0013f20 <EnvVarContainer::deleteEnv(char const*)>:
c0013f20:	c3                   	ret    
c0013f21:	90                   	nop

c0013f22 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0013f22:	55                   	push   ebp
c0013f23:	57                   	push   edi
c0013f24:	56                   	push   esi
c0013f25:	53                   	push   ebx
c0013f26:	81 ec 38 01 00 00    	sub    esp,0x138
c0013f2c:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0013f33:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0013f3a:	68 14 01 00 00       	push   0x114
c0013f3f:	e8 7f 5a ff ff       	call   c00099c3 <malloc>
c0013f44:	83 c4 0c             	add    esp,0xc
c0013f47:	89 c3                	mov    ebx,eax
c0013f49:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0013f4c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0013f53:	50                   	push   eax
c0013f54:	e8 f1 90 ff ff       	call   c000d04a <File::File(char const*, Process*)>
c0013f59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f5c:	e8 bb 93 ff ff       	call   c000d31c <File::exists()>
c0013f61:	83 c4 10             	add    esp,0x10
c0013f64:	84 c0                	test   al,al
c0013f66:	75 31                	jne    c0013f99 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0013f68:	50                   	push   eax
c0013f69:	50                   	push   eax
c0013f6a:	6a 12                	push   0x12
c0013f6c:	53                   	push   ebx
c0013f6d:	e8 3c 91 ff ff       	call   c000d0ae <File::open(FileOpenMode)>
c0013f72:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f74:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0013f77:	89 34 24             	mov    DWORD PTR [esp],esi
c0013f7a:	e8 21 c7 fe ff       	call   c00006a0 <strlen>
c0013f7f:	5a                   	pop    edx
c0013f80:	31 d2                	xor    edx,edx
c0013f82:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0013f86:	51                   	push   ecx
c0013f87:	56                   	push   esi
c0013f88:	52                   	push   edx
c0013f89:	50                   	push   eax
c0013f8a:	53                   	push   ebx
c0013f8b:	ff d7                	call   edi
c0013f8d:	83 c4 14             	add    esp,0x14
c0013f90:	53                   	push   ebx
c0013f91:	e8 76 91 ff ff       	call   c000d10c <File::close()>
c0013f96:	83 c4 10             	add    esp,0x10
c0013f99:	56                   	push   esi
c0013f9a:	31 f6                	xor    esi,esi
c0013f9c:	68 00 01 00 00       	push   0x100
c0013fa1:	6a 00                	push   0x0
c0013fa3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0013fa7:	50                   	push   eax
c0013fa8:	e8 d7 c6 fe ff       	call   c0000684 <memset>
c0013fad:	5f                   	pop    edi
c0013fae:	58                   	pop    eax
c0013faf:	6a 01                	push   0x1
c0013fb1:	53                   	push   ebx
c0013fb2:	e8 f7 90 ff ff       	call   c000d0ae <File::open(FileOpenMode)>
c0013fb7:	83 c4 10             	add    esp,0x10
c0013fba:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013fc2:	83 ec 0c             	sub    esp,0xc
c0013fc5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013fc7:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0013fcb:	51                   	push   ecx
c0013fcc:	8d 54 24 23          	lea    edx,[esp+0x23]
c0013fd0:	52                   	push   edx
c0013fd1:	6a 00                	push   0x0
c0013fd3:	6a 01                	push   0x1
c0013fd5:	53                   	push   ebx
c0013fd6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013fd9:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0013fdd:	83 c4 20             	add    esp,0x20
c0013fe0:	3c 0d                	cmp    al,0xd
c0013fe2:	0f 84 09 01 00 00    	je     c00140f1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0013fe8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013fed:	0f 84 ef 00 00 00    	je     c00140e2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0013ff3:	3c 0a                	cmp    al,0xa
c0013ff5:	74 13                	je     c001400a <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0013ff7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0013ffc:	74 0c                	je     c001400a <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0013ffe:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0014004:	0f 8e d8 00 00 00    	jle    c00140e2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c001400a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001400e:	83 ec 0c             	sub    esp,0xc
c0014011:	8d 78 01             	lea    edi,[eax+0x1]
c0014014:	57                   	push   edi
c0014015:	e8 a9 59 ff ff       	call   c00099c3 <malloc>
c001401a:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001401e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014022:	8d 56 04             	lea    edx,[esi+0x4]
c0014025:	89 14 24             	mov    DWORD PTR [esp],edx
c0014028:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001402c:	e8 92 59 ff ff       	call   c00099c3 <malloc>
c0014031:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014035:	83 c4 0c             	add    esp,0xc
c0014038:	57                   	push   edi
c0014039:	6a 00                	push   0x0
c001403b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001403f:	e8 40 c6 fe ff       	call   c0000684 <memset>
c0014044:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014048:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001404c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014050:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014052:	83 c4 0c             	add    esp,0xc
c0014055:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014059:	52                   	push   edx
c001405a:	6a 00                	push   0x0
c001405c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014060:	e8 1f c6 fe ff       	call   c0000684 <memset>
c0014065:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014069:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001406d:	89 34 24             	mov    DWORD PTR [esp],esi
c0014070:	e8 2b c6 fe ff       	call   c00006a0 <strlen>
c0014075:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0014079:	89 c1                	mov    ecx,eax
c001407b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001407d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014080:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0014083:	40                   	inc    eax
c0014084:	83 c4 10             	add    esp,0x10
c0014087:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001408a:	85 d2                	test   edx,edx
c001408c:	75 0c                	jne    c001409a <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c001408e:	83 ec 0c             	sub    esp,0xc
c0014091:	6a 08                	push   0x8
c0014093:	e8 2b 59 ff ff       	call   c00099c3 <malloc>
c0014098:	eb 0c                	jmp    c00140a6 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c001409a:	c1 e0 03             	shl    eax,0x3
c001409d:	51                   	push   ecx
c001409e:	51                   	push   ecx
c001409f:	50                   	push   eax
c00140a0:	52                   	push   edx
c00140a1:	e8 09 59 ff ff       	call   c00099af <realloc>
c00140a6:	83 c4 10             	add    esp,0x10
c00140a9:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00140ac:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00140af:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00140b2:	8d 74 24 18          	lea    esi,[esp+0x18]
c00140b6:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00140ba:	b9 08 00 00 00       	mov    ecx,0x8
c00140bf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00140c1:	31 f6                	xor    esi,esi
c00140c3:	50                   	push   eax
c00140c4:	68 00 01 00 00       	push   0x100
c00140c9:	6a 00                	push   0x0
c00140cb:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00140cf:	50                   	push   eax
c00140d0:	e8 af c5 fe ff       	call   c0000684 <memset>
c00140d5:	83 c4 10             	add    esp,0x10
c00140d8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00140e0:	eb 0f                	jmp    c00140f1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00140e2:	3c 3d                	cmp    al,0x3d
c00140e4:	74 07                	je     c00140ed <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c00140e6:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c00140ea:	46                   	inc    esi
c00140eb:	eb 04                	jmp    c00140f1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00140ed:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00140f1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00140f6:	0f 85 c6 fe ff ff    	jne    c0013fc2 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00140fc:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014102:	5b                   	pop    ebx
c0014103:	5e                   	pop    esi
c0014104:	5f                   	pop    edi
c0014105:	5d                   	pop    ebp
c0014106:	c3                   	ret    
c0014107:	90                   	nop

c0014108 <EnvVarContainer::__loadSystem()>:
c0014108:	83 ec 10             	sub    esp,0x10
c001410b:	68 60 5e 02 c0       	push   0xc0025e60
c0014110:	68 dd 42 02 c0       	push   0xc00242dd
c0014115:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014119:	e8 04 fe ff ff       	call   c0013f22 <EnvVarContainer::loadFrom(char const*, char const*)>
c001411e:	83 c4 1c             	add    esp,0x1c
c0014121:	c3                   	ret    

c0014122 <EnvVarContainer::__loadUser()>:
c0014122:	c3                   	ret    
c0014123:	90                   	nop

c0014124 <EnvVarContainer::EnvVarContainer(Process*)>:
c0014124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014128:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001412e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014132:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014136:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0014139:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001413d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014144:	90                   	nop
c0014145:	c3                   	ret    

c0014146 <EnvVarContainer::~EnvVarContainer()>:
c0014146:	83 ec 0c             	sub    esp,0xc
c0014149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001414d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014150:	85 c0                	test   eax,eax
c0014152:	74 1d                	je     c0014171 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014158:	8b 00                	mov    eax,DWORD PTR [eax]
c001415a:	85 c0                	test   eax,eax
c001415c:	74 13                	je     c0014171 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001415e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014162:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014165:	83 ec 0c             	sub    esp,0xc
c0014168:	50                   	push   eax
c0014169:	e8 65 58 ff ff       	call   c00099d3 <free>
c001416e:	83 c4 10             	add    esp,0x10
c0014171:	90                   	nop
c0014172:	83 c4 0c             	add    esp,0xc
c0014175:	c3                   	ret    

c0014176 <Krnl::getEnv(Process*, char const*)>:
c0014176:	53                   	push   ebx
c0014177:	83 ec 08             	sub    esp,0x8
c001417a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001417e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014182:	39 05 70 79 02 c0    	cmp    DWORD PTR ds:0xc0027970,eax
c0014188:	74 04                	je     c001418e <Krnl::getEnv(Process*, char const*)+0x18>
c001418a:	85 c0                	test   eax,eax
c001418c:	75 0b                	jne    c0014199 <Krnl::getEnv(Process*, char const*)+0x23>
c001418e:	a1 54 6f 02 c0       	mov    eax,ds:0xc0026f54
c0014193:	85 c0                	test   eax,eax
c0014195:	75 19                	jne    c00141b0 <Krnl::getEnv(Process*, char const*)+0x3a>
c0014197:	eb 27                	jmp    c00141c0 <Krnl::getEnv(Process*, char const*)+0x4a>
c0014199:	52                   	push   edx
c001419a:	52                   	push   edx
c001419b:	53                   	push   ebx
c001419c:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00141a2:	e8 79 fc ff ff       	call   c0013e20 <EnvVarContainer::getEnv(char const*)>
c00141a7:	83 c4 10             	add    esp,0x10
c00141aa:	85 c0                	test   eax,eax
c00141ac:	75 28                	jne    c00141d6 <Krnl::getEnv(Process*, char const*)+0x60>
c00141ae:	eb de                	jmp    c001418e <Krnl::getEnv(Process*, char const*)+0x18>
c00141b0:	52                   	push   edx
c00141b1:	52                   	push   edx
c00141b2:	53                   	push   ebx
c00141b3:	50                   	push   eax
c00141b4:	e8 67 fc ff ff       	call   c0013e20 <EnvVarContainer::getEnv(char const*)>
c00141b9:	83 c4 10             	add    esp,0x10
c00141bc:	85 c0                	test   eax,eax
c00141be:	75 16                	jne    c00141d6 <Krnl::getEnv(Process*, char const*)+0x60>
c00141c0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00141c4:	a1 58 6f 02 c0       	mov    eax,ds:0xc0026f58
c00141c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00141cd:	83 c4 08             	add    esp,0x8
c00141d0:	5b                   	pop    ebx
c00141d1:	e9 4a fc ff ff       	jmp    c0013e20 <EnvVarContainer::getEnv(char const*)>
c00141d6:	83 c4 08             	add    esp,0x8
c00141d9:	5b                   	pop    ebx
c00141da:	c3                   	ret    

c00141db <Krnl::setEnvSystem(char const*, char const*)>:
c00141db:	83 ec 10             	sub    esp,0x10
c00141de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00141e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00141e6:	ff 35 58 6f 02 c0    	push   DWORD PTR ds:0xc0026f58
c00141ec:	e8 6d fc ff ff       	call   c0013e5e <EnvVarContainer::setEnv(char const*, char const*)>
c00141f1:	83 c4 1c             	add    esp,0x1c
c00141f4:	c3                   	ret    

c00141f5 <Krnl::setEnvUser(char const*, char const*)>:
c00141f5:	a1 54 6f 02 c0       	mov    eax,ds:0xc0026f54
c00141fa:	85 c0                	test   eax,eax
c00141fc:	74 15                	je     c0014213 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00141fe:	83 ec 10             	sub    esp,0x10
c0014201:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014205:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014209:	50                   	push   eax
c001420a:	e8 4f fc ff ff       	call   c0013e5e <EnvVarContainer::setEnv(char const*, char const*)>
c001420f:	83 c4 1c             	add    esp,0x1c
c0014212:	c3                   	ret    
c0014213:	c3                   	ret    

c0014214 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0014214:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014218:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c001421e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014222:	e9 37 fc ff ff       	jmp    c0013e5e <EnvVarContainer::setEnv(char const*, char const*)>

c0014227 <Krnl::deleteEnvSystem(char const*)>:
c0014227:	c3                   	ret    

c0014228 <Krnl::deleteEnvUser(char const*)>:
c0014228:	c3                   	ret    

c0014229 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0014229:	c3                   	ret    

c001422a <Krnl::newProcessEnv(Process*)>:
c001422a:	83 ec 28             	sub    esp,0x28
c001422d:	6a 0c                	push   0xc
c001422f:	e8 8f 57 ff ff       	call   c00099c3 <malloc>
c0014234:	5a                   	pop    edx
c0014235:	59                   	pop    ecx
c0014236:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001423a:	50                   	push   eax
c001423b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001423f:	e8 e0 fe ff ff       	call   c0014124 <EnvVarContainer::EnvVarContainer(Process*)>
c0014244:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014248:	83 c4 2c             	add    esp,0x2c
c001424b:	c3                   	ret    

c001424c <Krnl::copyProcessEnv(Process*, Process*)>:
c001424c:	57                   	push   edi
c001424d:	56                   	push   esi
c001424e:	53                   	push   ebx
c001424f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014253:	83 ec 0c             	sub    esp,0xc
c0014256:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001425c:	6a 0c                	push   0xc
c001425e:	e8 60 57 ff ff       	call   c00099c3 <malloc>
c0014263:	89 c3                	mov    ebx,eax
c0014265:	58                   	pop    eax
c0014266:	5a                   	pop    edx
c0014267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001426b:	53                   	push   ebx
c001426c:	e8 b3 fe ff ff       	call   c0014124 <EnvVarContainer::EnvVarContainer(Process*)>
c0014271:	8b 07                	mov    eax,DWORD PTR [edi]
c0014273:	89 03                	mov    DWORD PTR [ebx],eax
c0014275:	c1 e0 03             	shl    eax,0x3
c0014278:	89 04 24             	mov    DWORD PTR [esp],eax
c001427b:	e8 43 57 ff ff       	call   c00099c3 <malloc>
c0014280:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014283:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014285:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0014288:	c1 e1 03             	shl    ecx,0x3
c001428b:	89 c7                	mov    edi,eax
c001428d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001428f:	83 c4 10             	add    esp,0x10
c0014292:	89 d8                	mov    eax,ebx
c0014294:	5b                   	pop    ebx
c0014295:	5e                   	pop    esi
c0014296:	5f                   	pop    edi
c0014297:	c3                   	ret    

c0014298 <Krnl::loadSystemEnv()>:
c0014298:	53                   	push   ebx
c0014299:	83 ec 14             	sub    esp,0x14
c001429c:	6a 0c                	push   0xc
c001429e:	e8 20 57 ff ff       	call   c00099c3 <malloc>
c00142a3:	89 c3                	mov    ebx,eax
c00142a5:	58                   	pop    eax
c00142a6:	5a                   	pop    edx
c00142a7:	ff 35 70 79 02 c0    	push   DWORD PTR ds:0xc0027970
c00142ad:	53                   	push   ebx
c00142ae:	e8 71 fe ff ff       	call   c0014124 <EnvVarContainer::EnvVarContainer(Process*)>
c00142b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00142b6:	89 1d 58 6f 02 c0    	mov    DWORD PTR ds:0xc0026f58,ebx
c00142bc:	e8 47 fe ff ff       	call   c0014108 <EnvVarContainer::__loadSystem()>
c00142c1:	83 c4 18             	add    esp,0x18
c00142c4:	5b                   	pop    ebx
c00142c5:	c3                   	ret    

c00142c6 <Krnl::loadUserEnv()>:
c00142c6:	53                   	push   ebx
c00142c7:	83 ec 14             	sub    esp,0x14
c00142ca:	6a 0c                	push   0xc
c00142cc:	e8 f2 56 ff ff       	call   c00099c3 <malloc>
c00142d1:	89 c3                	mov    ebx,eax
c00142d3:	58                   	pop    eax
c00142d4:	5a                   	pop    edx
c00142d5:	ff 35 70 79 02 c0    	push   DWORD PTR ds:0xc0027970
c00142db:	53                   	push   ebx
c00142dc:	e8 43 fe ff ff       	call   c0014124 <EnvVarContainer::EnvVarContainer(Process*)>
c00142e1:	89 1d 54 6f 02 c0    	mov    DWORD PTR ds:0xc0026f54,ebx
c00142e7:	83 c4 18             	add    esp,0x18
c00142ea:	5b                   	pop    ebx
c00142eb:	c3                   	ret    

c00142ec <Krnl::flushEnv()>:
c00142ec:	c3                   	ret    

c00142ed <Krnl::getProcessTotalEnvCount(Process*)>:
c00142ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142f1:	8b 15 54 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026f54
c00142f7:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00142fd:	a1 58 6f 02 c0       	mov    eax,ds:0xc0026f58
c0014302:	8b 00                	mov    eax,DWORD PTR [eax]
c0014304:	03 01                	add    eax,DWORD PTR [ecx]
c0014306:	85 d2                	test   edx,edx
c0014308:	74 02                	je     c001430c <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001430a:	03 02                	add    eax,DWORD PTR [edx]
c001430c:	c3                   	ret    

c001430d <Krnl::getProcessEnvPair(Process*, int)>:
c001430d:	57                   	push   edi
c001430e:	56                   	push   esi
c001430f:	8b 35 54 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026f54
c0014315:	53                   	push   ebx
c0014316:	85 f6                	test   esi,esi
c0014318:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001431c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014320:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0014326:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001432a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001432c:	75 16                	jne    c0014344 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c001432e:	39 c2                	cmp    edx,eax
c0014330:	7c 16                	jl     c0014348 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0014332:	8b 0d 58 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026f58
c0014338:	8b 31                	mov    esi,DWORD PTR [ecx]
c001433a:	01 c6                	add    esi,eax
c001433c:	39 d6                	cmp    esi,edx
c001433e:	7e 3c                	jle    c001437c <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0014340:	29 c2                	sub    edx,eax
c0014342:	eb 04                	jmp    c0014348 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0014344:	39 c2                	cmp    edx,eax
c0014346:	7d 05                	jge    c001434d <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0014348:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001434b:	eb 20                	jmp    c001436d <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001434d:	8b 3e                	mov    edi,DWORD PTR [esi]
c001434f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0014352:	39 d1                	cmp    ecx,edx
c0014354:	7e 04                	jle    c001435a <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0014356:	29 c2                	sub    edx,eax
c0014358:	eb 10                	jmp    c001436a <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c001435a:	8b 35 58 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026f58
c0014360:	03 0e                	add    ecx,DWORD PTR [esi]
c0014362:	39 d1                	cmp    ecx,edx
c0014364:	7e 16                	jle    c001437c <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0014366:	29 c2                	sub    edx,eax
c0014368:	29 fa                	sub    edx,edi
c001436a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001436d:	8d 14 d0             	lea    edx,[eax+edx*8]
c0014370:	8b 02                	mov    eax,DWORD PTR [edx]
c0014372:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0014375:	89 03                	mov    DWORD PTR [ebx],eax
c0014377:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001437a:	eb 1d                	jmp    c0014399 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001437c:	83 ec 0c             	sub    esp,0xc
c001437f:	68 ff 42 02 c0       	push   0xc00242ff
c0014384:	e8 18 00 00 00       	call   c00143a1 <Krnl::panic(char const*)>
c0014389:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001438f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0014396:	83 c4 10             	add    esp,0x10
c0014399:	89 d8                	mov    eax,ebx
c001439b:	5b                   	pop    ebx
c001439c:	5e                   	pop    esi
c001439d:	5f                   	pop    edi
c001439e:	c2 04 00             	ret    0x4

c00143a1 <Krnl::panic(char const*)>:
c00143a1:	55                   	push   ebp
c00143a2:	89 e5                	mov    ebp,esp
c00143a4:	53                   	push   ebx
c00143a5:	83 ec 10             	sub    esp,0x10
c00143a8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00143ab:	fa                   	cli    
c00143ac:	c6 05 64 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026f64,0x1
c00143b3:	53                   	push   ebx
c00143b4:	e8 64 56 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00143b9:	58                   	pop    eax
c00143ba:	c6 05 60 58 02 c0 00 	mov    BYTE PTR ds:0xc0025860,0x0
c00143c1:	5a                   	pop    edx
c00143c2:	53                   	push   ebx
c00143c3:	68 19 43 02 c0       	push   0xc0024319
c00143c8:	e8 12 87 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c00143cd:	59                   	pop    ecx
c00143ce:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c00143d3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143d9:	e8 5d 64 ff ff       	call   c000a83b <setActiveTerminal(VgaText*)>
c00143de:	83 c4 0c             	add    esp,0xc
c00143e1:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c00143e6:	6a 01                	push   0x1
c00143e8:	6a 0f                	push   0xf
c00143ea:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143f0:	e8 a5 62 ff ff       	call   c000a69a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00143f5:	58                   	pop    eax
c00143f6:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c00143fb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014401:	e8 b6 67 ff ff       	call   c000abbc <VgaText::clearScreen()>
c0014406:	58                   	pop    eax
c0014407:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c001440c:	5a                   	pop    edx
c001440d:	68 32 43 02 c0       	push   0xc0024332
c0014412:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014418:	e8 2b 69 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c001441d:	59                   	pop    ecx
c001441e:	58                   	pop    eax
c001441f:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c0014424:	68 d8 43 02 c0       	push   0xc00243d8
c0014429:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001442f:	e8 14 69 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c0014434:	58                   	pop    eax
c0014435:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c001443a:	5a                   	pop    edx
c001443b:	68 4e 43 02 c0       	push   0xc002434e
c0014440:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014446:	e8 fd 68 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c001444b:	59                   	pop    ecx
c001444c:	58                   	pop    eax
c001444d:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c0014452:	53                   	push   ebx
c0014453:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014459:	e8 ea 68 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c001445e:	58                   	pop    eax
c001445f:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c0014464:	5a                   	pop    edx
c0014465:	68 6e 43 02 c0       	push   0xc002436e
c001446a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014470:	e8 d3 68 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c0014475:	a1 60 6f 02 c0       	mov    eax,ds:0xc0026f60
c001447a:	83 c4 10             	add    esp,0x10
c001447d:	85 c0                	test   eax,eax
c001447f:	74 02                	je     c0014483 <Krnl::panic(char const*)+0xe2>
c0014481:	ff d0                	call   eax
c0014483:	83 ec 0c             	sub    esp,0xc
c0014486:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014489:	e8 af 30 00 00       	call   c001753d <Thr::getDriverNameFromAddress(unsigned long)>
c001448e:	83 c4 10             	add    esp,0x10
c0014491:	89 c3                	mov    ebx,eax
c0014493:	85 c0                	test   eax,eax
c0014495:	0f 84 4e 02 00 00    	je     c00146e9 <Krnl::panic(char const*)+0x348>
c001449b:	83 ec 08             	sub    esp,0x8
c001449e:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c00144a3:	68 14 44 02 c0       	push   0xc0024414
c00144a8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00144ae:	e8 95 68 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c00144b3:	58                   	pop    eax
c00144b4:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c00144b9:	5a                   	pop    edx
c00144ba:	68 4e 43 02 c0       	push   0xc002434e
c00144bf:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00144c5:	e8 7e 68 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c00144ca:	59                   	pop    ecx
c00144cb:	58                   	pop    eax
c00144cc:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c00144d1:	53                   	push   ebx
c00144d2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00144d8:	e8 6b 68 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c00144dd:	83 c4 10             	add    esp,0x10
c00144e0:	83 ec 08             	sub    esp,0x8
c00144e3:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c00144e8:	68 6d 43 02 c0       	push   0xc002436d
c00144ed:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00144f3:	e8 50 68 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c00144f8:	58                   	pop    eax
c00144f9:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c00144fe:	5a                   	pop    edx
c00144ff:	68 6c 44 02 c0       	push   0xc002446c
c0014504:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001450a:	e8 39 68 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c001450f:	59                   	pop    ecx
c0014510:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c0014515:	5b                   	pop    ebx
c0014516:	68 ac 44 02 c0       	push   0xc00244ac
c001451b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014521:	e8 22 68 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c0014526:	58                   	pop    eax
c0014527:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c001452c:	5a                   	pop    edx
c001452d:	68 59 43 02 c0       	push   0xc0024359
c0014532:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014538:	e8 0b 68 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c001453d:	59                   	pop    ecx
c001453e:	5b                   	pop    ebx
c001453f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014542:	68 71 43 02 c0       	push   0xc0024371
c0014547:	e8 93 85 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001454c:	58                   	pop    eax
c001454d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014550:	5a                   	pop    edx
c0014551:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014554:	68 7a 43 02 c0       	push   0xc002437a
c0014559:	e8 81 85 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001455e:	59                   	pop    ecx
c001455f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014562:	5b                   	pop    ebx
c0014563:	8b 00                	mov    eax,DWORD PTR [eax]
c0014565:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014568:	68 83 43 02 c0       	push   0xc0024383
c001456d:	e8 6d 85 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c0014572:	58                   	pop    eax
c0014573:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c0014578:	5a                   	pop    edx
c0014579:	68 f0 44 02 c0       	push   0xc00244f0
c001457e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014584:	e8 bf 67 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c0014589:	59                   	pop    ecx
c001458a:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c001458f:	5b                   	pop    ebx
c0014590:	68 8c 43 02 c0       	push   0xc002438c
c0014595:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001459b:	e8 a8 67 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c00145a0:	0f 20 c0             	mov    eax,cr0
c00145a3:	5a                   	pop    edx
c00145a4:	59                   	pop    ecx
c00145a5:	50                   	push   eax
c00145a6:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c00145ab:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00145b1:	e8 4c 67 ff ff       	call   c000ad02 <VgaText::putx(unsigned int)>
c00145b6:	5b                   	pop    ebx
c00145b7:	58                   	pop    eax
c00145b8:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c00145bd:	68 96 43 02 c0       	push   0xc0024396
c00145c2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00145c8:	e8 7b 67 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c00145cd:	0f 20 d0             	mov    eax,cr2
c00145d0:	5a                   	pop    edx
c00145d1:	59                   	pop    ecx
c00145d2:	50                   	push   eax
c00145d3:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c00145d8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00145de:	e8 1f 67 ff ff       	call   c000ad02 <VgaText::putx(unsigned int)>
c00145e3:	5b                   	pop    ebx
c00145e4:	58                   	pop    eax
c00145e5:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c00145ea:	68 a0 43 02 c0       	push   0xc00243a0
c00145ef:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00145f5:	e8 4e 67 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c00145fa:	0f 20 d8             	mov    eax,cr3
c00145fd:	5a                   	pop    edx
c00145fe:	59                   	pop    ecx
c00145ff:	50                   	push   eax
c0014600:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c0014605:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001460b:	e8 f2 66 ff ff       	call   c000ad02 <VgaText::putx(unsigned int)>
c0014610:	5b                   	pop    ebx
c0014611:	58                   	pop    eax
c0014612:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c0014617:	68 b3 43 02 c0       	push   0xc00243b3
c001461c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014622:	e8 21 67 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c0014627:	0f 20 e0             	mov    eax,cr4
c001462a:	5a                   	pop    edx
c001462b:	59                   	pop    ecx
c001462c:	50                   	push   eax
c001462d:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c0014632:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014638:	e8 c5 66 ff ff       	call   c000ad02 <VgaText::putx(unsigned int)>
c001463d:	5b                   	pop    ebx
c001463e:	58                   	pop    eax
c001463f:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c0014644:	68 bd 43 02 c0       	push   0xc00243bd
c0014649:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001464f:	e8 f4 66 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c0014654:	5a                   	pop    edx
c0014655:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c001465a:	59                   	pop    ecx
c001465b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014661:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014664:	50                   	push   eax
c0014665:	e8 98 66 ff ff       	call   c000ad02 <VgaText::putx(unsigned int)>
c001466a:	5b                   	pop    ebx
c001466b:	58                   	pop    eax
c001466c:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c0014671:	68 d4 43 02 c0       	push   0xc00243d4
c0014676:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001467c:	e8 c7 66 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c0014681:	5a                   	pop    edx
c0014682:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c0014687:	59                   	pop    ecx
c0014688:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001468e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014691:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014694:	50                   	push   eax
c0014695:	e8 68 66 ff ff       	call   c000ad02 <VgaText::putx(unsigned int)>
c001469a:	5b                   	pop    ebx
c001469b:	58                   	pop    eax
c001469c:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c00146a1:	68 d4 43 02 c0       	push   0xc00243d4
c00146a6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00146ac:	e8 97 66 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c00146b1:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c00146b6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00146b9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00146bf:	8b 12                	mov    edx,DWORD PTR [edx]
c00146c1:	59                   	pop    ecx
c00146c2:	5b                   	pop    ebx
c00146c3:	ff 72 04             	push   DWORD PTR [edx+0x4]
c00146c6:	50                   	push   eax
c00146c7:	e8 36 66 ff ff       	call   c000ad02 <VgaText::putx(unsigned int)>
c00146cc:	83 c4 10             	add    esp,0x10
c00146cf:	b2 fe                	mov    dl,0xfe
c00146d1:	e4 60                	in     al,0x60
c00146d3:	3c 1c                	cmp    al,0x1c
c00146d5:	74 04                	je     c00146db <Krnl::panic(char const*)+0x33a>
c00146d7:	3c 5a                	cmp    al,0x5a
c00146d9:	75 f6                	jne    c00146d1 <Krnl::panic(char const*)+0x330>
c00146db:	e4 64                	in     al,0x64
c00146dd:	a8 02                	test   al,0x2
c00146df:	75 fa                	jne    c00146db <Krnl::panic(char const*)+0x33a>
c00146e1:	88 d0                	mov    al,dl
c00146e3:	e6 64                	out    0x64,al
c00146e5:	fa                   	cli    
c00146e6:	f4                   	hlt    
c00146e7:	eb e8                	jmp    c00146d1 <Krnl::panic(char const*)+0x330>
c00146e9:	50                   	push   eax
c00146ea:	50                   	push   eax
c00146eb:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c00146f0:	68 40 44 02 c0       	push   0xc0024440
c00146f5:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00146fb:	e8 48 66 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c0014700:	58                   	pop    eax
c0014701:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c0014706:	5a                   	pop    edx
c0014707:	68 4e 43 02 c0       	push   0xc002434e
c001470c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014712:	e8 31 66 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c0014717:	59                   	pop    ecx
c0014718:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001471d:	5b                   	pop    ebx
c001471e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014721:	83 c0 0c             	add    eax,0xc
c0014724:	50                   	push   eax
c0014725:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c001472a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014730:	e8 13 66 ff ff       	call   c000ad48 <VgaText::puts(char const*)>
c0014735:	83 c4 10             	add    esp,0x10
c0014738:	e9 a3 fd ff ff       	jmp    c00144e0 <Krnl::panic(char const*)+0x13f>
c001473d:	66 90                	xchg   ax,ax
c001473f:	90                   	nop

c0014740 <Net::switchEndian16(unsigned short)>:
c0014740:	83 ec 04             	sub    esp,0x4
c0014743:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014747:	66 89 04 24          	mov    WORD PTR [esp],ax
c001474b:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001474f:	c1 f8 08             	sar    eax,0x8
c0014752:	89 c2                	mov    edx,eax
c0014754:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0014758:	c1 e0 08             	shl    eax,0x8
c001475b:	09 d0                	or     eax,edx
c001475d:	83 c4 04             	add    esp,0x4
c0014760:	c3                   	ret    
c0014761:	8d 76 00             	lea    esi,[esi+0x0]

c0014764 <Net::switchEndian32(unsigned int)>:
c0014764:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014768:	c1 e8 18             	shr    eax,0x18
c001476b:	89 c2                	mov    edx,eax
c001476d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014771:	c1 e0 08             	shl    eax,0x8
c0014774:	25 00 00 ff 00       	and    eax,0xff0000
c0014779:	09 c2                	or     edx,eax
c001477b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001477f:	c1 e8 08             	shr    eax,0x8
c0014782:	25 00 ff 00 00       	and    eax,0xff00
c0014787:	09 c2                	or     edx,eax
c0014789:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001478d:	c1 e0 18             	shl    eax,0x18
c0014790:	09 d0                	or     eax,edx
c0014792:	c3                   	ret    
c0014793:	90                   	nop

c0014794 <Net::crc32Calc(unsigned char*, int)>:
c0014794:	83 ec 10             	sub    esp,0x10
c0014797:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001479c:	75 0a                	jne    c00147a8 <Net::crc32Calc(unsigned char*, int)+0x14>
c001479e:	b8 00 00 00 00       	mov    eax,0x0
c00147a3:	e9 8c 00 00 00       	jmp    c0014834 <Net::crc32Calc(unsigned char*, int)+0xa0>
c00147a8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00147ad:	7f 09                	jg     c00147b8 <Net::crc32Calc(unsigned char*, int)+0x24>
c00147af:	b8 00 00 00 00       	mov    eax,0x0
c00147b4:	eb 7e                	jmp    c0014834 <Net::crc32Calc(unsigned char*, int)+0xa0>
c00147b6:	66 90                	xchg   ax,ax
c00147b8:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c00147c0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00147c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00147cc:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c00147d0:	7d 5a                	jge    c001482c <Net::crc32Calc(unsigned char*, int)+0x98>
c00147d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00147d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147da:	01 d0                	add    eax,edx
c00147dc:	8a 00                	mov    al,BYTE PTR [eax]
c00147de:	0f b6 c0             	movzx  eax,al
c00147e1:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c00147e5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00147ed:	8d 76 00             	lea    esi,[esi+0x0]
c00147f0:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c00147f5:	7f 2d                	jg     c0014824 <Net::crc32Calc(unsigned char*, int)+0x90>
c00147f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00147fb:	83 e0 01             	and    eax,0x1
c00147fe:	74 10                	je     c0014810 <Net::crc32Calc(unsigned char*, int)+0x7c>
c0014800:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014804:	d1 e8                	shr    eax,1
c0014806:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001480b:	eb 0b                	jmp    c0014818 <Net::crc32Calc(unsigned char*, int)+0x84>
c001480d:	8d 76 00             	lea    esi,[esi+0x0]
c0014810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014814:	d1 e8                	shr    eax,1
c0014816:	66 90                	xchg   ax,ax
c0014818:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001481c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014820:	eb ce                	jmp    c00147f0 <Net::crc32Calc(unsigned char*, int)+0x5c>
c0014822:	66 90                	xchg   ax,ax
c0014824:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014828:	eb 9e                	jmp    c00147c8 <Net::crc32Calc(unsigned char*, int)+0x34>
c001482a:	66 90                	xchg   ax,ax
c001482c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014830:	f7 d0                	not    eax
c0014832:	66 90                	xchg   ax,ax
c0014834:	83 c4 10             	add    esp,0x10
c0014837:	c3                   	ret    

c0014838 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c0014838:	57                   	push   edi
c0014839:	56                   	push   esi
c001483a:	53                   	push   ebx
c001483b:	83 ec 60             	sub    esp,0x60
c001483e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014845:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0014849:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0014851:	8d 76 00             	lea    esi,[esi+0x0]
c0014854:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c0014859:	7f 1d                	jg     c0014878 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x40>
c001485b:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014862:	8d 50 01             	lea    edx,[eax+0x1]
c0014865:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001486c:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001486f:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0014873:	eb df                	jmp    c0014854 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x1c>
c0014875:	8d 76 00             	lea    esi,[esi+0x0]
c0014878:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001487f:	8d 50 01             	lea    edx,[eax+0x1]
c0014882:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014889:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001488c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014893:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014897:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001489b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001489f:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c00148a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00148ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00148af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00148b3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00148b7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00148bb:	89 c6                	mov    esi,eax
c00148bd:	89 d7                	mov    edi,edx
c00148bf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00148c1:	89 c8                	mov    eax,ecx
c00148c3:	89 fa                	mov    edx,edi
c00148c5:	89 f3                	mov    ebx,esi
c00148c7:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00148cb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00148cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00148d2:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c00148da:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00148e1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00148e5:	8d 44 24 78          	lea    eax,[esp+0x78]
c00148e9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00148ed:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c00148f5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00148f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00148fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014901:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014905:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0014909:	89 c6                	mov    esi,eax
c001490b:	89 d7                	mov    edi,edx
c001490d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001490f:	89 c8                	mov    eax,ecx
c0014911:	89 fa                	mov    edx,edi
c0014913:	89 f3                	mov    ebx,esi
c0014915:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0014919:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001491d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014921:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0014929:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014930:	0f b7 c0             	movzx  eax,ax
c0014933:	c1 f8 08             	sar    eax,0x8
c0014936:	89 c1                	mov    ecx,eax
c0014938:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001493f:	8d 50 01             	lea    edx,[eax+0x1]
c0014942:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014949:	88 ca                	mov    dl,cl
c001494b:	88 10                	mov    BYTE PTR [eax],dl
c001494d:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0014954:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001495b:	8d 48 01             	lea    ecx,[eax+0x1]
c001495e:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c0014965:	88 10                	mov    BYTE PTR [eax],dl
c0014967:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001496b:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001496f:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c0014976:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001497a:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001497e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0014982:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0014986:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001498a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001498e:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014992:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0014996:	89 c6                	mov    esi,eax
c0014998:	89 d7                	mov    edi,edx
c001499a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001499c:	89 c8                	mov    eax,ecx
c001499e:	89 fa                	mov    edx,edi
c00149a0:	89 f3                	mov    ebx,esi
c00149a2:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c00149a6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00149aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00149ae:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00149b2:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c00149b9:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00149c0:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c00149c4:	50                   	push   eax
c00149c5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00149c9:	e8 c6 fd ff ff       	call   c0014794 <Net::crc32Calc(unsigned char*, int)>
c00149ce:	83 c4 08             	add    esp,0x8
c00149d1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00149d5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00149d9:	c1 e8 18             	shr    eax,0x18
c00149dc:	89 c1                	mov    ecx,eax
c00149de:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00149e5:	8d 50 01             	lea    edx,[eax+0x1]
c00149e8:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00149ef:	88 ca                	mov    dl,cl
c00149f1:	88 10                	mov    BYTE PTR [eax],dl
c00149f3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00149f7:	c1 e8 10             	shr    eax,0x10
c00149fa:	89 c1                	mov    ecx,eax
c00149fc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014a03:	8d 50 01             	lea    edx,[eax+0x1]
c0014a06:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014a0d:	88 ca                	mov    dl,cl
c0014a0f:	88 10                	mov    BYTE PTR [eax],dl
c0014a11:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0014a15:	c1 e8 08             	shr    eax,0x8
c0014a18:	89 c1                	mov    ecx,eax
c0014a1a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014a21:	8d 50 01             	lea    edx,[eax+0x1]
c0014a24:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014a2b:	88 ca                	mov    dl,cl
c0014a2d:	88 10                	mov    BYTE PTR [eax],dl
c0014a2f:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014a36:	8d 50 01             	lea    edx,[eax+0x1]
c0014a39:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014a40:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0014a44:	88 10                	mov    BYTE PTR [eax],dl
c0014a46:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0014a4a:	83 c4 60             	add    esp,0x60
c0014a4d:	5b                   	pop    ebx
c0014a4e:	5e                   	pop    esi
c0014a4f:	5f                   	pop    edi
c0014a50:	c3                   	ret    
c0014a51:	8d 76 00             	lea    esi,[esi+0x0]

c0014a54 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c0014a54:	57                   	push   edi
c0014a55:	56                   	push   esi
c0014a56:	53                   	push   ebx
c0014a57:	83 ec 70             	sub    esp,0x70
c0014a5a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014a61:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0014a65:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c0014a6d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014a74:	83 c0 0e             	add    eax,0xe
c0014a77:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014a7b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014a82:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014a86:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0014a8e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014a92:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014a96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a9a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014a9e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0014aa2:	89 c6                	mov    esi,eax
c0014aa4:	89 d7                	mov    edi,edx
c0014aa6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014aa8:	89 c8                	mov    eax,ecx
c0014aaa:	89 fa                	mov    edx,edi
c0014aac:	89 f3                	mov    ebx,esi
c0014aae:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0014ab2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0014ab6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014aba:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0014ac2:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014ac9:	83 c0 08             	add    eax,0x8
c0014acc:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0014ad0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014ad7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0014adb:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c0014ae3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0014ae7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014aeb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014aef:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014af3:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0014af7:	89 c6                	mov    esi,eax
c0014af9:	89 d7                	mov    edi,edx
c0014afb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014afd:	89 c8                	mov    eax,ecx
c0014aff:	89 fa                	mov    edx,edi
c0014b01:	89 f3                	mov    ebx,esi
c0014b03:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0014b07:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0014b0b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014b0f:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0014b17:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014b1e:	8d 50 01             	lea    edx,[eax+0x1]
c0014b21:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014b28:	8a 00                	mov    al,BYTE PTR [eax]
c0014b2a:	0f b6 c0             	movzx  eax,al
c0014b2d:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c0014b32:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014b39:	8d 50 01             	lea    edx,[eax+0x1]
c0014b3c:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014b43:	8a 00                	mov    al,BYTE PTR [eax]
c0014b45:	0f b6 c0             	movzx  eax,al
c0014b48:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c0014b4d:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c0014b52:	c1 e0 08             	shl    eax,0x8
c0014b55:	89 c2                	mov    edx,eax
c0014b57:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0014b5b:	09 d0                	or     eax,edx
c0014b5d:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0014b64:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0014b68:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c0014b70:	75 46                	jne    c0014bb8 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0014b72:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014b79:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014b7c:	66 3d dc 05          	cmp    ax,0x5dc
c0014b80:	77 16                	ja     c0014b98 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c0014b82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014b89:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014b8c:	0f b7 c0             	movzx  eax,ax
c0014b8f:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0014b96:	eb 20                	jmp    c0014bb8 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0014b98:	83 ec 0c             	sub    esp,0xc
c0014b9b:	68 18 45 02 c0       	push   0xc0024518
c0014ba0:	e8 3a 7f ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c0014ba5:	83 c4 10             	add    esp,0x10
c0014ba8:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014baf:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c0014bb3:	e9 18 01 00 00       	jmp    c0014cd0 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27c>
c0014bb8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014bbf:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0014bc6:	8b 12                	mov    edx,DWORD PTR [edx]
c0014bc8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014bcc:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0014bd3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014bd7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014bdb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014bdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014be3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014be7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014beb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014bef:	89 c6                	mov    esi,eax
c0014bf1:	89 d7                	mov    edi,edx
c0014bf3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014bf5:	89 c8                	mov    eax,ecx
c0014bf7:	89 fa                	mov    edx,edi
c0014bf9:	89 f3                	mov    ebx,esi
c0014bfb:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0014bff:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014c03:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c06:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014c0d:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c0014c14:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014c1b:	8d 50 01             	lea    edx,[eax+0x1]
c0014c1e:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014c25:	8a 00                	mov    al,BYTE PTR [eax]
c0014c27:	0f b6 c0             	movzx  eax,al
c0014c2a:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0014c2e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014c35:	8d 50 01             	lea    edx,[eax+0x1]
c0014c38:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014c3f:	8a 00                	mov    al,BYTE PTR [eax]
c0014c41:	0f b6 c0             	movzx  eax,al
c0014c44:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0014c48:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014c4f:	8d 50 01             	lea    edx,[eax+0x1]
c0014c52:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014c59:	8a 00                	mov    al,BYTE PTR [eax]
c0014c5b:	0f b6 c0             	movzx  eax,al
c0014c5e:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0014c62:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014c69:	8d 50 01             	lea    edx,[eax+0x1]
c0014c6c:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014c73:	8a 00                	mov    al,BYTE PTR [eax]
c0014c75:	0f b6 c0             	movzx  eax,al
c0014c78:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0014c7c:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0014c80:	c1 e0 18             	shl    eax,0x18
c0014c83:	89 c2                	mov    edx,eax
c0014c85:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0014c89:	c1 e0 10             	shl    eax,0x10
c0014c8c:	09 c2                	or     edx,eax
c0014c8e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0014c92:	c1 e0 08             	shl    eax,0x8
c0014c95:	09 d0                	or     eax,edx
c0014c97:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c0014c9b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0014c9f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014ca6:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0014caa:	83 e8 04             	sub    eax,0x4
c0014cad:	83 ec 08             	sub    esp,0x8
c0014cb0:	50                   	push   eax
c0014cb1:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014cb5:	e8 da fa ff ff       	call   c0014794 <Net::crc32Calc(unsigned char*, int)>
c0014cba:	83 c4 10             	add    esp,0x10
c0014cbd:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0014cc1:	0f 94 c2             	sete   dl
c0014cc4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014ccb:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c0014cce:	90                   	nop
c0014ccf:	90                   	nop
c0014cd0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014cd7:	83 c4 70             	add    esp,0x70
c0014cda:	5b                   	pop    ebx
c0014cdb:	5e                   	pop    esi
c0014cdc:	5f                   	pop    edi
c0014cdd:	c2 04 00             	ret    0x4

c0014ce0 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0014ce0:	55                   	push   ebp
c0014ce1:	57                   	push   edi
c0014ce2:	56                   	push   esi
c0014ce3:	53                   	push   ebx
c0014ce4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014cea:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014cf1:	8a 1e                	mov    bl,BYTE PTR [esi]
c0014cf3:	8d 6e 01             	lea    ebp,[esi+0x1]
c0014cf6:	80 fb 40             	cmp    bl,0x40
c0014cf9:	75 1b                	jne    c0014d16 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0014cfb:	8a 16                	mov    dl,BYTE PTR [esi]
c0014cfd:	84 d2                	test   dl,dl
c0014cff:	0f 84 f1 00 00 00    	je     c0014df6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014d05:	8d 46 01             	lea    eax,[esi+0x1]
c0014d08:	80 fa 3a             	cmp    dl,0x3a
c0014d0b:	74 04                	je     c0014d11 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0014d0d:	89 c6                	mov    esi,eax
c0014d0f:	eb ea                	jmp    c0014cfb <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0014d11:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0014d14:	89 c6                	mov    esi,eax
c0014d16:	50                   	push   eax
c0014d17:	6a 40                	push   0x40
c0014d19:	6a 00                	push   0x0
c0014d1b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014d1f:	50                   	push   eax
c0014d20:	e8 5f b9 fe ff       	call   c0000684 <memset>
c0014d25:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0014d2c:	31 c0                	xor    eax,eax
c0014d2e:	83 c4 10             	add    esp,0x10
c0014d31:	8a 0f                	mov    cl,BYTE PTR [edi]
c0014d33:	84 c9                	test   cl,cl
c0014d35:	0f 84 bb 00 00 00    	je     c0014df6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014d3b:	3d c7 00 00 00       	cmp    eax,0xc7
c0014d40:	0f 8f b0 00 00 00    	jg     c0014df6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014d46:	80 f9 0a             	cmp    cl,0xa
c0014d49:	0f 85 98 00 00 00    	jne    c0014de7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0014d4f:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0014d54:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0014d58:	a8 df                	test   al,0xdf
c0014d5a:	0f 94 c1             	sete   cl
c0014d5d:	3c 23                	cmp    al,0x23
c0014d5f:	0f 94 c2             	sete   dl
c0014d62:	08 d1                	or     cl,dl
c0014d64:	75 4a                	jne    c0014db0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014d66:	8d 50 f7             	lea    edx,[eax-0x9]
c0014d69:	80 fa 01             	cmp    dl,0x1
c0014d6c:	76 42                	jbe    c0014db0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014d6e:	3c 5b                	cmp    al,0x5b
c0014d70:	75 42                	jne    c0014db4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0014d72:	80 fb 40             	cmp    bl,0x40
c0014d75:	75 39                	jne    c0014db0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014d77:	83 ec 0c             	sub    esp,0xc
c0014d7a:	8d 54 24 65          	lea    edx,[esp+0x65]
c0014d7e:	52                   	push   edx
c0014d7f:	e8 1c b9 fe ff       	call   c00006a0 <strlen>
c0014d84:	83 c4 10             	add    esp,0x10
c0014d87:	83 f8 3f             	cmp    eax,0x3f
c0014d8a:	77 6a                	ja     c0014df6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014d8c:	50                   	push   eax
c0014d8d:	50                   	push   eax
c0014d8e:	8d 54 24 61          	lea    edx,[esp+0x61]
c0014d92:	52                   	push   edx
c0014d93:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014d97:	52                   	push   edx
c0014d98:	e8 a3 b9 fe ff       	call   c0000740 <strcpy>
c0014d9d:	58                   	pop    eax
c0014d9e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014da2:	52                   	push   edx
c0014da3:	e8 f8 b8 fe ff       	call   c00006a0 <strlen>
c0014da8:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0014dad:	83 c4 10             	add    esp,0x10
c0014db0:	31 d2                	xor    edx,edx
c0014db2:	eb 3a                	jmp    c0014dee <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0014db4:	80 fb 40             	cmp    bl,0x40
c0014db7:	74 06                	je     c0014dbf <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0014db9:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014dbd:	eb 20                	jmp    c0014ddf <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0014dbf:	50                   	push   eax
c0014dc0:	50                   	push   eax
c0014dc1:	55                   	push   ebp
c0014dc2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014dc6:	50                   	push   eax
c0014dc7:	e8 00 ba fe ff       	call   c00007cc <strcmp>
c0014dcc:	83 c4 10             	add    esp,0x10
c0014dcf:	85 c0                	test   eax,eax
c0014dd1:	75 dd                	jne    c0014db0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014dd3:	eb e4                	jmp    c0014db9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0014dd5:	8d 50 01             	lea    edx,[eax+0x1]
c0014dd8:	80 f9 3d             	cmp    cl,0x3d
c0014ddb:	74 1d                	je     c0014dfa <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0014ddd:	89 d0                	mov    eax,edx
c0014ddf:	8a 08                	mov    cl,BYTE PTR [eax]
c0014de1:	84 c9                	test   cl,cl
c0014de3:	75 f0                	jne    c0014dd5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0014de5:	eb 0f                	jmp    c0014df6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014de7:	8d 50 01             	lea    edx,[eax+0x1]
c0014dea:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0014dee:	47                   	inc    edi
c0014def:	89 d0                	mov    eax,edx
c0014df1:	e9 3b ff ff ff       	jmp    c0014d31 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0014df6:	31 c0                	xor    eax,eax
c0014df8:	eb 33                	jmp    c0014e2d <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0014dfa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014dfe:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0014e01:	50                   	push   eax
c0014e02:	50                   	push   eax
c0014e03:	8d 44 24 60          	lea    eax,[esp+0x60]
c0014e07:	50                   	push   eax
c0014e08:	56                   	push   esi
c0014e09:	e8 be b9 fe ff       	call   c00007cc <strcmp>
c0014e0e:	83 c4 10             	add    esp,0x10
c0014e11:	85 c0                	test   eax,eax
c0014e13:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014e17:	75 97                	jne    c0014db0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014e19:	51                   	push   ecx
c0014e1a:	51                   	push   ecx
c0014e1b:	52                   	push   edx
c0014e1c:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0014e23:	e8 18 b9 fe ff       	call   c0000740 <strcpy>
c0014e28:	83 c4 10             	add    esp,0x10
c0014e2b:	b0 01                	mov    al,0x1
c0014e2d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014e33:	5b                   	pop    ebx
c0014e34:	5e                   	pop    esi
c0014e35:	5f                   	pop    edi
c0014e36:	5d                   	pop    ebp
c0014e37:	c3                   	ret    

c0014e38 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0014e38:	57                   	push   edi
c0014e39:	56                   	push   esi
c0014e3a:	53                   	push   ebx
c0014e3b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014e41:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0014e48:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0014e4f:	53                   	push   ebx
c0014e50:	e8 4b b8 fe ff       	call   c00006a0 <strlen>
c0014e55:	89 34 24             	mov    DWORD PTR [esp],esi
c0014e58:	89 c7                	mov    edi,eax
c0014e5a:	e8 41 b8 fe ff       	call   c00006a0 <strlen>
c0014e5f:	83 c4 10             	add    esp,0x10
c0014e62:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0014e66:	3d ff 00 00 00       	cmp    eax,0xff
c0014e6b:	0f 87 d3 00 00 00    	ja     c0014f44 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0014e71:	57                   	push   edi
c0014e72:	57                   	push   edi
c0014e73:	56                   	push   esi
c0014e74:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014e78:	56                   	push   esi
c0014e79:	e8 c2 b8 fe ff       	call   c0000740 <strcpy>
c0014e7e:	58                   	pop    eax
c0014e7f:	5a                   	pop    edx
c0014e80:	68 ba 48 02 c0       	push   0xc00248ba
c0014e85:	56                   	push   esi
c0014e86:	e8 f5 b9 fe ff       	call   c0000880 <strcat>
c0014e8b:	59                   	pop    ecx
c0014e8c:	5f                   	pop    edi
c0014e8d:	53                   	push   ebx
c0014e8e:	56                   	push   esi
c0014e8f:	e8 ec b9 fe ff       	call   c0000880 <strcat>
c0014e94:	58                   	pop    eax
c0014e95:	5a                   	pop    edx
c0014e96:	68 64 45 02 c0       	push   0xc0024564
c0014e9b:	56                   	push   esi
c0014e9c:	e8 df b9 fe ff       	call   c0000880 <strcat>
c0014ea1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014ea8:	e8 16 4b ff ff       	call   c00099c3 <malloc>
c0014ead:	83 c4 0c             	add    esp,0xc
c0014eb0:	89 c3                	mov    ebx,eax
c0014eb2:	ff 35 70 79 02 c0    	push   DWORD PTR ds:0xc0027970
c0014eb8:	56                   	push   esi
c0014eb9:	50                   	push   eax
c0014eba:	e8 8b 81 ff ff       	call   c000d04a <File::File(char const*, Process*)>
c0014ebf:	83 c4 10             	add    esp,0x10
c0014ec2:	85 db                	test   ebx,ebx
c0014ec4:	74 7e                	je     c0014f44 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0014ec6:	51                   	push   ecx
c0014ec7:	51                   	push   ecx
c0014ec8:	6a 01                	push   0x1
c0014eca:	53                   	push   ebx
c0014ecb:	e8 de 81 ff ff       	call   c000d0ae <File::open(FileOpenMode)>
c0014ed0:	83 c4 10             	add    esp,0x10
c0014ed3:	85 c0                	test   eax,eax
c0014ed5:	74 08                	je     c0014edf <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0014ed7:	83 ec 0c             	sub    esp,0xc
c0014eda:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014edc:	53                   	push   ebx
c0014edd:	eb 5f                	jmp    c0014f3e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0014edf:	52                   	push   edx
c0014ee0:	8d 44 24 17          	lea    eax,[esp+0x17]
c0014ee4:	50                   	push   eax
c0014ee5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014ee9:	50                   	push   eax
c0014eea:	53                   	push   ebx
c0014eeb:	e8 6a 84 ff ff       	call   c000d35a <File::stat(unsigned long long*, bool*)>
c0014ef0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014ef4:	83 c4 10             	add    esp,0x10
c0014ef7:	89 c1                	mov    ecx,eax
c0014ef9:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0014efd:	74 31                	je     c0014f30 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0014eff:	83 ec 0c             	sub    esp,0xc
c0014f02:	50                   	push   eax
c0014f03:	e8 bb 4a ff ff       	call   c00099c3 <malloc>
c0014f08:	89 c6                	mov    esi,eax
c0014f0a:	58                   	pop    eax
c0014f0b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f0d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0014f11:	52                   	push   edx
c0014f12:	56                   	push   esi
c0014f13:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014f17:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014f1b:	53                   	push   ebx
c0014f1c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014f1f:	83 c4 20             	add    esp,0x20
c0014f22:	85 c0                	test   eax,eax
c0014f24:	75 0a                	jne    c0014f30 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0014f26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014f2a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0014f2e:	74 18                	je     c0014f48 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0014f30:	83 ec 0c             	sub    esp,0xc
c0014f33:	53                   	push   ebx
c0014f34:	e8 d3 81 ff ff       	call   c000d10c <File::close()>
c0014f39:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f3b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f3e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014f41:	83 c4 10             	add    esp,0x10
c0014f44:	31 c0                	xor    eax,eax
c0014f46:	eb 3b                	jmp    c0014f83 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0014f48:	83 ec 0c             	sub    esp,0xc
c0014f4b:	53                   	push   ebx
c0014f4c:	e8 bb 81 ff ff       	call   c000d10c <File::close()>
c0014f51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f53:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f56:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014f59:	83 c4 0c             	add    esp,0xc
c0014f5c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0014f63:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0014f6a:	56                   	push   esi
c0014f6b:	e8 70 fd ff ff       	call   c0014ce0 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0014f70:	89 34 24             	mov    DWORD PTR [esp],esi
c0014f73:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0014f77:	e8 57 4a ff ff       	call   c00099d3 <free>
c0014f7c:	83 c4 10             	add    esp,0x10
c0014f7f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014f83:	81 c4 20 01 00 00    	add    esp,0x120
c0014f89:	5b                   	pop    ebx
c0014f8a:	5e                   	pop    esi
c0014f8b:	5f                   	pop    edi
c0014f8c:	c3                   	ret    

c0014f8d <Reg::getLine(char*, char*, char*)>:
c0014f8d:	57                   	push   edi
c0014f8e:	56                   	push   esi
c0014f8f:	53                   	push   ebx
c0014f90:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014f94:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014f98:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014f9c:	57                   	push   edi
c0014f9d:	56                   	push   esi
c0014f9e:	53                   	push   ebx
c0014f9f:	68 69 45 02 c0       	push   0xc0024569
c0014fa4:	e8 8f fe ff ff       	call   c0014e38 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0014fa9:	83 c4 10             	add    esp,0x10
c0014fac:	84 c0                	test   al,al
c0014fae:	75 10                	jne    c0014fc0 <Reg::getLine(char*, char*, char*)+0x33>
c0014fb0:	57                   	push   edi
c0014fb1:	56                   	push   esi
c0014fb2:	53                   	push   ebx
c0014fb3:	68 8e 45 02 c0       	push   0xc002458e
c0014fb8:	e8 7b fe ff ff       	call   c0014e38 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0014fbd:	83 c4 10             	add    esp,0x10
c0014fc0:	5b                   	pop    ebx
c0014fc1:	5e                   	pop    esi
c0014fc2:	5f                   	pop    edi
c0014fc3:	c3                   	ret    

c0014fc4 <Reg::readInt(char*, char*, int*)>:
c0014fc4:	55                   	push   ebp
c0014fc5:	57                   	push   edi
c0014fc6:	56                   	push   esi
c0014fc7:	53                   	push   ebx
c0014fc8:	81 ec f0 00 00 00    	sub    esp,0xf0
c0014fce:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0014fd2:	57                   	push   edi
c0014fd3:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0014fda:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0014fe1:	e8 a7 ff ff ff       	call   c0014f8d <Reg::getLine(char*, char*, char*)>
c0014fe6:	83 c4 10             	add    esp,0x10
c0014fe9:	84 c0                	test   al,al
c0014feb:	0f 84 b3 00 00 00    	je     c00150a4 <Reg::readInt(char*, char*, int*)+0xe0>
c0014ff1:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0014ff5:	80 fa 2b             	cmp    dl,0x2b
c0014ff8:	74 0c                	je     c0015006 <Reg::readInt(char*, char*, int*)+0x42>
c0014ffa:	80 fa 2d             	cmp    dl,0x2d
c0014ffd:	75 0e                	jne    c001500d <Reg::readInt(char*, char*, int*)+0x49>
c0014fff:	ba 01 00 00 00       	mov    edx,0x1
c0015004:	eb 0b                	jmp    c0015011 <Reg::readInt(char*, char*, int*)+0x4d>
c0015006:	ba 01 00 00 00       	mov    edx,0x1
c001500b:	eb 02                	jmp    c001500f <Reg::readInt(char*, char*, int*)+0x4b>
c001500d:	31 d2                	xor    edx,edx
c001500f:	31 c0                	xor    eax,eax
c0015011:	be 0a 00 00 00       	mov    esi,0xa
c0015016:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001501b:	75 20                	jne    c001503d <Reg::readInt(char*, char*, int*)+0x79>
c001501d:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0015021:	80 f9 78             	cmp    cl,0x78
c0015024:	75 0a                	jne    c0015030 <Reg::readInt(char*, char*, int*)+0x6c>
c0015026:	83 c2 02             	add    edx,0x2
c0015029:	be 10 00 00 00       	mov    esi,0x10
c001502e:	eb 0d                	jmp    c001503d <Reg::readInt(char*, char*, int*)+0x79>
c0015030:	80 f9 62             	cmp    cl,0x62
c0015033:	75 08                	jne    c001503d <Reg::readInt(char*, char*, int*)+0x79>
c0015035:	83 c2 02             	add    edx,0x2
c0015038:	be 02 00 00 00       	mov    esi,0x2
c001503d:	01 d7                	add    edi,edx
c001503f:	31 d2                	xor    edx,edx
c0015041:	8a 1f                	mov    bl,BYTE PTR [edi]
c0015043:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0015047:	80 fb 0d             	cmp    bl,0xd
c001504a:	0f 94 c3             	sete   bl
c001504d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015052:	0f 94 c1             	sete   cl
c0015055:	08 cb                	or     bl,cl
c0015057:	75 3a                	jne    c0015093 <Reg::readInt(char*, char*, int*)+0xcf>
c0015059:	0f af d6             	imul   edx,esi
c001505c:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0015061:	83 fe 10             	cmp    esi,0x10
c0015064:	75 26                	jne    c001508c <Reg::readInt(char*, char*, int*)+0xc8>
c0015066:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001506a:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001506d:	89 e9                	mov    ecx,ebp
c001506f:	80 f9 05             	cmp    cl,0x5
c0015072:	77 06                	ja     c001507a <Reg::readInt(char*, char*, int*)+0xb6>
c0015074:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0015078:	eb 16                	jmp    c0015090 <Reg::readInt(char*, char*, int*)+0xcc>
c001507a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001507e:	83 e9 61             	sub    ecx,0x61
c0015081:	80 f9 05             	cmp    cl,0x5
c0015084:	77 06                	ja     c001508c <Reg::readInt(char*, char*, int*)+0xc8>
c0015086:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001508a:	eb 04                	jmp    c0015090 <Reg::readInt(char*, char*, int*)+0xcc>
c001508c:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0015090:	47                   	inc    edi
c0015091:	eb ae                	jmp    c0015041 <Reg::readInt(char*, char*, int*)+0x7d>
c0015093:	84 c0                	test   al,al
c0015095:	74 02                	je     c0015099 <Reg::readInt(char*, char*, int*)+0xd5>
c0015097:	f7 da                	neg    edx
c0015099:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00150a0:	89 10                	mov    DWORD PTR [eax],edx
c00150a2:	88 d8                	mov    al,bl
c00150a4:	81 c4 ec 00 00 00    	add    esp,0xec
c00150aa:	5b                   	pop    ebx
c00150ab:	5e                   	pop    esi
c00150ac:	5f                   	pop    edi
c00150ad:	5d                   	pop    ebp
c00150ae:	c3                   	ret    

c00150af <Reg::readString(char*, char*, char*, int)>:
c00150af:	57                   	push   edi
c00150b0:	56                   	push   esi
c00150b1:	53                   	push   ebx
c00150b2:	81 ec d4 00 00 00    	sub    esp,0xd4
c00150b8:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00150bf:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00150c3:	57                   	push   edi
c00150c4:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00150cb:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00150d2:	e8 b6 fe ff ff       	call   c0014f8d <Reg::getLine(char*, char*, char*)>
c00150d7:	83 c4 10             	add    esp,0x10
c00150da:	89 c6                	mov    esi,eax
c00150dc:	84 c0                	test   al,al
c00150de:	74 44                	je     c0015124 <Reg::readString(char*, char*, char*, int)+0x75>
c00150e0:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00150e7:	31 c0                	xor    eax,eax
c00150e9:	4a                   	dec    edx
c00150ea:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00150ed:	84 c9                	test   cl,cl
c00150ef:	74 0f                	je     c0015100 <Reg::readString(char*, char*, char*, int)+0x51>
c00150f1:	39 c2                	cmp    edx,eax
c00150f3:	7e 0b                	jle    c0015100 <Reg::readString(char*, char*, char*, int)+0x51>
c00150f5:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00150f8:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00150fd:	40                   	inc    eax
c00150fe:	eb ea                	jmp    c00150ea <Reg::readString(char*, char*, char*, int)+0x3b>
c0015100:	83 ec 0c             	sub    esp,0xc
c0015103:	53                   	push   ebx
c0015104:	e8 97 b5 fe ff       	call   c00006a0 <strlen>
c0015109:	83 c4 10             	add    esp,0x10
c001510c:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0015111:	75 11                	jne    c0015124 <Reg::readString(char*, char*, char*, int)+0x75>
c0015113:	83 ec 0c             	sub    esp,0xc
c0015116:	53                   	push   ebx
c0015117:	e8 84 b5 fe ff       	call   c00006a0 <strlen>
c001511c:	83 c4 10             	add    esp,0x10
c001511f:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0015124:	81 c4 d0 00 00 00    	add    esp,0xd0
c001512a:	89 f0                	mov    eax,esi
c001512c:	5b                   	pop    ebx
c001512d:	5e                   	pop    esi
c001512e:	5f                   	pop    edi
c001512f:	c3                   	ret    

c0015130 <Reg::readBool(char*, char*, bool*)>:
c0015130:	83 ec 20             	sub    esp,0x20
c0015133:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015137:	50                   	push   eax
c0015138:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001513c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015140:	e8 7f fe ff ff       	call   c0014fc4 <Reg::readInt(char*, char*, int*)>
c0015145:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001514a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001514e:	0f 95 02             	setne  BYTE PTR [edx]
c0015151:	83 c4 2c             	add    esp,0x2c
c0015154:	c3                   	ret    

c0015155 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0015155:	53                   	push   ebx
c0015156:	83 ec 1c             	sub    esp,0x1c
c0015159:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001515d:	8d 44 24 13          	lea    eax,[esp+0x13]
c0015161:	50                   	push   eax
c0015162:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015166:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001516a:	e8 c1 ff ff ff       	call   c0015130 <Reg::readBool(char*, char*, bool*)>
c001516f:	83 c4 10             	add    esp,0x10
c0015172:	84 c0                	test   al,al
c0015174:	74 04                	je     c001517a <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0015176:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001517a:	88 d8                	mov    al,bl
c001517c:	83 c4 18             	add    esp,0x18
c001517f:	5b                   	pop    ebx
c0015180:	c3                   	ret    

c0015181 <Reg::readIntWithDefault(char*, char*, int)>:
c0015181:	53                   	push   ebx
c0015182:	83 ec 1c             	sub    esp,0x1c
c0015185:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015189:	8d 44 24 10          	lea    eax,[esp+0x10]
c001518d:	50                   	push   eax
c001518e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015192:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015196:	e8 29 fe ff ff       	call   c0014fc4 <Reg::readInt(char*, char*, int*)>
c001519b:	83 c4 10             	add    esp,0x10
c001519e:	84 c0                	test   al,al
c00151a0:	74 04                	je     c00151a6 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00151a2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00151a6:	89 d8                	mov    eax,ebx
c00151a8:	83 c4 18             	add    esp,0x18
c00151ab:	5b                   	pop    ebx
c00151ac:	c3                   	ret    

c00151ad <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00151ad:	57                   	push   edi
c00151ae:	56                   	push   esi
c00151af:	56                   	push   esi
c00151b0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00151b4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00151b8:	56                   	push   esi
c00151b9:	57                   	push   edi
c00151ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151c2:	e8 e8 fe ff ff       	call   c00150af <Reg::readString(char*, char*, char*, int)>
c00151c7:	83 c4 10             	add    esp,0x10
c00151ca:	84 c0                	test   al,al
c00151cc:	75 1a                	jne    c00151e8 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00151ce:	51                   	push   ecx
c00151cf:	56                   	push   esi
c00151d0:	6a 00                	push   0x0
c00151d2:	57                   	push   edi
c00151d3:	e8 ac b4 fe ff       	call   c0000684 <memset>
c00151d8:	8d 4e ff             	lea    ecx,[esi-0x1]
c00151db:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00151df:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00151e1:	83 c4 10             	add    esp,0x10
c00151e4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00151e8:	89 f8                	mov    eax,edi
c00151ea:	5a                   	pop    edx
c00151eb:	5e                   	pop    esi
c00151ec:	5f                   	pop    edi
c00151ed:	c3                   	ret    

c00151ee <Sys::eject(regs*)>:
c00151ee:	83 ec 0c             	sub    esp,0xc
c00151f1:	83 ca ff             	or     edx,0xffffffff
c00151f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00151f8:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00151fb:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015200:	83 e9 41             	sub    ecx,0x41
c0015203:	83 f9 19             	cmp    ecx,0x19
c0015206:	77 18                	ja     c0015220 <Sys::eject(regs*)+0x32>
c0015208:	8b 0c 8d 40 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95c0]
c001520f:	85 c9                	test   ecx,ecx
c0015211:	74 0d                	je     c0015220 <Sys::eject(regs*)+0x32>
c0015213:	83 ec 0c             	sub    esp,0xc
c0015216:	51                   	push   ecx
c0015217:	e8 76 af ff ff       	call   c0010192 <LogicalDisk::eject()>
c001521c:	83 c4 10             	add    esp,0x10
c001521f:	99                   	cdq    
c0015220:	83 c4 0c             	add    esp,0xc
c0015223:	c3                   	ret    

c0015224 <Sys::exit(regs*)>:
c0015224:	83 ec 18             	sub    esp,0x18
c0015227:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001522b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001522e:	e8 59 36 00 00       	call   c001888c <terminateTask(int)>
c0015233:	83 c8 ff             	or     eax,0xffffffff
c0015236:	83 c4 1c             	add    esp,0x1c
c0015239:	89 c2                	mov    edx,eax
c001523b:	c3                   	ret    

c001523c <Sys::getCwd(regs*)>:
c001523c:	83 ec 10             	sub    esp,0x10
c001523f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015243:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015246:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015249:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001524e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015251:	e8 f6 7b ff ff       	call   c000ce4c <Fs::getcwd(Process*, char*, int)>
c0015256:	83 c4 1c             	add    esp,0x1c
c0015259:	99                   	cdq    
c001525a:	c3                   	ret    

c001525b <Sys::getPID(regs*)>:
c001525b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015260:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015263:	8b 00                	mov    eax,DWORD PTR [eax]
c0015265:	99                   	cdq    
c0015266:	c3                   	ret    

c0015267 <Sys::getRAMData(regs*)>:
c0015267:	8b 0d b8 64 02 c0    	mov    ecx,DWORD PTR ds:0xc00264b8
c001526d:	69 05 b4 64 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc00264b4,0xc8
c0015277:	99                   	cdq    
c0015278:	f7 f9                	idiv   ecx
c001527a:	c1 e0 18             	shl    eax,0x18
c001527d:	09 c8                	or     eax,ecx
c001527f:	99                   	cdq    
c0015280:	c3                   	ret    

c0015281 <Sys::getVGAPtr(regs*)>:
c0015281:	55                   	push   ebp
c0015282:	57                   	push   edi
c0015283:	56                   	push   esi
c0015284:	53                   	push   ebx
c0015285:	83 ec 18             	sub    esp,0x18
c0015288:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001528c:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001528f:	e8 fc 30 00 00       	call   c0018390 <Thr::processFromPID(int)>
c0015294:	83 c4 10             	add    esp,0x10
c0015297:	89 c1                	mov    ecx,eax
c0015299:	b8 01 00 00 00       	mov    eax,0x1
c001529e:	85 c9                	test   ecx,ecx
c00152a0:	74 59                	je     c00152fb <Sys::getVGAPtr(regs*)+0x7a>
c00152a2:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c00152a8:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00152ac:	74 0c                	je     c00152ba <Sys::getVGAPtr(regs*)+0x39>
c00152ae:	83 ec 0c             	sub    esp,0xc
c00152b1:	53                   	push   ebx
c00152b2:	e8 84 55 ff ff       	call   c000a83b <setActiveTerminal(VgaText*)>
c00152b7:	83 c4 10             	add    esp,0x10
c00152ba:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00152bd:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c00152c0:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00152c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00152c7:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00152ca:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00152cd:	81 c3 82 00 00 00    	add    ebx,0x82
c00152d3:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00152d9:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00152dc:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c00152df:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00152e5:	50                   	push   eax
c00152e6:	50                   	push   eax
c00152e7:	53                   	push   ebx
c00152e8:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00152eb:	05 a8 0f 00 00       	add    eax,0xfa8
c00152f0:	50                   	push   eax
c00152f1:	e8 4a b4 fe ff       	call   c0000740 <strcpy>
c00152f6:	83 c4 10             	add    esp,0x10
c00152f9:	31 c0                	xor    eax,eax
c00152fb:	83 c4 0c             	add    esp,0xc
c00152fe:	31 d2                	xor    edx,edx
c0015300:	5b                   	pop    ebx
c0015301:	5e                   	pop    esi
c0015302:	5f                   	pop    edi
c0015303:	5d                   	pop    ebp
c0015304:	c3                   	ret    

c0015305 <Sys::loadDLL(regs*)>:
c0015305:	56                   	push   esi
c0015306:	53                   	push   ebx
c0015307:	31 d2                	xor    edx,edx
c0015309:	51                   	push   ecx
c001530a:	b8 01 00 00 00       	mov    eax,0x1
c001530f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015313:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0015317:	0f 84 8c 00 00 00    	je     c00153a9 <Sys::loadDLL(regs*)+0xa4>
c001531d:	83 ec 0c             	sub    esp,0xc
c0015320:	68 14 01 00 00       	push   0x114
c0015325:	e8 99 46 ff ff       	call   c00099c3 <malloc>
c001532a:	83 c4 0c             	add    esp,0xc
c001532d:	89 c3                	mov    ebx,eax
c001532f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015334:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015337:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001533a:	53                   	push   ebx
c001533b:	e8 0a 7d ff ff       	call   c000d04a <File::File(char const*, Process*)>
c0015340:	83 c4 10             	add    esp,0x10
c0015343:	31 d2                	xor    edx,edx
c0015345:	b8 02 00 00 00       	mov    eax,0x2
c001534a:	85 db                	test   ebx,ebx
c001534c:	74 5b                	je     c00153a9 <Sys::loadDLL(regs*)+0xa4>
c001534e:	83 ec 0c             	sub    esp,0xc
c0015351:	53                   	push   ebx
c0015352:	e8 c5 7f ff ff       	call   c000d31c <File::exists()>
c0015357:	83 c4 10             	add    esp,0x10
c001535a:	84 c0                	test   al,al
c001535c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001535e:	75 11                	jne    c0015371 <Sys::loadDLL(regs*)+0x6c>
c0015360:	83 ec 0c             	sub    esp,0xc
c0015363:	53                   	push   ebx
c0015364:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015367:	83 c4 10             	add    esp,0x10
c001536a:	b8 03 00 00 00       	mov    eax,0x3
c001536f:	eb 36                	jmp    c00153a7 <Sys::loadDLL(regs*)+0xa2>
c0015371:	83 ec 0c             	sub    esp,0xc
c0015374:	53                   	push   ebx
c0015375:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015378:	58                   	pop    eax
c0015379:	5a                   	pop    edx
c001537a:	6a 00                	push   0x0
c001537c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001537f:	e8 0a 22 00 00       	call   c001758e <Thr::loadDLL(char const*, bool)>
c0015384:	83 c4 10             	add    esp,0x10
c0015387:	89 c1                	mov    ecx,eax
c0015389:	31 d2                	xor    edx,edx
c001538b:	b8 04 00 00 00       	mov    eax,0x4
c0015390:	85 c9                	test   ecx,ecx
c0015392:	74 15                	je     c00153a9 <Sys::loadDLL(regs*)+0xa4>
c0015394:	53                   	push   ebx
c0015395:	53                   	push   ebx
c0015396:	ff 35 88 64 02 c0    	push   DWORD PTR ds:0xc0026488
c001539c:	51                   	push   ecx
c001539d:	e8 1d 24 00 00       	call   c00177bf <Thr::executeDLL(unsigned long, void*)>
c00153a2:	83 c4 10             	add    esp,0x10
c00153a5:	31 c0                	xor    eax,eax
c00153a7:	31 d2                	xor    edx,edx
c00153a9:	59                   	pop    ecx
c00153aa:	5b                   	pop    ebx
c00153ab:	5e                   	pop    esi
c00153ac:	c3                   	ret    

c00153ad <Sys::read(regs*)>:
c00153ad:	57                   	push   edi
c00153ae:	56                   	push   esi
c00153af:	53                   	push   ebx
c00153b0:	83 ec 10             	sub    esp,0x10
c00153b3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00153b7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00153ba:	83 f8 02             	cmp    eax,0x2
c00153bd:	77 10                	ja     c00153cf <Sys::read(regs*)+0x22>
c00153bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153c4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153c7:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00153cd:	eb 0e                	jmp    c00153dd <Sys::read(regs*)+0x30>
c00153cf:	83 ec 0c             	sub    esp,0xc
c00153d2:	50                   	push   eax
c00153d3:	e8 df 61 ff ff       	call   c000b5b7 <getFromFileDescriptor(int)>
c00153d8:	83 c4 10             	add    esp,0x10
c00153db:	89 c1                	mov    ecx,eax
c00153dd:	83 c8 ff             	or     eax,0xffffffff
c00153e0:	85 c9                	test   ecx,ecx
c00153e2:	89 c2                	mov    edx,eax
c00153e4:	74 28                	je     c001540e <Sys::read(regs*)+0x61>
c00153e6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00153ee:	31 ff                	xor    edi,edi
c00153f0:	83 ec 0c             	sub    esp,0xc
c00153f3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00153f5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00153f9:	52                   	push   edx
c00153fa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00153fd:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015400:	57                   	push   edi
c0015401:	56                   	push   esi
c0015402:	51                   	push   ecx
c0015403:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015406:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001540a:	83 c4 20             	add    esp,0x20
c001540d:	99                   	cdq    
c001540e:	83 c4 10             	add    esp,0x10
c0015411:	5b                   	pop    ebx
c0015412:	5e                   	pop    esi
c0015413:	5f                   	pop    edi
c0015414:	c3                   	ret    

c0015415 <Sys::sbrk(regs*)>:
c0015415:	56                   	push   esi
c0015416:	53                   	push   ebx
c0015417:	50                   	push   eax
c0015418:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001541d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015421:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015424:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0015427:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c001542d:	85 db                	test   ebx,ebx
c001542f:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0015432:	74 02                	je     c0015436 <Sys::sbrk(regs*)+0x21>
c0015434:	79 06                	jns    c001543c <Sys::sbrk(regs*)+0x27>
c0015436:	89 f0                	mov    eax,esi
c0015438:	31 d2                	xor    edx,edx
c001543a:	eb 2a                	jmp    c0015466 <Sys::sbrk(regs*)+0x51>
c001543c:	83 c8 ff             	or     eax,0xffffffff
c001543f:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0015445:	89 c2                	mov    edx,eax
c0015447:	77 1d                	ja     c0015466 <Sys::sbrk(regs*)+0x51>
c0015449:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001544f:	50                   	push   eax
c0015450:	c1 ea 0c             	shr    edx,0xc
c0015453:	68 07 0c 00 00       	push   0xc07
c0015458:	52                   	push   edx
c0015459:	51                   	push   ecx
c001545a:	e8 57 6a ff ff       	call   c000beb6 <VAS::allocatePages(int, int)>
c001545f:	89 f0                	mov    eax,esi
c0015461:	31 d2                	xor    edx,edx
c0015463:	83 c4 10             	add    esp,0x10
c0015466:	59                   	pop    ecx
c0015467:	5b                   	pop    ebx
c0015468:	5e                   	pop    esi
c0015469:	c3                   	ret    

c001546a <Sys::setCwd(regs*)>:
c001546a:	83 ec 14             	sub    esp,0x14
c001546d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015471:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015474:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015479:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001547c:	e8 3a 7f ff ff       	call   c000d3bb <Fs::setcwd(Process*, char*)>
c0015481:	83 c4 1c             	add    esp,0x1c
c0015484:	99                   	cdq    
c0015485:	c3                   	ret    

c0015486 <Sys::setTime(regs*)>:
c0015486:	55                   	push   ebp
c0015487:	31 c9                	xor    ecx,ecx
c0015489:	57                   	push   edi
c001548a:	bd 0c 00 00 00       	mov    ebp,0xc
c001548f:	56                   	push   esi
c0015490:	53                   	push   ebx
c0015491:	31 db                	xor    ebx,ebx
c0015493:	83 ec 10             	sub    esp,0x10
c0015496:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001549a:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001549d:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00154a0:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00154a3:	89 c2                	mov    edx,eax
c00154a5:	66 81 ef 6c 07       	sub    di,0x76c
c00154aa:	83 e2 1f             	and    edx,0x1f
c00154ad:	c1 e7 10             	shl    edi,0x10
c00154b0:	42                   	inc    edx
c00154b1:	c1 e8 05             	shr    eax,0x5
c00154b4:	88 d1                	mov    cl,dl
c00154b6:	31 d2                	xor    edx,edx
c00154b8:	f7 f5                	div    ebp
c00154ba:	89 dd                	mov    ebp,ebx
c00154bc:	88 d5                	mov    ch,dl
c00154be:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00154c4:	0f b7 c1             	movzx  eax,cx
c00154c7:	31 d2                	xor    edx,edx
c00154c9:	09 f8                	or     eax,edi
c00154cb:	bf 3c 00 00 00       	mov    edi,0x3c
c00154d0:	89 c1                	mov    ecx,eax
c00154d2:	89 f0                	mov    eax,esi
c00154d4:	f7 f7                	div    edi
c00154d6:	c1 e2 10             	shl    edx,0x10
c00154d9:	09 d5                	or     ebp,edx
c00154db:	31 d2                	xor    edx,edx
c00154dd:	89 eb                	mov    ebx,ebp
c00154df:	f7 f7                	div    edi
c00154e1:	bf 10 0e 00 00       	mov    edi,0xe10
c00154e6:	88 d7                	mov    bh,dl
c00154e8:	89 f0                	mov    eax,esi
c00154ea:	31 d2                	xor    edx,edx
c00154ec:	f7 f7                	div    edi
c00154ee:	bf 18 00 00 00       	mov    edi,0x18
c00154f3:	31 d2                	xor    edx,edx
c00154f5:	f7 f7                	div    edi
c00154f7:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c00154fc:	88 d3                	mov    bl,dl
c00154fe:	53                   	push   ebx
c00154ff:	51                   	push   ecx
c0015500:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0015506:	e8 fb 86 ff ff       	call   c000dc06 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001550b:	83 c4 1c             	add    esp,0x1c
c001550e:	83 f0 01             	xor    eax,0x1
c0015511:	5b                   	pop    ebx
c0015512:	0f b6 c0             	movzx  eax,al
c0015515:	5e                   	pop    esi
c0015516:	31 d2                	xor    edx,edx
c0015518:	5f                   	pop    edi
c0015519:	5d                   	pop    ebp
c001551a:	c3                   	ret    

c001551b <Sys::timezone(regs*)>:
c001551b:	53                   	push   ebx
c001551c:	83 ec 08             	sub    esp,0x8
c001551f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015523:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0015527:	75 17                	jne    c0015540 <Sys::timezone(regs*)+0x25>
c0015529:	83 ec 0c             	sub    esp,0xc
c001552c:	68 a9 45 02 c0       	push   0xc00245a9
c0015531:	e8 a9 75 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c0015536:	83 c8 ff             	or     eax,0xffffffff
c0015539:	83 c4 10             	add    esp,0x10
c001553c:	89 c2                	mov    edx,eax
c001553e:	eb 20                	jmp    c0015560 <Sys::timezone(regs*)+0x45>
c0015540:	83 ec 0c             	sub    esp,0xc
c0015543:	68 be 45 02 c0       	push   0xc00245be
c0015548:	e8 92 75 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001554d:	58                   	pop    eax
c001554e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015551:	e8 12 84 ff ff       	call   c000d968 <User::loadClockSettings(int)>
c0015556:	83 c4 10             	add    esp,0x10
c0015559:	b8 01 00 00 00       	mov    eax,0x1
c001555e:	31 d2                	xor    edx,edx
c0015560:	83 c4 08             	add    esp,0x8
c0015563:	5b                   	pop    ebx
c0015564:	c3                   	ret    

c0015565 <Sys::write(regs*)>:
c0015565:	57                   	push   edi
c0015566:	56                   	push   esi
c0015567:	53                   	push   ebx
c0015568:	83 ec 10             	sub    esp,0x10
c001556b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001556f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015572:	83 f8 02             	cmp    eax,0x2
c0015575:	77 10                	ja     c0015587 <Sys::write(regs*)+0x22>
c0015577:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001557c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001557f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0015585:	eb 0e                	jmp    c0015595 <Sys::write(regs*)+0x30>
c0015587:	83 ec 0c             	sub    esp,0xc
c001558a:	50                   	push   eax
c001558b:	e8 27 60 ff ff       	call   c000b5b7 <getFromFileDescriptor(int)>
c0015590:	83 c4 10             	add    esp,0x10
c0015593:	89 c1                	mov    ecx,eax
c0015595:	83 c8 ff             	or     eax,0xffffffff
c0015598:	85 c9                	test   ecx,ecx
c001559a:	89 c2                	mov    edx,eax
c001559c:	74 28                	je     c00155c6 <Sys::write(regs*)+0x61>
c001559e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00155a6:	31 ff                	xor    edi,edi
c00155a8:	83 ec 0c             	sub    esp,0xc
c00155ab:	8b 01                	mov    eax,DWORD PTR [ecx]
c00155ad:	8d 54 24 18          	lea    edx,[esp+0x18]
c00155b1:	52                   	push   edx
c00155b2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00155b5:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00155b8:	57                   	push   edi
c00155b9:	56                   	push   esi
c00155ba:	51                   	push   ecx
c00155bb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00155be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00155c2:	83 c4 20             	add    esp,0x20
c00155c5:	99                   	cdq    
c00155c6:	83 c4 10             	add    esp,0x10
c00155c9:	5b                   	pop    ebx
c00155ca:	5e                   	pop    esi
c00155cb:	5f                   	pop    edi
c00155cc:	c3                   	ret    

c00155cd <Sys::wsbe(regs*)>:
c00155cd:	57                   	push   edi
c00155ce:	b9 0b 00 00 00       	mov    ecx,0xb
c00155d3:	56                   	push   esi
c00155d4:	be fd 45 02 c0       	mov    esi,0xc00245fd
c00155d9:	53                   	push   ebx
c00155da:	83 ec 30             	sub    esp,0x30
c00155dd:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00155e1:	fc                   	cld    
c00155e2:	83 ec 0c             	sub    esp,0xc
c00155e5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00155e7:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00155eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155f0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00155f3:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00155f9:	8b 06                	mov    eax,DWORD PTR [esi]
c00155fb:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00155fe:	57                   	push   edi
c00155ff:	e8 9c b0 fe ff       	call   c00006a0 <strlen>
c0015604:	5a                   	pop    edx
c0015605:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0015609:	52                   	push   edx
c001560a:	31 d2                	xor    edx,edx
c001560c:	57                   	push   edi
c001560d:	52                   	push   edx
c001560e:	50                   	push   eax
c001560f:	56                   	push   esi
c0015610:	ff d3                	call   ebx
c0015612:	83 c4 14             	add    esp,0x14
c0015615:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015619:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001561c:	e8 6b 32 00 00       	call   c001888c <terminateTask(int)>
c0015621:	83 c4 40             	add    esp,0x40
c0015624:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0015629:	5b                   	pop    ebx
c001562a:	31 d2                	xor    edx,edx
c001562c:	5e                   	pop    esi
c001562d:	5f                   	pop    edi
c001562e:	c3                   	ret    

c001562f <Sys::yield(regs*)>:
c001562f:	83 ec 0c             	sub    esp,0xc
c0015632:	fa                   	cli    
c0015633:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c0015639:	e8 36 29 00 00       	call   c0017f74 <schedule()>
c001563e:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c0015643:	48                   	dec    eax
c0015644:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c0015649:	75 01                	jne    c001564c <Sys::yield(regs*)+0x1d>
c001564b:	fb                   	sti    
c001564c:	8b 15 ac 6a 02 c0    	mov    edx,DWORD PTR ds:0xc0026aac
c0015652:	83 c4 0c             	add    esp,0xc
c0015655:	89 d0                	mov    eax,edx
c0015657:	c1 ea 11             	shr    edx,0x11
c001565a:	c1 e0 07             	shl    eax,0x7
c001565d:	25 80 30 0f 00       	and    eax,0xf3080
c0015662:	31 d0                	xor    eax,edx
c0015664:	31 d2                	xor    edx,edx
c0015666:	c3                   	ret    

c0015667 <sysCallSeekDir(regs*)>:
c0015667:	31 c0                	xor    eax,eax
c0015669:	31 d2                	xor    edx,edx
c001566b:	c3                   	ret    

c001566c <sysCallTellDir(regs*)>:
c001566c:	31 c0                	xor    eax,eax
c001566e:	31 d2                	xor    edx,edx
c0015670:	c3                   	ret    

c0015671 <sysCallVerify(regs*)>:
c0015671:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015675:	31 d2                	xor    edx,edx
c0015677:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001567a:	c3                   	ret    

c001567b <sysCallGetArgc(regs*)>:
c001567b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015680:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015683:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0015689:	99                   	cdq    
c001568a:	c3                   	ret    

c001568b <sysFormatDisk(regs*)>:
c001568b:	56                   	push   esi
c001568c:	53                   	push   ebx
c001568d:	53                   	push   ebx
c001568e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015692:	8b 1d b4 65 02 c0    	mov    ebx,DWORD PTR ds:0xc00265b4
c0015698:	eb 25                	jmp    c00156bf <sysFormatDisk(regs*)+0x34>
c001569a:	83 ec 0c             	sub    esp,0xc
c001569d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00156a0:	8b 13                	mov    edx,DWORD PTR [ebx]
c00156a2:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00156a5:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00156a8:	50                   	push   eax
c00156a9:	ff 34 85 40 6a 02 c0 	push   DWORD PTR [eax*4-0x3ffd95c0]
c00156b0:	53                   	push   ebx
c00156b1:	ff 52 48             	call   DWORD PTR [edx+0x48]
c00156b4:	83 c4 20             	add    esp,0x20
c00156b7:	83 f8 08             	cmp    eax,0x8
c00156ba:	75 12                	jne    c00156ce <sysFormatDisk(regs*)+0x43>
c00156bc:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00156bf:	85 db                	test   ebx,ebx
c00156c1:	75 d7                	jne    c001569a <sysFormatDisk(regs*)+0xf>
c00156c3:	59                   	pop    ecx
c00156c4:	b8 03 00 00 00       	mov    eax,0x3
c00156c9:	31 d2                	xor    edx,edx
c00156cb:	5b                   	pop    ebx
c00156cc:	5e                   	pop    esi
c00156cd:	c3                   	ret    
c00156ce:	85 c0                	test   eax,eax
c00156d0:	74 1b                	je     c00156ed <sysFormatDisk(regs*)+0x62>
c00156d2:	83 f8 09             	cmp    eax,0x9
c00156d5:	74 0b                	je     c00156e2 <sysFormatDisk(regs*)+0x57>
c00156d7:	59                   	pop    ecx
c00156d8:	b8 02 00 00 00       	mov    eax,0x2
c00156dd:	31 d2                	xor    edx,edx
c00156df:	5b                   	pop    ebx
c00156e0:	5e                   	pop    esi
c00156e1:	c3                   	ret    
c00156e2:	59                   	pop    ecx
c00156e3:	b8 01 00 00 00       	mov    eax,0x1
c00156e8:	31 d2                	xor    edx,edx
c00156ea:	5b                   	pop    ebx
c00156eb:	5e                   	pop    esi
c00156ec:	c3                   	ret    
c00156ed:	59                   	pop    ecx
c00156ee:	31 c0                	xor    eax,eax
c00156f0:	31 d2                	xor    edx,edx
c00156f2:	5b                   	pop    ebx
c00156f3:	5e                   	pop    esi
c00156f4:	c3                   	ret    

c00156f5 <sysSetDiskVolumeLabel(regs*)>:
c00156f5:	56                   	push   esi
c00156f6:	53                   	push   ebx
c00156f7:	53                   	push   ebx
c00156f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00156fc:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00156ff:	83 f8 19             	cmp    eax,0x19
c0015702:	77 2d                	ja     c0015731 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015704:	8b 0c 85 40 6a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd95c0]
c001570b:	85 c9                	test   ecx,ecx
c001570d:	74 22                	je     c0015731 <sysSetDiskVolumeLabel(regs*)+0x3c>
c001570f:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0015712:	85 db                	test   ebx,ebx
c0015714:	74 1b                	je     c0015731 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015716:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c001571c:	85 d2                	test   edx,edx
c001571e:	74 11                	je     c0015731 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015720:	8b 32                	mov    esi,DWORD PTR [edx]
c0015722:	53                   	push   ebx
c0015723:	50                   	push   eax
c0015724:	51                   	push   ecx
c0015725:	52                   	push   edx
c0015726:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0015729:	83 c4 10             	add    esp,0x10
c001572c:	99                   	cdq    
c001572d:	59                   	pop    ecx
c001572e:	5b                   	pop    ebx
c001572f:	5e                   	pop    esi
c0015730:	c3                   	ret    
c0015731:	59                   	pop    ecx
c0015732:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015737:	ba ff ff ff ff       	mov    edx,0xffffffff
c001573c:	5b                   	pop    ebx
c001573d:	5e                   	pop    esi
c001573e:	c3                   	ret    

c001573f <sysGetDiskVolumeLabel(regs*)>:
c001573f:	57                   	push   edi
c0015740:	56                   	push   esi
c0015741:	53                   	push   ebx
c0015742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015746:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015749:	83 fa 19             	cmp    edx,0x19
c001574c:	77 38                	ja     c0015786 <sysGetDiskVolumeLabel(regs*)+0x47>
c001574e:	8b 0c 95 40 6a 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd95c0]
c0015755:	85 c9                	test   ecx,ecx
c0015757:	74 2d                	je     c0015786 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015759:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001575c:	85 db                	test   ebx,ebx
c001575e:	74 26                	je     c0015786 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015760:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0015763:	85 f6                	test   esi,esi
c0015765:	74 1f                	je     c0015786 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015767:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c001576d:	85 c0                	test   eax,eax
c001576f:	74 15                	je     c0015786 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015771:	83 ec 0c             	sub    esp,0xc
c0015774:	8b 38                	mov    edi,DWORD PTR [eax]
c0015776:	56                   	push   esi
c0015777:	53                   	push   ebx
c0015778:	52                   	push   edx
c0015779:	51                   	push   ecx
c001577a:	50                   	push   eax
c001577b:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001577e:	83 c4 20             	add    esp,0x20
c0015781:	99                   	cdq    
c0015782:	5b                   	pop    ebx
c0015783:	5e                   	pop    esi
c0015784:	5f                   	pop    edi
c0015785:	c3                   	ret    
c0015786:	5b                   	pop    ebx
c0015787:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001578c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015791:	5e                   	pop    esi
c0015792:	5f                   	pop    edi
c0015793:	c3                   	ret    

c0015794 <sysShutdown(regs*)>:
c0015794:	83 ec 0c             	sub    esp,0xc
c0015797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001579b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001579e:	85 c0                	test   eax,eax
c00157a0:	74 18                	je     c00157ba <sysShutdown(regs*)+0x26>
c00157a2:	83 f8 01             	cmp    eax,0x1
c00157a5:	74 38                	je     c00157df <sysShutdown(regs*)+0x4b>
c00157a7:	83 f8 02             	cmp    eax,0x2
c00157aa:	74 24                	je     c00157d0 <sysShutdown(regs*)+0x3c>
c00157ac:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00157b1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00157b6:	83 c4 0c             	add    esp,0xc
c00157b9:	c3                   	ret    
c00157ba:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c00157bf:	8b 10                	mov    edx,DWORD PTR [eax]
c00157c1:	6a 00                	push   0x0
c00157c3:	6a 00                	push   0x0
c00157c5:	6a 00                	push   0x0
c00157c7:	50                   	push   eax
c00157c8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00157cb:	83 c4 10             	add    esp,0x10
c00157ce:	eb dc                	jmp    c00157ac <sysShutdown(regs*)+0x18>
c00157d0:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c00157d5:	8b 10                	mov    edx,DWORD PTR [eax]
c00157d7:	6a 00                	push   0x0
c00157d9:	6a 00                	push   0x0
c00157db:	6a 01                	push   0x1
c00157dd:	eb e8                	jmp    c00157c7 <sysShutdown(regs*)+0x33>
c00157df:	a1 c0 6a 02 c0       	mov    eax,ds:0xc0026ac0
c00157e4:	85 c0                	test   eax,eax
c00157e6:	74 02                	je     c00157ea <sysShutdown(regs*)+0x56>
c00157e8:	ff d0                	call   eax
c00157ea:	31 c0                	xor    eax,eax
c00157ec:	31 d2                	xor    edx,edx
c00157ee:	83 c4 0c             	add    esp,0xc
c00157f1:	c3                   	ret    

c00157f2 <sysCallRealpath(regs*)>:
c00157f2:	83 ec 0c             	sub    esp,0xc
c00157f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00157f9:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00157fc:	85 d2                	test   edx,edx
c00157fe:	74 07                	je     c0015807 <sysCallRealpath(regs*)+0x15>
c0015800:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015803:	85 c0                	test   eax,eax
c0015805:	75 0b                	jne    c0015812 <sysCallRealpath(regs*)+0x20>
c0015807:	b8 01 00 00 00       	mov    eax,0x1
c001580c:	31 d2                	xor    edx,edx
c001580e:	83 c4 0c             	add    esp,0xc
c0015811:	c3                   	ret    
c0015812:	51                   	push   ecx
c0015813:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015819:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001581c:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0015822:	51                   	push   ecx
c0015823:	52                   	push   edx
c0015824:	50                   	push   eax
c0015825:	e8 76 76 ff ff       	call   c000cea0 <Fs::standardiseFiles(char*, char const*, char const*)>
c001582a:	83 c4 10             	add    esp,0x10
c001582d:	31 c0                	xor    eax,eax
c001582f:	31 d2                	xor    edx,edx
c0015831:	83 c4 0c             	add    esp,0xc
c0015834:	c3                   	ret    

c0015835 <sysCallReadDir(regs*)>:
c0015835:	53                   	push   ebx
c0015836:	83 ec 18             	sub    esp,0x18
c0015839:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001583d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015840:	83 f8 02             	cmp    eax,0x2
c0015843:	76 60                	jbe    c00158a5 <sysCallReadDir(regs*)+0x70>
c0015845:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001584c:	77 48                	ja     c0015896 <sysCallReadDir(regs*)+0x61>
c001584e:	83 ec 0c             	sub    esp,0xc
c0015851:	50                   	push   eax
c0015852:	e8 60 5d ff ff       	call   c000b5b7 <getFromFileDescriptor(int)>
c0015857:	83 c4 10             	add    esp,0x10
c001585a:	85 c0                	test   eax,eax
c001585c:	74 38                	je     c0015896 <sysCallReadDir(regs*)+0x61>
c001585e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015866:	83 ec 0c             	sub    esp,0xc
c0015869:	8b 10                	mov    edx,DWORD PTR [eax]
c001586b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001586f:	51                   	push   ecx
c0015870:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015873:	6a 00                	push   0x0
c0015875:	68 10 01 00 00       	push   0x110
c001587a:	50                   	push   eax
c001587b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001587e:	83 c4 20             	add    esp,0x20
c0015881:	85 c0                	test   eax,eax
c0015883:	74 29                	je     c00158ae <sysCallReadDir(regs*)+0x79>
c0015885:	83 f8 07             	cmp    eax,0x7
c0015888:	74 1b                	je     c00158a5 <sysCallReadDir(regs*)+0x70>
c001588a:	b8 02 00 00 00       	mov    eax,0x2
c001588f:	31 d2                	xor    edx,edx
c0015891:	83 c4 18             	add    esp,0x18
c0015894:	5b                   	pop    ebx
c0015895:	c3                   	ret    
c0015896:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001589b:	ba ff ff ff ff       	mov    edx,0xffffffff
c00158a0:	83 c4 18             	add    esp,0x18
c00158a3:	5b                   	pop    ebx
c00158a4:	c3                   	ret    
c00158a5:	b8 01 00 00 00       	mov    eax,0x1
c00158aa:	31 d2                	xor    edx,edx
c00158ac:	eb e3                	jmp    c0015891 <sysCallReadDir(regs*)+0x5c>
c00158ae:	31 c0                	xor    eax,eax
c00158b0:	31 d2                	xor    edx,edx
c00158b2:	eb dd                	jmp    c0015891 <sysCallReadDir(regs*)+0x5c>

c00158b4 <sysCallIsATTY(regs*)>:
c00158b4:	83 ec 0c             	sub    esp,0xc
c00158b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158bb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00158be:	83 f8 02             	cmp    eax,0x2
c00158c1:	76 07                	jbe    c00158ca <sysCallIsATTY(regs*)+0x16>
c00158c3:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00158c8:	75 26                	jne    c00158f0 <sysCallIsATTY(regs*)+0x3c>
c00158ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158cf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158d2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00158d8:	85 c0                	test   eax,eax
c00158da:	74 24                	je     c0015900 <sysCallIsATTY(regs*)+0x4c>
c00158dc:	83 ec 0c             	sub    esp,0xc
c00158df:	8b 10                	mov    edx,DWORD PTR [eax]
c00158e1:	50                   	push   eax
c00158e2:	ff 12                	call   DWORD PTR [edx]
c00158e4:	31 d2                	xor    edx,edx
c00158e6:	0f b6 c0             	movzx  eax,al
c00158e9:	83 c4 10             	add    esp,0x10
c00158ec:	83 c4 0c             	add    esp,0xc
c00158ef:	c3                   	ret    
c00158f0:	83 ec 0c             	sub    esp,0xc
c00158f3:	50                   	push   eax
c00158f4:	e8 be 5c ff ff       	call   c000b5b7 <getFromFileDescriptor(int)>
c00158f9:	83 c4 10             	add    esp,0x10
c00158fc:	85 c0                	test   eax,eax
c00158fe:	75 dc                	jne    c00158dc <sysCallIsATTY(regs*)+0x28>
c0015900:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015905:	ba ff ff ff ff       	mov    edx,0xffffffff
c001590a:	83 c4 0c             	add    esp,0xc
c001590d:	c3                   	ret    

c001590e <sysCallSeek(regs*)>:
c001590e:	53                   	push   ebx
c001590f:	83 ec 08             	sub    esp,0x8
c0015912:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015916:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015919:	8d 50 fd             	lea    edx,[eax-0x3]
c001591c:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0015922:	77 32                	ja     c0015956 <sysCallSeek(regs*)+0x48>
c0015924:	83 ec 0c             	sub    esp,0xc
c0015927:	50                   	push   eax
c0015928:	e8 8a 5c ff ff       	call   c000b5b7 <getFromFileDescriptor(int)>
c001592d:	83 c4 0c             	add    esp,0xc
c0015930:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0015933:	31 db                	xor    ebx,ebx
c0015935:	53                   	push   ebx
c0015936:	51                   	push   ecx
c0015937:	50                   	push   eax
c0015938:	e8 2f 78 ff ff       	call   c000d16c <File::seek(unsigned long long)>
c001593d:	83 c4 10             	add    esp,0x10
c0015940:	85 c0                	test   eax,eax
c0015942:	0f 95 c0             	setne  al
c0015945:	31 d2                	xor    edx,edx
c0015947:	0f b6 c0             	movzx  eax,al
c001594a:	f7 d8                	neg    eax
c001594c:	83 d2 00             	adc    edx,0x0
c001594f:	83 c4 08             	add    esp,0x8
c0015952:	f7 da                	neg    edx
c0015954:	5b                   	pop    ebx
c0015955:	c3                   	ret    
c0015956:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001595b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015960:	83 c4 08             	add    esp,0x8
c0015963:	5b                   	pop    ebx
c0015964:	c3                   	ret    

c0015965 <sysCallTell(regs*)>:
c0015965:	53                   	push   ebx
c0015966:	83 ec 08             	sub    esp,0x8
c0015969:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001596d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015970:	83 f8 02             	cmp    eax,0x2
c0015973:	76 4d                	jbe    c00159c2 <sysCallTell(regs*)+0x5d>
c0015975:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001597a:	76 19                	jbe    c0015995 <sysCallTell(regs*)+0x30>
c001597c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001597f:	31 d2                	xor    edx,edx
c0015981:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015987:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001598e:	31 c0                	xor    eax,eax
c0015990:	83 c4 08             	add    esp,0x8
c0015993:	5b                   	pop    ebx
c0015994:	c3                   	ret    
c0015995:	83 ec 0c             	sub    esp,0xc
c0015998:	50                   	push   eax
c0015999:	e8 19 5c ff ff       	call   c000b5b7 <getFromFileDescriptor(int)>
c001599e:	5a                   	pop    edx
c001599f:	59                   	pop    ecx
c00159a0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00159a3:	50                   	push   eax
c00159a4:	e8 19 78 ff ff       	call   c000d1c2 <File::tell(unsigned long long*)>
c00159a9:	83 c4 10             	add    esp,0x10
c00159ac:	85 c0                	test   eax,eax
c00159ae:	0f 95 c0             	setne  al
c00159b1:	31 d2                	xor    edx,edx
c00159b3:	0f b6 c0             	movzx  eax,al
c00159b6:	f7 d8                	neg    eax
c00159b8:	83 d2 00             	adc    edx,0x0
c00159bb:	83 c4 08             	add    esp,0x8
c00159be:	f7 da                	neg    edx
c00159c0:	5b                   	pop    ebx
c00159c1:	c3                   	ret    
c00159c2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00159c7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00159cc:	83 c4 08             	add    esp,0x8
c00159cf:	5b                   	pop    ebx
c00159d0:	c3                   	ret    

c00159d1 <sysCallSize(regs*)>:
c00159d1:	53                   	push   ebx
c00159d2:	83 ec 18             	sub    esp,0x18
c00159d5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00159d9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00159dc:	83 f8 02             	cmp    eax,0x2
c00159df:	76 53                	jbe    c0015a34 <sysCallSize(regs*)+0x63>
c00159e1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00159e6:	76 19                	jbe    c0015a01 <sysCallSize(regs*)+0x30>
c00159e8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00159eb:	31 d2                	xor    edx,edx
c00159ed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00159f3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00159fa:	31 c0                	xor    eax,eax
c00159fc:	83 c4 18             	add    esp,0x18
c00159ff:	5b                   	pop    ebx
c0015a00:	c3                   	ret    
c0015a01:	83 ec 0c             	sub    esp,0xc
c0015a04:	50                   	push   eax
c0015a05:	e8 ad 5b ff ff       	call   c000b5b7 <getFromFileDescriptor(int)>
c0015a0a:	83 c4 0c             	add    esp,0xc
c0015a0d:	8d 54 24 13          	lea    edx,[esp+0x13]
c0015a11:	52                   	push   edx
c0015a12:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015a15:	50                   	push   eax
c0015a16:	e8 3f 79 ff ff       	call   c000d35a <File::stat(unsigned long long*, bool*)>
c0015a1b:	83 c4 10             	add    esp,0x10
c0015a1e:	85 c0                	test   eax,eax
c0015a20:	0f 95 c0             	setne  al
c0015a23:	31 d2                	xor    edx,edx
c0015a25:	0f b6 c0             	movzx  eax,al
c0015a28:	f7 d8                	neg    eax
c0015a2a:	83 d2 00             	adc    edx,0x0
c0015a2d:	83 c4 18             	add    esp,0x18
c0015a30:	f7 da                	neg    edx
c0015a32:	5b                   	pop    ebx
c0015a33:	c3                   	ret    
c0015a34:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015a39:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015a3e:	83 c4 18             	add    esp,0x18
c0015a41:	5b                   	pop    ebx
c0015a42:	c3                   	ret    

c0015a43 <sysCallSizeFromFilename(regs*)>:
c0015a43:	57                   	push   edi
c0015a44:	56                   	push   esi
c0015a45:	53                   	push   ebx
c0015a46:	83 ec 20             	sub    esp,0x20
c0015a49:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015a4d:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0015a50:	83 fb 02             	cmp    ebx,0x2
c0015a53:	0f 86 88 00 00 00    	jbe    c0015ae1 <sysCallSizeFromFilename(regs*)+0x9e>
c0015a59:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0015a5f:	76 1b                	jbe    c0015a7c <sysCallSizeFromFilename(regs*)+0x39>
c0015a61:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0015a64:	31 d2                	xor    edx,edx
c0015a66:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015a6c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015a73:	83 c4 20             	add    esp,0x20
c0015a76:	31 c0                	xor    eax,eax
c0015a78:	5b                   	pop    ebx
c0015a79:	5e                   	pop    esi
c0015a7a:	5f                   	pop    edi
c0015a7b:	c3                   	ret    
c0015a7c:	83 ec 0c             	sub    esp,0xc
c0015a7f:	68 14 01 00 00       	push   0x114
c0015a84:	e8 3a 3f ff ff       	call   c00099c3 <malloc>
c0015a89:	83 c4 0c             	add    esp,0xc
c0015a8c:	89 c7                	mov    edi,eax
c0015a8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a93:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015a96:	53                   	push   ebx
c0015a97:	57                   	push   edi
c0015a98:	e8 ad 75 ff ff       	call   c000d04a <File::File(char const*, Process*)>
c0015a9d:	83 c4 0c             	add    esp,0xc
c0015aa0:	8d 44 24 23          	lea    eax,[esp+0x23]
c0015aa4:	50                   	push   eax
c0015aa5:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015aa8:	57                   	push   edi
c0015aa9:	e8 ac 78 ff ff       	call   c000d35a <File::stat(unsigned long long*, bool*)>
c0015aae:	83 c4 10             	add    esp,0x10
c0015ab1:	85 ff                	test   edi,edi
c0015ab3:	74 14                	je     c0015ac9 <sysCallSizeFromFilename(regs*)+0x86>
c0015ab5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015ab9:	8b 17                	mov    edx,DWORD PTR [edi]
c0015abb:	83 ec 0c             	sub    esp,0xc
c0015abe:	57                   	push   edi
c0015abf:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015ac2:	83 c4 10             	add    esp,0x10
c0015ac5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015ac9:	85 c0                	test   eax,eax
c0015acb:	0f 95 c0             	setne  al
c0015ace:	31 d2                	xor    edx,edx
c0015ad0:	0f b6 c0             	movzx  eax,al
c0015ad3:	f7 d8                	neg    eax
c0015ad5:	83 d2 00             	adc    edx,0x0
c0015ad8:	83 c4 20             	add    esp,0x20
c0015adb:	f7 da                	neg    edx
c0015add:	5b                   	pop    ebx
c0015ade:	5e                   	pop    esi
c0015adf:	5f                   	pop    edi
c0015ae0:	c3                   	ret    
c0015ae1:	83 c4 20             	add    esp,0x20
c0015ae4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015ae9:	5b                   	pop    ebx
c0015aea:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015aef:	5e                   	pop    esi
c0015af0:	5f                   	pop    edi
c0015af1:	c3                   	ret    

c0015af2 <sysCallClose(regs*)>:
c0015af2:	53                   	push   ebx
c0015af3:	83 ec 08             	sub    esp,0x8
c0015af6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015afa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015afd:	83 f8 02             	cmp    eax,0x2
c0015b00:	76 41                	jbe    c0015b43 <sysCallClose(regs*)+0x51>
c0015b02:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0015b08:	83 fa 01             	cmp    edx,0x1
c0015b0b:	76 2d                	jbe    c0015b3a <sysCallClose(regs*)+0x48>
c0015b0d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015b12:	77 2f                	ja     c0015b43 <sysCallClose(regs*)+0x51>
c0015b14:	83 ec 0c             	sub    esp,0xc
c0015b17:	50                   	push   eax
c0015b18:	e8 9a 5a ff ff       	call   c000b5b7 <getFromFileDescriptor(int)>
c0015b1d:	89 c3                	mov    ebx,eax
c0015b1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0015b22:	e8 e5 75 ff ff       	call   c000d10c <File::close()>
c0015b27:	83 c4 10             	add    esp,0x10
c0015b2a:	85 db                	test   ebx,ebx
c0015b2c:	74 0c                	je     c0015b3a <sysCallClose(regs*)+0x48>
c0015b2e:	83 ec 0c             	sub    esp,0xc
c0015b31:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b33:	53                   	push   ebx
c0015b34:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015b37:	83 c4 10             	add    esp,0x10
c0015b3a:	31 c0                	xor    eax,eax
c0015b3c:	31 d2                	xor    edx,edx
c0015b3e:	83 c4 08             	add    esp,0x8
c0015b41:	5b                   	pop    ebx
c0015b42:	c3                   	ret    
c0015b43:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b48:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015b4d:	83 c4 08             	add    esp,0x8
c0015b50:	5b                   	pop    ebx
c0015b51:	c3                   	ret    

c0015b52 <sysCallOpenDir(regs*)>:
c0015b52:	56                   	push   esi
c0015b53:	53                   	push   ebx
c0015b54:	53                   	push   ebx
c0015b55:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015b59:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0015b5c:	85 f6                	test   esi,esi
c0015b5e:	74 59                	je     c0015bb9 <sysCallOpenDir(regs*)+0x67>
c0015b60:	83 ec 0c             	sub    esp,0xc
c0015b63:	68 14 01 00 00       	push   0x114
c0015b68:	e8 56 3e ff ff       	call   c00099c3 <malloc>
c0015b6d:	83 c4 0c             	add    esp,0xc
c0015b70:	89 c6                	mov    esi,eax
c0015b72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b77:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015b7a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015b7d:	56                   	push   esi
c0015b7e:	e8 73 79 ff ff       	call   c000d4f6 <Directory::Directory(char const*, Process*)>
c0015b83:	83 c4 10             	add    esp,0x10
c0015b86:	85 f6                	test   esi,esi
c0015b88:	74 2f                	je     c0015bb9 <sysCallOpenDir(regs*)+0x67>
c0015b8a:	83 ec 0c             	sub    esp,0xc
c0015b8d:	56                   	push   esi
c0015b8e:	e8 c7 79 ff ff       	call   c000d55a <Directory::open()>
c0015b93:	83 c4 10             	add    esp,0x10
c0015b96:	85 c0                	test   eax,eax
c0015b98:	75 1f                	jne    c0015bb9 <sysCallOpenDir(regs*)+0x67>
c0015b9a:	83 ec 0c             	sub    esp,0xc
c0015b9d:	56                   	push   esi
c0015b9e:	e8 1f 57 ff ff       	call   c000b2c2 <UnixFile::getFileDescriptor()>
c0015ba3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0015ba6:	83 c4 10             	add    esp,0x10
c0015ba9:	89 02                	mov    DWORD PTR [edx],eax
c0015bab:	c1 f8 1f             	sar    eax,0x1f
c0015bae:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015bb1:	31 c0                	xor    eax,eax
c0015bb3:	59                   	pop    ecx
c0015bb4:	31 d2                	xor    edx,edx
c0015bb6:	5b                   	pop    ebx
c0015bb7:	5e                   	pop    esi
c0015bb8:	c3                   	ret    
c0015bb9:	59                   	pop    ecx
c0015bba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015bbf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015bc4:	5b                   	pop    ebx
c0015bc5:	5e                   	pop    esi
c0015bc6:	c3                   	ret    

c0015bc7 <sysCallCloseDir(regs*)>:
c0015bc7:	53                   	push   ebx
c0015bc8:	83 ec 08             	sub    esp,0x8
c0015bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bcf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015bd2:	8d 50 fd             	lea    edx,[eax-0x3]
c0015bd5:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0015bdb:	77 2f                	ja     c0015c0c <sysCallCloseDir(regs*)+0x45>
c0015bdd:	83 ec 0c             	sub    esp,0xc
c0015be0:	50                   	push   eax
c0015be1:	e8 d1 59 ff ff       	call   c000b5b7 <getFromFileDescriptor(int)>
c0015be6:	89 c3                	mov    ebx,eax
c0015be8:	89 04 24             	mov    DWORD PTR [esp],eax
c0015beb:	e8 c6 79 ff ff       	call   c000d5b6 <Directory::close()>
c0015bf0:	83 c4 10             	add    esp,0x10
c0015bf3:	85 db                	test   ebx,ebx
c0015bf5:	74 0c                	je     c0015c03 <sysCallCloseDir(regs*)+0x3c>
c0015bf7:	83 ec 0c             	sub    esp,0xc
c0015bfa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015bfc:	53                   	push   ebx
c0015bfd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015c00:	83 c4 10             	add    esp,0x10
c0015c03:	31 c0                	xor    eax,eax
c0015c05:	31 d2                	xor    edx,edx
c0015c07:	83 c4 08             	add    esp,0x8
c0015c0a:	5b                   	pop    ebx
c0015c0b:	c3                   	ret    
c0015c0c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c11:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015c16:	83 c4 08             	add    esp,0x8
c0015c19:	5b                   	pop    ebx
c0015c1a:	c3                   	ret    

c0015c1b <sysCallMakeDir(regs*)>:
c0015c1b:	56                   	push   esi
c0015c1c:	53                   	push   ebx
c0015c1d:	83 ec 10             	sub    esp,0x10
c0015c20:	68 14 01 00 00       	push   0x114
c0015c25:	e8 99 3d ff ff       	call   c00099c3 <malloc>
c0015c2a:	83 c4 0c             	add    esp,0xc
c0015c2d:	89 c3                	mov    ebx,eax
c0015c2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c34:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015c37:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015c3b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015c3e:	53                   	push   ebx
c0015c3f:	e8 b2 78 ff ff       	call   c000d4f6 <Directory::Directory(char const*, Process*)>
c0015c44:	83 c4 10             	add    esp,0x10
c0015c47:	85 db                	test   ebx,ebx
c0015c49:	74 32                	je     c0015c7d <sysCallMakeDir(regs*)+0x62>
c0015c4b:	83 ec 0c             	sub    esp,0xc
c0015c4e:	53                   	push   ebx
c0015c4f:	e8 e6 7a ff ff       	call   c000d73a <Directory::create()>
c0015c54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015c57:	89 c6                	mov    esi,eax
c0015c59:	e8 58 79 ff ff       	call   c000d5b6 <Directory::close()>
c0015c5e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015c60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015c63:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015c66:	83 c4 10             	add    esp,0x10
c0015c69:	31 c0                	xor    eax,eax
c0015c6b:	59                   	pop    ecx
c0015c6c:	85 f6                	test   esi,esi
c0015c6e:	5b                   	pop    ebx
c0015c6f:	0f 95 c0             	setne  al
c0015c72:	5e                   	pop    esi
c0015c73:	31 d2                	xor    edx,edx
c0015c75:	f7 d8                	neg    eax
c0015c77:	83 d2 00             	adc    edx,0x0
c0015c7a:	f7 da                	neg    edx
c0015c7c:	c3                   	ret    
c0015c7d:	59                   	pop    ecx
c0015c7e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c83:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015c88:	5b                   	pop    ebx
c0015c89:	5e                   	pop    esi
c0015c8a:	c3                   	ret    

c0015c8b <sysCallWait(regs*)>:
c0015c8b:	83 ec 10             	sub    esp,0x10
c0015c8e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015c92:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015c95:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015c98:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015c9b:	e8 fc 24 00 00       	call   c001819c <waitTask(int, int*, int)>
c0015ca0:	83 c4 1c             	add    esp,0x1c
c0015ca3:	99                   	cdq    
c0015ca4:	c3                   	ret    

c0015ca5 <sysCallNotImpl(regs*)>:
c0015ca5:	83 ec 18             	sub    esp,0x18
c0015ca8:	68 29 46 02 c0       	push   0xc0024629
c0015cad:	e8 ef e6 ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c0015cb2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015cb7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015cbc:	83 c4 1c             	add    esp,0x1c
c0015cbf:	c3                   	ret    

c0015cc0 <sysPanic(regs*)>:
c0015cc0:	83 ec 18             	sub    esp,0x18
c0015cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015cc7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015cca:	e8 d2 e6 ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c0015ccf:	b8 01 00 00 00       	mov    eax,0x1
c0015cd4:	31 d2                	xor    edx,edx
c0015cd6:	83 c4 1c             	add    esp,0x1c
c0015cd9:	c3                   	ret    

c0015cda <sysCallRmdir(regs*)>:
c0015cda:	56                   	push   esi
c0015cdb:	53                   	push   ebx
c0015cdc:	83 ec 20             	sub    esp,0x20
c0015cdf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015ce3:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015ce6:	68 14 01 00 00       	push   0x114
c0015ceb:	e8 d3 3c ff ff       	call   c00099c3 <malloc>
c0015cf0:	83 c4 0c             	add    esp,0xc
c0015cf3:	89 c3                	mov    ebx,eax
c0015cf5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cfa:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015cfd:	56                   	push   esi
c0015cfe:	53                   	push   ebx
c0015cff:	e8 46 73 ff ff       	call   c000d04a <File::File(char const*, Process*)>
c0015d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d07:	e8 1a 75 ff ff       	call   c000d226 <File::unlink()>
c0015d0c:	83 c4 10             	add    esp,0x10
c0015d0f:	85 db                	test   ebx,ebx
c0015d11:	74 14                	je     c0015d27 <sysCallRmdir(regs*)+0x4d>
c0015d13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d17:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015d19:	83 ec 0c             	sub    esp,0xc
c0015d1c:	53                   	push   ebx
c0015d1d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015d20:	83 c4 10             	add    esp,0x10
c0015d23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d27:	85 c0                	test   eax,eax
c0015d29:	0f 95 c0             	setne  al
c0015d2c:	31 d2                	xor    edx,edx
c0015d2e:	0f b6 c0             	movzx  eax,al
c0015d31:	f7 d8                	neg    eax
c0015d33:	83 d2 00             	adc    edx,0x0
c0015d36:	83 c4 14             	add    esp,0x14
c0015d39:	f7 da                	neg    edx
c0015d3b:	5b                   	pop    ebx
c0015d3c:	5e                   	pop    esi
c0015d3d:	c3                   	ret    

c0015d3e <sysCallUnlink(regs*)>:
c0015d3e:	56                   	push   esi
c0015d3f:	53                   	push   ebx
c0015d40:	83 ec 20             	sub    esp,0x20
c0015d43:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015d47:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015d4a:	68 14 01 00 00       	push   0x114
c0015d4f:	e8 6f 3c ff ff       	call   c00099c3 <malloc>
c0015d54:	83 c4 0c             	add    esp,0xc
c0015d57:	89 c3                	mov    ebx,eax
c0015d59:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d5e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015d61:	56                   	push   esi
c0015d62:	53                   	push   ebx
c0015d63:	e8 e2 72 ff ff       	call   c000d04a <File::File(char const*, Process*)>
c0015d68:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d6b:	e8 b6 74 ff ff       	call   c000d226 <File::unlink()>
c0015d70:	83 c4 10             	add    esp,0x10
c0015d73:	85 db                	test   ebx,ebx
c0015d75:	74 14                	je     c0015d8b <sysCallUnlink(regs*)+0x4d>
c0015d77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d7b:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015d7d:	83 ec 0c             	sub    esp,0xc
c0015d80:	53                   	push   ebx
c0015d81:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015d84:	83 c4 10             	add    esp,0x10
c0015d87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d8b:	85 c0                	test   eax,eax
c0015d8d:	0f 95 c0             	setne  al
c0015d90:	31 d2                	xor    edx,edx
c0015d92:	0f b6 c0             	movzx  eax,al
c0015d95:	f7 d8                	neg    eax
c0015d97:	83 d2 00             	adc    edx,0x0
c0015d9a:	83 c4 14             	add    esp,0x14
c0015d9d:	f7 da                	neg    edx
c0015d9f:	5b                   	pop    ebx
c0015da0:	5e                   	pop    esi
c0015da1:	c3                   	ret    

c0015da2 <sysCallGetArgv(regs*)>:
c0015da2:	83 ec 0c             	sub    esp,0xc
c0015da5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015da9:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015dac:	85 c0                	test   eax,eax
c0015dae:	78 2b                	js     c0015ddb <sysCallGetArgv(regs*)+0x39>
c0015db0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015db6:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0015db9:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0015dbf:	7d 1a                	jge    c0015ddb <sysCallGetArgv(regs*)+0x39>
c0015dc1:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0015dc8:	85 c0                	test   eax,eax
c0015dca:	74 17                	je     c0015de3 <sysCallGetArgv(regs*)+0x41>
c0015dcc:	83 ec 08             	sub    esp,0x8
c0015dcf:	50                   	push   eax
c0015dd0:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0015dd3:	e8 68 a9 fe ff       	call   c0000740 <strcpy>
c0015dd8:	83 c4 10             	add    esp,0x10
c0015ddb:	31 c0                	xor    eax,eax
c0015ddd:	31 d2                	xor    edx,edx
c0015ddf:	83 c4 0c             	add    esp,0xc
c0015de2:	c3                   	ret    
c0015de3:	b8 01 00 00 00       	mov    eax,0x1
c0015de8:	31 d2                	xor    edx,edx
c0015dea:	83 c4 0c             	add    esp,0xc
c0015ded:	c3                   	ret    

c0015dee <sysCallTTYName(regs*)>:
c0015dee:	56                   	push   esi
c0015def:	53                   	push   ebx
c0015df0:	53                   	push   ebx
c0015df1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015df5:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0015df8:	85 c0                	test   eax,eax
c0015dfa:	74 5f                	je     c0015e5b <sysCallTTYName(regs*)+0x6d>
c0015dfc:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015dff:	83 f8 02             	cmp    eax,0x2
c0015e02:	77 3e                	ja     c0015e42 <sysCallTTYName(regs*)+0x54>
c0015e04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e09:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015e0c:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c0015e12:	85 db                	test   ebx,ebx
c0015e14:	74 45                	je     c0015e5b <sysCallTTYName(regs*)+0x6d>
c0015e16:	83 ec 0c             	sub    esp,0xc
c0015e19:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e1b:	53                   	push   ebx
c0015e1c:	ff 10                	call   DWORD PTR [eax]
c0015e1e:	83 c4 10             	add    esp,0x10
c0015e21:	84 c0                	test   al,al
c0015e23:	74 41                	je     c0015e66 <sysCallTTYName(regs*)+0x78>
c0015e25:	83 ec 08             	sub    esp,0x8
c0015e28:	81 c3 82 00 00 00    	add    ebx,0x82
c0015e2e:	53                   	push   ebx
c0015e2f:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015e32:	e8 09 a9 fe ff       	call   c0000740 <strcpy>
c0015e37:	83 c4 10             	add    esp,0x10
c0015e3a:	31 c0                	xor    eax,eax
c0015e3c:	59                   	pop    ecx
c0015e3d:	31 d2                	xor    edx,edx
c0015e3f:	5b                   	pop    ebx
c0015e40:	5e                   	pop    esi
c0015e41:	c3                   	ret    
c0015e42:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015e47:	74 bb                	je     c0015e04 <sysCallTTYName(regs*)+0x16>
c0015e49:	83 ec 0c             	sub    esp,0xc
c0015e4c:	50                   	push   eax
c0015e4d:	e8 65 57 ff ff       	call   c000b5b7 <getFromFileDescriptor(int)>
c0015e52:	83 c4 10             	add    esp,0x10
c0015e55:	89 c3                	mov    ebx,eax
c0015e57:	85 db                	test   ebx,ebx
c0015e59:	75 bb                	jne    c0015e16 <sysCallTTYName(regs*)+0x28>
c0015e5b:	59                   	pop    ecx
c0015e5c:	b8 01 00 00 00       	mov    eax,0x1
c0015e61:	31 d2                	xor    edx,edx
c0015e63:	5b                   	pop    ebx
c0015e64:	5e                   	pop    esi
c0015e65:	c3                   	ret    
c0015e66:	59                   	pop    ecx
c0015e67:	b8 02 00 00 00       	mov    eax,0x2
c0015e6c:	31 d2                	xor    edx,edx
c0015e6e:	5b                   	pop    ebx
c0015e6f:	5e                   	pop    esi
c0015e70:	c3                   	ret    

c0015e71 <sysCallUSleep(regs*)>:
c0015e71:	83 ec 1c             	sub    esp,0x1c
c0015e74:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015e78:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015e7b:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0015e7e:	6a 00                	push   0x0
c0015e80:	6a 64                	push   0x64
c0015e82:	52                   	push   edx
c0015e83:	50                   	push   eax
c0015e84:	e8 1b b1 00 00       	call   c0020fa4 <__udivdi3>
c0015e89:	83 c4 14             	add    esp,0x14
c0015e8c:	50                   	push   eax
c0015e8d:	e8 da 23 00 00       	call   c001826c <milliTenthSleep(unsigned int)>
c0015e92:	31 c0                	xor    eax,eax
c0015e94:	31 d2                	xor    edx,edx
c0015e96:	83 c4 1c             	add    esp,0x1c
c0015e99:	c3                   	ret    

c0015e9a <sysCallSpawn(regs*)>:
c0015e9a:	56                   	push   esi
c0015e9b:	53                   	push   ebx
c0015e9c:	50                   	push   eax
c0015e9d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015ea1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015ea4:	85 c0                	test   eax,eax
c0015ea6:	75 08                	jne    c0015eb0 <sysCallSpawn(regs*)+0x16>
c0015ea8:	59                   	pop    ecx
c0015ea9:	31 c0                	xor    eax,eax
c0015eab:	31 d2                	xor    edx,edx
c0015ead:	5b                   	pop    ebx
c0015eae:	5e                   	pop    esi
c0015eaf:	c3                   	ret    
c0015eb0:	83 ec 0c             	sub    esp,0xc
c0015eb3:	68 1f 07 00 00       	push   0x71f
c0015eb8:	e8 06 3b ff ff       	call   c00099c3 <malloc>
c0015ebd:	83 c4 10             	add    esp,0x10
c0015ec0:	89 c6                	mov    esi,eax
c0015ec2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0015ec5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015ec8:	85 c0                	test   eax,eax
c0015eca:	75 32                	jne    c0015efe <sysCallSpawn(regs*)+0x64>
c0015ecc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ed1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015ed4:	52                   	push   edx
c0015ed5:	50                   	push   eax
c0015ed6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015ed9:	56                   	push   esi
c0015eda:	e8 85 1a 00 00       	call   c0017964 <Process::Process(char const*, Process*, char**)>
c0015edf:	83 c4 10             	add    esp,0x10
c0015ee2:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0015ee9:	75 bd                	jne    c0015ea8 <sysCallSpawn(regs*)+0xe>
c0015eeb:	83 ec 0c             	sub    esp,0xc
c0015eee:	56                   	push   esi
c0015eef:	e8 5c 1f 00 00       	call   c0017e50 <Process::createUserThread()>
c0015ef4:	8b 06                	mov    eax,DWORD PTR [esi]
c0015ef6:	83 c4 10             	add    esp,0x10
c0015ef9:	99                   	cdq    
c0015efa:	59                   	pop    ecx
c0015efb:	5b                   	pop    ebx
c0015efc:	5e                   	pop    esi
c0015efd:	c3                   	ret    
c0015efe:	31 c0                	xor    eax,eax
c0015f00:	eb d2                	jmp    c0015ed4 <sysCallSpawn(regs*)+0x3a>

c0015f02 <sysCallGetEnv(regs*)>:
c0015f02:	57                   	push   edi
c0015f03:	56                   	push   esi
c0015f04:	53                   	push   ebx
c0015f05:	83 ec 1c             	sub    esp,0x1c
c0015f08:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015f0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f11:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0015f14:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0015f17:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015f1a:	e8 ce e3 ff ff       	call   c00142ed <Krnl::getProcessTotalEnvCount(Process*)>
c0015f1f:	83 c4 10             	add    esp,0x10
c0015f22:	39 c7                	cmp    edi,eax
c0015f24:	7c 14                	jl     c0015f3a <sysCallGetEnv(regs*)+0x38>
c0015f26:	85 f6                	test   esi,esi
c0015f28:	75 0b                	jne    c0015f35 <sysCallGetEnv(regs*)+0x33>
c0015f2a:	83 c4 10             	add    esp,0x10
c0015f2d:	31 c0                	xor    eax,eax
c0015f2f:	5b                   	pop    ebx
c0015f30:	31 d2                	xor    edx,edx
c0015f32:	5e                   	pop    esi
c0015f33:	5f                   	pop    edi
c0015f34:	c3                   	ret    
c0015f35:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015f38:	eb f0                	jmp    c0015f2a <sysCallGetEnv(regs*)+0x28>
c0015f3a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015f3e:	52                   	push   edx
c0015f3f:	57                   	push   edi
c0015f40:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015f46:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c0015f49:	50                   	push   eax
c0015f4a:	e8 be e3 ff ff       	call   c001430d <Krnl::getProcessEnvPair(Process*, int)>
c0015f4f:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0015f52:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015f56:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015f5a:	83 c4 0c             	add    esp,0xc
c0015f5d:	85 c9                	test   ecx,ecx
c0015f5f:	75 23                	jne    c0015f84 <sysCallGetEnv(regs*)+0x82>
c0015f61:	83 ec 0c             	sub    esp,0xc
c0015f64:	50                   	push   eax
c0015f65:	e8 36 a7 fe ff       	call   c00006a0 <strlen>
c0015f6a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015f6d:	89 c3                	mov    ebx,eax
c0015f6f:	e8 2c a7 fe ff       	call   c00006a0 <strlen>
c0015f74:	83 c4 10             	add    esp,0x10
c0015f77:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0015f7b:	83 c4 10             	add    esp,0x10
c0015f7e:	31 d2                	xor    edx,edx
c0015f80:	5b                   	pop    ebx
c0015f81:	5e                   	pop    esi
c0015f82:	5f                   	pop    edi
c0015f83:	c3                   	ret    
c0015f84:	83 ec 08             	sub    esp,0x8
c0015f87:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015f8a:	50                   	push   eax
c0015f8b:	56                   	push   esi
c0015f8c:	e8 af a7 fe ff       	call   c0000740 <strcpy>
c0015f91:	58                   	pop    eax
c0015f92:	5a                   	pop    edx
c0015f93:	68 43 46 02 c0       	push   0xc0024643
c0015f98:	56                   	push   esi
c0015f99:	e8 e2 a8 fe ff       	call   c0000880 <strcat>
c0015f9e:	59                   	pop    ecx
c0015f9f:	5b                   	pop    ebx
c0015fa0:	57                   	push   edi
c0015fa1:	56                   	push   esi
c0015fa2:	e8 d9 a8 fe ff       	call   c0000880 <strcat>
c0015fa7:	83 c4 10             	add    esp,0x10
c0015faa:	e9 7b ff ff ff       	jmp    c0015f2a <sysCallGetEnv(regs*)+0x28>

c0015faf <sysAppSettings(regs*)>:
c0015faf:	57                   	push   edi
c0015fb0:	56                   	push   esi
c0015fb1:	56                   	push   esi
c0015fb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fb6:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015fb9:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c0015fbf:	25 e0 1f 00 00       	and    eax,0x1fe0
c0015fc4:	66 3d c0 09          	cmp    ax,0x9c0
c0015fc8:	75 2e                	jne    c0015ff8 <sysAppSettings(regs*)+0x49>
c0015fca:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c0015fd0:	83 e0 1f             	and    eax,0x1f
c0015fd3:	3c 01                	cmp    al,0x1
c0015fd5:	74 2c                	je     c0016003 <sysAppSettings(regs*)+0x54>
c0015fd7:	3c 07                	cmp    al,0x7
c0015fd9:	0f 84 b3 00 00 00    	je     c0016092 <sysAppSettings(regs*)+0xe3>
c0015fdf:	84 c0                	test   al,al
c0015fe1:	0f 84 d2 00 00 00    	je     c00160b9 <sysAppSettings(regs*)+0x10a>
c0015fe7:	3c 08                	cmp    al,0x8
c0015fe9:	74 63                	je     c001604e <sysAppSettings(regs*)+0x9f>
c0015feb:	59                   	pop    ecx
c0015fec:	0f b6 c0             	movzx  eax,al
c0015fef:	5e                   	pop    esi
c0015ff0:	05 e8 03 00 00       	add    eax,0x3e8
c0015ff5:	5f                   	pop    edi
c0015ff6:	99                   	cdq    
c0015ff7:	c3                   	ret    
c0015ff8:	b8 01 00 00 00       	mov    eax,0x1
c0015ffd:	59                   	pop    ecx
c0015ffe:	31 d2                	xor    edx,edx
c0016000:	5e                   	pop    esi
c0016001:	5f                   	pop    edi
c0016002:	c3                   	ret    
c0016003:	50                   	push   eax
c0016004:	68 00 01 00 00       	push   0x100
c0016009:	6a 00                	push   0x0
c001600b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016010:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016013:	83 c0 0c             	add    eax,0xc
c0016016:	50                   	push   eax
c0016017:	e8 68 a6 fe ff       	call   c0000684 <memset>
c001601c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016021:	b9 ff 00 00 00       	mov    ecx,0xff
c0016026:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c0016029:	83 c7 0c             	add    edi,0xc
c001602c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001602e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016033:	5a                   	pop    edx
c0016034:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016037:	59                   	pop    ecx
c0016038:	8d 50 0c             	lea    edx,[eax+0xc]
c001603b:	52                   	push   edx
c001603c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016042:	e8 93 46 ff ff       	call   c000a6da <VgaText::setTitle(char*)>
c0016047:	83 c4 10             	add    esp,0x10
c001604a:	31 c0                	xor    eax,eax
c001604c:	eb af                	jmp    c0015ffd <sysAppSettings(regs*)+0x4e>
c001604e:	83 ec 08             	sub    esp,0x8
c0016051:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0016057:	83 e0 0f             	and    eax,0xf
c001605a:	50                   	push   eax
c001605b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016060:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016063:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016069:	e8 5c 46 ff ff       	call   c000a6ca <VgaText::setTitleColour(VgaColour)>
c001606e:	5f                   	pop    edi
c001606f:	58                   	pop    eax
c0016070:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0016076:	c1 e8 04             	shr    eax,0x4
c0016079:	83 e0 0f             	and    eax,0xf
c001607c:	50                   	push   eax
c001607d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016082:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016085:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001608b:	e8 2a 46 ff ff       	call   c000a6ba <VgaText::setTitleTextColour(VgaColour)>
c0016090:	eb b5                	jmp    c0016047 <sysAppSettings(regs*)+0x98>
c0016092:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016097:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001609a:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00160a0:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c00160a6:	c0 e8 06             	shr    al,0x6
c00160a9:	83 e0 01             	and    eax,0x1
c00160ac:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c00160b2:	31 c0                	xor    eax,eax
c00160b4:	e9 44 ff ff ff       	jmp    c0015ffd <sysAppSettings(regs*)+0x4e>
c00160b9:	b8 02 00 00 00       	mov    eax,0x2
c00160be:	e9 3a ff ff ff       	jmp    c0015ffd <sysAppSettings(regs*)+0x4e>

c00160c3 <sysSetFatAttrib(regs*)>:
c00160c3:	57                   	push   edi
c00160c4:	56                   	push   esi
c00160c5:	53                   	push   ebx
c00160c6:	83 ec 1c             	sub    esp,0x1c
c00160c9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00160cd:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00160d0:	68 14 01 00 00       	push   0x114
c00160d5:	e8 e9 38 ff ff       	call   c00099c3 <malloc>
c00160da:	83 c4 0c             	add    esp,0xc
c00160dd:	89 c3                	mov    ebx,eax
c00160df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160e4:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00160e7:	57                   	push   edi
c00160e8:	53                   	push   ebx
c00160e9:	e8 5c 6f ff ff       	call   c000d04a <File::File(char const*, Process*)>
c00160ee:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00160f1:	83 c4 0c             	add    esp,0xc
c00160f4:	0f b6 d4             	movzx  edx,ah
c00160f7:	0f b6 c0             	movzx  eax,al
c00160fa:	52                   	push   edx
c00160fb:	50                   	push   eax
c00160fc:	53                   	push   ebx
c00160fd:	e8 be 71 ff ff       	call   c000d2c0 <File::chfatattr(unsigned char, unsigned char)>
c0016102:	83 c4 10             	add    esp,0x10
c0016105:	85 db                	test   ebx,ebx
c0016107:	74 14                	je     c001611d <sysSetFatAttrib(regs*)+0x5a>
c0016109:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001610d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001610f:	83 ec 0c             	sub    esp,0xc
c0016112:	53                   	push   ebx
c0016113:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016116:	83 c4 10             	add    esp,0x10
c0016119:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001611d:	85 c0                	test   eax,eax
c001611f:	0f 95 c0             	setne  al
c0016122:	31 d2                	xor    edx,edx
c0016124:	0f b6 c0             	movzx  eax,al
c0016127:	f7 d8                	neg    eax
c0016129:	83 d2 00             	adc    edx,0x0
c001612c:	83 c4 10             	add    esp,0x10
c001612f:	f7 da                	neg    edx
c0016131:	5b                   	pop    ebx
c0016132:	5e                   	pop    esi
c0016133:	5f                   	pop    edi
c0016134:	c3                   	ret    

c0016135 <sysPipe(regs*)>:
c0016135:	57                   	push   edi
c0016136:	56                   	push   esi
c0016137:	53                   	push   ebx
c0016138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001613c:	83 ec 0c             	sub    esp,0xc
c001613f:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0016142:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0016145:	6a 20                	push   0x20
c0016147:	e8 77 38 ff ff       	call   c00099c3 <malloc>
c001614c:	89 c3                	mov    ebx,eax
c001614e:	58                   	pop    eax
c001614f:	5a                   	pop    edx
c0016150:	68 00 50 00 00       	push   0x5000
c0016155:	53                   	push   ebx
c0016156:	e8 f7 42 ff ff       	call   c000a452 <Pipe::Pipe(int)>
c001615b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001615e:	e8 5f 51 ff ff       	call   c000b2c2 <UnixFile::getFileDescriptor()>
c0016163:	89 07                	mov    DWORD PTR [edi],eax
c0016165:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016168:	e8 55 51 ff ff       	call   c000b2c2 <UnixFile::getFileDescriptor()>
c001616d:	83 c4 10             	add    esp,0x10
c0016170:	89 06                	mov    DWORD PTR [esi],eax
c0016172:	31 d2                	xor    edx,edx
c0016174:	5b                   	pop    ebx
c0016175:	31 c0                	xor    eax,eax
c0016177:	5e                   	pop    esi
c0016178:	5f                   	pop    edi
c0016179:	c3                   	ret    

c001617a <sysGetUnixTime(regs*)>:
c001617a:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c001617f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016185:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016189:	e9 b0 78 ff ff       	jmp    c000da3e <Clock::timeInSecondsLocal()>

c001618e <string_ends_with(char const*, char const*)>:
c001618e:	57                   	push   edi
c001618f:	56                   	push   esi
c0016190:	53                   	push   ebx
c0016191:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016195:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016199:	83 ec 0c             	sub    esp,0xc
c001619c:	53                   	push   ebx
c001619d:	e8 fe a4 fe ff       	call   c00006a0 <strlen>
c00161a2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00161a5:	89 c6                	mov    esi,eax
c00161a7:	e8 f4 a4 fe ff       	call   c00006a0 <strlen>
c00161ac:	83 c4 10             	add    esp,0x10
c00161af:	39 c6                	cmp    esi,eax
c00161b1:	7d 06                	jge    c00161b9 <string_ends_with(char const*, char const*)+0x2b>
c00161b3:	5b                   	pop    ebx
c00161b4:	31 c0                	xor    eax,eax
c00161b6:	5e                   	pop    esi
c00161b7:	5f                   	pop    edi
c00161b8:	c3                   	ret    
c00161b9:	83 ec 08             	sub    esp,0x8
c00161bc:	29 c6                	sub    esi,eax
c00161be:	57                   	push   edi
c00161bf:	01 f3                	add    ebx,esi
c00161c1:	53                   	push   ebx
c00161c2:	e8 05 a6 fe ff       	call   c00007cc <strcmp>
c00161c7:	83 c4 10             	add    esp,0x10
c00161ca:	85 c0                	test   eax,eax
c00161cc:	5b                   	pop    ebx
c00161cd:	0f 94 c0             	sete   al
c00161d0:	5e                   	pop    esi
c00161d1:	0f b6 c0             	movzx  eax,al
c00161d4:	5f                   	pop    edi
c00161d5:	c3                   	ret    

c00161d6 <sysCallOpen(regs*)>:
c00161d6:	56                   	push   esi
c00161d7:	53                   	push   ebx
c00161d8:	81 ec 04 01 00 00    	sub    esp,0x104
c00161de:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00161e5:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00161e8:	85 c9                	test   ecx,ecx
c00161ea:	0f 84 ad 01 00 00    	je     c001639d <sysCallOpen(regs*)+0x1c7>
c00161f0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00161f3:	85 c0                	test   eax,eax
c00161f5:	0f 84 a2 01 00 00    	je     c001639d <sysCallOpen(regs*)+0x1c7>
c00161fb:	52                   	push   edx
c00161fc:	68 45 46 02 c0       	push   0xc0024645
c0016201:	50                   	push   eax
c0016202:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0016206:	56                   	push   esi
c0016207:	e8 94 6c ff ff       	call   c000cea0 <Fs::standardiseFiles(char*, char const*, char const*)>
c001620c:	89 34 24             	mov    DWORD PTR [esp],esi
c001620f:	e8 8c a4 fe ff       	call   c00006a0 <strlen>
c0016214:	83 c4 10             	add    esp,0x10
c0016217:	48                   	dec    eax
c0016218:	74 1d                	je     c0016237 <sysCallOpen(regs*)+0x61>
c001621a:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001621d:	eb 0f                	jmp    c001622e <sysCallOpen(regs*)+0x58>
c001621f:	80 fa 3a             	cmp    dl,0x3a
c0016222:	74 0f                	je     c0016233 <sysCallOpen(regs*)+0x5d>
c0016224:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0016228:	48                   	dec    eax
c0016229:	74 0c                	je     c0016237 <sysCallOpen(regs*)+0x61>
c001622b:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001622e:	80 fa 2e             	cmp    dl,0x2e
c0016231:	75 ec                	jne    c001621f <sysCallOpen(regs*)+0x49>
c0016233:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0016237:	83 ec 08             	sub    esp,0x8
c001623a:	68 49 46 02 c0       	push   0xc0024649
c001623f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016242:	e8 47 ff ff ff       	call   c001618e <string_ends_with(char const*, char const*)>
c0016247:	83 c4 10             	add    esp,0x10
c001624a:	85 c0                	test   eax,eax
c001624c:	74 1d                	je     c001626b <sysCallOpen(regs*)+0x95>
c001624e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016251:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0016257:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001625e:	81 c4 04 01 00 00    	add    esp,0x104
c0016264:	31 c0                	xor    eax,eax
c0016266:	31 d2                	xor    edx,edx
c0016268:	5b                   	pop    ebx
c0016269:	5e                   	pop    esi
c001626a:	c3                   	ret    
c001626b:	83 ec 08             	sub    esp,0x8
c001626e:	68 4e 46 02 c0       	push   0xc002464e
c0016273:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016276:	e8 13 ff ff ff       	call   c001618e <string_ends_with(char const*, char const*)>
c001627b:	83 c4 10             	add    esp,0x10
c001627e:	85 c0                	test   eax,eax
c0016280:	75 cc                	jne    c001624e <sysCallOpen(regs*)+0x78>
c0016282:	83 ec 08             	sub    esp,0x8
c0016285:	68 4a 46 02 c0       	push   0xc002464a
c001628a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001628d:	e8 3a a5 fe ff       	call   c00007cc <strcmp>
c0016292:	83 c4 10             	add    esp,0x10
c0016295:	85 c0                	test   eax,eax
c0016297:	74 b5                	je     c001624e <sysCallOpen(regs*)+0x78>
c0016299:	83 ec 08             	sub    esp,0x8
c001629c:	68 49 46 02 c0       	push   0xc0024649
c00162a1:	56                   	push   esi
c00162a2:	e8 e7 fe ff ff       	call   c001618e <string_ends_with(char const*, char const*)>
c00162a7:	83 c4 10             	add    esp,0x10
c00162aa:	85 c0                	test   eax,eax
c00162ac:	75 a0                	jne    c001624e <sysCallOpen(regs*)+0x78>
c00162ae:	83 ec 08             	sub    esp,0x8
c00162b1:	68 53 46 02 c0       	push   0xc0024653
c00162b6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00162b9:	e8 d0 fe ff ff       	call   c001618e <string_ends_with(char const*, char const*)>
c00162be:	83 c4 10             	add    esp,0x10
c00162c1:	85 c0                	test   eax,eax
c00162c3:	0f 85 e7 00 00 00    	jne    c00163b0 <sysCallOpen(regs*)+0x1da>
c00162c9:	83 ec 08             	sub    esp,0x8
c00162cc:	68 58 46 02 c0       	push   0xc0024658
c00162d1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00162d4:	e8 b5 fe ff ff       	call   c001618e <string_ends_with(char const*, char const*)>
c00162d9:	83 c4 10             	add    esp,0x10
c00162dc:	85 c0                	test   eax,eax
c00162de:	0f 85 cc 00 00 00    	jne    c00163b0 <sysCallOpen(regs*)+0x1da>
c00162e4:	83 ec 08             	sub    esp,0x8
c00162e7:	68 54 46 02 c0       	push   0xc0024654
c00162ec:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00162ef:	e8 d8 a4 fe ff       	call   c00007cc <strcmp>
c00162f4:	83 c4 10             	add    esp,0x10
c00162f7:	85 c0                	test   eax,eax
c00162f9:	0f 84 b1 00 00 00    	je     c00163b0 <sysCallOpen(regs*)+0x1da>
c00162ff:	83 ec 08             	sub    esp,0x8
c0016302:	68 53 46 02 c0       	push   0xc0024653
c0016307:	56                   	push   esi
c0016308:	e8 81 fe ff ff       	call   c001618e <string_ends_with(char const*, char const*)>
c001630d:	83 c4 10             	add    esp,0x10
c0016310:	85 c0                	test   eax,eax
c0016312:	0f 85 98 00 00 00    	jne    c00163b0 <sysCallOpen(regs*)+0x1da>
c0016318:	83 ec 0c             	sub    esp,0xc
c001631b:	68 14 01 00 00       	push   0x114
c0016320:	e8 9e 36 ff ff       	call   c00099c3 <malloc>
c0016325:	83 c4 0c             	add    esp,0xc
c0016328:	89 c6                	mov    esi,eax
c001632a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001632f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016332:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016335:	56                   	push   esi
c0016336:	e8 0f 6d ff ff       	call   c000d04a <File::File(char const*, Process*)>
c001633b:	83 c4 10             	add    esp,0x10
c001633e:	85 f6                	test   esi,esi
c0016340:	74 5b                	je     c001639d <sysCallOpen(regs*)+0x1c7>
c0016342:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016345:	0f b6 c2             	movzx  eax,dl
c0016348:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001634b:	89 d0                	mov    eax,edx
c001634d:	83 e0 01             	and    eax,0x1
c0016350:	f6 c2 02             	test   dl,0x2
c0016353:	74 03                	je     c0016358 <sysCallOpen(regs*)+0x182>
c0016355:	83 c8 02             	or     eax,0x2
c0016358:	f6 c2 04             	test   dl,0x4
c001635b:	74 03                	je     c0016360 <sysCallOpen(regs*)+0x18a>
c001635d:	83 c8 04             	or     eax,0x4
c0016360:	f6 c2 08             	test   dl,0x8
c0016363:	74 03                	je     c0016368 <sysCallOpen(regs*)+0x192>
c0016365:	83 c8 0a             	or     eax,0xa
c0016368:	83 e2 10             	and    edx,0x10
c001636b:	74 03                	je     c0016370 <sysCallOpen(regs*)+0x19a>
c001636d:	83 c8 12             	or     eax,0x12
c0016370:	83 ec 08             	sub    esp,0x8
c0016373:	50                   	push   eax
c0016374:	56                   	push   esi
c0016375:	e8 34 6d ff ff       	call   c000d0ae <File::open(FileOpenMode)>
c001637a:	83 c4 10             	add    esp,0x10
c001637d:	85 c0                	test   eax,eax
c001637f:	75 1c                	jne    c001639d <sysCallOpen(regs*)+0x1c7>
c0016381:	83 ec 0c             	sub    esp,0xc
c0016384:	56                   	push   esi
c0016385:	e8 38 4f ff ff       	call   c000b2c2 <UnixFile::getFileDescriptor()>
c001638a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001638d:	83 c4 10             	add    esp,0x10
c0016390:	89 02                	mov    DWORD PTR [edx],eax
c0016392:	c1 f8 1f             	sar    eax,0x1f
c0016395:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016398:	e9 c1 fe ff ff       	jmp    c001625e <sysCallOpen(regs*)+0x88>
c001639d:	81 c4 04 01 00 00    	add    esp,0x104
c00163a3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00163a8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00163ad:	5b                   	pop    ebx
c00163ae:	5e                   	pop    esi
c00163af:	c3                   	ret    
c00163b0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00163b3:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00163b9:	e9 99 fe ff ff       	jmp    c0016257 <sysCallOpen(regs*)+0x81>

c00163be <Sys::loadSyscalls()>:
c00163be:	c7 05 80 6f 02 c0 2f 56 01 c0 	mov    DWORD PTR ds:0xc0026f80,0xc001562f
c00163c8:	c7 05 84 6f 02 c0 24 52 01 c0 	mov    DWORD PTR ds:0xc0026f84,0xc0015224
c00163d2:	c7 05 88 6f 02 c0 15 54 01 c0 	mov    DWORD PTR ds:0xc0026f88,0xc0015415
c00163dc:	c7 05 8c 6f 02 c0 65 55 01 c0 	mov    DWORD PTR ds:0xc0026f8c,0xc0015565
c00163e6:	c7 05 90 6f 02 c0 ad 53 01 c0 	mov    DWORD PTR ds:0xc0026f90,0xc00153ad
c00163f0:	c7 05 94 6f 02 c0 5b 52 01 c0 	mov    DWORD PTR ds:0xc0026f94,0xc001525b
c00163fa:	c7 05 98 6f 02 c0 3c 52 01 c0 	mov    DWORD PTR ds:0xc0026f98,0xc001523c
c0016404:	c7 05 9c 6f 02 c0 6a 54 01 c0 	mov    DWORD PTR ds:0xc0026f9c,0xc001546a
c001640e:	c7 05 a4 6f 02 c0 f2 5a 01 c0 	mov    DWORD PTR ds:0xc0026fa4,0xc0015af2
c0016418:	c7 05 a0 6f 02 c0 d6 61 01 c0 	mov    DWORD PTR ds:0xc0026fa0,0xc00161d6
c0016422:	c7 05 a8 6f 02 c0 52 5b 01 c0 	mov    DWORD PTR ds:0xc0026fa8,0xc0015b52
c001642c:	c7 05 ac 6f 02 c0 35 58 01 c0 	mov    DWORD PTR ds:0xc0026fac,0xc0015835
c0016436:	c7 05 b0 6f 02 c0 67 56 01 c0 	mov    DWORD PTR ds:0xc0026fb0,0xc0015667
c0016440:	c7 05 b4 6f 02 c0 6c 56 01 c0 	mov    DWORD PTR ds:0xc0026fb4,0xc001566c
c001644a:	c7 05 b8 6f 02 c0 1b 5c 01 c0 	mov    DWORD PTR ds:0xc0026fb8,0xc0015c1b
c0016454:	c7 05 bc 6f 02 c0 c7 5b 01 c0 	mov    DWORD PTR ds:0xc0026fbc,0xc0015bc7
c001645e:	c7 05 c0 6f 02 c0 0e 59 01 c0 	mov    DWORD PTR ds:0xc0026fc0,0xc001590e
c0016468:	c7 05 c4 6f 02 c0 65 59 01 c0 	mov    DWORD PTR ds:0xc0026fc4,0xc0015965
c0016472:	c7 05 c8 6f 02 c0 d1 59 01 c0 	mov    DWORD PTR ds:0xc0026fc8,0xc00159d1
c001647c:	c7 05 cc 6f 02 c0 71 56 01 c0 	mov    DWORD PTR ds:0xc0026fcc,0xc0015671
c0016486:	c7 05 d0 6f 02 c0 8b 5c 01 c0 	mov    DWORD PTR ds:0xc0026fd0,0xc0015c8b
c0016490:	c7 05 d4 6f 02 c0 a5 5c 01 c0 	mov    DWORD PTR ds:0xc0026fd4,0xc0015ca5
c001649a:	c7 05 d8 6f 02 c0 a5 5c 01 c0 	mov    DWORD PTR ds:0xc0026fd8,0xc0015ca5
c00164a4:	c7 05 dc 6f 02 c0 da 5c 01 c0 	mov    DWORD PTR ds:0xc0026fdc,0xc0015cda
c00164ae:	c7 05 e0 6f 02 c0 3e 5d 01 c0 	mov    DWORD PTR ds:0xc0026fe0,0xc0015d3e
c00164b8:	c7 05 e4 6f 02 c0 7b 56 01 c0 	mov    DWORD PTR ds:0xc0026fe4,0xc001567b
c00164c2:	c7 05 e8 6f 02 c0 a2 5d 01 c0 	mov    DWORD PTR ds:0xc0026fe8,0xc0015da2
c00164cc:	c7 05 ec 6f 02 c0 f2 57 01 c0 	mov    DWORD PTR ds:0xc0026fec,0xc00157f2
c00164d6:	c7 05 f0 6f 02 c0 ee 5d 01 c0 	mov    DWORD PTR ds:0xc0026ff0,0xc0015dee
c00164e0:	c7 05 f4 6f 02 c0 b4 58 01 c0 	mov    DWORD PTR ds:0xc0026ff4,0xc00158b4
c00164ea:	c7 05 f8 6f 02 c0 71 5e 01 c0 	mov    DWORD PTR ds:0xc0026ff8,0xc0015e71
c00164f4:	c7 05 fc 6f 02 c0 43 5a 01 c0 	mov    DWORD PTR ds:0xc0026ffc,0xc0015a43
c00164fe:	c7 05 00 70 02 c0 9a 5e 01 c0 	mov    DWORD PTR ds:0xc0027000,0xc0015e9a
c0016508:	c7 05 04 70 02 c0 02 5f 01 c0 	mov    DWORD PTR ds:0xc0027004,0xc0015f02
c0016512:	c7 05 08 70 02 c0 af 5f 01 c0 	mov    DWORD PTR ds:0xc0027008,0xc0015faf
c001651c:	c7 05 0c 70 02 c0 8b 56 01 c0 	mov    DWORD PTR ds:0xc002700c,0xc001568b
c0016526:	c7 05 10 70 02 c0 f5 56 01 c0 	mov    DWORD PTR ds:0xc0027010,0xc00156f5
c0016530:	c7 05 14 70 02 c0 3f 57 01 c0 	mov    DWORD PTR ds:0xc0027014,0xc001573f
c001653a:	c7 05 18 70 02 c0 c3 60 01 c0 	mov    DWORD PTR ds:0xc0027018,0xc00160c3
c0016544:	c7 05 1c 70 02 c0 c0 5c 01 c0 	mov    DWORD PTR ds:0xc002701c,0xc0015cc0
c001654e:	c7 05 20 70 02 c0 94 57 01 c0 	mov    DWORD PTR ds:0xc0027020,0xc0015794
c0016558:	c7 05 24 70 02 c0 35 61 01 c0 	mov    DWORD PTR ds:0xc0027024,0xc0016135
c0016562:	c7 05 28 70 02 c0 7a 61 01 c0 	mov    DWORD PTR ds:0xc0027028,0xc001617a
c001656c:	c7 05 2c 70 02 c0 05 53 01 c0 	mov    DWORD PTR ds:0xc002702c,0xc0015305
c0016576:	c7 05 30 70 02 c0 86 54 01 c0 	mov    DWORD PTR ds:0xc0027030,0xc0015486
c0016580:	c7 05 34 70 02 c0 1b 55 01 c0 	mov    DWORD PTR ds:0xc0027034,0xc001551b
c001658a:	c7 05 38 70 02 c0 ee 51 01 c0 	mov    DWORD PTR ds:0xc0027038,0xc00151ee
c0016594:	c7 05 3c 70 02 c0 cd 55 01 c0 	mov    DWORD PTR ds:0xc002703c,0xc00155cd
c001659e:	c7 05 40 70 02 c0 67 52 01 c0 	mov    DWORD PTR ds:0xc0027040,0xc0015267
c00165a8:	c7 05 44 70 02 c0 81 52 01 c0 	mov    DWORD PTR ds:0xc0027044,0xc0015281
c00165b2:	c3                   	ret    

c00165b3 <Sys::systemCall(regs*, void*)>:
c00165b3:	53                   	push   ebx
c00165b4:	83 ec 08             	sub    esp,0x8
c00165b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00165bb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00165be:	83 f8 7f             	cmp    eax,0x7f
c00165c1:	77 16                	ja     c00165d9 <Sys::systemCall(regs*, void*)+0x26>
c00165c3:	8b 14 85 80 6f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9080]
c00165ca:	85 d2                	test   edx,edx
c00165cc:	74 0b                	je     c00165d9 <Sys::systemCall(regs*, void*)+0x26>
c00165ce:	83 ec 0c             	sub    esp,0xc
c00165d1:	53                   	push   ebx
c00165d2:	ff d2                	call   edx
c00165d4:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00165d7:	eb 0d                	jmp    c00165e6 <Sys::systemCall(regs*, void*)+0x33>
c00165d9:	52                   	push   edx
c00165da:	52                   	push   edx
c00165db:	50                   	push   eax
c00165dc:	68 5d 46 02 c0       	push   0xc002465d
c00165e1:	e8 f9 64 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c00165e6:	83 c4 10             	add    esp,0x10
c00165e9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00165ee:	31 d2                	xor    edx,edx
c00165f0:	83 c4 08             	add    esp,0x8
c00165f3:	5b                   	pop    ebx
c00165f4:	c3                   	ret    

c00165f5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00165f5:	55                   	push   ebp
c00165f6:	57                   	push   edi
c00165f7:	56                   	push   esi
c00165f8:	53                   	push   ebx
c00165f9:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00165ff:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016606:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001660d:	85 c0                	test   eax,eax
c001660f:	0f 95 c1             	setne  cl
c0016612:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001661a:	0f 94 c2             	sete   dl
c001661d:	84 d1                	test   cl,dl
c001661f:	74 23                	je     c0016644 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016621:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c0016627:	74 1b                	je     c0016644 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016629:	81 c3 00 10 00 00    	add    ebx,0x1000
c001662f:	89 da                	mov    edx,ebx
c0016631:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0016637:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001663d:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0016644:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001664b:	05 ff 0f 00 00       	add    eax,0xfff
c0016650:	83 ec 0c             	sub    esp,0xc
c0016653:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016657:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001665d:	c1 e8 0c             	shr    eax,0xc
c0016660:	89 fe                	mov    esi,edi
c0016662:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016666:	c1 ee 0c             	shr    esi,0xc
c0016669:	6a 01                	push   0x1
c001666b:	e8 9d 50 ff ff       	call   c000b70d <Virt::allocateKernelVirtualPages(int)>
c0016670:	89 c5                	mov    ebp,eax
c0016672:	58                   	pop    eax
c0016673:	5a                   	pop    edx
c0016674:	56                   	push   esi
c0016675:	68 71 46 02 c0       	push   0xc0024671
c001667a:	e8 60 64 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001667f:	59                   	pop    ecx
c0016680:	58                   	pop    eax
c0016681:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016685:	68 83 46 02 c0       	push   0xc0024683
c001668a:	e8 50 64 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001668f:	83 c4 10             	add    esp,0x10
c0016692:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c0016698:	0f 86 31 01 00 00    	jbe    c00167cf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001669e:	c1 e6 0c             	shl    esi,0xc
c00166a1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00166a4:	8d 04 1e             	lea    eax,[esi+ebx*1]
c00166a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00166ab:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00166b2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00166b5:	01 df                	add    edi,ebx
c00166b7:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c00166ba:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00166be:	0f 84 08 01 00 00    	je     c00167cc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c00166c4:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00166ca:	76 05                	jbe    c00166d1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c00166cc:	bf 00 10 00 00       	mov    edi,0x1000
c00166d1:	83 ec 0c             	sub    esp,0xc
c00166d4:	31 d2                	xor    edx,edx
c00166d6:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00166dd:	8b 08                	mov    ecx,DWORD PTR [eax]
c00166df:	8d 44 24 28          	lea    eax,[esp+0x28]
c00166e3:	50                   	push   eax
c00166e4:	8d 74 24 30          	lea    esi,[esp+0x30]
c00166e8:	56                   	push   esi
c00166e9:	52                   	push   edx
c00166ea:	57                   	push   edi
c00166eb:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00166f2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00166f5:	83 c4 20             	add    esp,0x20
c00166f8:	85 c0                	test   eax,eax
c00166fa:	74 0a                	je     c0016706 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c00166fc:	53                   	push   ebx
c00166fd:	53                   	push   ebx
c00166fe:	50                   	push   eax
c00166ff:	68 95 46 02 c0       	push   0xc0024695
c0016704:	eb 0f                	jmp    c0016715 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c0016706:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001670a:	74 20                	je     c001672c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001670c:	51                   	push   ecx
c001670d:	51                   	push   ecx
c001670e:	6a 00                	push   0x0
c0016710:	68 c0 46 02 c0       	push   0xc00246c0
c0016715:	e8 c5 63 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001671a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001671d:	e8 1b 53 ff ff       	call   c000ba3d <Virt::freeKernelVirtualPages(unsigned long)>
c0016722:	83 c4 10             	add    esp,0x10
c0016725:	31 c0                	xor    eax,eax
c0016727:	e9 68 01 00 00       	jmp    c0016894 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001672c:	fa                   	cli    
c001672d:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c0016733:	e8 c1 36 ff ff       	call   c0009df9 <Phys::allocatePage()>
c0016738:	6a 07                	push   0x7
c001673a:	89 c7                	mov    edi,eax
c001673c:	55                   	push   ebp
c001673d:	50                   	push   eax
c001673e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016743:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016746:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001674c:	e8 63 56 ff ff       	call   c000bdb4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016751:	83 c4 0c             	add    esp,0xc
c0016754:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001675b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016761:	6a 00                	push   0x0
c0016763:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016768:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001676b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016771:	e8 98 54 ff ff       	call   c000bc0e <VAS::mapOtherVASIn(bool, VAS*)>
c0016776:	58                   	pop    eax
c0016777:	5a                   	pop    edx
c0016778:	68 07 0c 00 00       	push   0xc07
c001677d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016781:	57                   	push   edi
c0016782:	89 ef                	mov    edi,ebp
c0016784:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001678b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016791:	6a 00                	push   0x0
c0016793:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016798:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001679b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00167a1:	e8 ca 59 ff ff       	call   c000c170 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00167a6:	b9 00 10 00 00       	mov    ecx,0x1000
c00167ab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00167ad:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c00167b2:	83 c4 20             	add    esp,0x20
c00167b5:	48                   	dec    eax
c00167b6:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c00167bb:	85 c0                	test   eax,eax
c00167bd:	75 01                	jne    c00167c0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c00167bf:	fb                   	sti    
c00167c0:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c00167c7:	e9 df fe ff ff       	jmp    c00166ab <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c00167cc:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00167cf:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c00167d7:	0f 86 a9 00 00 00    	jbe    c0016886 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c00167dd:	fa                   	cli    
c00167de:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c00167e4:	51                   	push   ecx
c00167e5:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00167ec:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00167f2:	6a 00                	push   0x0
c00167f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167f9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00167fc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016802:	e8 07 54 ff ff       	call   c000bc0e <VAS::mapOtherVASIn(bool, VAS*)>
c0016807:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001680b:	c1 e6 0c             	shl    esi,0xc
c001680e:	01 de                	add    esi,ebx
c0016810:	83 c4 10             	add    esp,0x10
c0016813:	39 de                	cmp    esi,ebx
c0016815:	74 61                	je     c0016878 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0016817:	e8 dd 35 ff ff       	call   c0009df9 <Phys::allocatePage()>
c001681c:	6a 07                	push   0x7
c001681e:	89 c7                	mov    edi,eax
c0016820:	55                   	push   ebp
c0016821:	50                   	push   eax
c0016822:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016827:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001682a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016830:	e8 7f 55 ff ff       	call   c000bdb4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016835:	58                   	pop    eax
c0016836:	5a                   	pop    edx
c0016837:	68 07 0c 00 00       	push   0xc07
c001683c:	53                   	push   ebx
c001683d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016843:	57                   	push   edi
c0016844:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001684b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016851:	6a 00                	push   0x0
c0016853:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016858:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001685b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016861:	e8 0a 59 ff ff       	call   c000c170 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016866:	83 c4 1c             	add    esp,0x1c
c0016869:	68 00 10 00 00       	push   0x1000
c001686e:	6a 00                	push   0x0
c0016870:	55                   	push   ebp
c0016871:	e8 0e 9e fe ff       	call   c0000684 <memset>
c0016876:	eb 98                	jmp    c0016810 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c0016878:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c001687d:	48                   	dec    eax
c001687e:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c0016883:	75 01                	jne    c0016886 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016885:	fb                   	sti    
c0016886:	83 ec 0c             	sub    esp,0xc
c0016889:	55                   	push   ebp
c001688a:	e8 ae 51 ff ff       	call   c000ba3d <Virt::freeKernelVirtualPages(unsigned long)>
c001688f:	83 c4 10             	add    esp,0x10
c0016892:	b0 01                	mov    al,0x1
c0016894:	81 c4 2c 10 00 00    	add    esp,0x102c
c001689a:	5b                   	pop    ebx
c001689b:	5e                   	pop    esi
c001689c:	5f                   	pop    edi
c001689d:	5d                   	pop    ebp
c001689e:	c3                   	ret    

c001689f <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001689f:	55                   	push   ebp
c00168a0:	57                   	push   edi
c00168a1:	56                   	push   esi
c00168a2:	53                   	push   ebx
c00168a3:	83 ec 48             	sub    esp,0x48
c00168a6:	68 14 01 00 00       	push   0x114
c00168ab:	e8 13 31 ff ff       	call   c00099c3 <malloc>
c00168b0:	83 c4 0c             	add    esp,0xc
c00168b3:	89 c6                	mov    esi,eax
c00168b5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00168b9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00168bd:	50                   	push   eax
c00168be:	e8 87 67 ff ff       	call   c000d04a <File::File(char const*, Process*)>
c00168c3:	58                   	pop    eax
c00168c4:	5a                   	pop    edx
c00168c5:	6a 01                	push   0x1
c00168c7:	56                   	push   esi
c00168c8:	e8 e1 67 ff ff       	call   c000d0ae <File::open(FileOpenMode)>
c00168cd:	83 c4 10             	add    esp,0x10
c00168d0:	85 c0                	test   eax,eax
c00168d2:	0f 85 47 01 00 00    	jne    c0016a1f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00168d8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00168e0:	83 ec 0c             	sub    esp,0xc
c00168e3:	6a 34                	push   0x34
c00168e5:	e8 d9 30 ff ff       	call   c00099c3 <malloc>
c00168ea:	89 c3                	mov    ebx,eax
c00168ec:	58                   	pop    eax
c00168ed:	8b 06                	mov    eax,DWORD PTR [esi]
c00168ef:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00168f3:	57                   	push   edi
c00168f4:	53                   	push   ebx
c00168f5:	6a 00                	push   0x0
c00168f7:	6a 34                	push   0x34
c00168f9:	56                   	push   esi
c00168fa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00168fd:	83 c4 20             	add    esp,0x20
c0016900:	85 c0                	test   eax,eax
c0016902:	0f 85 17 01 00 00    	jne    c0016a1f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016908:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001690e:	0f 85 0b 01 00 00    	jne    c0016a1f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016914:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016917:	85 c0                	test   eax,eax
c0016919:	0f 84 00 01 00 00    	je     c0016a1f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001691f:	31 d2                	xor    edx,edx
c0016921:	55                   	push   ebp
c0016922:	52                   	push   edx
c0016923:	50                   	push   eax
c0016924:	56                   	push   esi
c0016925:	e8 42 68 ff ff       	call   c000d16c <File::seek(unsigned long long)>
c001692a:	83 c4 10             	add    esp,0x10
c001692d:	85 c0                	test   eax,eax
c001692f:	0f 85 ea 00 00 00    	jne    c0016a1f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016935:	83 ec 0c             	sub    esp,0xc
c0016938:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001693b:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001693f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016943:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016947:	0f af c2             	imul   eax,edx
c001694a:	50                   	push   eax
c001694b:	e8 73 30 ff ff       	call   c00099c3 <malloc>
c0016950:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016952:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016956:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016959:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001695d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016961:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016965:	0f af c2             	imul   eax,edx
c0016968:	99                   	cdq    
c0016969:	52                   	push   edx
c001696a:	50                   	push   eax
c001696b:	56                   	push   esi
c001696c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001696f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0016972:	83 c4 20             	add    esp,0x20
c0016975:	85 c0                	test   eax,eax
c0016977:	0f 84 a2 00 00 00    	je     c0016a1f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001697d:	31 d2                	xor    edx,edx
c001697f:	51                   	push   ecx
c0016980:	52                   	push   edx
c0016981:	50                   	push   eax
c0016982:	56                   	push   esi
c0016983:	e8 e4 67 ff ff       	call   c000d16c <File::seek(unsigned long long)>
c0016988:	83 c4 10             	add    esp,0x10
c001698b:	85 c0                	test   eax,eax
c001698d:	0f 85 8c 00 00 00    	jne    c0016a1f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016993:	83 ec 0c             	sub    esp,0xc
c0016996:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001699a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001699e:	31 ed                	xor    ebp,ebp
c00169a0:	0f af c2             	imul   eax,edx
c00169a3:	50                   	push   eax
c00169a4:	e8 1a 30 ff ff       	call   c00099c3 <malloc>
c00169a9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00169ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00169af:	89 3c 24             	mov    DWORD PTR [esp],edi
c00169b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169b6:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00169ba:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00169be:	0f af c2             	imul   eax,edx
c00169c1:	99                   	cdq    
c00169c2:	52                   	push   edx
c00169c3:	50                   	push   eax
c00169c4:	56                   	push   esi
c00169c5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00169c8:	83 c4 20             	add    esp,0x20
c00169cb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00169d3:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00169d7:	0f 86 80 00 00 00    	jbe    c0016a5d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00169dd:	0f b7 fd             	movzx  edi,bp
c00169e0:	c1 e7 05             	shl    edi,0x5
c00169e3:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00169e7:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00169ea:	75 6b                	jne    c0016a57 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00169ec:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00169ef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00169f3:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00169f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00169fa:	52                   	push   edx
c00169fb:	31 d2                	xor    edx,edx
c00169fd:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0016a00:	52                   	push   edx
c0016a01:	50                   	push   eax
c0016a02:	56                   	push   esi
c0016a03:	e8 64 67 ff ff       	call   c000d16c <File::seek(unsigned long long)>
c0016a08:	83 c4 10             	add    esp,0x10
c0016a0b:	85 c0                	test   eax,eax
c0016a0d:	74 17                	je     c0016a26 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0016a0f:	83 ec 0c             	sub    esp,0xc
c0016a12:	68 ec 46 02 c0       	push   0xc00246ec
c0016a17:	e8 c3 60 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c0016a1c:	83 c4 10             	add    esp,0x10
c0016a1f:	31 c0                	xor    eax,eax
c0016a21:	e9 87 00 00 00       	jmp    c0016aad <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0016a26:	83 ec 0c             	sub    esp,0xc
c0016a29:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0016a2c:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0016a2f:	50                   	push   eax
c0016a30:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016a34:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a38:	56                   	push   esi
c0016a39:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0016a3d:	e8 b3 fb ff ff       	call   c00165f5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0016a42:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016a46:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0016a4a:	83 c4 20             	add    esp,0x20
c0016a4d:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0016a51:	73 04                	jae    c0016a57 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016a53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016a57:	45                   	inc    ebp
c0016a58:	e9 76 ff ff ff       	jmp    c00169d3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0016a5d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0016a61:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016a65:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016a69:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0016a6f:	83 ec 0c             	sub    esp,0xc
c0016a72:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0016a78:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016a7d:	05 00 10 00 00       	add    eax,0x1000
c0016a82:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016a85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a89:	e8 45 2f ff ff       	call   c00099d3 <free>
c0016a8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a91:	e8 3d 2f ff ff       	call   c00099d3 <free>
c0016a96:	58                   	pop    eax
c0016a97:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016a9b:	e8 33 2f ff ff       	call   c00099d3 <free>
c0016aa0:	89 34 24             	mov    DWORD PTR [esp],esi
c0016aa3:	e8 64 66 ff ff       	call   c000d10c <File::close()>
c0016aa8:	83 c4 10             	add    esp,0x10
c0016aab:	b0 01                	mov    al,0x1
c0016aad:	83 c4 3c             	add    esp,0x3c
c0016ab0:	5b                   	pop    ebx
c0016ab1:	5e                   	pop    esi
c0016ab2:	5f                   	pop    edi
c0016ab3:	5d                   	pop    ebp
c0016ab4:	c3                   	ret    

c0016ab5 <Thr::runtimeReferenceHelper()>:
c0016ab5:	83 ec 18             	sub    esp,0x18
c0016ab8:	68 f4 46 02 c0       	push   0xc00246f4
c0016abd:	e8 1d 60 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c0016ac2:	fa                   	cli    
c0016ac3:	83 c4 10             	add    esp,0x10
c0016ac6:	eb fe                	jmp    c0016ac6 <Thr::runtimeReferenceHelper()+0x11>

c0016ac8 <Thr::getAddressOfKernelSymbol(char const*)>:
c0016ac8:	57                   	push   edi
c0016ac9:	56                   	push   esi
c0016aca:	53                   	push   ebx
c0016acb:	31 db                	xor    ebx,ebx
c0016acd:	39 1d 20 79 02 c0    	cmp    DWORD PTR ds:0xc0027920,ebx
c0016ad3:	7e 3c                	jle    c0016b11 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0016ad5:	8b 34 9d a0 78 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd8760]
c0016adc:	31 ff                	xor    edi,edi
c0016ade:	39 3c 9d a0 77 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd8860],edi
c0016ae5:	7e 27                	jle    c0016b0e <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0016ae7:	50                   	push   eax
c0016ae8:	50                   	push   eax
c0016ae9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016aed:	8b 06                	mov    eax,DWORD PTR [esi]
c0016aef:	03 04 9d 20 78 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd87e0]
c0016af6:	50                   	push   eax
c0016af7:	e8 d0 9c fe ff       	call   c00007cc <strcmp>
c0016afc:	83 c4 10             	add    esp,0x10
c0016aff:	85 c0                	test   eax,eax
c0016b01:	75 05                	jne    c0016b08 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0016b03:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0016b06:	eb 0b                	jmp    c0016b13 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0016b08:	83 c6 10             	add    esi,0x10
c0016b0b:	47                   	inc    edi
c0016b0c:	eb d0                	jmp    c0016ade <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0016b0e:	43                   	inc    ebx
c0016b0f:	eb bc                	jmp    c0016acd <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0016b11:	31 c0                	xor    eax,eax
c0016b13:	5b                   	pop    ebx
c0016b14:	5e                   	pop    esi
c0016b15:	5f                   	pop    edi
c0016b16:	c3                   	ret    

c0016b17 <Thr::loadKernelSymbolTable(char const*)>:
c0016b17:	55                   	push   ebp
c0016b18:	57                   	push   edi
c0016b19:	56                   	push   esi
c0016b1a:	53                   	push   ebx
c0016b1b:	83 ec 68             	sub    esp,0x68
c0016b1e:	8b 35 70 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027970
c0016b24:	68 14 01 00 00       	push   0x114
c0016b29:	e8 95 2e ff ff       	call   c00099c3 <malloc>
c0016b2e:	83 c4 0c             	add    esp,0xc
c0016b31:	89 c3                	mov    ebx,eax
c0016b33:	56                   	push   esi
c0016b34:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0016b38:	50                   	push   eax
c0016b39:	e8 0c 65 ff ff       	call   c000d04a <File::File(char const*, Process*)>
c0016b3e:	5e                   	pop    esi
c0016b3f:	5f                   	pop    edi
c0016b40:	6a 01                	push   0x1
c0016b42:	53                   	push   ebx
c0016b43:	e8 66 65 ff ff       	call   c000d0ae <File::open(FileOpenMode)>
c0016b48:	83 c4 10             	add    esp,0x10
c0016b4b:	85 c0                	test   eax,eax
c0016b4d:	74 0a                	je     c0016b59 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0016b4f:	83 ec 0c             	sub    esp,0xc
c0016b52:	68 16 47 02 c0       	push   0xc0024716
c0016b57:	eb 34                	jmp    c0016b8d <Thr::loadKernelSymbolTable(char const*)+0x76>
c0016b59:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0016b61:	83 ec 0c             	sub    esp,0xc
c0016b64:	6a 34                	push   0x34
c0016b66:	e8 58 2e ff ff       	call   c00099c3 <malloc>
c0016b6b:	59                   	pop    ecx
c0016b6c:	89 c7                	mov    edi,eax
c0016b6e:	8d 74 24 34          	lea    esi,[esp+0x34]
c0016b72:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b74:	56                   	push   esi
c0016b75:	57                   	push   edi
c0016b76:	6a 00                	push   0x0
c0016b78:	6a 34                	push   0x34
c0016b7a:	53                   	push   ebx
c0016b7b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016b7e:	83 c4 20             	add    esp,0x20
c0016b81:	85 c0                	test   eax,eax
c0016b83:	74 17                	je     c0016b9c <Thr::loadKernelSymbolTable(char const*)+0x85>
c0016b85:	83 ec 0c             	sub    esp,0xc
c0016b88:	68 2d 47 02 c0       	push   0xc002472d
c0016b8d:	e8 0f d8 ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c0016b92:	83 c4 10             	add    esp,0x10
c0016b95:	31 c0                	xor    eax,eax
c0016b97:	e9 31 02 00 00       	jmp    c0016dcd <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0016b9c:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016ba2:	75 e1                	jne    c0016b85 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016ba4:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016ba7:	85 c0                	test   eax,eax
c0016ba9:	74 da                	je     c0016b85 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016bab:	52                   	push   edx
c0016bac:	31 d2                	xor    edx,edx
c0016bae:	52                   	push   edx
c0016baf:	50                   	push   eax
c0016bb0:	53                   	push   ebx
c0016bb1:	e8 b6 65 ff ff       	call   c000d16c <File::seek(unsigned long long)>
c0016bb6:	83 c4 10             	add    esp,0x10
c0016bb9:	85 c0                	test   eax,eax
c0016bbb:	75 c8                	jne    c0016b85 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016bbd:	83 ec 0c             	sub    esp,0xc
c0016bc0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016bc4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016bc8:	31 ed                	xor    ebp,ebp
c0016bca:	0f af c2             	imul   eax,edx
c0016bcd:	50                   	push   eax
c0016bce:	e8 f0 2d ff ff       	call   c00099c3 <malloc>
c0016bd3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016bd5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016bd9:	89 34 24             	mov    DWORD PTR [esp],esi
c0016bdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016be0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016be4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016be8:	0f af c2             	imul   eax,edx
c0016beb:	99                   	cdq    
c0016bec:	52                   	push   edx
c0016bed:	50                   	push   eax
c0016bee:	53                   	push   ebx
c0016bef:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016bf2:	83 c4 20             	add    esp,0x20
c0016bf5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016bfd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016c05:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016c0d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016c15:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0016c19:	0f 86 aa 00 00 00    	jbe    c0016cc9 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0016c1f:	0f b7 f5             	movzx  esi,bp
c0016c22:	6b f6 28             	imul   esi,esi,0x28
c0016c25:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0016c29:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016c2c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016c30:	50                   	push   eax
c0016c31:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016c35:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0016c39:	8b 16                	mov    edx,DWORD PTR [esi]
c0016c3b:	6b c0 28             	imul   eax,eax,0x28
c0016c3e:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0016c42:	89 d0                	mov    eax,edx
c0016c44:	31 d2                	xor    edx,edx
c0016c46:	52                   	push   edx
c0016c47:	50                   	push   eax
c0016c48:	53                   	push   ebx
c0016c49:	e8 1e 65 ff ff       	call   c000d16c <File::seek(unsigned long long)>
c0016c4e:	83 c4 0c             	add    esp,0xc
c0016c51:	6a 20                	push   0x20
c0016c53:	6a 00                	push   0x0
c0016c55:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016c59:	52                   	push   edx
c0016c5a:	e8 25 9a fe ff       	call   c0000684 <memset>
c0016c5f:	58                   	pop    eax
c0016c60:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c62:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0016c66:	51                   	push   ecx
c0016c67:	8d 54 24 40          	lea    edx,[esp+0x40]
c0016c6b:	52                   	push   edx
c0016c6c:	6a 00                	push   0x0
c0016c6e:	6a 1f                	push   0x1f
c0016c70:	53                   	push   ebx
c0016c71:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016c74:	83 c4 18             	add    esp,0x18
c0016c77:	68 44 47 02 c0       	push   0xc0024744
c0016c7c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016c80:	52                   	push   edx
c0016c81:	e8 46 9b fe ff       	call   c00007cc <strcmp>
c0016c86:	83 c4 10             	add    esp,0x10
c0016c89:	85 c0                	test   eax,eax
c0016c8b:	75 0f                	jne    c0016c9c <Thr::loadKernelSymbolTable(char const*)+0x185>
c0016c8d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016c90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016c94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c9c:	50                   	push   eax
c0016c9d:	50                   	push   eax
c0016c9e:	68 4c 47 02 c0       	push   0xc002474c
c0016ca3:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0016ca7:	50                   	push   eax
c0016ca8:	e8 1f 9b fe ff       	call   c00007cc <strcmp>
c0016cad:	83 c4 10             	add    esp,0x10
c0016cb0:	85 c0                	test   eax,eax
c0016cb2:	75 0f                	jne    c0016cc3 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0016cb4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016cb7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016cbb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016cbf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016cc3:	45                   	inc    ebp
c0016cc4:	e9 4c ff ff ff       	jmp    c0016c15 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0016cc9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016cce:	75 10                	jne    c0016ce0 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0016cd0:	83 ec 0c             	sub    esp,0xc
c0016cd3:	68 54 47 02 c0       	push   0xc0024754
c0016cd8:	e8 c4 d6 ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c0016cdd:	83 c4 10             	add    esp,0x10
c0016ce0:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0016ce5:	75 10                	jne    c0016cf7 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0016ce7:	83 ec 0c             	sub    esp,0xc
c0016cea:	68 54 47 02 c0       	push   0xc0024754
c0016cef:	e8 ad d6 ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c0016cf4:	83 c4 10             	add    esp,0x10
c0016cf7:	31 d2                	xor    edx,edx
c0016cf9:	50                   	push   eax
c0016cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cfe:	52                   	push   edx
c0016cff:	50                   	push   eax
c0016d00:	53                   	push   ebx
c0016d01:	e8 66 64 ff ff       	call   c000d16c <File::seek(unsigned long long)>
c0016d06:	5a                   	pop    edx
c0016d07:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016d0b:	e8 b3 2c ff ff       	call   c00099c3 <malloc>
c0016d10:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016d18:	31 c9                	xor    ecx,ecx
c0016d1a:	5e                   	pop    esi
c0016d1b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016d1d:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0016d21:	55                   	push   ebp
c0016d22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d26:	51                   	push   ecx
c0016d27:	52                   	push   edx
c0016d28:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016d2c:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0016d30:	53                   	push   ebx
c0016d31:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016d34:	83 c4 14             	add    esp,0x14
c0016d37:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016d3b:	e8 83 2c ff ff       	call   c00099c3 <malloc>
c0016d40:	89 c6                	mov    esi,eax
c0016d42:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016d44:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016d47:	56                   	push   esi
c0016d48:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016d4c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016d50:	51                   	push   ecx
c0016d51:	52                   	push   edx
c0016d52:	53                   	push   ebx
c0016d53:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016d56:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016d5a:	8b 15 20 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027920
c0016d60:	83 c4 1c             	add    esp,0x1c
c0016d63:	c1 e8 04             	shr    eax,0x4
c0016d66:	89 04 95 a0 77 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8860],eax
c0016d6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d71:	31 d2                	xor    edx,edx
c0016d73:	52                   	push   edx
c0016d74:	50                   	push   eax
c0016d75:	53                   	push   ebx
c0016d76:	e8 f1 63 ff ff       	call   c000d16c <File::seek(unsigned long long)>
c0016d7b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016d7d:	31 d2                	xor    edx,edx
c0016d7f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016d82:	56                   	push   esi
c0016d83:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016d87:	52                   	push   edx
c0016d88:	50                   	push   eax
c0016d89:	53                   	push   ebx
c0016d8a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016d8d:	83 c4 14             	add    esp,0x14
c0016d90:	53                   	push   ebx
c0016d91:	e8 76 63 ff ff       	call   c000d10c <File::close()>
c0016d96:	5d                   	pop    ebp
c0016d97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016d9b:	e8 33 2c ff ff       	call   c00099d3 <free>
c0016da0:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016da3:	e8 2b 2c ff ff       	call   c00099d3 <free>
c0016da8:	a1 20 79 02 c0       	mov    eax,ds:0xc0027920
c0016dad:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016db1:	8d 50 01             	lea    edx,[eax+0x1]
c0016db4:	89 0c 85 a0 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8760],ecx
c0016dbb:	89 34 85 20 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd87e0],esi
c0016dc2:	89 15 20 79 02 c0    	mov    DWORD PTR ds:0xc0027920,edx
c0016dc8:	83 c4 10             	add    esp,0x10
c0016dcb:	b0 01                	mov    al,0x1
c0016dcd:	83 c4 5c             	add    esp,0x5c
c0016dd0:	5b                   	pop    ebx
c0016dd1:	5e                   	pop    esi
c0016dd2:	5f                   	pop    edi
c0016dd3:	5d                   	pop    ebp
c0016dd4:	c3                   	ret    

c0016dd5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0016dd5:	55                   	push   ebp
c0016dd6:	57                   	push   edi
c0016dd7:	56                   	push   esi
c0016dd8:	53                   	push   ebx
c0016dd9:	81 ec 68 03 00 00    	sub    esp,0x368
c0016ddf:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0016de6:	8b 1d 70 79 02 c0    	mov    ebx,DWORD PTR ds:0xc0027970
c0016dec:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0016df0:	68 14 01 00 00       	push   0x114
c0016df5:	e8 c9 2b ff ff       	call   c00099c3 <malloc>
c0016dfa:	83 c4 0c             	add    esp,0xc
c0016dfd:	89 c5                	mov    ebp,eax
c0016dff:	53                   	push   ebx
c0016e00:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0016e07:	50                   	push   eax
c0016e08:	e8 3d 62 ff ff       	call   c000d04a <File::File(char const*, Process*)>
c0016e0d:	5e                   	pop    esi
c0016e0e:	5f                   	pop    edi
c0016e0f:	6a 01                	push   0x1
c0016e11:	55                   	push   ebp
c0016e12:	e8 97 62 ff ff       	call   c000d0ae <File::open(FileOpenMode)>
c0016e17:	83 c4 10             	add    esp,0x10
c0016e1a:	85 c0                	test   eax,eax
c0016e1c:	0f 85 a7 06 00 00    	jne    c00174c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e22:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016e2a:	83 ec 0c             	sub    esp,0xc
c0016e2d:	6a 34                	push   0x34
c0016e2f:	e8 8f 2b ff ff       	call   c00099c3 <malloc>
c0016e34:	5b                   	pop    ebx
c0016e35:	89 c7                	mov    edi,eax
c0016e37:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016e3b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016e3e:	53                   	push   ebx
c0016e3f:	57                   	push   edi
c0016e40:	6a 00                	push   0x0
c0016e42:	6a 34                	push   0x34
c0016e44:	55                   	push   ebp
c0016e45:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016e48:	83 c4 20             	add    esp,0x20
c0016e4b:	85 c0                	test   eax,eax
c0016e4d:	0f 85 76 06 00 00    	jne    c00174c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e53:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016e59:	0f 85 6a 06 00 00    	jne    c00174c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e5f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016e62:	85 c0                	test   eax,eax
c0016e64:	0f 84 5f 06 00 00    	je     c00174c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e6a:	31 d2                	xor    edx,edx
c0016e6c:	51                   	push   ecx
c0016e6d:	52                   	push   edx
c0016e6e:	50                   	push   eax
c0016e6f:	55                   	push   ebp
c0016e70:	e8 f7 62 ff ff       	call   c000d16c <File::seek(unsigned long long)>
c0016e75:	83 c4 10             	add    esp,0x10
c0016e78:	85 c0                	test   eax,eax
c0016e7a:	0f 85 49 06 00 00    	jne    c00174c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e80:	83 ec 0c             	sub    esp,0xc
c0016e83:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0016e86:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016e8a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016e8e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016e92:	0f af c2             	imul   eax,edx
c0016e95:	50                   	push   eax
c0016e96:	e8 28 2b ff ff       	call   c00099c3 <malloc>
c0016e9b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016e9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016ea2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016ea5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ea9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016ead:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016eb1:	0f af c2             	imul   eax,edx
c0016eb4:	99                   	cdq    
c0016eb5:	52                   	push   edx
c0016eb6:	50                   	push   eax
c0016eb7:	55                   	push   ebp
c0016eb8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016ebb:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0016ebe:	83 c4 20             	add    esp,0x20
c0016ec1:	85 c0                	test   eax,eax
c0016ec3:	0f 84 00 06 00 00    	je     c00174c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016ec9:	52                   	push   edx
c0016eca:	31 d2                	xor    edx,edx
c0016ecc:	52                   	push   edx
c0016ecd:	50                   	push   eax
c0016ece:	55                   	push   ebp
c0016ecf:	e8 98 62 ff ff       	call   c000d16c <File::seek(unsigned long long)>
c0016ed4:	83 c4 10             	add    esp,0x10
c0016ed7:	85 c0                	test   eax,eax
c0016ed9:	0f 85 ea 05 00 00    	jne    c00174c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016edf:	83 ec 0c             	sub    esp,0xc
c0016ee2:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016ee6:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016eea:	31 f6                	xor    esi,esi
c0016eec:	0f af c2             	imul   eax,edx
c0016eef:	50                   	push   eax
c0016ef0:	e8 ce 2a ff ff       	call   c00099c3 <malloc>
c0016ef5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016ef8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016efc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016eff:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016f03:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016f07:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016f0b:	0f af c2             	imul   eax,edx
c0016f0e:	99                   	cdq    
c0016f0f:	52                   	push   edx
c0016f10:	50                   	push   eax
c0016f11:	55                   	push   ebp
c0016f12:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016f15:	83 c4 20             	add    esp,0x20
c0016f18:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0016f1c:	0f 86 8a 00 00 00    	jbe    c0016fac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0016f22:	0f b7 de             	movzx  ebx,si
c0016f25:	c1 e3 05             	shl    ebx,0x5
c0016f28:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0016f2c:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0016f2f:	75 75                	jne    c0016fa6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0016f31:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016f34:	31 d2                	xor    edx,edx
c0016f36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016f3a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016f3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f41:	50                   	push   eax
c0016f42:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0016f45:	52                   	push   edx
c0016f46:	50                   	push   eax
c0016f47:	55                   	push   ebp
c0016f48:	e8 1f 62 ff ff       	call   c000d16c <File::seek(unsigned long long)>
c0016f4d:	83 c4 10             	add    esp,0x10
c0016f50:	85 c0                	test   eax,eax
c0016f52:	0f 85 71 05 00 00    	jne    c00174c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016f58:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0016f5f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016f62:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0016f66:	31 d2                	xor    edx,edx
c0016f68:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0016f6c:	83 ec 0c             	sub    esp,0xc
c0016f6f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016f73:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016f7a:	50                   	push   eax
c0016f7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016f7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f83:	52                   	push   edx
c0016f84:	50                   	push   eax
c0016f85:	55                   	push   ebp
c0016f86:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016f89:	83 c4 1c             	add    esp,0x1c
c0016f8c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016f8f:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0016f92:	50                   	push   eax
c0016f93:	6a 00                	push   0x0
c0016f95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f99:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0016f9d:	50                   	push   eax
c0016f9e:	e8 e1 96 fe ff       	call   c0000684 <memset>
c0016fa3:	83 c4 10             	add    esp,0x10
c0016fa6:	46                   	inc    esi
c0016fa7:	e9 6c ff ff ff       	jmp    c0016f18 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0016fac:	53                   	push   ebx
c0016fad:	31 db                	xor    ebx,ebx
c0016faf:	68 00 01 00 00       	push   0x100
c0016fb4:	6a 00                	push   0x0
c0016fb6:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0016fba:	50                   	push   eax
c0016fbb:	e8 c4 96 fe ff       	call   c0000684 <memset>
c0016fc0:	83 c4 0c             	add    esp,0xc
c0016fc3:	68 00 01 00 00       	push   0x100
c0016fc8:	6a 00                	push   0x0
c0016fca:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0016fd1:	50                   	push   eax
c0016fd2:	e8 ad 96 fe ff       	call   c0000684 <memset>
c0016fd7:	83 c4 10             	add    esp,0x10
c0016fda:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016fe2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016fea:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0016ff2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016ffa:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017002:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0017006:	0f 86 30 01 00 00    	jbe    c001713c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001700c:	0f b7 f3             	movzx  esi,bx
c001700f:	6b f6 28             	imul   esi,esi,0x28
c0017012:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0017016:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017019:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001701d:	52                   	push   edx
c001701e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017022:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0017026:	8b 06                	mov    eax,DWORD PTR [esi]
c0017028:	6b d2 28             	imul   edx,edx,0x28
c001702b:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001702f:	31 d2                	xor    edx,edx
c0017031:	52                   	push   edx
c0017032:	50                   	push   eax
c0017033:	55                   	push   ebp
c0017034:	e8 33 61 ff ff       	call   c000d16c <File::seek(unsigned long long)>
c0017039:	83 c4 0c             	add    esp,0xc
c001703c:	6a 20                	push   0x20
c001703e:	6a 00                	push   0x0
c0017040:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017047:	51                   	push   ecx
c0017048:	e8 37 96 fe ff       	call   c0000684 <memset>
c001704d:	59                   	pop    ecx
c001704e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017051:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017055:	52                   	push   edx
c0017056:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001705d:	51                   	push   ecx
c001705e:	6a 00                	push   0x0
c0017060:	6a 1f                	push   0x1f
c0017062:	55                   	push   ebp
c0017063:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017066:	83 c4 1c             	add    esp,0x1c
c0017069:	6a 09                	push   0x9
c001706b:	68 6e 47 02 c0       	push   0xc002476e
c0017070:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017077:	51                   	push   ecx
c0017078:	e8 03 95 fe ff       	call   c0000580 <memcmp>
c001707d:	83 c4 10             	add    esp,0x10
c0017080:	85 c0                	test   eax,eax
c0017082:	75 21                	jne    c00170a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0017084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017088:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001708c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017090:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017094:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017097:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001709e:	89 d0                	mov    eax,edx
c00170a0:	40                   	inc    eax
c00170a1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00170a5:	50                   	push   eax
c00170a6:	6a 09                	push   0x9
c00170a8:	68 78 47 02 c0       	push   0xc0024778
c00170ad:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00170b4:	50                   	push   eax
c00170b5:	e8 c6 94 fe ff       	call   c0000580 <memcmp>
c00170ba:	83 c4 10             	add    esp,0x10
c00170bd:	85 c0                	test   eax,eax
c00170bf:	75 21                	jne    c00170e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00170c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00170c9:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00170cd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00170d1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00170d4:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00170db:	89 d0                	mov    eax,edx
c00170dd:	40                   	inc    eax
c00170de:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00170e2:	50                   	push   eax
c00170e3:	50                   	push   eax
c00170e4:	68 44 47 02 c0       	push   0xc0024744
c00170e9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00170f0:	50                   	push   eax
c00170f1:	e8 d6 96 fe ff       	call   c00007cc <strcmp>
c00170f6:	83 c4 10             	add    esp,0x10
c00170f9:	85 c0                	test   eax,eax
c00170fb:	75 0f                	jne    c001710c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00170fd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017100:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017104:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017108:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001710c:	50                   	push   eax
c001710d:	50                   	push   eax
c001710e:	68 4c 47 02 c0       	push   0xc002474c
c0017113:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001711a:	50                   	push   eax
c001711b:	e8 ac 96 fe ff       	call   c00007cc <strcmp>
c0017120:	83 c4 10             	add    esp,0x10
c0017123:	85 c0                	test   eax,eax
c0017125:	75 0f                	jne    c0017136 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0017127:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001712a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001712e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017132:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017136:	43                   	inc    ebx
c0017137:	e9 c6 fe ff ff       	jmp    c0017002 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001713c:	31 d2                	xor    edx,edx
c001713e:	50                   	push   eax
c001713f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017143:	52                   	push   edx
c0017144:	50                   	push   eax
c0017145:	55                   	push   ebp
c0017146:	e8 21 60 ff ff       	call   c000d16c <File::seek(unsigned long long)>
c001714b:	58                   	pop    eax
c001714c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017150:	e8 6e 28 ff ff       	call   c00099c3 <malloc>
c0017155:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017158:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001715c:	31 d2                	xor    edx,edx
c001715e:	58                   	pop    eax
c001715f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017163:	53                   	push   ebx
c0017164:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017168:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001716c:	52                   	push   edx
c001716d:	50                   	push   eax
c001716e:	55                   	push   ebp
c001716f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017172:	83 c4 14             	add    esp,0x14
c0017175:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017179:	e8 45 28 ff ff       	call   c00099c3 <malloc>
c001717e:	31 d2                	xor    edx,edx
c0017180:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017184:	83 c4 0c             	add    esp,0xc
c0017187:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001718b:	52                   	push   edx
c001718c:	50                   	push   eax
c001718d:	55                   	push   ebp
c001718e:	e8 d9 5f ff ff       	call   c000d16c <File::seek(unsigned long long)>
c0017193:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017196:	31 d2                	xor    edx,edx
c0017198:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001719b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001719f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00171a3:	52                   	push   edx
c00171a4:	50                   	push   eax
c00171a5:	55                   	push   ebp
c00171a6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00171a9:	83 c4 20             	add    esp,0x20
c00171ac:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00171b4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00171b8:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00171bc:	0f 84 0b 03 00 00    	je     c00174cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c00171c2:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00171c9:	31 d2                	xor    edx,edx
c00171cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171cf:	c1 e8 03             	shr    eax,0x3
c00171d2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00171d6:	51                   	push   ecx
c00171d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00171db:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00171df:	52                   	push   edx
c00171e0:	50                   	push   eax
c00171e1:	55                   	push   ebp
c00171e2:	e8 85 5f ff ff       	call   c000d16c <File::seek(unsigned long long)>
c00171e7:	5b                   	pop    ebx
c00171e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171ec:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00171f3:	e8 cb 27 ff ff       	call   c00099c3 <malloc>
c00171f8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00171fb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00171ff:	31 d2                	xor    edx,edx
c0017201:	5e                   	pop    esi
c0017202:	8d 44 24 58          	lea    eax,[esp+0x58]
c0017206:	50                   	push   eax
c0017207:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001720b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001720f:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0017216:	52                   	push   edx
c0017217:	50                   	push   eax
c0017218:	55                   	push   ebp
c0017219:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001721c:	83 c4 20             	add    esp,0x20
c001721f:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017227:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001722b:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001722f:	0f 8d 7c 02 00 00    	jge    c00174b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0017235:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017239:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001723d:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0017242:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0017245:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017249:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001724d:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0017251:	89 d8                	mov    eax,ebx
c0017253:	c1 e8 08             	shr    eax,0x8
c0017256:	89 c6                	mov    esi,eax
c0017258:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001725c:	c1 e6 04             	shl    esi,0x4
c001725f:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0017263:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0017266:	85 d2                	test   edx,edx
c0017268:	0f 85 bf 00 00 00    	jne    c001732d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001726e:	83 ec 0c             	sub    esp,0xc
c0017271:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017275:	03 06                	add    eax,DWORD PTR [esi]
c0017277:	50                   	push   eax
c0017278:	e8 4b f8 ff ff       	call   c0016ac8 <Thr::getAddressOfKernelSymbol(char const*)>
c001727d:	83 c4 10             	add    esp,0x10
c0017280:	89 c2                	mov    edx,eax
c0017282:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0017287:	85 c0                	test   eax,eax
c0017289:	0f 85 9e 00 00 00    	jne    c001732d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001728f:	83 ec 0c             	sub    esp,0xc
c0017292:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017296:	03 06                	add    eax,DWORD PTR [esi]
c0017298:	50                   	push   eax
c0017299:	e8 72 16 ff ff       	call   c0008910 <Krnl::resolveCompatibilitySymbol(char*)>
c001729e:	83 c4 10             	add    esp,0x10
c00172a1:	89 c2                	mov    edx,eax
c00172a3:	85 c0                	test   eax,eax
c00172a5:	0f 85 82 00 00 00    	jne    c001732d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00172ab:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00172af:	50                   	push   eax
c00172b0:	50                   	push   eax
c00172b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00172b5:	03 06                	add    eax,DWORD PTR [esi]
c00172b7:	50                   	push   eax
c00172b8:	68 82 47 02 c0       	push   0xc0024782
c00172bd:	e8 1d 58 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c00172c2:	58                   	pop    eax
c00172c3:	5a                   	pop    edx
c00172c4:	68 9c 47 02 c0       	push   0xc002479c
c00172c9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00172d0:	50                   	push   eax
c00172d1:	e8 6a 94 fe ff       	call   c0000740 <strcpy>
c00172d6:	59                   	pop    ecx
c00172d7:	58                   	pop    eax
c00172d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00172dc:	03 06                	add    eax,DWORD PTR [esi]
c00172de:	50                   	push   eax
c00172df:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00172e6:	50                   	push   eax
c00172e7:	e8 94 95 fe ff       	call   c0000880 <strcat>
c00172ec:	58                   	pop    eax
c00172ed:	5a                   	pop    edx
c00172ee:	68 32 48 02 c0       	push   0xc0024832
c00172f3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00172fa:	50                   	push   eax
c00172fb:	e8 80 95 fe ff       	call   c0000880 <strcat>
c0017300:	83 c4 10             	add    esp,0x10
c0017303:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017308:	0f 84 5d 01 00 00    	je     c001746b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001730e:	83 ec 0c             	sub    esp,0xc
c0017311:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017318:	50                   	push   eax
c0017319:	e8 83 d0 ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c001731e:	83 c4 10             	add    esp,0x10
c0017321:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017325:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017329:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001732d:	80 fb 01             	cmp    bl,0x1
c0017330:	0f 85 88 00 00 00    	jne    c00173be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0017336:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001733d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0017341:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0017345:	01 ce                	add    esi,ecx
c0017347:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001734d:	0f 94 c0             	sete   al
c0017350:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0017356:	0f 94 c3             	sete   bl
c0017359:	09 c3                	or     ebx,eax
c001735b:	8b 06                	mov    eax,DWORD PTR [esi]
c001735d:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0017362:	74 41                	je     c00173a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0017364:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017367:	84 db                	test   bl,bl
c0017369:	75 15                	jne    c0017380 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001736b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001736f:	66 83 f8 0c          	cmp    ax,0xc
c0017373:	76 05                	jbe    c001737a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0017375:	b8 0c 00 00 00       	mov    eax,0xc
c001737a:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001737e:	76 37                	jbe    c00173b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0017384:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017389:	0f 84 dc 00 00 00    	je     c001746b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001738f:	83 ec 0c             	sub    esp,0xc
c0017392:	68 b3 47 02 c0       	push   0xc00247b3
c0017397:	e8 05 d0 ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c001739c:	83 c4 10             	add    esp,0x10
c001739f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00173a3:	eb 12                	jmp    c00173b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00173a5:	01 c1                	add    ecx,eax
c00173a7:	84 db                	test   bl,bl
c00173a9:	75 0c                	jne    c00173b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00173ab:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00173af:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00173b3:	77 02                	ja     c00173b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00173b5:	01 d1                	add    ecx,edx
c00173b7:	89 0e                	mov    DWORD PTR [esi],ecx
c00173b9:	e9 ea 00 00 00       	jmp    c00174a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00173be:	80 fb 02             	cmp    bl,0x2
c00173c1:	75 7c                	jne    c001743f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c00173c3:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00173ca:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c00173ce:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c00173d2:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00173d8:	74 20                	je     c00173fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c00173da:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00173e0:	74 18                	je     c00173fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c00173e2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00173e6:	b9 0a 00 00 00       	mov    ecx,0xa
c00173eb:	66 83 f8 0e          	cmp    ax,0xe
c00173ef:	77 03                	ja     c00173f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c00173f1:	8d 48 fc             	lea    ecx,[eax-0x4]
c00173f4:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c00173f8:	76 1f                	jbe    c0017419 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c00173fa:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00173fe:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017403:	74 66                	je     c001746b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017405:	83 ec 0c             	sub    esp,0xc
c0017408:	68 cf 47 02 c0       	push   0xc00247cf
c001740d:	e8 8f cf ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c0017412:	83 c4 10             	add    esp,0x10
c0017415:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017419:	8b 06                	mov    eax,DWORD PTR [esi]
c001741b:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0017420:	74 13                	je     c0017435 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0017422:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017426:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001742d:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0017431:	01 c8                	add    eax,ecx
c0017433:	eb 04                	jmp    c0017439 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0017435:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0017439:	01 c2                	add    edx,eax
c001743b:	89 16                	mov    DWORD PTR [esi],edx
c001743d:	eb 69                	jmp    c00174a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001743f:	0f b6 db             	movzx  ebx,bl
c0017442:	50                   	push   eax
c0017443:	50                   	push   eax
c0017444:	53                   	push   ebx
c0017445:	68 eb 47 02 c0       	push   0xc00247eb
c001744a:	e8 90 56 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001744f:	83 c4 10             	add    esp,0x10
c0017452:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017457:	74 12                	je     c001746b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017459:	83 ec 0c             	sub    esp,0xc
c001745c:	68 f6 47 02 c0       	push   0xc00247f6
c0017461:	e8 3b cf ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c0017466:	83 c4 10             	add    esp,0x10
c0017469:	eb 3d                	jmp    c00174a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001746b:	83 ec 0c             	sub    esp,0xc
c001746e:	55                   	push   ebp
c001746f:	e8 98 5c ff ff       	call   c000d10c <File::close()>
c0017474:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017477:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001747a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001747d:	59                   	pop    ecx
c001747e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017482:	e8 4c 25 ff ff       	call   c00099d3 <free>
c0017487:	5b                   	pop    ebx
c0017488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001748c:	e8 42 25 ff ff       	call   c00099d3 <free>
c0017491:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017494:	e8 3a 25 ff ff       	call   c00099d3 <free>
c0017499:	5e                   	pop    esi
c001749a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001749e:	e8 30 25 ff ff       	call   c00099d3 <free>
c00174a3:	83 c4 10             	add    esp,0x10
c00174a6:	eb 21                	jmp    c00174c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00174a8:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00174ac:	e9 76 fd ff ff       	jmp    c0017227 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c00174b1:	83 ec 0c             	sub    esp,0xc
c00174b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00174b8:	e8 16 25 ff ff       	call   c00099d3 <free>
c00174bd:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00174c1:	83 c4 10             	add    esp,0x10
c00174c4:	e9 eb fc ff ff       	jmp    c00171b4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c00174c9:	31 c0                	xor    eax,eax
c00174cb:	eb 33                	jmp    c0017500 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c00174cd:	83 ec 0c             	sub    esp,0xc
c00174d0:	55                   	push   ebp
c00174d1:	e8 36 5c ff ff       	call   c000d10c <File::close()>
c00174d6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00174d9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00174dc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00174df:	58                   	pop    eax
c00174e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00174e4:	e8 ea 24 ff ff       	call   c00099d3 <free>
c00174e9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00174ec:	e8 e2 24 ff ff       	call   c00099d3 <free>
c00174f1:	5a                   	pop    edx
c00174f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00174f6:	e8 d8 24 ff ff       	call   c00099d3 <free>
c00174fb:	83 c4 10             	add    esp,0x10
c00174fe:	b0 01                	mov    al,0x1
c0017500:	81 c4 5c 03 00 00    	add    esp,0x35c
c0017506:	5b                   	pop    ebx
c0017507:	5e                   	pop    esi
c0017508:	5f                   	pop    edi
c0017509:	5d                   	pop    ebp
c001750a:	c3                   	ret    

c001750b <Thr::getDriverBaseFromAddress(unsigned long)>:
c001750b:	56                   	push   esi
c001750c:	31 d2                	xor    edx,edx
c001750e:	53                   	push   ebx
c001750f:	8b 1d 80 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027180
c0017515:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017519:	39 d3                	cmp    ebx,edx
c001751b:	7e 1b                	jle    c0017538 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001751d:	8b 04 95 a0 73 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8c60]
c0017524:	39 c8                	cmp    eax,ecx
c0017526:	77 0d                	ja     c0017535 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0017528:	8b 34 95 a0 71 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd8e60]
c001752f:	01 c6                	add    esi,eax
c0017531:	39 ce                	cmp    esi,ecx
c0017533:	77 05                	ja     c001753a <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0017535:	42                   	inc    edx
c0017536:	eb e1                	jmp    c0017519 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0017538:	31 c0                	xor    eax,eax
c001753a:	5b                   	pop    ebx
c001753b:	5e                   	pop    esi
c001753c:	c3                   	ret    

c001753d <Thr::getDriverNameFromAddress(unsigned long)>:
c001753d:	53                   	push   ebx
c001753e:	31 c0                	xor    eax,eax
c0017540:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017544:	8b 1d 80 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027180
c001754a:	39 c3                	cmp    ebx,eax
c001754c:	7e 22                	jle    c0017570 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001754e:	8b 14 85 a0 73 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8c60]
c0017555:	39 ca                	cmp    edx,ecx
c0017557:	77 14                	ja     c001756d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017559:	03 14 85 a0 71 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd8e60]
c0017560:	39 ca                	cmp    edx,ecx
c0017562:	76 09                	jbe    c001756d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017564:	8b 04 85 a0 75 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8a60]
c001756b:	eb 05                	jmp    c0017572 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001756d:	40                   	inc    eax
c001756e:	eb da                	jmp    c001754a <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0017570:	31 c0                	xor    eax,eax
c0017572:	5b                   	pop    ebx
c0017573:	c3                   	ret    

c0017574 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0017574:	53                   	push   ebx
c0017575:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017579:	53                   	push   ebx
c001757a:	e8 8c ff ff ff       	call   c001750b <Thr::getDriverBaseFromAddress(unsigned long)>
c001757f:	5a                   	pop    edx
c0017580:	31 d2                	xor    edx,edx
c0017582:	85 c0                	test   eax,eax
c0017584:	74 04                	je     c001758a <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0017586:	89 da                	mov    edx,ebx
c0017588:	29 c2                	sub    edx,eax
c001758a:	89 d0                	mov    eax,edx
c001758c:	5b                   	pop    ebx
c001758d:	c3                   	ret    

c001758e <Thr::loadDLL(char const*, bool)>:
c001758e:	55                   	push   ebp
c001758f:	57                   	push   edi
c0017590:	56                   	push   esi
c0017591:	53                   	push   ebx
c0017592:	81 ec 34 01 00 00    	sub    esp,0x134
c0017598:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001759f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00175a6:	56                   	push   esi
c00175a7:	68 0e 48 02 c0       	push   0xc002480e
c00175ac:	e8 2e 55 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c00175b1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00175b8:	e8 06 24 ff ff       	call   c00099c3 <malloc>
c00175bd:	83 c4 0c             	add    esp,0xc
c00175c0:	89 c3                	mov    ebx,eax
c00175c2:	ff 35 70 79 02 c0    	push   DWORD PTR ds:0xc0027970
c00175c8:	56                   	push   esi
c00175c9:	50                   	push   eax
c00175ca:	e8 7b 5a ff ff       	call   c000d04a <File::File(char const*, Process*)>
c00175cf:	83 c4 10             	add    esp,0x10
c00175d2:	85 db                	test   ebx,ebx
c00175d4:	75 3c                	jne    c0017612 <Thr::loadDLL(char const*, bool)+0x84>
c00175d6:	89 f8                	mov    eax,edi
c00175d8:	84 c0                	test   al,al
c00175da:	0f 84 d2 01 00 00    	je     c00177b2 <Thr::loadDLL(char const*, bool)+0x224>
c00175e0:	55                   	push   ebp
c00175e1:	55                   	push   ebp
c00175e2:	68 1f 48 02 c0       	push   0xc002481f
c00175e7:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00175eb:	55                   	push   ebp
c00175ec:	e8 4f 91 fe ff       	call   c0000740 <strcpy>
c00175f1:	58                   	pop    eax
c00175f2:	5a                   	pop    edx
c00175f3:	56                   	push   esi
c00175f4:	55                   	push   ebp
c00175f5:	e8 86 92 fe ff       	call   c0000880 <strcat>
c00175fa:	59                   	pop    ecx
c00175fb:	58                   	pop    eax
c00175fc:	68 32 48 02 c0       	push   0xc0024832
c0017601:	55                   	push   ebp
c0017602:	e8 79 92 fe ff       	call   c0000880 <strcat>
c0017607:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001760a:	e8 92 cd ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c001760f:	83 c4 10             	add    esp,0x10
c0017612:	51                   	push   ecx
c0017613:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0017617:	50                   	push   eax
c0017618:	8d 44 24 20          	lea    eax,[esp+0x20]
c001761c:	50                   	push   eax
c001761d:	53                   	push   ebx
c001761e:	e8 37 5d ff ff       	call   c000d35a <File::stat(unsigned long long*, bool*)>
c0017623:	83 c4 10             	add    esp,0x10
c0017626:	85 db                	test   ebx,ebx
c0017628:	74 0c                	je     c0017636 <Thr::loadDLL(char const*, bool)+0xa8>
c001762a:	83 ec 0c             	sub    esp,0xc
c001762d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001762f:	53                   	push   ebx
c0017630:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017633:	83 c4 10             	add    esp,0x10
c0017636:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001763b:	75 0a                	jne    c0017647 <Thr::loadDLL(char const*, bool)+0xb9>
c001763d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017641:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0017645:	75 3c                	jne    c0017683 <Thr::loadDLL(char const*, bool)+0xf5>
c0017647:	89 f8                	mov    eax,edi
c0017649:	84 c0                	test   al,al
c001764b:	0f 84 49 01 00 00    	je     c001779a <Thr::loadDLL(char const*, bool)+0x20c>
c0017651:	51                   	push   ecx
c0017652:	51                   	push   ecx
c0017653:	68 1f 48 02 c0       	push   0xc002481f
c0017658:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001765c:	53                   	push   ebx
c001765d:	e8 de 90 fe ff       	call   c0000740 <strcpy>
c0017662:	5d                   	pop    ebp
c0017663:	58                   	pop    eax
c0017664:	56                   	push   esi
c0017665:	53                   	push   ebx
c0017666:	e8 15 92 fe ff       	call   c0000880 <strcat>
c001766b:	58                   	pop    eax
c001766c:	5a                   	pop    edx
c001766d:	68 32 48 02 c0       	push   0xc0024832
c0017672:	53                   	push   ebx
c0017673:	e8 08 92 fe ff       	call   c0000880 <strcat>
c0017678:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001767b:	e8 21 cd ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c0017680:	83 c4 10             	add    esp,0x10
c0017683:	52                   	push   edx
c0017684:	6a 03                	push   0x3
c0017686:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001768a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001768e:	05 ff 0f 00 00       	add    eax,0xfff
c0017693:	83 d2 00             	adc    edx,0x0
c0017696:	0f ac d0 0c          	shrd   eax,edx,0xc
c001769a:	50                   	push   eax
c001769b:	ff 35 b0 65 02 c0    	push   DWORD PTR ds:0xc00265b0
c00176a1:	e8 10 48 ff ff       	call   c000beb6 <VAS::allocatePages(int, int)>
c00176a6:	59                   	pop    ecx
c00176a7:	89 c3                	mov    ebx,eax
c00176a9:	5d                   	pop    ebp
c00176aa:	50                   	push   eax
c00176ab:	68 62 29 02 c0       	push   0xc0022962
c00176b0:	e8 2a 54 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c00176b5:	89 34 24             	mov    DWORD PTR [esp],esi
c00176b8:	e8 e3 8f fe ff       	call   c00006a0 <strlen>
c00176bd:	8b 2d 80 71 02 c0    	mov    ebp,DWORD PTR ds:0xc0027180
c00176c3:	40                   	inc    eax
c00176c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00176c7:	e8 f7 22 ff ff       	call   c00099c3 <malloc>
c00176cc:	89 04 ad a0 75 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd8a60],eax
c00176d3:	58                   	pop    eax
c00176d4:	a1 80 71 02 c0       	mov    eax,ds:0xc0027180
c00176d9:	5a                   	pop    edx
c00176da:	56                   	push   esi
c00176db:	ff 34 85 a0 75 02 c0 	push   DWORD PTR [eax*4-0x3ffd8a60]
c00176e2:	e8 59 90 fe ff       	call   c0000740 <strcpy>
c00176e7:	a1 80 71 02 c0       	mov    eax,ds:0xc0027180
c00176ec:	8d 50 01             	lea    edx,[eax+0x1]
c00176ef:	89 1c 85 a0 73 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8c60],ebx
c00176f6:	89 15 80 71 02 c0    	mov    DWORD PTR ds:0xc0027180,edx
c00176fc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017700:	83 c4 0c             	add    esp,0xc
c0017703:	89 14 85 a0 71 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8e60],edx
c001770a:	6a 01                	push   0x1
c001770c:	53                   	push   ebx
c001770d:	56                   	push   esi
c001770e:	e8 c2 f6 ff ff       	call   c0016dd5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0017713:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0017717:	83 c4 10             	add    esp,0x10
c001771a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001771f:	0f 85 89 00 00 00    	jne    c00177ae <Thr::loadDLL(char const*, bool)+0x220>
c0017725:	89 f8                	mov    eax,edi
c0017727:	84 c0                	test   al,al
c0017729:	74 73                	je     c001779e <Thr::loadDLL(char const*, bool)+0x210>
c001772b:	83 ec 0c             	sub    esp,0xc
c001772e:	68 34 48 02 c0       	push   0xc0024834
c0017733:	e8 69 cc ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c0017738:	83 c4 10             	add    esp,0x10
c001773b:	eb 61                	jmp    c001779e <Thr::loadDLL(char const*, bool)+0x210>
c001773d:	50                   	push   eax
c001773e:	50                   	push   eax
c001773f:	89 e8                	mov    eax,ebp
c0017741:	c1 e0 0c             	shl    eax,0xc
c0017744:	01 d8                	add    eax,ebx
c0017746:	50                   	push   eax
c0017747:	ff 35 b0 65 02 c0    	push   DWORD PTR ds:0xc00265b0
c001774d:	e8 cc 42 ff ff       	call   c000ba1e <VAS::getPageTableEntry(unsigned long)>
c0017752:	83 c4 10             	add    esp,0x10
c0017755:	8b 00                	mov    eax,DWORD PTR [eax]
c0017757:	a8 60                	test   al,0x60
c0017759:	75 11                	jne    c001776c <Thr::loadDLL(char const*, bool)+0x1de>
c001775b:	83 ec 0c             	sub    esp,0xc
c001775e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017763:	50                   	push   eax
c0017764:	e8 0d 26 ff ff       	call   c0009d76 <Phys::freePage(unsigned long)>
c0017769:	83 c4 10             	add    esp,0x10
c001776c:	45                   	inc    ebp
c001776d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017771:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017775:	05 ff 0f 00 00       	add    eax,0xfff
c001777a:	bf 00 00 00 00       	mov    edi,0x0
c001777f:	83 d2 00             	adc    edx,0x0
c0017782:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017786:	c1 ea 0c             	shr    edx,0xc
c0017789:	39 c5                	cmp    ebp,eax
c001778b:	89 d1                	mov    ecx,edx
c001778d:	89 f8                	mov    eax,edi
c001778f:	19 c8                	sbb    eax,ecx
c0017791:	72 aa                	jb     c001773d <Thr::loadDLL(char const*, bool)+0x1af>
c0017793:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017798:	75 18                	jne    c00177b2 <Thr::loadDLL(char const*, bool)+0x224>
c001779a:	31 db                	xor    ebx,ebx
c001779c:	eb 14                	jmp    c00177b2 <Thr::loadDLL(char const*, bool)+0x224>
c001779e:	83 ec 0c             	sub    esp,0xc
c00177a1:	68 53 48 02 c0       	push   0xc0024853
c00177a6:	e8 f6 cb ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c00177ab:	83 c4 10             	add    esp,0x10
c00177ae:	31 ed                	xor    ebp,ebp
c00177b0:	eb bb                	jmp    c001776d <Thr::loadDLL(char const*, bool)+0x1df>
c00177b2:	81 c4 2c 01 00 00    	add    esp,0x12c
c00177b8:	89 d8                	mov    eax,ebx
c00177ba:	5b                   	pop    ebx
c00177bb:	5e                   	pop    esi
c00177bc:	5f                   	pop    edi
c00177bd:	5d                   	pop    ebp
c00177be:	c3                   	ret    

c00177bf <Thr::executeDLL(unsigned long, void*)>:
c00177bf:	56                   	push   esi
c00177c0:	53                   	push   ebx
c00177c1:	52                   	push   edx
c00177c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00177c6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00177ca:	85 db                	test   ebx,ebx
c00177cc:	75 10                	jne    c00177de <Thr::executeDLL(unsigned long, void*)+0x1f>
c00177ce:	83 ec 0c             	sub    esp,0xc
c00177d1:	68 6f 48 02 c0       	push   0xc002486f
c00177d6:	e8 c6 cb ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c00177db:	83 c4 10             	add    esp,0x10
c00177de:	50                   	push   eax
c00177df:	50                   	push   eax
c00177e0:	53                   	push   ebx
c00177e1:	68 99 48 02 c0       	push   0xc0024899
c00177e6:	e8 f4 52 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c00177eb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00177ef:	89 d8                	mov    eax,ebx
c00177f1:	83 c4 14             	add    esp,0x14
c00177f4:	5b                   	pop    ebx
c00177f5:	5e                   	pop    esi
c00177f6:	ff e0                	jmp    eax

c00177f8 <userModeEntryPoint(void*)>:
c00177f8:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c00177fd:	48                   	dec    eax
c00177fe:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c0017803:	75 03                	jne    c0017808 <userModeEntryPoint(void*)+0x10>
c0017805:	fb                   	sti    
c0017806:	66 90                	xchg   ax,ax
c0017808:	fb                   	sti    
c0017809:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001780e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017811:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0017817:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001781b:	e9 3f 8a fe ff       	jmp    c000025f <goToUsermode>

c0017820 <changeTSS>:
c0017820:	83 ec 14             	sub    esp,0x14
c0017823:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017828:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001782b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0017830:	c1 e2 15             	shl    edx,0x15
c0017833:	29 d0                	sub    eax,edx
c0017835:	50                   	push   eax
c0017836:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c001783b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017841:	05 7c 11 00 00       	add    eax,0x117c
c0017846:	50                   	push   eax
c0017847:	e8 14 38 ff ff       	call   c000b060 <TSS::setESP(unsigned long)>
c001784c:	83 c4 1c             	add    esp,0x1c
c001784f:	c3                   	ret    

c0017850 <switchToThread(ThreadControlBlock*)>:
c0017850:	57                   	push   edi
c0017851:	a1 44 79 02 c0       	mov    eax,ds:0xc0027944
c0017856:	56                   	push   esi
c0017857:	85 c0                	test   eax,eax
c0017859:	53                   	push   ebx
c001785a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001785e:	0f 85 90 00 00 00    	jne    c00178f4 <switchToThread(ThreadControlBlock*)+0xa4>
c0017864:	8a 41 40             	mov    al,BYTE PTR [ecx+0x40]
c0017867:	3c ff                	cmp    al,0xff
c0017869:	0f 84 81 00 00 00    	je     c00178f0 <switchToThread(ThreadControlBlock*)+0xa0>
c001786f:	0f b6 d0             	movzx  edx,al
c0017872:	b8 00 04 00 00       	mov    eax,0x400
c0017877:	29 d0                	sub    eax,edx
c0017879:	d1 f8                	sar    eax,1
c001787b:	03 41 34             	add    eax,DWORD PTR [ecx+0x34]
c001787e:	66 90                	xchg   ax,ax
c0017880:	89 41 34             	mov    DWORD PTR [ecx+0x34],eax
c0017883:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c0017888:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001788e:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0017895:	74 4d                	je     c00178e4 <switchToThread(ThreadControlBlock*)+0x94>
c0017897:	0f 31                	rdtsc  
c0017899:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c001789e:	89 c6                	mov    esi,eax
c00178a0:	89 d7                	mov    edi,edx
c00178a2:	2b 35 78 79 02 c0    	sub    esi,DWORD PTR ds:0xc0027978
c00178a8:	89 15 8c 79 02 c0    	mov    DWORD PTR ds:0xc002798c,edx
c00178ae:	1b 3d 7c 79 02 c0    	sbb    edi,DWORD PTR ds:0xc002797c
c00178b4:	89 35 80 79 02 c0    	mov    DWORD PTR ds:0xc0027980,esi
c00178ba:	a3 78 79 02 c0       	mov    ds:0xc0027978,eax
c00178bf:	89 3d 84 79 02 c0    	mov    DWORD PTR ds:0xc0027984,edi
c00178c5:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00178cb:	89 15 7c 79 02 c0    	mov    DWORD PTR ds:0xc002797c,edx
c00178d1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00178d4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00178d7:	01 c6                	add    esi,eax
c00178d9:	11 d7                	adc    edi,edx
c00178db:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c00178de:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c00178e1:	8d 76 00             	lea    esi,[esi+0x0]
c00178e4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00178e8:	5b                   	pop    ebx
c00178e9:	5e                   	pop    esi
c00178ea:	5f                   	pop    edi
c00178eb:	e9 a7 89 fe ff       	jmp    c0000297 <switchToThreadASM>
c00178f0:	31 c0                	xor    eax,eax
c00178f2:	eb 8c                	jmp    c0017880 <switchToThread(ThreadControlBlock*)+0x30>
c00178f4:	5b                   	pop    ebx
c00178f5:	c7 05 40 79 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027940,0x1
c00178ff:	5e                   	pop    esi
c0017900:	5f                   	pop    edi
c0017901:	c3                   	ret    
c0017902:	66 90                	xchg   ax,ax

c0017904 <Process::addArgs(char**)>:
c0017904:	57                   	push   edi
c0017905:	56                   	push   esi
c0017906:	53                   	push   ebx
c0017907:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001790b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001790f:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0017919:	85 ff                	test   edi,edi
c001791b:	74 43                	je     c0017960 <Process::addArgs(char**)+0x5c>
c001791d:	8b 07                	mov    eax,DWORD PTR [edi]
c001791f:	85 c0                	test   eax,eax
c0017921:	74 3d                	je     c0017960 <Process::addArgs(char**)+0x5c>
c0017923:	31 db                	xor    ebx,ebx
c0017925:	8d 76 00             	lea    esi,[esi+0x0]
c0017928:	83 ec 0c             	sub    esp,0xc
c001792b:	50                   	push   eax
c001792c:	e8 6f 8d fe ff       	call   c00006a0 <strlen>
c0017931:	40                   	inc    eax
c0017932:	89 04 24             	mov    DWORD PTR [esp],eax
c0017935:	e8 89 20 ff ff       	call   c00099c3 <malloc>
c001793a:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0017941:	5a                   	pop    edx
c0017942:	59                   	pop    ecx
c0017943:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c0017946:	43                   	inc    ebx
c0017947:	50                   	push   eax
c0017948:	e8 f3 8d fe ff       	call   c0000740 <strcpy>
c001794d:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0017953:	83 c4 10             	add    esp,0x10
c0017956:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0017959:	85 c0                	test   eax,eax
c001795b:	75 cb                	jne    c0017928 <Process::addArgs(char**)+0x24>
c001795d:	8d 76 00             	lea    esi,[esi+0x0]
c0017960:	5b                   	pop    ebx
c0017961:	5e                   	pop    esi
c0017962:	5f                   	pop    edi
c0017963:	c3                   	ret    

c0017964 <Process::Process(char const*, Process*, char**)>:
c0017964:	56                   	push   esi
c0017965:	53                   	push   ebx
c0017966:	83 ec 14             	sub    esp,0x14
c0017969:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001796d:	05 0c 02 00 00       	add    eax,0x20c
c0017972:	bb 07 00 00 00       	mov    ebx,0x7
c0017977:	89 c6                	mov    esi,eax
c0017979:	8d 76 00             	lea    esi,[esi+0x0]
c001797c:	85 db                	test   ebx,ebx
c001797e:	78 14                	js     c0017994 <Process::Process(char const*, Process*, char**)+0x30>
c0017980:	83 ec 0c             	sub    esp,0xc
c0017983:	56                   	push   esi
c0017984:	e8 27 9f 00 00       	call   c00218b0 <ThreadControlBlock::ThreadControlBlock()>
c0017989:	83 c4 10             	add    esp,0x10
c001798c:	83 c6 5f             	add    esi,0x5f
c001798f:	4b                   	dec    ebx
c0017990:	eb ea                	jmp    c001797c <Process::Process(char const*, Process*, char**)+0x18>
c0017992:	66 90                	xchg   ax,ax
c0017994:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017998:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001799f:	83 ec 0c             	sub    esp,0xc
c00179a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00179a6:	e8 7f c8 ff ff       	call   c001422a <Krnl::newProcessEnv(Process*)>
c00179ab:	83 c4 10             	add    esp,0x10
c00179ae:	89 c2                	mov    edx,eax
c00179b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179b4:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00179ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179be:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00179c7:	a1 b0 5e 02 c0       	mov    eax,ds:0xc0025eb0
c00179cc:	8d 50 01             	lea    edx,[eax+0x1]
c00179cf:	89 15 b0 5e 02 c0    	mov    DWORD PTR ds:0xc0025eb0,edx
c00179d5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00179d9:	89 02                	mov    DWORD PTR [edx],eax
c00179db:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00179e3:	83 ec 0c             	sub    esp,0xc
c00179e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00179ea:	e8 d4 1f ff ff       	call   c00099c3 <malloc>
c00179ef:	83 c4 10             	add    esp,0x10
c00179f2:	89 c3                	mov    ebx,eax
c00179f4:	83 ec 08             	sub    esp,0x8
c00179f7:	6a 00                	push   0x0
c00179f9:	53                   	push   ebx
c00179fa:	e8 5f 48 ff ff       	call   c000c25e <VAS::VAS(bool)>
c00179ff:	83 c4 10             	add    esp,0x10
c0017a02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a06:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0017a0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a10:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0017a1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a1e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a22:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0017a28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a2c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017a32:	85 c0                	test   eax,eax
c0017a34:	74 42                	je     c0017a78 <Process::Process(char const*, Process*, char**)+0x114>
c0017a36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a3a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017a40:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0017a46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a4a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0017a50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a54:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017a5a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a64:	05 0c 01 00 00       	add    eax,0x10c
c0017a69:	83 ec 08             	sub    esp,0x8
c0017a6c:	52                   	push   edx
c0017a6d:	50                   	push   eax
c0017a6e:	e8 cd 8c fe ff       	call   c0000740 <strcpy>
c0017a73:	83 c4 10             	add    esp,0x10
c0017a76:	eb 64                	jmp    c0017adc <Process::Process(char const*, Process*, char**)+0x178>
c0017a78:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c0017a80:	83 ec 0c             	sub    esp,0xc
c0017a83:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017a87:	e8 37 1f ff ff       	call   c00099c3 <malloc>
c0017a8c:	83 c4 10             	add    esp,0x10
c0017a8f:	89 c3                	mov    ebx,eax
c0017a91:	83 ec 08             	sub    esp,0x8
c0017a94:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a98:	53                   	push   ebx
c0017a99:	e8 d0 32 ff ff       	call   c000ad6e <VgaText::VgaText(char const*)>
c0017a9e:	83 c4 10             	add    esp,0x10
c0017aa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017aa5:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0017aab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017aaf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ab5:	83 ec 0c             	sub    esp,0xc
c0017ab8:	50                   	push   eax
c0017ab9:	e8 6f 2a ff ff       	call   c000a52d <addToTerminalCycle(VgaText*)>
c0017abe:	83 c4 10             	add    esp,0x10
c0017ac1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ac5:	05 0c 01 00 00       	add    eax,0x10c
c0017aca:	83 ec 08             	sub    esp,0x8
c0017acd:	68 b8 48 02 c0       	push   0xc00248b8
c0017ad2:	50                   	push   eax
c0017ad3:	e8 68 8c fe ff       	call   c0000740 <strcpy>
c0017ad8:	83 c4 10             	add    esp,0x10
c0017adb:	90                   	nop
c0017adc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ae0:	83 c0 0c             	add    eax,0xc
c0017ae3:	83 ec 08             	sub    esp,0x8
c0017ae6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017aea:	50                   	push   eax
c0017aeb:	e8 50 8c fe ff       	call   c0000740 <strcpy>
c0017af0:	83 c4 10             	add    esp,0x10
c0017af3:	83 ec 08             	sub    esp,0x8
c0017af6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017afa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017afe:	e8 01 fe ff ff       	call   c0017904 <Process::addArgs(char**)>
c0017b03:	83 c4 10             	add    esp,0x10
c0017b06:	83 ec 08             	sub    esp,0x8
c0017b09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b11:	e8 89 ed ff ff       	call   c001689f <Thr::loadProgramIntoMemory(Process*, char const*)>
c0017b16:	83 c4 10             	add    esp,0x10
c0017b19:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017b1d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017b21:	83 f0 01             	xor    eax,0x1
c0017b24:	88 c2                	mov    dl,al
c0017b26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b2a:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0017b30:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017b35:	83 ec 08             	sub    esp,0x8
c0017b38:	50                   	push   eax
c0017b39:	68 10 49 02 c0       	push   0xc0024910
c0017b3e:	e8 9c 4f ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c0017b43:	83 c4 10             	add    esp,0x10
c0017b46:	90                   	nop
c0017b47:	83 c4 14             	add    esp,0x14
c0017b4a:	5b                   	pop    ebx
c0017b4b:	5e                   	pop    esi
c0017b4c:	c3                   	ret    
c0017b4d:	90                   	nop
c0017b4e:	66 90                	xchg   ax,ax

c0017b50 <Process::Process(bool, char const*, Process*, char**)>:
c0017b50:	56                   	push   esi
c0017b51:	53                   	push   ebx
c0017b52:	83 ec 24             	sub    esp,0x24
c0017b55:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b59:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017b5d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b61:	05 0c 02 00 00       	add    eax,0x20c
c0017b66:	bb 07 00 00 00       	mov    ebx,0x7
c0017b6b:	89 c6                	mov    esi,eax
c0017b6d:	8d 76 00             	lea    esi,[esi+0x0]
c0017b70:	85 db                	test   ebx,ebx
c0017b72:	78 14                	js     c0017b88 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0017b74:	83 ec 0c             	sub    esp,0xc
c0017b77:	56                   	push   esi
c0017b78:	e8 33 9d 00 00       	call   c00218b0 <ThreadControlBlock::ThreadControlBlock()>
c0017b7d:	83 c4 10             	add    esp,0x10
c0017b80:	83 c6 5f             	add    esi,0x5f
c0017b83:	4b                   	dec    ebx
c0017b84:	eb ea                	jmp    c0017b70 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0017b86:	66 90                	xchg   ax,ax
c0017b88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b8c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0017b93:	83 ec 0c             	sub    esp,0xc
c0017b96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017b9a:	e8 8b c6 ff ff       	call   c001422a <Krnl::newProcessEnv(Process*)>
c0017b9f:	83 c4 10             	add    esp,0x10
c0017ba2:	89 c2                	mov    edx,eax
c0017ba4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ba8:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0017bae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bb2:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0017bbb:	a1 b0 5e 02 c0       	mov    eax,ds:0xc0025eb0
c0017bc0:	8d 50 01             	lea    edx,[eax+0x1]
c0017bc3:	89 15 b0 5e 02 c0    	mov    DWORD PTR ds:0xc0025eb0,edx
c0017bc9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017bcd:	89 02                	mov    DWORD PTR [edx],eax
c0017bcf:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0017bd7:	83 ec 0c             	sub    esp,0xc
c0017bda:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017bde:	e8 e0 1d ff ff       	call   c00099c3 <malloc>
c0017be3:	83 c4 10             	add    esp,0x10
c0017be6:	89 c3                	mov    ebx,eax
c0017be8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017bed:	83 ec 08             	sub    esp,0x8
c0017bf0:	50                   	push   eax
c0017bf1:	53                   	push   ebx
c0017bf2:	e8 67 46 ff ff       	call   c000c25e <VAS::VAS(bool)>
c0017bf7:	83 c4 10             	add    esp,0x10
c0017bfa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bfe:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0017c04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c08:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0017c12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c16:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017c1a:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0017c20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c24:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017c2a:	85 c0                	test   eax,eax
c0017c2c:	74 42                	je     c0017c70 <Process::Process(bool, char const*, Process*, char**)+0x120>
c0017c2e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c32:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017c38:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0017c3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c42:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0017c48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c4c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017c52:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017c58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c5c:	05 0c 01 00 00       	add    eax,0x10c
c0017c61:	83 ec 08             	sub    esp,0x8
c0017c64:	52                   	push   edx
c0017c65:	50                   	push   eax
c0017c66:	e8 d5 8a fe ff       	call   c0000740 <strcpy>
c0017c6b:	83 c4 10             	add    esp,0x10
c0017c6e:	eb 64                	jmp    c0017cd4 <Process::Process(bool, char const*, Process*, char**)+0x184>
c0017c70:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c0017c78:	83 ec 0c             	sub    esp,0xc
c0017c7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017c7f:	e8 3f 1d ff ff       	call   c00099c3 <malloc>
c0017c84:	83 c4 10             	add    esp,0x10
c0017c87:	89 c3                	mov    ebx,eax
c0017c89:	83 ec 08             	sub    esp,0x8
c0017c8c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017c90:	53                   	push   ebx
c0017c91:	e8 d8 30 ff ff       	call   c000ad6e <VgaText::VgaText(char const*)>
c0017c96:	83 c4 10             	add    esp,0x10
c0017c99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c9d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0017ca3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ca7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017cad:	83 ec 0c             	sub    esp,0xc
c0017cb0:	50                   	push   eax
c0017cb1:	e8 77 28 ff ff       	call   c000a52d <addToTerminalCycle(VgaText*)>
c0017cb6:	83 c4 10             	add    esp,0x10
c0017cb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cbd:	05 0c 01 00 00       	add    eax,0x10c
c0017cc2:	83 ec 08             	sub    esp,0x8
c0017cc5:	68 b8 48 02 c0       	push   0xc00248b8
c0017cca:	50                   	push   eax
c0017ccb:	e8 70 8a fe ff       	call   c0000740 <strcpy>
c0017cd0:	83 c4 10             	add    esp,0x10
c0017cd3:	90                   	nop
c0017cd4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cd8:	83 c0 0c             	add    eax,0xc
c0017cdb:	83 ec 08             	sub    esp,0x8
c0017cde:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017ce2:	50                   	push   eax
c0017ce3:	e8 58 8a fe ff       	call   c0000740 <strcpy>
c0017ce8:	83 c4 10             	add    esp,0x10
c0017ceb:	83 ec 08             	sub    esp,0x8
c0017cee:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017cf2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017cf6:	e8 09 fc ff ff       	call   c0017904 <Process::addArgs(char**)>
c0017cfb:	83 c4 10             	add    esp,0x10
c0017cfe:	90                   	nop
c0017cff:	83 c4 24             	add    esp,0x24
c0017d02:	5b                   	pop    ebx
c0017d03:	5e                   	pop    esi
c0017d04:	c3                   	ret    
c0017d05:	8d 76 00             	lea    esi,[esi+0x0]

c0017d08 <taskStartupFunction>:
c0017d08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017d0d:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0017d10:	c3                   	ret    
c0017d11:	90                   	nop
c0017d12:	66 90                	xchg   ax,ax

c0017d14 <Semaphore::Semaphore(int)>:
c0017d14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d18:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017d1c:	89 10                	mov    DWORD PTR [eax],edx
c0017d1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d22:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017d29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d2d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017d34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d38:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0017d3f:	90                   	nop
c0017d40:	c3                   	ret    
c0017d41:	90                   	nop
c0017d42:	66 90                	xchg   ax,ax

c0017d44 <Mutex::Mutex()>:
c0017d44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d48:	6a 01                	push   0x1
c0017d4a:	50                   	push   eax
c0017d4b:	e8 c4 ff ff ff       	call   c0017d14 <Semaphore::Semaphore(int)>
c0017d50:	83 c4 08             	add    esp,0x8
c0017d53:	90                   	nop
c0017d54:	c3                   	ret    
c0017d55:	90                   	nop
c0017d56:	66 90                	xchg   ax,ax

c0017d58 <Process::createThread(void (*)(void*), void*, int)>:
c0017d58:	57                   	push   edi
c0017d59:	31 c9                	xor    ecx,ecx
c0017d5b:	56                   	push   esi
c0017d5c:	53                   	push   ebx
c0017d5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017d61:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0017d68:	89 f2                	mov    edx,esi
c0017d6a:	66 90                	xchg   ax,ax
c0017d6c:	0f b7 c2             	movzx  eax,dx
c0017d6f:	83 e2 01             	and    edx,0x1
c0017d72:	74 14                	je     c0017d88 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0017d74:	d1 f8                	sar    eax,1
c0017d76:	41                   	inc    ecx
c0017d77:	89 c2                	mov    edx,eax
c0017d79:	83 f9 10             	cmp    ecx,0x10
c0017d7c:	75 ee                	jne    c0017d6c <Process::createThread(void (*)(void*), void*, int)+0x14>
c0017d7e:	31 db                	xor    ebx,ebx
c0017d80:	89 d8                	mov    eax,ebx
c0017d82:	5b                   	pop    ebx
c0017d83:	5e                   	pop    esi
c0017d84:	5f                   	pop    edi
c0017d85:	c3                   	ret    
c0017d86:	66 90                	xchg   ax,ax
c0017d88:	b8 01 00 00 00       	mov    eax,0x1
c0017d8d:	d3 e0                	shl    eax,cl
c0017d8f:	09 c6                	or     esi,eax
c0017d91:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0017d94:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0017d9b:	01 c0                	add    eax,eax
c0017d9d:	01 c8                	add    eax,ecx
c0017d9f:	8d 04 80             	lea    eax,[eax+eax*4]
c0017da2:	01 d8                	add    eax,ebx
c0017da4:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0017dab:	75 0b                	jne    c0017db8 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0017dad:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0017db7:	90                   	nop
c0017db8:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0017dbe:	83 ec 08             	sub    esp,0x8
c0017dc1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0017dc4:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0017dc7:	01 c0                	add    eax,eax
c0017dc9:	01 c8                	add    eax,ecx
c0017dcb:	8d 3c 80             	lea    edi,[eax+eax*4]
c0017dce:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0017dd1:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0017dd7:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0017ddd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017de1:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0017de7:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0017ded:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0017df4:	89 ca                	mov    edx,ecx
c0017df6:	f7 da                	neg    edx
c0017df8:	c1 e2 15             	shl    edx,0x15
c0017dfb:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0017e01:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0017e07:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017e0b:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0017e15:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0017e1b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017e1f:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0017e25:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0017e2f:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0017e39:	53                   	push   ebx
c0017e3a:	68 64 79 02 c0       	push   0xc0027964
c0017e3f:	e8 0c 98 00 00       	call   c0021650 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017e44:	83 c4 10             	add    esp,0x10
c0017e47:	89 d8                	mov    eax,ebx
c0017e49:	5b                   	pop    ebx
c0017e4a:	5e                   	pop    esi
c0017e4b:	5f                   	pop    edi
c0017e4c:	c3                   	ret    
c0017e4d:	90                   	nop
c0017e4e:	66 90                	xchg   ax,ax

c0017e50 <Process::createUserThread()>:
c0017e50:	83 ec 0c             	sub    esp,0xc
c0017e53:	68 80 00 00 00       	push   0x80
c0017e58:	6a 00                	push   0x0
c0017e5a:	68 f8 77 01 c0       	push   0xc00177f8
c0017e5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e63:	e8 f0 fe ff ff       	call   c0017d58 <Process::createThread(void (*)(void*), void*, int)>
c0017e68:	83 c4 1c             	add    esp,0x1c
c0017e6b:	c3                   	ret    

c0017e6c <setupMultitasking(void (*)())>:
c0017e6c:	56                   	push   esi
c0017e6d:	53                   	push   ebx
c0017e6e:	51                   	push   ecx
c0017e6f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017e73:	eb 13                	jmp    c0017e88 <setupMultitasking(void (*)())+0x1c>
c0017e75:	8d 76 00             	lea    esi,[esi+0x0]
c0017e78:	83 ec 0c             	sub    esp,0xc
c0017e7b:	68 64 79 02 c0       	push   0xc0027964
c0017e80:	e8 13 97 00 00       	call   c0021598 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017e85:	83 c4 10             	add    esp,0x10
c0017e88:	83 ec 0c             	sub    esp,0xc
c0017e8b:	68 64 79 02 c0       	push   0xc0027964
c0017e90:	e8 df 96 00 00       	call   c0021574 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017e95:	83 c4 10             	add    esp,0x10
c0017e98:	84 c0                	test   al,al
c0017e9a:	74 dc                	je     c0017e78 <setupMultitasking(void (*)())+0xc>
c0017e9c:	83 ec 0c             	sub    esp,0xc
c0017e9f:	68 1f 07 00 00       	push   0x71f
c0017ea4:	e8 1a 1b ff ff       	call   c00099c3 <malloc>
c0017ea9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017eb0:	89 c3                	mov    ebx,eax
c0017eb2:	6a 00                	push   0x0
c0017eb4:	68 bc 48 02 c0       	push   0xc00248bc
c0017eb9:	6a 01                	push   0x1
c0017ebb:	50                   	push   eax
c0017ebc:	e8 8f fc ff ff       	call   c0017b50 <Process::Process(bool, char const*, Process*, char**)>
c0017ec1:	83 c4 14             	add    esp,0x14
c0017ec4:	89 1d 70 79 02 c0    	mov    DWORD PTR ds:0xc0027970,ebx
c0017eca:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c0017ed0:	e8 66 29 ff ff       	call   c000a83b <setActiveTerminal(VgaText*)>
c0017ed5:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0017edd:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0017ee7:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0017eed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017ef0:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0017efa:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0017f00:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0017f06:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0017f10:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0017f1a:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0017f24:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0017f2a:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0017f34:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0017f3a:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0017f44:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0017f4a:	58                   	pop    eax
c0017f4b:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0017f51:	5a                   	pop    edx
c0017f52:	68 b8 48 02 c0       	push   0xc00248b8
c0017f57:	50                   	push   eax
c0017f58:	e8 e3 87 fe ff       	call   c0000740 <strcpy>
c0017f5d:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0017f64:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017f68:	83 c4 14             	add    esp,0x14
c0017f6b:	5b                   	pop    ebx
c0017f6c:	5e                   	pop    esi
c0017f6d:	e9 17 83 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0017f72:	66 90                	xchg   ax,ax

c0017f74 <schedule()>:
c0017f74:	a1 44 79 02 c0       	mov    eax,ds:0xc0027944
c0017f79:	85 c0                	test   eax,eax
c0017f7b:	74 0b                	je     c0017f88 <schedule()+0x14>
c0017f7d:	c7 05 40 79 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027940,0x1
c0017f87:	c3                   	ret    
c0017f88:	53                   	push   ebx
c0017f89:	83 ec 14             	sub    esp,0x14
c0017f8c:	68 64 79 02 c0       	push   0xc0027964
c0017f91:	e8 de 95 00 00       	call   c0021574 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017f96:	83 c4 10             	add    esp,0x10
c0017f99:	84 c0                	test   al,al
c0017f9b:	75 3b                	jne    c0017fd8 <schedule()+0x64>
c0017f9d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017fa2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0017fa5:	4a                   	dec    edx
c0017fa6:	74 38                	je     c0017fe0 <schedule()+0x6c>
c0017fa8:	83 ec 0c             	sub    esp,0xc
c0017fab:	68 64 79 02 c0       	push   0xc0027964
c0017fb0:	e8 db 95 00 00       	call   c0021590 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017fb5:	c7 04 24 64 79 02 c0 	mov    DWORD PTR [esp],0xc0027964
c0017fbc:	89 c3                	mov    ebx,eax
c0017fbe:	e8 d5 95 00 00       	call   c0021598 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017fc3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0017fca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017fcd:	e8 7e f8 ff ff       	call   c0017850 <switchToThread(ThreadControlBlock*)>
c0017fd2:	83 c4 10             	add    esp,0x10
c0017fd5:	8d 76 00             	lea    esi,[esi+0x0]
c0017fd8:	83 c4 08             	add    esp,0x8
c0017fdb:	5b                   	pop    ebx
c0017fdc:	c3                   	ret    
c0017fdd:	8d 76 00             	lea    esi,[esi+0x0]
c0017fe0:	83 ec 08             	sub    esp,0x8
c0017fe3:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017fea:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0017ff0:	68 64 79 02 c0       	push   0xc0027964
c0017ff5:	e8 56 96 00 00       	call   c0021650 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017ffa:	83 c4 10             	add    esp,0x10
c0017ffd:	eb a9                	jmp    c0017fa8 <schedule()+0x34>
c0017fff:	90                   	nop

c0018000 <Semaphore::tryAcquire()>:
c0018000:	53                   	push   ebx
c0018001:	83 ec 08             	sub    esp,0x8
c0018004:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018008:	fa                   	cli    
c0018009:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c001800e:	8d 50 01             	lea    edx,[eax+0x1]
c0018011:	89 15 48 79 02 c0    	mov    DWORD PTR ds:0xc0027948,edx
c0018017:	8b 15 44 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027944
c001801d:	8d 5a 01             	lea    ebx,[edx+0x1]
c0018020:	89 1d 44 79 02 c0    	mov    DWORD PTR ds:0xc0027944,ebx
c0018026:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0018029:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001802b:	7c 33                	jl     c0018060 <Semaphore::tryAcquire()+0x60>
c001802d:	89 15 44 79 02 c0    	mov    DWORD PTR ds:0xc0027944,edx
c0018033:	85 d2                	test   edx,edx
c0018035:	75 0d                	jne    c0018044 <Semaphore::tryAcquire()+0x44>
c0018037:	8b 15 40 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027940
c001803d:	85 d2                	test   edx,edx
c001803f:	75 6b                	jne    c00180ac <Semaphore::tryAcquire()+0xac>
c0018041:	8d 76 00             	lea    esi,[esi+0x0]
c0018044:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c0018049:	85 c0                	test   eax,eax
c001804b:	74 0b                	je     c0018058 <Semaphore::tryAcquire()+0x58>
c001804d:	8d 76 00             	lea    esi,[esi+0x0]
c0018050:	31 c0                	xor    eax,eax
c0018052:	83 c4 08             	add    esp,0x8
c0018055:	5b                   	pop    ebx
c0018056:	c3                   	ret    
c0018057:	90                   	nop
c0018058:	fb                   	sti    
c0018059:	83 c4 08             	add    esp,0x8
c001805c:	5b                   	pop    ebx
c001805d:	c3                   	ret    
c001805e:	66 90                	xchg   ax,ax
c0018060:	43                   	inc    ebx
c0018061:	89 15 44 79 02 c0    	mov    DWORD PTR ds:0xc0027944,edx
c0018067:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001806a:	85 d2                	test   edx,edx
c001806c:	75 22                	jne    c0018090 <Semaphore::tryAcquire()+0x90>
c001806e:	8b 0d 40 79 02 c0    	mov    ecx,DWORD PTR ds:0xc0027940
c0018074:	85 c9                	test   ecx,ecx
c0018076:	74 18                	je     c0018090 <Semaphore::tryAcquire()+0x90>
c0018078:	c7 05 40 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027940,0x0
c0018082:	e8 ed fe ff ff       	call   c0017f74 <schedule()>
c0018087:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c001808c:	48                   	dec    eax
c001808d:	8d 76 00             	lea    esi,[esi+0x0]
c0018090:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c0018095:	85 c0                	test   eax,eax
c0018097:	75 0b                	jne    c00180a4 <Semaphore::tryAcquire()+0xa4>
c0018099:	fb                   	sti    
c001809a:	b0 01                	mov    al,0x1
c001809c:	83 c4 08             	add    esp,0x8
c001809f:	5b                   	pop    ebx
c00180a0:	c3                   	ret    
c00180a1:	8d 76 00             	lea    esi,[esi+0x0]
c00180a4:	b0 01                	mov    al,0x1
c00180a6:	83 c4 08             	add    esp,0x8
c00180a9:	5b                   	pop    ebx
c00180aa:	c3                   	ret    
c00180ab:	90                   	nop
c00180ac:	c7 05 40 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027940,0x0
c00180b6:	e8 b9 fe ff ff       	call   c0017f74 <schedule()>
c00180bb:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c00180c0:	48                   	dec    eax
c00180c1:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c00180c6:	85 c0                	test   eax,eax
c00180c8:	75 86                	jne    c0018050 <Semaphore::tryAcquire()+0x50>
c00180ca:	eb 8c                	jmp    c0018058 <Semaphore::tryAcquire()+0x58>

c00180cc <Semaphore::assertLocked(char const*)>:
c00180cc:	83 ec 0c             	sub    esp,0xc
c00180cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00180d3:	fa                   	cli    
c00180d4:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c00180da:	a1 44 79 02 c0       	mov    eax,ds:0xc0027944
c00180df:	8d 48 01             	lea    ecx,[eax+0x1]
c00180e2:	89 0d 44 79 02 c0    	mov    DWORD PTR ds:0xc0027944,ecx
c00180e8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00180ea:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00180ed:	7c 29                	jl     c0018118 <Semaphore::assertLocked(char const*)+0x4c>
c00180ef:	90                   	nop
c00180f0:	a3 44 79 02 c0       	mov    ds:0xc0027944,eax
c00180f5:	85 c0                	test   eax,eax
c00180f7:	75 0b                	jne    c0018104 <Semaphore::assertLocked(char const*)+0x38>
c00180f9:	a1 40 79 02 c0       	mov    eax,ds:0xc0027940
c00180fe:	85 c0                	test   eax,eax
c0018100:	75 2e                	jne    c0018130 <Semaphore::assertLocked(char const*)+0x64>
c0018102:	66 90                	xchg   ax,ax
c0018104:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c0018109:	48                   	dec    eax
c001810a:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c001810f:	75 03                	jne    c0018114 <Semaphore::assertLocked(char const*)+0x48>
c0018111:	fb                   	sti    
c0018112:	66 90                	xchg   ax,ax
c0018114:	83 c4 0c             	add    esp,0xc
c0018117:	c3                   	ret    
c0018118:	83 ec 0c             	sub    esp,0xc
c001811b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001811f:	e8 7d c2 ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c0018124:	a1 44 79 02 c0       	mov    eax,ds:0xc0027944
c0018129:	83 c4 10             	add    esp,0x10
c001812c:	48                   	dec    eax
c001812d:	eb c1                	jmp    c00180f0 <Semaphore::assertLocked(char const*)+0x24>
c001812f:	90                   	nop
c0018130:	c7 05 40 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027940,0x0
c001813a:	e8 35 fe ff ff       	call   c0017f74 <schedule()>
c001813f:	eb c3                	jmp    c0018104 <Semaphore::assertLocked(char const*)+0x38>
c0018141:	8d 76 00             	lea    esi,[esi+0x0]

c0018144 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0018144:	83 ec 0c             	sub    esp,0xc
c0018147:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001814c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018150:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018153:	e8 1c fe ff ff       	call   c0017f74 <schedule()>
c0018158:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c001815d:	48                   	dec    eax
c001815e:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c0018163:	75 03                	jne    c0018168 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0018165:	fb                   	sti    
c0018166:	66 90                	xchg   ax,ax
c0018168:	83 c4 0c             	add    esp,0xc
c001816b:	c3                   	ret    

c001816c <blockTask(TaskState)>:
c001816c:	83 ec 0c             	sub    esp,0xc
c001816f:	fa                   	cli    
c0018170:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c0018176:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001817a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001817f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018182:	e8 ed fd ff ff       	call   c0017f74 <schedule()>
c0018187:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c001818c:	48                   	dec    eax
c001818d:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c0018192:	75 04                	jne    c0018198 <blockTask(TaskState)+0x2c>
c0018194:	fb                   	sti    
c0018195:	8d 76 00             	lea    esi,[esi+0x0]
c0018198:	83 c4 0c             	add    esp,0xc
c001819b:	c3                   	ret    

c001819c <waitTask(int, int*, int)>:
c001819c:	83 ec 18             	sub    esp,0x18
c001819f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00181a4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00181a8:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00181ab:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00181af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00181b4:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00181b7:	6a 07                	push   0x7
c00181b9:	e8 ae ff ff ff       	call   c001816c <blockTask(TaskState)>
c00181be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00181c3:	83 c4 10             	add    esp,0x10
c00181c6:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00181c9:	85 d2                	test   edx,edx
c00181cb:	74 0b                	je     c00181d8 <waitTask(int, int*, int)+0x3c>
c00181cd:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00181d0:	89 02                	mov    DWORD PTR [edx],eax
c00181d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00181d7:	90                   	nop
c00181d8:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00181db:	83 c4 0c             	add    esp,0xc
c00181de:	c3                   	ret    
c00181df:	90                   	nop

c00181e0 <milliTenthSleepUntil(unsigned int)>:
c00181e0:	83 ec 0c             	sub    esp,0xc
c00181e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181e7:	39 05 ac 6a 02 c0    	cmp    DWORD PTR ds:0xc0026aac,eax
c00181ed:	76 05                	jbe    c00181f4 <milliTenthSleepUntil(unsigned int)+0x14>
c00181ef:	90                   	nop
c00181f0:	83 c4 0c             	add    esp,0xc
c00181f3:	c3                   	ret    
c00181f4:	fa                   	cli    
c00181f5:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c00181fb:	83 ec 08             	sub    esp,0x8
c00181fe:	ff 05 44 79 02 c0    	inc    DWORD PTR ds:0xc0027944
c0018204:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001820a:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c001820d:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0018213:	68 58 79 02 c0       	push   0xc0027958
c0018218:	e8 33 94 00 00       	call   c0021650 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001821d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018224:	e8 43 ff ff ff       	call   c001816c <blockTask(TaskState)>
c0018229:	a1 44 79 02 c0       	mov    eax,ds:0xc0027944
c001822e:	83 c4 10             	add    esp,0x10
c0018231:	48                   	dec    eax
c0018232:	a3 44 79 02 c0       	mov    ds:0xc0027944,eax
c0018237:	85 c0                	test   eax,eax
c0018239:	75 09                	jne    c0018244 <milliTenthSleepUntil(unsigned int)+0x64>
c001823b:	a1 40 79 02 c0       	mov    eax,ds:0xc0027940
c0018240:	85 c0                	test   eax,eax
c0018242:	75 14                	jne    c0018258 <milliTenthSleepUntil(unsigned int)+0x78>
c0018244:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c0018249:	48                   	dec    eax
c001824a:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c001824f:	75 9f                	jne    c00181f0 <milliTenthSleepUntil(unsigned int)+0x10>
c0018251:	fb                   	sti    
c0018252:	83 c4 0c             	add    esp,0xc
c0018255:	c3                   	ret    
c0018256:	66 90                	xchg   ax,ax
c0018258:	c7 05 40 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027940,0x0
c0018262:	e8 0d fd ff ff       	call   c0017f74 <schedule()>
c0018267:	eb db                	jmp    c0018244 <milliTenthSleepUntil(unsigned int)+0x64>
c0018269:	8d 76 00             	lea    esi,[esi+0x0]

c001826c <milliTenthSleep(unsigned int)>:
c001826c:	a1 ac 6a 02 c0       	mov    eax,ds:0xc0026aac
c0018271:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018275:	e9 66 ff ff ff       	jmp    c00181e0 <milliTenthSleepUntil(unsigned int)>
c001827a:	66 90                	xchg   ax,ax

c001827c <sleep(unsigned int)>:
c001827c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018280:	8d 04 80             	lea    eax,[eax+eax*4]
c0018283:	8d 04 80             	lea    eax,[eax+eax*4]
c0018286:	8d 04 80             	lea    eax,[eax+eax*4]
c0018289:	8d 04 80             	lea    eax,[eax+eax*4]
c001828c:	c1 e0 04             	shl    eax,0x4
c001828f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018293:	eb d7                	jmp    c001826c <milliTenthSleep(unsigned int)>
c0018295:	90                   	nop
c0018296:	66 90                	xchg   ax,ax

c0018298 <Semaphore::acquire()>:
c0018298:	83 ec 0c             	sub    esp,0xc
c001829b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001829f:	fa                   	cli    
c00182a0:	a1 44 79 02 c0       	mov    eax,ds:0xc0027944
c00182a5:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c00182ab:	8d 48 01             	lea    ecx,[eax+0x1]
c00182ae:	89 0d 44 79 02 c0    	mov    DWORD PTR ds:0xc0027944,ecx
c00182b4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00182b7:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c00182b9:	7d 2d                	jge    c00182e8 <Semaphore::acquire()+0x50>
c00182bb:	41                   	inc    ecx
c00182bc:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00182bf:	90                   	nop
c00182c0:	a3 44 79 02 c0       	mov    ds:0xc0027944,eax
c00182c5:	85 c0                	test   eax,eax
c00182c7:	75 0b                	jne    c00182d4 <Semaphore::acquire()+0x3c>
c00182c9:	a1 40 79 02 c0       	mov    eax,ds:0xc0027940
c00182ce:	85 c0                	test   eax,eax
c00182d0:	75 62                	jne    c0018334 <Semaphore::acquire()+0x9c>
c00182d2:	66 90                	xchg   ax,ax
c00182d4:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c00182d9:	48                   	dec    eax
c00182da:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c00182df:	75 03                	jne    c00182e4 <Semaphore::acquire()+0x4c>
c00182e1:	fb                   	sti    
c00182e2:	66 90                	xchg   ax,ax
c00182e4:	83 c4 0c             	add    esp,0xc
c00182e7:	c3                   	ret    
c00182e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00182ed:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00182f4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00182f7:	85 c9                	test   ecx,ecx
c00182f9:	74 4d                	je     c0018348 <Semaphore::acquire()+0xb0>
c00182fb:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00182fe:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018304:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0018307:	90                   	nop
c0018308:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001830d:	83 ec 0c             	sub    esp,0xc
c0018310:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0018313:	68 38 49 02 c0       	push   0xc0024938
c0018318:	e8 c2 47 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001831d:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0018324:	e8 43 fe ff ff       	call   c001816c <blockTask(TaskState)>
c0018329:	a1 44 79 02 c0       	mov    eax,ds:0xc0027944
c001832e:	83 c4 10             	add    esp,0x10
c0018331:	48                   	dec    eax
c0018332:	eb 8c                	jmp    c00182c0 <Semaphore::acquire()+0x28>
c0018334:	c7 05 40 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027940,0x0
c001833e:	e8 31 fc ff ff       	call   c0017f74 <schedule()>
c0018343:	eb 8f                	jmp    c00182d4 <Semaphore::acquire()+0x3c>
c0018345:	8d 76 00             	lea    esi,[esi+0x0]
c0018348:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001834d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0018350:	eb b6                	jmp    c0018308 <Semaphore::acquire()+0x70>
c0018352:	66 90                	xchg   ax,ax

c0018354 <taskReturned>:
c0018354:	83 ec 18             	sub    esp,0x18
c0018357:	68 58 49 02 c0       	push   0xc0024958
c001835c:	e8 40 c0 ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c0018361:	83 c4 10             	add    esp,0x10
c0018364:	83 ec 0c             	sub    esp,0xc
c0018367:	6a 02                	push   0x2
c0018369:	e8 fe fd ff ff       	call   c001816c <blockTask(TaskState)>
c001836e:	fa                   	cli    
c001836f:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c0018375:	e8 fa fb ff ff       	call   c0017f74 <schedule()>
c001837a:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c001837f:	83 c4 10             	add    esp,0x10
c0018382:	48                   	dec    eax
c0018383:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c0018388:	85 c0                	test   eax,eax
c001838a:	75 d8                	jne    c0018364 <taskReturned+0x10>
c001838c:	fb                   	sti    
c001838d:	eb d5                	jmp    c0018364 <taskReturned+0x10>
c001838f:	90                   	nop

c0018390 <Thr::processFromPID(int)>:
c0018390:	57                   	push   edi
c0018391:	56                   	push   esi
c0018392:	53                   	push   ebx
c0018393:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018397:	fa                   	cli    
c0018398:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c001839e:	83 ec 0c             	sub    esp,0xc
c00183a1:	68 64 79 02 c0       	push   0xc0027964
c00183a6:	e8 e5 91 00 00       	call   c0021590 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00183ab:	83 c4 10             	add    esp,0x10
c00183ae:	89 c7                	mov    edi,eax
c00183b0:	eb 16                	jmp    c00183c8 <Thr::processFromPID(int)+0x38>
c00183b2:	66 90                	xchg   ax,ax
c00183b4:	83 ec 0c             	sub    esp,0xc
c00183b7:	68 64 79 02 c0       	push   0xc0027964
c00183bc:	e8 cf 91 00 00       	call   c0021590 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00183c1:	83 c4 10             	add    esp,0x10
c00183c4:	39 f8                	cmp    eax,edi
c00183c6:	74 4c                	je     c0018414 <Thr::processFromPID(int)+0x84>
c00183c8:	83 ec 0c             	sub    esp,0xc
c00183cb:	68 64 79 02 c0       	push   0xc0027964
c00183d0:	e8 bb 91 00 00       	call   c0021590 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00183d5:	c7 04 24 64 79 02 c0 	mov    DWORD PTR [esp],0xc0027964
c00183dc:	89 c3                	mov    ebx,eax
c00183de:	e8 b5 91 00 00       	call   c0021598 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00183e3:	58                   	pop    eax
c00183e4:	5a                   	pop    edx
c00183e5:	53                   	push   ebx
c00183e6:	68 64 79 02 c0       	push   0xc0027964
c00183eb:	e8 60 92 00 00       	call   c0021650 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00183f0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00183f3:	83 c4 10             	add    esp,0x10
c00183f6:	39 30                	cmp    DWORD PTR [eax],esi
c00183f8:	75 ba                	jne    c00183b4 <Thr::processFromPID(int)+0x24>
c00183fa:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c00183ff:	48                   	dec    eax
c0018400:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c0018405:	74 09                	je     c0018410 <Thr::processFromPID(int)+0x80>
c0018407:	90                   	nop
c0018408:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001840b:	5b                   	pop    ebx
c001840c:	5e                   	pop    esi
c001840d:	5f                   	pop    edi
c001840e:	c3                   	ret    
c001840f:	90                   	nop
c0018410:	fb                   	sti    
c0018411:	eb f5                	jmp    c0018408 <Thr::processFromPID(int)+0x78>
c0018413:	90                   	nop
c0018414:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c0018419:	48                   	dec    eax
c001841a:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c001841f:	75 07                	jne    c0018428 <Thr::processFromPID(int)+0x98>
c0018421:	fb                   	sti    
c0018422:	5b                   	pop    ebx
c0018423:	5e                   	pop    esi
c0018424:	5f                   	pop    edi
c0018425:	c3                   	ret    
c0018426:	66 90                	xchg   ax,ax
c0018428:	5b                   	pop    ebx
c0018429:	31 c0                	xor    eax,eax
c001842b:	5e                   	pop    esi
c001842c:	5f                   	pop    edi
c001842d:	c3                   	ret    
c001842e:	66 90                	xchg   ax,ax

c0018430 <unblockTask(ThreadControlBlock*)>:
c0018430:	53                   	push   ebx
c0018431:	83 ec 08             	sub    esp,0x8
c0018434:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018438:	fa                   	cli    
c0018439:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c001843f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018442:	85 c0                	test   eax,eax
c0018444:	74 66                	je     c00184ac <unblockTask(ThreadControlBlock*)+0x7c>
c0018446:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018449:	48                   	dec    eax
c001844a:	74 38                	je     c0018484 <unblockTask(ThreadControlBlock*)+0x54>
c001844c:	83 ec 0c             	sub    esp,0xc
c001844f:	68 64 79 02 c0       	push   0xc0027964
c0018454:	e8 37 91 00 00       	call   c0021590 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018459:	83 c4 10             	add    esp,0x10
c001845c:	85 c0                	test   eax,eax
c001845e:	75 1c                	jne    c001847c <unblockTask(ThreadControlBlock*)+0x4c>
c0018460:	eb 5e                	jmp    c00184c0 <unblockTask(ThreadControlBlock*)+0x90>
c0018462:	66 90                	xchg   ax,ax
c0018464:	83 ec 08             	sub    esp,0x8
c0018467:	50                   	push   eax
c0018468:	68 64 79 02 c0       	push   0xc0027964
c001846d:	e8 ce 94 00 00       	call   c0021940 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0018472:	83 c4 10             	add    esp,0x10
c0018475:	85 c0                	test   eax,eax
c0018477:	74 47                	je     c00184c0 <unblockTask(ThreadControlBlock*)+0x90>
c0018479:	8d 76 00             	lea    esi,[esi+0x0]
c001847c:	39 c3                	cmp    ebx,eax
c001847e:	75 e4                	jne    c0018464 <unblockTask(ThreadControlBlock*)+0x34>
c0018480:	eb 12                	jmp    c0018494 <unblockTask(ThreadControlBlock*)+0x64>
c0018482:	66 90                	xchg   ax,ax
c0018484:	83 ec 0c             	sub    esp,0xc
c0018487:	68 da 48 02 c0       	push   0xc00248da
c001848c:	e8 4e 46 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c0018491:	83 c4 10             	add    esp,0x10
c0018494:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c0018499:	48                   	dec    eax
c001849a:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c001849f:	75 03                	jne    c00184a4 <unblockTask(ThreadControlBlock*)+0x74>
c00184a1:	fb                   	sti    
c00184a2:	66 90                	xchg   ax,ax
c00184a4:	83 c4 08             	add    esp,0x8
c00184a7:	5b                   	pop    ebx
c00184a8:	c3                   	ret    
c00184a9:	8d 76 00             	lea    esi,[esi+0x0]
c00184ac:	83 ec 0c             	sub    esp,0xc
c00184af:	68 c3 48 02 c0       	push   0xc00248c3
c00184b4:	e8 26 46 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c00184b9:	83 c4 10             	add    esp,0x10
c00184bc:	eb d6                	jmp    c0018494 <unblockTask(ThreadControlBlock*)+0x64>
c00184be:	66 90                	xchg   ax,ax
c00184c0:	83 ec 08             	sub    esp,0x8
c00184c3:	53                   	push   ebx
c00184c4:	68 64 79 02 c0       	push   0xc0027964
c00184c9:	e8 82 91 00 00       	call   c0021650 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00184ce:	83 c4 10             	add    esp,0x10
c00184d1:	eb c1                	jmp    c0018494 <unblockTask(ThreadControlBlock*)+0x64>
c00184d3:	90                   	nop

c00184d4 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00184d4:	55                   	push   ebp
c00184d5:	57                   	push   edi
c00184d6:	56                   	push   esi
c00184d7:	53                   	push   ebx
c00184d8:	83 ec 1c             	sub    esp,0x1c
c00184db:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00184df:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00184e2:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c00184e8:	85 ff                	test   edi,edi
c00184ea:	7e 24                	jle    c0018510 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c00184ec:	31 f6                	xor    esi,esi
c00184ee:	66 90                	xchg   ax,ax
c00184f0:	83 ec 0c             	sub    esp,0xc
c00184f3:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c00184fa:	46                   	inc    esi
c00184fb:	e8 d3 14 ff ff       	call   c00099d3 <free>
c0018500:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018503:	83 c4 10             	add    esp,0x10
c0018506:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c001850c:	7f e2                	jg     c00184f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c001850e:	66 90                	xchg   ax,ax
c0018510:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001851a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001851f:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0018522:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0018525:	d3 c0                	rol    eax,cl
c0018527:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c001852e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018531:	89 f7                	mov    edi,esi
c0018533:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c001853b:	0f 85 73 01 00 00    	jne    c00186b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0018541:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0018547:	85 ed                	test   ebp,ebp
c0018549:	74 1d                	je     c0018568 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c001854b:	83 ec 0c             	sub    esp,0xc
c001854e:	55                   	push   ebp
c001854f:	e8 f2 bb ff ff       	call   c0014146 <EnvVarContainer::~EnvVarContainer()>
c0018554:	59                   	pop    ecx
c0018555:	5e                   	pop    esi
c0018556:	6a 0c                	push   0xc
c0018558:	55                   	push   ebp
c0018559:	e8 a0 44 ff ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c001855e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018561:	83 c4 10             	add    esp,0x10
c0018564:	89 f7                	mov    edi,esi
c0018566:	66 90                	xchg   ax,ax
c0018568:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001856e:	85 c0                	test   eax,eax
c0018570:	0f 84 b2 00 00 00    	je     c0018628 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0018576:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0018579:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001857d:	31 c9                	xor    ecx,ecx
c001857f:	eb 17                	jmp    c0018598 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0018581:	8d 76 00             	lea    esi,[esi+0x0]
c0018584:	41                   	inc    ecx
c0018585:	83 f9 10             	cmp    ecx,0x10
c0018588:	0f 84 9a 00 00 00    	je     c0018628 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c001858e:	66 90                	xchg   ax,ax
c0018590:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018596:	66 90                	xchg   ax,ax
c0018598:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001859f:	d3 fa                	sar    edx,cl
c00185a1:	83 e2 01             	and    edx,0x1
c00185a4:	74 de                	je     c0018584 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00185a6:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c00185a9:	01 d2                	add    edx,edx
c00185ab:	01 ca                	add    edx,ecx
c00185ad:	8d 14 92             	lea    edx,[edx+edx*4]
c00185b0:	01 d0                	add    eax,edx
c00185b2:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00185b8:	83 fd 07             	cmp    ebp,0x7
c00185bb:	75 c7                	jne    c0018584 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00185bd:	05 40 02 00 00       	add    eax,0x240
c00185c2:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00185c5:	83 fd ff             	cmp    ebp,0xffffffff
c00185c8:	0f 8c ee 00 00 00    	jl     c00186bc <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c00185ce:	0f 84 ac 01 00 00    	je     c0018780 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c00185d4:	85 ed                	test   ebp,ebp
c00185d6:	0f 84 90 01 00 00    	je     c001876c <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c00185dc:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00185de:	75 a4                	jne    c0018584 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00185e0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00185e6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00185ea:	01 d0                	add    eax,edx
c00185ec:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00185f0:	83 ec 0c             	sub    esp,0xc
c00185f3:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00185f9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00185fc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018602:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0018609:	50                   	push   eax
c001860a:	e8 21 fe ff ff       	call   c0018430 <unblockTask(ThreadControlBlock*)>
c001860f:	83 c4 10             	add    esp,0x10
c0018612:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018615:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018619:	89 f7                	mov    edi,esi
c001861b:	41                   	inc    ecx
c001861c:	83 f9 10             	cmp    ecx,0x10
c001861f:	0f 85 6b ff ff ff    	jne    c0018590 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0018625:	8d 76 00             	lea    esi,[esi+0x0]
c0018628:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001862e:	85 c0                	test   eax,eax
c0018630:	74 62                	je     c0018694 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0018632:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0018638:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001863e:	74 54                	je     c0018694 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0018640:	83 ec 0c             	sub    esp,0xc
c0018643:	68 64 79 02 c0       	push   0xc0027964
c0018648:	e8 43 8f 00 00       	call   c0021590 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001864d:	c7 04 24 64 79 02 c0 	mov    DWORD PTR [esp],0xc0027964
c0018654:	89 c7                	mov    edi,eax
c0018656:	e8 19 8f 00 00       	call   c0021574 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001865b:	83 c4 10             	add    esp,0x10
c001865e:	84 c0                	test   al,al
c0018660:	0f 84 ce 00 00 00    	je     c0018734 <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c0018666:	66 90                	xchg   ax,ax
c0018668:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001866b:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0018671:	85 d2                	test   edx,edx
c0018673:	74 0f                	je     c0018684 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c0018675:	83 ec 0c             	sub    esp,0xc
c0018678:	8b 02                	mov    eax,DWORD PTR [edx]
c001867a:	52                   	push   edx
c001867b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001867e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018681:	83 c4 10             	add    esp,0x10
c0018684:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001868e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0018691:	8d 76 00             	lea    esi,[esi+0x0]
c0018694:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001869a:	85 db                	test   ebx,ebx
c001869c:	74 16                	je     c00186b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c001869e:	83 ec 0c             	sub    esp,0xc
c00186a1:	53                   	push   ebx
c00186a2:	e8 91 35 ff ff       	call   c000bc38 <VAS::~VAS()>
c00186a7:	58                   	pop    eax
c00186a8:	5a                   	pop    edx
c00186a9:	6a 14                	push   0x14
c00186ab:	53                   	push   ebx
c00186ac:	e8 4d 43 ff ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c00186b1:	83 c4 10             	add    esp,0x10
c00186b4:	83 c4 1c             	add    esp,0x1c
c00186b7:	5b                   	pop    ebx
c00186b8:	5e                   	pop    esi
c00186b9:	5f                   	pop    edi
c00186ba:	5d                   	pop    ebp
c00186bb:	c3                   	ret    
c00186bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00186c0:	83 ec 0c             	sub    esp,0xc
c00186c3:	68 8c 49 02 c0       	push   0xc002498c
c00186c8:	e8 d4 bc ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c00186cd:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00186d0:	83 c4 10             	add    esp,0x10
c00186d3:	89 f7                	mov    edi,esi
c00186d5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00186d9:	e9 a6 fe ff ff       	jmp    c0018584 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00186de:	66 90                	xchg   ax,ax
c00186e0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00186e6:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00186ec:	75 1e                	jne    c001870c <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c00186ee:	83 ec 0c             	sub    esp,0xc
c00186f1:	68 f4 49 02 c0       	push   0xc00249f4
c00186f6:	e8 e4 43 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c00186fb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018702:	e8 65 fa ff ff       	call   c001816c <blockTask(TaskState)>
c0018707:	83 c4 10             	add    esp,0x10
c001870a:	66 90                	xchg   ax,ax
c001870c:	83 ec 08             	sub    esp,0x8
c001870f:	56                   	push   esi
c0018710:	68 64 79 02 c0       	push   0xc0027964
c0018715:	e8 36 8f 00 00       	call   c0021650 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001871a:	c7 04 24 64 79 02 c0 	mov    DWORD PTR [esp],0xc0027964
c0018721:	e8 6a 8e 00 00       	call   c0021590 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018726:	83 c4 10             	add    esp,0x10
c0018729:	39 f8                	cmp    eax,edi
c001872b:	0f 84 37 ff ff ff    	je     c0018668 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c0018731:	8d 76 00             	lea    esi,[esi+0x0]
c0018734:	83 ec 0c             	sub    esp,0xc
c0018737:	68 64 79 02 c0       	push   0xc0027964
c001873c:	e8 4f 8e 00 00       	call   c0021590 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018741:	c7 04 24 64 79 02 c0 	mov    DWORD PTR [esp],0xc0027964
c0018748:	89 c6                	mov    esi,eax
c001874a:	e8 49 8e 00 00       	call   c0021598 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001874f:	83 c4 10             	add    esp,0x10
c0018752:	39 f3                	cmp    ebx,esi
c0018754:	74 b6                	je     c001870c <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018756:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0018759:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001875c:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0018762:	75 a8                	jne    c001870c <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018764:	e9 77 ff ff ff       	jmp    c00186e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c0018769:	8d 76 00             	lea    esi,[esi+0x0]
c001876c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018770:	83 ec 0c             	sub    esp,0xc
c0018773:	68 c0 49 02 c0       	push   0xc00249c0
c0018778:	e9 4b ff ff ff       	jmp    c00186c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001877d:	8d 76 00             	lea    esi,[esi+0x0]
c0018780:	8b 36                	mov    esi,DWORD PTR [esi]
c0018782:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018786:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0018789:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001878c:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0018792:	01 d7                	add    edi,edx
c0018794:	89 f8                	mov    eax,edi
c0018796:	e9 51 fe ff ff       	jmp    c00185ec <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c001879b:	90                   	nop

c001879c <cleanerTaskFunction(void*)>:
c001879c:	53                   	push   ebx
c001879d:	83 ec 08             	sub    esp,0x8
c00187a0:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c00187a5:	48                   	dec    eax
c00187a6:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c00187ab:	75 03                	jne    c00187b0 <cleanerTaskFunction(void*)+0x14>
c00187ad:	fb                   	sti    
c00187ae:	66 90                	xchg   ax,ax
c00187b0:	fa                   	cli    
c00187b1:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c00187b6:	80 3d 2c 79 02 c0 00 	cmp    BYTE PTR ds:0xc002792c,0x0
c00187bd:	8d 50 01             	lea    edx,[eax+0x1]
c00187c0:	89 15 48 79 02 c0    	mov    DWORD PTR ds:0xc0027948,edx
c00187c6:	0f 84 ac 00 00 00    	je     c0018878 <cleanerTaskFunction(void*)+0xdc>
c00187cc:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c00187d1:	85 c0                	test   eax,eax
c00187d3:	75 03                	jne    c00187d8 <cleanerTaskFunction(void*)+0x3c>
c00187d5:	fb                   	sti    
c00187d6:	66 90                	xchg   ax,ax
c00187d8:	c6 05 2c 79 02 c0 00 	mov    BYTE PTR ds:0xc002792c,0x0
c00187df:	fa                   	cli    
c00187e0:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c00187e6:	ff 05 44 79 02 c0    	inc    DWORD PTR ds:0xc0027944
c00187ec:	fa                   	cli    
c00187ed:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c00187f3:	eb 2b                	jmp    c0018820 <cleanerTaskFunction(void*)+0x84>
c00187f5:	8d 76 00             	lea    esi,[esi+0x0]
c00187f8:	83 ec 0c             	sub    esp,0xc
c00187fb:	68 4c 79 02 c0       	push   0xc002794c
c0018800:	e8 8b 8d 00 00       	call   c0021590 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018805:	c7 04 24 4c 79 02 c0 	mov    DWORD PTR [esp],0xc002794c
c001880c:	89 c3                	mov    ebx,eax
c001880e:	e8 85 8d 00 00       	call   c0021598 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018813:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018816:	e8 b9 fc ff ff       	call   c00184d4 <cleanupTerminatedTask(ThreadControlBlock*)>
c001881b:	83 c4 10             	add    esp,0x10
c001881e:	66 90                	xchg   ax,ax
c0018820:	83 ec 0c             	sub    esp,0xc
c0018823:	68 4c 79 02 c0       	push   0xc002794c
c0018828:	e8 47 8d 00 00       	call   c0021574 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001882d:	83 c4 10             	add    esp,0x10
c0018830:	84 c0                	test   al,al
c0018832:	74 c4                	je     c00187f8 <cleanerTaskFunction(void*)+0x5c>
c0018834:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c0018839:	48                   	dec    eax
c001883a:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c001883f:	75 03                	jne    c0018844 <cleanerTaskFunction(void*)+0xa8>
c0018841:	fb                   	sti    
c0018842:	66 90                	xchg   ax,ax
c0018844:	a1 44 79 02 c0       	mov    eax,ds:0xc0027944
c0018849:	48                   	dec    eax
c001884a:	a3 44 79 02 c0       	mov    ds:0xc0027944,eax
c001884f:	0f 85 4b ff ff ff    	jne    c00187a0 <cleanerTaskFunction(void*)+0x4>
c0018855:	a1 40 79 02 c0       	mov    eax,ds:0xc0027940
c001885a:	85 c0                	test   eax,eax
c001885c:	0f 84 3e ff ff ff    	je     c00187a0 <cleanerTaskFunction(void*)+0x4>
c0018862:	c7 05 40 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027940,0x0
c001886c:	e8 03 f7 ff ff       	call   c0017f74 <schedule()>
c0018871:	e9 2a ff ff ff       	jmp    c00187a0 <cleanerTaskFunction(void*)+0x4>
c0018876:	66 90                	xchg   ax,ax
c0018878:	83 ec 0c             	sub    esp,0xc
c001887b:	6a 02                	push   0x2
c001887d:	e8 c2 f8 ff ff       	call   c0018144 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018882:	83 c4 10             	add    esp,0x10
c0018885:	e9 4e ff ff ff       	jmp    c00187d8 <cleanerTaskFunction(void*)+0x3c>
c001888a:	66 90                	xchg   ax,ax

c001888c <terminateTask(int)>:
c001888c:	83 ec 14             	sub    esp,0x14
c001888f:	fa                   	cli    
c0018890:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c0018896:	ff 05 44 79 02 c0    	inc    DWORD PTR ds:0xc0027944
c001889c:	fa                   	cli    
c001889d:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c00188a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00188a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00188ac:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00188af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00188b4:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00188b7:	50                   	push   eax
c00188b8:	68 4c 79 02 c0       	push   0xc002794c
c00188bd:	e8 8e 8d 00 00       	call   c0021650 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00188c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00188c7:	83 c4 10             	add    esp,0x10
c00188ca:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00188d1:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c00188d6:	85 c0                	test   eax,eax
c00188d8:	74 5e                	je     c0018938 <terminateTask(int)+0xac>
c00188da:	83 ec 0c             	sub    esp,0xc
c00188dd:	c6 05 2c 79 02 c0 01 	mov    BYTE PTR ds:0xc002792c,0x1
c00188e4:	50                   	push   eax
c00188e5:	e8 46 fb ff ff       	call   c0018430 <unblockTask(ThreadControlBlock*)>
c00188ea:	83 c4 10             	add    esp,0x10
c00188ed:	8d 76 00             	lea    esi,[esi+0x0]
c00188f0:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c00188f5:	48                   	dec    eax
c00188f6:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c00188fb:	75 03                	jne    c0018900 <terminateTask(int)+0x74>
c00188fd:	fb                   	sti    
c00188fe:	66 90                	xchg   ax,ax
c0018900:	a1 44 79 02 c0       	mov    eax,ds:0xc0027944
c0018905:	48                   	dec    eax
c0018906:	a3 44 79 02 c0       	mov    ds:0xc0027944,eax
c001890b:	75 0b                	jne    c0018918 <terminateTask(int)+0x8c>
c001890d:	83 3d 40 79 02 c0 00 	cmp    DWORD PTR ds:0xc0027940,0x0
c0018914:	75 36                	jne    c001894c <terminateTask(int)+0xc0>
c0018916:	66 90                	xchg   ax,ax
c0018918:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c001891d:	48                   	dec    eax
c001891e:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c0018923:	75 03                	jne    c0018928 <terminateTask(int)+0x9c>
c0018925:	fb                   	sti    
c0018926:	66 90                	xchg   ax,ax
c0018928:	fa                   	cli    
c0018929:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c001892f:	90                   	nop
c0018930:	e8 3f f6 ff ff       	call   c0017f74 <schedule()>
c0018935:	eb e1                	jmp    c0018918 <terminateTask(int)+0x8c>
c0018937:	90                   	nop
c0018938:	83 ec 0c             	sub    esp,0xc
c001893b:	68 f1 48 02 c0       	push   0xc00248f1
c0018940:	e8 9a 41 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c0018945:	83 c4 10             	add    esp,0x10
c0018948:	eb a6                	jmp    c00188f0 <terminateTask(int)+0x64>
c001894a:	66 90                	xchg   ax,ax
c001894c:	c7 05 40 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027940,0x0
c0018956:	eb d8                	jmp    c0018930 <terminateTask(int)+0xa4>

c0018958 <Thr::terminateFromIRQ(int)>:
c0018958:	83 ec 18             	sub    esp,0x18
c001895b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001895f:	e8 28 ff ff ff       	call   c001888c <terminateTask(int)>

c0018964 <Semaphore::release()>:
c0018964:	83 ec 0c             	sub    esp,0xc
c0018967:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001896b:	fa                   	cli    
c001896c:	a1 44 79 02 c0       	mov    eax,ds:0xc0027944
c0018971:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c0018977:	8d 48 01             	lea    ecx,[eax+0x1]
c001897a:	89 0d 44 79 02 c0    	mov    DWORD PTR ds:0xc0027944,ecx
c0018980:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0018983:	85 c9                	test   ecx,ecx
c0018985:	74 41                	je     c00189c8 <Semaphore::release()+0x64>
c0018987:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001898a:	83 ec 0c             	sub    esp,0xc
c001898d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0018990:	51                   	push   ecx
c0018991:	e8 9a fa ff ff       	call   c0018430 <unblockTask(ThreadControlBlock*)>
c0018996:	a1 44 79 02 c0       	mov    eax,ds:0xc0027944
c001899b:	83 c4 10             	add    esp,0x10
c001899e:	48                   	dec    eax
c001899f:	90                   	nop
c00189a0:	a3 44 79 02 c0       	mov    ds:0xc0027944,eax
c00189a5:	85 c0                	test   eax,eax
c00189a7:	75 0b                	jne    c00189b4 <Semaphore::release()+0x50>
c00189a9:	a1 40 79 02 c0       	mov    eax,ds:0xc0027940
c00189ae:	85 c0                	test   eax,eax
c00189b0:	75 1e                	jne    c00189d0 <Semaphore::release()+0x6c>
c00189b2:	66 90                	xchg   ax,ax
c00189b4:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c00189b9:	48                   	dec    eax
c00189ba:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c00189bf:	75 03                	jne    c00189c4 <Semaphore::release()+0x60>
c00189c1:	fb                   	sti    
c00189c2:	66 90                	xchg   ax,ax
c00189c4:	83 c4 0c             	add    esp,0xc
c00189c7:	c3                   	ret    
c00189c8:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c00189cb:	eb d3                	jmp    c00189a0 <Semaphore::release()+0x3c>
c00189cd:	8d 76 00             	lea    esi,[esi+0x0]
c00189d0:	c7 05 40 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027940,0x0
c00189da:	e8 95 f5 ff ff       	call   c0017f74 <schedule()>
c00189df:	eb d3                	jmp    c00189b4 <Semaphore::release()+0x50>
c00189e1:	8d 76 00             	lea    esi,[esi+0x0]

c00189e4 <__static_initialization_and_destruction_0(int, int)>:
c00189e4:	83 ec 0c             	sub    esp,0xc
c00189e7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00189ec:	0f 85 8e 00 00 00    	jne    c0018a80 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00189f2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00189fa:	0f 85 80 00 00 00    	jne    c0018a80 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0018a00:	83 ec 0c             	sub    esp,0xc
c0018a03:	68 64 79 02 c0       	push   0xc0027964
c0018a08:	e8 ef 8e 00 00       	call   c00218fc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018a0d:	83 c4 10             	add    esp,0x10
c0018a10:	83 ec 04             	sub    esp,0x4
c0018a13:	68 e8 56 02 c0       	push   0xc00256e8
c0018a18:	68 64 79 02 c0       	push   0xc0027964
c0018a1d:	68 ac 18 02 c0       	push   0xc00218ac
c0018a22:	e8 51 3f ff ff       	call   c000c978 <__cxa_atexit>
c0018a27:	83 c4 10             	add    esp,0x10
c0018a2a:	83 ec 0c             	sub    esp,0xc
c0018a2d:	68 58 79 02 c0       	push   0xc0027958
c0018a32:	e8 c5 8e 00 00       	call   c00218fc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018a37:	83 c4 10             	add    esp,0x10
c0018a3a:	83 ec 04             	sub    esp,0x4
c0018a3d:	68 e8 56 02 c0       	push   0xc00256e8
c0018a42:	68 58 79 02 c0       	push   0xc0027958
c0018a47:	68 ac 18 02 c0       	push   0xc00218ac
c0018a4c:	e8 27 3f ff ff       	call   c000c978 <__cxa_atexit>
c0018a51:	83 c4 10             	add    esp,0x10
c0018a54:	83 ec 0c             	sub    esp,0xc
c0018a57:	68 4c 79 02 c0       	push   0xc002794c
c0018a5c:	e8 9b 8e 00 00       	call   c00218fc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018a61:	83 c4 10             	add    esp,0x10
c0018a64:	83 ec 04             	sub    esp,0x4
c0018a67:	68 e8 56 02 c0       	push   0xc00256e8
c0018a6c:	68 4c 79 02 c0       	push   0xc002794c
c0018a71:	68 ac 18 02 c0       	push   0xc00218ac
c0018a76:	e8 fd 3e ff ff       	call   c000c978 <__cxa_atexit>
c0018a7b:	83 c4 10             	add    esp,0x10
c0018a7e:	66 90                	xchg   ax,ax
c0018a80:	90                   	nop
c0018a81:	83 c4 0c             	add    esp,0xc
c0018a84:	c3                   	ret    
c0018a85:	8d 76 00             	lea    esi,[esi+0x0]

c0018a88 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0018a88:	83 ec 0c             	sub    esp,0xc
c0018a8b:	83 ec 08             	sub    esp,0x8
c0018a8e:	68 ff ff 00 00       	push   0xffff
c0018a93:	6a 01                	push   0x1
c0018a95:	e8 4a ff ff ff       	call   c00189e4 <__static_initialization_and_destruction_0(int, int)>
c0018a9a:	83 c4 10             	add    esp,0x10
c0018a9d:	83 c4 0c             	add    esp,0xc
c0018aa0:	c3                   	ret    

c0018aa1 <Vm::inbv(unsigned short)>:
c0018aa1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018aa5:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018aaa:	75 06                	jne    c0018ab2 <Vm::inbv(unsigned short)+0x11>
c0018aac:	a0 ac 79 02 c0       	mov    al,ds:0xc00279ac
c0018ab1:	c3                   	ret    
c0018ab2:	ec                   	in     al,dx
c0018ab3:	c3                   	ret    

c0018ab4 <Vm::outbv(unsigned short, unsigned char)>:
c0018ab4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018ab8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018abc:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018ac1:	75 25                	jne    c0018ae8 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0018ac3:	8b 0d ac 79 02 c0    	mov    ecx,DWORD PTR ds:0xc00279ac
c0018ac9:	8d 51 01             	lea    edx,[ecx+0x1]
c0018acc:	88 81 c0 79 02 c0    	mov    BYTE PTR [ecx-0x3ffd8640],al
c0018ad2:	89 15 ac 79 02 c0    	mov    DWORD PTR ds:0xc00279ac,edx
c0018ad8:	83 fa 20             	cmp    edx,0x20
c0018adb:	75 0c                	jne    c0018ae9 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0018add:	c7 05 ac 79 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00279ac,0x1f
c0018ae7:	c3                   	ret    
c0018ae8:	ee                   	out    dx,al
c0018ae9:	c3                   	ret    

c0018aea <Vm::realToLinear(unsigned short, unsigned short)>:
c0018aea:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018aef:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018af4:	c1 e0 04             	shl    eax,0x4
c0018af7:	01 d0                	add    eax,edx
c0018af9:	c3                   	ret    

c0018afa <Vm::getSegment(unsigned int)>:
c0018afa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018afe:	c1 e8 10             	shr    eax,0x10
c0018b01:	c3                   	ret    

c0018b02 <Vm::getOffset(unsigned int)>:
c0018b02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b06:	c3                   	ret    

c0018b07 <Vm::mainloop2()>:
c0018b07:	83 ec 18             	sub    esp,0x18
c0018b0a:	fa                   	cli    
c0018b0b:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c0018b11:	6a 02                	push   0x2
c0018b13:	c6 05 a5 79 02 c0 01 	mov    BYTE PTR ds:0xc00279a5,0x1
c0018b1a:	e8 25 f6 ff ff       	call   c0018144 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018b1f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018b24:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0018b28:	52                   	push   edx
c0018b29:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0018b2d:	52                   	push   edx
c0018b2e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0018b32:	52                   	push   edx
c0018b33:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0018b37:	50                   	push   eax
c0018b38:	e8 f2 76 fe ff       	call   c000022f <goToVM86>
c0018b3d:	83 c4 2c             	add    esp,0x2c
c0018b40:	c3                   	ret    

c0018b41 <Vm::mainVm8086Loop(void*)>:
c0018b41:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c0018b46:	48                   	dec    eax
c0018b47:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c0018b4c:	75 01                	jne    c0018b4f <Vm::mainVm8086Loop(void*)+0xe>
c0018b4e:	fb                   	sti    
c0018b4f:	eb b6                	jmp    c0018b07 <Vm::mainloop2()>

c0018b51 <Vm::mainloop3(unsigned long)>:
c0018b51:	83 ec 18             	sub    esp,0x18
c0018b54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018b58:	fa                   	cli    
c0018b59:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c0018b5f:	6a 02                	push   0x2
c0018b61:	c6 05 a4 79 02 c0 01 	mov    BYTE PTR ds:0xc00279a4,0x1
c0018b68:	a3 a0 79 02 c0       	mov    ds:0xc00279a0,eax
c0018b6d:	e8 d2 f5 ff ff       	call   c0018144 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018b72:	83 c4 1c             	add    esp,0x1c
c0018b75:	eb 90                	jmp    c0018b07 <Vm::mainloop2()>

c0018b77 <Vm::initialise8086()>:
c0018b77:	83 ec 0c             	sub    esp,0xc
c0018b7a:	68 80 00 00 00       	push   0x80
c0018b7f:	6a 00                	push   0x0
c0018b81:	68 41 8b 01 c0       	push   0xc0018b41
c0018b86:	ff 35 70 79 02 c0    	push   DWORD PTR ds:0xc0027970
c0018b8c:	e8 c7 f1 ff ff       	call   c0017d58 <Process::createThread(void (*)(void*), void*, int)>
c0018b91:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0018b98:	a3 a8 79 02 c0       	mov    ds:0xc00279a8,eax
c0018b9d:	68 00 01 00 00       	push   0x100
c0018ba2:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c0018ba7:	6a 00                	push   0x0
c0018ba9:	6a 00                	push   0x0
c0018bab:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0018bb1:	e8 f4 34 ff ff       	call   c000c0aa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018bb6:	83 c4 2c             	add    esp,0x2c
c0018bb9:	c3                   	ret    

c0018bba <Vm::finish8086()>:
c0018bba:	53                   	push   ebx
c0018bbb:	83 ec 08             	sub    esp,0x8
c0018bbe:	fa                   	cli    
c0018bbf:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c0018bc5:	80 3d a4 79 02 c0 00 	cmp    BYTE PTR ds:0xc00279a4,0x0
c0018bcc:	75 15                	jne    c0018be3 <Vm::finish8086()+0x29>
c0018bce:	e8 a1 f3 ff ff       	call   c0017f74 <schedule()>
c0018bd3:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c0018bd8:	48                   	dec    eax
c0018bd9:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c0018bde:	75 de                	jne    c0018bbe <Vm::finish8086()+0x4>
c0018be0:	fb                   	sti    
c0018be1:	eb db                	jmp    c0018bbe <Vm::finish8086()+0x4>
c0018be3:	83 ec 0c             	sub    esp,0xc
c0018be6:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c0018bec:	ff 35 a8 79 02 c0    	push   DWORD PTR ds:0xc00279a8
c0018bf2:	c6 05 a4 79 02 c0 00 	mov    BYTE PTR ds:0xc00279a4,0x0
c0018bf9:	e8 32 f8 ff ff       	call   c0018430 <unblockTask(ThreadControlBlock*)>
c0018bfe:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c0018c03:	83 c4 10             	add    esp,0x10
c0018c06:	8d 50 ff             	lea    edx,[eax-0x1]
c0018c09:	89 15 48 79 02 c0    	mov    DWORD PTR ds:0xc0027948,edx
c0018c0f:	85 d2                	test   edx,edx
c0018c11:	75 01                	jne    c0018c14 <Vm::finish8086()+0x5a>
c0018c13:	fb                   	sti    
c0018c14:	89 d8                	mov    eax,ebx
c0018c16:	83 c4 08             	add    esp,0x8
c0018c19:	5b                   	pop    ebx
c0018c1a:	c3                   	ret    

c0018c1b <Vm::getOutput8086(unsigned char*)>:
c0018c1b:	57                   	push   edi
c0018c1c:	8b 0d ac 79 02 c0    	mov    ecx,DWORD PTR ds:0xc00279ac
c0018c22:	56                   	push   esi
c0018c23:	be c0 79 02 c0       	mov    esi,0xc00279c0
c0018c28:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018c2c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018c2e:	a1 ac 79 02 c0       	mov    eax,ds:0xc00279ac
c0018c33:	5e                   	pop    esi
c0018c34:	c7 05 ac 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00279ac,0x0
c0018c3e:	5f                   	pop    edi
c0018c3f:	c3                   	ret    

c0018c40 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0018c40:	55                   	push   ebp
c0018c41:	57                   	push   edi
c0018c42:	56                   	push   esi
c0018c43:	53                   	push   ebx
c0018c44:	83 ec 2c             	sub    esp,0x2c
c0018c47:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0018c4b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0018c4f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0018c53:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0018c57:	fa                   	cli    
c0018c58:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c0018c5e:	0f b6 35 a5 79 02 c0 	movzx  esi,BYTE PTR ds:0xc00279a5
c0018c65:	89 f0                	mov    eax,esi
c0018c67:	84 c0                	test   al,al
c0018c69:	75 1d                	jne    c0018c88 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0018c6b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018c6f:	e8 00 f3 ff ff       	call   c0017f74 <schedule()>
c0018c74:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c0018c79:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c7d:	48                   	dec    eax
c0018c7e:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c0018c83:	75 d2                	jne    c0018c57 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0018c85:	fb                   	sti    
c0018c86:	eb cf                	jmp    c0018c57 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0018c88:	a1 a8 79 02 c0       	mov    eax,ds:0xc00279a8
c0018c8d:	c7 05 ac 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00279ac,0x0
c0018c97:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0018c9b:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0018c9f:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0018ca3:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0018ca7:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0018cab:	50                   	push   eax
c0018cac:	6a 20                	push   0x20
c0018cae:	6a 00                	push   0x0
c0018cb0:	68 c0 79 02 c0       	push   0xc00279c0
c0018cb5:	e8 ca 79 fe ff       	call   c0000684 <memset>
c0018cba:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018cc1:	e8 fd 0c ff ff       	call   c00099c3 <malloc>
c0018cc6:	83 c4 0c             	add    esp,0xc
c0018cc9:	89 c3                	mov    ebx,eax
c0018ccb:	ff 35 70 79 02 c0    	push   DWORD PTR ds:0xc0027970
c0018cd1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018cd5:	50                   	push   eax
c0018cd6:	e8 6f 43 ff ff       	call   c000d04a <File::File(char const*, Process*)>
c0018cdb:	83 c4 10             	add    esp,0x10
c0018cde:	85 db                	test   ebx,ebx
c0018ce0:	75 0a                	jne    c0018cec <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0018ce2:	83 ec 0c             	sub    esp,0xc
c0018ce5:	68 1c 4a 02 c0       	push   0xc0024a1c
c0018cea:	eb 3e                	jmp    c0018d2a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0018cec:	50                   	push   eax
c0018ced:	8d 44 24 17          	lea    eax,[esp+0x17]
c0018cf1:	50                   	push   eax
c0018cf2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018cf6:	50                   	push   eax
c0018cf7:	53                   	push   ebx
c0018cf8:	e8 5d 46 ff ff       	call   c000d35a <File::stat(unsigned long long*, bool*)>
c0018cfd:	83 c4 10             	add    esp,0x10
c0018d00:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0018d05:	74 0a                	je     c0018d11 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0018d07:	83 ec 0c             	sub    esp,0xc
c0018d0a:	68 30 4a 02 c0       	push   0xc0024a30
c0018d0f:	eb 19                	jmp    c0018d2a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0018d11:	51                   	push   ecx
c0018d12:	51                   	push   ecx
c0018d13:	6a 01                	push   0x1
c0018d15:	53                   	push   ebx
c0018d16:	e8 93 43 ff ff       	call   c000d0ae <File::open(FileOpenMode)>
c0018d1b:	83 c4 10             	add    esp,0x10
c0018d1e:	85 c0                	test   eax,eax
c0018d20:	74 24                	je     c0018d46 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0018d22:	83 ec 0c             	sub    esp,0xc
c0018d25:	68 49 4a 02 c0       	push   0xc0024a49
c0018d2a:	e8 72 b6 ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c0018d2f:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c0018d34:	83 c4 10             	add    esp,0x10
c0018d37:	48                   	dec    eax
c0018d38:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c0018d3d:	85 c0                	test   eax,eax
c0018d3f:	75 01                	jne    c0018d42 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0018d41:	fb                   	sti    
c0018d42:	31 f6                	xor    esi,esi
c0018d44:	eb 58                	jmp    c0018d9e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0018d46:	0f b7 ed             	movzx  ebp,bp
c0018d49:	50                   	push   eax
c0018d4a:	0f b7 ff             	movzx  edi,di
c0018d4d:	50                   	push   eax
c0018d4e:	55                   	push   ebp
c0018d4f:	57                   	push   edi
c0018d50:	e8 95 fd ff ff       	call   c0018aea <Vm::realToLinear(unsigned short, unsigned short)>
c0018d55:	5a                   	pop    edx
c0018d56:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018d58:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0018d5c:	51                   	push   ecx
c0018d5d:	50                   	push   eax
c0018d5e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018d62:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018d66:	53                   	push   ebx
c0018d67:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018d6a:	83 c4 14             	add    esp,0x14
c0018d6d:	53                   	push   ebx
c0018d6e:	e8 99 43 ff ff       	call   c000d10c <File::close()>
c0018d73:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c0018d78:	83 c4 10             	add    esp,0x10
c0018d7b:	48                   	dec    eax
c0018d7c:	c6 05 a5 79 02 c0 00 	mov    BYTE PTR ds:0xc00279a5,0x0
c0018d83:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c0018d88:	85 c0                	test   eax,eax
c0018d8a:	75 01                	jne    c0018d8d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0018d8c:	fb                   	sti    
c0018d8d:	83 ec 0c             	sub    esp,0xc
c0018d90:	ff 35 a8 79 02 c0    	push   DWORD PTR ds:0xc00279a8
c0018d96:	e8 95 f6 ff ff       	call   c0018430 <unblockTask(ThreadControlBlock*)>
c0018d9b:	83 c4 10             	add    esp,0x10
c0018d9e:	83 c4 2c             	add    esp,0x2c
c0018da1:	89 f0                	mov    eax,esi
c0018da3:	5b                   	pop    ebx
c0018da4:	5e                   	pop    esi
c0018da5:	5f                   	pop    edi
c0018da6:	5d                   	pop    ebp
c0018da7:	c3                   	ret    

c0018da8 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0018da8:	57                   	push   edi
c0018da9:	56                   	push   esi
c0018daa:	53                   	push   ebx
c0018dab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018daf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018db3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018db7:	83 e8 06             	sub    eax,0x6
c0018dba:	0f b7 c0             	movzx  eax,ax
c0018dbd:	50                   	push   eax
c0018dbe:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0018dc3:	50                   	push   eax
c0018dc4:	e8 21 fd ff ff       	call   c0018aea <Vm::realToLinear(unsigned short, unsigned short)>
c0018dc9:	5a                   	pop    edx
c0018dca:	5e                   	pop    esi
c0018dcb:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0018dce:	8d 56 fa             	lea    edx,[esi-0x6]
c0018dd1:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018dd7:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0018dda:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0018ddd:	83 c2 02             	add    edx,0x2
c0018de0:	66 89 10             	mov    WORD PTR [eax],dx
c0018de3:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0018de6:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0018dea:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0018ded:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0018df1:	89 d6                	mov    esi,edx
c0018df3:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0018df9:	66 81 e6 ff fd       	and    si,0xfdff
c0018dfe:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0018e02:	74 07                	je     c0018e0b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0018e04:	89 d6                	mov    esi,edx
c0018e06:	66 81 ce 00 02       	or     si,0x200
c0018e0b:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0018e0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018e14:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0018e18:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0018e20:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0018e23:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0018e2b:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0018e2e:	5b                   	pop    ebx
c0018e2f:	5e                   	pop    esi
c0018e30:	5f                   	pop    edi
c0018e31:	c3                   	ret    

c0018e32 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0018e32:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e37:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e3c:	c1 e0 04             	shl    eax,0x4
c0018e3f:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0018e42:	c3                   	ret    

c0018e43 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0018e43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e48:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e4d:	c1 e0 04             	shl    eax,0x4
c0018e50:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0018e54:	c3                   	ret    

c0018e55 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0018e55:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e5a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e5f:	c1 e0 04             	shl    eax,0x4
c0018e62:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0018e65:	c3                   	ret    

c0018e66 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0018e66:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e6b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e70:	c1 e0 04             	shl    eax,0x4
c0018e73:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e77:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0018e7a:	c3                   	ret    

c0018e7b <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018e7b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e80:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e85:	c1 e0 04             	shl    eax,0x4
c0018e88:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e8c:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0018e90:	c3                   	ret    

c0018e91 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0018e91:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e96:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e9b:	c1 e0 04             	shl    eax,0x4
c0018e9e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018ea2:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0018ea5:	c3                   	ret    

c0018ea6 <Vm::faultHandler(regs*)>:
c0018ea6:	55                   	push   ebp
c0018ea7:	57                   	push   edi
c0018ea8:	56                   	push   esi
c0018ea9:	53                   	push   ebx
c0018eaa:	83 ec 1c             	sub    esp,0x1c
c0018ead:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018eb1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018eb4:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0018eb8:	0f b7 f8             	movzx  edi,ax
c0018ebb:	52                   	push   edx
c0018ebc:	0f b7 c0             	movzx  eax,ax
c0018ebf:	50                   	push   eax
c0018ec0:	e8 25 fc ff ff       	call   c0018aea <Vm::realToLinear(unsigned short, unsigned short)>
c0018ec5:	5a                   	pop    edx
c0018ec6:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0018ec9:	59                   	pop    ecx
c0018eca:	89 c1                	mov    ecx,eax
c0018ecc:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018ecf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018ed3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018ed8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018edc:	0f b7 c5             	movzx  eax,bp
c0018edf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018ee3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0018ee7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018eeb:	e8 fa fb ff ff       	call   c0018aea <Vm::realToLinear(unsigned short, unsigned short)>
c0018ef0:	5e                   	pop    esi
c0018ef1:	be 06 00 00 00       	mov    esi,0x6
c0018ef6:	5a                   	pop    edx
c0018ef7:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0018efc:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0018f01:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0018f04:	80 fa 9d             	cmp    dl,0x9d
c0018f07:	0f 84 2c 02 00 00    	je     c0019139 <Vm::faultHandler(regs*)+0x293>
c0018f0d:	0f 87 91 00 00 00    	ja     c0018fa4 <Vm::faultHandler(regs*)+0xfe>
c0018f13:	80 fa 66             	cmp    dl,0x66
c0018f16:	0f 84 98 01 00 00    	je     c00190b4 <Vm::faultHandler(regs*)+0x20e>
c0018f1c:	77 47                	ja     c0018f65 <Vm::faultHandler(regs*)+0xbf>
c0018f1e:	80 fa 36             	cmp    dl,0x36
c0018f21:	0f 84 80 01 00 00    	je     c00190a7 <Vm::faultHandler(regs*)+0x201>
c0018f27:	77 1a                	ja     c0018f43 <Vm::faultHandler(regs*)+0x9d>
c0018f29:	80 fa 26             	cmp    dl,0x26
c0018f2c:	0f 84 4e 01 00 00    	je     c0019080 <Vm::faultHandler(regs*)+0x1da>
c0018f32:	80 fa 2e             	cmp    dl,0x2e
c0018f35:	0f 85 e2 05 00 00    	jne    c001951d <Vm::faultHandler(regs*)+0x677>
c0018f3b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018f3e:	31 f6                	xor    esi,esi
c0018f40:	41                   	inc    ecx
c0018f41:	eb be                	jmp    c0018f01 <Vm::faultHandler(regs*)+0x5b>
c0018f43:	80 fa 64             	cmp    dl,0x64
c0018f46:	0f 84 41 01 00 00    	je     c001908d <Vm::faultHandler(regs*)+0x1e7>
c0018f4c:	0f 87 48 01 00 00    	ja     c001909a <Vm::faultHandler(regs*)+0x1f4>
c0018f52:	80 fa 3e             	cmp    dl,0x3e
c0018f55:	0f 85 c2 05 00 00    	jne    c001951d <Vm::faultHandler(regs*)+0x677>
c0018f5b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018f5e:	be 01 00 00 00       	mov    esi,0x1
c0018f63:	eb db                	jmp    c0018f40 <Vm::faultHandler(regs*)+0x9a>
c0018f65:	80 fa 6d             	cmp    dl,0x6d
c0018f68:	0f 84 ec 02 00 00    	je     c001925a <Vm::faultHandler(regs*)+0x3b4>
c0018f6e:	77 17                	ja     c0018f87 <Vm::faultHandler(regs*)+0xe1>
c0018f70:	80 fa 67             	cmp    dl,0x67
c0018f73:	0f 84 48 01 00 00    	je     c00190c1 <Vm::faultHandler(regs*)+0x21b>
c0018f79:	80 fa 6c             	cmp    dl,0x6c
c0018f7c:	0f 84 69 02 00 00    	je     c00191eb <Vm::faultHandler(regs*)+0x345>
c0018f82:	e9 96 05 00 00       	jmp    c001951d <Vm::faultHandler(regs*)+0x677>
c0018f87:	80 fa 6f             	cmp    dl,0x6f
c0018f8a:	0f 84 f4 03 00 00    	je     c0019384 <Vm::faultHandler(regs*)+0x4de>
c0018f90:	0f 82 59 03 00 00    	jb     c00192ef <Vm::faultHandler(regs*)+0x449>
c0018f96:	80 fa 9c             	cmp    dl,0x9c
c0018f99:	0f 84 2f 01 00 00    	je     c00190ce <Vm::faultHandler(regs*)+0x228>
c0018f9f:	e9 79 05 00 00       	jmp    c001951d <Vm::faultHandler(regs*)+0x677>
c0018fa4:	80 fa ec             	cmp    dl,0xec
c0018fa7:	0f 84 14 05 00 00    	je     c00194c1 <Vm::faultHandler(regs*)+0x61b>
c0018fad:	77 7b                	ja     c001902a <Vm::faultHandler(regs*)+0x184>
c0018faf:	80 fa e4             	cmp    dl,0xe4
c0018fb2:	0f 84 93 04 00 00    	je     c001944b <Vm::faultHandler(regs*)+0x5a5>
c0018fb8:	77 53                	ja     c001900d <Vm::faultHandler(regs*)+0x167>
c0018fba:	80 fa cd             	cmp    dl,0xcd
c0018fbd:	0f 84 d9 01 00 00    	je     c001919c <Vm::faultHandler(regs*)+0x2f6>
c0018fc3:	80 fa cf             	cmp    dl,0xcf
c0018fc6:	0f 85 51 05 00 00    	jne    c001951d <Vm::faultHandler(regs*)+0x677>
c0018fcc:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018fcf:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018fd2:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0018fd6:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0018fd9:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0018fdd:	81 ca 00 02 02 00    	or     edx,0x20200
c0018fe3:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018fe6:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0018fea:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018ff0:	66 c1 e8 09          	shr    ax,0x9
c0018ff4:	83 e0 01             	and    eax,0x1
c0018ff7:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0018ffa:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018ffd:	83 c0 06             	add    eax,0x6
c0019000:	25 ff ff 00 00       	and    eax,0xffff
c0019005:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019008:	e9 0c 05 00 00       	jmp    c0019519 <Vm::faultHandler(regs*)+0x673>
c001900d:	80 fa e6             	cmp    dl,0xe6
c0019010:	0f 84 7f 04 00 00    	je     c0019495 <Vm::faultHandler(regs*)+0x5ef>
c0019016:	0f 82 4b 04 00 00    	jb     c0019467 <Vm::faultHandler(regs*)+0x5c1>
c001901c:	80 fa e7             	cmp    dl,0xe7
c001901f:	0f 84 87 04 00 00    	je     c00194ac <Vm::faultHandler(regs*)+0x606>
c0019025:	e9 f3 04 00 00       	jmp    c001951d <Vm::faultHandler(regs*)+0x677>
c001902a:	80 fa ef             	cmp    dl,0xef
c001902d:	0f 84 d1 04 00 00    	je     c0019504 <Vm::faultHandler(regs*)+0x65e>
c0019033:	77 28                	ja     c001905d <Vm::faultHandler(regs*)+0x1b7>
c0019035:	80 fa ed             	cmp    dl,0xed
c0019038:	0f 84 9f 04 00 00    	je     c00194dd <Vm::faultHandler(regs*)+0x637>
c001903e:	80 fa ee             	cmp    dl,0xee
c0019041:	0f 85 d6 04 00 00    	jne    c001951d <Vm::faultHandler(regs*)+0x677>
c0019047:	50                   	push   eax
c0019048:	50                   	push   eax
c0019049:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001904d:	50                   	push   eax
c001904e:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019052:	50                   	push   eax
c0019053:	e8 5c fa ff ff       	call   c0018ab4 <Vm::outbv(unsigned short, unsigned char)>
c0019058:	e9 9f 04 00 00       	jmp    c00194fc <Vm::faultHandler(regs*)+0x656>
c001905d:	80 fa fa             	cmp    dl,0xfa
c0019060:	0f 84 69 01 00 00    	je     c00191cf <Vm::faultHandler(regs*)+0x329>
c0019066:	80 fa fb             	cmp    dl,0xfb
c0019069:	0f 84 6e 01 00 00    	je     c00191dd <Vm::faultHandler(regs*)+0x337>
c001906f:	80 fa f3             	cmp    dl,0xf3
c0019072:	0f 85 a5 04 00 00    	jne    c001951d <Vm::faultHandler(regs*)+0x677>
c0019078:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001907b:	e9 c0 fe ff ff       	jmp    c0018f40 <Vm::faultHandler(regs*)+0x9a>
c0019080:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019083:	be 02 00 00 00       	mov    esi,0x2
c0019088:	e9 b3 fe ff ff       	jmp    c0018f40 <Vm::faultHandler(regs*)+0x9a>
c001908d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019090:	be 03 00 00 00       	mov    esi,0x3
c0019095:	e9 a6 fe ff ff       	jmp    c0018f40 <Vm::faultHandler(regs*)+0x9a>
c001909a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001909d:	be 04 00 00 00       	mov    esi,0x4
c00190a2:	e9 99 fe ff ff       	jmp    c0018f40 <Vm::faultHandler(regs*)+0x9a>
c00190a7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00190aa:	be 05 00 00 00       	mov    esi,0x5
c00190af:	e9 8c fe ff ff       	jmp    c0018f40 <Vm::faultHandler(regs*)+0x9a>
c00190b4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00190b7:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00190bc:	e9 7f fe ff ff       	jmp    c0018f40 <Vm::faultHandler(regs*)+0x9a>
c00190c1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00190c4:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00190c9:	e9 72 fe ff ff       	jmp    c0018f40 <Vm::faultHandler(regs*)+0x9a>
c00190ce:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00190d1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00190d5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00190da:	74 30                	je     c001910c <Vm::faultHandler(regs*)+0x266>
c00190dc:	83 e9 04             	sub    ecx,0x4
c00190df:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00190e5:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00190eb:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00190ee:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00190f1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00190f7:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00190fb:	0f 84 15 04 00 00    	je     c0019516 <Vm::faultHandler(regs*)+0x670>
c0019101:	80 ce 02             	or     dh,0x2
c0019104:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019107:	e9 0a 04 00 00       	jmp    c0019516 <Vm::faultHandler(regs*)+0x670>
c001910c:	83 e9 02             	sub    ecx,0x2
c001910f:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019115:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019118:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001911c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019122:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0019126:	74 05                	je     c001912d <Vm::faultHandler(regs*)+0x287>
c0019128:	80 ce 02             	or     dh,0x2
c001912b:	eb 03                	jmp    c0019130 <Vm::faultHandler(regs*)+0x28a>
c001912d:	80 e6 fd             	and    dh,0xfd
c0019130:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019134:	e9 dd 03 00 00       	jmp    c0019516 <Vm::faultHandler(regs*)+0x670>
c0019139:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001913e:	74 2a                	je     c001916a <Vm::faultHandler(regs*)+0x2c4>
c0019140:	8b 10                	mov    edx,DWORD PTR [eax]
c0019142:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019148:	81 ca 00 02 02 00    	or     edx,0x20200
c001914e:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019151:	8b 00                	mov    eax,DWORD PTR [eax]
c0019153:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019159:	c1 e8 09             	shr    eax,0x9
c001915c:	83 e0 01             	and    eax,0x1
c001915f:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0019162:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019165:	83 c0 04             	add    eax,0x4
c0019168:	eb 25                	jmp    c001918f <Vm::faultHandler(regs*)+0x2e9>
c001916a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001916d:	81 ca 00 02 02 00    	or     edx,0x20200
c0019173:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019176:	66 8b 00             	mov    ax,WORD PTR [eax]
c0019179:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001917f:	66 c1 e8 09          	shr    ax,0x9
c0019183:	83 e0 01             	and    eax,0x1
c0019186:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0019189:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001918c:	83 c0 02             	add    eax,0x2
c001918f:	25 ff ff 00 00       	and    eax,0xffff
c0019194:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019197:	e9 7a 03 00 00       	jmp    c0019516 <Vm::faultHandler(regs*)+0x670>
c001919c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00191a0:	3c ee                	cmp    al,0xee
c00191a2:	75 10                	jne    c00191b4 <Vm::faultHandler(regs*)+0x30e>
c00191a4:	83 ec 0c             	sub    esp,0xc
c00191a7:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00191aa:	e8 a2 f9 ff ff       	call   c0018b51 <Vm::mainloop3(unsigned long)>
c00191af:	e9 4b 03 00 00       	jmp    c00194ff <Vm::faultHandler(regs*)+0x659>
c00191b4:	83 ec 0c             	sub    esp,0xc
c00191b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00191bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00191bf:	51                   	push   ecx
c00191c0:	50                   	push   eax
c00191c1:	53                   	push   ebx
c00191c2:	e8 e1 fb ff ff       	call   c0018da8 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00191c7:	83 c4 20             	add    esp,0x20
c00191ca:	e9 4a 03 00 00       	jmp    c0019519 <Vm::faultHandler(regs*)+0x673>
c00191cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00191d4:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00191d8:	e9 39 03 00 00       	jmp    c0019516 <Vm::faultHandler(regs*)+0x670>
c00191dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00191e2:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00191e6:	e9 2b 03 00 00       	jmp    c0019516 <Vm::faultHandler(regs*)+0x670>
c00191eb:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00191ee:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00191f3:	74 2b                	je     c0019220 <Vm::faultHandler(regs*)+0x37a>
c00191f5:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00191fc:	76 22                	jbe    c0019220 <Vm::faultHandler(regs*)+0x37a>
c00191fe:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019202:	50                   	push   eax
c0019203:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019207:	50                   	push   eax
c0019208:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001920c:	50                   	push   eax
c001920d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019211:	50                   	push   eax
c0019212:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019216:	50                   	push   eax
c0019217:	6a 6c                	push   0x6c
c0019219:	6a 6c                	push   0x6c
c001921b:	e9 b9 01 00 00       	jmp    c00193d9 <Vm::faultHandler(regs*)+0x533>
c0019220:	83 ec 0c             	sub    esp,0xc
c0019223:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019227:	0f b7 f6             	movzx  esi,si
c001922a:	50                   	push   eax
c001922b:	e8 71 f8 ff ff       	call   c0018aa1 <Vm::inbv(unsigned short)>
c0019230:	83 c4 0c             	add    esp,0xc
c0019233:	0f b6 c0             	movzx  eax,al
c0019236:	50                   	push   eax
c0019237:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001923b:	50                   	push   eax
c001923c:	56                   	push   esi
c001923d:	e8 24 fc ff ff       	call   c0018e66 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0019242:	83 c4 10             	add    esp,0x10
c0019245:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019248:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001924c:	74 03                	je     c0019251 <Vm::faultHandler(regs*)+0x3ab>
c001924e:	48                   	dec    eax
c001924f:	eb 01                	jmp    c0019252 <Vm::faultHandler(regs*)+0x3ac>
c0019251:	40                   	inc    eax
c0019252:	0f b7 c0             	movzx  eax,ax
c0019255:	e9 8d 00 00 00       	jmp    c00192e7 <Vm::faultHandler(regs*)+0x441>
c001925a:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001925d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019260:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019265:	74 29                	je     c0019290 <Vm::faultHandler(regs*)+0x3ea>
c0019267:	3d ff ff 00 00       	cmp    eax,0xffff
c001926c:	76 22                	jbe    c0019290 <Vm::faultHandler(regs*)+0x3ea>
c001926e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019272:	50                   	push   eax
c0019273:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019277:	50                   	push   eax
c0019278:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001927c:	50                   	push   eax
c001927d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019281:	50                   	push   eax
c0019282:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019286:	50                   	push   eax
c0019287:	6a 6d                	push   0x6d
c0019289:	6a 6d                	push   0x6d
c001928b:	e9 49 01 00 00       	jmp    c00193d9 <Vm::faultHandler(regs*)+0x533>
c0019290:	0f b7 c8             	movzx  ecx,ax
c0019293:	0f b7 f6             	movzx  esi,si
c0019296:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019299:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001929e:	74 20                	je     c00192c0 <Vm::faultHandler(regs*)+0x41a>
c00192a0:	ed                   	in     eax,dx
c00192a1:	55                   	push   ebp
c00192a2:	50                   	push   eax
c00192a3:	51                   	push   ecx
c00192a4:	56                   	push   esi
c00192a5:	e8 e7 fb ff ff       	call   c0018e91 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00192aa:	83 c4 10             	add    esp,0x10
c00192ad:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00192b0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00192b4:	74 05                	je     c00192bb <Vm::faultHandler(regs*)+0x415>
c00192b6:	83 e8 04             	sub    eax,0x4
c00192b9:	eb 27                	jmp    c00192e2 <Vm::faultHandler(regs*)+0x43c>
c00192bb:	83 c0 04             	add    eax,0x4
c00192be:	eb 22                	jmp    c00192e2 <Vm::faultHandler(regs*)+0x43c>
c00192c0:	66 ed                	in     ax,dx
c00192c2:	0f b7 c0             	movzx  eax,ax
c00192c5:	57                   	push   edi
c00192c6:	50                   	push   eax
c00192c7:	51                   	push   ecx
c00192c8:	56                   	push   esi
c00192c9:	e8 ad fb ff ff       	call   c0018e7b <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00192ce:	83 c4 10             	add    esp,0x10
c00192d1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00192d4:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00192d8:	74 05                	je     c00192df <Vm::faultHandler(regs*)+0x439>
c00192da:	83 e8 02             	sub    eax,0x2
c00192dd:	eb 03                	jmp    c00192e2 <Vm::faultHandler(regs*)+0x43c>
c00192df:	83 c0 02             	add    eax,0x2
c00192e2:	25 ff ff 00 00       	and    eax,0xffff
c00192e7:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00192ea:	e9 27 02 00 00       	jmp    c0019516 <Vm::faultHandler(regs*)+0x670>
c00192ef:	8d 46 ff             	lea    eax,[esi-0x1]
c00192f2:	3c 05                	cmp    al,0x5
c00192f4:	77 24                	ja     c001931a <Vm::faultHandler(regs*)+0x474>
c00192f6:	0f b6 c0             	movzx  eax,al
c00192f9:	ff 24 85 bc 4a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb544]
c0019300:	0f b7 fd             	movzx  edi,bp
c0019303:	eb 15                	jmp    c001931a <Vm::faultHandler(regs*)+0x474>
c0019305:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0019309:	eb 0f                	jmp    c001931a <Vm::faultHandler(regs*)+0x474>
c001930b:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001930f:	eb 09                	jmp    c001931a <Vm::faultHandler(regs*)+0x474>
c0019311:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0019315:	eb 03                	jmp    c001931a <Vm::faultHandler(regs*)+0x474>
c0019317:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001931a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001931d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019322:	74 29                	je     c001934d <Vm::faultHandler(regs*)+0x4a7>
c0019324:	3d ff ff 00 00       	cmp    eax,0xffff
c0019329:	76 22                	jbe    c001934d <Vm::faultHandler(regs*)+0x4a7>
c001932b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001932f:	50                   	push   eax
c0019330:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019334:	50                   	push   eax
c0019335:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019339:	50                   	push   eax
c001933a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001933e:	50                   	push   eax
c001933f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019343:	50                   	push   eax
c0019344:	6a 6e                	push   0x6e
c0019346:	6a 6e                	push   0x6e
c0019348:	e9 8c 00 00 00       	jmp    c00193d9 <Vm::faultHandler(regs*)+0x533>
c001934d:	0f b7 c0             	movzx  eax,ax
c0019350:	52                   	push   edx
c0019351:	52                   	push   edx
c0019352:	50                   	push   eax
c0019353:	57                   	push   edi
c0019354:	e8 d9 fa ff ff       	call   c0018e32 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0019359:	59                   	pop    ecx
c001935a:	0f b6 c0             	movzx  eax,al
c001935d:	5e                   	pop    esi
c001935e:	50                   	push   eax
c001935f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019363:	50                   	push   eax
c0019364:	e8 4b f7 ff ff       	call   c0018ab4 <Vm::outbv(unsigned short, unsigned char)>
c0019369:	83 c4 10             	add    esp,0x10
c001936c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001936f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019373:	74 03                	je     c0019378 <Vm::faultHandler(regs*)+0x4d2>
c0019375:	48                   	dec    eax
c0019376:	eb 01                	jmp    c0019379 <Vm::faultHandler(regs*)+0x4d3>
c0019378:	40                   	inc    eax
c0019379:	0f b7 c0             	movzx  eax,ax
c001937c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001937f:	e9 92 01 00 00       	jmp    c0019516 <Vm::faultHandler(regs*)+0x670>
c0019384:	8d 46 ff             	lea    eax,[esi-0x1]
c0019387:	3c 05                	cmp    al,0x5
c0019389:	77 1f                	ja     c00193aa <Vm::faultHandler(regs*)+0x504>
c001938b:	0f b6 c0             	movzx  eax,al
c001938e:	ff 24 85 d4 4a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb52c]
c0019395:	89 ef                	mov    edi,ebp
c0019397:	eb 11                	jmp    c00193aa <Vm::faultHandler(regs*)+0x504>
c0019399:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001939c:	eb 0c                	jmp    c00193aa <Vm::faultHandler(regs*)+0x504>
c001939e:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00193a1:	eb 07                	jmp    c00193aa <Vm::faultHandler(regs*)+0x504>
c00193a3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00193a6:	eb 02                	jmp    c00193aa <Vm::faultHandler(regs*)+0x504>
c00193a8:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00193aa:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00193ad:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00193b2:	74 37                	je     c00193eb <Vm::faultHandler(regs*)+0x545>
c00193b4:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00193ba:	76 2f                	jbe    c00193eb <Vm::faultHandler(regs*)+0x545>
c00193bc:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00193c0:	50                   	push   eax
c00193c1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00193c5:	50                   	push   eax
c00193c6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00193ca:	50                   	push   eax
c00193cb:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00193cf:	50                   	push   eax
c00193d0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00193d4:	50                   	push   eax
c00193d5:	6a 6f                	push   0x6f
c00193d7:	6a 6f                	push   0x6f
c00193d9:	68 62 4a 02 c0       	push   0xc0024a62
c00193de:	e8 fc 36 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c00193e3:	83 c4 20             	add    esp,0x20
c00193e6:	e9 86 01 00 00       	jmp    c0019571 <Vm::faultHandler(regs*)+0x6cb>
c00193eb:	0f b7 d7             	movzx  edx,di
c00193ee:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00193f1:	0f b7 c6             	movzx  eax,si
c00193f4:	81 e1 00 04 00 00    	and    ecx,0x400
c00193fa:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00193fd:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019402:	74 1d                	je     c0019421 <Vm::faultHandler(regs*)+0x57b>
c0019404:	55                   	push   ebp
c0019405:	55                   	push   ebp
c0019406:	50                   	push   eax
c0019407:	52                   	push   edx
c0019408:	e8 48 fa ff ff       	call   c0018e55 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001940d:	83 c4 10             	add    esp,0x10
c0019410:	89 fa                	mov    edx,edi
c0019412:	ef                   	out    dx,eax
c0019413:	85 c9                	test   ecx,ecx
c0019415:	74 05                	je     c001941c <Vm::faultHandler(regs*)+0x576>
c0019417:	83 ee 04             	sub    esi,0x4
c001941a:	eb 21                	jmp    c001943d <Vm::faultHandler(regs*)+0x597>
c001941c:	83 c6 04             	add    esi,0x4
c001941f:	eb 1c                	jmp    c001943d <Vm::faultHandler(regs*)+0x597>
c0019421:	55                   	push   ebp
c0019422:	55                   	push   ebp
c0019423:	50                   	push   eax
c0019424:	52                   	push   edx
c0019425:	e8 19 fa ff ff       	call   c0018e43 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001942a:	83 c4 10             	add    esp,0x10
c001942d:	89 fa                	mov    edx,edi
c001942f:	66 ef                	out    dx,ax
c0019431:	85 c9                	test   ecx,ecx
c0019433:	74 05                	je     c001943a <Vm::faultHandler(regs*)+0x594>
c0019435:	83 ee 02             	sub    esi,0x2
c0019438:	eb 03                	jmp    c001943d <Vm::faultHandler(regs*)+0x597>
c001943a:	83 c6 02             	add    esi,0x2
c001943d:	81 e6 ff ff 00 00    	and    esi,0xffff
c0019443:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0019446:	e9 cb 00 00 00       	jmp    c0019516 <Vm::faultHandler(regs*)+0x670>
c001944b:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019452:	83 ec 0c             	sub    esp,0xc
c0019455:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019459:	50                   	push   eax
c001945a:	e8 42 f6 ff ff       	call   c0018aa1 <Vm::inbv(unsigned short)>
c001945f:	0f b6 c0             	movzx  eax,al
c0019462:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019465:	eb 3f                	jmp    c00194a6 <Vm::faultHandler(regs*)+0x600>
c0019467:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001946c:	74 07                	je     c0019475 <Vm::faultHandler(regs*)+0x5cf>
c001946e:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019472:	ed                   	in     eax,dx
c0019473:	eb 14                	jmp    c0019489 <Vm::faultHandler(regs*)+0x5e3>
c0019475:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0019478:	66 31 f6             	xor    si,si
c001947b:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001947e:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019482:	66 ed                	in     ax,dx
c0019484:	0f b7 c0             	movzx  eax,ax
c0019487:	09 f0                	or     eax,esi
c0019489:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001948c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019490:	e9 84 00 00 00       	jmp    c0019519 <Vm::faultHandler(regs*)+0x673>
c0019495:	52                   	push   edx
c0019496:	52                   	push   edx
c0019497:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001949b:	50                   	push   eax
c001949c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00194a0:	50                   	push   eax
c00194a1:	e8 0e f6 ff ff       	call   c0018ab4 <Vm::outbv(unsigned short, unsigned char)>
c00194a6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00194aa:	eb 53                	jmp    c00194ff <Vm::faultHandler(regs*)+0x659>
c00194ac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00194af:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00194b3:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00194b8:	74 03                	je     c00194bd <Vm::faultHandler(regs*)+0x617>
c00194ba:	ef                   	out    dx,eax
c00194bb:	eb cf                	jmp    c001948c <Vm::faultHandler(regs*)+0x5e6>
c00194bd:	66 ef                	out    dx,ax
c00194bf:	eb cb                	jmp    c001948c <Vm::faultHandler(regs*)+0x5e6>
c00194c1:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00194c8:	83 ec 0c             	sub    esp,0xc
c00194cb:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00194cf:	50                   	push   eax
c00194d0:	e8 cc f5 ff ff       	call   c0018aa1 <Vm::inbv(unsigned short)>
c00194d5:	0f b6 c0             	movzx  eax,al
c00194d8:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00194db:	eb 1f                	jmp    c00194fc <Vm::faultHandler(regs*)+0x656>
c00194dd:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00194e0:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00194e5:	74 03                	je     c00194ea <Vm::faultHandler(regs*)+0x644>
c00194e7:	ed                   	in     eax,dx
c00194e8:	eb 0d                	jmp    c00194f7 <Vm::faultHandler(regs*)+0x651>
c00194ea:	66 ed                	in     ax,dx
c00194ec:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00194ef:	0f b7 c0             	movzx  eax,ax
c00194f2:	66 31 d2             	xor    dx,dx
c00194f5:	09 d0                	or     eax,edx
c00194f7:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00194fa:	eb 1a                	jmp    c0019516 <Vm::faultHandler(regs*)+0x670>
c00194fc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00194ff:	83 c4 10             	add    esp,0x10
c0019502:	eb 15                	jmp    c0019519 <Vm::faultHandler(regs*)+0x673>
c0019504:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019507:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001950a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001950f:	74 03                	je     c0019514 <Vm::faultHandler(regs*)+0x66e>
c0019511:	ef                   	out    dx,eax
c0019512:	eb 02                	jmp    c0019516 <Vm::faultHandler(regs*)+0x670>
c0019514:	66 ef                	out    dx,ax
c0019516:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019519:	b0 01                	mov    al,0x1
c001951b:	eb 56                	jmp    c0019573 <Vm::faultHandler(regs*)+0x6cd>
c001951d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019521:	50                   	push   eax
c0019522:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019526:	50                   	push   eax
c0019527:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001952b:	50                   	push   eax
c001952c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019530:	50                   	push   eax
c0019531:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019535:	50                   	push   eax
c0019536:	52                   	push   edx
c0019537:	52                   	push   edx
c0019538:	68 8f 4a 02 c0       	push   0xc0024a8f
c001953d:	e8 9d 35 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c0019542:	83 c4 20             	add    esp,0x20
c0019545:	83 ec 0c             	sub    esp,0xc
c0019548:	6a 60                	push   0x60
c001954a:	e8 52 f5 ff ff       	call   c0018aa1 <Vm::inbv(unsigned short)>
c001954f:	83 c4 10             	add    esp,0x10
c0019552:	3c 1c                	cmp    al,0x1c
c0019554:	74 04                	je     c001955a <Vm::faultHandler(regs*)+0x6b4>
c0019556:	3c 5a                	cmp    al,0x5a
c0019558:	75 eb                	jne    c0019545 <Vm::faultHandler(regs*)+0x69f>
c001955a:	3c 5a                	cmp    al,0x5a
c001955c:	74 04                	je     c0019562 <Vm::faultHandler(regs*)+0x6bc>
c001955e:	3c 1c                	cmp    al,0x1c
c0019560:	75 0f                	jne    c0019571 <Vm::faultHandler(regs*)+0x6cb>
c0019562:	83 ec 0c             	sub    esp,0xc
c0019565:	6a 60                	push   0x60
c0019567:	e8 35 f5 ff ff       	call   c0018aa1 <Vm::inbv(unsigned short)>
c001956c:	83 c4 10             	add    esp,0x10
c001956f:	eb e9                	jmp    c001955a <Vm::faultHandler(regs*)+0x6b4>
c0019571:	31 c0                	xor    eax,eax
c0019573:	83 c4 1c             	add    esp,0x1c
c0019576:	5b                   	pop    ebx
c0019577:	5e                   	pop    esi
c0019578:	5f                   	pop    edi
c0019579:	5d                   	pop    ebp
c001957a:	c3                   	ret    
c001957b:	90                   	nop

c001957c <Vm::fpuInternalTo32(unsigned long long)>:
c001957c:	57                   	push   edi
c001957d:	56                   	push   esi
c001957e:	53                   	push   ebx
c001957f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019583:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019587:	89 d6                	mov    esi,edx
c0019589:	89 d7                	mov    edi,edx
c001958b:	89 c1                	mov    ecx,eax
c001958d:	c1 ef 14             	shr    edi,0x14
c0019590:	89 d3                	mov    ebx,edx
c0019592:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0019598:	31 d2                	xor    edx,edx
c001959a:	89 f8                	mov    eax,edi
c001959c:	81 e6 00 00 00 80    	and    esi,0x80000000
c00195a2:	bf ff 00 00 00       	mov    edi,0xff
c00195a7:	05 80 fc ff ff       	add    eax,0xfffffc80
c00195ac:	83 d2 ff             	adc    edx,0xffffffff
c00195af:	39 c7                	cmp    edi,eax
c00195b1:	bf 00 00 00 00       	mov    edi,0x0
c00195b6:	19 d7                	sbb    edi,edx
c00195b8:	72 16                	jb     c00195d0 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c00195ba:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c00195be:	c1 e0 17             	shl    eax,0x17
c00195c1:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c00195c7:	09 f1                	or     ecx,esi
c00195c9:	09 c1                	or     ecx,eax
c00195cb:	89 cf                	mov    edi,ecx
c00195cd:	eb 05                	jmp    c00195d4 <Vm::fpuInternalTo32(unsigned long long)+0x58>
c00195cf:	90                   	nop
c00195d0:	31 ff                	xor    edi,edi
c00195d2:	66 90                	xchg   ax,ax
c00195d4:	89 f8                	mov    eax,edi
c00195d6:	5b                   	pop    ebx
c00195d7:	5e                   	pop    esi
c00195d8:	5f                   	pop    edi
c00195d9:	c3                   	ret    

c00195da <Vm::fpuInternalTo64(unsigned long long)>:
c00195da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00195e2:	c3                   	ret    

c00195e3 <Vm::fpu32ToInternal(unsigned int)>:
c00195e3:	57                   	push   edi
c00195e4:	31 ff                	xor    edi,edi
c00195e6:	56                   	push   esi
c00195e7:	53                   	push   ebx
c00195e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00195ec:	89 cb                	mov    ebx,ecx
c00195ee:	89 ce                	mov    esi,ecx
c00195f0:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00195f6:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c00195fc:	c1 e9 17             	shr    ecx,0x17
c00195ff:	89 f0                	mov    eax,esi
c0019601:	0f b6 d1             	movzx  edx,cl
c0019604:	81 c2 80 03 00 00    	add    edx,0x380
c001960a:	89 d1                	mov    ecx,edx
c001960c:	89 fa                	mov    edx,edi
c001960e:	c1 e1 14             	shl    ecx,0x14
c0019611:	0f a4 c2 1d          	shld   edx,eax,0x1d
c0019615:	c1 e0 1d             	shl    eax,0x1d
c0019618:	89 d7                	mov    edi,edx
c001961a:	89 c6                	mov    esi,eax
c001961c:	89 ca                	mov    edx,ecx
c001961e:	89 f0                	mov    eax,esi
c0019620:	09 fa                	or     edx,edi
c0019622:	09 da                	or     edx,ebx
c0019624:	5b                   	pop    ebx
c0019625:	5e                   	pop    esi
c0019626:	5f                   	pop    edi
c0019627:	c3                   	ret    

c0019628 <Vm::fpu64ToInternal(unsigned long long)>:
c0019628:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001962c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019630:	c3                   	ret    

c0019631 <Vm::fpuFloatToLong(unsigned long long)>:
c0019631:	57                   	push   edi
c0019632:	31 c0                	xor    eax,eax
c0019634:	56                   	push   esi
c0019635:	31 d2                	xor    edx,edx
c0019637:	53                   	push   ebx
c0019638:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001963c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019640:	89 d9                	mov    ecx,ebx
c0019642:	c1 e9 14             	shr    ecx,0x14
c0019645:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001964b:	89 cf                	mov    edi,ecx
c001964d:	81 ef ff 03 00 00    	sub    edi,0x3ff
c0019653:	78 37                	js     c001968c <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019655:	89 d9                	mov    ecx,ebx
c0019657:	89 f0                	mov    eax,esi
c0019659:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001965f:	81 c9 00 00 10 00    	or     ecx,0x100000
c0019665:	89 ca                	mov    edx,ecx
c0019667:	b9 34 00 00 00       	mov    ecx,0x34
c001966c:	29 f9                	sub    ecx,edi
c001966e:	0f ad d0             	shrd   eax,edx,cl
c0019671:	d3 fa                	sar    edx,cl
c0019673:	f6 c1 20             	test   cl,0x20
c0019676:	74 08                	je     c0019680 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c0019678:	89 d0                	mov    eax,edx
c001967a:	c1 fa 1f             	sar    edx,0x1f
c001967d:	8d 76 00             	lea    esi,[esi+0x0]
c0019680:	85 db                	test   ebx,ebx
c0019682:	79 08                	jns    c001968c <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019684:	f7 d8                	neg    eax
c0019686:	83 d2 00             	adc    edx,0x0
c0019689:	f7 da                	neg    edx
c001968b:	90                   	nop
c001968c:	5b                   	pop    ebx
c001968d:	5e                   	pop    esi
c001968e:	5f                   	pop    edi
c001968f:	c3                   	ret    

c0019690 <Vm::fpuULongToFloat(unsigned long long)>:
c0019690:	57                   	push   edi
c0019691:	31 c9                	xor    ecx,ecx
c0019693:	56                   	push   esi
c0019694:	53                   	push   ebx
c0019695:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019699:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001969d:	8d 76 00             	lea    esi,[esi+0x0]
c00196a0:	0f ba e7 14          	bt     edi,0x14
c00196a4:	72 0a                	jb     c00196b0 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c00196a6:	01 f6                	add    esi,esi
c00196a8:	11 ff                	adc    edi,edi
c00196aa:	41                   	inc    ecx
c00196ab:	eb f3                	jmp    c00196a0 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c00196ad:	8d 76 00             	lea    esi,[esi+0x0]
c00196b0:	89 fa                	mov    edx,edi
c00196b2:	89 f0                	mov    eax,esi
c00196b4:	bb 33 04 00 00       	mov    ebx,0x433
c00196b9:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c00196bf:	29 cb                	sub    ebx,ecx
c00196c1:	89 d9                	mov    ecx,ebx
c00196c3:	5b                   	pop    ebx
c00196c4:	c1 e1 14             	shl    ecx,0x14
c00196c7:	5e                   	pop    esi
c00196c8:	09 ca                	or     edx,ecx
c00196ca:	5f                   	pop    edi
c00196cb:	c3                   	ret    

c00196cc <Vm::fpuLongToFloat(long long)>:
c00196cc:	56                   	push   esi
c00196cd:	31 c0                	xor    eax,eax
c00196cf:	53                   	push   ebx
c00196d0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00196d4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00196d8:	39 c8                	cmp    eax,ecx
c00196da:	19 d8                	sbb    eax,ebx
c00196dc:	7d 06                	jge    c00196e4 <Vm::fpuLongToFloat(long long)+0x18>
c00196de:	31 f6                	xor    esi,esi
c00196e0:	eb 0e                	jmp    c00196f0 <Vm::fpuLongToFloat(long long)+0x24>
c00196e2:	66 90                	xchg   ax,ax
c00196e4:	f7 d9                	neg    ecx
c00196e6:	be 01 00 00 00       	mov    esi,0x1
c00196eb:	83 d3 00             	adc    ebx,0x0
c00196ee:	f7 db                	neg    ebx
c00196f0:	31 c0                	xor    eax,eax
c00196f2:	66 90                	xchg   ax,ax
c00196f4:	0f ba e3 14          	bt     ebx,0x14
c00196f8:	72 0a                	jb     c0019704 <Vm::fpuLongToFloat(long long)+0x38>
c00196fa:	01 c9                	add    ecx,ecx
c00196fc:	11 db                	adc    ebx,ebx
c00196fe:	40                   	inc    eax
c00196ff:	eb f3                	jmp    c00196f4 <Vm::fpuLongToFloat(long long)+0x28>
c0019701:	8d 76 00             	lea    esi,[esi+0x0]
c0019704:	ba 33 04 00 00       	mov    edx,0x433
c0019709:	29 c2                	sub    edx,eax
c001970b:	89 c8                	mov    eax,ecx
c001970d:	c1 e2 14             	shl    edx,0x14
c0019710:	89 d9                	mov    ecx,ebx
c0019712:	89 f3                	mov    ebx,esi
c0019714:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001971a:	09 ca                	or     edx,ecx
c001971c:	84 db                	test   bl,bl
c001971e:	74 08                	je     c0019728 <Vm::fpuLongToFloat(long long)+0x5c>
c0019720:	81 ca 00 00 00 80    	or     edx,0x80000000
c0019726:	66 90                	xchg   ax,ax
c0019728:	5b                   	pop    ebx
c0019729:	5e                   	pop    esi
c001972a:	c3                   	ret    

c001972b <Vm::fpuGet0()>:
c001972b:	31 c0                	xor    eax,eax
c001972d:	31 d2                	xor    edx,edx
c001972f:	c3                   	ret    

c0019730 <Vm::fpuGet1()>:
c0019730:	b8 01 00 00 00       	mov    eax,0x1
c0019735:	31 d2                	xor    edx,edx
c0019737:	c3                   	ret    

c0019738 <Vm::fpuGetPi()>:
c0019738:	b8 03 00 00 00       	mov    eax,0x3
c001973d:	31 d2                	xor    edx,edx
c001973f:	c3                   	ret    

c0019740 <Vm::fpuGetLog2E()>:
c0019740:	83 ec 18             	sub    esp,0x18
c0019743:	68 ec 4a 02 c0       	push   0xc0024aec
c0019748:	e8 54 ac ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c001974d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019752:	31 d2                	xor    edx,edx
c0019754:	83 c4 1c             	add    esp,0x1c
c0019757:	c3                   	ret    

c0019758 <Vm::fpuGetLogE2()>:
c0019758:	83 ec 18             	sub    esp,0x18
c001975b:	68 f8 4a 02 c0       	push   0xc0024af8
c0019760:	e8 3c ac ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c0019765:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001976a:	31 d2                	xor    edx,edx
c001976c:	83 c4 1c             	add    esp,0x1c
c001976f:	c3                   	ret    

c0019770 <Vm::fpuGetLog210()>:
c0019770:	83 ec 18             	sub    esp,0x18
c0019773:	68 04 4b 02 c0       	push   0xc0024b04
c0019778:	e8 24 ac ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c001977d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019782:	31 d2                	xor    edx,edx
c0019784:	83 c4 1c             	add    esp,0x1c
c0019787:	c3                   	ret    

c0019788 <Vm::fpuGetLog102()>:
c0019788:	83 ec 18             	sub    esp,0x18
c001978b:	68 11 4b 02 c0       	push   0xc0024b11
c0019790:	e8 0c ac ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c0019795:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001979a:	31 d2                	xor    edx,edx
c001979c:	83 c4 1c             	add    esp,0x1c
c001979f:	c3                   	ret    

c00197a0 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c00197a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00197a4:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00197a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197ac:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c00197b0:	0f 92 c0             	setb   al
c00197b3:	c3                   	ret    

c00197b4 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c00197b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00197b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00197bc:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c00197c0:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c00197c4:	09 c2                	or     edx,eax
c00197c6:	0f 94 c0             	sete   al
c00197c9:	c3                   	ret    

c00197ca <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c00197ca:	57                   	push   edi
c00197cb:	56                   	push   esi
c00197cc:	53                   	push   ebx
c00197cd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00197d1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00197d5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00197d9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00197dd:	57                   	push   edi
c00197de:	56                   	push   esi
c00197df:	53                   	push   ebx
c00197e0:	51                   	push   ecx
c00197e1:	e8 ce ff ff ff       	call   c00197b4 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c00197e6:	83 c4 10             	add    esp,0x10
c00197e9:	88 c2                	mov    dl,al
c00197eb:	31 c0                	xor    eax,eax
c00197ed:	84 d2                	test   dl,dl
c00197ef:	75 0f                	jne    c0019800 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c00197f1:	57                   	push   edi
c00197f2:	56                   	push   esi
c00197f3:	53                   	push   ebx
c00197f4:	51                   	push   ecx
c00197f5:	e8 a6 ff ff ff       	call   c00197a0 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c00197fa:	83 c4 10             	add    esp,0x10
c00197fd:	8d 76 00             	lea    esi,[esi+0x0]
c0019800:	83 e0 01             	and    eax,0x1
c0019803:	5b                   	pop    ebx
c0019804:	88 c1                	mov    cl,al
c0019806:	83 e2 01             	and    edx,0x1
c0019809:	a0 e1 79 02 c0       	mov    al,ds:0xc00279e1
c001980e:	c1 e2 06             	shl    edx,0x6
c0019811:	83 e0 ba             	and    eax,0xffffffba
c0019814:	5e                   	pop    esi
c0019815:	09 c8                	or     eax,ecx
c0019817:	5f                   	pop    edi
c0019818:	09 d0                	or     eax,edx
c001981a:	a2 e1 79 02 c0       	mov    ds:0xc00279e1,al
c001981f:	c3                   	ret    

c0019820 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c0019820:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019824:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019828:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001982c:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c0019830:	c3                   	ret    

c0019831 <Vm::fpuAbs(unsigned long long)>:
c0019831:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019835:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019839:	c3                   	ret    

c001983a <Vm::fpuChs(unsigned long long)>:
c001983a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001983e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019842:	f7 d8                	neg    eax
c0019844:	83 d2 00             	adc    edx,0x0
c0019847:	f7 da                	neg    edx
c0019849:	c3                   	ret    

c001984a <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001984a:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001984e:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c0019853:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c0019857:	eb c7                	jmp    c0019820 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c0019859 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c0019859:	53                   	push   ebx
c001985a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001985e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019862:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019866:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001986a:	0f af ca             	imul   ecx,edx
c001986d:	0f af d8             	imul   ebx,eax
c0019870:	f7 e2                	mul    edx
c0019872:	01 d9                	add    ecx,ebx
c0019874:	5b                   	pop    ebx
c0019875:	01 ca                	add    edx,ecx
c0019877:	c3                   	ret    

c0019878 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c0019878:	83 ec 0c             	sub    esp,0xc
c001987b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001987f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019883:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019887:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001988b:	e8 14 77 00 00       	call   c0020fa4 <__udivdi3>
c0019890:	83 c4 1c             	add    esp,0x1c
c0019893:	c3                   	ret    

c0019894 <Vm::fpuSquare(unsigned long long)>:
c0019894:	50                   	push   eax
c0019895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001989d:	52                   	push   edx
c001989e:	50                   	push   eax
c001989f:	52                   	push   edx
c00198a0:	50                   	push   eax
c00198a1:	e8 b3 ff ff ff       	call   c0019859 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00198a6:	83 c4 14             	add    esp,0x14
c00198a9:	c3                   	ret    

c00198aa <Vm::fpuGetReg(int)>:
c00198aa:	83 ec 0c             	sub    esp,0xc
c00198ad:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c00198b2:	76 10                	jbe    c00198c4 <Vm::fpuGetReg(int)+0x1a>
c00198b4:	83 ec 0c             	sub    esp,0xc
c00198b7:	68 1e 4b 02 c0       	push   0xc0024b1e
c00198bc:	e8 e0 aa ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c00198c1:	83 c4 10             	add    esp,0x10
c00198c4:	a0 e1 79 02 c0       	mov    al,ds:0xc00279e1
c00198c9:	b9 08 00 00 00       	mov    ecx,0x8
c00198ce:	c0 e8 03             	shr    al,0x3
c00198d1:	83 e0 07             	and    eax,0x7
c00198d4:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00198d8:	99                   	cdq    
c00198d9:	f7 f9                	idiv   ecx
c00198db:	8b 04 d5 e4 79 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd861c]
c00198e2:	8b 14 d5 e8 79 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd8618]
c00198e9:	83 c4 0c             	add    esp,0xc
c00198ec:	c3                   	ret    

c00198ed <Vm::fpuSetReg(int, unsigned long long)>:
c00198ed:	57                   	push   edi
c00198ee:	56                   	push   esi
c00198ef:	52                   	push   edx
c00198f0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00198f4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00198f8:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c00198fd:	76 11                	jbe    c0019910 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c00198ff:	83 ec 0c             	sub    esp,0xc
c0019902:	68 31 4b 02 c0       	push   0xc0024b31
c0019907:	e8 95 aa ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c001990c:	83 c4 10             	add    esp,0x10
c001990f:	90                   	nop
c0019910:	a0 e1 79 02 c0       	mov    al,ds:0xc00279e1
c0019915:	b9 08 00 00 00       	mov    ecx,0x8
c001991a:	c0 e8 03             	shr    al,0x3
c001991d:	83 e0 07             	and    eax,0x7
c0019920:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0019924:	99                   	cdq    
c0019925:	f7 f9                	idiv   ecx
c0019927:	89 34 d5 e4 79 02 c0 	mov    DWORD PTR [edx*8-0x3ffd861c],esi
c001992e:	89 3c d5 e8 79 02 c0 	mov    DWORD PTR [edx*8-0x3ffd8618],edi
c0019935:	58                   	pop    eax
c0019936:	5e                   	pop    esi
c0019937:	5f                   	pop    edi
c0019938:	c3                   	ret    

c0019939 <Vm::fpuPush(unsigned long long)>:
c0019939:	a0 e1 79 02 c0       	mov    al,ds:0xc00279e1
c001993e:	c0 e8 03             	shr    al,0x3
c0019941:	83 e0 07             	and    eax,0x7
c0019944:	83 c0 07             	add    eax,0x7
c0019947:	88 c2                	mov    dl,al
c0019949:	83 e0 07             	and    eax,0x7
c001994c:	83 e2 07             	and    edx,0x7
c001994f:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c0019956:	8a 15 e1 79 02 c0    	mov    dl,BYTE PTR ds:0xc00279e1
c001995c:	83 e2 c7             	and    edx,0xffffffc7
c001995f:	09 ca                	or     edx,ecx
c0019961:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019965:	88 15 e1 79 02 c0    	mov    BYTE PTR ds:0xc00279e1,dl
c001996b:	89 0c c5 e8 79 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8618],ecx
c0019972:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019976:	89 14 c5 e4 79 02 c0 	mov    DWORD PTR [eax*8-0x3ffd861c],edx
c001997d:	a1 24 7a 02 c0       	mov    eax,ds:0xc0027a24
c0019982:	83 f8 08             	cmp    eax,0x8
c0019985:	75 09                	jne    c0019990 <Vm::fpuPush(unsigned long long)+0x57>
c0019987:	80 0d e0 79 02 c0 40 	or     BYTE PTR ds:0xc00279e0,0x40
c001998e:	c3                   	ret    
c001998f:	90                   	nop
c0019990:	40                   	inc    eax
c0019991:	a3 24 7a 02 c0       	mov    ds:0xc0027a24,eax
c0019996:	c3                   	ret    

c0019997 <Vm::fpuPop()>:
c0019997:	8a 0d e1 79 02 c0    	mov    cl,BYTE PTR ds:0xc00279e1
c001999d:	53                   	push   ebx
c001999e:	c0 e9 03             	shr    cl,0x3
c00199a1:	8a 1d e1 79 02 c0    	mov    bl,BYTE PTR ds:0xc00279e1
c00199a7:	83 e1 07             	and    ecx,0x7
c00199aa:	83 e3 c7             	and    ebx,0xffffffc7
c00199ad:	8b 04 cd e4 79 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd861c]
c00199b4:	8b 14 cd e8 79 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd8618]
c00199bb:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c00199c2:	83 e1 38             	and    ecx,0x38
c00199c5:	09 d9                	or     ecx,ebx
c00199c7:	88 0d e1 79 02 c0    	mov    BYTE PTR ds:0xc00279e1,cl
c00199cd:	8b 0d 24 7a 02 c0    	mov    ecx,DWORD PTR ds:0xc0027a24
c00199d3:	85 c9                	test   ecx,ecx
c00199d5:	74 09                	je     c00199e0 <Vm::fpuPop()+0x49>
c00199d7:	49                   	dec    ecx
c00199d8:	89 0d 24 7a 02 c0    	mov    DWORD PTR ds:0xc0027a24,ecx
c00199de:	eb 08                	jmp    c00199e8 <Vm::fpuPop()+0x51>
c00199e0:	80 0d e0 79 02 c0 40 	or     BYTE PTR ds:0xc00279e0,0x40
c00199e7:	90                   	nop
c00199e8:	5b                   	pop    ebx
c00199e9:	c3                   	ret    

c00199ea <Vm::x87Handler(regs*)>:
c00199ea:	55                   	push   ebp
c00199eb:	57                   	push   edi
c00199ec:	56                   	push   esi
c00199ed:	53                   	push   ebx
c00199ee:	83 ec 1c             	sub    esp,0x1c
c00199f1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00199f5:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c00199fa:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00199fd:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0019a05:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0019a09:	50                   	push   eax
c0019a0a:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0019a0e:	50                   	push   eax
c0019a0f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019a13:	50                   	push   eax
c0019a14:	53                   	push   ebx
c0019a15:	e8 a0 a0 ff ff       	call   c0013aba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0019a1a:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0019a1d:	83 c4 10             	add    esp,0x10
c0019a20:	89 c6                	mov    esi,eax
c0019a22:	80 fa d9             	cmp    dl,0xd9
c0019a25:	0f 85 79 01 00 00    	jne    c0019ba4 <Vm::x87Handler(regs*)+0x1ba>
c0019a2b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019a2f:	8d 50 20             	lea    edx,[eax+0x20]
c0019a32:	80 fa 0e             	cmp    dl,0xe
c0019a35:	0f 87 a5 00 00 00    	ja     c0019ae0 <Vm::x87Handler(regs*)+0xf6>
c0019a3b:	0f b6 d2             	movzx  edx,dl
c0019a3e:	ff 24 95 44 4b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdb4bc]
c0019a45:	8d 76 00             	lea    esi,[esi+0x0]
c0019a48:	e8 de fc ff ff       	call   c001972b <Vm::fpuGet0()>
c0019a4d:	eb 09                	jmp    c0019a58 <Vm::x87Handler(regs*)+0x6e>
c0019a4f:	90                   	nop
c0019a50:	e8 db fc ff ff       	call   c0019730 <Vm::fpuGet1()>
c0019a55:	8d 76 00             	lea    esi,[esi+0x0]
c0019a58:	57                   	push   edi
c0019a59:	57                   	push   edi
c0019a5a:	66 90                	xchg   ax,ax
c0019a5c:	52                   	push   edx
c0019a5d:	50                   	push   eax
c0019a5e:	e8 d6 fe ff ff       	call   c0019939 <Vm::fpuPush(unsigned long long)>
c0019a63:	90                   	nop
c0019a64:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019a68:	83 c4 10             	add    esp,0x10
c0019a6b:	90                   	nop
c0019a6c:	b0 01                	mov    al,0x1
c0019a6e:	e9 89 0a 00 00       	jmp    c001a4fc <Vm::x87Handler(regs*)+0xb12>
c0019a73:	90                   	nop
c0019a74:	83 ec 0c             	sub    esp,0xc
c0019a77:	6a 00                	push   0x0
c0019a79:	e8 2c fe ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c0019a7e:	59                   	pop    ecx
c0019a7f:	5e                   	pop    esi
c0019a80:	52                   	push   edx
c0019a81:	50                   	push   eax
c0019a82:	e8 b3 fd ff ff       	call   c001983a <Vm::fpuChs(unsigned long long)>
c0019a87:	eb 17                	jmp    c0019aa0 <Vm::x87Handler(regs*)+0xb6>
c0019a89:	8d 76 00             	lea    esi,[esi+0x0]
c0019a8c:	83 ec 0c             	sub    esp,0xc
c0019a8f:	6a 00                	push   0x0
c0019a91:	e8 14 fe ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c0019a96:	5f                   	pop    edi
c0019a97:	5d                   	pop    ebp
c0019a98:	52                   	push   edx
c0019a99:	50                   	push   eax
c0019a9a:	e8 92 fd ff ff       	call   c0019831 <Vm::fpuAbs(unsigned long long)>
c0019a9f:	90                   	nop
c0019aa0:	83 c4 0c             	add    esp,0xc
c0019aa3:	90                   	nop
c0019aa4:	52                   	push   edx
c0019aa5:	50                   	push   eax
c0019aa6:	66 90                	xchg   ax,ax
c0019aa8:	6a 00                	push   0x0
c0019aaa:	66 90                	xchg   ax,ax
c0019aac:	e8 3c fe ff ff       	call   c00198ed <Vm::fpuSetReg(int, unsigned long long)>
c0019ab1:	eb b1                	jmp    c0019a64 <Vm::x87Handler(regs*)+0x7a>
c0019ab3:	90                   	nop
c0019ab4:	e8 b7 fc ff ff       	call   c0019770 <Vm::fpuGetLog210()>
c0019ab9:	eb 9d                	jmp    c0019a58 <Vm::x87Handler(regs*)+0x6e>
c0019abb:	90                   	nop
c0019abc:	e8 7f fc ff ff       	call   c0019740 <Vm::fpuGetLog2E()>
c0019ac1:	eb 95                	jmp    c0019a58 <Vm::x87Handler(regs*)+0x6e>
c0019ac3:	90                   	nop
c0019ac4:	e8 6f fc ff ff       	call   c0019738 <Vm::fpuGetPi()>
c0019ac9:	eb 8d                	jmp    c0019a58 <Vm::x87Handler(regs*)+0x6e>
c0019acb:	90                   	nop
c0019acc:	e8 b7 fc ff ff       	call   c0019788 <Vm::fpuGetLog102()>
c0019ad1:	eb 85                	jmp    c0019a58 <Vm::x87Handler(regs*)+0x6e>
c0019ad3:	90                   	nop
c0019ad4:	e8 7f fc ff ff       	call   c0019758 <Vm::fpuGetLogE2()>
c0019ad9:	e9 7a ff ff ff       	jmp    c0019a58 <Vm::x87Handler(regs*)+0x6e>
c0019ade:	66 90                	xchg   ax,ax
c0019ae0:	8d 50 40             	lea    edx,[eax+0x40]
c0019ae3:	80 fa 07             	cmp    dl,0x7
c0019ae6:	77 18                	ja     c0019b00 <Vm::x87Handler(regs*)+0x116>
c0019ae8:	83 ec 0c             	sub    esp,0xc
c0019aeb:	2d c0 00 00 00       	sub    eax,0xc0
c0019af0:	50                   	push   eax
c0019af1:	e8 b4 fd ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c0019af6:	59                   	pop    ecx
c0019af7:	5e                   	pop    esi
c0019af8:	e9 5f ff ff ff       	jmp    c0019a5c <Vm::x87Handler(regs*)+0x72>
c0019afd:	8d 76 00             	lea    esi,[esi+0x0]
c0019b00:	8d 50 38             	lea    edx,[eax+0x38]
c0019b03:	80 fa 07             	cmp    dl,0x7
c0019b06:	77 3c                	ja     c0019b44 <Vm::x87Handler(regs*)+0x15a>
c0019b08:	83 ec 0c             	sub    esp,0xc
c0019b0b:	2d c8 00 00 00       	sub    eax,0xc8
c0019b10:	50                   	push   eax
c0019b11:	e8 94 fd ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c0019b16:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019b1d:	89 c6                	mov    esi,eax
c0019b1f:	89 d7                	mov    edi,edx
c0019b21:	e8 84 fd ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c0019b26:	83 c4 0c             	add    esp,0xc
c0019b29:	52                   	push   edx
c0019b2a:	50                   	push   eax
c0019b2b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019b2f:	2d c8 00 00 00       	sub    eax,0xc8
c0019b34:	50                   	push   eax
c0019b35:	e8 b3 fd ff ff       	call   c00198ed <Vm::fpuSetReg(int, unsigned long long)>
c0019b3a:	83 c4 0c             	add    esp,0xc
c0019b3d:	57                   	push   edi
c0019b3e:	56                   	push   esi
c0019b3f:	e9 64 ff ff ff       	jmp    c0019aa8 <Vm::x87Handler(regs*)+0xbe>
c0019b44:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019b48:	84 d2                	test   dl,dl
c0019b4a:	75 10                	jne    c0019b5c <Vm::x87Handler(regs*)+0x172>
c0019b4c:	83 ec 0c             	sub    esp,0xc
c0019b4f:	ff 36                	push   DWORD PTR [esi]
c0019b51:	e8 8d fa ff ff       	call   c00195e3 <Vm::fpu32ToInternal(unsigned int)>
c0019b56:	e9 c9 00 00 00       	jmp    c0019c24 <Vm::x87Handler(regs*)+0x23a>
c0019b5b:	90                   	nop
c0019b5c:	80 fa 03             	cmp    dl,0x3
c0019b5f:	75 13                	jne    c0019b74 <Vm::x87Handler(regs*)+0x18a>
c0019b61:	e8 31 fe ff ff       	call   c0019997 <Vm::fpuPop()>
c0019b66:	55                   	push   ebp
c0019b67:	55                   	push   ebp
c0019b68:	52                   	push   edx
c0019b69:	50                   	push   eax
c0019b6a:	e8 0d fa ff ff       	call   c001957c <Vm::fpuInternalTo32(unsigned long long)>
c0019b6f:	e9 90 00 00 00       	jmp    c0019c04 <Vm::x87Handler(regs*)+0x21a>
c0019b74:	80 fa 05             	cmp    dl,0x5
c0019b77:	75 0f                	jne    c0019b88 <Vm::x87Handler(regs*)+0x19e>
c0019b79:	66 8b 06             	mov    ax,WORD PTR [esi]
c0019b7c:	66 a3 e2 79 02 c0    	mov    ds:0xc00279e2,ax
c0019b82:	e9 ed 00 00 00       	jmp    c0019c74 <Vm::x87Handler(regs*)+0x28a>
c0019b87:	90                   	nop
c0019b88:	31 c0                	xor    eax,eax
c0019b8a:	80 fa 07             	cmp    dl,0x7
c0019b8d:	0f 85 69 09 00 00    	jne    c001a4fc <Vm::x87Handler(regs*)+0xb12>
c0019b93:	66 a1 e2 79 02 c0    	mov    ax,ds:0xc00279e2
c0019b99:	66 89 06             	mov    WORD PTR [esi],ax
c0019b9c:	e9 d3 00 00 00       	jmp    c0019c74 <Vm::x87Handler(regs*)+0x28a>
c0019ba1:	8d 76 00             	lea    esi,[esi+0x0]
c0019ba4:	80 fa d8             	cmp    dl,0xd8
c0019ba7:	0f 84 d3 00 00 00    	je     c0019c80 <Vm::x87Handler(regs*)+0x296>
c0019bad:	80 fa dc             	cmp    dl,0xdc
c0019bb0:	0f 84 2a 02 00 00    	je     c0019de0 <Vm::x87Handler(regs*)+0x3f6>
c0019bb6:	80 fa de             	cmp    dl,0xde
c0019bb9:	0f 84 f1 02 00 00    	je     c0019eb0 <Vm::x87Handler(regs*)+0x4c6>
c0019bbf:	80 fa dd             	cmp    dl,0xdd
c0019bc2:	0f 84 94 04 00 00    	je     c001a05c <Vm::x87Handler(regs*)+0x672>
c0019bc8:	80 fa da             	cmp    dl,0xda
c0019bcb:	0f 84 5f 05 00 00    	je     c001a130 <Vm::x87Handler(regs*)+0x746>
c0019bd1:	80 fa df             	cmp    dl,0xdf
c0019bd4:	0f 84 aa 05 00 00    	je     c001a184 <Vm::x87Handler(regs*)+0x79a>
c0019bda:	31 c0                	xor    eax,eax
c0019bdc:	80 fa db             	cmp    dl,0xdb
c0019bdf:	0f 85 17 09 00 00    	jne    c001a4fc <Vm::x87Handler(regs*)+0xb12>
c0019be5:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019be9:	80 fa 03             	cmp    dl,0x3
c0019bec:	0f 85 c2 06 00 00    	jne    c001a2b4 <Vm::x87Handler(regs*)+0x8ca>
c0019bf2:	e8 a0 fd ff ff       	call   c0019997 <Vm::fpuPop()>
c0019bf7:	55                   	push   ebp
c0019bf8:	55                   	push   ebp
c0019bf9:	8d 76 00             	lea    esi,[esi+0x0]
c0019bfc:	52                   	push   edx
c0019bfd:	50                   	push   eax
c0019bfe:	e8 2e fa ff ff       	call   c0019631 <Vm::fpuFloatToLong(unsigned long long)>
c0019c03:	90                   	nop
c0019c04:	83 c4 10             	add    esp,0x10
c0019c07:	89 06                	mov    DWORD PTR [esi],eax
c0019c09:	eb 69                	jmp    c0019c74 <Vm::x87Handler(regs*)+0x28a>
c0019c0b:	90                   	nop
c0019c0c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019c10:	84 d2                	test   dl,dl
c0019c12:	0f 85 2c 06 00 00    	jne    c001a244 <Vm::x87Handler(regs*)+0x85a>
c0019c18:	57                   	push   edi
c0019c19:	57                   	push   edi
c0019c1a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019c1d:	ff 36                	push   DWORD PTR [esi]
c0019c1f:	e8 04 fa ff ff       	call   c0019628 <Vm::fpu64ToInternal(unsigned long long)>
c0019c24:	5e                   	pop    esi
c0019c25:	5f                   	pop    edi
c0019c26:	52                   	push   edx
c0019c27:	50                   	push   eax
c0019c28:	e8 0c fd ff ff       	call   c0019939 <Vm::fpuPush(unsigned long long)>
c0019c2d:	8d 76 00             	lea    esi,[esi+0x0]
c0019c30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019c34:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0019c37:	e9 2c fe ff ff       	jmp    c0019a68 <Vm::x87Handler(regs*)+0x7e>
c0019c3c:	80 fa 03             	cmp    dl,0x3
c0019c3f:	0f 85 2b 07 00 00    	jne    c001a370 <Vm::x87Handler(regs*)+0x986>
c0019c45:	57                   	push   edi
c0019c46:	57                   	push   edi
c0019c47:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019c4a:	ff 36                	push   DWORD PTR [esi]
c0019c4c:	e8 d7 f9 ff ff       	call   c0019628 <Vm::fpu64ToInternal(unsigned long long)>
c0019c51:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019c58:	89 c6                	mov    esi,eax
c0019c5a:	89 d7                	mov    edi,edx
c0019c5c:	e8 49 fc ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c0019c61:	57                   	push   edi
c0019c62:	56                   	push   esi
c0019c63:	52                   	push   edx
c0019c64:	50                   	push   eax
c0019c65:	e8 60 fb ff ff       	call   c00197ca <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0019c6a:	83 c4 20             	add    esp,0x20
c0019c6d:	e8 25 fd ff ff       	call   c0019997 <Vm::fpuPop()>
c0019c72:	66 90                	xchg   ax,ax
c0019c74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019c78:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0019c7b:	e9 ec fd ff ff       	jmp    c0019a6c <Vm::x87Handler(regs*)+0x82>
c0019c80:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019c84:	8d 50 40             	lea    edx,[eax+0x40]
c0019c87:	80 fa 07             	cmp    dl,0x7
c0019c8a:	77 2c                	ja     c0019cb8 <Vm::x87Handler(regs*)+0x2ce>
c0019c8c:	83 ec 0c             	sub    esp,0xc
c0019c8f:	2d c0 00 00 00       	sub    eax,0xc0
c0019c94:	50                   	push   eax
c0019c95:	e8 10 fc ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c0019c9a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019ca1:	89 c6                	mov    esi,eax
c0019ca3:	89 d7                	mov    edi,edx
c0019ca5:	e8 00 fc ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c0019caa:	57                   	push   edi
c0019cab:	56                   	push   esi
c0019cac:	52                   	push   edx
c0019cad:	50                   	push   eax
c0019cae:	e8 6d fb ff ff       	call   c0019820 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019cb3:	eb 33                	jmp    c0019ce8 <Vm::x87Handler(regs*)+0x2fe>
c0019cb5:	8d 76 00             	lea    esi,[esi+0x0]
c0019cb8:	8d 50 38             	lea    edx,[eax+0x38]
c0019cbb:	80 fa 07             	cmp    dl,0x7
c0019cbe:	77 30                	ja     c0019cf0 <Vm::x87Handler(regs*)+0x306>
c0019cc0:	83 ec 0c             	sub    esp,0xc
c0019cc3:	2d c8 00 00 00       	sub    eax,0xc8
c0019cc8:	50                   	push   eax
c0019cc9:	e8 dc fb ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c0019cce:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019cd5:	89 c6                	mov    esi,eax
c0019cd7:	89 d7                	mov    edi,edx
c0019cd9:	e8 cc fb ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c0019cde:	57                   	push   edi
c0019cdf:	56                   	push   esi
c0019ce0:	52                   	push   edx
c0019ce1:	50                   	push   eax
c0019ce2:	e8 72 fb ff ff       	call   c0019859 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019ce7:	90                   	nop
c0019ce8:	83 c4 1c             	add    esp,0x1c
c0019ceb:	e9 b4 fd ff ff       	jmp    c0019aa4 <Vm::x87Handler(regs*)+0xba>
c0019cf0:	8d 50 30             	lea    edx,[eax+0x30]
c0019cf3:	80 fa 07             	cmp    dl,0x7
c0019cf6:	77 10                	ja     c0019d08 <Vm::x87Handler(regs*)+0x31e>
c0019cf8:	83 ec 0c             	sub    esp,0xc
c0019cfb:	2d d0 00 00 00       	sub    eax,0xd0
c0019d00:	e9 c3 03 00 00       	jmp    c001a0c8 <Vm::x87Handler(regs*)+0x6de>
c0019d05:	8d 76 00             	lea    esi,[esi+0x0]
c0019d08:	8d 50 28             	lea    edx,[eax+0x28]
c0019d0b:	80 fa 07             	cmp    dl,0x7
c0019d0e:	77 10                	ja     c0019d20 <Vm::x87Handler(regs*)+0x336>
c0019d10:	83 ec 0c             	sub    esp,0xc
c0019d13:	2d d8 00 00 00       	sub    eax,0xd8
c0019d18:	e9 e7 03 00 00       	jmp    c001a104 <Vm::x87Handler(regs*)+0x71a>
c0019d1d:	8d 76 00             	lea    esi,[esi+0x0]
c0019d20:	8d 50 20             	lea    edx,[eax+0x20]
c0019d23:	80 fa 07             	cmp    dl,0x7
c0019d26:	77 1c                	ja     c0019d44 <Vm::x87Handler(regs*)+0x35a>
c0019d28:	83 ec 0c             	sub    esp,0xc
c0019d2b:	2d e0 00 00 00       	sub    eax,0xe0
c0019d30:	50                   	push   eax
c0019d31:	e8 74 fb ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c0019d36:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019d3d:	89 c6                	mov    esi,eax
c0019d3f:	89 d7                	mov    edi,edx
c0019d41:	eb 25                	jmp    c0019d68 <Vm::x87Handler(regs*)+0x37e>
c0019d43:	90                   	nop
c0019d44:	8d 50 18             	lea    edx,[eax+0x18]
c0019d47:	80 fa 07             	cmp    dl,0x7
c0019d4a:	77 30                	ja     c0019d7c <Vm::x87Handler(regs*)+0x392>
c0019d4c:	83 ec 0c             	sub    esp,0xc
c0019d4f:	6a 00                	push   0x0
c0019d51:	e8 54 fb ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c0019d56:	89 c6                	mov    esi,eax
c0019d58:	89 d7                	mov    edi,edx
c0019d5a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019d5e:	2d e8 00 00 00       	sub    eax,0xe8
c0019d63:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d66:	66 90                	xchg   ax,ax
c0019d68:	e8 3d fb ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c0019d6d:	57                   	push   edi
c0019d6e:	56                   	push   esi
c0019d6f:	52                   	push   edx
c0019d70:	50                   	push   eax
c0019d71:	e8 d4 fa ff ff       	call   c001984a <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019d76:	e9 6d ff ff ff       	jmp    c0019ce8 <Vm::x87Handler(regs*)+0x2fe>
c0019d7b:	90                   	nop
c0019d7c:	8d 50 10             	lea    edx,[eax+0x10]
c0019d7f:	80 fa 07             	cmp    dl,0x7
c0019d82:	77 1c                	ja     c0019da0 <Vm::x87Handler(regs*)+0x3b6>
c0019d84:	83 ec 0c             	sub    esp,0xc
c0019d87:	2d f0 00 00 00       	sub    eax,0xf0
c0019d8c:	50                   	push   eax
c0019d8d:	e8 18 fb ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c0019d92:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019d99:	89 c6                	mov    esi,eax
c0019d9b:	89 d7                	mov    edi,edx
c0019d9d:	eb 25                	jmp    c0019dc4 <Vm::x87Handler(regs*)+0x3da>
c0019d9f:	90                   	nop
c0019da0:	3c f7                	cmp    al,0xf7
c0019da2:	0f 86 00 04 00 00    	jbe    c001a1a8 <Vm::x87Handler(regs*)+0x7be>
c0019da8:	83 ec 0c             	sub    esp,0xc
c0019dab:	6a 00                	push   0x0
c0019dad:	e8 f8 fa ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c0019db2:	89 c6                	mov    esi,eax
c0019db4:	89 d7                	mov    edi,edx
c0019db6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019dba:	2d f8 00 00 00       	sub    eax,0xf8
c0019dbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0019dc2:	66 90                	xchg   ax,ax
c0019dc4:	e8 e1 fa ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c0019dc9:	57                   	push   edi
c0019dca:	56                   	push   esi
c0019dcb:	52                   	push   edx
c0019dcc:	50                   	push   eax
c0019dcd:	e8 a6 fa ff ff       	call   c0019878 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019dd2:	83 c4 1c             	add    esp,0x1c
c0019dd5:	52                   	push   edx
c0019dd6:	50                   	push   eax
c0019dd7:	6a 00                	push   0x0
c0019dd9:	e9 6a 02 00 00       	jmp    c001a048 <Vm::x87Handler(regs*)+0x65e>
c0019dde:	66 90                	xchg   ax,ax
c0019de0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019de4:	8d 50 40             	lea    edx,[eax+0x40]
c0019de7:	80 fa 07             	cmp    dl,0x7
c0019dea:	77 38                	ja     c0019e24 <Vm::x87Handler(regs*)+0x43a>
c0019dec:	83 ec 0c             	sub    esp,0xc
c0019def:	2d c0 00 00 00       	sub    eax,0xc0
c0019df4:	50                   	push   eax
c0019df5:	e8 b0 fa ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c0019dfa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019e01:	89 c6                	mov    esi,eax
c0019e03:	89 d7                	mov    edi,edx
c0019e05:	e8 a0 fa ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c0019e0a:	57                   	push   edi
c0019e0b:	56                   	push   esi
c0019e0c:	52                   	push   edx
c0019e0d:	50                   	push   eax
c0019e0e:	e8 0d fa ff ff       	call   c0019820 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019e13:	83 c4 1c             	add    esp,0x1c
c0019e16:	52                   	push   edx
c0019e17:	50                   	push   eax
c0019e18:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e1c:	2d c0 00 00 00       	sub    eax,0xc0
c0019e21:	eb 41                	jmp    c0019e64 <Vm::x87Handler(regs*)+0x47a>
c0019e23:	90                   	nop
c0019e24:	8d 50 38             	lea    edx,[eax+0x38]
c0019e27:	80 fa 07             	cmp    dl,0x7
c0019e2a:	77 40                	ja     c0019e6c <Vm::x87Handler(regs*)+0x482>
c0019e2c:	83 ec 0c             	sub    esp,0xc
c0019e2f:	2d c8 00 00 00       	sub    eax,0xc8
c0019e34:	50                   	push   eax
c0019e35:	e8 70 fa ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c0019e3a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019e41:	89 c6                	mov    esi,eax
c0019e43:	89 d7                	mov    edi,edx
c0019e45:	e8 60 fa ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c0019e4a:	57                   	push   edi
c0019e4b:	56                   	push   esi
c0019e4c:	52                   	push   edx
c0019e4d:	50                   	push   eax
c0019e4e:	e8 06 fa ff ff       	call   c0019859 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019e53:	83 c4 1c             	add    esp,0x1c
c0019e56:	52                   	push   edx
c0019e57:	50                   	push   eax
c0019e58:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e5c:	2d c8 00 00 00       	sub    eax,0xc8
c0019e61:	8d 76 00             	lea    esi,[esi+0x0]
c0019e64:	50                   	push   eax
c0019e65:	e9 42 fc ff ff       	jmp    c0019aac <Vm::x87Handler(regs*)+0xc2>
c0019e6a:	66 90                	xchg   ax,ax
c0019e6c:	83 c0 18             	add    eax,0x18
c0019e6f:	3c 07                	cmp    al,0x7
c0019e71:	0f 87 6d 04 00 00    	ja     c001a2e4 <Vm::x87Handler(regs*)+0x8fa>
c0019e77:	83 ec 0c             	sub    esp,0xc
c0019e7a:	6a 00                	push   0x0
c0019e7c:	e8 29 fa ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c0019e81:	89 c6                	mov    esi,eax
c0019e83:	89 d7                	mov    edi,edx
c0019e85:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e89:	2d e8 00 00 00       	sub    eax,0xe8
c0019e8e:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e91:	e8 14 fa ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c0019e96:	57                   	push   edi
c0019e97:	56                   	push   esi
c0019e98:	52                   	push   edx
c0019e99:	50                   	push   eax
c0019e9a:	e8 ab f9 ff ff       	call   c001984a <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019e9f:	83 c4 1c             	add    esp,0x1c
c0019ea2:	52                   	push   edx
c0019ea3:	50                   	push   eax
c0019ea4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019ea8:	2d e8 00 00 00       	sub    eax,0xe8
c0019ead:	eb b5                	jmp    c0019e64 <Vm::x87Handler(regs*)+0x47a>
c0019eaf:	90                   	nop
c0019eb0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019eb4:	8d 50 40             	lea    edx,[eax+0x40]
c0019eb7:	80 fa 07             	cmp    dl,0x7
c0019eba:	77 3c                	ja     c0019ef8 <Vm::x87Handler(regs*)+0x50e>
c0019ebc:	83 ec 0c             	sub    esp,0xc
c0019ebf:	2d c0 00 00 00       	sub    eax,0xc0
c0019ec4:	50                   	push   eax
c0019ec5:	e8 e0 f9 ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c0019eca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019ed1:	89 c6                	mov    esi,eax
c0019ed3:	89 d7                	mov    edi,edx
c0019ed5:	e8 d0 f9 ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c0019eda:	57                   	push   edi
c0019edb:	56                   	push   esi
c0019edc:	52                   	push   edx
c0019edd:	50                   	push   eax
c0019ede:	e8 3d f9 ff ff       	call   c0019820 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019ee3:	83 c4 1c             	add    esp,0x1c
c0019ee6:	52                   	push   edx
c0019ee7:	50                   	push   eax
c0019ee8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019eec:	2d c0 00 00 00       	sub    eax,0xc0
c0019ef1:	e9 b2 01 00 00       	jmp    c001a0a8 <Vm::x87Handler(regs*)+0x6be>
c0019ef6:	66 90                	xchg   ax,ax
c0019ef8:	8d 50 20             	lea    edx,[eax+0x20]
c0019efb:	80 fa 07             	cmp    dl,0x7
c0019efe:	77 3c                	ja     c0019f3c <Vm::x87Handler(regs*)+0x552>
c0019f00:	83 ec 0c             	sub    esp,0xc
c0019f03:	2d e0 00 00 00       	sub    eax,0xe0
c0019f08:	50                   	push   eax
c0019f09:	e8 9c f9 ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c0019f0e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019f15:	89 c6                	mov    esi,eax
c0019f17:	89 d7                	mov    edi,edx
c0019f19:	e8 8c f9 ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c0019f1e:	57                   	push   edi
c0019f1f:	56                   	push   esi
c0019f20:	52                   	push   edx
c0019f21:	50                   	push   eax
c0019f22:	e8 23 f9 ff ff       	call   c001984a <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019f27:	83 c4 1c             	add    esp,0x1c
c0019f2a:	52                   	push   edx
c0019f2b:	50                   	push   eax
c0019f2c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f30:	2d e0 00 00 00       	sub    eax,0xe0
c0019f35:	e9 6e 01 00 00       	jmp    c001a0a8 <Vm::x87Handler(regs*)+0x6be>
c0019f3a:	66 90                	xchg   ax,ax
c0019f3c:	8d 50 18             	lea    edx,[eax+0x18]
c0019f3f:	80 fa 07             	cmp    dl,0x7
c0019f42:	77 3c                	ja     c0019f80 <Vm::x87Handler(regs*)+0x596>
c0019f44:	83 ec 0c             	sub    esp,0xc
c0019f47:	6a 00                	push   0x0
c0019f49:	e8 5c f9 ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c0019f4e:	89 c6                	mov    esi,eax
c0019f50:	89 d7                	mov    edi,edx
c0019f52:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f56:	2d e8 00 00 00       	sub    eax,0xe8
c0019f5b:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f5e:	e8 47 f9 ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c0019f63:	57                   	push   edi
c0019f64:	56                   	push   esi
c0019f65:	52                   	push   edx
c0019f66:	50                   	push   eax
c0019f67:	e8 de f8 ff ff       	call   c001984a <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019f6c:	83 c4 1c             	add    esp,0x1c
c0019f6f:	52                   	push   edx
c0019f70:	50                   	push   eax
c0019f71:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f75:	2d e8 00 00 00       	sub    eax,0xe8
c0019f7a:	e9 29 01 00 00       	jmp    c001a0a8 <Vm::x87Handler(regs*)+0x6be>
c0019f7f:	90                   	nop
c0019f80:	8d 50 38             	lea    edx,[eax+0x38]
c0019f83:	80 fa 07             	cmp    dl,0x7
c0019f86:	77 3c                	ja     c0019fc4 <Vm::x87Handler(regs*)+0x5da>
c0019f88:	83 ec 0c             	sub    esp,0xc
c0019f8b:	2d c8 00 00 00       	sub    eax,0xc8
c0019f90:	50                   	push   eax
c0019f91:	e8 14 f9 ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c0019f96:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019f9d:	89 c6                	mov    esi,eax
c0019f9f:	89 d7                	mov    edi,edx
c0019fa1:	e8 04 f9 ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c0019fa6:	57                   	push   edi
c0019fa7:	56                   	push   esi
c0019fa8:	52                   	push   edx
c0019fa9:	50                   	push   eax
c0019faa:	e8 aa f8 ff ff       	call   c0019859 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019faf:	83 c4 1c             	add    esp,0x1c
c0019fb2:	52                   	push   edx
c0019fb3:	50                   	push   eax
c0019fb4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019fb8:	2d c8 00 00 00       	sub    eax,0xc8
c0019fbd:	e9 82 00 00 00       	jmp    c001a044 <Vm::x87Handler(regs*)+0x65a>
c0019fc2:	66 90                	xchg   ax,ax
c0019fc4:	3c f7                	cmp    al,0xf7
c0019fc6:	76 38                	jbe    c001a000 <Vm::x87Handler(regs*)+0x616>
c0019fc8:	83 ec 0c             	sub    esp,0xc
c0019fcb:	6a 00                	push   0x0
c0019fcd:	e8 d8 f8 ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c0019fd2:	89 c6                	mov    esi,eax
c0019fd4:	89 d7                	mov    edi,edx
c0019fd6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019fda:	2d f8 00 00 00       	sub    eax,0xf8
c0019fdf:	89 04 24             	mov    DWORD PTR [esp],eax
c0019fe2:	e8 c3 f8 ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c0019fe7:	57                   	push   edi
c0019fe8:	56                   	push   esi
c0019fe9:	52                   	push   edx
c0019fea:	50                   	push   eax
c0019feb:	e8 88 f8 ff ff       	call   c0019878 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019ff0:	83 c4 1c             	add    esp,0x1c
c0019ff3:	52                   	push   edx
c0019ff4:	50                   	push   eax
c0019ff5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019ff9:	2d f8 00 00 00       	sub    eax,0xf8
c0019ffe:	eb 44                	jmp    c001a044 <Vm::x87Handler(regs*)+0x65a>
c001a000:	8d 50 10             	lea    edx,[eax+0x10]
c001a003:	80 fa 07             	cmp    dl,0x7
c001a006:	0f 87 6c 01 00 00    	ja     c001a178 <Vm::x87Handler(regs*)+0x78e>
c001a00c:	83 ec 0c             	sub    esp,0xc
c001a00f:	2d f0 00 00 00       	sub    eax,0xf0
c001a014:	50                   	push   eax
c001a015:	e8 90 f8 ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c001a01a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a021:	89 c6                	mov    esi,eax
c001a023:	89 d7                	mov    edi,edx
c001a025:	e8 80 f8 ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c001a02a:	57                   	push   edi
c001a02b:	56                   	push   esi
c001a02c:	52                   	push   edx
c001a02d:	50                   	push   eax
c001a02e:	e8 45 f8 ff ff       	call   c0019878 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a033:	83 c4 1c             	add    esp,0x1c
c001a036:	52                   	push   edx
c001a037:	50                   	push   eax
c001a038:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a03c:	2d f0 00 00 00       	sub    eax,0xf0
c001a041:	8d 76 00             	lea    esi,[esi+0x0]
c001a044:	50                   	push   eax
c001a045:	8d 76 00             	lea    esi,[esi+0x0]
c001a048:	e8 a0 f8 ff ff       	call   c00198ed <Vm::fpuSetReg(int, unsigned long long)>
c001a04d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a051:	e8 41 f9 ff ff       	call   c0019997 <Vm::fpuPop()>
c001a056:	e9 0d fa ff ff       	jmp    c0019a68 <Vm::x87Handler(regs*)+0x7e>
c001a05b:	90                   	nop
c001a05c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a060:	8d 50 30             	lea    edx,[eax+0x30]
c001a063:	80 fa 07             	cmp    dl,0x7
c001a066:	77 20                	ja     c001a088 <Vm::x87Handler(regs*)+0x69e>
c001a068:	83 ec 0c             	sub    esp,0xc
c001a06b:	6a 00                	push   0x0
c001a06d:	e8 38 f8 ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c001a072:	83 c4 0c             	add    esp,0xc
c001a075:	52                   	push   edx
c001a076:	50                   	push   eax
c001a077:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a07b:	2d d0 00 00 00       	sub    eax,0xd0
c001a080:	e9 df fd ff ff       	jmp    c0019e64 <Vm::x87Handler(regs*)+0x47a>
c001a085:	8d 76 00             	lea    esi,[esi+0x0]
c001a088:	8d 50 28             	lea    edx,[eax+0x28]
c001a08b:	80 fa 07             	cmp    dl,0x7
c001a08e:	77 28                	ja     c001a0b8 <Vm::x87Handler(regs*)+0x6ce>
c001a090:	83 ec 0c             	sub    esp,0xc
c001a093:	6a 00                	push   0x0
c001a095:	e8 10 f8 ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c001a09a:	83 c4 0c             	add    esp,0xc
c001a09d:	52                   	push   edx
c001a09e:	50                   	push   eax
c001a09f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a0a3:	2d d8 00 00 00       	sub    eax,0xd8
c001a0a8:	50                   	push   eax
c001a0a9:	e8 3f f8 ff ff       	call   c00198ed <Vm::fpuSetReg(int, unsigned long long)>
c001a0ae:	e8 e4 f8 ff ff       	call   c0019997 <Vm::fpuPop()>
c001a0b3:	e9 ac f9 ff ff       	jmp    c0019a64 <Vm::x87Handler(regs*)+0x7a>
c001a0b8:	8d 50 20             	lea    edx,[eax+0x20]
c001a0bb:	80 fa 07             	cmp    dl,0x7
c001a0be:	77 30                	ja     c001a0f0 <Vm::x87Handler(regs*)+0x706>
c001a0c0:	83 ec 0c             	sub    esp,0xc
c001a0c3:	2d e0 00 00 00       	sub    eax,0xe0
c001a0c8:	50                   	push   eax
c001a0c9:	e8 dc f7 ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c001a0ce:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a0d5:	89 c6                	mov    esi,eax
c001a0d7:	89 d7                	mov    edi,edx
c001a0d9:	e8 cc f7 ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c001a0de:	57                   	push   edi
c001a0df:	56                   	push   esi
c001a0e0:	52                   	push   edx
c001a0e1:	50                   	push   eax
c001a0e2:	e8 e3 f6 ff ff       	call   c00197ca <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a0e7:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a0eb:	e9 78 02 00 00       	jmp    c001a368 <Vm::x87Handler(regs*)+0x97e>
c001a0f0:	8d 50 18             	lea    edx,[eax+0x18]
c001a0f3:	80 fa 07             	cmp    dl,0x7
c001a0f6:	0f 87 10 fb ff ff    	ja     c0019c0c <Vm::x87Handler(regs*)+0x222>
c001a0fc:	83 ec 0c             	sub    esp,0xc
c001a0ff:	2d e8 00 00 00       	sub    eax,0xe8
c001a104:	50                   	push   eax
c001a105:	e8 a0 f7 ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c001a10a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a111:	89 c6                	mov    esi,eax
c001a113:	89 d7                	mov    edi,edx
c001a115:	e8 90 f7 ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c001a11a:	57                   	push   edi
c001a11b:	56                   	push   esi
c001a11c:	52                   	push   edx
c001a11d:	50                   	push   eax
c001a11e:	e8 a7 f6 ff ff       	call   c00197ca <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a123:	83 c4 20             	add    esp,0x20
c001a126:	e8 6c f8 ff ff       	call   c0019997 <Vm::fpuPop()>
c001a12b:	eb 6f                	jmp    c001a19c <Vm::x87Handler(regs*)+0x7b2>
c001a12d:	8d 76 00             	lea    esi,[esi+0x0]
c001a130:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001a134:	0f 85 22 01 00 00    	jne    c001a25c <Vm::x87Handler(regs*)+0x872>
c001a13a:	66 90                	xchg   ax,ax
c001a13c:	83 ec 0c             	sub    esp,0xc
c001a13f:	6a 01                	push   0x1
c001a141:	e8 64 f7 ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c001a146:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a14d:	89 c6                	mov    esi,eax
c001a14f:	89 d7                	mov    edi,edx
c001a151:	e8 54 f7 ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c001a156:	57                   	push   edi
c001a157:	56                   	push   esi
c001a158:	52                   	push   edx
c001a159:	50                   	push   eax
c001a15a:	e8 6b f6 ff ff       	call   c00197ca <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a15f:	83 c4 20             	add    esp,0x20
c001a162:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a166:	e8 2c f8 ff ff       	call   c0019997 <Vm::fpuPop()>
c001a16b:	e8 27 f8 ff ff       	call   c0019997 <Vm::fpuPop()>
c001a170:	e9 f7 f8 ff ff       	jmp    c0019a6c <Vm::x87Handler(regs*)+0x82>
c001a175:	8d 76 00             	lea    esi,[esi+0x0]
c001a178:	3c d9                	cmp    al,0xd9
c001a17a:	0f 85 e8 02 00 00    	jne    c001a468 <Vm::x87Handler(regs*)+0xa7e>
c001a180:	eb ba                	jmp    c001a13c <Vm::x87Handler(regs*)+0x752>
c001a182:	66 90                	xchg   ax,ax
c001a184:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001a188:	0f 85 2a 03 00 00    	jne    c001a4b8 <Vm::x87Handler(regs*)+0xace>
c001a18e:	0f b7 05 e0 79 02 c0 	movzx  eax,WORD PTR ds:0xc00279e0
c001a195:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001a199:	8d 76 00             	lea    esi,[esi+0x0]
c001a19c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a1a0:	e9 c7 f8 ff ff       	jmp    c0019a6c <Vm::x87Handler(regs*)+0x82>
c001a1a5:	8d 76 00             	lea    esi,[esi+0x0]
c001a1a8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a1ac:	84 d2                	test   dl,dl
c001a1ae:	75 10                	jne    c001a1c0 <Vm::x87Handler(regs*)+0x7d6>
c001a1b0:	83 ec 0c             	sub    esp,0xc
c001a1b3:	ff 36                	push   DWORD PTR [esi]
c001a1b5:	e8 29 f4 ff ff       	call   c00195e3 <Vm::fpu32ToInternal(unsigned int)>
c001a1ba:	e9 39 01 00 00       	jmp    c001a2f8 <Vm::x87Handler(regs*)+0x90e>
c001a1bf:	90                   	nop
c001a1c0:	80 fa 01             	cmp    dl,0x1
c001a1c3:	75 0f                	jne    c001a1d4 <Vm::x87Handler(regs*)+0x7ea>
c001a1c5:	83 ec 0c             	sub    esp,0xc
c001a1c8:	ff 36                	push   DWORD PTR [esi]
c001a1ca:	e8 14 f4 ff ff       	call   c00195e3 <Vm::fpu32ToInternal(unsigned int)>
c001a1cf:	e9 b4 02 00 00       	jmp    c001a488 <Vm::x87Handler(regs*)+0xa9e>
c001a1d4:	80 fa 04             	cmp    dl,0x4
c001a1d7:	75 0f                	jne    c001a1e8 <Vm::x87Handler(regs*)+0x7fe>
c001a1d9:	83 ec 0c             	sub    esp,0xc
c001a1dc:	ff 36                	push   DWORD PTR [esi]
c001a1de:	e8 00 f4 ff ff       	call   c00195e3 <Vm::fpu32ToInternal(unsigned int)>
c001a1e3:	e9 9c 01 00 00       	jmp    c001a384 <Vm::x87Handler(regs*)+0x99a>
c001a1e8:	80 fa 05             	cmp    dl,0x5
c001a1eb:	75 1b                	jne    c001a208 <Vm::x87Handler(regs*)+0x81e>
c001a1ed:	83 ec 0c             	sub    esp,0xc
c001a1f0:	6a 00                	push   0x0
c001a1f2:	e8 b3 f6 ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c001a1f7:	89 c7                	mov    edi,eax
c001a1f9:	89 d5                	mov    ebp,edx
c001a1fb:	58                   	pop    eax
c001a1fc:	ff 36                	push   DWORD PTR [esi]
c001a1fe:	e8 e0 f3 ff ff       	call   c00195e3 <Vm::fpu32ToInternal(unsigned int)>
c001a203:	e9 bc 01 00 00       	jmp    c001a3c4 <Vm::x87Handler(regs*)+0x9da>
c001a208:	80 fa 06             	cmp    dl,0x6
c001a20b:	75 0f                	jne    c001a21c <Vm::x87Handler(regs*)+0x832>
c001a20d:	83 ec 0c             	sub    esp,0xc
c001a210:	ff 36                	push   DWORD PTR [esi]
c001a212:	e8 cc f3 ff ff       	call   c00195e3 <Vm::fpu32ToInternal(unsigned int)>
c001a217:	e9 cc 01 00 00       	jmp    c001a3e8 <Vm::x87Handler(regs*)+0x9fe>
c001a21c:	31 c0                	xor    eax,eax
c001a21e:	80 fa 07             	cmp    dl,0x7
c001a221:	0f 85 d5 02 00 00    	jne    c001a4fc <Vm::x87Handler(regs*)+0xb12>
c001a227:	83 ec 0c             	sub    esp,0xc
c001a22a:	6a 00                	push   0x0
c001a22c:	e8 79 f6 ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c001a231:	89 c7                	mov    edi,eax
c001a233:	89 d5                	mov    ebp,edx
c001a235:	58                   	pop    eax
c001a236:	ff 36                	push   DWORD PTR [esi]
c001a238:	e8 a6 f3 ff ff       	call   c00195e3 <Vm::fpu32ToInternal(unsigned int)>
c001a23d:	e9 ee 01 00 00       	jmp    c001a430 <Vm::x87Handler(regs*)+0xa46>
c001a242:	66 90                	xchg   ax,ax
c001a244:	80 fa 03             	cmp    dl,0x3
c001a247:	0f 85 f7 01 00 00    	jne    c001a444 <Vm::x87Handler(regs*)+0xa5a>
c001a24d:	e8 45 f7 ff ff       	call   c0019997 <Vm::fpuPop()>
c001a252:	51                   	push   ecx
c001a253:	51                   	push   ecx
c001a254:	e9 03 02 00 00       	jmp    c001a45c <Vm::x87Handler(regs*)+0xa72>
c001a259:	8d 76 00             	lea    esi,[esi+0x0]
c001a25c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a260:	80 fa 01             	cmp    dl,0x1
c001a263:	75 0b                	jne    c001a270 <Vm::x87Handler(regs*)+0x886>
c001a265:	57                   	push   edi
c001a266:	57                   	push   edi
c001a267:	8b 06                	mov    eax,DWORD PTR [esi]
c001a269:	e9 0e 02 00 00       	jmp    c001a47c <Vm::x87Handler(regs*)+0xa92>
c001a26e:	66 90                	xchg   ax,ax
c001a270:	80 fa 04             	cmp    dl,0x4
c001a273:	75 13                	jne    c001a288 <Vm::x87Handler(regs*)+0x89e>
c001a275:	31 d2                	xor    edx,edx
c001a277:	51                   	push   ecx
c001a278:	51                   	push   ecx
c001a279:	8b 06                	mov    eax,DWORD PTR [esi]
c001a27b:	52                   	push   edx
c001a27c:	50                   	push   eax
c001a27d:	e8 4a f4 ff ff       	call   c00196cc <Vm::fpuLongToFloat(long long)>
c001a282:	e9 fd 00 00 00       	jmp    c001a384 <Vm::x87Handler(regs*)+0x99a>
c001a287:	90                   	nop
c001a288:	31 c0                	xor    eax,eax
c001a28a:	80 fa 07             	cmp    dl,0x7
c001a28d:	0f 85 69 02 00 00    	jne    c001a4fc <Vm::x87Handler(regs*)+0xb12>
c001a293:	83 ec 0c             	sub    esp,0xc
c001a296:	6a 00                	push   0x0
c001a298:	e8 0d f6 ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c001a29d:	89 c7                	mov    edi,eax
c001a29f:	89 d5                	mov    ebp,edx
c001a2a1:	58                   	pop    eax
c001a2a2:	8b 06                	mov    eax,DWORD PTR [esi]
c001a2a4:	5a                   	pop    edx
c001a2a5:	31 d2                	xor    edx,edx
c001a2a7:	52                   	push   edx
c001a2a8:	50                   	push   eax
c001a2a9:	e8 1e f4 ff ff       	call   c00196cc <Vm::fpuLongToFloat(long long)>
c001a2ae:	e9 7d 01 00 00       	jmp    c001a430 <Vm::x87Handler(regs*)+0xa46>
c001a2b3:	90                   	nop
c001a2b4:	84 d2                	test   dl,dl
c001a2b6:	75 10                	jne    c001a2c8 <Vm::x87Handler(regs*)+0x8de>
c001a2b8:	31 d2                	xor    edx,edx
c001a2ba:	55                   	push   ebp
c001a2bb:	55                   	push   ebp
c001a2bc:	8b 06                	mov    eax,DWORD PTR [esi]
c001a2be:	52                   	push   edx
c001a2bf:	50                   	push   eax
c001a2c0:	e9 03 02 00 00       	jmp    c001a4c8 <Vm::x87Handler(regs*)+0xade>
c001a2c5:	8d 76 00             	lea    esi,[esi+0x0]
c001a2c8:	31 c0                	xor    eax,eax
c001a2ca:	80 fa 02             	cmp    dl,0x2
c001a2cd:	0f 85 29 02 00 00    	jne    c001a4fc <Vm::x87Handler(regs*)+0xb12>
c001a2d3:	83 ec 0c             	sub    esp,0xc
c001a2d6:	6a 00                	push   0x0
c001a2d8:	e8 cd f5 ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c001a2dd:	59                   	pop    ecx
c001a2de:	5f                   	pop    edi
c001a2df:	e9 18 f9 ff ff       	jmp    c0019bfc <Vm::x87Handler(regs*)+0x212>
c001a2e4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a2e8:	84 d2                	test   dl,dl
c001a2ea:	75 2c                	jne    c001a318 <Vm::x87Handler(regs*)+0x92e>
c001a2ec:	50                   	push   eax
c001a2ed:	50                   	push   eax
c001a2ee:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a2f1:	ff 36                	push   DWORD PTR [esi]
c001a2f3:	e8 30 f3 ff ff       	call   c0019628 <Vm::fpu64ToInternal(unsigned long long)>
c001a2f8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a2ff:	89 c6                	mov    esi,eax
c001a301:	89 d7                	mov    edi,edx
c001a303:	e8 a2 f5 ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c001a308:	57                   	push   edi
c001a309:	56                   	push   esi
c001a30a:	52                   	push   edx
c001a30b:	50                   	push   eax
c001a30c:	e8 0f f5 ff ff       	call   c0019820 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a311:	e9 8e 01 00 00       	jmp    c001a4a4 <Vm::x87Handler(regs*)+0xaba>
c001a316:	66 90                	xchg   ax,ax
c001a318:	80 fa 01             	cmp    dl,0x1
c001a31b:	75 13                	jne    c001a330 <Vm::x87Handler(regs*)+0x946>
c001a31d:	50                   	push   eax
c001a31e:	50                   	push   eax
c001a31f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a322:	ff 36                	push   DWORD PTR [esi]
c001a324:	e8 ff f2 ff ff       	call   c0019628 <Vm::fpu64ToInternal(unsigned long long)>
c001a329:	e9 5a 01 00 00       	jmp    c001a488 <Vm::x87Handler(regs*)+0xa9e>
c001a32e:	66 90                	xchg   ax,ax
c001a330:	80 fa 02             	cmp    dl,0x2
c001a333:	0f 85 03 f9 ff ff    	jne    c0019c3c <Vm::x87Handler(regs*)+0x252>
c001a339:	55                   	push   ebp
c001a33a:	55                   	push   ebp
c001a33b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a33e:	ff 36                	push   DWORD PTR [esi]
c001a340:	e8 e3 f2 ff ff       	call   c0019628 <Vm::fpu64ToInternal(unsigned long long)>
c001a345:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a34c:	89 c6                	mov    esi,eax
c001a34e:	89 d7                	mov    edi,edx
c001a350:	e8 55 f5 ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c001a355:	57                   	push   edi
c001a356:	56                   	push   esi
c001a357:	52                   	push   edx
c001a358:	50                   	push   eax
c001a359:	e8 6c f4 ff ff       	call   c00197ca <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a35e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a362:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a365:	8d 76 00             	lea    esi,[esi+0x0]
c001a368:	83 c4 20             	add    esp,0x20
c001a36b:	e9 fc f6 ff ff       	jmp    c0019a6c <Vm::x87Handler(regs*)+0x82>
c001a370:	80 fa 04             	cmp    dl,0x4
c001a373:	75 2f                	jne    c001a3a4 <Vm::x87Handler(regs*)+0x9ba>
c001a375:	51                   	push   ecx
c001a376:	51                   	push   ecx
c001a377:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a37a:	ff 36                	push   DWORD PTR [esi]
c001a37c:	e8 a7 f2 ff ff       	call   c0019628 <Vm::fpu64ToInternal(unsigned long long)>
c001a381:	8d 76 00             	lea    esi,[esi+0x0]
c001a384:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a38b:	89 c6                	mov    esi,eax
c001a38d:	89 d7                	mov    edi,edx
c001a38f:	e8 16 f5 ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c001a394:	57                   	push   edi
c001a395:	56                   	push   esi
c001a396:	52                   	push   edx
c001a397:	50                   	push   eax
c001a398:	e8 ad f4 ff ff       	call   c001984a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a39d:	e9 02 01 00 00       	jmp    c001a4a4 <Vm::x87Handler(regs*)+0xaba>
c001a3a2:	66 90                	xchg   ax,ax
c001a3a4:	80 fa 05             	cmp    dl,0x5
c001a3a7:	75 2b                	jne    c001a3d4 <Vm::x87Handler(regs*)+0x9ea>
c001a3a9:	83 ec 0c             	sub    esp,0xc
c001a3ac:	6a 00                	push   0x0
c001a3ae:	e8 f7 f4 ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c001a3b3:	89 c7                	mov    edi,eax
c001a3b5:	89 d5                	mov    ebp,edx
c001a3b7:	58                   	pop    eax
c001a3b8:	5a                   	pop    edx
c001a3b9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a3bc:	ff 36                	push   DWORD PTR [esi]
c001a3be:	e8 65 f2 ff ff       	call   c0019628 <Vm::fpu64ToInternal(unsigned long long)>
c001a3c3:	90                   	nop
c001a3c4:	83 c4 10             	add    esp,0x10
c001a3c7:	55                   	push   ebp
c001a3c8:	57                   	push   edi
c001a3c9:	52                   	push   edx
c001a3ca:	50                   	push   eax
c001a3cb:	e8 7a f4 ff ff       	call   c001984a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a3d0:	eb 6a                	jmp    c001a43c <Vm::x87Handler(regs*)+0xa52>
c001a3d2:	66 90                	xchg   ax,ax
c001a3d4:	80 fa 06             	cmp    dl,0x6
c001a3d7:	75 2f                	jne    c001a408 <Vm::x87Handler(regs*)+0xa1e>
c001a3d9:	51                   	push   ecx
c001a3da:	51                   	push   ecx
c001a3db:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a3de:	ff 36                	push   DWORD PTR [esi]
c001a3e0:	e8 43 f2 ff ff       	call   c0019628 <Vm::fpu64ToInternal(unsigned long long)>
c001a3e5:	8d 76 00             	lea    esi,[esi+0x0]
c001a3e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a3ef:	89 c6                	mov    esi,eax
c001a3f1:	89 d7                	mov    edi,edx
c001a3f3:	e8 b2 f4 ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c001a3f8:	57                   	push   edi
c001a3f9:	56                   	push   esi
c001a3fa:	52                   	push   edx
c001a3fb:	50                   	push   eax
c001a3fc:	e8 77 f4 ff ff       	call   c0019878 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a401:	e9 9e 00 00 00       	jmp    c001a4a4 <Vm::x87Handler(regs*)+0xaba>
c001a406:	66 90                	xchg   ax,ax
c001a408:	31 c0                	xor    eax,eax
c001a40a:	80 fa 07             	cmp    dl,0x7
c001a40d:	0f 85 e9 00 00 00    	jne    c001a4fc <Vm::x87Handler(regs*)+0xb12>
c001a413:	83 ec 0c             	sub    esp,0xc
c001a416:	6a 00                	push   0x0
c001a418:	e8 8d f4 ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c001a41d:	89 c7                	mov    edi,eax
c001a41f:	89 d5                	mov    ebp,edx
c001a421:	58                   	pop    eax
c001a422:	5a                   	pop    edx
c001a423:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a426:	ff 36                	push   DWORD PTR [esi]
c001a428:	e8 fb f1 ff ff       	call   c0019628 <Vm::fpu64ToInternal(unsigned long long)>
c001a42d:	8d 76 00             	lea    esi,[esi+0x0]
c001a430:	83 c4 10             	add    esp,0x10
c001a433:	55                   	push   ebp
c001a434:	57                   	push   edi
c001a435:	52                   	push   edx
c001a436:	50                   	push   eax
c001a437:	e8 3c f4 ff ff       	call   c0019878 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a43c:	83 c4 0c             	add    esp,0xc
c001a43f:	eb 67                	jmp    c001a4a8 <Vm::x87Handler(regs*)+0xabe>
c001a441:	8d 76 00             	lea    esi,[esi+0x0]
c001a444:	31 c0                	xor    eax,eax
c001a446:	80 fa 02             	cmp    dl,0x2
c001a449:	0f 85 ad 00 00 00    	jne    c001a4fc <Vm::x87Handler(regs*)+0xb12>
c001a44f:	83 ec 0c             	sub    esp,0xc
c001a452:	6a 00                	push   0x0
c001a454:	e8 51 f4 ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c001a459:	59                   	pop    ecx
c001a45a:	5f                   	pop    edi
c001a45b:	90                   	nop
c001a45c:	52                   	push   edx
c001a45d:	50                   	push   eax
c001a45e:	e8 77 f1 ff ff       	call   c00195da <Vm::fpuInternalTo64(unsigned long long)>
c001a463:	e9 84 00 00 00       	jmp    c001a4ec <Vm::x87Handler(regs*)+0xb02>
c001a468:	31 c0                	xor    eax,eax
c001a46a:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001a46f:	0f 85 87 00 00 00    	jne    c001a4fc <Vm::x87Handler(regs*)+0xb12>
c001a475:	50                   	push   eax
c001a476:	50                   	push   eax
c001a477:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001a47a:	66 90                	xchg   ax,ax
c001a47c:	31 d2                	xor    edx,edx
c001a47e:	52                   	push   edx
c001a47f:	50                   	push   eax
c001a480:	e8 47 f2 ff ff       	call   c00196cc <Vm::fpuLongToFloat(long long)>
c001a485:	8d 76 00             	lea    esi,[esi+0x0]
c001a488:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a48f:	89 c6                	mov    esi,eax
c001a491:	89 d7                	mov    edi,edx
c001a493:	e8 12 f4 ff ff       	call   c00198aa <Vm::fpuGetReg(int)>
c001a498:	57                   	push   edi
c001a499:	56                   	push   esi
c001a49a:	52                   	push   edx
c001a49b:	50                   	push   eax
c001a49c:	e8 b8 f3 ff ff       	call   c0019859 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a4a1:	8d 76 00             	lea    esi,[esi+0x0]
c001a4a4:	83 c4 1c             	add    esp,0x1c
c001a4a7:	90                   	nop
c001a4a8:	52                   	push   edx
c001a4a9:	50                   	push   eax
c001a4aa:	6a 00                	push   0x0
c001a4ac:	e8 3c f4 ff ff       	call   c00198ed <Vm::fpuSetReg(int, unsigned long long)>
c001a4b1:	e9 7a f7 ff ff       	jmp    c0019c30 <Vm::x87Handler(regs*)+0x246>
c001a4b6:	66 90                	xchg   ax,ax
c001a4b8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a4bc:	80 fa 05             	cmp    dl,0x5
c001a4bf:	75 13                	jne    c001a4d4 <Vm::x87Handler(regs*)+0xaea>
c001a4c1:	55                   	push   ebp
c001a4c2:	55                   	push   ebp
c001a4c3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a4c6:	ff 36                	push   DWORD PTR [esi]
c001a4c8:	e8 c3 f1 ff ff       	call   c0019690 <Vm::fpuULongToFloat(unsigned long long)>
c001a4cd:	e9 52 f7 ff ff       	jmp    c0019c24 <Vm::x87Handler(regs*)+0x23a>
c001a4d2:	66 90                	xchg   ax,ax
c001a4d4:	31 c0                	xor    eax,eax
c001a4d6:	80 fa 07             	cmp    dl,0x7
c001a4d9:	75 21                	jne    c001a4fc <Vm::x87Handler(regs*)+0xb12>
c001a4db:	e8 b7 f4 ff ff       	call   c0019997 <Vm::fpuPop()>
c001a4e0:	51                   	push   ecx
c001a4e1:	51                   	push   ecx
c001a4e2:	52                   	push   edx
c001a4e3:	50                   	push   eax
c001a4e4:	e8 48 f1 ff ff       	call   c0019631 <Vm::fpuFloatToLong(unsigned long long)>
c001a4e9:	8d 76 00             	lea    esi,[esi+0x0]
c001a4ec:	83 c4 10             	add    esp,0x10
c001a4ef:	89 06                	mov    DWORD PTR [esi],eax
c001a4f1:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a4f4:	e9 7b f7 ff ff       	jmp    c0019c74 <Vm::x87Handler(regs*)+0x28a>
c001a4f9:	8d 76 00             	lea    esi,[esi+0x0]
c001a4fc:	83 c4 1c             	add    esp,0x1c
c001a4ff:	5b                   	pop    ebx
c001a500:	5e                   	pop    esi
c001a501:	5f                   	pop    edi
c001a502:	5d                   	pop    ebp
c001a503:	c3                   	ret    

c001a504 <__static_initialization_and_destruction_0(int, int)>:
c001a504:	83 ec 0c             	sub    esp,0xc
c001a507:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001a50c:	75 1a                	jne    c001a528 <__static_initialization_and_destruction_0(int, int)+0x24>
c001a50e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001a516:	75 10                	jne    c001a528 <__static_initialization_and_destruction_0(int, int)+0x24>
c001a518:	83 ec 0c             	sub    esp,0xc
c001a51b:	68 e0 79 02 c0       	push   0xc00279e0
c001a520:	e8 23 74 00 00       	call   c0021948 <Vm::_FPUState::_FPUState()>
c001a525:	83 c4 10             	add    esp,0x10
c001a528:	90                   	nop
c001a529:	83 c4 0c             	add    esp,0xc
c001a52c:	c3                   	ret    
c001a52d:	8d 76 00             	lea    esi,[esi+0x0]

c001a530 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001a530:	83 ec 0c             	sub    esp,0xc
c001a533:	83 ec 08             	sub    esp,0x8
c001a536:	68 ff ff 00 00       	push   0xffff
c001a53b:	6a 01                	push   0x1
c001a53d:	e8 c2 ff ff ff       	call   c001a504 <__static_initialization_and_destruction_0(int, int)>
c001a542:	83 c4 10             	add    esp,0x10
c001a545:	83 c4 0c             	add    esp,0xc
c001a548:	c3                   	ret    
c001a549:	66 90                	xchg   ax,ax
c001a54b:	90                   	nop

c001a54c <FAT::getName()>:
c001a54c:	b8 80 4b 02 c0       	mov    eax,0xc0024b80
c001a551:	c3                   	ret    
c001a552:	66 90                	xchg   ax,ax

c001a554 <FAT::tell(void*, unsigned long long*)>:
c001a554:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a559:	75 09                	jne    c001a564 <FAT::tell(void*, unsigned long long*)+0x10>
c001a55b:	b8 04 00 00 00       	mov    eax,0x4
c001a560:	c3                   	ret    
c001a561:	8d 76 00             	lea    esi,[esi+0x0]
c001a564:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a569:	75 09                	jne    c001a574 <FAT::tell(void*, unsigned long long*)+0x20>
c001a56b:	b8 04 00 00 00       	mov    eax,0x4
c001a570:	c3                   	ret    
c001a571:	8d 76 00             	lea    esi,[esi+0x0]
c001a574:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a578:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001a57b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001a57e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a582:	89 01                	mov    DWORD PTR [ecx],eax
c001a584:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a587:	b8 00 00 00 00       	mov    eax,0x0
c001a58c:	c3                   	ret    
c001a58d:	90                   	nop
c001a58e:	66 90                	xchg   ax,ax

c001a590 <FAT::stat(void*, unsigned long long*)>:
c001a590:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a595:	75 09                	jne    c001a5a0 <FAT::stat(void*, unsigned long long*)+0x10>
c001a597:	b8 04 00 00 00       	mov    eax,0x4
c001a59c:	c3                   	ret    
c001a59d:	8d 76 00             	lea    esi,[esi+0x0]
c001a5a0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a5a5:	75 09                	jne    c001a5b0 <FAT::stat(void*, unsigned long long*)+0x20>
c001a5a7:	b8 04 00 00 00       	mov    eax,0x4
c001a5ac:	c3                   	ret    
c001a5ad:	8d 76 00             	lea    esi,[esi+0x0]
c001a5b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a5b4:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001a5b7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a5ba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a5be:	89 01                	mov    DWORD PTR [ecx],eax
c001a5c0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a5c3:	b8 00 00 00 00       	mov    eax,0x0
c001a5c8:	c3                   	ret    
c001a5c9:	90                   	nop
c001a5ca:	66 90                	xchg   ax,ax

c001a5cc <FAT::~FAT()>:
c001a5cc:	83 ec 0c             	sub    esp,0xc
c001a5cf:	ba cc 4b 02 c0       	mov    edx,0xc0024bcc
c001a5d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5d8:	89 10                	mov    DWORD PTR [eax],edx
c001a5da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5de:	83 ec 0c             	sub    esp,0xc
c001a5e1:	50                   	push   eax
c001a5e2:	e8 33 28 ff ff       	call   c000ce1a <Filesystem::~Filesystem()>
c001a5e7:	83 c4 10             	add    esp,0x10
c001a5ea:	90                   	nop
c001a5eb:	83 c4 0c             	add    esp,0xc
c001a5ee:	c3                   	ret    
c001a5ef:	90                   	nop

c001a5f0 <FAT::~FAT()>:
c001a5f0:	83 ec 0c             	sub    esp,0xc
c001a5f3:	83 ec 0c             	sub    esp,0xc
c001a5f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5fa:	e8 cd ff ff ff       	call   c001a5cc <FAT::~FAT()>
c001a5ff:	83 c4 10             	add    esp,0x10
c001a602:	83 ec 08             	sub    esp,0x8
c001a605:	6a 08                	push   0x8
c001a607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a60b:	e8 ee 23 ff ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c001a610:	83 c4 10             	add    esp,0x10
c001a613:	83 c4 0c             	add    esp,0xc
c001a616:	c3                   	ret    
c001a617:	90                   	nop

c001a618 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001a618:	83 ec 1c             	sub    esp,0x1c
c001a61b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001a622:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001a627:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a62b:	8b 04 85 60 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd85a0]
c001a632:	83 f8 ff             	cmp    eax,0xffffffff
c001a635:	75 35                	jne    c001a66c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001a637:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a63b:	88 c2                	mov    dl,al
c001a63d:	a1 40 7a 02 c0       	mov    eax,ds:0xc0027a40
c001a642:	01 d0                	add    eax,edx
c001a644:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a648:	8b 15 40 7a 02 c0    	mov    edx,DWORD PTR ds:0xc0027a40
c001a64e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a652:	89 14 85 60 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd85a0],edx
c001a659:	a1 40 7a 02 c0       	mov    eax,ds:0xc0027a40
c001a65e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a662:	89 14 85 e0 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8520],edx
c001a669:	eb 19                	jmp    c001a684 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001a66b:	90                   	nop
c001a66c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a670:	88 c2                	mov    dl,al
c001a672:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a676:	8b 04 85 60 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd85a0]
c001a67d:	01 d0                	add    eax,edx
c001a67f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a683:	90                   	nop
c001a684:	83 ec 04             	sub    esp,0x4
c001a687:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a68b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a68f:	8d 44 24 15          	lea    eax,[esp+0x15]
c001a693:	50                   	push   eax
c001a694:	e8 99 c5 fe ff       	call   c0006c32 <f_getlabel>
c001a699:	83 c4 10             	add    esp,0x10
c001a69c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a6a0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a6a5:	75 09                	jne    c001a6b0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001a6a7:	b8 00 00 00 00       	mov    eax,0x0
c001a6ac:	eb 0a                	jmp    c001a6b8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001a6ae:	66 90                	xchg   ax,ax
c001a6b0:	b8 01 00 00 00       	mov    eax,0x1
c001a6b5:	8d 76 00             	lea    esi,[esi+0x0]
c001a6b8:	83 c4 1c             	add    esp,0x1c
c001a6bb:	c3                   	ret    

c001a6bc <FAT::setlabel(LogicalDisk*, int, char*)>:
c001a6bc:	57                   	push   edi
c001a6bd:	83 ec 58             	sub    esp,0x58
c001a6c0:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001a6c8:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a6cc:	b9 0f 00 00 00       	mov    ecx,0xf
c001a6d1:	b8 00 00 00 00       	mov    eax,0x0
c001a6d6:	fc                   	cld    
c001a6d7:	89 d7                	mov    edi,edx
c001a6d9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a6db:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a6df:	8b 04 85 60 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd85a0]
c001a6e6:	83 f8 ff             	cmp    eax,0xffffffff
c001a6e9:	75 35                	jne    c001a720 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001a6eb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a6ef:	88 c2                	mov    dl,al
c001a6f1:	a1 40 7a 02 c0       	mov    eax,ds:0xc0027a40
c001a6f6:	01 d0                	add    eax,edx
c001a6f8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a6fc:	8b 15 40 7a 02 c0    	mov    edx,DWORD PTR ds:0xc0027a40
c001a702:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a706:	89 14 85 60 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd85a0],edx
c001a70d:	a1 40 7a 02 c0       	mov    eax,ds:0xc0027a40
c001a712:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001a716:	89 14 85 e0 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8520],edx
c001a71d:	eb 19                	jmp    c001a738 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001a71f:	90                   	nop
c001a720:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a724:	88 c2                	mov    dl,al
c001a726:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a72a:	8b 04 85 60 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd85a0]
c001a731:	01 d0                	add    eax,edx
c001a733:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a737:	90                   	nop
c001a738:	83 ec 08             	sub    esp,0x8
c001a73b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001a73f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a743:	50                   	push   eax
c001a744:	e8 37 61 fe ff       	call   c0000880 <strcat>
c001a749:	83 c4 10             	add    esp,0x10
c001a74c:	83 ec 0c             	sub    esp,0xc
c001a74f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a753:	50                   	push   eax
c001a754:	e8 c7 c6 fe ff       	call   c0006e20 <f_setlabel>
c001a759:	83 c4 10             	add    esp,0x10
c001a75c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a760:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001a765:	75 09                	jne    c001a770 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001a767:	b8 00 00 00 00       	mov    eax,0x0
c001a76c:	eb 0a                	jmp    c001a778 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001a76e:	66 90                	xchg   ax,ax
c001a770:	b8 01 00 00 00       	mov    eax,0x1
c001a775:	8d 76 00             	lea    esi,[esi+0x0]
c001a778:	83 c4 58             	add    esp,0x58
c001a77b:	5f                   	pop    edi
c001a77c:	c3                   	ret    
c001a77d:	90                   	nop
c001a77e:	66 90                	xchg   ax,ax

c001a780 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001a780:	83 ec 2c             	sub    esp,0x2c
c001a783:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a78b:	83 ec 08             	sub    esp,0x8
c001a78e:	68 a4 4b 02 c0       	push   0xc0024ba4
c001a793:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a797:	e8 30 60 fe ff       	call   c00007cc <strcmp>
c001a79c:	83 c4 10             	add    esp,0x10
c001a79f:	85 c0                	test   eax,eax
c001a7a1:	0f 94 c0             	sete   al
c001a7a4:	84 c0                	test   al,al
c001a7a6:	74 10                	je     c001a7b8 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001a7a8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a7b0:	e9 b3 00 00 00       	jmp    c001a868 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a7b5:	8d 76 00             	lea    esi,[esi+0x0]
c001a7b8:	83 ec 08             	sub    esp,0x8
c001a7bb:	68 96 4b 02 c0       	push   0xc0024b96
c001a7c0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a7c4:	e8 03 60 fe ff       	call   c00007cc <strcmp>
c001a7c9:	83 c4 10             	add    esp,0x10
c001a7cc:	85 c0                	test   eax,eax
c001a7ce:	0f 94 c0             	sete   al
c001a7d1:	84 c0                	test   al,al
c001a7d3:	74 0f                	je     c001a7e4 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001a7d5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a7dd:	e9 86 00 00 00       	jmp    c001a868 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a7e2:	66 90                	xchg   ax,ax
c001a7e4:	83 ec 08             	sub    esp,0x8
c001a7e7:	68 9c 4b 02 c0       	push   0xc0024b9c
c001a7ec:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a7f0:	e8 d7 5f fe ff       	call   c00007cc <strcmp>
c001a7f5:	83 c4 10             	add    esp,0x10
c001a7f8:	85 c0                	test   eax,eax
c001a7fa:	0f 94 c0             	sete   al
c001a7fd:	84 c0                	test   al,al
c001a7ff:	74 0b                	je     c001a80c <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001a801:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a809:	eb 5d                	jmp    c001a868 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a80b:	90                   	nop
c001a80c:	83 ec 08             	sub    esp,0x8
c001a80f:	68 ac 20 02 c0       	push   0xc00220ac
c001a814:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a818:	e8 af 5f fe ff       	call   c00007cc <strcmp>
c001a81d:	83 c4 10             	add    esp,0x10
c001a820:	85 c0                	test   eax,eax
c001a822:	0f 94 c0             	sete   al
c001a825:	84 c0                	test   al,al
c001a827:	74 0b                	je     c001a834 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001a829:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001a831:	eb 35                	jmp    c001a868 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a833:	90                   	nop
c001a834:	83 ec 08             	sub    esp,0x8
c001a837:	68 a2 4b 02 c0       	push   0xc0024ba2
c001a83c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a840:	e8 87 5f fe ff       	call   c00007cc <strcmp>
c001a845:	83 c4 10             	add    esp,0x10
c001a848:	85 c0                	test   eax,eax
c001a84a:	0f 94 c0             	sete   al
c001a84d:	84 c0                	test   al,al
c001a84f:	74 0b                	je     c001a85c <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001a851:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001a859:	eb 0d                	jmp    c001a868 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a85b:	90                   	nop
c001a85c:	b8 08 00 00 00       	mov    eax,0x8
c001a861:	e9 ea 00 00 00       	jmp    c001a950 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a866:	66 90                	xchg   ax,ax
c001a868:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001a86f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a874:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a878:	8b 04 85 60 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd85a0]
c001a87f:	83 f8 ff             	cmp    eax,0xffffffff
c001a882:	75 34                	jne    c001a8b8 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001a884:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a888:	88 c2                	mov    dl,al
c001a88a:	a1 40 7a 02 c0       	mov    eax,ds:0xc0027a40
c001a88f:	01 d0                	add    eax,edx
c001a891:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a895:	8b 15 40 7a 02 c0    	mov    edx,DWORD PTR ds:0xc0027a40
c001a89b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a89f:	89 14 85 60 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd85a0],edx
c001a8a6:	a1 40 7a 02 c0       	mov    eax,ds:0xc0027a40
c001a8ab:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a8af:	89 14 85 e0 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8520],edx
c001a8b6:	eb 18                	jmp    c001a8d0 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001a8b8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a8bc:	88 c2                	mov    dl,al
c001a8be:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a8c2:	8b 04 85 60 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd85a0]
c001a8c9:	01 d0                	add    eax,edx
c001a8cb:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a8cf:	90                   	nop
c001a8d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a8d4:	88 04 24             	mov    BYTE PTR [esp],al
c001a8d7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a8db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a8df:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a8e7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a8ec:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a8f4:	83 ec 0c             	sub    esp,0xc
c001a8f7:	68 00 20 00 00       	push   0x2000
c001a8fc:	e8 c2 f0 fe ff       	call   c00099c3 <malloc>
c001a901:	83 c4 10             	add    esp,0x10
c001a904:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a908:	68 00 20 00 00       	push   0x2000
c001a90d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a911:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a915:	50                   	push   eax
c001a916:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a91a:	50                   	push   eax
c001a91b:	e8 81 cb fe ff       	call   c00074a1 <f_mkfs>
c001a920:	83 c4 10             	add    esp,0x10
c001a923:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a927:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a92c:	75 0a                	jne    c001a938 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001a92e:	b8 00 00 00 00       	mov    eax,0x0
c001a933:	eb 1b                	jmp    c001a950 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a935:	8d 76 00             	lea    esi,[esi+0x0]
c001a938:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a93d:	75 09                	jne    c001a948 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001a93f:	b8 09 00 00 00       	mov    eax,0x9
c001a944:	eb 0a                	jmp    c001a950 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a946:	66 90                	xchg   ax,ax
c001a948:	b8 01 00 00 00       	mov    eax,0x1
c001a94d:	8d 76 00             	lea    esi,[esi+0x0]
c001a950:	83 c4 2c             	add    esp,0x2c
c001a953:	c3                   	ret    

c001a954 <FAT::tryMount(LogicalDisk*, int)>:
c001a954:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001a95a:	a1 40 7a 02 c0       	mov    eax,ds:0xc0027a40
c001a95f:	83 f8 14             	cmp    eax,0x14
c001a962:	75 18                	jne    c001a97c <FAT::tryMount(LogicalDisk*, int)+0x28>
c001a964:	83 ec 0c             	sub    esp,0xc
c001a967:	68 a8 4b 02 c0       	push   0xc0024ba8
c001a96c:	e8 30 9a ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c001a971:	83 c4 10             	add    esp,0x10
c001a974:	b0 00                	mov    al,0x0
c001a976:	e9 e9 01 00 00       	jmp    c001ab64 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a97b:	90                   	nop
c001a97c:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001a983:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a989:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a98f:	3d 00 02 00 00       	cmp    eax,0x200
c001a994:	74 0a                	je     c001a9a0 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001a996:	b0 00                	mov    al,0x0
c001a998:	e9 c7 01 00 00       	jmp    c001ab64 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a99d:	8d 76 00             	lea    esi,[esi+0x0]
c001a9a0:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001a9a8:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a9af:	8b 04 85 60 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd85a0]
c001a9b6:	83 f8 ff             	cmp    eax,0xffffffff
c001a9b9:	74 09                	je     c001a9c4 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001a9bb:	b0 01                	mov    al,0x1
c001a9bd:	e9 a2 01 00 00       	jmp    c001ab64 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a9c2:	66 90                	xchg   ax,ax
c001a9c4:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001a9ce:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001a9d6:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001a9dd:	88 c2                	mov    dl,al
c001a9df:	a1 40 7a 02 c0       	mov    eax,ds:0xc0027a40
c001a9e4:	01 d0                	add    eax,edx
c001a9e6:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001a9ed:	8b 15 40 7a 02 c0    	mov    edx,DWORD PTR ds:0xc0027a40
c001a9f3:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a9fa:	89 14 85 60 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd85a0],edx
c001aa01:	a1 40 7a 02 c0       	mov    eax,ds:0xc0027a40
c001aa06:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001aa0d:	89 14 85 e0 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8520],edx
c001aa14:	83 ec 0c             	sub    esp,0xc
c001aa17:	68 54 02 00 00       	push   0x254
c001aa1c:	e8 a2 ef fe ff       	call   c00099c3 <malloc>
c001aa21:	83 c4 10             	add    esp,0x10
c001aa24:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001aa2b:	83 ec 04             	sub    esp,0x4
c001aa2e:	6a 00                	push   0x0
c001aa30:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001aa37:	50                   	push   eax
c001aa38:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001aa3f:	e8 e5 a3 fe ff       	call   c0004e29 <f_mount>
c001aa44:	83 c4 10             	add    esp,0x10
c001aa47:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001aa4e:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001aa56:	74 1c                	je     c001aa74 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001aa58:	83 ec 0c             	sub    esp,0xc
c001aa5b:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001aa62:	e8 7c ef fe ff       	call   c00099e3 <rfree>
c001aa67:	83 c4 10             	add    esp,0x10
c001aa6a:	b0 00                	mov    al,0x0
c001aa6c:	e9 f3 00 00 00       	jmp    c001ab64 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001aa71:	8d 76 00             	lea    esi,[esi+0x0]
c001aa74:	83 ec 04             	sub    esp,0x4
c001aa77:	68 00 01 00 00       	push   0x100
c001aa7c:	6a 00                	push   0x0
c001aa7e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001aa85:	50                   	push   eax
c001aa86:	e8 f9 5b fe ff       	call   c0000684 <memset>
c001aa8b:	83 c4 10             	add    esp,0x10
c001aa8e:	83 ec 08             	sub    esp,0x8
c001aa91:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001aa98:	50                   	push   eax
c001aa99:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001aaa0:	50                   	push   eax
c001aaa1:	e8 da 5d fe ff       	call   c0000880 <strcat>
c001aaa6:	83 c4 10             	add    esp,0x10
c001aaa9:	83 ec 08             	sub    esp,0x8
c001aaac:	68 b6 4b 02 c0       	push   0xc0024bb6
c001aab1:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001aab8:	50                   	push   eax
c001aab9:	e8 c2 5d fe ff       	call   c0000880 <strcat>
c001aabe:	83 c4 10             	add    esp,0x10
c001aac1:	83 ec 04             	sub    esp,0x4
c001aac4:	6a 01                	push   0x1
c001aac6:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001aacd:	50                   	push   eax
c001aace:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001aad2:	50                   	push   eax
c001aad3:	e8 b3 a3 fe ff       	call   c0004e8b <f_open>
c001aad8:	83 c4 10             	add    esp,0x10
c001aadb:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001aae2:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001aae9:	85 c0                	test   eax,eax
c001aaeb:	74 0b                	je     c001aaf8 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001aaed:	78 31                	js     c001ab20 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001aaef:	83 e8 04             	sub    eax,0x4
c001aaf2:	83 f8 01             	cmp    eax,0x1
c001aaf5:	77 29                	ja     c001ab20 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001aaf7:	90                   	nop
c001aaf8:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001ab00:	83 ec 0c             	sub    esp,0xc
c001ab03:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ab07:	50                   	push   eax
c001ab08:	e8 d0 ae fe ff       	call   c00059dd <f_close>
c001ab0d:	83 c4 10             	add    esp,0x10
c001ab10:	90                   	nop
c001ab11:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001ab19:	74 41                	je     c001ab5c <FAT::tryMount(LogicalDisk*, int)+0x208>
c001ab1b:	eb 33                	jmp    c001ab50 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001ab1d:	8d 76 00             	lea    esi,[esi+0x0]
c001ab20:	83 ec 0c             	sub    esp,0xc
c001ab23:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001ab2a:	e8 b4 ee fe ff       	call   c00099e3 <rfree>
c001ab2f:	83 c4 10             	add    esp,0x10
c001ab32:	83 ec 04             	sub    esp,0x4
c001ab35:	6a 00                	push   0x0
c001ab37:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001ab3e:	50                   	push   eax
c001ab3f:	6a 00                	push   0x0
c001ab41:	e8 e3 a2 fe ff       	call   c0004e29 <f_mount>
c001ab46:	83 c4 10             	add    esp,0x10
c001ab49:	b0 00                	mov    al,0x0
c001ab4b:	eb 17                	jmp    c001ab64 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001ab4d:	8d 76 00             	lea    esi,[esi+0x0]
c001ab50:	a1 40 7a 02 c0       	mov    eax,ds:0xc0027a40
c001ab55:	40                   	inc    eax
c001ab56:	a3 40 7a 02 c0       	mov    ds:0xc0027a40,eax
c001ab5b:	90                   	nop
c001ab5c:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001ab63:	90                   	nop
c001ab64:	81 c4 6c 03 00 00    	add    esp,0x36c
c001ab6a:	c3                   	ret    
c001ab6b:	90                   	nop

c001ab6c <FAT::allocateSwapfile(char const*, int)>:
c001ab6c:	55                   	push   ebp
c001ab6d:	57                   	push   edi
c001ab6e:	56                   	push   esi
c001ab6f:	53                   	push   ebx
c001ab70:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001ab76:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001ab81:	83 ec 0c             	sub    esp,0xc
c001ab84:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001ab8b:	e8 33 ee fe ff       	call   c00099c3 <malloc>
c001ab90:	83 c4 10             	add    esp,0x10
c001ab93:	89 c7                	mov    edi,eax
c001ab95:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c001ab9a:	83 ec 04             	sub    esp,0x4
c001ab9d:	50                   	push   eax
c001ab9e:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001aba5:	57                   	push   edi
c001aba6:	e8 9f 24 ff ff       	call   c000d04a <File::File(char const*, Process*)>
c001abab:	83 c4 10             	add    esp,0x10
c001abae:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001abb5:	83 ec 04             	sub    esp,0x4
c001abb8:	8d 44 24 13          	lea    eax,[esp+0x13]
c001abbc:	50                   	push   eax
c001abbd:	8d 44 24 18          	lea    eax,[esp+0x18]
c001abc1:	50                   	push   eax
c001abc2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001abc9:	e8 8c 27 ff ff       	call   c000d35a <File::stat(unsigned long long*, bool*)>
c001abce:	83 c4 10             	add    esp,0x10
c001abd1:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001abd8:	c1 e0 14             	shl    eax,0x14
c001abdb:	89 c7                	mov    edi,eax
c001abdd:	89 c5                	mov    ebp,eax
c001abdf:	c1 fd 1f             	sar    ebp,0x1f
c001abe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abe6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001abea:	89 f9                	mov    ecx,edi
c001abec:	31 c1                	xor    ecx,eax
c001abee:	89 cb                	mov    ebx,ecx
c001abf0:	89 e9                	mov    ecx,ebp
c001abf2:	31 d1                	xor    ecx,edx
c001abf4:	89 ce                	mov    esi,ecx
c001abf6:	89 f0                	mov    eax,esi
c001abf8:	09 d8                	or     eax,ebx
c001abfa:	0f 84 98 00 00 00    	je     c001ac98 <FAT::allocateSwapfile(char const*, int)+0x12c>
c001ac00:	83 ec 0c             	sub    esp,0xc
c001ac03:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ac0a:	e8 17 26 ff ff       	call   c000d226 <File::unlink()>
c001ac0f:	83 c4 10             	add    esp,0x10
c001ac12:	83 ec 08             	sub    esp,0x8
c001ac15:	6a 12                	push   0x12
c001ac17:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ac1e:	e8 8b 24 ff ff       	call   c000d0ae <File::open(FileOpenMode)>
c001ac23:	83 c4 10             	add    esp,0x10
c001ac26:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ac2d:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001ac33:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001ac3a:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001ac41:	c1 e0 14             	shl    eax,0x14
c001ac44:	99                   	cdq    
c001ac45:	6a 01                	push   0x1
c001ac47:	52                   	push   edx
c001ac48:	50                   	push   eax
c001ac49:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001ac50:	e8 38 c4 fe ff       	call   c000708d <f_expand>
c001ac55:	83 c4 10             	add    esp,0x10
c001ac58:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ac5f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac61:	83 c0 10             	add    eax,0x10
c001ac64:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac66:	83 ec 0c             	sub    esp,0xc
c001ac69:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ac6d:	52                   	push   edx
c001ac6e:	8d 54 24 30          	lea    edx,[esp+0x30]
c001ac72:	52                   	push   edx
c001ac73:	6a 00                	push   0x0
c001ac75:	68 00 04 00 00       	push   0x400
c001ac7a:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001ac81:	ff d0                	call   eax
c001ac83:	83 c4 20             	add    esp,0x20
c001ac86:	83 ec 0c             	sub    esp,0xc
c001ac89:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ac90:	e8 77 24 ff ff       	call   c000d10c <File::close()>
c001ac95:	83 c4 10             	add    esp,0x10
c001ac98:	83 ec 08             	sub    esp,0x8
c001ac9b:	6a 01                	push   0x1
c001ac9d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001aca4:	e8 05 24 ff ff       	call   c000d0ae <File::open(FileOpenMode)>
c001aca9:	83 c4 10             	add    esp,0x10
c001acac:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001acb3:	8b 00                	mov    eax,DWORD PTR [eax]
c001acb5:	83 c0 0c             	add    eax,0xc
c001acb8:	8b 00                	mov    eax,DWORD PTR [eax]
c001acba:	83 ec 0c             	sub    esp,0xc
c001acbd:	8d 54 24 24          	lea    edx,[esp+0x24]
c001acc1:	52                   	push   edx
c001acc2:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001acc6:	52                   	push   edx
c001acc7:	6a 00                	push   0x0
c001acc9:	6a 04                	push   0x4
c001accb:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001acd2:	ff d0                	call   eax
c001acd4:	83 c4 20             	add    esp,0x20
c001acd7:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001acde:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001ace4:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001aceb:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001acf2:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001acf5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001acf8:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001acff:	83 ec 0c             	sub    esp,0xc
c001ad02:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ad09:	e8 fe 23 ff ff       	call   c000d10c <File::close()>
c001ad0e:	83 c4 10             	add    esp,0x10
c001ad11:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001ad18:	ba 00 00 00 00       	mov    edx,0x0
c001ad1d:	81 c4 3c 04 00 00    	add    esp,0x43c
c001ad23:	5b                   	pop    ebx
c001ad24:	5e                   	pop    esi
c001ad25:	5f                   	pop    edi
c001ad26:	5d                   	pop    ebp
c001ad27:	c3                   	ret    

c001ad28 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001ad28:	57                   	push   edi
c001ad29:	56                   	push   esi
c001ad2a:	53                   	push   ebx
c001ad2b:	81 ec 50 02 00 00    	sub    esp,0x250
c001ad31:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001ad39:	74 0d                	je     c001ad48 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001ad3b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001ad43:	75 0f                	jne    c001ad54 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001ad45:	8d 76 00             	lea    esi,[esi+0x0]
c001ad48:	b8 04 00 00 00       	mov    eax,0x4
c001ad4d:	e9 36 01 00 00       	jmp    c001ae88 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001ad52:	66 90                	xchg   ax,ax
c001ad54:	83 ec 08             	sub    esp,0x8
c001ad57:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001ad5e:	50                   	push   eax
c001ad5f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001ad66:	e8 7c b2 fe ff       	call   c0005fe7 <f_readdir>
c001ad6b:	83 c4 10             	add    esp,0x10
c001ad6e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001ad75:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001ad7c:	83 ec 0c             	sub    esp,0xc
c001ad7f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001ad86:	83 c0 1a             	add    eax,0x1a
c001ad89:	50                   	push   eax
c001ad8a:	e8 11 59 fe ff       	call   c00006a0 <strlen>
c001ad8f:	83 c4 10             	add    esp,0x10
c001ad92:	ba 00 00 00 00       	mov    edx,0x0
c001ad97:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ad9b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ad9f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001ada6:	0f b6 c0             	movzx  eax,al
c001ada9:	83 e0 10             	and    eax,0x10
c001adac:	74 0a                	je     c001adb8 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001adae:	b8 02 00 00 00       	mov    eax,0x2
c001adb3:	eb 0b                	jmp    c001adc0 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001adb5:	8d 76 00             	lea    esi,[esi+0x0]
c001adb8:	b8 01 00 00 00       	mov    eax,0x1
c001adbd:	8d 76 00             	lea    esi,[esi+0x0]
c001adc0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001adc4:	83 ec 08             	sub    esp,0x8
c001adc7:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001adce:	83 c0 1a             	add    eax,0x1a
c001add1:	50                   	push   eax
c001add2:	8d 44 24 10          	lea    eax,[esp+0x10]
c001add6:	83 c0 10             	add    eax,0x10
c001add9:	50                   	push   eax
c001adda:	e8 61 59 fe ff       	call   c0000740 <strcpy>
c001addf:	83 c4 10             	add    esp,0x10
c001ade2:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001ade9:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001adf0:	8d 44 24 04          	lea    eax,[esp+0x4]
c001adf4:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001adfb:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001ae02:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001ae09:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001ae10:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001ae17:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001ae1e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001ae25:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001ae2c:	89 c6                	mov    esi,eax
c001ae2e:	89 d7                	mov    edi,edx
c001ae30:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ae32:	89 c8                	mov    eax,ecx
c001ae34:	89 fa                	mov    edx,edi
c001ae36:	89 f3                	mov    ebx,esi
c001ae38:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001ae3f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001ae46:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001ae4d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001ae54:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001ae5a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001ae61:	84 c0                	test   al,al
c001ae63:	75 07                	jne    c001ae6c <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001ae65:	b8 07 00 00 00       	mov    eax,0x7
c001ae6a:	eb 1c                	jmp    c001ae88 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001ae6c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001ae73:	85 c0                	test   eax,eax
c001ae75:	75 09                	jne    c001ae80 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001ae77:	b8 00 00 00 00       	mov    eax,0x0
c001ae7c:	eb 0a                	jmp    c001ae88 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001ae7e:	66 90                	xchg   ax,ax
c001ae80:	b8 01 00 00 00       	mov    eax,0x1
c001ae85:	8d 76 00             	lea    esi,[esi+0x0]
c001ae88:	81 c4 50 02 00 00    	add    esp,0x250
c001ae8e:	5b                   	pop    ebx
c001ae8f:	5e                   	pop    esi
c001ae90:	5f                   	pop    edi
c001ae91:	c3                   	ret    
c001ae92:	66 90                	xchg   ax,ax

c001ae94 <FAT::read(void*, unsigned long, void*, int*)>:
c001ae94:	83 ec 1c             	sub    esp,0x1c
c001ae97:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ae9c:	74 0a                	je     c001aea8 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001ae9e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001aea3:	75 0b                	jne    c001aeb0 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001aea5:	8d 76 00             	lea    esi,[esi+0x0]
c001aea8:	b8 04 00 00 00       	mov    eax,0x4
c001aead:	eb 41                	jmp    c001aef0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001aeaf:	90                   	nop
c001aeb0:	8d 44 24 08          	lea    eax,[esp+0x8]
c001aeb4:	50                   	push   eax
c001aeb5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aeb9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001aebd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aec1:	e8 01 a4 fe ff       	call   c00052c7 <f_read>
c001aec6:	83 c4 10             	add    esp,0x10
c001aec9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aecd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aed1:	89 c2                	mov    edx,eax
c001aed3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aed7:	89 10                	mov    DWORD PTR [eax],edx
c001aed9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aedd:	85 c0                	test   eax,eax
c001aedf:	75 07                	jne    c001aee8 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001aee1:	b8 00 00 00 00       	mov    eax,0x0
c001aee6:	eb 08                	jmp    c001aef0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001aee8:	b8 01 00 00 00       	mov    eax,0x1
c001aeed:	8d 76 00             	lea    esi,[esi+0x0]
c001aef0:	83 c4 1c             	add    esp,0x1c
c001aef3:	c3                   	ret    

c001aef4 <FAT::write(void*, unsigned long, void*, int*)>:
c001aef4:	83 ec 1c             	sub    esp,0x1c
c001aef7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001aefc:	74 0a                	je     c001af08 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001aefe:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001af03:	75 0b                	jne    c001af10 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001af05:	8d 76 00             	lea    esi,[esi+0x0]
c001af08:	b8 04 00 00 00       	mov    eax,0x4
c001af0d:	eb 41                	jmp    c001af50 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001af0f:	90                   	nop
c001af10:	8d 44 24 08          	lea    eax,[esp+0x8]
c001af14:	50                   	push   eax
c001af15:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001af1d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af21:	e8 21 a6 fe ff       	call   c0005547 <f_write>
c001af26:	83 c4 10             	add    esp,0x10
c001af29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af31:	89 c2                	mov    edx,eax
c001af33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001af37:	89 10                	mov    DWORD PTR [eax],edx
c001af39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af3d:	85 c0                	test   eax,eax
c001af3f:	75 07                	jne    c001af48 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001af41:	b8 00 00 00 00       	mov    eax,0x0
c001af46:	eb 08                	jmp    c001af50 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001af48:	b8 01 00 00 00       	mov    eax,0x1
c001af4d:	8d 76 00             	lea    esi,[esi+0x0]
c001af50:	83 c4 1c             	add    esp,0x1c
c001af53:	c3                   	ret    

c001af54 <FAT::close(void*)>:
c001af54:	83 ec 1c             	sub    esp,0x1c
c001af57:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001af5c:	75 0a                	jne    c001af68 <FAT::close(void*)+0x14>
c001af5e:	b8 04 00 00 00       	mov    eax,0x4
c001af63:	eb 3f                	jmp    c001afa4 <FAT::close(void*)+0x50>
c001af65:	8d 76 00             	lea    esi,[esi+0x0]
c001af68:	83 ec 0c             	sub    esp,0xc
c001af6b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af6f:	e8 69 aa fe ff       	call   c00059dd <f_close>
c001af74:	83 c4 10             	add    esp,0x10
c001af77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af7b:	83 ec 0c             	sub    esp,0xc
c001af7e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af82:	e8 4c ea fe ff       	call   c00099d3 <free>
c001af87:	83 c4 10             	add    esp,0x10
c001af8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af8e:	85 c0                	test   eax,eax
c001af90:	75 0a                	jne    c001af9c <FAT::close(void*)+0x48>
c001af92:	b8 00 00 00 00       	mov    eax,0x0
c001af97:	eb 0b                	jmp    c001afa4 <FAT::close(void*)+0x50>
c001af99:	8d 76 00             	lea    esi,[esi+0x0]
c001af9c:	b8 01 00 00 00       	mov    eax,0x1
c001afa1:	8d 76 00             	lea    esi,[esi+0x0]
c001afa4:	83 c4 1c             	add    esp,0x1c
c001afa7:	c3                   	ret    

c001afa8 <FAT::closeDir(void*)>:
c001afa8:	83 ec 1c             	sub    esp,0x1c
c001afab:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001afb0:	75 0a                	jne    c001afbc <FAT::closeDir(void*)+0x14>
c001afb2:	b8 04 00 00 00       	mov    eax,0x4
c001afb7:	eb 3f                	jmp    c001aff8 <FAT::closeDir(void*)+0x50>
c001afb9:	8d 76 00             	lea    esi,[esi+0x0]
c001afbc:	83 ec 0c             	sub    esp,0xc
c001afbf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001afc3:	e8 fd af fe ff       	call   c0005fc5 <f_closedir>
c001afc8:	83 c4 10             	add    esp,0x10
c001afcb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001afcf:	83 ec 0c             	sub    esp,0xc
c001afd2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001afd6:	e8 f8 e9 fe ff       	call   c00099d3 <free>
c001afdb:	83 c4 10             	add    esp,0x10
c001afde:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001afe2:	85 c0                	test   eax,eax
c001afe4:	75 0a                	jne    c001aff0 <FAT::closeDir(void*)+0x48>
c001afe6:	b8 00 00 00 00       	mov    eax,0x0
c001afeb:	eb 0b                	jmp    c001aff8 <FAT::closeDir(void*)+0x50>
c001afed:	8d 76 00             	lea    esi,[esi+0x0]
c001aff0:	b8 01 00 00 00       	mov    eax,0x1
c001aff5:	8d 76 00             	lea    esi,[esi+0x0]
c001aff8:	83 c4 1c             	add    esp,0x1c
c001affb:	c3                   	ret    

c001affc <FAT::seek(void*, unsigned long long)>:
c001affc:	83 ec 2c             	sub    esp,0x2c
c001afff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b007:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b00b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b00f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001b014:	75 0a                	jne    c001b020 <FAT::seek(void*, unsigned long long)+0x24>
c001b016:	b8 04 00 00 00       	mov    eax,0x4
c001b01b:	eb 37                	jmp    c001b054 <FAT::seek(void*, unsigned long long)+0x58>
c001b01d:	8d 76 00             	lea    esi,[esi+0x0]
c001b020:	83 ec 04             	sub    esp,0x4
c001b023:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b027:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b02b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001b02f:	e8 d8 a9 fe ff       	call   c0005a0c <f_lseek>
c001b034:	83 c4 10             	add    esp,0x10
c001b037:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b03b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b03f:	85 c0                	test   eax,eax
c001b041:	75 09                	jne    c001b04c <FAT::seek(void*, unsigned long long)+0x50>
c001b043:	b8 00 00 00 00       	mov    eax,0x0
c001b048:	eb 0a                	jmp    c001b054 <FAT::seek(void*, unsigned long long)+0x58>
c001b04a:	66 90                	xchg   ax,ax
c001b04c:	b8 01 00 00 00       	mov    eax,0x1
c001b051:	8d 76 00             	lea    esi,[esi+0x0]
c001b054:	83 c4 2c             	add    esp,0x2c
c001b057:	c3                   	ret    

c001b058 <fatWrapperReadDisk>:
c001b058:	83 ec 1c             	sub    esp,0x1c
c001b05b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b05f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b063:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b067:	89 04 24             	mov    DWORD PTR [esp],eax
c001b06a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b06e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b072:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b077:	8b 04 85 40 6a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd95c0]
c001b07e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b082:	83 ec 0c             	sub    esp,0xc
c001b085:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b089:	52                   	push   edx
c001b08a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b08e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b092:	50                   	push   eax
c001b093:	e8 64 51 ff ff       	call   c00101fc <LogicalDisk::read(unsigned long long, int, void*)>
c001b098:	83 c4 20             	add    esp,0x20
c001b09b:	83 c4 1c             	add    esp,0x1c
c001b09e:	c3                   	ret    
c001b09f:	90                   	nop

c001b0a0 <fatWrapperWriteDisk>:
c001b0a0:	83 ec 1c             	sub    esp,0x1c
c001b0a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b0a7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b0ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b0af:	89 04 24             	mov    DWORD PTR [esp],eax
c001b0b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b0b6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b0ba:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b0bf:	8b 04 85 40 6a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd95c0]
c001b0c6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b0ca:	83 ec 0c             	sub    esp,0xc
c001b0cd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b0d1:	52                   	push   edx
c001b0d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b0d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b0da:	50                   	push   eax
c001b0db:	e8 88 51 ff ff       	call   c0010268 <LogicalDisk::write(unsigned long long, int, void*)>
c001b0e0:	83 c4 20             	add    esp,0x20
c001b0e3:	83 c4 1c             	add    esp,0x1c
c001b0e6:	c3                   	ret    
c001b0e7:	90                   	nop

c001b0e8 <fatWrapperIoctl>:
c001b0e8:	53                   	push   ebx
c001b0e9:	83 ec 28             	sub    esp,0x28
c001b0ec:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b0f0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b0f4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b0f8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b0fc:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001b101:	75 31                	jne    c001b134 <fatWrapperIoctl+0x4c>
c001b103:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b107:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b10b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b110:	8b 04 85 40 6a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd95c0]
c001b117:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b11d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b123:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b127:	66 89 02             	mov    WORD PTR [edx],ax
c001b12a:	b8 00 00 00 00       	mov    eax,0x0
c001b12f:	e9 bc 00 00 00       	jmp    c001b1f0 <fatWrapperIoctl+0x108>
c001b134:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001b139:	75 6d                	jne    c001b1a8 <fatWrapperIoctl+0xc0>
c001b13b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b13f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b143:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b148:	8b 04 85 40 6a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd95c0]
c001b14f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b155:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001b15b:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001b161:	89 c8                	mov    eax,ecx
c001b163:	89 da                	mov    edx,ebx
c001b165:	0f a4 c2 0a          	shld   edx,eax,0xa
c001b169:	c1 e0 0a             	shl    eax,0xa
c001b16c:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b171:	8b 0c 8d 40 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95c0]
c001b178:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001b17e:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001b184:	89 cb                	mov    ebx,ecx
c001b186:	c1 fb 1f             	sar    ebx,0x1f
c001b189:	53                   	push   ebx
c001b18a:	51                   	push   ecx
c001b18b:	52                   	push   edx
c001b18c:	50                   	push   eax
c001b18d:	e8 12 5e 00 00       	call   c0020fa4 <__udivdi3>
c001b192:	83 c4 10             	add    esp,0x10
c001b195:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b199:	89 01                	mov    DWORD PTR [ecx],eax
c001b19b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b19e:	b8 00 00 00 00       	mov    eax,0x0
c001b1a3:	eb 4b                	jmp    c001b1f0 <fatWrapperIoctl+0x108>
c001b1a5:	8d 76 00             	lea    esi,[esi+0x0]
c001b1a8:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001b1ad:	75 09                	jne    c001b1b8 <fatWrapperIoctl+0xd0>
c001b1af:	b8 00 00 00 00       	mov    eax,0x0
c001b1b4:	eb 3a                	jmp    c001b1f0 <fatWrapperIoctl+0x108>
c001b1b6:	66 90                	xchg   ax,ax
c001b1b8:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001b1bd:	75 19                	jne    c001b1d8 <fatWrapperIoctl+0xf0>
c001b1bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b1c3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b1c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b1cb:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001b1d1:	b8 00 00 00 00       	mov    eax,0x0
c001b1d6:	eb 18                	jmp    c001b1f0 <fatWrapperIoctl+0x108>
c001b1d8:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001b1dd:	75 09                	jne    c001b1e8 <fatWrapperIoctl+0x100>
c001b1df:	b8 00 00 00 00       	mov    eax,0x0
c001b1e4:	eb 0a                	jmp    c001b1f0 <fatWrapperIoctl+0x108>
c001b1e6:	66 90                	xchg   ax,ax
c001b1e8:	b8 04 00 00 00       	mov    eax,0x4
c001b1ed:	8d 76 00             	lea    esi,[esi+0x0]
c001b1f0:	83 c4 28             	add    esp,0x28
c001b1f3:	5b                   	pop    ebx
c001b1f4:	c3                   	ret    
c001b1f5:	90                   	nop
c001b1f6:	66 90                	xchg   ax,ax

c001b1f8 <FAT::FAT()>:
c001b1f8:	83 ec 1c             	sub    esp,0x1c
c001b1fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b1ff:	83 ec 0c             	sub    esp,0xc
c001b202:	50                   	push   eax
c001b203:	e8 ee 1b ff ff       	call   c000cdf6 <Filesystem::Filesystem()>
c001b208:	83 c4 10             	add    esp,0x10
c001b20b:	ba cc 4b 02 c0       	mov    edx,0xc0024bcc
c001b210:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b214:	89 10                	mov    DWORD PTR [eax],edx
c001b216:	c7 05 40 7a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027a40,0x0
c001b220:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b228:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001b22d:	7f 15                	jg     c001b244 <FAT::FAT()+0x4c>
c001b22f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b233:	c7 04 85 60 7a 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd85a0],0xffffffff
c001b23e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b242:	eb e4                	jmp    c001b228 <FAT::FAT()+0x30>
c001b244:	90                   	nop
c001b245:	83 c4 1c             	add    esp,0x1c
c001b248:	c3                   	ret    
c001b249:	90                   	nop
c001b24a:	66 90                	xchg   ax,ax

c001b24c <FAT::fixFilepath(char*)>:
c001b24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b250:	8a 00                	mov    al,BYTE PTR [eax]
c001b252:	3c 40                	cmp    al,0x40
c001b254:	7e 2e                	jle    c001b284 <FAT::fixFilepath(char*)+0x38>
c001b256:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b25a:	8a 00                	mov    al,BYTE PTR [eax]
c001b25c:	83 e8 41             	sub    eax,0x41
c001b25f:	88 c2                	mov    dl,al
c001b261:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b265:	88 10                	mov    BYTE PTR [eax],dl
c001b267:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b26b:	8a 00                	mov    al,BYTE PTR [eax]
c001b26d:	0f be c0             	movsx  eax,al
c001b270:	8b 04 85 60 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd85a0]
c001b277:	83 c0 30             	add    eax,0x30
c001b27a:	88 c2                	mov    dl,al
c001b27c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b280:	88 10                	mov    BYTE PTR [eax],dl
c001b282:	66 90                	xchg   ax,ax
c001b284:	90                   	nop
c001b285:	c3                   	ret    
c001b286:	66 90                	xchg   ax,ax

c001b288 <FAT::open(char const*, void**, FileOpenMode)>:
c001b288:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b28e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b296:	74 0c                	je     c001b2a4 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001b298:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b2a0:	75 0e                	jne    c001b2b0 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001b2a2:	66 90                	xchg   ax,ax
c001b2a4:	b8 04 00 00 00       	mov    eax,0x4
c001b2a9:	e9 06 01 00 00       	jmp    c001b3b4 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b2ae:	66 90                	xchg   ax,ax
c001b2b0:	83 ec 08             	sub    esp,0x8
c001b2b3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b2ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b2be:	50                   	push   eax
c001b2bf:	e8 7c 54 fe ff       	call   c0000740 <strcpy>
c001b2c4:	83 c4 10             	add    esp,0x10
c001b2c7:	83 ec 08             	sub    esp,0x8
c001b2ca:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b2ce:	50                   	push   eax
c001b2cf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b2d6:	e8 71 ff ff ff       	call   c001b24c <FAT::fixFilepath(char*)>
c001b2db:	83 c4 10             	add    esp,0x10
c001b2de:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001b2e6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b2ed:	83 e0 01             	and    eax,0x1
c001b2f0:	74 0a                	je     c001b2fc <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001b2f2:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001b2fa:	66 90                	xchg   ax,ax
c001b2fc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b303:	83 e0 04             	and    eax,0x4
c001b306:	74 10                	je     c001b318 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001b308:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001b310:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b318:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b31f:	83 e0 02             	and    eax,0x2
c001b322:	74 08                	je     c001b32c <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001b324:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b32c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b333:	83 e0 08             	and    eax,0x8
c001b336:	74 08                	je     c001b340 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001b338:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001b340:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b347:	83 e0 10             	and    eax,0x10
c001b34a:	74 08                	je     c001b354 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001b34c:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001b354:	83 ec 0c             	sub    esp,0xc
c001b357:	68 50 02 00 00       	push   0x250
c001b35c:	e8 62 e6 fe ff       	call   c00099c3 <malloc>
c001b361:	83 c4 10             	add    esp,0x10
c001b364:	89 c2                	mov    edx,eax
c001b366:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b36d:	89 10                	mov    DWORD PTR [eax],edx
c001b36f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001b377:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b37e:	8b 00                	mov    eax,DWORD PTR [eax]
c001b380:	83 ec 04             	sub    esp,0x4
c001b383:	52                   	push   edx
c001b384:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b388:	52                   	push   edx
c001b389:	50                   	push   eax
c001b38a:	e8 fc 9a fe ff       	call   c0004e8b <f_open>
c001b38f:	83 c4 10             	add    esp,0x10
c001b392:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001b399:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001b3a1:	74 09                	je     c001b3ac <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001b3a3:	b8 01 00 00 00       	mov    eax,0x1
c001b3a8:	eb 0a                	jmp    c001b3b4 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b3aa:	66 90                	xchg   ax,ax
c001b3ac:	b8 00 00 00 00       	mov    eax,0x0
c001b3b1:	8d 76 00             	lea    esi,[esi+0x0]
c001b3b4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b3ba:	c3                   	ret    
c001b3bb:	90                   	nop

c001b3bc <FAT::openDir(char const*, void**)>:
c001b3bc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b3c2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b3ca:	74 0c                	je     c001b3d8 <FAT::openDir(char const*, void**)+0x1c>
c001b3cc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b3d4:	75 0e                	jne    c001b3e4 <FAT::openDir(char const*, void**)+0x28>
c001b3d6:	66 90                	xchg   ax,ax
c001b3d8:	b8 04 00 00 00       	mov    eax,0x4
c001b3dd:	e9 82 00 00 00       	jmp    c001b464 <FAT::openDir(char const*, void**)+0xa8>
c001b3e2:	66 90                	xchg   ax,ax
c001b3e4:	83 ec 08             	sub    esp,0x8
c001b3e7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b3ee:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b3f2:	50                   	push   eax
c001b3f3:	e8 48 53 fe ff       	call   c0000740 <strcpy>
c001b3f8:	83 c4 10             	add    esp,0x10
c001b3fb:	83 ec 08             	sub    esp,0x8
c001b3fe:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b402:	50                   	push   eax
c001b403:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b40a:	e8 3d fe ff ff       	call   c001b24c <FAT::fixFilepath(char*)>
c001b40f:	83 c4 10             	add    esp,0x10
c001b412:	83 ec 0c             	sub    esp,0xc
c001b415:	6a 4c                	push   0x4c
c001b417:	e8 a7 e5 fe ff       	call   c00099c3 <malloc>
c001b41c:	83 c4 10             	add    esp,0x10
c001b41f:	89 c2                	mov    edx,eax
c001b421:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b428:	89 10                	mov    DWORD PTR [eax],edx
c001b42a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b431:	8b 00                	mov    eax,DWORD PTR [eax]
c001b433:	83 ec 08             	sub    esp,0x8
c001b436:	8d 54 24 14          	lea    edx,[esp+0x14]
c001b43a:	52                   	push   edx
c001b43b:	50                   	push   eax
c001b43c:	e8 82 aa fe ff       	call   c0005ec3 <f_opendir>
c001b441:	83 c4 10             	add    esp,0x10
c001b444:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b44b:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001b453:	74 07                	je     c001b45c <FAT::openDir(char const*, void**)+0xa0>
c001b455:	b8 01 00 00 00       	mov    eax,0x1
c001b45a:	eb 08                	jmp    c001b464 <FAT::openDir(char const*, void**)+0xa8>
c001b45c:	b8 00 00 00 00       	mov    eax,0x0
c001b461:	8d 76 00             	lea    esi,[esi+0x0]
c001b464:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b46a:	c3                   	ret    
c001b46b:	90                   	nop

c001b46c <FAT::stat(char const*, unsigned long long*, bool*)>:
c001b46c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b472:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001b47a:	75 0c                	jne    c001b488 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001b47c:	b8 04 00 00 00       	mov    eax,0x4
c001b481:	e9 d2 00 00 00       	jmp    c001b558 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b486:	66 90                	xchg   ax,ax
c001b488:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001b490:	75 0a                	jne    c001b49c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001b492:	b8 04 00 00 00       	mov    eax,0x4
c001b497:	e9 bc 00 00 00       	jmp    c001b558 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b49c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001b4a4:	75 0a                	jne    c001b4b0 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001b4a6:	b8 04 00 00 00       	mov    eax,0x4
c001b4ab:	e9 a8 00 00 00       	jmp    c001b558 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b4b0:	83 ec 08             	sub    esp,0x8
c001b4b3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b4ba:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b4c1:	50                   	push   eax
c001b4c2:	e8 79 52 fe ff       	call   c0000740 <strcpy>
c001b4c7:	83 c4 10             	add    esp,0x10
c001b4ca:	83 ec 08             	sub    esp,0x8
c001b4cd:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001b4d4:	50                   	push   eax
c001b4d5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b4dc:	e8 6b fd ff ff       	call   c001b24c <FAT::fixFilepath(char*)>
c001b4e1:	83 c4 10             	add    esp,0x10
c001b4e4:	83 ec 08             	sub    esp,0x8
c001b4e7:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b4eb:	50                   	push   eax
c001b4ec:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b4f3:	50                   	push   eax
c001b4f4:	e8 89 ab fe ff       	call   c0006082 <f_stat>
c001b4f9:	83 c4 10             	add    esp,0x10
c001b4fc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b503:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b50a:	85 c0                	test   eax,eax
c001b50c:	74 0a                	je     c001b518 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001b50e:	83 f8 04             	cmp    eax,0x4
c001b511:	74 35                	je     c001b548 <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001b513:	eb 3b                	jmp    c001b550 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001b515:	8d 76 00             	lea    esi,[esi+0x0]
c001b518:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b51c:	0f b6 c0             	movzx  eax,al
c001b51f:	83 e0 10             	and    eax,0x10
c001b522:	0f 95 c2             	setne  dl
c001b525:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001b52c:	88 10                	mov    BYTE PTR [eax],dl
c001b52e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b531:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b535:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001b53c:	89 01                	mov    DWORD PTR [ecx],eax
c001b53e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b541:	b8 00 00 00 00       	mov    eax,0x0
c001b546:	eb 10                	jmp    c001b558 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b548:	b8 02 00 00 00       	mov    eax,0x2
c001b54d:	eb 09                	jmp    c001b558 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b54f:	90                   	nop
c001b550:	b8 01 00 00 00       	mov    eax,0x1
c001b555:	8d 76 00             	lea    esi,[esi+0x0]
c001b558:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b55e:	c3                   	ret    
c001b55f:	90                   	nop

c001b560 <FAT::unlink(char const*)>:
c001b560:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b566:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b56e:	75 08                	jne    c001b578 <FAT::unlink(char const*)+0x18>
c001b570:	b8 04 00 00 00       	mov    eax,0x4
c001b575:	eb 61                	jmp    c001b5d8 <FAT::unlink(char const*)+0x78>
c001b577:	90                   	nop
c001b578:	83 ec 08             	sub    esp,0x8
c001b57b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b582:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b586:	50                   	push   eax
c001b587:	e8 b4 51 fe ff       	call   c0000740 <strcpy>
c001b58c:	83 c4 10             	add    esp,0x10
c001b58f:	83 ec 08             	sub    esp,0x8
c001b592:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b596:	50                   	push   eax
c001b597:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b59e:	e8 a9 fc ff ff       	call   c001b24c <FAT::fixFilepath(char*)>
c001b5a3:	83 c4 10             	add    esp,0x10
c001b5a6:	83 ec 0c             	sub    esp,0xc
c001b5a9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b5ad:	50                   	push   eax
c001b5ae:	e8 21 ae fe ff       	call   c00063d4 <f_unlink>
c001b5b3:	83 c4 10             	add    esp,0x10
c001b5b6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b5bd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b5c4:	85 c0                	test   eax,eax
c001b5c6:	75 08                	jne    c001b5d0 <FAT::unlink(char const*)+0x70>
c001b5c8:	b8 00 00 00 00       	mov    eax,0x0
c001b5cd:	eb 09                	jmp    c001b5d8 <FAT::unlink(char const*)+0x78>
c001b5cf:	90                   	nop
c001b5d0:	b8 01 00 00 00       	mov    eax,0x1
c001b5d5:	8d 76 00             	lea    esi,[esi+0x0]
c001b5d8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b5de:	c3                   	ret    
c001b5df:	90                   	nop

c001b5e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001b5e0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b5e6:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001b5ed:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001b5f4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b5f8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b5fc:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001b604:	75 0a                	jne    c001b610 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001b606:	b8 04 00 00 00       	mov    eax,0x4
c001b60b:	e9 30 01 00 00       	jmp    c001b740 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001b610:	83 ec 08             	sub    esp,0x8
c001b613:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b61a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b61e:	50                   	push   eax
c001b61f:	e8 1c 51 fe ff       	call   c0000740 <strcpy>
c001b624:	83 c4 10             	add    esp,0x10
c001b627:	83 ec 08             	sub    esp,0x8
c001b62a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b62e:	50                   	push   eax
c001b62f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b636:	e8 11 fc ff ff       	call   c001b24c <FAT::fixFilepath(char*)>
c001b63b:	83 c4 10             	add    esp,0x10
c001b63e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001b646:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001b64e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b653:	83 e0 01             	and    eax,0x1
c001b656:	74 08                	je     c001b660 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001b658:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001b660:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b665:	83 e0 02             	and    eax,0x2
c001b668:	74 0a                	je     c001b674 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001b66a:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001b672:	66 90                	xchg   ax,ax
c001b674:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b679:	83 e0 04             	and    eax,0x4
c001b67c:	74 0a                	je     c001b688 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001b67e:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001b686:	66 90                	xchg   ax,ax
c001b688:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b68d:	83 e0 08             	and    eax,0x8
c001b690:	74 0a                	je     c001b69c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001b692:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001b69a:	66 90                	xchg   ax,ax
c001b69c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b6a1:	83 e0 01             	and    eax,0x1
c001b6a4:	74 0a                	je     c001b6b0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001b6a6:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001b6ae:	66 90                	xchg   ax,ax
c001b6b0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b6b5:	83 e0 02             	and    eax,0x2
c001b6b8:	74 0a                	je     c001b6c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001b6ba:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001b6c2:	66 90                	xchg   ax,ax
c001b6c4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b6c9:	83 e0 04             	and    eax,0x4
c001b6cc:	74 0a                	je     c001b6d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001b6ce:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001b6d6:	66 90                	xchg   ax,ax
c001b6d8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b6dd:	83 e0 08             	and    eax,0x8
c001b6e0:	74 0a                	je     c001b6ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001b6e2:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001b6ea:	66 90                	xchg   ax,ax
c001b6ec:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001b6f3:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001b6fa:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001b702:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001b70a:	83 ec 04             	sub    esp,0x4
c001b70d:	52                   	push   edx
c001b70e:	50                   	push   eax
c001b70f:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b713:	50                   	push   eax
c001b714:	e8 5d b3 fe ff       	call   c0006a76 <f_chmod>
c001b719:	83 c4 10             	add    esp,0x10
c001b71c:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001b723:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001b72a:	85 c0                	test   eax,eax
c001b72c:	75 0a                	jne    c001b738 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001b72e:	b8 00 00 00 00       	mov    eax,0x0
c001b733:	eb 0b                	jmp    c001b740 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001b735:	8d 76 00             	lea    esi,[esi+0x0]
c001b738:	b8 01 00 00 00       	mov    eax,0x1
c001b73d:	8d 76 00             	lea    esi,[esi+0x0]
c001b740:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b746:	c3                   	ret    
c001b747:	90                   	nop

c001b748 <FAT::rename(char const*, char const*)>:
c001b748:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b74e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001b756:	74 0c                	je     c001b764 <FAT::rename(char const*, char const*)+0x1c>
c001b758:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001b760:	75 0e                	jne    c001b770 <FAT::rename(char const*, char const*)+0x28>
c001b762:	66 90                	xchg   ax,ax
c001b764:	b8 04 00 00 00       	mov    eax,0x4
c001b769:	e9 9e 00 00 00       	jmp    c001b80c <FAT::rename(char const*, char const*)+0xc4>
c001b76e:	66 90                	xchg   ax,ax
c001b770:	83 ec 08             	sub    esp,0x8
c001b773:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b77a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b781:	50                   	push   eax
c001b782:	e8 b9 4f fe ff       	call   c0000740 <strcpy>
c001b787:	83 c4 10             	add    esp,0x10
c001b78a:	83 ec 08             	sub    esp,0x8
c001b78d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001b794:	50                   	push   eax
c001b795:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b79c:	e8 ab fa ff ff       	call   c001b24c <FAT::fixFilepath(char*)>
c001b7a1:	83 c4 10             	add    esp,0x10
c001b7a4:	83 ec 08             	sub    esp,0x8
c001b7a7:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001b7ae:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b7b2:	50                   	push   eax
c001b7b3:	e8 88 4f fe ff       	call   c0000740 <strcpy>
c001b7b8:	83 c4 10             	add    esp,0x10
c001b7bb:	83 ec 08             	sub    esp,0x8
c001b7be:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b7c2:	50                   	push   eax
c001b7c3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b7ca:	e8 7d fa ff ff       	call   c001b24c <FAT::fixFilepath(char*)>
c001b7cf:	83 c4 10             	add    esp,0x10
c001b7d2:	83 ec 08             	sub    esp,0x8
c001b7d5:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b7d9:	50                   	push   eax
c001b7da:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b7e1:	50                   	push   eax
c001b7e2:	e8 9c af fe ff       	call   c0006783 <f_rename>
c001b7e7:	83 c4 10             	add    esp,0x10
c001b7ea:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001b7f1:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001b7f8:	85 c0                	test   eax,eax
c001b7fa:	75 08                	jne    c001b804 <FAT::rename(char const*, char const*)+0xbc>
c001b7fc:	b8 00 00 00 00       	mov    eax,0x0
c001b801:	eb 09                	jmp    c001b80c <FAT::rename(char const*, char const*)+0xc4>
c001b803:	90                   	nop
c001b804:	b8 01 00 00 00       	mov    eax,0x1
c001b809:	8d 76 00             	lea    esi,[esi+0x0]
c001b80c:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b812:	c3                   	ret    
c001b813:	90                   	nop

c001b814 <FAT::mkdir(char const*)>:
c001b814:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b81a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b822:	75 08                	jne    c001b82c <FAT::mkdir(char const*)+0x18>
c001b824:	b8 04 00 00 00       	mov    eax,0x4
c001b829:	eb 61                	jmp    c001b88c <FAT::mkdir(char const*)+0x78>
c001b82b:	90                   	nop
c001b82c:	83 ec 08             	sub    esp,0x8
c001b82f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b836:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b83a:	50                   	push   eax
c001b83b:	e8 00 4f fe ff       	call   c0000740 <strcpy>
c001b840:	83 c4 10             	add    esp,0x10
c001b843:	83 ec 08             	sub    esp,0x8
c001b846:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b84a:	50                   	push   eax
c001b84b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b852:	e8 f5 f9 ff ff       	call   c001b24c <FAT::fixFilepath(char*)>
c001b857:	83 c4 10             	add    esp,0x10
c001b85a:	83 ec 0c             	sub    esp,0xc
c001b85d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b861:	50                   	push   eax
c001b862:	e8 f0 ac fe ff       	call   c0006557 <f_mkdir>
c001b867:	83 c4 10             	add    esp,0x10
c001b86a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b871:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b878:	85 c0                	test   eax,eax
c001b87a:	75 08                	jne    c001b884 <FAT::mkdir(char const*)+0x70>
c001b87c:	b8 00 00 00 00       	mov    eax,0x0
c001b881:	eb 09                	jmp    c001b88c <FAT::mkdir(char const*)+0x78>
c001b883:	90                   	nop
c001b884:	b8 01 00 00 00       	mov    eax,0x1
c001b889:	8d 76 00             	lea    esi,[esi+0x0]
c001b88c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b892:	c3                   	ret    
c001b893:	90                   	nop

c001b894 <FAT::exists(char const*)>:
c001b894:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b89a:	83 ec 08             	sub    esp,0x8
c001b89d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b8a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b8a8:	50                   	push   eax
c001b8a9:	e8 92 4e fe ff       	call   c0000740 <strcpy>
c001b8ae:	83 c4 10             	add    esp,0x10
c001b8b1:	83 ec 08             	sub    esp,0x8
c001b8b4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b8b8:	50                   	push   eax
c001b8b9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b8c0:	e8 87 f9 ff ff       	call   c001b24c <FAT::fixFilepath(char*)>
c001b8c5:	83 c4 10             	add    esp,0x10
c001b8c8:	83 ec 08             	sub    esp,0x8
c001b8cb:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001b8d2:	50                   	push   eax
c001b8d3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b8d7:	50                   	push   eax
c001b8d8:	e8 a5 a7 fe ff       	call   c0006082 <f_stat>
c001b8dd:	83 c4 10             	add    esp,0x10
c001b8e0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b8e7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b8ee:	85 c0                	test   eax,eax
c001b8f0:	75 06                	jne    c001b8f8 <FAT::exists(char const*)+0x64>
c001b8f2:	b0 01                	mov    al,0x1
c001b8f4:	eb 06                	jmp    c001b8fc <FAT::exists(char const*)+0x68>
c001b8f6:	66 90                	xchg   ax,ax
c001b8f8:	b0 00                	mov    al,0x0
c001b8fa:	66 90                	xchg   ax,ax
c001b8fc:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b902:	c3                   	ret    
c001b903:	90                   	nop

c001b904 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001b904:	b8 08 00 00 00       	mov    eax,0x8
c001b909:	c3                   	ret    

c001b90a <ISO9660::seek(void*, unsigned long long)>:
c001b90a:	53                   	push   ebx
c001b90b:	b8 04 00 00 00       	mov    eax,0x4
c001b910:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b914:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b918:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b91c:	85 d2                	test   edx,edx
c001b91e:	74 17                	je     c001b937 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b920:	89 c8                	mov    eax,ecx
c001b922:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001b925:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001b928:	b8 01 00 00 00       	mov    eax,0x1
c001b92d:	73 08                	jae    c001b937 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b92f:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001b932:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001b935:	31 c0                	xor    eax,eax
c001b937:	5b                   	pop    ebx
c001b938:	c3                   	ret    
c001b939:	90                   	nop

c001b93a <ISO9660::tell(void*, unsigned long long*)>:
c001b93a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b93e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b942:	85 d2                	test   edx,edx
c001b944:	74 12                	je     c001b958 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b946:	85 c0                	test   eax,eax
c001b948:	74 0e                	je     c001b958 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b94a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b94d:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001b950:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b953:	89 10                	mov    DWORD PTR [eax],edx
c001b955:	31 c0                	xor    eax,eax
c001b957:	c3                   	ret    
c001b958:	b8 04 00 00 00       	mov    eax,0x4
c001b95d:	c3                   	ret    

c001b95e <ISO9660::getName()>:
c001b95e:	b8 2c 4c 02 c0       	mov    eax,0xc0024c2c
c001b963:	c3                   	ret    

c001b964 <ISO9660::stat(void*, unsigned long long*)>:
c001b964:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b968:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b96c:	85 d2                	test   edx,edx
c001b96e:	74 12                	je     c001b982 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b970:	85 c0                	test   eax,eax
c001b972:	74 0e                	je     c001b982 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b974:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001b977:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001b97a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b97d:	89 10                	mov    DWORD PTR [eax],edx
c001b97f:	31 c0                	xor    eax,eax
c001b981:	c3                   	ret    
c001b982:	b8 04 00 00 00       	mov    eax,0x4
c001b987:	c3                   	ret    

c001b988 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001b988:	b8 01 00 00 00       	mov    eax,0x1
c001b98d:	c3                   	ret    

c001b98e <ISO9660::unlink(char const*)>:
c001b98e:	b8 01 00 00 00       	mov    eax,0x1
c001b993:	c3                   	ret    

c001b994 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001b994:	b8 01 00 00 00       	mov    eax,0x1
c001b999:	c3                   	ret    

c001b99a <ISO9660::rename(char const*, char const*)>:
c001b99a:	b8 01 00 00 00       	mov    eax,0x1
c001b99f:	c3                   	ret    

c001b9a0 <ISO9660::mkdir(char const*)>:
c001b9a0:	b8 01 00 00 00       	mov    eax,0x1
c001b9a5:	c3                   	ret    

c001b9a6 <ISO9660::close(void*)>:
c001b9a6:	83 ec 0c             	sub    esp,0xc
c001b9a9:	b8 04 00 00 00       	mov    eax,0x4
c001b9ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b9b2:	85 d2                	test   edx,edx
c001b9b4:	74 0e                	je     c001b9c4 <ISO9660::close(void*)+0x1e>
c001b9b6:	83 ec 0c             	sub    esp,0xc
c001b9b9:	52                   	push   edx
c001b9ba:	e8 14 e0 fe ff       	call   c00099d3 <free>
c001b9bf:	83 c4 10             	add    esp,0x10
c001b9c2:	31 c0                	xor    eax,eax
c001b9c4:	83 c4 0c             	add    esp,0xc
c001b9c7:	c3                   	ret    

c001b9c8 <ISO9660::closeDir(void*)>:
c001b9c8:	83 ec 0c             	sub    esp,0xc
c001b9cb:	b8 04 00 00 00       	mov    eax,0x4
c001b9d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b9d4:	85 d2                	test   edx,edx
c001b9d6:	74 0e                	je     c001b9e6 <ISO9660::closeDir(void*)+0x1e>
c001b9d8:	83 ec 0c             	sub    esp,0xc
c001b9db:	52                   	push   edx
c001b9dc:	e8 f2 df fe ff       	call   c00099d3 <free>
c001b9e1:	83 c4 10             	add    esp,0x10
c001b9e4:	31 c0                	xor    eax,eax
c001b9e6:	83 c4 0c             	add    esp,0xc
c001b9e9:	c3                   	ret    

c001b9ea <ISO9660::~ISO9660()>:
c001b9ea:	83 ec 0c             	sub    esp,0xc
c001b9ed:	ba 50 4c 02 c0       	mov    edx,0xc0024c50
c001b9f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9f6:	89 10                	mov    DWORD PTR [eax],edx
c001b9f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9fc:	83 ec 0c             	sub    esp,0xc
c001b9ff:	50                   	push   eax
c001ba00:	e8 15 14 ff ff       	call   c000ce1a <Filesystem::~Filesystem()>
c001ba05:	83 c4 10             	add    esp,0x10
c001ba08:	90                   	nop
c001ba09:	83 c4 0c             	add    esp,0xc
c001ba0c:	c3                   	ret    
c001ba0d:	90                   	nop

c001ba0e <ISO9660::~ISO9660()>:
c001ba0e:	83 ec 0c             	sub    esp,0xc
c001ba11:	83 ec 0c             	sub    esp,0xc
c001ba14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba18:	e8 cd ff ff ff       	call   c001b9ea <ISO9660::~ISO9660()>
c001ba1d:	83 c4 10             	add    esp,0x10
c001ba20:	83 ec 08             	sub    esp,0x8
c001ba23:	6a 08                	push   0x8
c001ba25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba29:	e8 d0 0f ff ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c001ba2e:	83 c4 10             	add    esp,0x10
c001ba31:	83 c4 0c             	add    esp,0xc
c001ba34:	c3                   	ret    

c001ba35 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001ba35:	55                   	push   ebp
c001ba36:	31 c9                	xor    ecx,ecx
c001ba38:	57                   	push   edi
c001ba39:	56                   	push   esi
c001ba3a:	53                   	push   ebx
c001ba3b:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001ba3f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ba43:	89 eb                	mov    ebx,ebp
c001ba45:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001ba49:	39 ce                	cmp    esi,ecx
c001ba4b:	7e 17                	jle    c001ba64 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001ba4d:	31 d2                	xor    edx,edx
c001ba4f:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001ba53:	7d 13                	jge    c001ba68 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001ba55:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ba59:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001ba5c:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001ba5f:	75 0d                	jne    c001ba6e <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001ba61:	42                   	inc    edx
c001ba62:	eb eb                	jmp    c001ba4f <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001ba64:	31 c0                	xor    eax,eax
c001ba66:	eb 0a                	jmp    c001ba72 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001ba68:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001ba6c:	eb 04                	jmp    c001ba72 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001ba6e:	41                   	inc    ecx
c001ba6f:	43                   	inc    ebx
c001ba70:	eb d7                	jmp    c001ba49 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001ba72:	5b                   	pop    ebx
c001ba73:	5e                   	pop    esi
c001ba74:	5f                   	pop    edi
c001ba75:	5d                   	pop    ebp
c001ba76:	c3                   	ret    

c001ba77 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001ba77:	57                   	push   edi
c001ba78:	56                   	push   esi
c001ba79:	53                   	push   ebx
c001ba7a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ba7e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba82:	39 0d 40 7b 02 c0    	cmp    DWORD PTR ds:0xc0027b40,ecx
c001ba88:	75 08                	jne    c001ba92 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c001ba8a:	38 05 b4 5e 02 c0    	cmp    BYTE PTR ds:0xc0025eb4,al
c001ba90:	74 2b                	je     c001babd <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c001ba92:	83 ec 0c             	sub    esp,0xc
c001ba95:	a2 b4 5e 02 c0       	mov    ds:0xc0025eb4,al
c001ba9a:	68 60 7b 02 c0       	push   0xc0027b60
c001ba9f:	0f be c0             	movsx  eax,al
c001baa2:	6a 01                	push   0x1
c001baa4:	89 0d 40 7b 02 c0    	mov    DWORD PTR ds:0xc0027b40,ecx
c001baaa:	31 db                	xor    ebx,ebx
c001baac:	53                   	push   ebx
c001baad:	51                   	push   ecx
c001baae:	ff 34 85 3c 69 02 c0 	push   DWORD PTR [eax*4-0x3ffd96c4]
c001bab5:	e8 42 47 ff ff       	call   c00101fc <LogicalDisk::read(unsigned long long, int, void*)>
c001baba:	83 c4 20             	add    esp,0x20
c001babd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bac1:	be 60 7b 02 c0       	mov    esi,0xc0027b60
c001bac6:	b9 00 08 00 00       	mov    ecx,0x800
c001bacb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bacd:	5b                   	pop    ebx
c001bace:	5e                   	pop    esi
c001bacf:	5f                   	pop    edi
c001bad0:	c3                   	ret    
c001bad1:	90                   	nop

c001bad2 <ISO9660::tryMount(LogicalDisk*, int)>:
c001bad2:	81 ec 10 08 00 00    	sub    esp,0x810
c001bad8:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001badf:	83 c0 41             	add    eax,0x41
c001bae2:	0f be c0             	movsx  eax,al
c001bae5:	50                   	push   eax
c001bae6:	8d 44 24 08          	lea    eax,[esp+0x8]
c001baea:	50                   	push   eax
c001baeb:	6a 10                	push   0x10
c001baed:	e8 85 ff ff ff       	call   c001ba77 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001baf2:	83 c4 10             	add    esp,0x10
c001baf5:	31 c0                	xor    eax,eax
c001baf7:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001bafc:	75 1d                	jne    c001bb1b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001bafe:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001bb03:	75 16                	jne    c001bb1b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001bb05:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001bb0a:	75 0f                	jne    c001bb1b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001bb0c:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001bb11:	75 08                	jne    c001bb1b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001bb13:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001bb18:	0f 94 c0             	sete   al
c001bb1b:	81 c4 0c 08 00 00    	add    esp,0x80c
c001bb21:	c3                   	ret    

c001bb22 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001bb22:	55                   	push   ebp
c001bb23:	57                   	push   edi
c001bb24:	56                   	push   esi
c001bb25:	53                   	push   ebx
c001bb26:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001bb2c:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001bb33:	85 ed                	test   ebp,ebp
c001bb35:	0f 84 da 01 00 00    	je     c001bd15 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001bb3b:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001bb43:	0f 84 cc 01 00 00    	je     c001bd15 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001bb49:	b8 01 00 00 00       	mov    eax,0x1
c001bb4e:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001bb52:	0f 85 c2 01 00 00    	jne    c001bd1a <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001bb58:	31 d2                	xor    edx,edx
c001bb5a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001bb61:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001bb64:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001bb67:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001bb6a:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb6d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bb71:	01 c8                	add    eax,ecx
c001bb73:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001bb76:	11 da                	adc    edx,ebx
c001bb78:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001bb7c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bb80:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001bb84:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bb88:	19 d7                	sbb    edi,edx
c001bb8a:	72 11                	jb     c001bb9d <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001bb8c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001bb8f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001bb93:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bb97:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bb9b:	eb 0c                	jmp    c001bba9 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001bb9d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001bba1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bba5:	29 ce                	sub    esi,ecx
c001bba7:	19 df                	sbb    edi,ebx
c001bba9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bbac:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001bbaf:	0f a4 c2 0b          	shld   edx,eax,0xb
c001bbb3:	c1 e0 0b             	shl    eax,0xb
c001bbb6:	01 c8                	add    eax,ecx
c001bbb8:	11 da                	adc    edx,ebx
c001bbba:	89 04 24             	mov    DWORD PTR [esp],eax
c001bbbd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bbc1:	51                   	push   ecx
c001bbc2:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bbc6:	50                   	push   eax
c001bbc7:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001bbcb:	53                   	push   ebx
c001bbcc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bbd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bbd4:	0f ac d0 0b          	shrd   eax,edx,0xb
c001bbd8:	50                   	push   eax
c001bbd9:	e8 99 fe ff ff       	call   c001ba77 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bbde:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001bbe1:	b8 00 08 00 00       	mov    eax,0x800
c001bbe6:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001bbec:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001bbf0:	29 d0                	sub    eax,edx
c001bbf2:	83 c4 10             	add    esp,0x10
c001bbf5:	89 f9                	mov    ecx,edi
c001bbf7:	39 c6                	cmp    esi,eax
c001bbf9:	83 d9 00             	sbb    ecx,0x0
c001bbfc:	7d 1b                	jge    c001bc19 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001bbfe:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001bc03:	75 12                	jne    c001bc17 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001bc05:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bc0c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bc12:	e9 fa 00 00 00       	jmp    c001bd11 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001bc17:	89 f0                	mov    eax,esi
c001bc19:	01 d3                	add    ebx,edx
c001bc1b:	31 d2                	xor    edx,edx
c001bc1d:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001bc21:	39 c2                	cmp    edx,eax
c001bc23:	7d 14                	jge    c001bc39 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001bc25:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001bc2c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001bc30:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001bc33:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001bc36:	42                   	inc    edx
c001bc37:	eb e8                	jmp    c001bc21 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001bc39:	89 c2                	mov    edx,eax
c001bc3b:	85 c0                	test   eax,eax
c001bc3d:	79 02                	jns    c001bc41 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001bc3f:	31 d2                	xor    edx,edx
c001bc41:	01 c2                	add    edx,eax
c001bc43:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001bc46:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001bc4d:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001bc51:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001bc55:	99                   	cdq    
c001bc56:	01 c1                	add    ecx,eax
c001bc58:	11 d3                	adc    ebx,edx
c001bc5a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001bc5e:	29 c6                	sub    esi,eax
c001bc60:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001bc64:	19 d7                	sbb    edi,edx
c001bc66:	89 34 24             	mov    DWORD PTR [esp],esi
c001bc69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001bc6d:	b8 ff 07 00 00       	mov    eax,0x7ff
c001bc72:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001bc75:	b8 00 00 00 00       	mov    eax,0x0
c001bc7a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001bc7e:	7d 43                	jge    c001bcc3 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001bc80:	52                   	push   edx
c001bc81:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bc85:	50                   	push   eax
c001bc86:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bc8a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bc8e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bc92:	0f ac d0 0b          	shrd   eax,edx,0xb
c001bc96:	50                   	push   eax
c001bc97:	e8 db fd ff ff       	call   c001ba77 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bc9c:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001bca4:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001bca9:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001bcb1:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001bcb9:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001bcbe:	83 c4 10             	add    esp,0x10
c001bcc1:	eb aa                	jmp    c001bc6d <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001bcc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bcc7:	0b 04 24             	or     eax,DWORD PTR [esp]
c001bcca:	74 2a                	je     c001bcf6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001bccc:	50                   	push   eax
c001bccd:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bcd1:	50                   	push   eax
c001bcd2:	8d 74 24 28          	lea    esi,[esp+0x28]
c001bcd6:	56                   	push   esi
c001bcd7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bcdb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bcdf:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001bce3:	51                   	push   ecx
c001bce4:	e8 8e fd ff ff       	call   c001ba77 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bce9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001bced:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bcf1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bcf3:	83 c4 10             	add    esp,0x10
c001bcf6:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bcfd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001bd01:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bd05:	89 18                	mov    DWORD PTR [eax],ebx
c001bd07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bd0b:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bd0e:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001bd11:	31 c0                	xor    eax,eax
c001bd13:	eb 05                	jmp    c001bd1a <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001bd15:	b8 04 00 00 00       	mov    eax,0x4
c001bd1a:	81 c4 2c 08 00 00    	add    esp,0x82c
c001bd20:	5b                   	pop    ebx
c001bd21:	5e                   	pop    esi
c001bd22:	5f                   	pop    edi
c001bd23:	5d                   	pop    ebp
c001bd24:	c3                   	ret    
c001bd25:	90                   	nop

c001bd26 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001bd26:	55                   	push   ebp
c001bd27:	57                   	push   edi
c001bd28:	56                   	push   esi
c001bd29:	53                   	push   ebx
c001bd2a:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001bd30:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001bd37:	85 ed                	test   ebp,ebp
c001bd39:	0f 84 51 02 00 00    	je     c001bf90 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001bd3f:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001bd47:	0f 84 43 02 00 00    	je     c001bf90 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001bd4d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bd50:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001bd53:	75 0a                	jne    c001bd5f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001bd55:	b8 07 00 00 00       	mov    eax,0x7
c001bd5a:	e9 36 02 00 00       	jmp    c001bf95 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001bd5f:	50                   	push   eax
c001bd60:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bd64:	50                   	push   eax
c001bd65:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001bd6c:	53                   	push   ebx
c001bd6d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bd70:	c1 e0 0b             	shl    eax,0xb
c001bd73:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001bd76:	c1 e8 0b             	shr    eax,0xb
c001bd79:	50                   	push   eax
c001bd7a:	e8 f8 fc ff ff       	call   c001ba77 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bd7f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bd82:	83 c4 10             	add    esp,0x10
c001bd85:	89 c1                	mov    ecx,eax
c001bd87:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001bd8a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001bd90:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001bd93:	84 db                	test   bl,bl
c001bd95:	0f 85 8b 00 00 00    	jne    c001be26 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001bd9b:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001bda1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001bda4:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001bdaa:	29 c6                	sub    esi,eax
c001bdac:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001bdb0:	89 f3                	mov    ebx,esi
c001bdb2:	89 f1                	mov    ecx,esi
c001bdb4:	c1 fb 1f             	sar    ebx,0x1f
c001bdb7:	01 f0                	add    eax,esi
c001bdb9:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001bdbc:	11 da                	adc    edx,ebx
c001bdbe:	89 04 24             	mov    DWORD PTR [esp],eax
c001bdc1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bdc5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001bdc8:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bdcb:	89 d8                	mov    eax,ebx
c001bdcd:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001bdd1:	ba 00 00 00 00       	mov    edx,0x0
c001bdd6:	19 f8                	sbb    eax,edi
c001bdd8:	b8 00 00 00 00       	mov    eax,0x0
c001bddd:	73 08                	jae    c001bde7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001bddf:	89 f0                	mov    eax,esi
c001bde1:	89 fa                	mov    edx,edi
c001bde3:	29 c8                	sub    eax,ecx
c001bde5:	19 da                	sbb    edx,ebx
c001bde7:	89 d7                	mov    edi,edx
c001bde9:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001bdec:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001bdef:	09 c7                	or     edi,eax
c001bdf1:	0f 84 5e ff ff ff    	je     c001bd55 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001bdf7:	57                   	push   edi
c001bdf8:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bdfc:	50                   	push   eax
c001bdfd:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001be04:	53                   	push   ebx
c001be05:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001be08:	c1 e0 0b             	shl    eax,0xb
c001be0b:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001be0f:	c1 e8 0b             	shr    eax,0xb
c001be12:	50                   	push   eax
c001be13:	e8 5f fc ff ff       	call   c001ba77 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001be18:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001be1b:	83 c4 10             	add    esp,0x10
c001be1e:	25 ff 07 00 00       	and    eax,0x7ff
c001be23:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001be26:	31 ff                	xor    edi,edi
c001be28:	56                   	push   esi
c001be29:	6a 28                	push   0x28
c001be2b:	6a 00                	push   0x0
c001be2d:	8d 44 24 24          	lea    eax,[esp+0x24]
c001be31:	50                   	push   eax
c001be32:	e8 4d 48 fe ff       	call   c0000684 <memset>
c001be37:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001be3a:	25 ff 07 00 00       	and    eax,0x7ff
c001be3f:	89 c6                	mov    esi,eax
c001be41:	83 c6 21             	add    esi,0x21
c001be44:	83 d7 00             	adc    edi,0x0
c001be47:	83 c4 10             	add    esp,0x10
c001be4a:	31 c9                	xor    ecx,ecx
c001be4c:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001be53:	83 f9 28             	cmp    ecx,0x28
c001be56:	88 04 24             	mov    BYTE PTR [esp],al
c001be59:	0f 94 c2             	sete   dl
c001be5c:	88 d0                	mov    al,dl
c001be5e:	ba ff 07 00 00       	mov    edx,0x7ff
c001be63:	39 f2                	cmp    edx,esi
c001be65:	ba 00 00 00 00       	mov    edx,0x0
c001be6a:	19 fa                	sbb    edx,edi
c001be6c:	0f 92 c2             	setb   dl
c001be6f:	09 c2                	or     edx,eax
c001be71:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001be75:	0f 94 c0             	sete   al
c001be78:	08 d0                	or     al,dl
c001be7a:	75 16                	jne    c001be92 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001be7c:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001be80:	74 10                	je     c001be92 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001be82:	8a 04 24             	mov    al,BYTE PTR [esp]
c001be85:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001be89:	41                   	inc    ecx
c001be8a:	83 c6 01             	add    esi,0x1
c001be8d:	83 d7 00             	adc    edi,0x0
c001be90:	eb ba                	jmp    c001be4c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001be92:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001be99:	83 ec 0c             	sub    esp,0xc
c001be9c:	8d 74 24 24          	lea    esi,[esp+0x24]
c001bea0:	56                   	push   esi
c001bea1:	e8 fa 47 fe ff       	call   c00006a0 <strlen>
c001bea6:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001bead:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001beb1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001beb9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bebc:	5a                   	pop    edx
c001bebd:	25 ff 07 00 00       	and    eax,0x7ff
c001bec2:	59                   	pop    ecx
c001bec3:	01 f8                	add    eax,edi
c001bec5:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001becb:	83 e0 02             	and    eax,0x2
c001bece:	3c 01                	cmp    al,0x1
c001bed0:	19 c0                	sbb    eax,eax
c001bed2:	83 c0 02             	add    eax,0x2
c001bed5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001bed9:	56                   	push   esi
c001beda:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001bede:	50                   	push   eax
c001bedf:	e8 5c 48 fe ff       	call   c0000740 <strcpy>
c001bee4:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001bee8:	83 c4 10             	add    esp,0x10
c001beeb:	84 c0                	test   al,al
c001beed:	75 21                	jne    c001bf10 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001beef:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001bef7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001beff:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001bf07:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001bf0e:	eb 28                	jmp    c001bf38 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001bf10:	fe c8                	dec    al
c001bf12:	75 24                	jne    c001bf38 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001bf14:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001bf1c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001bf24:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001bf2c:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001bf33:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001bf38:	8d 74 24 40          	lea    esi,[esp+0x40]
c001bf3c:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001bf43:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001bf4a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bf4c:	0f b6 f3             	movzx  esi,bl
c001bf4f:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001bf56:	31 db                	xor    ebx,ebx
c001bf58:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001bf5e:	89 df                	mov    edi,ebx
c001bf60:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001bf63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf66:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001bf69:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001bf6c:	39 c6                	cmp    esi,eax
c001bf6e:	19 d7                	sbb    edi,edx
c001bf70:	72 10                	jb     c001bf82 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001bf72:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001bf79:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001bf80:	eb 0a                	jmp    c001bf8c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001bf82:	29 f0                	sub    eax,esi
c001bf84:	19 da                	sbb    edx,ebx
c001bf86:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001bf89:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001bf8c:	31 c0                	xor    eax,eax
c001bf8e:	eb 05                	jmp    c001bf95 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001bf90:	b8 04 00 00 00       	mov    eax,0x4
c001bf95:	81 c4 5c 09 00 00    	add    esp,0x95c
c001bf9b:	5b                   	pop    ebx
c001bf9c:	5e                   	pop    esi
c001bf9d:	5f                   	pop    edi
c001bf9e:	5d                   	pop    ebp
c001bf9f:	c3                   	ret    

c001bfa0 <readRoot(unsigned int*, unsigned int*, char)>:
c001bfa0:	57                   	push   edi
c001bfa1:	56                   	push   esi
c001bfa2:	81 ec 38 08 00 00    	sub    esp,0x838
c001bfa8:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001bfb0:	50                   	push   eax
c001bfb1:	8d 44 24 38          	lea    eax,[esp+0x38]
c001bfb5:	50                   	push   eax
c001bfb6:	6a 10                	push   0x10
c001bfb8:	e8 ba fa ff ff       	call   c001ba77 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bfbd:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001bfc4:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001bfc8:	b9 22 00 00 00       	mov    ecx,0x22
c001bfcd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bfcf:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bfd6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bfda:	89 10                	mov    DWORD PTR [eax],edx
c001bfdc:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001bfe3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bfe7:	89 10                	mov    DWORD PTR [eax],edx
c001bfe9:	81 c4 44 08 00 00    	add    esp,0x844
c001bfef:	b0 01                	mov    al,0x1
c001bff1:	5e                   	pop    esi
c001bff2:	5f                   	pop    edi
c001bff3:	c3                   	ret    

c001bff4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001bff4:	55                   	push   ebp
c001bff5:	57                   	push   edi
c001bff6:	56                   	push   esi
c001bff7:	53                   	push   ebx
c001bff8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bffe:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001c005:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001c00c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c010:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001c014:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c018:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c01c:	75 03                	jne    c001c021 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001c01e:	83 c3 02             	add    ebx,0x2
c001c021:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001c024:	75 03                	jne    c001c029 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001c026:	43                   	inc    ebx
c001c027:	eb f8                	jmp    c001c021 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001c029:	51                   	push   ecx
c001c02a:	68 00 01 00 00       	push   0x100
c001c02f:	6a 00                	push   0x0
c001c031:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c035:	50                   	push   eax
c001c036:	e8 49 46 fe ff       	call   c0000684 <memset>
c001c03b:	83 c4 10             	add    esp,0x10
c001c03e:	31 d2                	xor    edx,edx
c001c040:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001c043:	84 c0                	test   al,al
c001c045:	74 21                	je     c001c068 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001c047:	3c 2f                	cmp    al,0x2f
c001c049:	75 0b                	jne    c001c056 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001c04b:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001c04f:	bd 01 00 00 00       	mov    ebp,0x1
c001c054:	eb 14                	jmp    c001c06a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001c056:	8d 48 9f             	lea    ecx,[eax-0x61]
c001c059:	80 f9 19             	cmp    cl,0x19
c001c05c:	77 03                	ja     c001c061 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c05e:	83 e8 20             	sub    eax,0x20
c001c061:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001c065:	42                   	inc    edx
c001c066:	eb d8                	jmp    c001c040 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001c068:	31 ed                	xor    ebp,ebp
c001c06a:	83 ec 0c             	sub    esp,0xc
c001c06d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001c074:	e8 4a d9 fe ff       	call   c00099c3 <malloc>
c001c079:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001c080:	89 c6                	mov    esi,eax
c001c082:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001c088:	c1 ef 0b             	shr    edi,0xb
c001c08b:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001c092:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001c096:	83 c4 10             	add    esp,0x10
c001c099:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001c09e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c0a2:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001c0a9:	74 28                	je     c001c0d3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001c0ab:	52                   	push   edx
c001c0ac:	57                   	push   edi
c001c0ad:	50                   	push   eax
c001c0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c0b2:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001c0b9:	e8 b9 f9 ff ff       	call   c001ba77 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c0be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c0c2:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001c0c9:	05 00 08 00 00       	add    eax,0x800
c001c0ce:	83 c4 10             	add    esp,0x10
c001c0d1:	eb cb                	jmp    c001c09e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001c0d3:	83 ec 0c             	sub    esp,0xc
c001c0d6:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c0da:	57                   	push   edi
c001c0db:	e8 c0 45 fe ff       	call   c00006a0 <strlen>
c001c0e0:	50                   	push   eax
c001c0e1:	57                   	push   edi
c001c0e2:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001c0e9:	56                   	push   esi
c001c0ea:	e8 46 f9 ff ff       	call   c001ba35 <__memmem(unsigned char*, int, unsigned char*, int)>
c001c0ef:	83 c4 20             	add    esp,0x20
c001c0f2:	85 c0                	test   eax,eax
c001c0f4:	75 13                	jne    c001c109 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001c0f6:	83 ec 0c             	sub    esp,0xc
c001c0f9:	56                   	push   esi
c001c0fa:	e8 d4 d8 fe ff       	call   c00099d3 <free>
c001c0ff:	83 c4 10             	add    esp,0x10
c001c102:	31 c0                	xor    eax,eax
c001c104:	e9 b3 00 00 00       	jmp    c001c1bc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c109:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001c10d:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001c111:	c1 e7 08             	shl    edi,0x8
c001c114:	c1 e2 10             	shl    edx,0x10
c001c117:	09 d7                	or     edi,edx
c001c119:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001c11d:	09 d7                	or     edi,edx
c001c11f:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001c123:	c1 e2 18             	shl    edx,0x18
c001c126:	09 d7                	or     edi,edx
c001c128:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001c12c:	89 d1                	mov    ecx,edx
c001c12e:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001c132:	c1 e1 08             	shl    ecx,0x8
c001c135:	c1 e2 10             	shl    edx,0x10
c001c138:	09 ca                	or     edx,ecx
c001c13a:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001c13e:	09 ca                	or     edx,ecx
c001c140:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001c144:	c1 e1 18             	shl    ecx,0x18
c001c147:	09 ca                	or     edx,ecx
c001c149:	89 e9                	mov    ecx,ebp
c001c14b:	84 c9                	test   cl,cl
c001c14d:	74 3c                	je     c001c18b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001c14f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c153:	83 ec 0c             	sub    esp,0xc
c001c156:	56                   	push   esi
c001c157:	e8 77 d8 fe ff       	call   c00099d3 <free>
c001c15c:	83 c4 0c             	add    esp,0xc
c001c15f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c166:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001c16b:	50                   	push   eax
c001c16c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c173:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c17a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c17e:	52                   	push   edx
c001c17f:	57                   	push   edi
c001c180:	53                   	push   ebx
c001c181:	e8 6e fe ff ff       	call   c001bff4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c186:	83 c4 20             	add    esp,0x20
c001c189:	eb 31                	jmp    c001c1bc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c18b:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001c18e:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001c195:	d0 e8                	shr    al,1
c001c197:	89 3b                	mov    DWORD PTR [ebx],edi
c001c199:	83 e0 01             	and    eax,0x1
c001c19c:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001c1a3:	83 ec 0c             	sub    esp,0xc
c001c1a6:	89 13                	mov    DWORD PTR [ebx],edx
c001c1a8:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001c1af:	89 03                	mov    DWORD PTR [ebx],eax
c001c1b1:	56                   	push   esi
c001c1b2:	e8 1c d8 fe ff       	call   c00099d3 <free>
c001c1b7:	83 c4 10             	add    esp,0x10
c001c1ba:	b0 01                	mov    al,0x1
c001c1bc:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c1c2:	5b                   	pop    ebx
c001c1c3:	5e                   	pop    esi
c001c1c4:	5f                   	pop    edi
c001c1c5:	5d                   	pop    ebp
c001c1c6:	c3                   	ret    

c001c1c7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001c1c7:	55                   	push   ebp
c001c1c8:	57                   	push   edi
c001c1c9:	56                   	push   esi
c001c1ca:	53                   	push   ebx
c001c1cb:	83 ec 20             	sub    esp,0x20
c001c1ce:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c1d2:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c1d6:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c1da:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c1e2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c1ea:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001c1ef:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001c1f5:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001c1fb:	57                   	push   edi
c001c1fc:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c200:	50                   	push   eax
c001c201:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c205:	50                   	push   eax
c001c206:	e8 95 fd ff ff       	call   c001bfa0 <readRoot(unsigned int*, unsigned int*, char)>
c001c20b:	5a                   	pop    edx
c001c20c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c210:	e8 8b 44 fe ff       	call   c00006a0 <strlen>
c001c215:	83 c4 10             	add    esp,0x10
c001c218:	83 f8 03             	cmp    eax,0x3
c001c21b:	77 17                	ja     c001c234 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c21d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c221:	89 03                	mov    DWORD PTR [ebx],eax
c001c223:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c227:	89 06                	mov    DWORD PTR [esi],eax
c001c229:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001c230:	b0 01                	mov    al,0x1
c001c232:	eb 19                	jmp    c001c24d <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001c234:	50                   	push   eax
c001c235:	55                   	push   ebp
c001c236:	57                   	push   edi
c001c237:	56                   	push   esi
c001c238:	53                   	push   ebx
c001c239:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c23d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c241:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c245:	e8 aa fd ff ff       	call   c001bff4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c24a:	83 c4 20             	add    esp,0x20
c001c24d:	83 c4 1c             	add    esp,0x1c
c001c250:	5b                   	pop    ebx
c001c251:	5e                   	pop    esi
c001c252:	5f                   	pop    edi
c001c253:	5d                   	pop    ebp
c001c254:	c3                   	ret    
c001c255:	90                   	nop

c001c256 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001c256:	57                   	push   edi
c001c257:	56                   	push   esi
c001c258:	53                   	push   ebx
c001c259:	83 ec 10             	sub    esp,0x10
c001c25c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c260:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c264:	85 ff                	test   edi,edi
c001c266:	0f 84 8b 00 00 00    	je     c001c2f7 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c26c:	85 f6                	test   esi,esi
c001c26e:	0f 84 83 00 00 00    	je     c001c2f7 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c274:	b8 03 00 00 00       	mov    eax,0x3
c001c279:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001c27e:	75 7c                	jne    c001c2fc <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c280:	83 ec 0c             	sub    esp,0xc
c001c283:	6a 1c                	push   0x1c
c001c285:	e8 39 d7 fe ff       	call   c00099c3 <malloc>
c001c28a:	89 07                	mov    DWORD PTR [edi],eax
c001c28c:	89 c3                	mov    ebx,eax
c001c28e:	58                   	pop    eax
c001c28f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c293:	50                   	push   eax
c001c294:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c297:	50                   	push   eax
c001c298:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c29c:	50                   	push   eax
c001c29d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c2a1:	50                   	push   eax
c001c2a2:	56                   	push   esi
c001c2a3:	e8 1f ff ff ff       	call   c001c1c7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c2a8:	83 c4 20             	add    esp,0x20
c001c2ab:	84 c0                	test   al,al
c001c2ad:	74 07                	je     c001c2b6 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001c2af:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c2b4:	74 0b                	je     c001c2c1 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001c2b6:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c2ba:	b8 01 00 00 00       	mov    eax,0x1
c001c2bf:	eb 3b                	jmp    c001c2fc <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c2c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c2c5:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c2c9:	89 03                	mov    DWORD PTR [ebx],eax
c001c2cb:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c2d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c2d6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c2dd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c2e4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c2e7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c2ee:	8a 06                	mov    al,BYTE PTR [esi]
c001c2f0:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c2f3:	31 c0                	xor    eax,eax
c001c2f5:	eb 05                	jmp    c001c2fc <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c2f7:	b8 04 00 00 00       	mov    eax,0x4
c001c2fc:	83 c4 10             	add    esp,0x10
c001c2ff:	5b                   	pop    ebx
c001c300:	5e                   	pop    esi
c001c301:	5f                   	pop    edi
c001c302:	c3                   	ret    
c001c303:	90                   	nop

c001c304 <ISO9660::exists(char const*)>:
c001c304:	83 ec 28             	sub    esp,0x28
c001c307:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c30b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001c30f:	52                   	push   edx
c001c310:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001c313:	52                   	push   edx
c001c314:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c318:	52                   	push   edx
c001c319:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c31d:	52                   	push   edx
c001c31e:	50                   	push   eax
c001c31f:	e8 a3 fe ff ff       	call   c001c1c7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c324:	83 c4 3c             	add    esp,0x3c
c001c327:	c3                   	ret    

c001c328 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001c328:	56                   	push   esi
c001c329:	53                   	push   ebx
c001c32a:	83 ec 14             	sub    esp,0x14
c001c32d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c331:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c335:	85 db                	test   ebx,ebx
c001c337:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c33b:	0f 94 c2             	sete   dl
c001c33e:	85 f6                	test   esi,esi
c001c340:	0f 94 c0             	sete   al
c001c343:	08 c2                	or     dl,al
c001c345:	75 68                	jne    c001c3af <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c347:	85 c9                	test   ecx,ecx
c001c349:	74 64                	je     c001c3af <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c34b:	83 ec 0c             	sub    esp,0xc
c001c34e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001c351:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c355:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c35b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c362:	50                   	push   eax
c001c363:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001c366:	50                   	push   eax
c001c367:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c36b:	50                   	push   eax
c001c36c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c370:	50                   	push   eax
c001c371:	51                   	push   ecx
c001c372:	e8 50 fe ff ff       	call   c001c1c7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c377:	83 c4 20             	add    esp,0x20
c001c37a:	ba 01 00 00 00       	mov    edx,0x1
c001c37f:	84 c0                	test   al,al
c001c381:	74 31                	je     c001c3b4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c383:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c387:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c38e:	89 03                	mov    DWORD PTR [ebx],eax
c001c390:	ba 00 00 00 00       	mov    edx,0x0
c001c395:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c399:	85 c0                	test   eax,eax
c001c39b:	0f 95 06             	setne  BYTE PTR [esi]
c001c39e:	74 14                	je     c001c3b4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c3a0:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c3a6:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c3ad:	eb 05                	jmp    c001c3b4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c3af:	ba 04 00 00 00       	mov    edx,0x4
c001c3b4:	83 c4 14             	add    esp,0x14
c001c3b7:	89 d0                	mov    eax,edx
c001c3b9:	5b                   	pop    ebx
c001c3ba:	5e                   	pop    esi
c001c3bb:	c3                   	ret    

c001c3bc <ISO9660::openDir(char const*, void**)>:
c001c3bc:	57                   	push   edi
c001c3bd:	56                   	push   esi
c001c3be:	53                   	push   ebx
c001c3bf:	83 ec 10             	sub    esp,0x10
c001c3c2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c3c6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c3ca:	85 ff                	test   edi,edi
c001c3cc:	74 7b                	je     c001c449 <ISO9660::openDir(char const*, void**)+0x8d>
c001c3ce:	85 f6                	test   esi,esi
c001c3d0:	74 77                	je     c001c449 <ISO9660::openDir(char const*, void**)+0x8d>
c001c3d2:	83 ec 0c             	sub    esp,0xc
c001c3d5:	6a 1c                	push   0x1c
c001c3d7:	e8 e7 d5 fe ff       	call   c00099c3 <malloc>
c001c3dc:	89 07                	mov    DWORD PTR [edi],eax
c001c3de:	89 c3                	mov    ebx,eax
c001c3e0:	58                   	pop    eax
c001c3e1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c3e5:	50                   	push   eax
c001c3e6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c3e9:	50                   	push   eax
c001c3ea:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c3ee:	50                   	push   eax
c001c3ef:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c3f3:	50                   	push   eax
c001c3f4:	56                   	push   esi
c001c3f5:	e8 cd fd ff ff       	call   c001c1c7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c3fa:	83 c4 20             	add    esp,0x20
c001c3fd:	84 c0                	test   al,al
c001c3ff:	74 07                	je     c001c408 <ISO9660::openDir(char const*, void**)+0x4c>
c001c401:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c406:	75 0b                	jne    c001c413 <ISO9660::openDir(char const*, void**)+0x57>
c001c408:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c40c:	b8 01 00 00 00       	mov    eax,0x1
c001c411:	eb 3b                	jmp    c001c44e <ISO9660::openDir(char const*, void**)+0x92>
c001c413:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c417:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c41b:	89 03                	mov    DWORD PTR [ebx],eax
c001c41d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c424:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c428:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c42f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c436:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c439:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c440:	8a 06                	mov    al,BYTE PTR [esi]
c001c442:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c445:	31 c0                	xor    eax,eax
c001c447:	eb 05                	jmp    c001c44e <ISO9660::openDir(char const*, void**)+0x92>
c001c449:	b8 04 00 00 00       	mov    eax,0x4
c001c44e:	83 c4 10             	add    esp,0x10
c001c451:	5b                   	pop    ebx
c001c452:	5e                   	pop    esi
c001c453:	5f                   	pop    edi
c001c454:	c3                   	ret    
c001c455:	90                   	nop

c001c456 <ISO9660::ISO9660()>:
c001c456:	83 ec 0c             	sub    esp,0xc
c001c459:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c45d:	83 ec 0c             	sub    esp,0xc
c001c460:	50                   	push   eax
c001c461:	e8 90 09 ff ff       	call   c000cdf6 <Filesystem::Filesystem()>
c001c466:	83 c4 10             	add    esp,0x10
c001c469:	ba 50 4c 02 c0       	mov    edx,0xc0024c50
c001c46e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c472:	89 10                	mov    DWORD PTR [eax],edx
c001c474:	90                   	nop
c001c475:	83 c4 0c             	add    esp,0xc
c001c478:	c3                   	ret    
c001c479:	90                   	nop

c001c47a <SoundCard::beginPlayback()>:
c001c47a:	c7 44 24 04 b0 4c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024cb0
c001c482:	e9 1a 7f ff ff       	jmp    c00143a1 <Krnl::panic(char const*)>
c001c487:	90                   	nop

c001c488 <SoundCard::stopPlayback()>:
c001c488:	c7 44 24 04 e4 4c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024ce4
c001c490:	e9 0c 7f ff ff       	jmp    c00143a1 <Krnl::panic(char const*)>
c001c495:	90                   	nop

c001c496 <SoundCard::SoundCard(char const*)>:
c001c496:	83 ec 1c             	sub    esp,0x1c
c001c499:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c49d:	83 ec 08             	sub    esp,0x8
c001c4a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c4a4:	50                   	push   eax
c001c4a5:	e8 80 1c ff ff       	call   c000e12a <Device::Device(char const*)>
c001c4aa:	83 c4 10             	add    esp,0x10
c001c4ad:	ba f0 4d 02 c0       	mov    edx,0xc0024df0
c001c4b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4b6:	89 10                	mov    DWORD PTR [eax],edx
c001c4b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4bc:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c4c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4c7:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001c4d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4d5:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001c4df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4e3:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001c4ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4f1:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001c4fb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c503:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001c508:	7f 19                	jg     c001c523 <SoundCard::SoundCard(char const*)+0x8d>
c001c50a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c50e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c512:	83 c2 54             	add    edx,0x54
c001c515:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001c51d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001c521:	eb e0                	jmp    c001c503 <SoundCard::SoundCard(char const*)+0x6d>
c001c523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c527:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c52e:	90                   	nop
c001c52f:	83 c4 1c             	add    esp,0x1c
c001c532:	c3                   	ret    
c001c533:	90                   	nop

c001c534 <SoundCard::~SoundCard()>:
c001c534:	83 ec 0c             	sub    esp,0xc
c001c537:	ba f0 4d 02 c0       	mov    edx,0xc0024df0
c001c53c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c540:	89 10                	mov    DWORD PTR [eax],edx
c001c542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c546:	83 ec 0c             	sub    esp,0xc
c001c549:	50                   	push   eax
c001c54a:	e8 a5 18 ff ff       	call   c000ddf4 <Device::~Device()>
c001c54f:	83 c4 10             	add    esp,0x10
c001c552:	90                   	nop
c001c553:	83 c4 0c             	add    esp,0xc
c001c556:	c3                   	ret    
c001c557:	90                   	nop

c001c558 <SoundCard::~SoundCard()>:
c001c558:	83 ec 0c             	sub    esp,0xc
c001c55b:	83 ec 0c             	sub    esp,0xc
c001c55e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c562:	e8 cd ff ff ff       	call   c001c534 <SoundCard::~SoundCard()>
c001c567:	83 c4 10             	add    esp,0x10
c001c56a:	83 ec 08             	sub    esp,0x8
c001c56d:	68 e8 01 00 00       	push   0x1e8
c001c572:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c576:	e8 83 04 ff ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c001c57b:	83 c4 10             	add    esp,0x10
c001c57e:	83 c4 0c             	add    esp,0xc
c001c581:	c3                   	ret    

c001c582 <SoundCard::configureRates(int, int, int)>:
c001c582:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c586:	31 c0                	xor    eax,eax
c001c588:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001c58f:	75 20                	jne    c001c5b1 <SoundCard::configureRates(int, int, int)+0x2f>
c001c591:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c595:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001c59b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c59f:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001c5a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5a9:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001c5af:	b0 01                	mov    al,0x1
c001c5b1:	c3                   	ret    

c001c5b2 <SoundCard::getSamples16(int, short*)>:
c001c5b2:	55                   	push   ebp
c001c5b3:	57                   	push   edi
c001c5b4:	31 ff                	xor    edi,edi
c001c5b6:	56                   	push   esi
c001c5b7:	53                   	push   ebx
c001c5b8:	83 ec 28             	sub    esp,0x28
c001c5bb:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c5bf:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c5c3:	8d 5c 2d 00          	lea    ebx,[ebp+ebp*1+0x0]
c001c5c7:	68 17 4d 02 c0       	push   0xc0024d17
c001c5cc:	e8 0e 05 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001c5d1:	83 c4 0c             	add    esp,0xc
c001c5d4:	53                   	push   ebx
c001c5d5:	6a 00                	push   0x0
c001c5d7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001c5db:	e8 a4 40 fe ff       	call   c0000684 <memset>
c001c5e0:	58                   	pop    eax
c001c5e1:	5a                   	pop    edx
c001c5e2:	53                   	push   ebx
c001c5e3:	31 db                	xor    ebx,ebx
c001c5e5:	68 36 4d 02 c0       	push   0xc0024d36
c001c5ea:	e8 f0 04 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001c5ef:	83 c4 10             	add    esp,0x10
c001c5f2:	52                   	push   edx
c001c5f3:	52                   	push   edx
c001c5f4:	53                   	push   ebx
c001c5f5:	68 49 4d 02 c0       	push   0xc0024d49
c001c5fa:	e8 e0 04 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001c5ff:	59                   	pop    ecx
c001c600:	58                   	pop    eax
c001c601:	ff b4 9e 58 01 00 00 	push   DWORD PTR [esi+ebx*4+0x158]
c001c608:	68 61 4d 02 c0       	push   0xc0024d61
c001c60d:	e8 cd 04 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001c612:	8b 84 9e 58 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x158]
c001c619:	83 c4 10             	add    esp,0x10
c001c61c:	85 c0                	test   eax,eax
c001c61e:	74 44                	je     c001c664 <SoundCard::getSamples16(int, short*)+0xb2>
c001c620:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c624:	75 3e                	jne    c001c664 <SoundCard::getSamples16(int, short*)+0xb2>
c001c626:	50                   	push   eax
c001c627:	50                   	push   eax
c001c628:	53                   	push   ebx
c001c629:	68 73 4d 02 c0       	push   0xc0024d73
c001c62e:	e8 ac 04 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001c633:	56                   	push   esi
c001c634:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c638:	55                   	push   ebp
c001c639:	ff b4 9e 58 01 00 00 	push   DWORD PTR [esi+ebx*4+0x158]
c001c640:	e8 6f 03 00 00       	call   c001c9b4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001c645:	83 c4 18             	add    esp,0x18
c001c648:	50                   	push   eax
c001c649:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c64d:	68 8a 4d 02 c0       	push   0xc0024d8a
c001c652:	e8 88 04 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001c657:	83 c4 10             	add    esp,0x10
c001c65a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c65e:	39 c7                	cmp    edi,eax
c001c660:	7d 02                	jge    c001c664 <SoundCard::getSamples16(int, short*)+0xb2>
c001c662:	89 c7                	mov    edi,eax
c001c664:	43                   	inc    ebx
c001c665:	83 fb 20             	cmp    ebx,0x20
c001c668:	75 88                	jne    c001c5f2 <SoundCard::getSamples16(int, short*)+0x40>
c001c66a:	83 c4 1c             	add    esp,0x1c
c001c66d:	89 f8                	mov    eax,edi
c001c66f:	5b                   	pop    ebx
c001c670:	5e                   	pop    esi
c001c671:	5f                   	pop    edi
c001c672:	5d                   	pop    ebp
c001c673:	c3                   	ret    

c001c674 <SoundCard::getSamples32(int, int*)>:
c001c674:	55                   	push   ebp
c001c675:	57                   	push   edi
c001c676:	31 ff                	xor    edi,edi
c001c678:	56                   	push   esi
c001c679:	31 f6                	xor    esi,esi
c001c67b:	53                   	push   ebx
c001c67c:	83 ec 10             	sub    esp,0x10
c001c67f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c683:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c687:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001c68b:	c1 e0 02             	shl    eax,0x2
c001c68e:	50                   	push   eax
c001c68f:	6a 00                	push   0x0
c001c691:	55                   	push   ebp
c001c692:	e8 ed 3f fe ff       	call   c0000684 <memset>
c001c697:	83 c4 10             	add    esp,0x10
c001c69a:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001c6a1:	85 c0                	test   eax,eax
c001c6a3:	74 1b                	je     c001c6c0 <SoundCard::getSamples32(int, int*)+0x4c>
c001c6a5:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c6a9:	75 15                	jne    c001c6c0 <SoundCard::getSamples32(int, int*)+0x4c>
c001c6ab:	53                   	push   ebx
c001c6ac:	55                   	push   ebp
c001c6ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c6b1:	50                   	push   eax
c001c6b2:	e8 f9 03 00 00       	call   c001cab0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001c6b7:	83 c4 10             	add    esp,0x10
c001c6ba:	39 c6                	cmp    esi,eax
c001c6bc:	7d 02                	jge    c001c6c0 <SoundCard::getSamples32(int, int*)+0x4c>
c001c6be:	89 c6                	mov    esi,eax
c001c6c0:	47                   	inc    edi
c001c6c1:	83 ff 20             	cmp    edi,0x20
c001c6c4:	75 d4                	jne    c001c69a <SoundCard::getSamples32(int, int*)+0x26>
c001c6c6:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001c6cc:	85 f6                	test   esi,esi
c001c6ce:	75 0f                	jne    c001c6df <SoundCard::getSamples32(int, int*)+0x6b>
c001c6d0:	84 c0                	test   al,al
c001c6d2:	74 1b                	je     c001c6ef <SoundCard::getSamples32(int, int*)+0x7b>
c001c6d4:	83 ec 0c             	sub    esp,0xc
c001c6d7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c6d9:	53                   	push   ebx
c001c6da:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001c6dd:	eb 0d                	jmp    c001c6ec <SoundCard::getSamples32(int, int*)+0x78>
c001c6df:	84 c0                	test   al,al
c001c6e1:	75 0c                	jne    c001c6ef <SoundCard::getSamples32(int, int*)+0x7b>
c001c6e3:	83 ec 0c             	sub    esp,0xc
c001c6e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c6e8:	53                   	push   ebx
c001c6e9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001c6ec:	83 c4 10             	add    esp,0x10
c001c6ef:	83 c4 0c             	add    esp,0xc
c001c6f2:	89 f0                	mov    eax,esi
c001c6f4:	5b                   	pop    ebx
c001c6f5:	5e                   	pop    esi
c001c6f6:	5f                   	pop    edi
c001c6f7:	5d                   	pop    ebp
c001c6f8:	c3                   	ret    
c001c6f9:	90                   	nop

c001c6fa <SoundCard::addChannel(SoundPort*)>:
c001c6fa:	56                   	push   esi
c001c6fb:	53                   	push   ebx
c001c6fc:	53                   	push   ebx
c001c6fd:	31 db                	xor    ebx,ebx
c001c6ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c703:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001c70b:	74 27                	je     c001c734 <SoundCard::addChannel(SoundPort*)+0x3a>
c001c70d:	43                   	inc    ebx
c001c70e:	83 fb 20             	cmp    ebx,0x20
c001c711:	75 f0                	jne    c001c703 <SoundCard::addChannel(SoundPort*)+0x9>
c001c713:	83 ec 0c             	sub    esp,0xc
c001c716:	83 cb ff             	or     ebx,0xffffffff
c001c719:	68 af 4d 02 c0       	push   0xc0024daf
c001c71e:	e8 bc 03 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001c723:	c7 04 24 a8 4d 02 c0 	mov    DWORD PTR [esp],0xc0024da8
c001c72a:	e8 72 7c ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c001c72f:	83 c4 10             	add    esp,0x10
c001c732:	eb 1b                	jmp    c001c74f <SoundCard::addChannel(SoundPort*)+0x55>
c001c734:	51                   	push   ecx
c001c735:	51                   	push   ecx
c001c736:	53                   	push   ebx
c001c737:	68 c7 4d 02 c0       	push   0xc0024dc7
c001c73c:	e8 9e 03 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001c741:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c745:	83 c4 10             	add    esp,0x10
c001c748:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001c74f:	89 d8                	mov    eax,ebx
c001c751:	5a                   	pop    edx
c001c752:	5b                   	pop    ebx
c001c753:	5e                   	pop    esi
c001c754:	c3                   	ret    
c001c755:	90                   	nop

c001c756 <SoundCard::removeChannel(int)>:
c001c756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c75a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c75e:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001c769:	c3                   	ret    
c001c76a:	66 90                	xchg   ax,ax

c001c76c <SoundPort::SoundPort(int, int, int, int)>:
c001c76c:	83 ec 0c             	sub    esp,0xc
c001c76f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c773:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c77a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c77e:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c786:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c78a:	89 10                	mov    DWORD PTR [eax],edx
c001c78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c790:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c794:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c79b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c79f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c7a2:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001c7a7:	75 13                	jne    c001c7bc <SoundPort::SoundPort(int, int, int, int)+0x50>
c001c7a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7ad:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7af:	05 a0 0f 00 00       	add    eax,0xfa0
c001c7b4:	01 c0                	add    eax,eax
c001c7b6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c7ba:	66 90                	xchg   ax,ax
c001c7bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c7c4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001c7c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7cb:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001c7d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7d6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c7d9:	c1 e0 02             	shl    eax,0x2
c001c7dc:	83 ec 0c             	sub    esp,0xc
c001c7df:	50                   	push   eax
c001c7e0:	e8 de d1 fe ff       	call   c00099c3 <malloc>
c001c7e5:	83 c4 10             	add    esp,0x10
c001c7e8:	89 c2                	mov    edx,eax
c001c7ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7ee:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001c7f1:	90                   	nop
c001c7f2:	83 c4 0c             	add    esp,0xc
c001c7f5:	c3                   	ret    
c001c7f6:	66 90                	xchg   ax,ax

c001c7f8 <SoundPort::~SoundPort()>:
c001c7f8:	83 ec 0c             	sub    esp,0xc
c001c7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7ff:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c802:	85 c0                	test   eax,eax
c001c804:	74 1e                	je     c001c824 <SoundPort::~SoundPort()+0x2c>
c001c806:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c80a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c80d:	83 ec 0c             	sub    esp,0xc
c001c810:	50                   	push   eax
c001c811:	e8 bd d1 fe ff       	call   c00099d3 <free>
c001c816:	83 c4 10             	add    esp,0x10
c001c819:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c81d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c824:	90                   	nop
c001c825:	83 c4 0c             	add    esp,0xc
c001c828:	c3                   	ret    
c001c829:	90                   	nop
c001c82a:	66 90                	xchg   ax,ax

c001c82c <SoundPort::unpause()>:
c001c82c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c830:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001c834:	c3                   	ret    
c001c835:	90                   	nop
c001c836:	66 90                	xchg   ax,ax

c001c838 <SoundPort::pause()>:
c001c838:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c83c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c840:	c3                   	ret    
c001c841:	90                   	nop
c001c842:	66 90                	xchg   ax,ax

c001c844 <SoundPort::getBufferUsed()>:
c001c844:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c848:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001c84b:	c3                   	ret    

c001c84c <SoundPort::getBufferSize()>:
c001c84c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c850:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c853:	c3                   	ret    

c001c854 <SoundPort::buffer16(short*, int)>:
c001c854:	55                   	push   ebp
c001c855:	57                   	push   edi
c001c856:	56                   	push   esi
c001c857:	53                   	push   ebx
c001c858:	83 ec 1c             	sub    esp,0x1c
c001c85b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c85f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c863:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001c866:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001c869:	0f 84 85 00 00 00    	je     c001c8f4 <SoundPort::buffer16(short*, int)+0xa0>
c001c86f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001c873:	85 c9                	test   ecx,ecx
c001c875:	7e 7d                	jle    c001c8f4 <SoundPort::buffer16(short*, int)+0xa0>
c001c877:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001c87b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c87e:	c1 e1 0f             	shl    ecx,0xf
c001c881:	8d 70 01             	lea    esi,[eax+0x1]
c001c884:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c887:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001c88a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c88d:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c890:	74 6e                	je     c001c900 <SoundPort::buffer16(short*, int)+0xac>
c001c892:	31 f6                	xor    esi,esi
c001c894:	eb 22                	jmp    c001c8b8 <SoundPort::buffer16(short*, int)+0x64>
c001c896:	66 90                	xchg   ax,ax
c001c898:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001c89d:	8d 79 01             	lea    edi,[ecx+0x1]
c001c8a0:	c1 e3 0f             	shl    ebx,0xf
c001c8a3:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001c8a6:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001c8a9:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001c8ac:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c8af:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c8b2:	74 1c                	je     c001c8d0 <SoundPort::buffer16(short*, int)+0x7c>
c001c8b4:	89 c6                	mov    esi,eax
c001c8b6:	66 90                	xchg   ax,ax
c001c8b8:	8d 46 01             	lea    eax,[esi+0x1]
c001c8bb:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001c8bf:	75 d7                	jne    c001c898 <SoundPort::buffer16(short*, int)+0x44>
c001c8c1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c8c5:	83 c4 1c             	add    esp,0x1c
c001c8c8:	5b                   	pop    ebx
c001c8c9:	5e                   	pop    esi
c001c8ca:	5f                   	pop    edi
c001c8cb:	5d                   	pop    ebp
c001c8cc:	c3                   	ret    
c001c8cd:	8d 76 00             	lea    esi,[esi+0x0]
c001c8d0:	8d 46 02             	lea    eax,[esi+0x2]
c001c8d3:	90                   	nop
c001c8d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8d8:	83 ec 0c             	sub    esp,0xc
c001c8db:	68 1c 4e 02 c0       	push   0xc0024e1c
c001c8e0:	e8 fa 01 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001c8e5:	83 c4 10             	add    esp,0x10
c001c8e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c8ec:	83 c4 1c             	add    esp,0x1c
c001c8ef:	5b                   	pop    ebx
c001c8f0:	5e                   	pop    esi
c001c8f1:	5f                   	pop    edi
c001c8f2:	5d                   	pop    ebp
c001c8f3:	c3                   	ret    
c001c8f4:	83 c4 1c             	add    esp,0x1c
c001c8f7:	31 c0                	xor    eax,eax
c001c8f9:	5b                   	pop    ebx
c001c8fa:	5e                   	pop    esi
c001c8fb:	5f                   	pop    edi
c001c8fc:	5d                   	pop    ebp
c001c8fd:	c3                   	ret    
c001c8fe:	66 90                	xchg   ax,ax
c001c900:	b8 01 00 00 00       	mov    eax,0x1
c001c905:	eb cd                	jmp    c001c8d4 <SoundPort::buffer16(short*, int)+0x80>
c001c907:	90                   	nop

c001c908 <SoundPort::buffer32(int*, int)>:
c001c908:	55                   	push   ebp
c001c909:	57                   	push   edi
c001c90a:	56                   	push   esi
c001c90b:	53                   	push   ebx
c001c90c:	83 ec 1c             	sub    esp,0x1c
c001c90f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c913:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c917:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c91a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c91e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c922:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c925:	74 79                	je     c001c9a0 <SoundPort::buffer32(int*, int)+0x98>
c001c927:	85 c0                	test   eax,eax
c001c929:	7e 75                	jle    c001c9a0 <SoundPort::buffer32(int*, int)+0x98>
c001c92b:	8d 71 01             	lea    esi,[ecx+0x1]
c001c92e:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c931:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c934:	8b 37                	mov    esi,DWORD PTR [edi]
c001c936:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001c939:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c93c:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c93f:	74 6b                	je     c001c9ac <SoundPort::buffer32(int*, int)+0xa4>
c001c941:	31 f6                	xor    esi,esi
c001c943:	eb 1f                	jmp    c001c964 <SoundPort::buffer32(int*, int)+0x5c>
c001c945:	8d 76 00             	lea    esi,[esi+0x0]
c001c948:	8d 69 01             	lea    ebp,[ecx+0x1]
c001c94b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001c94e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001c951:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001c954:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001c958:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c95b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c95e:	74 1c                	je     c001c97c <SoundPort::buffer32(int*, int)+0x74>
c001c960:	89 de                	mov    esi,ebx
c001c962:	66 90                	xchg   ax,ax
c001c964:	8d 5e 01             	lea    ebx,[esi+0x1]
c001c967:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001c96b:	75 db                	jne    c001c948 <SoundPort::buffer32(int*, int)+0x40>
c001c96d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c971:	83 c4 1c             	add    esp,0x1c
c001c974:	5b                   	pop    ebx
c001c975:	5e                   	pop    esi
c001c976:	5f                   	pop    edi
c001c977:	5d                   	pop    ebp
c001c978:	c3                   	ret    
c001c979:	8d 76 00             	lea    esi,[esi+0x0]
c001c97c:	8d 46 02             	lea    eax,[esi+0x2]
c001c97f:	90                   	nop
c001c980:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c984:	83 ec 0c             	sub    esp,0xc
c001c987:	68 37 4e 02 c0       	push   0xc0024e37
c001c98c:	e8 4e 01 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001c991:	83 c4 10             	add    esp,0x10
c001c994:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c998:	83 c4 1c             	add    esp,0x1c
c001c99b:	5b                   	pop    ebx
c001c99c:	5e                   	pop    esi
c001c99d:	5f                   	pop    edi
c001c99e:	5d                   	pop    ebp
c001c99f:	c3                   	ret    
c001c9a0:	83 c4 1c             	add    esp,0x1c
c001c9a3:	31 c0                	xor    eax,eax
c001c9a5:	5b                   	pop    ebx
c001c9a6:	5e                   	pop    esi
c001c9a7:	5f                   	pop    edi
c001c9a8:	5d                   	pop    ebp
c001c9a9:	c3                   	ret    
c001c9aa:	66 90                	xchg   ax,ax
c001c9ac:	b8 01 00 00 00       	mov    eax,0x1
c001c9b1:	eb cd                	jmp    c001c980 <SoundPort::buffer32(int*, int)+0x78>
c001c9b3:	90                   	nop

c001c9b4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001c9b4:	57                   	push   edi
c001c9b5:	56                   	push   esi
c001c9b6:	53                   	push   ebx
c001c9b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c9bb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001c9bf:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001c9c5:	39 03                	cmp    DWORD PTR [ebx],eax
c001c9c7:	74 13                	je     c001c9dc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001c9c9:	83 ec 0c             	sub    esp,0xc
c001c9cc:	68 8c 4e 02 c0       	push   0xc0024e8c
c001c9d1:	e8 cb 79 ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c001c9d6:	83 c4 10             	add    esp,0x10
c001c9d9:	8d 76 00             	lea    esi,[esi+0x0]
c001c9dc:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001c9e2:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001c9e5:	74 11                	je     c001c9f8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001c9e7:	83 ec 0c             	sub    esp,0xc
c001c9ea:	68 52 4e 02 c0       	push   0xc0024e52
c001c9ef:	e8 ad 79 ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c001c9f4:	83 c4 10             	add    esp,0x10
c001c9f7:	90                   	nop
c001c9f8:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001c9fe:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001ca01:	74 11                	je     c001ca14 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001ca03:	83 ec 0c             	sub    esp,0xc
c001ca06:	68 52 4e 02 c0       	push   0xc0024e52
c001ca0b:	e8 91 79 ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c001ca10:	83 c4 10             	add    esp,0x10
c001ca13:	90                   	nop
c001ca14:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ca17:	89 c6                	mov    esi,eax
c001ca19:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001ca1d:	7e 05                	jle    c001ca24 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001ca1f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ca23:	90                   	nop
c001ca24:	85 f6                	test   esi,esi
c001ca26:	7e 30                	jle    c001ca58 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001ca28:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ca2c:	8d 3c 36             	lea    edi,[esi+esi*1]
c001ca2f:	31 c9                	xor    ecx,ecx
c001ca31:	01 d7                	add    edi,edx
c001ca33:	90                   	nop
c001ca34:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001ca37:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001ca3a:	85 c0                	test   eax,eax
c001ca3c:	79 06                	jns    c001ca44 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001ca3e:	05 ff 7f 00 00       	add    eax,0x7fff
c001ca43:	90                   	nop
c001ca44:	c1 f8 0f             	sar    eax,0xf
c001ca47:	83 c1 04             	add    ecx,0x4
c001ca4a:	66 01 02             	add    WORD PTR [edx],ax
c001ca4d:	83 c2 02             	add    edx,0x2
c001ca50:	39 d7                	cmp    edi,edx
c001ca52:	75 e0                	jne    c001ca34 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001ca54:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ca57:	90                   	nop
c001ca58:	56                   	push   esi
c001ca59:	89 c2                	mov    edx,eax
c001ca5b:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001ca62:	29 f2                	sub    edx,esi
c001ca64:	52                   	push   edx
c001ca65:	50                   	push   eax
c001ca66:	68 ac 4e 02 c0       	push   0xc0024eac
c001ca6b:	e8 6f 00 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001ca70:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001ca73:	50                   	push   eax
c001ca74:	01 f8                	add    eax,edi
c001ca76:	50                   	push   eax
c001ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ca7a:	29 f0                	sub    eax,esi
c001ca7c:	c1 e0 02             	shl    eax,0x2
c001ca7f:	50                   	push   eax
c001ca80:	68 dc 4e 02 c0       	push   0xc0024edc
c001ca85:	e8 55 00 ff ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001ca8a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ca8d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ca90:	83 c4 1c             	add    esp,0x1c
c001ca93:	01 d7                	add    edi,edx
c001ca95:	29 f0                	sub    eax,esi
c001ca97:	c1 e0 02             	shl    eax,0x2
c001ca9a:	50                   	push   eax
c001ca9b:	57                   	push   edi
c001ca9c:	52                   	push   edx
c001ca9d:	e8 1a 3b fe ff       	call   c00005bc <memmove>
c001caa2:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001caa5:	83 c4 10             	add    esp,0x10
c001caa8:	89 f0                	mov    eax,esi
c001caaa:	5b                   	pop    ebx
c001caab:	5e                   	pop    esi
c001caac:	5f                   	pop    edi
c001caad:	c3                   	ret    
c001caae:	66 90                	xchg   ax,ax

c001cab0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001cab0:	57                   	push   edi
c001cab1:	56                   	push   esi
c001cab2:	53                   	push   ebx
c001cab3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cab7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001cabb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001cabf:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001cac5:	39 06                	cmp    DWORD PTR [esi],eax
c001cac7:	74 13                	je     c001cadc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001cac9:	83 ec 0c             	sub    esp,0xc
c001cacc:	68 00 4f 02 c0       	push   0xc0024f00
c001cad1:	e8 cb 78 ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c001cad6:	83 c4 10             	add    esp,0x10
c001cad9:	8d 76 00             	lea    esi,[esi+0x0]
c001cadc:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001cae2:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001cae5:	74 11                	je     c001caf8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001cae7:	83 ec 0c             	sub    esp,0xc
c001caea:	68 6e 4e 02 c0       	push   0xc0024e6e
c001caef:	e8 ad 78 ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c001caf4:	83 c4 10             	add    esp,0x10
c001caf7:	90                   	nop
c001caf8:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001cafe:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001cb01:	74 11                	je     c001cb14 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001cb03:	83 ec 0c             	sub    esp,0xc
c001cb06:	68 6e 4e 02 c0       	push   0xc0024e6e
c001cb0b:	e8 91 78 ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c001cb10:	83 c4 10             	add    esp,0x10
c001cb13:	90                   	nop
c001cb14:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001cb17:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001cb1b:	7e 07                	jle    c001cb24 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001cb1d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cb21:	8d 76 00             	lea    esi,[esi+0x0]
c001cb24:	85 ff                	test   edi,edi
c001cb26:	7e 1c                	jle    c001cb44 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001cb28:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001cb2f:	31 c0                	xor    eax,eax
c001cb31:	8d 76 00             	lea    esi,[esi+0x0]
c001cb34:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001cb37:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001cb3a:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001cb3d:	83 c0 04             	add    eax,0x4
c001cb40:	39 c1                	cmp    ecx,eax
c001cb42:	75 f0                	jne    c001cb34 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001cb44:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001cb47:	50                   	push   eax
c001cb48:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cb4b:	29 f8                	sub    eax,edi
c001cb4d:	c1 e0 02             	shl    eax,0x2
c001cb50:	50                   	push   eax
c001cb51:	8d 04 ba             	lea    eax,[edx+edi*4]
c001cb54:	50                   	push   eax
c001cb55:	52                   	push   edx
c001cb56:	e8 61 3a fe ff       	call   c00005bc <memmove>
c001cb5b:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001cb5e:	83 c4 10             	add    esp,0x10
c001cb61:	89 f8                	mov    eax,edi
c001cb63:	5b                   	pop    ebx
c001cb64:	5e                   	pop    esi
c001cb65:	5f                   	pop    edi
c001cb66:	c3                   	ret    
c001cb67:	90                   	nop

c001cb68 <PCI::open(int, int, void*)>:
c001cb68:	83 ec 18             	sub    esp,0x18
c001cb6b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cb6f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cb73:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001cb79:	8b 10                	mov    edx,DWORD PTR [eax]
c001cb7b:	50                   	push   eax
c001cb7c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001cb7f:	31 c0                	xor    eax,eax
c001cb81:	83 c4 1c             	add    esp,0x1c
c001cb84:	c3                   	ret    
c001cb85:	90                   	nop

c001cb86 <PCI::close(int, int, void*)>:
c001cb86:	31 c0                	xor    eax,eax
c001cb88:	c3                   	ret    
c001cb89:	90                   	nop

c001cb8a <PCI::PCI()>:
c001cb8a:	83 ec 0c             	sub    esp,0xc
c001cb8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb91:	83 ec 08             	sub    esp,0x8
c001cb94:	68 1f 4f 02 c0       	push   0xc0024f1f
c001cb99:	50                   	push   eax
c001cb9a:	e8 ed 0b ff ff       	call   c000d78c <Bus::Bus(char const*)>
c001cb9f:	83 c4 10             	add    esp,0x10
c001cba2:	ba 08 50 02 c0       	mov    edx,0xc0025008
c001cba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbab:	89 10                	mov    DWORD PTR [eax],edx
c001cbad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbb1:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001cbbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbbf:	a3 60 83 02 c0       	mov    ds:0xc0028360,eax
c001cbc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbc8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cbce:	0f b6 d0             	movzx  edx,al
c001cbd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbd5:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001cbdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbe0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cbe6:	0f b6 d0             	movzx  edx,al
c001cbe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbed:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001cbf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbf6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cbfc:	8d 50 01             	lea    edx,[eax+0x1]
c001cbff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cc03:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001cc09:	0f b6 d0             	movzx  edx,al
c001cc0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc10:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001cc14:	83 c9 c0             	or     ecx,0xffffffc0
c001cc17:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001cc1b:	90                   	nop
c001cc1c:	83 c4 0c             	add    esp,0xc
c001cc1f:	c3                   	ret    

c001cc20 <PCI::readBAR8(unsigned int, int)>:
c001cc20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cc24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc28:	f6 c2 01             	test   dl,0x1
c001cc2b:	74 07                	je     c001cc34 <PCI::readBAR8(unsigned int, int)+0x14>
c001cc2d:	83 e2 fc             	and    edx,0xfffffffc
c001cc30:	01 c2                	add    edx,eax
c001cc32:	ec                   	in     al,dx
c001cc33:	c3                   	ret    
c001cc34:	83 e2 f0             	and    edx,0xfffffff0
c001cc37:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001cc3a:	c3                   	ret    
c001cc3b:	90                   	nop

c001cc3c <PCI::readBAR16(unsigned int, int)>:
c001cc3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cc40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc44:	f6 c2 01             	test   dl,0x1
c001cc47:	74 08                	je     c001cc51 <PCI::readBAR16(unsigned int, int)+0x15>
c001cc49:	83 e2 fc             	and    edx,0xfffffffc
c001cc4c:	01 c2                	add    edx,eax
c001cc4e:	66 ed                	in     ax,dx
c001cc50:	c3                   	ret    
c001cc51:	83 e2 f0             	and    edx,0xfffffff0
c001cc54:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001cc58:	c3                   	ret    
c001cc59:	90                   	nop

c001cc5a <PCI::readBAR32(unsigned int, int)>:
c001cc5a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cc5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc62:	f6 c2 01             	test   dl,0x1
c001cc65:	74 07                	je     c001cc6e <PCI::readBAR32(unsigned int, int)+0x14>
c001cc67:	83 e2 fc             	and    edx,0xfffffffc
c001cc6a:	01 c2                	add    edx,eax
c001cc6c:	ed                   	in     eax,dx
c001cc6d:	c3                   	ret    
c001cc6e:	83 e2 f0             	and    edx,0xfffffff0
c001cc71:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001cc74:	c3                   	ret    
c001cc75:	90                   	nop

c001cc76 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001cc76:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cc7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc7e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cc82:	f6 c2 01             	test   dl,0x1
c001cc85:	74 07                	je     c001cc8e <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001cc87:	83 e2 fc             	and    edx,0xfffffffc
c001cc8a:	01 ca                	add    edx,ecx
c001cc8c:	ee                   	out    dx,al
c001cc8d:	c3                   	ret    
c001cc8e:	83 e2 f0             	and    edx,0xfffffff0
c001cc91:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001cc94:	c3                   	ret    
c001cc95:	90                   	nop

c001cc96 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001cc96:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cc9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc9e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cca2:	f6 c2 01             	test   dl,0x1
c001cca5:	74 08                	je     c001ccaf <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001cca7:	83 e2 fc             	and    edx,0xfffffffc
c001ccaa:	01 ca                	add    edx,ecx
c001ccac:	66 ef                	out    dx,ax
c001ccae:	c3                   	ret    
c001ccaf:	83 e2 f0             	and    edx,0xfffffff0
c001ccb2:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001ccb6:	c3                   	ret    
c001ccb7:	90                   	nop

c001ccb8 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001ccb8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ccbc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ccc0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ccc4:	f6 c2 01             	test   dl,0x1
c001ccc7:	74 07                	je     c001ccd0 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001ccc9:	83 e2 fc             	and    edx,0xfffffffc
c001cccc:	01 ca                	add    edx,ecx
c001ccce:	ef                   	out    dx,eax
c001cccf:	c3                   	ret    
c001ccd0:	83 e2 f0             	and    edx,0xfffffff0
c001ccd3:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001ccd6:	c3                   	ret    
c001ccd7:	90                   	nop

c001ccd8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ccd8:	55                   	push   ebp
c001ccd9:	57                   	push   edi
c001ccda:	56                   	push   esi
c001ccdb:	53                   	push   ebx
c001ccdc:	83 ec 0c             	sub    esp,0xc
c001ccdf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cce3:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001cce7:	89 f0                	mov    eax,esi
c001cce9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001cced:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ccf1:	3c 07                	cmp    al,0x7
c001ccf3:	76 10                	jbe    c001cd05 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001ccf5:	83 ec 0c             	sub    esp,0xc
c001ccf8:	68 27 4f 02 c0       	push   0xc0024f27
c001ccfd:	e8 9f 76 ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c001cd02:	83 c4 10             	add    esp,0x10
c001cd05:	80 fb 0f             	cmp    bl,0xf
c001cd08:	76 10                	jbe    c001cd1a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001cd0a:	83 ec 0c             	sub    esp,0xc
c001cd0d:	68 57 4f 02 c0       	push   0xc0024f57
c001cd12:	e8 8a 76 ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c001cd17:	83 c4 10             	add    esp,0x10
c001cd1a:	8d 04 36             	lea    eax,[esi+esi*1]
c001cd1d:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cd22:	83 c8 f0             	or     eax,0xfffffff0
c001cd25:	ee                   	out    dx,al
c001cd26:	ba fa 0c 00 00       	mov    edx,0xcfa
c001cd2b:	89 e8                	mov    eax,ebp
c001cd2d:	ee                   	out    dx,al
c001cd2e:	83 c4 0c             	add    esp,0xc
c001cd31:	89 d8                	mov    eax,ebx
c001cd33:	66 81 e7 fc 00       	and    di,0xfc
c001cd38:	5b                   	pop    ebx
c001cd39:	c1 e0 08             	shl    eax,0x8
c001cd3c:	5e                   	pop    esi
c001cd3d:	09 f8                	or     eax,edi
c001cd3f:	5f                   	pop    edi
c001cd40:	66 0d 00 c0          	or     ax,0xc000
c001cd44:	5d                   	pop    ebp
c001cd45:	c3                   	ret    

c001cd46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cd46:	57                   	push   edi
c001cd47:	56                   	push   esi
c001cd48:	53                   	push   ebx
c001cd49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cd4d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cd51:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001cd57:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cd5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cd5f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cd63:	83 ff 01             	cmp    edi,0x1
c001cd66:	75 3e                	jne    c001cda6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001cd68:	89 de                	mov    esi,ebx
c001cd6a:	0f b6 c0             	movzx  eax,al
c001cd6d:	81 e6 fc 00 00 00    	and    esi,0xfc
c001cd73:	c1 e0 10             	shl    eax,0x10
c001cd76:	0f b6 c9             	movzx  ecx,cl
c001cd79:	09 f0                	or     eax,esi
c001cd7b:	c1 e1 08             	shl    ecx,0x8
c001cd7e:	0f b6 d2             	movzx  edx,dl
c001cd81:	09 c8                	or     eax,ecx
c001cd83:	c1 e2 0b             	shl    edx,0xb
c001cd86:	09 d0                	or     eax,edx
c001cd88:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cd8d:	0d 00 00 00 80       	or     eax,0x80000000
c001cd92:	ef                   	out    dx,eax
c001cd93:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cd98:	ed                   	in     eax,dx
c001cd99:	83 e3 02             	and    ebx,0x2
c001cd9c:	0f b6 cb             	movzx  ecx,bl
c001cd9f:	c1 e1 03             	shl    ecx,0x3
c001cda2:	d3 e8                	shr    eax,cl
c001cda4:	eb 43                	jmp    c001cde9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001cda6:	83 ff 02             	cmp    edi,0x2
c001cda9:	75 2c                	jne    c001cdd7 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001cdab:	83 ec 0c             	sub    esp,0xc
c001cdae:	0f b6 c9             	movzx  ecx,cl
c001cdb1:	0f b6 d2             	movzx  edx,dl
c001cdb4:	0f b6 fb             	movzx  edi,bl
c001cdb7:	0f b6 c0             	movzx  eax,al
c001cdba:	57                   	push   edi
c001cdbb:	51                   	push   ecx
c001cdbc:	52                   	push   edx
c001cdbd:	50                   	push   eax
c001cdbe:	56                   	push   esi
c001cdbf:	e8 14 ff ff ff       	call   c001ccd8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cdc4:	89 c2                	mov    edx,eax
c001cdc6:	ed                   	in     eax,dx
c001cdc7:	83 e3 02             	and    ebx,0x2
c001cdca:	83 c4 20             	add    esp,0x20
c001cdcd:	0f b6 cb             	movzx  ecx,bl
c001cdd0:	c1 e1 03             	shl    ecx,0x3
c001cdd3:	d3 e8                	shr    eax,cl
c001cdd5:	eb 12                	jmp    c001cde9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001cdd7:	83 ec 0c             	sub    esp,0xc
c001cdda:	68 87 4f 02 c0       	push   0xc0024f87
c001cddf:	e8 bd 75 ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c001cde4:	83 c4 10             	add    esp,0x10
c001cde7:	31 c0                	xor    eax,eax
c001cde9:	5b                   	pop    ebx
c001cdea:	5e                   	pop    esi
c001cdeb:	5f                   	pop    edi
c001cdec:	c3                   	ret    
c001cded:	90                   	nop

c001cdee <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001cdee:	83 ec 18             	sub    esp,0x18
c001cdf1:	6a 00                	push   0x0
c001cdf3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cdf8:	50                   	push   eax
c001cdf9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cdfe:	50                   	push   eax
c001cdff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce04:	50                   	push   eax
c001ce05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce09:	e8 38 ff ff ff       	call   c001cd46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce0e:	83 c4 2c             	add    esp,0x2c
c001ce11:	c3                   	ret    

c001ce12 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001ce12:	83 ec 18             	sub    esp,0x18
c001ce15:	6a 0e                	push   0xe
c001ce17:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce1c:	50                   	push   eax
c001ce1d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce22:	50                   	push   eax
c001ce23:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce28:	50                   	push   eax
c001ce29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce2d:	e8 14 ff ff ff       	call   c001cd46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce32:	83 c4 2c             	add    esp,0x2c
c001ce35:	0f b6 c0             	movzx  eax,al
c001ce38:	c3                   	ret    
c001ce39:	90                   	nop

c001ce3a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001ce3a:	55                   	push   ebp
c001ce3b:	57                   	push   edi
c001ce3c:	56                   	push   esi
c001ce3d:	53                   	push   ebx
c001ce3e:	83 ec 18             	sub    esp,0x18
c001ce41:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001ce46:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001ce4b:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001ce50:	6a 0a                	push   0xa
c001ce52:	56                   	push   esi
c001ce53:	55                   	push   ebp
c001ce54:	57                   	push   edi
c001ce55:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ce59:	e8 e8 fe ff ff       	call   c001cd46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce5e:	83 c4 14             	add    esp,0x14
c001ce61:	89 c3                	mov    ebx,eax
c001ce63:	6a 0a                	push   0xa
c001ce65:	0f b6 db             	movzx  ebx,bl
c001ce68:	56                   	push   esi
c001ce69:	55                   	push   ebp
c001ce6a:	57                   	push   edi
c001ce6b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ce6f:	e8 d2 fe ff ff       	call   c001cd46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce74:	83 c4 2c             	add    esp,0x2c
c001ce77:	25 00 ff 00 00       	and    eax,0xff00
c001ce7c:	09 d8                	or     eax,ebx
c001ce7e:	5b                   	pop    ebx
c001ce7f:	5e                   	pop    esi
c001ce80:	5f                   	pop    edi
c001ce81:	5d                   	pop    ebp
c001ce82:	c3                   	ret    
c001ce83:	90                   	nop

c001ce84 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001ce84:	83 ec 18             	sub    esp,0x18
c001ce87:	6a 08                	push   0x8
c001ce89:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce8e:	50                   	push   eax
c001ce8f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce94:	50                   	push   eax
c001ce95:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce9a:	50                   	push   eax
c001ce9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce9f:	e8 a2 fe ff ff       	call   c001cd46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cea4:	83 c4 2c             	add    esp,0x2c
c001cea7:	0f b6 c4             	movzx  eax,ah
c001ceaa:	c3                   	ret    
c001ceab:	90                   	nop

c001ceac <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001ceac:	83 ec 18             	sub    esp,0x18
c001ceaf:	6a 08                	push   0x8
c001ceb1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ceb6:	50                   	push   eax
c001ceb7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cebc:	50                   	push   eax
c001cebd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cec2:	50                   	push   eax
c001cec3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cec7:	e8 7a fe ff ff       	call   c001cd46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cecc:	83 c4 2c             	add    esp,0x2c
c001cecf:	c3                   	ret    

c001ced0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001ced0:	83 ec 18             	sub    esp,0x18
c001ced3:	6a 3c                	push   0x3c
c001ced5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ceda:	50                   	push   eax
c001cedb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cee0:	50                   	push   eax
c001cee1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cee6:	50                   	push   eax
c001cee7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ceeb:	e8 56 fe ff ff       	call   c001cd46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cef0:	83 c4 2c             	add    esp,0x2c
c001cef3:	c3                   	ret    

c001cef4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001cef4:	83 ec 18             	sub    esp,0x18
c001cef7:	6a 18                	push   0x18
c001cef9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cefe:	50                   	push   eax
c001ceff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cf04:	50                   	push   eax
c001cf05:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cf0a:	50                   	push   eax
c001cf0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cf0f:	e8 32 fe ff ff       	call   c001cd46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cf14:	83 c4 2c             	add    esp,0x2c
c001cf17:	0f b6 c4             	movzx  eax,ah
c001cf1a:	c3                   	ret    
c001cf1b:	90                   	nop

c001cf1c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cf1c:	55                   	push   ebp
c001cf1d:	57                   	push   edi
c001cf1e:	56                   	push   esi
c001cf1f:	53                   	push   ebx
c001cf20:	83 ec 28             	sub    esp,0x28
c001cf23:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001cf27:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001cf2c:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001cf31:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001cf36:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001cf3d:	8d 43 12             	lea    eax,[ebx+0x12]
c001cf40:	83 c3 10             	add    ebx,0x10
c001cf43:	0f b6 c0             	movzx  eax,al
c001cf46:	0f b6 db             	movzx  ebx,bl
c001cf49:	50                   	push   eax
c001cf4a:	51                   	push   ecx
c001cf4b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001cf4f:	57                   	push   edi
c001cf50:	55                   	push   ebp
c001cf51:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cf55:	e8 ec fd ff ff       	call   c001cd46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cf5a:	83 c4 14             	add    esp,0x14
c001cf5d:	89 c6                	mov    esi,eax
c001cf5f:	53                   	push   ebx
c001cf60:	c1 e6 10             	shl    esi,0x10
c001cf63:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cf67:	51                   	push   ecx
c001cf68:	57                   	push   edi
c001cf69:	55                   	push   ebp
c001cf6a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cf6e:	e8 d3 fd ff ff       	call   c001cd46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cf73:	83 c4 3c             	add    esp,0x3c
c001cf76:	0f b7 c0             	movzx  eax,ax
c001cf79:	5b                   	pop    ebx
c001cf7a:	09 f0                	or     eax,esi
c001cf7c:	5e                   	pop    esi
c001cf7d:	5f                   	pop    edi
c001cf7e:	5d                   	pop    ebp
c001cf7f:	c3                   	ret    

c001cf80 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001cf80:	55                   	push   ebp
c001cf81:	57                   	push   edi
c001cf82:	56                   	push   esi
c001cf83:	53                   	push   ebx
c001cf84:	83 ec 0c             	sub    esp,0xc
c001cf87:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cf8b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001cf8f:	89 f5                	mov    ebp,esi
c001cf91:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001cf97:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf9b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cf9f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cfa3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cfa7:	83 f9 01             	cmp    ecx,0x1
c001cfaa:	75 5d                	jne    c001d009 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001cfac:	0f b6 c8             	movzx  ecx,al
c001cfaf:	0f b6 d2             	movzx  edx,dl
c001cfb2:	c1 e1 10             	shl    ecx,0x10
c001cfb5:	c1 e2 0b             	shl    edx,0xb
c001cfb8:	89 f0                	mov    eax,esi
c001cfba:	25 fc 00 00 00       	and    eax,0xfc
c001cfbf:	09 c1                	or     ecx,eax
c001cfc1:	89 e8                	mov    eax,ebp
c001cfc3:	0f b6 c0             	movzx  eax,al
c001cfc6:	c1 e0 08             	shl    eax,0x8
c001cfc9:	09 c1                	or     ecx,eax
c001cfcb:	09 d1                	or     ecx,edx
c001cfcd:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cfd2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001cfd8:	89 c8                	mov    eax,ecx
c001cfda:	ef                   	out    dx,eax
c001cfdb:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cfe0:	ed                   	in     eax,dx
c001cfe1:	0f b7 db             	movzx  ebx,bx
c001cfe4:	83 e6 02             	and    esi,0x2
c001cfe7:	74 0a                	je     c001cff3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001cfe9:	0f b7 d0             	movzx  edx,ax
c001cfec:	c1 e3 10             	shl    ebx,0x10
c001cfef:	09 d3                	or     ebx,edx
c001cff1:	eb 05                	jmp    c001cff8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001cff3:	66 31 c0             	xor    ax,ax
c001cff6:	09 c3                	or     ebx,eax
c001cff8:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cffd:	89 c8                	mov    eax,ecx
c001cfff:	ef                   	out    dx,eax
c001d000:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d005:	89 d8                	mov    eax,ebx
c001d007:	eb 41                	jmp    c001d04a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d009:	83 f9 02             	cmp    ecx,0x2
c001d00c:	75 45                	jne    c001d053 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001d00e:	83 ec 0c             	sub    esp,0xc
c001d011:	0f b6 d2             	movzx  edx,dl
c001d014:	89 f1                	mov    ecx,esi
c001d016:	0f b6 c0             	movzx  eax,al
c001d019:	0f b6 f1             	movzx  esi,cl
c001d01c:	89 e9                	mov    ecx,ebp
c001d01e:	56                   	push   esi
c001d01f:	0f b6 c9             	movzx  ecx,cl
c001d022:	51                   	push   ecx
c001d023:	52                   	push   edx
c001d024:	50                   	push   eax
c001d025:	57                   	push   edi
c001d026:	e8 ad fc ff ff       	call   c001ccd8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d02b:	89 c2                	mov    edx,eax
c001d02d:	ed                   	in     eax,dx
c001d02e:	83 c4 20             	add    esp,0x20
c001d031:	0f b7 db             	movzx  ebx,bx
c001d034:	f6 c2 02             	test   dl,0x2
c001d037:	74 0c                	je     c001d045 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001d039:	0f b7 c8             	movzx  ecx,ax
c001d03c:	89 d8                	mov    eax,ebx
c001d03e:	c1 e0 10             	shl    eax,0x10
c001d041:	09 c8                	or     eax,ecx
c001d043:	eb 05                	jmp    c001d04a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d045:	66 31 c0             	xor    ax,ax
c001d048:	09 d8                	or     eax,ebx
c001d04a:	ef                   	out    dx,eax
c001d04b:	83 c4 0c             	add    esp,0xc
c001d04e:	5b                   	pop    ebx
c001d04f:	5e                   	pop    esi
c001d050:	5f                   	pop    edi
c001d051:	5d                   	pop    ebp
c001d052:	c3                   	ret    
c001d053:	c7 44 24 20 87 4f 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024f87
c001d05b:	83 c4 0c             	add    esp,0xc
c001d05e:	5b                   	pop    ebx
c001d05f:	5e                   	pop    esi
c001d060:	5f                   	pop    edi
c001d061:	5d                   	pop    ebp
c001d062:	e9 3a 73 ff ff       	jmp    c00143a1 <Krnl::panic(char const*)>
c001d067:	90                   	nop

c001d068 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001d068:	55                   	push   ebp
c001d069:	57                   	push   edi
c001d06a:	56                   	push   esi
c001d06b:	53                   	push   ebx
c001d06c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001d072:	80 3d 6c 83 02 c0 00 	cmp    BYTE PTR ds:0xc002836c,0x0
c001d079:	0f 85 84 00 00 00    	jne    c001d103 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c001d07f:	83 ec 0c             	sub    esp,0xc
c001d082:	68 14 01 00 00       	push   0x114
c001d087:	e8 37 c9 fe ff       	call   c00099c3 <malloc>
c001d08c:	83 c4 0c             	add    esp,0xc
c001d08f:	89 c3                	mov    ebx,eax
c001d091:	ff 35 70 79 02 c0    	push   DWORD PTR ds:0xc0027970
c001d097:	68 8d 4f 02 c0       	push   0xc0024f8d
c001d09c:	50                   	push   eax
c001d09d:	e8 a8 ff fe ff       	call   c000d04a <File::File(char const*, Process*)>
c001d0a2:	5a                   	pop    edx
c001d0a3:	59                   	pop    ecx
c001d0a4:	6a 01                	push   0x1
c001d0a6:	53                   	push   ebx
c001d0a7:	e8 02 00 ff ff       	call   c000d0ae <File::open(FileOpenMode)>
c001d0ac:	83 c4 0c             	add    esp,0xc
c001d0af:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001d0b3:	50                   	push   eax
c001d0b4:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d0b8:	50                   	push   eax
c001d0b9:	53                   	push   ebx
c001d0ba:	e8 9b 02 ff ff       	call   c000d35a <File::stat(unsigned long long*, bool*)>
c001d0bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d0c3:	40                   	inc    eax
c001d0c4:	89 04 24             	mov    DWORD PTR [esp],eax
c001d0c7:	e8 f7 c8 fe ff       	call   c00099c3 <malloc>
c001d0cc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d0d0:	a3 68 83 02 c0       	mov    ds:0xc0028368,eax
c001d0d5:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001d0d9:	5e                   	pop    esi
c001d0da:	8b 13                	mov    edx,DWORD PTR [ebx]
c001d0dc:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001d0e0:	51                   	push   ecx
c001d0e1:	50                   	push   eax
c001d0e2:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d0e6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d0ea:	53                   	push   ebx
c001d0eb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001d0ee:	83 c4 14             	add    esp,0x14
c001d0f1:	53                   	push   ebx
c001d0f2:	e8 15 00 ff ff       	call   c000d10c <File::close()>
c001d0f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d0fb:	83 c4 10             	add    esp,0x10
c001d0fe:	a3 64 83 02 c0       	mov    ds:0xc0028364,eax
c001d103:	a1 64 83 02 c0       	mov    eax,ds:0xc0028364
c001d108:	8b 15 68 83 02 c0    	mov    edx,DWORD PTR ds:0xc0028368
c001d10e:	89 04 24             	mov    DWORD PTR [esp],eax
c001d111:	31 ff                	xor    edi,edi
c001d113:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c001d11b:	31 f6                	xor    esi,esi
c001d11d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001d122:	31 db                	xor    ebx,ebx
c001d124:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001d12c:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001d131:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c001d138:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001d13c:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c001d143:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001d147:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001d14a:	0f 8e 6b 01 00 00    	jle    c001d2bb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c001d150:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001d153:	d4 40                	aam    0x40
c001d155:	d5 39                	aad    0x39
c001d157:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d15b:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c001d15f:	d4 40                	aam    0x40
c001d161:	d5 39                	aad    0x39
c001d163:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d167:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c001d16b:	d4 40                	aam    0x40
c001d16d:	d5 39                	aad    0x39
c001d16f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001d173:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c001d177:	d4 40                	aam    0x40
c001d179:	d5 39                	aad    0x39
c001d17b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d17f:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c001d183:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001d187:	3c 56                	cmp    al,0x56
c001d189:	74 45                	je     c001d1d0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c001d18b:	d4 40                	aam    0x40
c001d18d:	d5 39                	aad    0x39
c001d18f:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d192:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c001d196:	0f b6 c9             	movzx  ecx,cl
c001d199:	c1 e1 04             	shl    ecx,0x4
c001d19c:	d4 40                	aam    0x40
c001d19e:	d5 39                	aad    0x39
c001d1a0:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d1a3:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c001d1a7:	0f b6 db             	movzx  ebx,bl
c001d1aa:	09 cb                	or     ebx,ecx
c001d1ac:	c1 e3 04             	shl    ebx,0x4
c001d1af:	d4 40                	aam    0x40
c001d1b1:	d5 39                	aad    0x39
c001d1b3:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d1b6:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c001d1ba:	0f b6 c9             	movzx  ecx,cl
c001d1bd:	09 cb                	or     ebx,ecx
c001d1bf:	c1 e3 04             	shl    ebx,0x4
c001d1c2:	89 d9                	mov    ecx,ebx
c001d1c4:	d4 40                	aam    0x40
c001d1c6:	d5 39                	aad    0x39
c001d1c8:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d1cb:	0f b6 db             	movzx  ebx,bl
c001d1ce:	09 cb                	or     ebx,ecx
c001d1d0:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c001d1d4:	80 f9 44             	cmp    cl,0x44
c001d1d7:	74 47                	je     c001d220 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c001d1d9:	88 c8                	mov    al,cl
c001d1db:	d4 40                	aam    0x40
c001d1dd:	d5 39                	aad    0x39
c001d1df:	83 e8 30             	sub    eax,0x30
c001d1e2:	0f b6 e8             	movzx  ebp,al
c001d1e5:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c001d1e9:	c1 e5 04             	shl    ebp,0x4
c001d1ec:	d4 40                	aam    0x40
c001d1ee:	d5 39                	aad    0x39
c001d1f0:	83 e8 30             	sub    eax,0x30
c001d1f3:	0f b6 f0             	movzx  esi,al
c001d1f6:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c001d1fa:	09 ee                	or     esi,ebp
c001d1fc:	c1 e6 04             	shl    esi,0x4
c001d1ff:	d4 40                	aam    0x40
c001d201:	d5 39                	aad    0x39
c001d203:	83 e8 30             	sub    eax,0x30
c001d206:	0f b6 e8             	movzx  ebp,al
c001d209:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c001d20d:	09 ee                	or     esi,ebp
c001d20f:	c1 e6 04             	shl    esi,0x4
c001d212:	89 f5                	mov    ebp,esi
c001d214:	d4 40                	aam    0x40
c001d216:	d5 39                	aad    0x39
c001d218:	83 e8 30             	sub    eax,0x30
c001d21b:	0f b6 f0             	movzx  esi,al
c001d21e:	09 ee                	or     esi,ebp
c001d220:	83 c7 10             	add    edi,0x10
c001d223:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c001d227:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001d22a:	3c 0a                	cmp    al,0xa
c001d22c:	74 09                	je     c001d237 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c001d22e:	45                   	inc    ebp
c001d22f:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001d232:	75 16                	jne    c001d24a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c001d234:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001d237:	3c 0a                	cmp    al,0xa
c001d239:	0f 94 c0             	sete   al
c001d23c:	0f b6 c0             	movzx  eax,al
c001d23f:	01 c7                	add    edi,eax
c001d241:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c001d246:	75 0c                	jne    c001d254 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c001d248:	eb 15                	jmp    c001d25f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c001d24a:	47                   	inc    edi
c001d24b:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c001d24e:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001d252:	eb d3                	jmp    c001d227 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c001d254:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c001d259:	0f 85 e8 fe ff ff    	jne    c001d147 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d25f:	80 f9 44             	cmp    cl,0x44
c001d262:	74 0b                	je     c001d26f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c001d264:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c001d269:	0f 85 d8 fe ff ff    	jne    c001d147 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d26f:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001d273:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001d277:	c1 e1 04             	shl    ecx,0x4
c001d27a:	83 e8 30             	sub    eax,0x30
c001d27d:	09 c8                	or     eax,ecx
c001d27f:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c001d283:	0f 85 be fe ff ff    	jne    c001d147 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d289:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c001d28d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d291:	c1 e1 04             	shl    ecx,0x4
c001d294:	83 e8 30             	sub    eax,0x30
c001d297:	09 c8                	or     eax,ecx
c001d299:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c001d29d:	0f 85 a4 fe ff ff    	jne    c001d147 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d2a3:	50                   	push   eax
c001d2a4:	50                   	push   eax
c001d2a5:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d2a9:	50                   	push   eax
c001d2aa:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001d2b1:	e8 8a 34 fe ff       	call   c0000740 <strcpy>
c001d2b6:	83 c4 10             	add    esp,0x10
c001d2b9:	eb 15                	jmp    c001d2d0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c001d2bb:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d2c2:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001d2cd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001d2d0:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d2d7:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d2dd:	5b                   	pop    ebx
c001d2de:	5e                   	pop    esi
c001d2df:	5f                   	pop    edi
c001d2e0:	5d                   	pop    ebp
c001d2e1:	c3                   	ret    

c001d2e2 <PCI::checkBus(unsigned char)>:
c001d2e2:	56                   	push   esi
c001d2e3:	53                   	push   ebx
c001d2e4:	31 db                	xor    ebx,ebx
c001d2e6:	51                   	push   ecx
c001d2e7:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d2ec:	52                   	push   edx
c001d2ed:	53                   	push   ebx
c001d2ee:	43                   	inc    ebx
c001d2ef:	56                   	push   esi
c001d2f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d2f4:	e8 37 03 00 00       	call   c001d630 <PCI::checkDevice(unsigned char, unsigned char)>
c001d2f9:	83 c4 10             	add    esp,0x10
c001d2fc:	83 fb 20             	cmp    ebx,0x20
c001d2ff:	75 eb                	jne    c001d2ec <PCI::checkBus(unsigned char)+0xa>
c001d301:	58                   	pop    eax
c001d302:	5b                   	pop    ebx
c001d303:	5e                   	pop    esi
c001d304:	c3                   	ret    
c001d305:	90                   	nop

c001d306 <PCI::foundDevice(PCIDeviceInfo)>:
c001d306:	55                   	push   ebp
c001d307:	57                   	push   edi
c001d308:	56                   	push   esi
c001d309:	53                   	push   ebx
c001d30a:	83 ec 1c             	sub    esp,0x1c
c001d30d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d311:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001d317:	0f 84 52 01 00 00    	je     c001d46f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001d31d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001d321:	66 81 f9 06 04       	cmp    cx,0x406
c001d326:	75 2c                	jne    c001d354 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001d328:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001d32d:	50                   	push   eax
c001d32e:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001d333:	50                   	push   eax
c001d334:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001d339:	50                   	push   eax
c001d33a:	56                   	push   esi
c001d33b:	e8 b4 fb ff ff       	call   c001cef4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001d340:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001d344:	0f b6 c0             	movzx  eax,al
c001d347:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d34b:	83 c4 2c             	add    esp,0x2c
c001d34e:	5b                   	pop    ebx
c001d34f:	5e                   	pop    esi
c001d350:	5f                   	pop    edi
c001d351:	5d                   	pop    ebp
c001d352:	eb 8e                	jmp    c001d2e2 <PCI::checkBus(unsigned char)>
c001d354:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d358:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001d35e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d362:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d366:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001d36a:	88 d3                	mov    bl,dl
c001d36c:	85 c0                	test   eax,eax
c001d36e:	74 33                	je     c001d3a3 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001d370:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d373:	85 d2                	test   edx,edx
c001d375:	74 28                	je     c001d39f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d377:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001d37d:	31 ef                	xor    edi,ebp
c001d37f:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001d385:	75 18                	jne    c001d39f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d387:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d38b:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001d391:	75 0c                	jne    c001d39f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d393:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001d399:	0f 84 d0 00 00 00    	je     c001d46f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001d39f:	8b 00                	mov    eax,DWORD PTR [eax]
c001d3a1:	eb c9                	jmp    c001d36c <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001d3a3:	66 81 f9 01 06       	cmp    cx,0x601
c001d3a8:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001d3ac:	75 19                	jne    c001d3c7 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001d3ae:	83 ec 0c             	sub    esp,0xc
c001d3b1:	68 64 01 00 00       	push   0x164
c001d3b6:	e8 08 c6 fe ff       	call   c00099c3 <malloc>
c001d3bb:	89 c5                	mov    ebp,eax
c001d3bd:	89 04 24             	mov    DWORD PTR [esp],eax
c001d3c0:	e8 7b 0e 00 00       	call   c001e240 <SATABus::SATABus()>
c001d3c5:	eb 1e                	jmp    c001d3e5 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001d3c7:	66 81 f9 01 01       	cmp    cx,0x101
c001d3cc:	75 60                	jne    c001d42e <PCI::foundDevice(PCIDeviceInfo)+0x128>
c001d3ce:	83 ec 0c             	sub    esp,0xc
c001d3d1:	68 70 02 00 00       	push   0x270
c001d3d6:	e8 e8 c5 fe ff       	call   c00099c3 <malloc>
c001d3db:	89 c5                	mov    ebp,eax
c001d3dd:	89 04 24             	mov    DWORD PTR [esp],eax
c001d3e0:	e8 0f 03 00 00       	call   c001d6f4 <IDE::IDE()>
c001d3e5:	58                   	pop    eax
c001d3e6:	5a                   	pop    edx
c001d3e7:	55                   	push   ebp
c001d3e8:	56                   	push   esi
c001d3e9:	e8 38 0b ff ff       	call   c000df26 <Device::addChild(Device*)>
c001d3ee:	83 ec 1c             	sub    esp,0x1c
c001d3f1:	b9 09 00 00 00       	mov    ecx,0x9
c001d3f6:	fc                   	cld    
c001d3f7:	89 e7                	mov    edi,esp
c001d3f9:	89 de                	mov    esi,ebx
c001d3fb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d3fd:	55                   	push   ebp
c001d3fe:	e8 35 0a ff ff       	call   c000de38 <Device::preOpenPCI(PCIDeviceInfo)>
c001d403:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d406:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001d40a:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001d412:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001d41a:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001d422:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d425:	83 c4 4c             	add    esp,0x4c
c001d428:	5b                   	pop    ebx
c001d429:	5e                   	pop    esi
c001d42a:	5f                   	pop    edi
c001d42b:	5d                   	pop    ebp
c001d42c:	ff e0                	jmp    eax
c001d42e:	83 ec 0c             	sub    esp,0xc
c001d431:	68 58 01 00 00       	push   0x158
c001d436:	e8 88 c5 fe ff       	call   c00099c3 <malloc>
c001d43b:	89 c5                	mov    ebp,eax
c001d43d:	58                   	pop    eax
c001d43e:	5a                   	pop    edx
c001d43f:	68 a6 4f 02 c0       	push   0xc0024fa6
c001d444:	55                   	push   ebp
c001d445:	e8 e6 0d ff ff       	call   c000e230 <DriverlessDevice::DriverlessDevice(char const*)>
c001d44a:	59                   	pop    ecx
c001d44b:	5f                   	pop    edi
c001d44c:	55                   	push   ebp
c001d44d:	56                   	push   esi
c001d44e:	e8 d3 0a ff ff       	call   c000df26 <Device::addChild(Device*)>
c001d453:	b9 09 00 00 00       	mov    ecx,0x9
c001d458:	fc                   	cld    
c001d459:	89 df                	mov    edi,ebx
c001d45b:	89 de                	mov    esi,ebx
c001d45d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d45f:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001d463:	83 c4 2c             	add    esp,0x2c
c001d466:	5b                   	pop    ebx
c001d467:	5e                   	pop    esi
c001d468:	5f                   	pop    edi
c001d469:	5d                   	pop    ebp
c001d46a:	e9 c9 09 ff ff       	jmp    c000de38 <Device::preOpenPCI(PCIDeviceInfo)>
c001d46f:	83 c4 1c             	add    esp,0x1c
c001d472:	5b                   	pop    ebx
c001d473:	5e                   	pop    esi
c001d474:	5f                   	pop    edi
c001d475:	5d                   	pop    ebp
c001d476:	c3                   	ret    
c001d477:	90                   	nop

c001d478 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001d478:	55                   	push   ebp
c001d479:	57                   	push   edi
c001d47a:	56                   	push   esi
c001d47b:	53                   	push   ebx
c001d47c:	83 ec 68             	sub    esp,0x68
c001d47f:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001d483:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001d48a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d48e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001d495:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c001d49a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d49e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001d4a5:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c001d4aa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d4ae:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c001d4b3:	6a 0c                	push   0xc
c001d4b5:	57                   	push   edi
c001d4b6:	53                   	push   ebx
c001d4b7:	56                   	push   esi
c001d4b8:	55                   	push   ebp
c001d4b9:	e8 88 f8 ff ff       	call   c001cd46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d4be:	83 c4 20             	add    esp,0x20
c001d4c1:	57                   	push   edi
c001d4c2:	53                   	push   ebx
c001d4c3:	56                   	push   esi
c001d4c4:	55                   	push   ebp
c001d4c5:	e8 70 f9 ff ff       	call   c001ce3a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001d4ca:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c001d4cf:	57                   	push   edi
c001d4d0:	53                   	push   ebx
c001d4d1:	56                   	push   esi
c001d4d2:	55                   	push   ebp
c001d4d3:	e8 f8 f9 ff ff       	call   c001ced0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001d4d8:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d4dc:	83 c4 14             	add    esp,0x14
c001d4df:	6a 3c                	push   0x3c
c001d4e1:	57                   	push   edi
c001d4e2:	53                   	push   ebx
c001d4e3:	56                   	push   esi
c001d4e4:	55                   	push   ebp
c001d4e5:	e8 5c f8 ff ff       	call   c001cd46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d4ea:	0f b6 c4             	movzx  eax,ah
c001d4ed:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d4f1:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d4f5:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001d4f9:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c001d4fe:	83 c4 20             	add    esp,0x20
c001d501:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d507:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001d50e:	74 7c                	je     c001d58c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c001d510:	31 c0                	xor    eax,eax
c001d512:	8b 15 88 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026488
c001d518:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001d51e:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c001d524:	7e 66                	jle    c001d58c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c001d526:	8d 14 c2             	lea    edx,[edx+eax*8]
c001d529:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001d530:	39 cb                	cmp    ebx,ecx
c001d532:	75 55                	jne    c001d589 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c001d534:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001d53b:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001d53f:	75 48                	jne    c001d589 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c001d541:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d545:	83 ec 0c             	sub    esp,0xc
c001d548:	68 c0 4f 02 c0       	push   0xc0024fc0
c001d54d:	e8 8d f5 fe ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001d552:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d556:	8b 15 88 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026488
c001d55c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d560:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001d566:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c001d56e:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c001d572:	52                   	push   edx
c001d573:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d577:	53                   	push   ebx
c001d578:	68 e5 4f 02 c0       	push   0xc0024fe5
c001d57d:	e8 5d f5 fe ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001d582:	83 c4 20             	add    esp,0x20
c001d585:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d589:	40                   	inc    eax
c001d58a:	eb 86                	jmp    c001d512 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c001d58c:	31 d2                	xor    edx,edx
c001d58e:	83 ec 0c             	sub    esp,0xc
c001d591:	57                   	push   edi
c001d592:	53                   	push   ebx
c001d593:	56                   	push   esi
c001d594:	52                   	push   edx
c001d595:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001d599:	55                   	push   ebp
c001d59a:	e8 7d f9 ff ff       	call   c001cf1c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d59f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d5a3:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001d5a7:	42                   	inc    edx
c001d5a8:	83 c4 20             	add    esp,0x20
c001d5ab:	83 fa 06             	cmp    edx,0x6
c001d5ae:	75 de                	jne    c001d58e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c001d5b0:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d5b5:	83 ec 0c             	sub    esp,0xc
c001d5b8:	86 e0                	xchg   al,ah
c001d5ba:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001d5bf:	6a 02                	push   0x2
c001d5c1:	57                   	push   edi
c001d5c2:	53                   	push   ebx
c001d5c3:	56                   	push   esi
c001d5c4:	55                   	push   ebp
c001d5c5:	e8 7c f7 ff ff       	call   c001cd46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d5ca:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001d5cf:	83 c4 20             	add    esp,0x20
c001d5d2:	57                   	push   edi
c001d5d3:	53                   	push   ebx
c001d5d4:	56                   	push   esi
c001d5d5:	55                   	push   ebp
c001d5d6:	e8 a9 f8 ff ff       	call   c001ce84 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001d5db:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001d5df:	57                   	push   edi
c001d5e0:	53                   	push   ebx
c001d5e1:	56                   	push   esi
c001d5e2:	55                   	push   ebp
c001d5e3:	e8 06 f8 ff ff       	call   c001cdee <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d5e8:	b9 09 00 00 00       	mov    ecx,0x9
c001d5ed:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001d5f2:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001d5f6:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001d5fa:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001d5fe:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001d602:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001d606:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001d60a:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001d60e:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001d612:	83 ec 0c             	sub    esp,0xc
c001d615:	fc                   	cld    
c001d616:	89 e7                	mov    edi,esp
c001d618:	8d 74 24 58          	lea    esi,[esp+0x58]
c001d61c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d61e:	55                   	push   ebp
c001d61f:	e8 e2 fc ff ff       	call   c001d306 <PCI::foundDevice(PCIDeviceInfo)>
c001d624:	81 c4 8c 00 00 00    	add    esp,0x8c
c001d62a:	5b                   	pop    ebx
c001d62b:	5e                   	pop    esi
c001d62c:	5f                   	pop    edi
c001d62d:	5d                   	pop    ebp
c001d62e:	c3                   	ret    
c001d62f:	90                   	nop

c001d630 <PCI::checkDevice(unsigned char, unsigned char)>:
c001d630:	55                   	push   ebp
c001d631:	57                   	push   edi
c001d632:	56                   	push   esi
c001d633:	53                   	push   ebx
c001d634:	83 ec 0c             	sub    esp,0xc
c001d637:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001d63b:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001d640:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001d645:	6a 00                	push   0x0
c001d647:	56                   	push   esi
c001d648:	57                   	push   edi
c001d649:	55                   	push   ebp
c001d64a:	e8 9f f7 ff ff       	call   c001cdee <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d64f:	6a 00                	push   0x0
c001d651:	56                   	push   esi
c001d652:	57                   	push   edi
c001d653:	55                   	push   ebp
c001d654:	e8 1f fe ff ff       	call   c001d478 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001d659:	83 c4 20             	add    esp,0x20
c001d65c:	6a 00                	push   0x0
c001d65e:	56                   	push   esi
c001d65f:	57                   	push   edi
c001d660:	55                   	push   ebp
c001d661:	e8 ac f7 ff ff       	call   c001ce12 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001d666:	83 c4 10             	add    esp,0x10
c001d669:	84 c0                	test   al,al
c001d66b:	79 27                	jns    c001d694 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001d66d:	bb 01 00 00 00       	mov    ebx,0x1
c001d672:	53                   	push   ebx
c001d673:	56                   	push   esi
c001d674:	57                   	push   edi
c001d675:	55                   	push   ebp
c001d676:	e8 73 f7 ff ff       	call   c001cdee <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d67b:	83 c4 10             	add    esp,0x10
c001d67e:	66 40                	inc    ax
c001d680:	74 0c                	je     c001d68e <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001d682:	53                   	push   ebx
c001d683:	56                   	push   esi
c001d684:	57                   	push   edi
c001d685:	55                   	push   ebp
c001d686:	e8 ed fd ff ff       	call   c001d478 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001d68b:	83 c4 10             	add    esp,0x10
c001d68e:	43                   	inc    ebx
c001d68f:	83 fb 08             	cmp    ebx,0x8
c001d692:	75 de                	jne    c001d672 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001d694:	83 c4 0c             	add    esp,0xc
c001d697:	5b                   	pop    ebx
c001d698:	5e                   	pop    esi
c001d699:	5f                   	pop    edi
c001d69a:	5d                   	pop    ebp
c001d69b:	c3                   	ret    

c001d69c <PCI::detect()>:
c001d69c:	56                   	push   esi
c001d69d:	53                   	push   ebx
c001d69e:	53                   	push   ebx
c001d69f:	31 db                	xor    ebx,ebx
c001d6a1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d6a5:	6a 00                	push   0x0
c001d6a7:	6a 00                	push   0x0
c001d6a9:	6a 00                	push   0x0
c001d6ab:	56                   	push   esi
c001d6ac:	e8 61 f7 ff ff       	call   c001ce12 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001d6b1:	83 c4 10             	add    esp,0x10
c001d6b4:	a8 80                	test   al,0x80
c001d6b6:	75 21                	jne    c001d6d9 <PCI::detect()+0x3d>
c001d6b8:	51                   	push   ecx
c001d6b9:	51                   	push   ecx
c001d6ba:	6a 00                	push   0x0
c001d6bc:	56                   	push   esi
c001d6bd:	e8 20 fc ff ff       	call   c001d2e2 <PCI::checkBus(unsigned char)>
c001d6c2:	83 c4 10             	add    esp,0x10
c001d6c5:	eb 24                	jmp    c001d6eb <PCI::detect()+0x4f>
c001d6c7:	52                   	push   edx
c001d6c8:	52                   	push   edx
c001d6c9:	53                   	push   ebx
c001d6ca:	43                   	inc    ebx
c001d6cb:	56                   	push   esi
c001d6cc:	e8 11 fc ff ff       	call   c001d2e2 <PCI::checkBus(unsigned char)>
c001d6d1:	83 c4 10             	add    esp,0x10
c001d6d4:	83 fb 08             	cmp    ebx,0x8
c001d6d7:	74 12                	je     c001d6eb <PCI::detect()+0x4f>
c001d6d9:	53                   	push   ebx
c001d6da:	6a 00                	push   0x0
c001d6dc:	6a 00                	push   0x0
c001d6de:	56                   	push   esi
c001d6df:	e8 0a f7 ff ff       	call   c001cdee <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d6e4:	83 c4 10             	add    esp,0x10
c001d6e7:	66 40                	inc    ax
c001d6e9:	74 dc                	je     c001d6c7 <PCI::detect()+0x2b>
c001d6eb:	58                   	pop    eax
c001d6ec:	5b                   	pop    ebx
c001d6ed:	5e                   	pop    esi
c001d6ee:	c3                   	ret    
c001d6ef:	90                   	nop

c001d6f0 <IDE::close(int, int, void*)>:
c001d6f0:	83 c8 ff             	or     eax,0xffffffff
c001d6f3:	c3                   	ret    

c001d6f4 <IDE::IDE()>:
c001d6f4:	83 ec 0c             	sub    esp,0xc
c001d6f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6fb:	83 ec 08             	sub    esp,0x8
c001d6fe:	68 2c 50 02 c0       	push   0xc002502c
c001d703:	50                   	push   eax
c001d704:	e8 cb 0b ff ff       	call   c000e2d4 <HardDiskController::HardDiskController(char const*)>
c001d709:	83 c4 10             	add    esp,0x10
c001d70c:	ba bc 50 02 c0       	mov    edx,0xc00250bc
c001d711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d715:	89 10                	mov    DWORD PTR [eax],edx
c001d717:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d71b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001d722:	90                   	nop
c001d723:	83 c4 0c             	add    esp,0xc
c001d726:	c3                   	ret    
c001d727:	90                   	nop

c001d728 <IDE::prepareInterrupt(unsigned char)>:
c001d728:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d72d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d731:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001d739:	c3                   	ret    

c001d73a <selectDrive(unsigned char, unsigned char)>:
c001d73a:	c3                   	ret    
c001d73b:	90                   	nop

c001d73c <IDE::getBase(unsigned char)>:
c001d73c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001d741:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d745:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001d74d:	c3                   	ret    

c001d74e <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001d74e:	55                   	push   ebp
c001d74f:	57                   	push   edi
c001d750:	56                   	push   esi
c001d751:	53                   	push   ebx
c001d752:	83 ec 1c             	sub    esp,0x1c
c001d755:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d759:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d75d:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001d760:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d764:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d768:	80 f9 03             	cmp    cl,0x3
c001d76b:	77 51                	ja     c001d7be <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001d76d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d771:	0f b6 f2             	movzx  esi,dl
c001d774:	0f b6 db             	movzx  ebx,bl
c001d777:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001d77a:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001d77e:	83 ca 80             	or     edx,0xffffff80
c001d781:	0f b6 d2             	movzx  edx,dl
c001d784:	52                   	push   edx
c001d785:	6a 0c                	push   0xc
c001d787:	56                   	push   esi
c001d788:	57                   	push   edi
c001d789:	e8 c0 ff ff ff       	call   c001d74e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d78e:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001d793:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d797:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001d79b:	ee                   	out    dx,al
c001d79c:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001d7a1:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001d7a5:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001d7a9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001d7ad:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001d7b5:	83 c4 2c             	add    esp,0x2c
c001d7b8:	5b                   	pop    ebx
c001d7b9:	5e                   	pop    esi
c001d7ba:	5f                   	pop    edi
c001d7bb:	5d                   	pop    ebp
c001d7bc:	eb 90                	jmp    c001d74e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7be:	80 fb 07             	cmp    bl,0x7
c001d7c1:	77 12                	ja     c001d7d5 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001d7c3:	0f b6 d2             	movzx  edx,dl
c001d7c6:	0f b6 db             	movzx  ebx,bl
c001d7c9:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001d7d1:	89 da                	mov    edx,ebx
c001d7d3:	eb 2f                	jmp    c001d804 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001d7d5:	80 fb 0d             	cmp    bl,0xd
c001d7d8:	77 13                	ja     c001d7ed <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001d7da:	0f b6 d2             	movzx  edx,dl
c001d7dd:	0f b6 db             	movzx  ebx,bl
c001d7e0:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001d7e7:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001d7eb:	eb 17                	jmp    c001d804 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001d7ed:	80 fb 15             	cmp    bl,0x15
c001d7f0:	77 13                	ja     c001d805 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001d7f2:	0f b6 d2             	movzx  edx,dl
c001d7f5:	0f b6 db             	movzx  ebx,bl
c001d7f8:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001d800:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001d804:	ee                   	out    dx,al
c001d805:	83 c4 1c             	add    esp,0x1c
c001d808:	5b                   	pop    ebx
c001d809:	5e                   	pop    esi
c001d80a:	5f                   	pop    edi
c001d80b:	5d                   	pop    ebp
c001d80c:	c3                   	ret    
c001d80d:	90                   	nop

c001d80e <IDE::read(unsigned char, unsigned char)>:
c001d80e:	55                   	push   ebp
c001d80f:	57                   	push   edi
c001d810:	56                   	push   esi
c001d811:	53                   	push   ebx
c001d812:	83 ec 1c             	sub    esp,0x1c
c001d815:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d819:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d81d:	8d 43 f8             	lea    eax,[ebx-0x8]
c001d820:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d824:	3c 03                	cmp    al,0x3
c001d826:	77 43                	ja     c001d86b <IDE::read(unsigned char, unsigned char)+0x5d>
c001d828:	0f b6 f2             	movzx  esi,dl
c001d82b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001d82e:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001d832:	83 c8 80             	or     eax,0xffffff80
c001d835:	0f b6 c0             	movzx  eax,al
c001d838:	50                   	push   eax
c001d839:	6a 0c                	push   0xc
c001d83b:	56                   	push   esi
c001d83c:	57                   	push   edi
c001d83d:	e8 0c ff ff ff       	call   c001d74e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d842:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001d847:	0f b6 c3             	movzx  eax,bl
c001d84a:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001d84e:	ec                   	in     al,dx
c001d84f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d853:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001d858:	52                   	push   edx
c001d859:	6a 0c                	push   0xc
c001d85b:	56                   	push   esi
c001d85c:	57                   	push   edi
c001d85d:	e8 ec fe ff ff       	call   c001d74e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d862:	83 c4 20             	add    esp,0x20
c001d865:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d869:	eb 49                	jmp    c001d8b4 <IDE::read(unsigned char, unsigned char)+0xa6>
c001d86b:	80 fb 07             	cmp    bl,0x7
c001d86e:	77 12                	ja     c001d882 <IDE::read(unsigned char, unsigned char)+0x74>
c001d870:	0f b6 d2             	movzx  edx,dl
c001d873:	0f b6 c3             	movzx  eax,bl
c001d876:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001d87e:	89 c2                	mov    edx,eax
c001d880:	eb 31                	jmp    c001d8b3 <IDE::read(unsigned char, unsigned char)+0xa5>
c001d882:	80 fb 0d             	cmp    bl,0xd
c001d885:	77 13                	ja     c001d89a <IDE::read(unsigned char, unsigned char)+0x8c>
c001d887:	0f b6 d2             	movzx  edx,dl
c001d88a:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001d891:	0f b6 d3             	movzx  edx,bl
c001d894:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001d898:	eb 19                	jmp    c001d8b3 <IDE::read(unsigned char, unsigned char)+0xa5>
c001d89a:	31 c0                	xor    eax,eax
c001d89c:	80 fb 15             	cmp    bl,0x15
c001d89f:	77 13                	ja     c001d8b4 <IDE::read(unsigned char, unsigned char)+0xa6>
c001d8a1:	0f b6 d2             	movzx  edx,dl
c001d8a4:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001d8ac:	0f b6 d3             	movzx  edx,bl
c001d8af:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001d8b3:	ec                   	in     al,dx
c001d8b4:	83 c4 1c             	add    esp,0x1c
c001d8b7:	5b                   	pop    ebx
c001d8b8:	5e                   	pop    esi
c001d8b9:	5f                   	pop    edi
c001d8ba:	5d                   	pop    ebp
c001d8bb:	c3                   	ret    

c001d8bc <IDE::waitInterrupt(unsigned char)>:
c001d8bc:	55                   	push   ebp
c001d8bd:	57                   	push   edi
c001d8be:	56                   	push   esi
c001d8bf:	53                   	push   ebx
c001d8c0:	31 db                	xor    ebx,ebx
c001d8c2:	83 ec 0c             	sub    esp,0xc
c001d8c5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d8c9:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001d8ce:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001d8d6:	89 e8                	mov    eax,ebp
c001d8d8:	84 c0                	test   al,al
c001d8da:	75 30                	jne    c001d90c <IDE::waitInterrupt(unsigned char)+0x50>
c001d8dc:	50                   	push   eax
c001d8dd:	6a 0c                	push   0xc
c001d8df:	56                   	push   esi
c001d8e0:	57                   	push   edi
c001d8e1:	e8 28 ff ff ff       	call   c001d80e <IDE::read(unsigned char, unsigned char)>
c001d8e6:	83 c4 10             	add    esp,0x10
c001d8e9:	a8 01                	test   al,0x1
c001d8eb:	75 27                	jne    c001d914 <IDE::waitInterrupt(unsigned char)+0x58>
c001d8ed:	f6 c3 04             	test   bl,0x4
c001d8f0:	75 12                	jne    c001d904 <IDE::waitInterrupt(unsigned char)+0x48>
c001d8f2:	83 fb 32             	cmp    ebx,0x32
c001d8f5:	7e 0d                	jle    c001d904 <IDE::waitInterrupt(unsigned char)+0x48>
c001d8f7:	83 ec 0c             	sub    esp,0xc
c001d8fa:	6a 64                	push   0x64
c001d8fc:	e8 6b a9 ff ff       	call   c001826c <milliTenthSleep(unsigned int)>
c001d901:	83 c4 10             	add    esp,0x10
c001d904:	83 fb 3c             	cmp    ebx,0x3c
c001d907:	74 0b                	je     c001d914 <IDE::waitInterrupt(unsigned char)+0x58>
c001d909:	43                   	inc    ebx
c001d90a:	eb c2                	jmp    c001d8ce <IDE::waitInterrupt(unsigned char)+0x12>
c001d90c:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001d914:	83 c4 0c             	add    esp,0xc
c001d917:	89 e8                	mov    eax,ebp
c001d919:	5b                   	pop    ebx
c001d91a:	5e                   	pop    esi
c001d91b:	5f                   	pop    edi
c001d91c:	5d                   	pop    ebp
c001d91d:	c3                   	ret    

c001d91e <ideChannel0IRQHandler(regs*, void*)>:
c001d91e:	83 ec 10             	sub    esp,0x10
c001d921:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d925:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001d92c:	6a 07                	push   0x7
c001d92e:	6a 00                	push   0x0
c001d930:	50                   	push   eax
c001d931:	e8 d8 fe ff ff       	call   c001d80e <IDE::read(unsigned char, unsigned char)>
c001d936:	83 c4 1c             	add    esp,0x1c
c001d939:	c3                   	ret    

c001d93a <ideChannel1IRQHandler(regs*, void*)>:
c001d93a:	83 ec 10             	sub    esp,0x10
c001d93d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d941:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001d948:	6a 07                	push   0x7
c001d94a:	6a 01                	push   0x1
c001d94c:	50                   	push   eax
c001d94d:	e8 bc fe ff ff       	call   c001d80e <IDE::read(unsigned char, unsigned char)>
c001d952:	83 c4 1c             	add    esp,0x1c
c001d955:	c3                   	ret    

c001d956 <IDE::enableIRQs(unsigned char, bool)>:
c001d956:	57                   	push   edi
c001d957:	56                   	push   esi
c001d958:	be 04 00 00 00       	mov    esi,0x4
c001d95d:	53                   	push   ebx
c001d95e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001d963:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d967:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001d96c:	0f 94 c0             	sete   al
c001d96f:	d1 e0                	shl    eax,1
c001d971:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001d978:	0f b6 c0             	movzx  eax,al
c001d97b:	50                   	push   eax
c001d97c:	6a 0c                	push   0xc
c001d97e:	57                   	push   edi
c001d97f:	53                   	push   ebx
c001d980:	e8 c9 fd ff ff       	call   c001d74e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d985:	83 c4 10             	add    esp,0x10
c001d988:	50                   	push   eax
c001d989:	6a 0c                	push   0xc
c001d98b:	57                   	push   edi
c001d98c:	53                   	push   ebx
c001d98d:	e8 7c fe ff ff       	call   c001d80e <IDE::read(unsigned char, unsigned char)>
c001d992:	83 c4 10             	add    esp,0x10
c001d995:	4e                   	dec    esi
c001d996:	75 f0                	jne    c001d988 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001d998:	5b                   	pop    ebx
c001d999:	5e                   	pop    esi
c001d99a:	5f                   	pop    edi
c001d99b:	c3                   	ret    

c001d99c <IDE::open(int, int, void*)>:
c001d99c:	55                   	push   ebp
c001d99d:	57                   	push   edi
c001d99e:	56                   	push   esi
c001d99f:	53                   	push   ebx
c001d9a0:	83 ec 1c             	sub    esp,0x1c
c001d9a3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d9a7:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001d9b0:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001d9b9:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001d9c0:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001d9c7:	0f 85 b0 02 00 00    	jne    c001dc7d <IDE::open(int, int, void*)+0x2e1>
c001d9cd:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001d9d3:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001d9d7:	83 e0 7f             	and    eax,0x7f
c001d9da:	3c 05                	cmp    al,0x5
c001d9dc:	74 04                	je     c001d9e2 <IDE::open(int, int, void*)+0x46>
c001d9de:	3c 0f                	cmp    al,0xf
c001d9e0:	75 32                	jne    c001da14 <IDE::open(int, int, void*)+0x78>
c001d9e2:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001d9e8:	83 e0 fc             	and    eax,0xfffffffc
c001d9eb:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001d9f2:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001d9f8:	83 e0 fc             	and    eax,0xfffffffc
c001d9fb:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001da02:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001da08:	83 e0 fc             	and    eax,0xfffffffc
c001da0b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001da12:	eb 14                	jmp    c001da28 <IDE::open(int, int, void*)+0x8c>
c001da14:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001da1e:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001da28:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001da2f:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001da36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001da3a:	89 c6                	mov    esi,eax
c001da3c:	bf f8 0c 00 00       	mov    edi,0xcf8
c001da41:	c1 e6 10             	shl    esi,0x10
c001da44:	89 e8                	mov    eax,ebp
c001da46:	89 fa                	mov    edx,edi
c001da48:	c1 e0 0b             	shl    eax,0xb
c001da4b:	09 f0                	or     eax,esi
c001da4d:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001da54:	c1 e6 08             	shl    esi,0x8
c001da57:	09 c6                	or     esi,eax
c001da59:	89 f0                	mov    eax,esi
c001da5b:	0d 08 00 00 80       	or     eax,0x80000008
c001da60:	ef                   	out    dx,eax
c001da61:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001da66:	89 ca                	mov    edx,ecx
c001da68:	ed                   	in     eax,dx
c001da69:	c1 e8 10             	shr    eax,0x10
c001da6c:	3d ff ff 00 00       	cmp    eax,0xffff
c001da71:	0f 84 f5 00 00 00    	je     c001db6c <IDE::open(int, int, void*)+0x1d0>
c001da77:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001da7d:	89 fa                	mov    edx,edi
c001da7f:	89 f0                	mov    eax,esi
c001da81:	ef                   	out    dx,eax
c001da82:	b0 fe                	mov    al,0xfe
c001da84:	89 ca                	mov    edx,ecx
c001da86:	ee                   	out    dx,al
c001da87:	89 f0                	mov    eax,esi
c001da89:	89 fa                	mov    edx,edi
c001da8b:	ef                   	out    dx,eax
c001da8c:	89 ca                	mov    edx,ecx
c001da8e:	ed                   	in     eax,dx
c001da8f:	3c fe                	cmp    al,0xfe
c001da91:	0f 85 a9 00 00 00    	jne    c001db40 <IDE::open(int, int, void*)+0x1a4>
c001da97:	8b 15 88 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026488
c001da9d:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001daa4:	74 33                	je     c001dad9 <IDE::open(int, int, void*)+0x13d>
c001daa6:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001daac:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001dab0:	40                   	inc    eax
c001dab1:	83 ec 0c             	sub    esp,0xc
c001dab4:	0f b6 c0             	movzx  eax,al
c001dab7:	50                   	push   eax
c001dab8:	55                   	push   ebp
c001dab9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001dabd:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001dac3:	51                   	push   ecx
c001dac4:	e8 0f 44 ff ff       	call   c0011ed8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001dac9:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001dace:	83 c4 1c             	add    esp,0x1c
c001dad1:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001dad7:	eb 0a                	jmp    c001dae3 <IDE::open(int, int, void*)+0x147>
c001dad9:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001dae3:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001daea:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001daf1:	c1 e1 10             	shl    ecx,0x10
c001daf4:	c1 e0 08             	shl    eax,0x8
c001daf7:	bf f8 0c 00 00       	mov    edi,0xcf8
c001dafc:	09 c1                	or     ecx,eax
c001dafe:	89 fa                	mov    edx,edi
c001db00:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001db07:	c1 e0 0b             	shl    eax,0xb
c001db0a:	09 c1                	or     ecx,eax
c001db0c:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001db12:	89 c8                	mov    eax,ecx
c001db14:	ef                   	out    dx,eax
c001db15:	be fc 0c 00 00       	mov    esi,0xcfc
c001db1a:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001db20:	89 f2                	mov    edx,esi
c001db22:	ee                   	out    dx,al
c001db23:	89 c8                	mov    eax,ecx
c001db25:	89 fa                	mov    edx,edi
c001db27:	ef                   	out    dx,eax
c001db28:	89 f2                	mov    edx,esi
c001db2a:	ed                   	in     eax,dx
c001db2b:	0f b6 c0             	movzx  eax,al
c001db2e:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001db34:	74 46                	je     c001db7c <IDE::open(int, int, void*)+0x1e0>
c001db36:	83 ec 0c             	sub    esp,0xc
c001db39:	68 44 50 02 c0       	push   0xc0025044
c001db3e:	eb 34                	jmp    c001db74 <IDE::open(int, int, void*)+0x1d8>
c001db40:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001db49:	75 17                	jne    c001db62 <IDE::open(int, int, void*)+0x1c6>
c001db4b:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001db50:	74 07                	je     c001db59 <IDE::open(int, int, void*)+0x1bd>
c001db52:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001db57:	75 09                	jne    c001db62 <IDE::open(int, int, void*)+0x1c6>
c001db59:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001db60:	eb 1a                	jmp    c001db7c <IDE::open(int, int, void*)+0x1e0>
c001db62:	83 ec 0c             	sub    esp,0xc
c001db65:	68 4c 50 02 c0       	push   0xc002504c
c001db6a:	eb 08                	jmp    c001db74 <IDE::open(int, int, void*)+0x1d8>
c001db6c:	83 ec 0c             	sub    esp,0xc
c001db6f:	68 7d 50 02 c0       	push   0xc002507d
c001db74:	e8 28 68 ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c001db79:	83 c4 10             	add    esp,0x10
c001db7c:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001db83:	79 1a                	jns    c001db9f <IDE::open(int, int, void*)+0x203>
c001db85:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001db8b:	83 e0 fc             	and    eax,0xfffffffc
c001db8e:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001db95:	83 c0 08             	add    eax,0x8
c001db98:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001db9f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001dba5:	89 c2                	mov    edx,eax
c001dba7:	83 e2 0f             	and    edx,0xf
c001dbaa:	66 83 fa 08          	cmp    dx,0x8
c001dbae:	75 0a                	jne    c001dbba <IDE::open(int, int, void*)+0x21e>
c001dbb0:	83 e8 02             	sub    eax,0x2
c001dbb3:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001dbba:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001dbc0:	89 c2                	mov    edx,eax
c001dbc2:	83 e2 0f             	and    edx,0xf
c001dbc5:	66 83 fa 08          	cmp    dx,0x8
c001dbc9:	75 0a                	jne    c001dbd5 <IDE::open(int, int, void*)+0x239>
c001dbcb:	83 e8 02             	sub    eax,0x2
c001dbce:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001dbd5:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001dbdc:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001dbe3:	89 d0                	mov    eax,edx
c001dbe5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001dbe8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001dbec:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001dbf0:	8d 4a 01             	lea    ecx,[edx+0x1]
c001dbf3:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001dbf8:	0f b6 c9             	movzx  ecx,cl
c001dbfb:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001dc02:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001dc05:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001dc09:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001dc0d:	8d 50 02             	lea    edx,[eax+0x2]
c001dc10:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001dc15:	0f b6 d2             	movzx  edx,dl
c001dc18:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001dc1e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001dc21:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001dc25:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001dc29:	8d 48 03             	lea    ecx,[eax+0x3]
c001dc2c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001dc31:	0f b6 c9             	movzx  ecx,cl
c001dc34:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001dc3a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001dc3d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001dc41:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001dc45:	8d 50 04             	lea    edx,[eax+0x4]
c001dc48:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001dc4e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001dc53:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001dc5a:	66 85 f6             	test   si,si
c001dc5d:	74 5b                	je     c001dcba <IDE::open(int, int, void*)+0x31e>
c001dc5f:	0f b6 d2             	movzx  edx,dl
c001dc62:	83 c0 05             	add    eax,0x5
c001dc65:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001dc68:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001dc6c:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001dc70:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001dc76:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001dc7b:	eb 3d                	jmp    c001dcba <IDE::open(int, int, void*)+0x31e>
c001dc7d:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001dc83:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001dc8a:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001dc91:	66 05 06 02          	add    ax,0x206
c001dc95:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001dc9c:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001dca3:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001dcaa:	66 05 06 02          	add    ax,0x206
c001dcae:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001dcb5:	e9 e5 fe ff ff       	jmp    c001db9f <IDE::open(int, int, void*)+0x203>
c001dcba:	50                   	push   eax
c001dcbb:	50                   	push   eax
c001dcbc:	6a 00                	push   0x0
c001dcbe:	53                   	push   ebx
c001dcbf:	e8 64 fa ff ff       	call   c001d728 <IDE::prepareInterrupt(unsigned char)>
c001dcc4:	5a                   	pop    edx
c001dcc5:	59                   	pop    ecx
c001dcc6:	6a 01                	push   0x1
c001dcc8:	53                   	push   ebx
c001dcc9:	e8 5a fa ff ff       	call   c001d728 <IDE::prepareInterrupt(unsigned char)>
c001dcce:	83 c4 0c             	add    esp,0xc
c001dcd1:	6a 00                	push   0x0
c001dcd3:	6a 00                	push   0x0
c001dcd5:	53                   	push   ebx
c001dcd6:	e8 7b fc ff ff       	call   c001d956 <IDE::enableIRQs(unsigned char, bool)>
c001dcdb:	83 c4 0c             	add    esp,0xc
c001dcde:	6a 00                	push   0x0
c001dce0:	6a 01                	push   0x1
c001dce2:	53                   	push   ebx
c001dce3:	e8 6e fc ff ff       	call   c001d956 <IDE::enableIRQs(unsigned char, bool)>
c001dce8:	83 c4 10             	add    esp,0x10
c001dceb:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001dcf2:	74 34                	je     c001dd28 <IDE::open(int, int, void*)+0x38c>
c001dcf4:	83 ec 0c             	sub    esp,0xc
c001dcf7:	53                   	push   ebx
c001dcf8:	6a 01                	push   0x1
c001dcfa:	68 1e d9 01 c0       	push   0xc001d91e
c001dcff:	6a 0e                	push   0xe
c001dd01:	53                   	push   ebx
c001dd02:	e8 97 01 ff ff       	call   c000de9e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dd07:	83 c4 14             	add    esp,0x14
c001dd0a:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001dd10:	53                   	push   ebx
c001dd11:	6a 01                	push   0x1
c001dd13:	68 3a d9 01 c0       	push   0xc001d93a
c001dd18:	6a 0f                	push   0xf
c001dd1a:	53                   	push   ebx
c001dd1b:	e8 7e 01 ff ff       	call   c000de9e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dd20:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001dd26:	eb 38                	jmp    c001dd60 <IDE::open(int, int, void*)+0x3c4>
c001dd28:	83 ec 0c             	sub    esp,0xc
c001dd2b:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001dd35:	53                   	push   ebx
c001dd36:	6a 00                	push   0x0
c001dd38:	68 1e d9 01 c0       	push   0xc001d91e
c001dd3d:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001dd43:	53                   	push   ebx
c001dd44:	e8 55 01 ff ff       	call   c000de9e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dd49:	83 c4 14             	add    esp,0x14
c001dd4c:	53                   	push   ebx
c001dd4d:	6a 00                	push   0x0
c001dd4f:	68 3a d9 01 c0       	push   0xc001d93a
c001dd54:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001dd5a:	53                   	push   ebx
c001dd5b:	e8 3e 01 ff ff       	call   c000de9e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dd60:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dd62:	83 c4 20             	add    esp,0x20
c001dd65:	83 ec 0c             	sub    esp,0xc
c001dd68:	53                   	push   ebx
c001dd69:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001dd6c:	83 c4 0c             	add    esp,0xc
c001dd6f:	6a 07                	push   0x7
c001dd71:	6a 00                	push   0x0
c001dd73:	53                   	push   ebx
c001dd74:	e8 95 fa ff ff       	call   c001d80e <IDE::read(unsigned char, unsigned char)>
c001dd79:	83 c4 0c             	add    esp,0xc
c001dd7c:	6a 07                	push   0x7
c001dd7e:	6a 01                	push   0x1
c001dd80:	53                   	push   ebx
c001dd81:	e8 88 fa ff ff       	call   c001d80e <IDE::read(unsigned char, unsigned char)>
c001dd86:	83 c4 0c             	add    esp,0xc
c001dd89:	6a 01                	push   0x1
c001dd8b:	6a 00                	push   0x0
c001dd8d:	53                   	push   ebx
c001dd8e:	e8 c3 fb ff ff       	call   c001d956 <IDE::enableIRQs(unsigned char, bool)>
c001dd93:	83 c4 0c             	add    esp,0xc
c001dd96:	6a 01                	push   0x1
c001dd98:	6a 01                	push   0x1
c001dd9a:	53                   	push   ebx
c001dd9b:	e8 b6 fb ff ff       	call   c001d956 <IDE::enableIRQs(unsigned char, bool)>
c001dda0:	83 c4 2c             	add    esp,0x2c
c001dda3:	31 c0                	xor    eax,eax
c001dda5:	5b                   	pop    ebx
c001dda6:	5e                   	pop    esi
c001dda7:	5f                   	pop    edi
c001dda8:	5d                   	pop    ebp
c001dda9:	c3                   	ret    

c001ddaa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001ddaa:	55                   	push   ebp
c001ddab:	57                   	push   edi
c001ddac:	56                   	push   esi
c001ddad:	53                   	push   ebx
c001ddae:	83 ec 1c             	sub    esp,0x1c
c001ddb1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ddb5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ddb9:	8d 50 f8             	lea    edx,[eax-0x8]
c001ddbc:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ddc0:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ddc4:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ddc8:	80 fa 03             	cmp    dl,0x3
c001ddcb:	77 5d                	ja     c001de2a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001ddcd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ddd1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ddd5:	0f b6 db             	movzx  ebx,bl
c001ddd8:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001dddb:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001dddf:	83 ca 80             	or     edx,0xffffff80
c001dde2:	0f b6 d2             	movzx  edx,dl
c001dde5:	52                   	push   edx
c001dde6:	6a 0c                	push   0xc
c001dde8:	53                   	push   ebx
c001dde9:	56                   	push   esi
c001ddea:	e8 5f f9 ff ff       	call   c001d74e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ddef:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001ddf4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ddf8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ddfc:	0f b6 c0             	movzx  eax,al
c001ddff:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001de03:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001de05:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001de0a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001de0e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001de12:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001de16:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001de1e:	83 c4 2c             	add    esp,0x2c
c001de21:	5b                   	pop    ebx
c001de22:	5e                   	pop    esi
c001de23:	5f                   	pop    edi
c001de24:	5d                   	pop    ebp
c001de25:	e9 24 f9 ff ff       	jmp    c001d74e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de2a:	3c 07                	cmp    al,0x7
c001de2c:	77 10                	ja     c001de3e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001de2e:	0f b6 db             	movzx  ebx,bl
c001de31:	0f b6 d0             	movzx  edx,al
c001de34:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001de3c:	eb 2d                	jmp    c001de6b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001de3e:	3c 0d                	cmp    al,0xd
c001de40:	77 13                	ja     c001de55 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001de42:	0f b6 db             	movzx  ebx,bl
c001de45:	0f b6 c0             	movzx  eax,al
c001de48:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001de4f:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001de53:	eb 16                	jmp    c001de6b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001de55:	3c 15                	cmp    al,0x15
c001de57:	77 14                	ja     c001de6d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001de59:	0f b6 db             	movzx  ebx,bl
c001de5c:	0f b6 c0             	movzx  eax,al
c001de5f:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001de67:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001de6b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001de6d:	83 c4 1c             	add    esp,0x1c
c001de70:	5b                   	pop    ebx
c001de71:	5e                   	pop    esi
c001de72:	5f                   	pop    edi
c001de73:	5d                   	pop    ebp
c001de74:	c3                   	ret    
c001de75:	90                   	nop

c001de76 <IDE::detect()>:
c001de76:	55                   	push   ebp
c001de77:	57                   	push   edi
c001de78:	56                   	push   esi
c001de79:	53                   	push   ebx
c001de7a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001de80:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001de87:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001de8e:	0f 85 97 02 00 00    	jne    c001e12b <IDE::detect()+0x2b5>
c001de94:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001de9b:	31 f6                	xor    esi,esi
c001de9d:	31 ed                	xor    ebp,ebp
c001de9f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001dea7:	89 e8                	mov    eax,ebp
c001dea9:	c1 e0 06             	shl    eax,0x6
c001deac:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001deb4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001deb8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001debc:	c1 e0 04             	shl    eax,0x4
c001debf:	83 c8 a0             	or     eax,0xffffffa0
c001dec2:	0f b6 c0             	movzx  eax,al
c001dec5:	50                   	push   eax
c001dec6:	6a 06                	push   0x6
c001dec8:	56                   	push   esi
c001dec9:	53                   	push   ebx
c001deca:	e8 7f f8 ff ff       	call   c001d74e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001decf:	83 c4 0c             	add    esp,0xc
c001ded2:	6a 0c                	push   0xc
c001ded4:	56                   	push   esi
c001ded5:	53                   	push   ebx
c001ded6:	e8 33 f9 ff ff       	call   c001d80e <IDE::read(unsigned char, unsigned char)>
c001dedb:	83 c4 0c             	add    esp,0xc
c001dede:	6a 0c                	push   0xc
c001dee0:	56                   	push   esi
c001dee1:	53                   	push   ebx
c001dee2:	e8 27 f9 ff ff       	call   c001d80e <IDE::read(unsigned char, unsigned char)>
c001dee7:	83 c4 0c             	add    esp,0xc
c001deea:	6a 0c                	push   0xc
c001deec:	56                   	push   esi
c001deed:	53                   	push   ebx
c001deee:	e8 1b f9 ff ff       	call   c001d80e <IDE::read(unsigned char, unsigned char)>
c001def3:	83 c4 0c             	add    esp,0xc
c001def6:	6a 0c                	push   0xc
c001def8:	56                   	push   esi
c001def9:	53                   	push   ebx
c001defa:	e8 0f f9 ff ff       	call   c001d80e <IDE::read(unsigned char, unsigned char)>
c001deff:	68 ec 00 00 00       	push   0xec
c001df04:	6a 07                	push   0x7
c001df06:	56                   	push   esi
c001df07:	53                   	push   ebx
c001df08:	e8 41 f8 ff ff       	call   c001d74e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001df0d:	83 c4 1c             	add    esp,0x1c
c001df10:	6a 0c                	push   0xc
c001df12:	56                   	push   esi
c001df13:	53                   	push   ebx
c001df14:	e8 f5 f8 ff ff       	call   c001d80e <IDE::read(unsigned char, unsigned char)>
c001df19:	83 c4 0c             	add    esp,0xc
c001df1c:	6a 0c                	push   0xc
c001df1e:	56                   	push   esi
c001df1f:	53                   	push   ebx
c001df20:	e8 e9 f8 ff ff       	call   c001d80e <IDE::read(unsigned char, unsigned char)>
c001df25:	83 c4 0c             	add    esp,0xc
c001df28:	6a 0c                	push   0xc
c001df2a:	56                   	push   esi
c001df2b:	53                   	push   ebx
c001df2c:	e8 dd f8 ff ff       	call   c001d80e <IDE::read(unsigned char, unsigned char)>
c001df31:	83 c4 0c             	add    esp,0xc
c001df34:	6a 0c                	push   0xc
c001df36:	56                   	push   esi
c001df37:	53                   	push   ebx
c001df38:	e8 d1 f8 ff ff       	call   c001d80e <IDE::read(unsigned char, unsigned char)>
c001df3d:	83 c4 0c             	add    esp,0xc
c001df40:	6a 0c                	push   0xc
c001df42:	56                   	push   esi
c001df43:	53                   	push   ebx
c001df44:	e8 c5 f8 ff ff       	call   c001d80e <IDE::read(unsigned char, unsigned char)>
c001df49:	83 c4 10             	add    esp,0x10
c001df4c:	84 c0                	test   al,al
c001df4e:	0f 84 5f 01 00 00    	je     c001e0b3 <IDE::detect()+0x23d>
c001df54:	31 ff                	xor    edi,edi
c001df56:	50                   	push   eax
c001df57:	6a 0c                	push   0xc
c001df59:	56                   	push   esi
c001df5a:	53                   	push   ebx
c001df5b:	e8 ae f8 ff ff       	call   c001d80e <IDE::read(unsigned char, unsigned char)>
c001df60:	83 c4 10             	add    esp,0x10
c001df63:	a8 01                	test   al,0x1
c001df65:	0f 85 69 01 00 00    	jne    c001e0d4 <IDE::detect()+0x25e>
c001df6b:	84 c0                	test   al,al
c001df6d:	78 04                	js     c001df73 <IDE::detect()+0xfd>
c001df6f:	a8 08                	test   al,0x8
c001df71:	75 23                	jne    c001df96 <IDE::detect()+0x120>
c001df73:	47                   	inc    edi
c001df74:	81 ff 17 01 00 00    	cmp    edi,0x117
c001df7a:	7e da                	jle    c001df56 <IDE::detect()+0xe0>
c001df7c:	83 ec 0c             	sub    esp,0xc
c001df7f:	6a 32                	push   0x32
c001df81:	e8 e6 a2 ff ff       	call   c001826c <milliTenthSleep(unsigned int)>
c001df86:	83 c4 10             	add    esp,0x10
c001df89:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001df8f:	75 c5                	jne    c001df56 <IDE::detect()+0xe0>
c001df91:	e9 3e 01 00 00       	jmp    c001e0d4 <IDE::detect()+0x25e>
c001df96:	31 c9                	xor    ecx,ecx
c001df98:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001df9c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001dfa0:	83 ec 0c             	sub    esp,0xc
c001dfa3:	68 80 00 00 00       	push   0x80
c001dfa8:	57                   	push   edi
c001dfa9:	6a 00                	push   0x0
c001dfab:	56                   	push   esi
c001dfac:	53                   	push   ebx
c001dfad:	e8 f8 fd ff ff       	call   c001ddaa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001dfb2:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001dfb7:	89 e8                	mov    eax,ebp
c001dfb9:	89 d1                	mov    ecx,edx
c001dfbb:	c1 e0 06             	shl    eax,0x6
c001dfbe:	01 d8                	add    eax,ebx
c001dfc0:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001dfc7:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001dfce:	89 f2                	mov    edx,esi
c001dfd0:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001dfd6:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001dfda:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001dfe0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dfe4:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001dfeb:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001dff3:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001dffa:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001e002:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001e008:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001e00f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001e015:	8d 54 24 58          	lea    edx,[esp+0x58]
c001e019:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001e01d:	83 c4 20             	add    esp,0x20
c001e020:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001e023:	83 c0 02             	add    eax,0x2
c001e026:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001e02c:	83 c7 02             	add    edi,0x2
c001e02f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001e032:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001e038:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001e03c:	75 e2                	jne    c001e020 <IDE::detect()+0x1aa>
c001e03e:	89 e8                	mov    eax,ebp
c001e040:	c1 e0 06             	shl    eax,0x6
c001e043:	01 d8                	add    eax,ebx
c001e045:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001e04b:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001e052:	66 c1 ea 09          	shr    dx,0x9
c001e056:	83 e2 01             	and    edx,0x1
c001e059:	84 c9                	test   cl,cl
c001e05b:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001e061:	75 22                	jne    c001e085 <IDE::detect()+0x20f>
c001e063:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001e06a:	74 46                	je     c001e0b2 <IDE::detect()+0x23c>
c001e06c:	83 ec 0c             	sub    esp,0xc
c001e06f:	68 7c 01 00 00       	push   0x17c
c001e074:	e8 4a b9 fe ff       	call   c00099c3 <malloc>
c001e079:	89 c7                	mov    edi,eax
c001e07b:	89 04 24             	mov    DWORD PTR [esp],eax
c001e07e:	e8 13 05 00 00       	call   c001e596 <ATA::ATA()>
c001e083:	eb 17                	jmp    c001e09c <IDE::detect()+0x226>
c001e085:	83 ec 0c             	sub    esp,0xc
c001e088:	68 80 01 00 00       	push   0x180
c001e08d:	e8 31 b9 fe ff       	call   c00099c3 <malloc>
c001e092:	89 c7                	mov    edi,eax
c001e094:	89 04 24             	mov    DWORD PTR [esp],eax
c001e097:	e8 82 0b 00 00       	call   c001ec1e <ATAPI::ATAPI()>
c001e09c:	5a                   	pop    edx
c001e09d:	59                   	pop    ecx
c001e09e:	57                   	push   edi
c001e09f:	53                   	push   ebx
c001e0a0:	e8 81 fe fe ff       	call   c000df26 <Device::addChild(Device*)>
c001e0a5:	8b 07                	mov    eax,DWORD PTR [edi]
c001e0a7:	53                   	push   ebx
c001e0a8:	55                   	push   ebp
c001e0a9:	6a 00                	push   0x0
c001e0ab:	57                   	push   edi
c001e0ac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e0af:	83 c4 20             	add    esp,0x20
c001e0b2:	45                   	inc    ebp
c001e0b3:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001e0b8:	74 0d                	je     c001e0c7 <IDE::detect()+0x251>
c001e0ba:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001e0c2:	e9 e0 fd ff ff       	jmp    c001dea7 <IDE::detect()+0x31>
c001e0c7:	4e                   	dec    esi
c001e0c8:	74 61                	je     c001e12b <IDE::detect()+0x2b5>
c001e0ca:	be 01 00 00 00       	mov    esi,0x1
c001e0cf:	e9 cb fd ff ff       	jmp    c001de9f <IDE::detect()+0x29>
c001e0d4:	50                   	push   eax
c001e0d5:	6a 04                	push   0x4
c001e0d7:	56                   	push   esi
c001e0d8:	53                   	push   ebx
c001e0d9:	e8 30 f7 ff ff       	call   c001d80e <IDE::read(unsigned char, unsigned char)>
c001e0de:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e0e2:	83 c4 0c             	add    esp,0xc
c001e0e5:	6a 05                	push   0x5
c001e0e7:	56                   	push   esi
c001e0e8:	53                   	push   ebx
c001e0e9:	e8 20 f7 ff ff       	call   c001d80e <IDE::read(unsigned char, unsigned char)>
c001e0ee:	83 c4 10             	add    esp,0x10
c001e0f1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001e0f5:	80 fa 14             	cmp    dl,0x14
c001e0f8:	75 04                	jne    c001e0fe <IDE::detect()+0x288>
c001e0fa:	3c eb                	cmp    al,0xeb
c001e0fc:	eb 07                	jmp    c001e105 <IDE::detect()+0x28f>
c001e0fe:	3c 96                	cmp    al,0x96
c001e100:	75 b1                	jne    c001e0b3 <IDE::detect()+0x23d>
c001e102:	80 fa 69             	cmp    dl,0x69
c001e105:	75 ac                	jne    c001e0b3 <IDE::detect()+0x23d>
c001e107:	68 a1 00 00 00       	push   0xa1
c001e10c:	6a 07                	push   0x7
c001e10e:	56                   	push   esi
c001e10f:	53                   	push   ebx
c001e110:	e8 39 f6 ff ff       	call   c001d74e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e115:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001e11c:	e8 4b a1 ff ff       	call   c001826c <milliTenthSleep(unsigned int)>
c001e121:	83 c4 10             	add    esp,0x10
c001e124:	b1 01                	mov    cl,0x1
c001e126:	e9 6d fe ff ff       	jmp    c001df98 <IDE::detect()+0x122>
c001e12b:	81 c4 1c 02 00 00    	add    esp,0x21c
c001e131:	5b                   	pop    ebx
c001e132:	5e                   	pop    esi
c001e133:	5f                   	pop    edi
c001e134:	5d                   	pop    ebp
c001e135:	c3                   	ret    

c001e136 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001e136:	55                   	push   ebp
c001e137:	57                   	push   edi
c001e138:	56                   	push   esi
c001e139:	53                   	push   ebx
c001e13a:	83 ec 1c             	sub    esp,0x1c
c001e13d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e141:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e145:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e149:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e14d:	88 c3                	mov    bl,al
c001e14f:	84 c0                	test   al,al
c001e151:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e155:	0f 84 81 00 00 00    	je     c001e1dc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e15b:	83 ec 0c             	sub    esp,0xc
c001e15e:	68 a7 50 02 c0       	push   0xc00250a7
c001e163:	e8 77 e9 fe ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001e168:	83 c4 10             	add    esp,0x10
c001e16b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e16f:	3c 01                	cmp    al,0x1
c001e171:	74 63                	je     c001e1d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001e173:	3c 02                	cmp    al,0x2
c001e175:	75 53                	jne    c001e1ca <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001e177:	d1 e6                	shl    esi,1
c001e179:	09 ee                	or     esi,ebp
c001e17b:	50                   	push   eax
c001e17c:	89 f0                	mov    eax,esi
c001e17e:	6a 01                	push   0x1
c001e180:	0f b6 f0             	movzx  esi,al
c001e183:	c1 e6 06             	shl    esi,0x6
c001e186:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001e18e:	50                   	push   eax
c001e18f:	57                   	push   edi
c001e190:	e8 79 f6 ff ff       	call   c001d80e <IDE::read(unsigned char, unsigned char)>
c001e195:	83 c4 10             	add    esp,0x10
c001e198:	a8 01                	test   al,0x1
c001e19a:	74 02                	je     c001e19e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001e19c:	b3 07                	mov    bl,0x7
c001e19e:	a8 02                	test   al,0x2
c001e1a0:	74 02                	je     c001e1a4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001e1a2:	b3 03                	mov    bl,0x3
c001e1a4:	a8 04                	test   al,0x4
c001e1a6:	74 02                	je     c001e1aa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001e1a8:	b3 14                	mov    bl,0x14
c001e1aa:	a8 08                	test   al,0x8
c001e1ac:	74 02                	je     c001e1b0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001e1ae:	b3 03                	mov    bl,0x3
c001e1b0:	a8 10                	test   al,0x10
c001e1b2:	74 02                	je     c001e1b6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001e1b4:	b3 15                	mov    bl,0x15
c001e1b6:	a8 20                	test   al,0x20
c001e1b8:	74 02                	je     c001e1bc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001e1ba:	b3 03                	mov    bl,0x3
c001e1bc:	a8 40                	test   al,0x40
c001e1be:	74 02                	je     c001e1c2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001e1c0:	b3 16                	mov    bl,0x16
c001e1c2:	84 c0                	test   al,al
c001e1c4:	79 16                	jns    c001e1dc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e1c6:	b3 0d                	mov    bl,0xd
c001e1c8:	eb 12                	jmp    c001e1dc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e1ca:	3c 03                	cmp    al,0x3
c001e1cc:	74 0c                	je     c001e1da <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001e1ce:	3c 04                	cmp    al,0x4
c001e1d0:	75 0a                	jne    c001e1dc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e1d2:	b3 08                	mov    bl,0x8
c001e1d4:	eb 06                	jmp    c001e1dc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e1d6:	b3 13                	mov    bl,0x13
c001e1d8:	eb 02                	jmp    c001e1dc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e1da:	b3 17                	mov    bl,0x17
c001e1dc:	83 c4 1c             	add    esp,0x1c
c001e1df:	88 d8                	mov    al,bl
c001e1e1:	5b                   	pop    ebx
c001e1e2:	5e                   	pop    esi
c001e1e3:	5f                   	pop    edi
c001e1e4:	5d                   	pop    ebp
c001e1e5:	c3                   	ret    

c001e1e6 <IDE::polling(unsigned char, unsigned int)>:
c001e1e6:	57                   	push   edi
c001e1e7:	56                   	push   esi
c001e1e8:	53                   	push   ebx
c001e1e9:	bb 04 00 00 00       	mov    ebx,0x4
c001e1ee:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001e1f2:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e1f7:	52                   	push   edx
c001e1f8:	6a 0c                	push   0xc
c001e1fa:	56                   	push   esi
c001e1fb:	57                   	push   edi
c001e1fc:	e8 0d f6 ff ff       	call   c001d80e <IDE::read(unsigned char, unsigned char)>
c001e201:	83 c4 10             	add    esp,0x10
c001e204:	4b                   	dec    ebx
c001e205:	75 f0                	jne    c001e1f7 <IDE::polling(unsigned char, unsigned int)+0x11>
c001e207:	bb a0 86 01 00       	mov    ebx,0x186a0
c001e20c:	50                   	push   eax
c001e20d:	6a 0c                	push   0xc
c001e20f:	56                   	push   esi
c001e210:	57                   	push   edi
c001e211:	e8 f8 f5 ff ff       	call   c001d80e <IDE::read(unsigned char, unsigned char)>
c001e216:	83 c4 10             	add    esp,0x10
c001e219:	a8 01                	test   al,0x1
c001e21b:	75 17                	jne    c001e234 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e21d:	a8 20                	test   al,0x20
c001e21f:	75 0f                	jne    c001e230 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001e221:	4b                   	dec    ebx
c001e222:	74 10                	je     c001e234 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e224:	84 c0                	test   al,al
c001e226:	78 e4                	js     c001e20c <IDE::polling(unsigned char, unsigned int)+0x26>
c001e228:	a8 08                	test   al,0x8
c001e22a:	74 e0                	je     c001e20c <IDE::polling(unsigned char, unsigned int)+0x26>
c001e22c:	31 c0                	xor    eax,eax
c001e22e:	eb 06                	jmp    c001e236 <IDE::polling(unsigned char, unsigned int)+0x50>
c001e230:	b0 01                	mov    al,0x1
c001e232:	eb 02                	jmp    c001e236 <IDE::polling(unsigned char, unsigned int)+0x50>
c001e234:	b0 02                	mov    al,0x2
c001e236:	5b                   	pop    ebx
c001e237:	5e                   	pop    esi
c001e238:	5f                   	pop    edi
c001e239:	c3                   	ret    

c001e23a <SATABus::close(int, int, void*)>:
c001e23a:	31 c0                	xor    eax,eax
c001e23c:	c3                   	ret    
c001e23d:	90                   	nop

c001e23e <SATABus::detect()>:
c001e23e:	c3                   	ret    
c001e23f:	90                   	nop

c001e240 <SATABus::SATABus()>:
c001e240:	83 ec 0c             	sub    esp,0xc
c001e243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e247:	83 ec 08             	sub    esp,0x8
c001e24a:	68 e0 50 02 c0       	push   0xc00250e0
c001e24f:	50                   	push   eax
c001e250:	e8 7f 00 ff ff       	call   c000e2d4 <HardDiskController::HardDiskController(char const*)>
c001e255:	83 c4 10             	add    esp,0x10
c001e258:	ba 34 51 02 c0       	mov    edx,0xc0025134
c001e25d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e261:	89 10                	mov    DWORD PTR [eax],edx
c001e263:	83 ec 0c             	sub    esp,0xc
c001e266:	6a 50                	push   0x50
c001e268:	e8 77 bc fe ff       	call   c0009ee4 <Phys::allocateContiguousPages(int)>
c001e26d:	83 c4 10             	add    esp,0x10
c001e270:	89 c2                	mov    edx,eax
c001e272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e276:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e27c:	83 ec 0c             	sub    esp,0xc
c001e27f:	6a 50                	push   0x50
c001e281:	e8 87 d4 fe ff       	call   c000b70d <Virt::allocateKernelVirtualPages(int)>
c001e286:	83 c4 10             	add    esp,0x10
c001e289:	89 c2                	mov    edx,eax
c001e28b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e28f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e295:	a1 b0 65 02 c0       	mov    eax,ds:0xc00265b0
c001e29a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e29e:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001e2a4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e2a8:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e2ae:	83 ec 0c             	sub    esp,0xc
c001e2b1:	6a 03                	push   0x3
c001e2b3:	6a 50                	push   0x50
c001e2b5:	51                   	push   ecx
c001e2b6:	52                   	push   edx
c001e2b7:	50                   	push   eax
c001e2b8:	e8 ed dd fe ff       	call   c000c0aa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e2bd:	83 c4 20             	add    esp,0x20
c001e2c0:	90                   	nop
c001e2c1:	83 c4 0c             	add    esp,0xc
c001e2c4:	c3                   	ret    
c001e2c5:	90                   	nop

c001e2c6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001e2c6:	83 ec 0c             	sub    esp,0xc
c001e2c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e2cd:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001e2d0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001e2d3:	09 c2                	or     edx,eax
c001e2d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2d9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e2df:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e2e1:	31 c0                	xor    eax,eax
c001e2e3:	c1 e9 08             	shr    ecx,0x8
c001e2e6:	83 e1 0f             	and    ecx,0xf
c001e2e9:	39 c8                	cmp    eax,ecx
c001e2eb:	74 0a                	je     c001e2f7 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001e2ed:	f6 c2 01             	test   dl,0x1
c001e2f0:	74 18                	je     c001e30a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c001e2f2:	d1 ea                	shr    edx,1
c001e2f4:	40                   	inc    eax
c001e2f5:	eb f2                	jmp    c001e2e9 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c001e2f7:	83 ec 0c             	sub    esp,0xc
c001e2fa:	68 04 51 02 c0       	push   0xc0025104
c001e2ff:	e8 9d 60 ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c001e304:	83 c4 10             	add    esp,0x10
c001e307:	83 c8 ff             	or     eax,0xffffffff
c001e30a:	83 c4 0c             	add    esp,0xc
c001e30d:	c3                   	ret    

c001e30e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001e30e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e312:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001e315:	89 c2                	mov    edx,eax
c001e317:	c1 ea 08             	shr    edx,0x8
c001e31a:	83 e2 0f             	and    edx,0xf
c001e31d:	fe ca                	dec    dl
c001e31f:	75 31                	jne    c001e352 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e321:	83 e0 0f             	and    eax,0xf
c001e324:	3c 03                	cmp    al,0x3
c001e326:	75 2a                	jne    c001e352 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e328:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001e32b:	b8 02 00 00 00       	mov    eax,0x2
c001e330:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001e336:	74 1c                	je     c001e354 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e338:	b8 04 00 00 00       	mov    eax,0x4
c001e33d:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001e343:	74 0f                	je     c001e354 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e345:	31 c0                	xor    eax,eax
c001e347:	83 fa 03             	cmp    edx,0x3
c001e34a:	0f 94 c0             	sete   al
c001e34d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001e351:	c3                   	ret    
c001e352:	31 c0                	xor    eax,eax
c001e354:	c3                   	ret    
c001e355:	90                   	nop

c001e356 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001e356:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e35a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e35d:	0f ba e2 0f          	bt     edx,0xf
c001e361:	72 f7                	jb     c001e35a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001e363:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e366:	83 ca 10             	or     edx,0x10
c001e369:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e36c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e36f:	83 ca 01             	or     edx,0x1
c001e372:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e375:	c3                   	ret    

c001e376 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001e376:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e37a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e37d:	83 e2 fe             	and    edx,0xfffffffe
c001e380:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e383:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e386:	83 e2 ef             	and    edx,0xffffffef
c001e389:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e38c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e38f:	0f ba e2 0e          	bt     edx,0xe
c001e393:	72 f7                	jb     c001e38c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e395:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e398:	0f ba e2 0f          	bt     edx,0xf
c001e39c:	72 ee                	jb     c001e38c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e39e:	c3                   	ret    
c001e39f:	90                   	nop

c001e3a0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001e3a0:	55                   	push   ebp
c001e3a1:	57                   	push   edi
c001e3a2:	56                   	push   esi
c001e3a3:	53                   	push   ebx
c001e3a4:	83 ec 1c             	sub    esp,0x1c
c001e3a7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e3ab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e3af:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e3b3:	53                   	push   ebx
c001e3b4:	89 fd                	mov    ebp,edi
c001e3b6:	56                   	push   esi
c001e3b7:	c1 e5 0a             	shl    ebp,0xa
c001e3ba:	e8 b7 ff ff ff       	call   c001e376 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e3bf:	83 ec 0c             	sub    esp,0xc
c001e3c2:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001e3c8:	01 e8                	add    eax,ebp
c001e3ca:	89 03                	mov    DWORD PTR [ebx],eax
c001e3cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e3ce:	68 00 04 00 00       	push   0x400
c001e3d3:	6a 00                	push   0x0
c001e3d5:	50                   	push   eax
c001e3d6:	e8 a9 22 fe ff       	call   c0000684 <memset>
c001e3db:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001e3e1:	89 fa                	mov    edx,edi
c001e3e3:	01 e8                	add    eax,ebp
c001e3e5:	c1 e7 0d             	shl    edi,0xd
c001e3e8:	89 03                	mov    DWORD PTR [ebx],eax
c001e3ea:	c1 e2 08             	shl    edx,0x8
c001e3ed:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001e3f4:	81 c2 00 80 00 00    	add    edx,0x8000
c001e3fa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e3fe:	89 d0                	mov    eax,edx
c001e400:	83 c4 1c             	add    esp,0x1c
c001e403:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001e409:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001e40c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001e40f:	68 00 01 00 00       	push   0x100
c001e414:	6a 00                	push   0x0
c001e416:	50                   	push   eax
c001e417:	e8 68 22 fe ff       	call   c0000684 <memset>
c001e41c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e420:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001e426:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001e42c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e430:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001e433:	83 c4 10             	add    esp,0x10
c001e436:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001e43d:	31 ff                	xor    edi,edi
c001e43f:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001e445:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001e44b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e44f:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001e455:	83 c5 20             	add    ebp,0x20
c001e458:	01 f8                	add    eax,edi
c001e45a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e45d:	52                   	push   edx
c001e45e:	68 00 01 00 00       	push   0x100
c001e463:	6a 00                	push   0x0
c001e465:	50                   	push   eax
c001e466:	e8 19 22 fe ff       	call   c0000684 <memset>
c001e46b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e46f:	83 c4 10             	add    esp,0x10
c001e472:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001e478:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e47f:	01 f8                	add    eax,edi
c001e481:	81 c7 00 01 00 00    	add    edi,0x100
c001e487:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e48a:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001e490:	75 b3                	jne    c001e445 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001e492:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001e496:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001e49a:	83 c4 1c             	add    esp,0x1c
c001e49d:	5b                   	pop    ebx
c001e49e:	5e                   	pop    esi
c001e49f:	5f                   	pop    edi
c001e4a0:	5d                   	pop    ebp
c001e4a1:	e9 b0 fe ff ff       	jmp    c001e356 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001e4a6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001e4a6:	55                   	push   ebp
c001e4a7:	57                   	push   edi
c001e4a8:	56                   	push   esi
c001e4a9:	53                   	push   ebx
c001e4aa:	31 db                	xor    ebx,ebx
c001e4ac:	83 ec 0c             	sub    esp,0xc
c001e4af:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e4b3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e4b7:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001e4ba:	f7 c7 01 00 00 00    	test   edi,0x1
c001e4c0:	74 7a                	je     c001e53c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001e4c2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001e4c6:	89 d8                	mov    eax,ebx
c001e4c8:	c1 e0 07             	shl    eax,0x7
c001e4cb:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001e4d2:	55                   	push   ebp
c001e4d3:	56                   	push   esi
c001e4d4:	e8 35 fe ff ff       	call   c001e30e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001e4d9:	5a                   	pop    edx
c001e4da:	83 f8 01             	cmp    eax,0x1
c001e4dd:	59                   	pop    ecx
c001e4de:	75 21                	jne    c001e501 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001e4e0:	50                   	push   eax
c001e4e1:	53                   	push   ebx
c001e4e2:	55                   	push   ebp
c001e4e3:	56                   	push   esi
c001e4e4:	e8 b7 fe ff ff       	call   c001e3a0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e4e9:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001e4f0:	e8 ce b4 fe ff       	call   c00099c3 <malloc>
c001e4f5:	89 c5                	mov    ebp,eax
c001e4f7:	89 04 24             	mov    DWORD PTR [esp],eax
c001e4fa:	e8 7f 0d 00 00       	call   c001f27e <SATA::SATA()>
c001e4ff:	eb 24                	jmp    c001e525 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001e501:	83 f8 04             	cmp    eax,0x4
c001e504:	75 36                	jne    c001e53c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001e506:	51                   	push   ecx
c001e507:	53                   	push   ebx
c001e508:	55                   	push   ebp
c001e509:	56                   	push   esi
c001e50a:	e8 91 fe ff ff       	call   c001e3a0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e50f:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001e516:	e8 a8 b4 fe ff       	call   c00099c3 <malloc>
c001e51b:	89 c5                	mov    ebp,eax
c001e51d:	89 04 24             	mov    DWORD PTR [esp],eax
c001e520:	e8 cf 10 00 00       	call   c001f5f4 <SATAPI::SATAPI()>
c001e525:	58                   	pop    eax
c001e526:	5a                   	pop    edx
c001e527:	55                   	push   ebp
c001e528:	56                   	push   esi
c001e529:	e8 f8 f9 fe ff       	call   c000df26 <Device::addChild(Device*)>
c001e52e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001e531:	56                   	push   esi
c001e532:	6a 00                	push   0x0
c001e534:	53                   	push   ebx
c001e535:	55                   	push   ebp
c001e536:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001e539:	83 c4 20             	add    esp,0x20
c001e53c:	d1 ef                	shr    edi,1
c001e53e:	43                   	inc    ebx
c001e53f:	83 fb 20             	cmp    ebx,0x20
c001e542:	0f 85 72 ff ff ff    	jne    c001e4ba <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001e548:	83 c4 0c             	add    esp,0xc
c001e54b:	5b                   	pop    ebx
c001e54c:	5e                   	pop    esi
c001e54d:	5f                   	pop    edi
c001e54e:	5d                   	pop    ebp
c001e54f:	c3                   	ret    

c001e550 <SATABus::open(int, int, void*)>:
c001e550:	83 ec 14             	sub    esp,0x14
c001e553:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e557:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001e55d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e563:	52                   	push   edx
c001e564:	50                   	push   eax
c001e565:	e8 3c ff ff ff       	call   c001e4a6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001e56a:	31 c0                	xor    eax,eax
c001e56c:	83 c4 1c             	add    esp,0x1c
c001e56f:	c3                   	ret    

c001e570 <ATA::close(int, int, void*)>:
c001e570:	83 ec 0c             	sub    esp,0xc
c001e573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e577:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e57d:	85 c0                	test   eax,eax
c001e57f:	74 0c                	je     c001e58d <ATA::close(int, int, void*)+0x1d>
c001e581:	83 ec 0c             	sub    esp,0xc
c001e584:	8b 10                	mov    edx,DWORD PTR [eax]
c001e586:	50                   	push   eax
c001e587:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e58a:	83 c4 10             	add    esp,0x10
c001e58d:	31 c0                	xor    eax,eax
c001e58f:	83 c4 0c             	add    esp,0xc
c001e592:	c3                   	ret    
c001e593:	90                   	nop

c001e594 <ATA::powerSaving(PowerSavingLevel)>:
c001e594:	c3                   	ret    
c001e595:	90                   	nop

c001e596 <ATA::ATA()>:
c001e596:	83 ec 0c             	sub    esp,0xc
c001e599:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e59d:	83 ec 04             	sub    esp,0x4
c001e5a0:	68 00 02 00 00       	push   0x200
c001e5a5:	68 29 52 02 c0       	push   0xc0025229
c001e5aa:	50                   	push   eax
c001e5ab:	e8 ae fd fe ff       	call   c000e35e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e5b0:	83 c4 10             	add    esp,0x10
c001e5b3:	ba ac 51 02 c0       	mov    edx,0xc00251ac
c001e5b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5bc:	89 10                	mov    DWORD PTR [eax],edx
c001e5be:	90                   	nop
c001e5bf:	83 c4 0c             	add    esp,0xc
c001e5c2:	c3                   	ret    
c001e5c3:	90                   	nop

c001e5c4 <ATA::flush(bool)>:
c001e5c4:	53                   	push   ebx
c001e5c5:	83 ec 08             	sub    esp,0x8
c001e5c8:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001e5cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e5d1:	19 c0                	sbb    eax,eax
c001e5d3:	83 e0 fd             	and    eax,0xfffffffd
c001e5d6:	05 ea 00 00 00       	add    eax,0xea
c001e5db:	50                   	push   eax
c001e5dc:	6a 07                	push   0x7
c001e5de:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e5e5:	50                   	push   eax
c001e5e6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e5ec:	e8 5d f1 ff ff       	call   c001d74e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e5f1:	83 c4 0c             	add    esp,0xc
c001e5f4:	6a 00                	push   0x0
c001e5f6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e5fd:	50                   	push   eax
c001e5fe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e604:	e8 dd fb ff ff       	call   c001e1e6 <IDE::polling(unsigned char, unsigned int)>
c001e609:	83 c4 18             	add    esp,0x18
c001e60c:	5b                   	pop    ebx
c001e60d:	c3                   	ret    

c001e60e <ATA::readyForCommand()>:
c001e60e:	56                   	push   esi
c001e60f:	53                   	push   ebx
c001e610:	53                   	push   ebx
c001e611:	31 db                	xor    ebx,ebx
c001e613:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e617:	51                   	push   ecx
c001e618:	6a 0c                	push   0xc
c001e61a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001e621:	50                   	push   eax
c001e622:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001e628:	e8 e1 f1 ff ff       	call   c001d80e <IDE::read(unsigned char, unsigned char)>
c001e62d:	83 c4 10             	add    esp,0x10
c001e630:	a8 88                	test   al,0x88
c001e632:	74 1f                	je     c001e653 <ATA::readyForCommand()+0x45>
c001e634:	43                   	inc    ebx
c001e635:	83 fb 63             	cmp    ebx,0x63
c001e638:	7e dd                	jle    c001e617 <ATA::readyForCommand()+0x9>
c001e63a:	83 ec 0c             	sub    esp,0xc
c001e63d:	6a 0a                	push   0xa
c001e63f:	e8 28 9c ff ff       	call   c001826c <milliTenthSleep(unsigned int)>
c001e644:	83 c4 10             	add    esp,0x10
c001e647:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001e64d:	75 c8                	jne    c001e617 <ATA::readyForCommand()+0x9>
c001e64f:	31 c0                	xor    eax,eax
c001e651:	eb 02                	jmp    c001e655 <ATA::readyForCommand()+0x47>
c001e653:	b0 01                	mov    al,0x1
c001e655:	5a                   	pop    edx
c001e656:	5b                   	pop    ebx
c001e657:	5e                   	pop    esi
c001e658:	c3                   	ret    
c001e659:	90                   	nop

c001e65a <ATA::access(unsigned long long, int, void*, bool)>:
c001e65a:	55                   	push   ebp
c001e65b:	57                   	push   edi
c001e65c:	56                   	push   esi
c001e65d:	53                   	push   ebx
c001e65e:	83 ec 38             	sub    esp,0x38
c001e661:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001e665:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001e669:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001e66d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e671:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e675:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001e679:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001e67d:	68 58 51 02 c0       	push   0xc0025158
c001e682:	e8 58 e4 fe ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001e687:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e68d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e691:	83 c4 10             	add    esp,0x10
c001e694:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001e69a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e69e:	c1 e0 06             	shl    eax,0x6
c001e6a1:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001e6a9:	74 5d                	je     c001e708 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001e6ab:	89 fa                	mov    edx,edi
c001e6ad:	89 f0                	mov    eax,esi
c001e6af:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001e6b3:	c1 ea 1c             	shr    edx,0x1c
c001e6b6:	89 d1                	mov    ecx,edx
c001e6b8:	09 c1                	or     ecx,eax
c001e6ba:	74 25                	je     c001e6e1 <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001e6bc:	31 ed                	xor    ebp,ebp
c001e6be:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001e6c5:	89 fa                	mov    edx,edi
c001e6c7:	89 f0                	mov    eax,esi
c001e6c9:	0f ad d0             	shrd   eax,edx,cl
c001e6cc:	d3 ea                	shr    edx,cl
c001e6ce:	f6 c1 20             	test   cl,0x20
c001e6d1:	74 02                	je     c001e6d5 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001e6d3:	89 d0                	mov    eax,edx
c001e6d5:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001e6d9:	45                   	inc    ebp
c001e6da:	83 fd 06             	cmp    ebp,0x6
c001e6dd:	75 df                	jne    c001e6be <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001e6df:	eb 76                	jmp    c001e757 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001e6e1:	89 f0                	mov    eax,esi
c001e6e3:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001e6e8:	89 fa                	mov    edx,edi
c001e6ea:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001e6f1:	0f ac d0 10          	shrd   eax,edx,0x10
c001e6f5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e6fa:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001e6fe:	c1 ee 18             	shr    esi,0x18
c001e701:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001e706:	eb 56                	jmp    c001e75e <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001e708:	6a 00                	push   0x0
c001e70a:	6a 3f                	push   0x3f
c001e70c:	57                   	push   edi
c001e70d:	56                   	push   esi
c001e70e:	e8 91 29 00 00       	call   c00210a4 <__umoddi3>
c001e713:	83 c4 10             	add    esp,0x10
c001e716:	40                   	inc    eax
c001e717:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001e71b:	6a 00                	push   0x0
c001e71d:	68 f0 03 00 00       	push   0x3f0
c001e722:	57                   	push   edi
c001e723:	56                   	push   esi
c001e724:	e8 7b 28 00 00       	call   c0020fa4 <__udivdi3>
c001e729:	83 c4 10             	add    esp,0x10
c001e72c:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001e731:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001e738:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e73d:	6a 00                	push   0x0
c001e73f:	6a 3f                	push   0x3f
c001e741:	57                   	push   edi
c001e742:	56                   	push   esi
c001e743:	e8 5c 28 00 00       	call   c0020fa4 <__udivdi3>
c001e748:	83 c4 10             	add    esp,0x10
c001e74b:	89 c6                	mov    esi,eax
c001e74d:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001e752:	83 e6 0f             	and    esi,0xf
c001e755:	eb 07                	jmp    c001e75e <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001e757:	31 f6                	xor    esi,esi
c001e759:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001e75e:	bf 01 00 00 00       	mov    edi,0x1
c001e763:	50                   	push   eax
c001e764:	6a 00                	push   0x0
c001e766:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e76d:	50                   	push   eax
c001e76e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e772:	e8 df f1 ff ff       	call   c001d956 <IDE::enableIRQs(unsigned char, bool)>
c001e777:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e77a:	e8 8f fe ff ff       	call   c001e60e <ATA::readyForCommand()>
c001e77f:	83 c4 10             	add    esp,0x10
c001e782:	84 c0                	test   al,al
c001e784:	0f 84 bc 02 00 00    	je     c001ea46 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001e78a:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001e790:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001e796:	c1 e0 04             	shl    eax,0x4
c001e799:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001e7a0:	09 c6                	or     esi,eax
c001e7a2:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e7a7:	75 05                	jne    c001e7ae <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001e7a9:	83 ce a0             	or     esi,0xffffffa0
c001e7ac:	eb 03                	jmp    c001e7b1 <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001e7ae:	83 ce e0             	or     esi,0xffffffe0
c001e7b1:	89 f0                	mov    eax,esi
c001e7b3:	0f b6 f0             	movzx  esi,al
c001e7b6:	56                   	push   esi
c001e7b7:	6a 06                	push   0x6
c001e7b9:	51                   	push   ecx
c001e7ba:	52                   	push   edx
c001e7bb:	e8 8e ef ff ff       	call   c001d74e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7c0:	83 c4 10             	add    esp,0x10
c001e7c3:	6a 00                	push   0x0
c001e7c5:	6a 01                	push   0x1
c001e7c7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e7ce:	50                   	push   eax
c001e7cf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e7d5:	e8 74 ef ff ff       	call   c001d74e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7da:	83 c4 10             	add    esp,0x10
c001e7dd:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001e7e2:	75 6e                	jne    c001e852 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001e7e4:	6a 00                	push   0x0
c001e7e6:	6a 08                	push   0x8
c001e7e8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e7ef:	50                   	push   eax
c001e7f0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e7f6:	e8 53 ef ff ff       	call   c001d74e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7fb:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001e800:	50                   	push   eax
c001e801:	6a 09                	push   0x9
c001e803:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e80a:	50                   	push   eax
c001e80b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e811:	e8 38 ef ff ff       	call   c001d74e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e816:	83 c4 20             	add    esp,0x20
c001e819:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e81e:	50                   	push   eax
c001e81f:	6a 0a                	push   0xa
c001e821:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e828:	50                   	push   eax
c001e829:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e82f:	e8 1a ef ff ff       	call   c001d74e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e834:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001e839:	50                   	push   eax
c001e83a:	6a 0b                	push   0xb
c001e83c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e843:	50                   	push   eax
c001e844:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e84a:	e8 ff ee ff ff       	call   c001d74e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e84f:	83 c4 20             	add    esp,0x20
c001e852:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001e857:	50                   	push   eax
c001e858:	6a 02                	push   0x2
c001e85a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e861:	50                   	push   eax
c001e862:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e868:	e8 e1 ee ff ff       	call   c001d74e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e86d:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001e872:	50                   	push   eax
c001e873:	6a 03                	push   0x3
c001e875:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e87c:	50                   	push   eax
c001e87d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e883:	e8 c6 ee ff ff       	call   c001d74e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e888:	83 c4 20             	add    esp,0x20
c001e88b:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001e890:	50                   	push   eax
c001e891:	6a 04                	push   0x4
c001e893:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e89a:	50                   	push   eax
c001e89b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e8a1:	e8 a8 ee ff ff       	call   c001d74e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e8a6:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e8ab:	50                   	push   eax
c001e8ac:	6a 05                	push   0x5
c001e8ae:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e8b5:	50                   	push   eax
c001e8b6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e8bc:	e8 8d ee ff ff       	call   c001d74e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e8c1:	83 c4 20             	add    esp,0x20
c001e8c4:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001e8c9:	0f 94 c0             	sete   al
c001e8cc:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001e8d1:	74 09                	je     c001e8dc <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001e8d3:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001e8da:	eb 07                	jmp    c001e8e3 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001e8dc:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001e8e3:	0f b6 c0             	movzx  eax,al
c001e8e6:	50                   	push   eax
c001e8e7:	6a 07                	push   0x7
c001e8e9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e8f0:	50                   	push   eax
c001e8f1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e8f7:	e8 52 ee ff ff       	call   c001d74e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e8fc:	c7 04 24 65 51 02 c0 	mov    DWORD PTR [esp],0xc0025165
c001e903:	e8 d7 e1 fe ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001e908:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001e90c:	83 c4 10             	add    esp,0x10
c001e90f:	85 f6                	test   esi,esi
c001e911:	0f 84 f7 00 00 00    	je     c001ea0e <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001e917:	83 ec 0c             	sub    esp,0xc
c001e91a:	68 68 51 02 c0       	push   0xc0025168
c001e91f:	e8 bb e1 fe ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001e924:	83 c4 0c             	add    esp,0xc
c001e927:	6a 01                	push   0x1
c001e929:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e930:	50                   	push   eax
c001e931:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e937:	e8 aa f8 ff ff       	call   c001e1e6 <IDE::polling(unsigned char, unsigned int)>
c001e93c:	c7 04 24 6b 51 02 c0 	mov    DWORD PTR [esp],0xc002516b
c001e943:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e947:	e8 93 e1 fe ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001e94c:	83 c4 10             	add    esp,0x10
c001e94f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001e953:	84 c0                	test   al,al
c001e955:	74 2b                	je     c001e982 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001e957:	0f b6 f8             	movzx  edi,al
c001e95a:	57                   	push   edi
c001e95b:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001e962:	50                   	push   eax
c001e963:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e96a:	50                   	push   eax
c001e96b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e971:	e8 c0 f7 ff ff       	call   c001e136 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001e976:	c7 04 24 6e 51 02 c0 	mov    DWORD PTR [esp],0xc002516e
c001e97d:	e9 bc 00 00 00       	jmp    c001ea3e <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001e982:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e987:	74 50                	je     c001e9d9 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001e989:	83 ec 0c             	sub    esp,0xc
c001e98c:	31 ed                	xor    ebp,ebp
c001e98e:	68 79 51 02 c0       	push   0xc0025179
c001e993:	e8 47 e1 fe ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001e998:	83 c4 10             	add    esp,0x10
c001e99b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e99f:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001e9a3:	50                   	push   eax
c001e9a4:	50                   	push   eax
c001e9a5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e9ac:	50                   	push   eax
c001e9ad:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e9b3:	e8 84 ed ff ff       	call   c001d73c <IDE::getBase(unsigned char)>
c001e9b8:	89 c2                	mov    edx,eax
c001e9ba:	89 f8                	mov    eax,edi
c001e9bc:	66 ef                	out    dx,ax
c001e9be:	45                   	inc    ebp
c001e9bf:	83 c4 10             	add    esp,0x10
c001e9c2:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001e9c8:	75 d1                	jne    c001e99b <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001e9ca:	83 ec 0c             	sub    esp,0xc
c001e9cd:	68 7c 51 02 c0       	push   0xc002517c
c001e9d2:	e8 08 e1 fe ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001e9d7:	eb 24                	jmp    c001e9fd <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001e9d9:	51                   	push   ecx
c001e9da:	51                   	push   ecx
c001e9db:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e9e2:	50                   	push   eax
c001e9e3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e9e9:	e8 4e ed ff ff       	call   c001d73c <IDE::getBase(unsigned char)>
c001e9ee:	b9 00 01 00 00       	mov    ecx,0x100
c001e9f3:	89 c2                	mov    edx,eax
c001e9f5:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001e9f9:	fc                   	cld    
c001e9fa:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001e9fd:	83 c4 10             	add    esp,0x10
c001ea00:	4e                   	dec    esi
c001ea01:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001ea09:	e9 01 ff ff ff       	jmp    c001e90f <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001ea0e:	31 ff                	xor    edi,edi
c001ea10:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ea15:	74 2f                	je     c001ea46 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001ea17:	83 ec 0c             	sub    esp,0xc
c001ea1a:	68 7f 51 02 c0       	push   0xc002517f
c001ea1f:	e8 bb e0 fe ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001ea24:	58                   	pop    eax
c001ea25:	31 c0                	xor    eax,eax
c001ea27:	5a                   	pop    edx
c001ea28:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001ea2d:	0f 94 c0             	sete   al
c001ea30:	50                   	push   eax
c001ea31:	53                   	push   ebx
c001ea32:	e8 8d fb ff ff       	call   c001e5c4 <ATA::flush(bool)>
c001ea37:	c7 04 24 82 51 02 c0 	mov    DWORD PTR [esp],0xc0025182
c001ea3e:	e8 9c e0 fe ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001ea43:	83 c4 10             	add    esp,0x10
c001ea46:	83 c4 2c             	add    esp,0x2c
c001ea49:	89 f8                	mov    eax,edi
c001ea4b:	5b                   	pop    ebx
c001ea4c:	5e                   	pop    esi
c001ea4d:	5f                   	pop    edi
c001ea4e:	5d                   	pop    ebp
c001ea4f:	c3                   	ret    

c001ea50 <ATA::read(unsigned long long, int, void*)>:
c001ea50:	57                   	push   edi
c001ea51:	b8 04 00 00 00       	mov    eax,0x4
c001ea56:	56                   	push   esi
c001ea57:	53                   	push   ebx
c001ea58:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ea5c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ea60:	8d 7a ff             	lea    edi,[edx-0x1]
c001ea63:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ea67:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ea6b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ea71:	77 25                	ja     c001ea98 <ATA::read(unsigned long long, int, void*)+0x48>
c001ea73:	b8 06 00 00 00       	mov    eax,0x6
c001ea78:	85 f6                	test   esi,esi
c001ea7a:	74 1c                	je     c001ea98 <ATA::read(unsigned long long, int, void*)+0x48>
c001ea7c:	50                   	push   eax
c001ea7d:	50                   	push   eax
c001ea7e:	6a 00                	push   0x0
c001ea80:	56                   	push   esi
c001ea81:	52                   	push   edx
c001ea82:	53                   	push   ebx
c001ea83:	51                   	push   ecx
c001ea84:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ea88:	e8 cd fb ff ff       	call   c001e65a <ATA::access(unsigned long long, int, void*, bool)>
c001ea8d:	83 c4 20             	add    esp,0x20
c001ea90:	85 c0                	test   eax,eax
c001ea92:	0f 95 c0             	setne  al
c001ea95:	0f b6 c0             	movzx  eax,al
c001ea98:	5b                   	pop    ebx
c001ea99:	5e                   	pop    esi
c001ea9a:	5f                   	pop    edi
c001ea9b:	c3                   	ret    

c001ea9c <ATA::write(unsigned long long, int, void*)>:
c001ea9c:	55                   	push   ebp
c001ea9d:	57                   	push   edi
c001ea9e:	56                   	push   esi
c001ea9f:	53                   	push   ebx
c001eaa0:	83 ec 18             	sub    esp,0x18
c001eaa3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001eaa7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001eaab:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001eaaf:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001eab3:	68 85 51 02 c0       	push   0xc0025185
c001eab8:	e8 22 e0 fe ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001eabd:	8d 53 ff             	lea    edx,[ebx-0x1]
c001eac0:	83 c4 10             	add    esp,0x10
c001eac3:	b8 04 00 00 00       	mov    eax,0x4
c001eac8:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001eace:	77 25                	ja     c001eaf5 <ATA::write(unsigned long long, int, void*)+0x59>
c001ead0:	b8 06 00 00 00       	mov    eax,0x6
c001ead5:	85 f6                	test   esi,esi
c001ead7:	74 1c                	je     c001eaf5 <ATA::write(unsigned long long, int, void*)+0x59>
c001ead9:	50                   	push   eax
c001eada:	50                   	push   eax
c001eadb:	6a 01                	push   0x1
c001eadd:	56                   	push   esi
c001eade:	53                   	push   ebx
c001eadf:	55                   	push   ebp
c001eae0:	57                   	push   edi
c001eae1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001eae5:	e8 70 fb ff ff       	call   c001e65a <ATA::access(unsigned long long, int, void*, bool)>
c001eaea:	83 c4 20             	add    esp,0x20
c001eaed:	85 c0                	test   eax,eax
c001eaef:	0f 95 c0             	setne  al
c001eaf2:	0f b6 c0             	movzx  eax,al
c001eaf5:	83 c4 0c             	add    esp,0xc
c001eaf8:	5b                   	pop    ebx
c001eaf9:	5e                   	pop    esi
c001eafa:	5f                   	pop    edi
c001eafb:	5d                   	pop    ebp
c001eafc:	c3                   	ret    
c001eafd:	90                   	nop

c001eafe <ATA::detectCHS()>:
c001eafe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001eb02:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001eb08:	c1 e0 06             	shl    eax,0x6
c001eb0b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001eb11:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001eb1b:	c7 44 24 04 91 51 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025191
c001eb23:	e9 79 58 ff ff       	jmp    c00143a1 <Krnl::panic(char const*)>

c001eb28 <ATA::open(int, int, void*)>:
c001eb28:	53                   	push   ebx
c001eb29:	83 ec 08             	sub    esp,0x8
c001eb2c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eb30:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001eb34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001eb38:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001eb3e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001eb44:	c1 e0 06             	shl    eax,0x6
c001eb47:	01 d0                	add    eax,edx
c001eb49:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001eb50:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001eb56:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001eb5d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001eb67:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001eb6d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001eb74:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001eb7b:	75 0c                	jne    c001eb89 <ATA::open(int, int, void*)+0x61>
c001eb7d:	83 ec 0c             	sub    esp,0xc
c001eb80:	53                   	push   ebx
c001eb81:	e8 78 ff ff ff       	call   c001eafe <ATA::detectCHS()>
c001eb86:	83 c4 10             	add    esp,0x10
c001eb89:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001eb8f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001eb95:	c1 e0 06             	shl    eax,0x6
c001eb98:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001eb9f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001eba9:	d1 e8                	shr    eax,1
c001ebab:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001ebb1:	6a 04                	push   0x4
c001ebb3:	6a 0c                	push   0xc
c001ebb5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ebbc:	50                   	push   eax
c001ebbd:	52                   	push   edx
c001ebbe:	e8 8b eb ff ff       	call   c001d74e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ebc3:	90                   	nop
c001ebc4:	90                   	nop
c001ebc5:	6a 00                	push   0x0
c001ebc7:	6a 0c                	push   0xc
c001ebc9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ebd0:	50                   	push   eax
c001ebd1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ebd7:	e8 72 eb ff ff       	call   c001d74e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ebdc:	83 c4 14             	add    esp,0x14
c001ebdf:	53                   	push   ebx
c001ebe0:	e8 e1 f7 fe ff       	call   c000e3c6 <PhysicalDisk::startCache()>
c001ebe5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ebe8:	e8 15 18 ff ff       	call   c0010402 <createPartitionsForDisk(PhysicalDisk*)>
c001ebed:	31 c0                	xor    eax,eax
c001ebef:	83 c4 18             	add    esp,0x18
c001ebf2:	5b                   	pop    ebx
c001ebf3:	c3                   	ret    

c001ebf4 <ATAPI::write(unsigned long long, int, void*)>:
c001ebf4:	b8 03 00 00 00       	mov    eax,0x3
c001ebf9:	c3                   	ret    

c001ebfa <ATAPI::close(int, int, void*)>:
c001ebfa:	83 ec 0c             	sub    esp,0xc
c001ebfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec01:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ec07:	85 c0                	test   eax,eax
c001ec09:	74 0c                	je     c001ec17 <ATAPI::close(int, int, void*)+0x1d>
c001ec0b:	83 ec 0c             	sub    esp,0xc
c001ec0e:	8b 10                	mov    edx,DWORD PTR [eax]
c001ec10:	50                   	push   eax
c001ec11:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ec14:	83 c4 10             	add    esp,0x10
c001ec17:	31 c0                	xor    eax,eax
c001ec19:	83 c4 0c             	add    esp,0xc
c001ec1c:	c3                   	ret    
c001ec1d:	90                   	nop

c001ec1e <ATAPI::ATAPI()>:
c001ec1e:	83 ec 0c             	sub    esp,0xc
c001ec21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec25:	83 ec 04             	sub    esp,0x4
c001ec28:	68 00 08 00 00       	push   0x800
c001ec2d:	68 c9 52 02 c0       	push   0xc00252c9
c001ec32:	50                   	push   eax
c001ec33:	e8 26 f7 fe ff       	call   c000e35e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ec38:	83 c4 10             	add    esp,0x10
c001ec3b:	ba e4 51 02 c0       	mov    edx,0xc00251e4
c001ec40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec44:	89 10                	mov    DWORD PTR [eax],edx
c001ec46:	90                   	nop
c001ec47:	83 c4 0c             	add    esp,0xc
c001ec4a:	c3                   	ret    
c001ec4b:	90                   	nop

c001ec4c <ATAPI::readyForCommand()>:
c001ec4c:	56                   	push   esi
c001ec4d:	53                   	push   ebx
c001ec4e:	53                   	push   ebx
c001ec4f:	31 db                	xor    ebx,ebx
c001ec51:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ec55:	51                   	push   ecx
c001ec56:	6a 0c                	push   0xc
c001ec58:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ec5f:	50                   	push   eax
c001ec60:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ec66:	e8 a3 eb ff ff       	call   c001d80e <IDE::read(unsigned char, unsigned char)>
c001ec6b:	83 c4 10             	add    esp,0x10
c001ec6e:	a8 88                	test   al,0x88
c001ec70:	74 1f                	je     c001ec91 <ATAPI::readyForCommand()+0x45>
c001ec72:	43                   	inc    ebx
c001ec73:	83 fb 63             	cmp    ebx,0x63
c001ec76:	7e dd                	jle    c001ec55 <ATAPI::readyForCommand()+0x9>
c001ec78:	83 ec 0c             	sub    esp,0xc
c001ec7b:	6a 0a                	push   0xa
c001ec7d:	e8 ea 95 ff ff       	call   c001826c <milliTenthSleep(unsigned int)>
c001ec82:	83 c4 10             	add    esp,0x10
c001ec85:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001ec8b:	75 c8                	jne    c001ec55 <ATAPI::readyForCommand()+0x9>
c001ec8d:	31 c0                	xor    eax,eax
c001ec8f:	eb 02                	jmp    c001ec93 <ATAPI::readyForCommand()+0x47>
c001ec91:	b0 01                	mov    al,0x1
c001ec93:	5a                   	pop    edx
c001ec94:	5b                   	pop    ebx
c001ec95:	5e                   	pop    esi
c001ec96:	c3                   	ret    
c001ec97:	90                   	nop

c001ec98 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001ec98:	55                   	push   ebp
c001ec99:	57                   	push   edi
c001ec9a:	56                   	push   esi
c001ec9b:	53                   	push   ebx
c001ec9c:	83 ec 20             	sub    esp,0x20
c001ec9f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001eca3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001eca7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001ecab:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ecaf:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ecb3:	6a 01                	push   0x1
c001ecb5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ecbc:	50                   	push   eax
c001ecbd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ecc3:	e8 8e ec ff ff       	call   c001d956 <IDE::enableIRQs(unsigned char, bool)>
c001ecc8:	5e                   	pop    esi
c001ecc9:	58                   	pop    eax
c001ecca:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ecd1:	50                   	push   eax
c001ecd2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ecd8:	e8 4b ea ff ff       	call   c001d728 <IDE::prepareInterrupt(unsigned char)>
c001ecdd:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ece0:	e8 67 ff ff ff       	call   c001ec4c <ATAPI::readyForCommand()>
c001ece5:	83 c4 10             	add    esp,0x10
c001ece8:	84 c0                	test   al,al
c001ecea:	75 0a                	jne    c001ecf6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001ecec:	bb 01 00 00 00       	mov    ebx,0x1
c001ecf1:	e9 57 02 00 00       	jmp    c001ef4d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ecf6:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001ecfc:	c1 e0 04             	shl    eax,0x4
c001ecff:	0f b6 c0             	movzx  eax,al
c001ed02:	50                   	push   eax
c001ed03:	6a 06                	push   0x6
c001ed05:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed0c:	50                   	push   eax
c001ed0d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed13:	e8 36 ea ff ff       	call   c001d74e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed18:	6a 00                	push   0x0
c001ed1a:	6a 01                	push   0x1
c001ed1c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed23:	50                   	push   eax
c001ed24:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed2a:	e8 1f ea ff ff       	call   c001d74e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed2f:	83 c4 20             	add    esp,0x20
c001ed32:	0f b6 c3             	movzx  eax,bl
c001ed35:	0f b6 df             	movzx  ebx,bh
c001ed38:	50                   	push   eax
c001ed39:	6a 04                	push   0x4
c001ed3b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed42:	50                   	push   eax
c001ed43:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed49:	e8 00 ea ff ff       	call   c001d74e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed4e:	53                   	push   ebx
c001ed4f:	6a 05                	push   0x5
c001ed51:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed58:	50                   	push   eax
c001ed59:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed5f:	e8 ea e9 ff ff       	call   c001d74e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed64:	83 c4 20             	add    esp,0x20
c001ed67:	68 a0 00 00 00       	push   0xa0
c001ed6c:	6a 07                	push   0x7
c001ed6e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed75:	50                   	push   eax
c001ed76:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed7c:	e8 cd e9 ff ff       	call   c001d74e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed81:	83 c4 0c             	add    esp,0xc
c001ed84:	6a 01                	push   0x1
c001ed86:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed8d:	50                   	push   eax
c001ed8e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed94:	e8 4d f4 ff ff       	call   c001e1e6 <IDE::polling(unsigned char, unsigned int)>
c001ed99:	83 c4 10             	add    esp,0x10
c001ed9c:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001eda2:	84 c0                	test   al,al
c001eda4:	74 23                	je     c001edc9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001eda6:	0f b6 d8             	movzx  ebx,al
c001eda9:	0f b6 d2             	movzx  edx,dl
c001edac:	53                   	push   ebx
c001edad:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001edb4:	50                   	push   eax
c001edb5:	52                   	push   edx
c001edb6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001edbc:	e8 75 f3 ff ff       	call   c001e136 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001edc1:	83 c4 10             	add    esp,0x10
c001edc4:	e9 84 01 00 00       	jmp    c001ef4d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001edc9:	0f b6 d2             	movzx  edx,dl
c001edcc:	53                   	push   ebx
c001edcd:	53                   	push   ebx
c001edce:	52                   	push   edx
c001edcf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001edd5:	e8 62 e9 ff ff       	call   c001d73c <IDE::getBase(unsigned char)>
c001edda:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001edde:	b9 06 00 00 00       	mov    ecx,0x6
c001ede3:	89 c2                	mov    edx,eax
c001ede5:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001ede8:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001edec:	83 c4 10             	add    esp,0x10
c001edef:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001edf5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001edfc:	85 db                	test   ebx,ebx
c001edfe:	0f 84 ec 00 00 00    	je     c001eef0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001ee04:	51                   	push   ecx
c001ee05:	51                   	push   ecx
c001ee06:	52                   	push   edx
c001ee07:	50                   	push   eax
c001ee08:	e8 af ea ff ff       	call   c001d8bc <IDE::waitInterrupt(unsigned char)>
c001ee0d:	83 c4 10             	add    esp,0x10
c001ee10:	84 c0                	test   al,al
c001ee12:	0f 84 d4 fe ff ff    	je     c001ecec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001ee18:	56                   	push   esi
c001ee19:	56                   	push   esi
c001ee1a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ee21:	50                   	push   eax
c001ee22:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ee28:	e8 fb e8 ff ff       	call   c001d728 <IDE::prepareInterrupt(unsigned char)>
c001ee2d:	83 c4 0c             	add    esp,0xc
c001ee30:	6a 04                	push   0x4
c001ee32:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ee39:	50                   	push   eax
c001ee3a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ee40:	e8 c9 e9 ff ff       	call   c001d80e <IDE::read(unsigned char, unsigned char)>
c001ee45:	83 c4 0c             	add    esp,0xc
c001ee48:	89 c6                	mov    esi,eax
c001ee4a:	6a 05                	push   0x5
c001ee4c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ee53:	50                   	push   eax
c001ee54:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ee5a:	e8 af e9 ff ff       	call   c001d80e <IDE::read(unsigned char, unsigned char)>
c001ee5f:	89 f1                	mov    ecx,esi
c001ee61:	0f b6 c0             	movzx  eax,al
c001ee64:	0f b6 f1             	movzx  esi,cl
c001ee67:	c1 e0 08             	shl    eax,0x8
c001ee6a:	09 c6                	or     esi,eax
c001ee6c:	d1 fe                	sar    esi,1
c001ee6e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001ee72:	83 c4 10             	add    esp,0x10
c001ee75:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001ee7a:	74 41                	je     c001eebd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001ee7c:	31 c9                	xor    ecx,ecx
c001ee7e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ee84:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ee8b:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001ee8f:	75 0a                	jne    c001ee9b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001ee91:	01 c9                	add    ecx,ecx
c001ee93:	01 cd                	add    ebp,ecx
c001ee95:	4b                   	dec    ebx
c001ee96:	e9 54 ff ff ff       	jmp    c001edef <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001ee9b:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001eea0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001eea4:	51                   	push   ecx
c001eea5:	51                   	push   ecx
c001eea6:	52                   	push   edx
c001eea7:	50                   	push   eax
c001eea8:	e8 8f e8 ff ff       	call   c001d73c <IDE::getBase(unsigned char)>
c001eead:	89 c2                	mov    edx,eax
c001eeaf:	89 f0                	mov    eax,esi
c001eeb1:	66 ef                	out    dx,ax
c001eeb3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001eeb7:	83 c4 10             	add    esp,0x10
c001eeba:	41                   	inc    ecx
c001eebb:	eb c1                	jmp    c001ee7e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001eebd:	31 f6                	xor    esi,esi
c001eebf:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001eec5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001eecc:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001eed0:	75 06                	jne    c001eed8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001eed2:	01 f6                	add    esi,esi
c001eed4:	01 f5                	add    ebp,esi
c001eed6:	eb bd                	jmp    c001ee95 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001eed8:	51                   	push   ecx
c001eed9:	51                   	push   ecx
c001eeda:	52                   	push   edx
c001eedb:	50                   	push   eax
c001eedc:	e8 5b e8 ff ff       	call   c001d73c <IDE::getBase(unsigned char)>
c001eee1:	89 c2                	mov    edx,eax
c001eee3:	66 ed                	in     ax,dx
c001eee5:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001eeea:	83 c4 10             	add    esp,0x10
c001eeed:	46                   	inc    esi
c001eeee:	eb cf                	jmp    c001eebf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001eef0:	51                   	push   ecx
c001eef1:	51                   	push   ecx
c001eef2:	52                   	push   edx
c001eef3:	50                   	push   eax
c001eef4:	e8 c3 e9 ff ff       	call   c001d8bc <IDE::waitInterrupt(unsigned char)>
c001eef9:	83 c4 10             	add    esp,0x10
c001eefc:	84 c0                	test   al,al
c001eefe:	0f 84 e8 fd ff ff    	je     c001ecec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001ef04:	bb a0 86 01 00       	mov    ebx,0x186a0
c001ef09:	52                   	push   edx
c001ef0a:	52                   	push   edx
c001ef0b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ef12:	50                   	push   eax
c001ef13:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ef19:	e8 0a e8 ff ff       	call   c001d728 <IDE::prepareInterrupt(unsigned char)>
c001ef1e:	83 c4 10             	add    esp,0x10
c001ef21:	50                   	push   eax
c001ef22:	50                   	push   eax
c001ef23:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ef2a:	50                   	push   eax
c001ef2b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ef31:	e8 06 e8 ff ff       	call   c001d73c <IDE::getBase(unsigned char)>
c001ef36:	8d 50 07             	lea    edx,[eax+0x7]
c001ef39:	ec                   	in     al,dx
c001ef3a:	83 c4 10             	add    esp,0x10
c001ef3d:	a8 88                	test   al,0x88
c001ef3f:	74 0a                	je     c001ef4b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001ef41:	4b                   	dec    ebx
c001ef42:	75 dd                	jne    c001ef21 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001ef44:	bb 02 00 00 00       	mov    ebx,0x2
c001ef49:	eb 02                	jmp    c001ef4d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ef4b:	31 db                	xor    ebx,ebx
c001ef4d:	83 c4 1c             	add    esp,0x1c
c001ef50:	89 d8                	mov    eax,ebx
c001ef52:	5b                   	pop    ebx
c001ef53:	5e                   	pop    esi
c001ef54:	5f                   	pop    edi
c001ef55:	5d                   	pop    ebp
c001ef56:	c3                   	ret    
c001ef57:	90                   	nop

c001ef58 <ATAPI::diskRemoved()>:
c001ef58:	83 ec 18             	sub    esp,0x18
c001ef5b:	68 d5 52 02 c0       	push   0xc00252d5
c001ef60:	e8 7a db fe ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001ef65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef69:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001ef70:	83 c4 1c             	add    esp,0x1c
c001ef73:	c3                   	ret    

c001ef74 <ATAPI::eject()>:
c001ef74:	57                   	push   edi
c001ef75:	b9 03 00 00 00       	mov    ecx,0x3
c001ef7a:	53                   	push   ebx
c001ef7b:	83 ec 14             	sub    esp,0x14
c001ef7e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ef82:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ef86:	fc                   	cld    
c001ef87:	31 c0                	xor    eax,eax
c001ef89:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ef8b:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ef90:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ef95:	50                   	push   eax
c001ef96:	50                   	push   eax
c001ef97:	6a 00                	push   0x0
c001ef99:	6a 00                	push   0x0
c001ef9b:	6a 00                	push   0x0
c001ef9d:	6a 02                	push   0x2
c001ef9f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001efa3:	50                   	push   eax
c001efa4:	53                   	push   ebx
c001efa5:	e8 ee fc ff ff       	call   c001ec98 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001efaa:	83 c4 14             	add    esp,0x14
c001efad:	53                   	push   ebx
c001efae:	e8 a5 ff ff ff       	call   c001ef58 <ATAPI::diskRemoved()>
c001efb3:	83 c4 24             	add    esp,0x24
c001efb6:	31 c0                	xor    eax,eax
c001efb8:	5b                   	pop    ebx
c001efb9:	5f                   	pop    edi
c001efba:	c3                   	ret    
c001efbb:	90                   	nop

c001efbc <ATAPI::diskInserted()>:
c001efbc:	53                   	push   ebx
c001efbd:	83 ec 14             	sub    esp,0x14
c001efc0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001efc4:	68 ec 52 02 c0       	push   0xc00252ec
c001efc9:	e8 11 db fe ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001efce:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001efd5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001efd8:	e8 e9 f3 fe ff       	call   c000e3c6 <PhysicalDisk::startCache()>
c001efdd:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001efe1:	83 c4 18             	add    esp,0x18
c001efe4:	5b                   	pop    ebx
c001efe5:	e9 18 14 ff ff       	jmp    c0010402 <createPartitionsForDisk(PhysicalDisk*)>

c001efea <ATAPI::detectMedia()>:
c001efea:	56                   	push   esi
c001efeb:	53                   	push   ebx
c001efec:	83 ec 28             	sub    esp,0x28
c001efef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001eff3:	6a 0c                	push   0xc
c001eff5:	6a 00                	push   0x0
c001eff7:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001effb:	56                   	push   esi
c001effc:	e8 83 16 fe ff       	call   c0000684 <memset>
c001f001:	58                   	pop    eax
c001f002:	5a                   	pop    edx
c001f003:	6a 00                	push   0x0
c001f005:	6a 00                	push   0x0
c001f007:	6a 00                	push   0x0
c001f009:	6a 00                	push   0x0
c001f00b:	56                   	push   esi
c001f00c:	53                   	push   ebx
c001f00d:	e8 86 fc ff ff       	call   c001ec98 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f012:	83 c4 1c             	add    esp,0x1c
c001f015:	6a 0c                	push   0xc
c001f017:	6a 00                	push   0x0
c001f019:	56                   	push   esi
c001f01a:	e8 65 16 fe ff       	call   c0000684 <memset>
c001f01f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001f024:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001f029:	59                   	pop    ecx
c001f02a:	58                   	pop    eax
c001f02b:	6a 01                	push   0x1
c001f02d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001f031:	50                   	push   eax
c001f032:	6a 00                	push   0x0
c001f034:	6a 12                	push   0x12
c001f036:	56                   	push   esi
c001f037:	53                   	push   ebx
c001f038:	e8 5b fc ff ff       	call   c001ec98 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f03d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001f041:	83 c4 20             	add    esp,0x20
c001f044:	83 e0 7f             	and    eax,0x7f
c001f047:	3c 70                	cmp    al,0x70
c001f049:	74 15                	je     c001f060 <ATAPI::detectMedia()+0x76>
c001f04b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f052:	75 0c                	jne    c001f060 <ATAPI::detectMedia()+0x76>
c001f054:	83 ec 0c             	sub    esp,0xc
c001f057:	53                   	push   ebx
c001f058:	e8 5f ff ff ff       	call   c001efbc <ATAPI::diskInserted()>
c001f05d:	83 c4 10             	add    esp,0x10
c001f060:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f064:	83 e0 0f             	and    eax,0xf
c001f067:	3c 02                	cmp    al,0x2
c001f069:	75 1b                	jne    c001f086 <ATAPI::detectMedia()+0x9c>
c001f06b:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001f070:	75 2d                	jne    c001f09f <ATAPI::detectMedia()+0xb5>
c001f072:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f079:	74 24                	je     c001f09f <ATAPI::detectMedia()+0xb5>
c001f07b:	83 ec 0c             	sub    esp,0xc
c001f07e:	53                   	push   ebx
c001f07f:	e8 d4 fe ff ff       	call   c001ef58 <ATAPI::diskRemoved()>
c001f084:	eb 16                	jmp    c001f09c <ATAPI::detectMedia()+0xb2>
c001f086:	84 c0                	test   al,al
c001f088:	75 15                	jne    c001f09f <ATAPI::detectMedia()+0xb5>
c001f08a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f091:	75 0c                	jne    c001f09f <ATAPI::detectMedia()+0xb5>
c001f093:	83 ec 0c             	sub    esp,0xc
c001f096:	53                   	push   ebx
c001f097:	e8 20 ff ff ff       	call   c001efbc <ATAPI::diskInserted()>
c001f09c:	83 c4 10             	add    esp,0x10
c001f09f:	83 c4 24             	add    esp,0x24
c001f0a2:	5b                   	pop    ebx
c001f0a3:	5e                   	pop    esi
c001f0a4:	c3                   	ret    
c001f0a5:	90                   	nop

c001f0a6 <ATAPI::open(int, int, void*)>:
c001f0a6:	53                   	push   ebx
c001f0a7:	83 ec 08             	sub    esp,0x8
c001f0aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f0ae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f0b2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f0b6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f0bc:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001f0c2:	c1 e0 06             	shl    eax,0x6
c001f0c5:	01 d0                	add    eax,edx
c001f0c7:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001f0ce:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001f0d4:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001f0db:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001f0e5:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001f0eb:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001f0f2:	6a 04                	push   0x4
c001f0f4:	6a 0c                	push   0xc
c001f0f6:	51                   	push   ecx
c001f0f7:	52                   	push   edx
c001f0f8:	e8 51 e6 ff ff       	call   c001d74e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f0fd:	90                   	nop
c001f0fe:	90                   	nop
c001f0ff:	6a 00                	push   0x0
c001f101:	6a 0c                	push   0xc
c001f103:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f10a:	50                   	push   eax
c001f10b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f111:	e8 38 e6 ff ff       	call   c001d74e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f116:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001f11d:	83 c4 14             	add    esp,0x14
c001f120:	53                   	push   ebx
c001f121:	e8 c4 fe ff ff       	call   c001efea <ATAPI::detectMedia()>
c001f126:	31 c0                	xor    eax,eax
c001f128:	83 c4 18             	add    esp,0x18
c001f12b:	5b                   	pop    ebx
c001f12c:	c3                   	ret    
c001f12d:	90                   	nop

c001f12e <ATAPI::read(unsigned long long, int, void*)>:
c001f12e:	55                   	push   ebp
c001f12f:	57                   	push   edi
c001f130:	56                   	push   esi
c001f131:	53                   	push   ebx
c001f132:	83 ec 1c             	sub    esp,0x1c
c001f135:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f139:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f13d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001f141:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001f148:	74 41                	je     c001f18b <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001f14a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f14e:	b9 03 00 00 00       	mov    ecx,0x3
c001f153:	fc                   	cld    
c001f154:	31 c0                	xor    eax,eax
c001f156:	86 fb                	xchg   bl,bh
c001f158:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f15a:	c1 c3 10             	rol    ebx,0x10
c001f15d:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001f162:	89 e8                	mov    eax,ebp
c001f164:	86 fb                	xchg   bl,bh
c001f166:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001f16a:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001f16e:	50                   	push   eax
c001f16f:	50                   	push   eax
c001f170:	55                   	push   ebp
c001f171:	c1 e5 0b             	shl    ebp,0xb
c001f174:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001f178:	6a 00                	push   0x0
c001f17a:	55                   	push   ebp
c001f17b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f17f:	50                   	push   eax
c001f180:	56                   	push   esi
c001f181:	e8 12 fb ff ff       	call   c001ec98 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f186:	83 c4 20             	add    esp,0x20
c001f189:	eb 1a                	jmp    c001f1a5 <ATAPI::read(unsigned long long, int, void*)+0x77>
c001f18b:	83 ec 0c             	sub    esp,0xc
c001f18e:	56                   	push   esi
c001f18f:	e8 56 fe ff ff       	call   c001efea <ATAPI::detectMedia()>
c001f194:	83 c4 10             	add    esp,0x10
c001f197:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001f19e:	75 aa                	jne    c001f14a <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001f1a0:	b8 02 00 00 00       	mov    eax,0x2
c001f1a5:	83 c4 1c             	add    esp,0x1c
c001f1a8:	5b                   	pop    ebx
c001f1a9:	5e                   	pop    esi
c001f1aa:	5f                   	pop    edi
c001f1ab:	5d                   	pop    ebp
c001f1ac:	c3                   	ret    
c001f1ad:	90                   	nop

c001f1ae <SATA::close(int, int, void*)>:
c001f1ae:	83 ec 0c             	sub    esp,0xc
c001f1b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1b5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f1bb:	85 c0                	test   eax,eax
c001f1bd:	74 0c                	je     c001f1cb <SATA::close(int, int, void*)+0x1d>
c001f1bf:	83 ec 0c             	sub    esp,0xc
c001f1c2:	8b 10                	mov    edx,DWORD PTR [eax]
c001f1c4:	50                   	push   eax
c001f1c5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f1c8:	83 c4 10             	add    esp,0x10
c001f1cb:	31 c0                	xor    eax,eax
c001f1cd:	83 c4 0c             	add    esp,0xc
c001f1d0:	c3                   	ret    
c001f1d1:	90                   	nop

c001f1d2 <SATA::powerSaving(PowerSavingLevel)>:
c001f1d2:	c3                   	ret    
c001f1d3:	90                   	nop

c001f1d4 <SATA::open(int, int, void*)>:
c001f1d4:	56                   	push   esi
c001f1d5:	53                   	push   ebx
c001f1d6:	50                   	push   eax
c001f1d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f1db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f1df:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001f1e9:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f1ef:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f1f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f1fd:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f207:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f20d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001f214:	e8 e0 ab fe ff       	call   c0009df9 <Phys::allocatePage()>
c001f219:	89 c6                	mov    esi,eax
c001f21b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001f221:	81 c6 00 10 00 00    	add    esi,0x1000
c001f227:	e8 cd ab fe ff       	call   c0009df9 <Phys::allocatePage()>
c001f22c:	39 c6                	cmp    esi,eax
c001f22e:	74 10                	je     c001f240 <SATA::open(int, int, void*)+0x6c>
c001f230:	83 ec 0c             	sub    esp,0xc
c001f233:	68 14 52 02 c0       	push   0xc0025214
c001f238:	e8 64 51 ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c001f23d:	83 c4 10             	add    esp,0x10
c001f240:	83 ec 0c             	sub    esp,0xc
c001f243:	6a 02                	push   0x2
c001f245:	e8 c3 c4 fe ff       	call   c000b70d <Virt::allocateKernelVirtualPages(int)>
c001f24a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f250:	6a 03                	push   0x3
c001f252:	50                   	push   eax
c001f253:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001f259:	ff 35 b0 65 02 c0    	push   DWORD PTR ds:0xc00265b0
c001f25f:	e8 50 cb fe ff       	call   c000bdb4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001f264:	83 c4 14             	add    esp,0x14
c001f267:	53                   	push   ebx
c001f268:	e8 59 f1 fe ff       	call   c000e3c6 <PhysicalDisk::startCache()>
c001f26d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f270:	e8 8d 11 ff ff       	call   c0010402 <createPartitionsForDisk(PhysicalDisk*)>
c001f275:	83 c4 14             	add    esp,0x14
c001f278:	31 c0                	xor    eax,eax
c001f27a:	5b                   	pop    ebx
c001f27b:	5e                   	pop    esi
c001f27c:	c3                   	ret    
c001f27d:	90                   	nop

c001f27e <SATA::SATA()>:
c001f27e:	83 ec 0c             	sub    esp,0xc
c001f281:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f285:	83 ec 04             	sub    esp,0x4
c001f288:	68 00 02 00 00       	push   0x200
c001f28d:	68 28 52 02 c0       	push   0xc0025228
c001f292:	50                   	push   eax
c001f293:	e8 c6 f0 fe ff       	call   c000e35e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f298:	83 c4 10             	add    esp,0x10
c001f29b:	ba 98 52 02 c0       	mov    edx,0xc0025298
c001f2a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2a4:	89 10                	mov    DWORD PTR [eax],edx
c001f2a6:	90                   	nop
c001f2a7:	83 c4 0c             	add    esp,0xc
c001f2aa:	c3                   	ret    
c001f2ab:	90                   	nop

c001f2ac <SATA::access(unsigned long long, int, void*, bool)>:
c001f2ac:	55                   	push   ebp
c001f2ad:	57                   	push   edi
c001f2ae:	56                   	push   esi
c001f2af:	53                   	push   ebx
c001f2b0:	83 ec 2c             	sub    esp,0x2c
c001f2b3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f2b7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001f2bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f2bf:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f2c3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001f2c7:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001f2cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f2d0:	7e 10                	jle    c001f2e2 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001f2d2:	83 ec 0c             	sub    esp,0xc
c001f2d5:	68 38 52 02 c0       	push   0xc0025238
c001f2da:	e8 c2 50 ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c001f2df:	83 c4 10             	add    esp,0x10
c001f2e2:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f2e8:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001f2ee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f2f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f2f8:	89 d0                	mov    eax,edx
c001f2fa:	c1 e0 07             	shl    eax,0x7
c001f2fd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f301:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001f30b:	51                   	push   ecx
c001f30c:	8d 42 02             	lea    eax,[edx+0x2]
c001f30f:	51                   	push   ecx
c001f310:	c1 e0 07             	shl    eax,0x7
c001f313:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001f317:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f31b:	50                   	push   eax
c001f31c:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001f322:	e8 9f ef ff ff       	call   c001e2c6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001f327:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f32b:	83 c4 10             	add    esp,0x10
c001f32e:	b8 01 00 00 00       	mov    eax,0x1
c001f333:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001f338:	0f 84 cb 01 00 00    	je     c001f509 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f33e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001f342:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f346:	c1 e0 09             	shl    eax,0x9
c001f349:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001f34e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f352:	74 0e                	je     c001f362 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c001f354:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001f35a:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001f35e:	89 c1                	mov    ecx,eax
c001f360:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f362:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f366:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001f36c:	8d 42 02             	lea    eax,[edx+0x2]
c001f36f:	c1 e0 07             	shl    eax,0x7
c001f372:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f376:	8b 00                	mov    eax,DWORD PTR [eax]
c001f378:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001f37e:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001f384:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f388:	c1 e1 05             	shl    ecx,0x5
c001f38b:	01 c8                	add    eax,ecx
c001f38d:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001f391:	83 e1 01             	and    ecx,0x1
c001f394:	89 ce                	mov    esi,ecx
c001f396:	8a 08                	mov    cl,BYTE PTR [eax]
c001f398:	c1 e6 06             	shl    esi,0x6
c001f39b:	83 e1 bf             	and    ecx,0xffffffbf
c001f39e:	09 f1                	or     ecx,esi
c001f3a0:	88 08                	mov    BYTE PTR [eax],cl
c001f3a2:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f3a4:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001f3aa:	81 c9 05 00 01 00    	or     ecx,0x10005
c001f3b0:	89 08                	mov    DWORD PTR [eax],ecx
c001f3b2:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001f3b8:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001f3be:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001f3c4:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001f3c7:	50                   	push   eax
c001f3c8:	68 90 00 00 00       	push   0x90
c001f3cd:	6a 00                	push   0x0
c001f3cf:	56                   	push   esi
c001f3d0:	e8 af 12 fe ff       	call   c0000684 <memset>
c001f3d5:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f3db:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001f3df:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001f3e5:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001f3e9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f3ed:	83 c4 10             	add    esp,0x10
c001f3f0:	48                   	dec    eax
c001f3f1:	25 ff ff 3f 00       	and    eax,0x3fffff
c001f3f6:	89 c1                	mov    ecx,eax
c001f3f8:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001f3fe:	25 00 00 c0 ff       	and    eax,0xffc00000
c001f403:	09 c8                	or     eax,ecx
c001f405:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001f40b:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f40e:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001f415:	66 25 00 7f          	and    ax,0x7f00
c001f419:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f41d:	66 0d 27 80          	or     ax,0x8027
c001f421:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001f426:	66 89 06             	mov    WORD PTR [esi],ax
c001f429:	19 c0                	sbb    eax,eax
c001f42b:	83 e0 f0             	and    eax,0xfffffff0
c001f42e:	83 c0 35             	add    eax,0x35
c001f431:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001f434:	89 e8                	mov    eax,ebp
c001f436:	c1 e8 10             	shr    eax,0x10
c001f439:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001f43c:	89 e8                	mov    eax,ebp
c001f43e:	c1 e8 18             	shr    eax,0x18
c001f441:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001f444:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001f448:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001f44b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f44f:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001f452:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001f456:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001f45a:	89 d6                	mov    esi,edx
c001f45c:	31 c0                	xor    eax,eax
c001f45e:	c1 e6 07             	shl    esi,0x7
c001f461:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001f465:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001f46b:	80 e1 88             	and    cl,0x88
c001f46e:	74 0a                	je     c001f47a <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c001f470:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f475:	74 0a                	je     c001f481 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c001f477:	40                   	inc    eax
c001f478:	eb eb                	jmp    c001f465 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c001f47a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f47f:	75 0a                	jne    c001f48b <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c001f481:	83 ec 0c             	sub    esp,0xc
c001f484:	68 71 52 02 c0       	push   0xc0025271
c001f489:	eb 56                	jmp    c001f4e1 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c001f48b:	b8 01 00 00 00       	mov    eax,0x1
c001f490:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001f494:	c1 e2 07             	shl    edx,0x7
c001f497:	d3 e0                	shl    eax,cl
c001f499:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001f49d:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001f4a3:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001f4a9:	85 c8                	test   eax,ecx
c001f4ab:	74 20                	je     c001f4cd <SATA::access(unsigned long long, int, void*, bool)+0x221>
c001f4ad:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001f4b3:	0f ba e1 1e          	bt     ecx,0x1e
c001f4b7:	73 ea                	jae    c001f4a3 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c001f4b9:	83 ec 0c             	sub    esp,0xc
c001f4bc:	68 7f 52 02 c0       	push   0xc002527f
c001f4c1:	e8 db 4e ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c001f4c6:	83 c4 10             	add    esp,0x10
c001f4c9:	31 c0                	xor    eax,eax
c001f4cb:	eb 3c                	jmp    c001f509 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f4cd:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001f4d3:	0f ba e0 1e          	bt     eax,0x1e
c001f4d7:	73 17                	jae    c001f4f0 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001f4d9:	83 ec 0c             	sub    esp,0xc
c001f4dc:	68 7f 52 02 c0       	push   0xc002527f
c001f4e1:	e8 bb 4e ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c001f4e6:	83 c4 10             	add    esp,0x10
c001f4e9:	b8 01 00 00 00       	mov    eax,0x1
c001f4ee:	eb 19                	jmp    c001f509 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f4f0:	31 c0                	xor    eax,eax
c001f4f2:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001f4f7:	75 10                	jne    c001f509 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f4f9:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001f4ff:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001f503:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f507:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f509:	83 c4 2c             	add    esp,0x2c
c001f50c:	5b                   	pop    ebx
c001f50d:	5e                   	pop    esi
c001f50e:	5f                   	pop    edi
c001f50f:	5d                   	pop    ebp
c001f510:	c3                   	ret    
c001f511:	90                   	nop

c001f512 <SATA::read(unsigned long long, int, void*)>:
c001f512:	57                   	push   edi
c001f513:	b8 04 00 00 00       	mov    eax,0x4
c001f518:	56                   	push   esi
c001f519:	53                   	push   ebx
c001f51a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f51e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f522:	8d 7a ff             	lea    edi,[edx-0x1]
c001f525:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f529:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f52d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f533:	77 25                	ja     c001f55a <SATA::read(unsigned long long, int, void*)+0x48>
c001f535:	b8 06 00 00 00       	mov    eax,0x6
c001f53a:	85 f6                	test   esi,esi
c001f53c:	74 1c                	je     c001f55a <SATA::read(unsigned long long, int, void*)+0x48>
c001f53e:	50                   	push   eax
c001f53f:	50                   	push   eax
c001f540:	6a 00                	push   0x0
c001f542:	56                   	push   esi
c001f543:	52                   	push   edx
c001f544:	53                   	push   ebx
c001f545:	51                   	push   ecx
c001f546:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f54a:	e8 5d fd ff ff       	call   c001f2ac <SATA::access(unsigned long long, int, void*, bool)>
c001f54f:	83 c4 20             	add    esp,0x20
c001f552:	85 c0                	test   eax,eax
c001f554:	0f 95 c0             	setne  al
c001f557:	0f b6 c0             	movzx  eax,al
c001f55a:	5b                   	pop    ebx
c001f55b:	5e                   	pop    esi
c001f55c:	5f                   	pop    edi
c001f55d:	c3                   	ret    

c001f55e <SATA::write(unsigned long long, int, void*)>:
c001f55e:	55                   	push   ebp
c001f55f:	b8 04 00 00 00       	mov    eax,0x4
c001f564:	57                   	push   edi
c001f565:	56                   	push   esi
c001f566:	53                   	push   ebx
c001f567:	83 ec 0c             	sub    esp,0xc
c001f56a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001f56e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f572:	8d 73 ff             	lea    esi,[ebx-0x1]
c001f575:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001f579:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f57d:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001f583:	77 3d                	ja     c001f5c2 <SATA::write(unsigned long long, int, void*)+0x64>
c001f585:	b8 06 00 00 00       	mov    eax,0x6
c001f58a:	85 ed                	test   ebp,ebp
c001f58c:	74 34                	je     c001f5c2 <SATA::write(unsigned long long, int, void*)+0x64>
c001f58e:	c1 e3 09             	shl    ebx,0x9
c001f591:	01 eb                	add    ebx,ebp
c001f593:	89 d6                	mov    esi,edx
c001f595:	89 cf                	mov    edi,ecx
c001f597:	83 c6 01             	add    esi,0x1
c001f59a:	83 d7 00             	adc    edi,0x0
c001f59d:	50                   	push   eax
c001f59e:	50                   	push   eax
c001f59f:	6a 01                	push   0x1
c001f5a1:	55                   	push   ebp
c001f5a2:	81 c5 00 02 00 00    	add    ebp,0x200
c001f5a8:	6a 01                	push   0x1
c001f5aa:	51                   	push   ecx
c001f5ab:	52                   	push   edx
c001f5ac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f5b0:	e8 f7 fc ff ff       	call   c001f2ac <SATA::access(unsigned long long, int, void*, bool)>
c001f5b5:	83 c4 20             	add    esp,0x20
c001f5b8:	89 f2                	mov    edx,esi
c001f5ba:	89 f9                	mov    ecx,edi
c001f5bc:	39 dd                	cmp    ebp,ebx
c001f5be:	75 d3                	jne    c001f593 <SATA::write(unsigned long long, int, void*)+0x35>
c001f5c0:	31 c0                	xor    eax,eax
c001f5c2:	83 c4 0c             	add    esp,0xc
c001f5c5:	5b                   	pop    ebx
c001f5c6:	5e                   	pop    esi
c001f5c7:	5f                   	pop    edi
c001f5c8:	5d                   	pop    ebp
c001f5c9:	c3                   	ret    

c001f5ca <SATAPI::write(unsigned long long, int, void*)>:
c001f5ca:	b8 03 00 00 00       	mov    eax,0x3
c001f5cf:	c3                   	ret    

c001f5d0 <SATAPI::close(int, int, void*)>:
c001f5d0:	83 ec 0c             	sub    esp,0xc
c001f5d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5d7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f5dd:	85 c0                	test   eax,eax
c001f5df:	74 0c                	je     c001f5ed <SATAPI::close(int, int, void*)+0x1d>
c001f5e1:	83 ec 0c             	sub    esp,0xc
c001f5e4:	8b 10                	mov    edx,DWORD PTR [eax]
c001f5e6:	50                   	push   eax
c001f5e7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f5ea:	83 c4 10             	add    esp,0x10
c001f5ed:	31 c0                	xor    eax,eax
c001f5ef:	83 c4 0c             	add    esp,0xc
c001f5f2:	c3                   	ret    
c001f5f3:	90                   	nop

c001f5f4 <SATAPI::SATAPI()>:
c001f5f4:	83 ec 0c             	sub    esp,0xc
c001f5f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5fb:	83 ec 04             	sub    esp,0x4
c001f5fe:	68 00 08 00 00       	push   0x800
c001f603:	68 c8 52 02 c0       	push   0xc00252c8
c001f608:	50                   	push   eax
c001f609:	e8 50 ed fe ff       	call   c000e35e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f60e:	83 c4 10             	add    esp,0x10
c001f611:	ba 74 53 02 c0       	mov    edx,0xc0025374
c001f616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f61a:	89 10                	mov    DWORD PTR [eax],edx
c001f61c:	90                   	nop
c001f61d:	83 c4 0c             	add    esp,0xc
c001f620:	c3                   	ret    
c001f621:	90                   	nop

c001f622 <SATAPI::diskRemoved()>:
c001f622:	83 ec 18             	sub    esp,0x18
c001f625:	68 d4 52 02 c0       	push   0xc00252d4
c001f62a:	e8 b0 d4 fe ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001f62f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f633:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c001f63a:	83 c4 1c             	add    esp,0x1c
c001f63d:	c3                   	ret    

c001f63e <SATAPI::diskInserted()>:
c001f63e:	53                   	push   ebx
c001f63f:	83 ec 14             	sub    esp,0x14
c001f642:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001f646:	68 eb 52 02 c0       	push   0xc00252eb
c001f64b:	e8 8f d4 fe ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001f650:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c001f657:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f65a:	e8 67 ed fe ff       	call   c000e3c6 <PhysicalDisk::startCache()>
c001f65f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001f663:	83 c4 18             	add    esp,0x18
c001f666:	5b                   	pop    ebx
c001f667:	e9 96 0d ff ff       	jmp    c0010402 <createPartitionsForDisk(PhysicalDisk*)>

c001f66c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001f66c:	55                   	push   ebp
c001f66d:	57                   	push   edi
c001f66e:	56                   	push   esi
c001f66f:	53                   	push   ebx
c001f670:	83 ec 34             	sub    esp,0x34
c001f673:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001f677:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001f67b:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001f67f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f683:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001f687:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001f68d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f693:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001f697:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001f69d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f6a1:	c1 e0 07             	shl    eax,0x7
c001f6a4:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f6a8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f6ac:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001f6b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f6ba:	8d 58 02             	lea    ebx,[eax+0x2]
c001f6bd:	c1 e3 07             	shl    ebx,0x7
c001f6c0:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001f6c4:	53                   	push   ebx
c001f6c5:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001f6cb:	e8 f6 eb ff ff       	call   c001e2c6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001f6d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f6d4:	83 c4 10             	add    esp,0x10
c001f6d7:	b8 01 00 00 00       	mov    eax,0x1
c001f6dc:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001f6e1:	0f 84 85 01 00 00    	je     c001f86c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c001f6e7:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001f6ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f6ef:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001f6f5:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001f6fb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f6ff:	c1 e1 05             	shl    ecx,0x5
c001f702:	01 c8                	add    eax,ecx
c001f704:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f706:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001f70c:	81 c9 25 00 01 00    	or     ecx,0x10025
c001f712:	89 08                	mov    DWORD PTR [eax],ecx
c001f714:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001f71a:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001f720:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001f726:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001f729:	8d 7b 40             	lea    edi,[ebx+0x40]
c001f72c:	50                   	push   eax
c001f72d:	68 90 00 00 00       	push   0x90
c001f732:	6a 00                	push   0x0
c001f734:	53                   	push   ebx
c001f735:	e8 4a 0f fe ff       	call   c0000684 <memset>
c001f73a:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001f73e:	b9 0c 00 00 00       	mov    ecx,0xc
c001f743:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f745:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c001f74b:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001f74f:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001f755:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001f759:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001f75d:	48                   	dec    eax
c001f75e:	25 ff ff 3f 00       	and    eax,0x3fffff
c001f763:	89 c1                	mov    ecx,eax
c001f765:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001f76b:	25 00 00 c0 ff       	and    eax,0xffc00000
c001f770:	09 c8                	or     eax,ecx
c001f772:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001f778:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001f77b:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001f782:	66 25 00 7f          	and    ax,0x7f00
c001f786:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001f78a:	66 0d 27 80          	or     ax,0x8027
c001f78e:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001f792:	66 89 03             	mov    WORD PTR [ebx],ax
c001f795:	89 d0                	mov    eax,edx
c001f797:	c1 ea 18             	shr    edx,0x18
c001f79a:	c1 e8 10             	shr    eax,0x10
c001f79d:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001f7a0:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001f7a3:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001f7a7:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001f7aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f7ae:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001f7b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f7b5:	83 c4 10             	add    esp,0x10
c001f7b8:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001f7bc:	31 c0                	xor    eax,eax
c001f7be:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f7c2:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c001f7c8:	80 e2 88             	and    dl,0x88
c001f7cb:	74 0a                	je     c001f7d7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001f7cd:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f7d2:	74 0a                	je     c001f7de <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c001f7d4:	40                   	inc    eax
c001f7d5:	eb eb                	jmp    c001f7c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c001f7d7:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f7dc:	75 0f                	jne    c001f7ed <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c001f7de:	83 ec 0c             	sub    esp,0xc
c001f7e1:	68 71 52 02 c0       	push   0xc0025271
c001f7e6:	e8 b6 4b ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c001f7eb:	eb 3f                	jmp    c001f82c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c001f7ed:	ba 01 00 00 00       	mov    edx,0x1
c001f7f2:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001f7f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7fa:	d3 e2                	shl    edx,cl
c001f7fc:	c1 e0 07             	shl    eax,0x7
c001f7ff:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c001f805:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f809:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c001f80f:	85 ca                	test   edx,ecx
c001f811:	74 23                	je     c001f836 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001f813:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c001f819:	0f ba e1 1e          	bt     ecx,0x1e
c001f81d:	73 ea                	jae    c001f809 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c001f81f:	83 ec 0c             	sub    esp,0xc
c001f822:	68 03 53 02 c0       	push   0xc0025303
c001f827:	e8 b3 d2 fe ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c001f82c:	83 c4 10             	add    esp,0x10
c001f82f:	b8 01 00 00 00       	mov    eax,0x1
c001f834:	eb 36                	jmp    c001f86c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c001f836:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001f83c:	0f ba e0 1e          	bt     eax,0x1e
c001f840:	73 0a                	jae    c001f84c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c001f842:	83 ec 0c             	sub    esp,0xc
c001f845:	68 16 53 02 c0       	push   0xc0025316
c001f84a:	eb db                	jmp    c001f827 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c001f84c:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001f851:	74 17                	je     c001f86a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c001f853:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001f858:	74 10                	je     c001f86a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c001f85a:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c001f860:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001f864:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001f868:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f86a:	31 c0                	xor    eax,eax
c001f86c:	83 c4 2c             	add    esp,0x2c
c001f86f:	5b                   	pop    ebx
c001f870:	5e                   	pop    esi
c001f871:	5f                   	pop    edi
c001f872:	5d                   	pop    ebp
c001f873:	c3                   	ret    

c001f874 <SATAPI::eject()>:
c001f874:	57                   	push   edi
c001f875:	b9 03 00 00 00       	mov    ecx,0x3
c001f87a:	53                   	push   ebx
c001f87b:	83 ec 14             	sub    esp,0x14
c001f87e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001f882:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f886:	fc                   	cld    
c001f887:	31 c0                	xor    eax,eax
c001f889:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f88b:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001f890:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001f895:	50                   	push   eax
c001f896:	6a 00                	push   0x0
c001f898:	6a 00                	push   0x0
c001f89a:	6a 00                	push   0x0
c001f89c:	6a 00                	push   0x0
c001f89e:	6a 02                	push   0x2
c001f8a0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f8a4:	50                   	push   eax
c001f8a5:	53                   	push   ebx
c001f8a6:	e8 c1 fd ff ff       	call   c001f66c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f8ab:	83 c4 14             	add    esp,0x14
c001f8ae:	53                   	push   ebx
c001f8af:	e8 6e fd ff ff       	call   c001f622 <SATAPI::diskRemoved()>
c001f8b4:	83 c4 24             	add    esp,0x24
c001f8b7:	31 c0                	xor    eax,eax
c001f8b9:	5b                   	pop    ebx
c001f8ba:	5f                   	pop    edi
c001f8bb:	c3                   	ret    

c001f8bc <SATAPI::detectMedia()>:
c001f8bc:	56                   	push   esi
c001f8bd:	53                   	push   ebx
c001f8be:	83 ec 28             	sub    esp,0x28
c001f8c1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f8c5:	6a 0c                	push   0xc
c001f8c7:	6a 00                	push   0x0
c001f8c9:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001f8cd:	56                   	push   esi
c001f8ce:	e8 b1 0d fe ff       	call   c0000684 <memset>
c001f8d3:	83 c4 0c             	add    esp,0xc
c001f8d6:	6a 00                	push   0x0
c001f8d8:	6a 00                	push   0x0
c001f8da:	6a 00                	push   0x0
c001f8dc:	6a 00                	push   0x0
c001f8de:	6a 00                	push   0x0
c001f8e0:	56                   	push   esi
c001f8e1:	53                   	push   ebx
c001f8e2:	e8 85 fd ff ff       	call   c001f66c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f8e7:	83 c4 1c             	add    esp,0x1c
c001f8ea:	6a 0c                	push   0xc
c001f8ec:	6a 00                	push   0x0
c001f8ee:	56                   	push   esi
c001f8ef:	e8 90 0d fe ff       	call   c0000684 <memset>
c001f8f4:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001f8f9:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001f8fe:	83 c4 0c             	add    esp,0xc
c001f901:	6a 01                	push   0x1
c001f903:	8d 44 24 16          	lea    eax,[esp+0x16]
c001f907:	50                   	push   eax
c001f908:	6a 00                	push   0x0
c001f90a:	6a 00                	push   0x0
c001f90c:	6a 12                	push   0x12
c001f90e:	56                   	push   esi
c001f90f:	53                   	push   ebx
c001f910:	e8 57 fd ff ff       	call   c001f66c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f915:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001f919:	83 c4 20             	add    esp,0x20
c001f91c:	83 e0 7f             	and    eax,0x7f
c001f91f:	3c 70                	cmp    al,0x70
c001f921:	74 15                	je     c001f938 <SATAPI::detectMedia()+0x7c>
c001f923:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f92a:	75 0c                	jne    c001f938 <SATAPI::detectMedia()+0x7c>
c001f92c:	83 ec 0c             	sub    esp,0xc
c001f92f:	53                   	push   ebx
c001f930:	e8 09 fd ff ff       	call   c001f63e <SATAPI::diskInserted()>
c001f935:	83 c4 10             	add    esp,0x10
c001f938:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f93c:	83 e0 0f             	and    eax,0xf
c001f93f:	3c 02                	cmp    al,0x2
c001f941:	75 1b                	jne    c001f95e <SATAPI::detectMedia()+0xa2>
c001f943:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001f948:	75 2d                	jne    c001f977 <SATAPI::detectMedia()+0xbb>
c001f94a:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f951:	74 24                	je     c001f977 <SATAPI::detectMedia()+0xbb>
c001f953:	83 ec 0c             	sub    esp,0xc
c001f956:	53                   	push   ebx
c001f957:	e8 c6 fc ff ff       	call   c001f622 <SATAPI::diskRemoved()>
c001f95c:	eb 16                	jmp    c001f974 <SATAPI::detectMedia()+0xb8>
c001f95e:	84 c0                	test   al,al
c001f960:	75 15                	jne    c001f977 <SATAPI::detectMedia()+0xbb>
c001f962:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f969:	75 0c                	jne    c001f977 <SATAPI::detectMedia()+0xbb>
c001f96b:	83 ec 0c             	sub    esp,0xc
c001f96e:	53                   	push   ebx
c001f96f:	e8 ca fc ff ff       	call   c001f63e <SATAPI::diskInserted()>
c001f974:	83 c4 10             	add    esp,0x10
c001f977:	83 c4 24             	add    esp,0x24
c001f97a:	5b                   	pop    ebx
c001f97b:	5e                   	pop    esi
c001f97c:	c3                   	ret    
c001f97d:	90                   	nop

c001f97e <SATAPI::open(int, int, void*)>:
c001f97e:	56                   	push   esi
c001f97f:	53                   	push   ebx
c001f980:	50                   	push   eax
c001f981:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f985:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f989:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f993:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f999:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f9a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f9a7:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001f9b1:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f9b7:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001f9be:	e8 36 a4 fe ff       	call   c0009df9 <Phys::allocatePage()>
c001f9c3:	89 c6                	mov    esi,eax
c001f9c5:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f9cb:	81 c6 00 10 00 00    	add    esi,0x1000
c001f9d1:	e8 23 a4 fe ff       	call   c0009df9 <Phys::allocatePage()>
c001f9d6:	39 c6                	cmp    esi,eax
c001f9d8:	74 10                	je     c001f9ea <SATAPI::open(int, int, void*)+0x6c>
c001f9da:	83 ec 0c             	sub    esp,0xc
c001f9dd:	68 2b 53 02 c0       	push   0xc002532b
c001f9e2:	e8 ba 49 ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c001f9e7:	83 c4 10             	add    esp,0x10
c001f9ea:	83 ec 0c             	sub    esp,0xc
c001f9ed:	6a 02                	push   0x2
c001f9ef:	e8 19 bd fe ff       	call   c000b70d <Virt::allocateKernelVirtualPages(int)>
c001f9f4:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001f9fa:	6a 03                	push   0x3
c001f9fc:	50                   	push   eax
c001f9fd:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c001fa03:	ff 35 b0 65 02 c0    	push   DWORD PTR ds:0xc00265b0
c001fa09:	e8 a6 c3 fe ff       	call   c000bdb4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001fa0e:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001fa15:	83 c4 14             	add    esp,0x14
c001fa18:	53                   	push   ebx
c001fa19:	e8 9e fe ff ff       	call   c001f8bc <SATAPI::detectMedia()>
c001fa1e:	83 c4 14             	add    esp,0x14
c001fa21:	31 c0                	xor    eax,eax
c001fa23:	5b                   	pop    ebx
c001fa24:	5e                   	pop    esi
c001fa25:	c3                   	ret    

c001fa26 <SATAPI::read(unsigned long long, int, void*)>:
c001fa26:	55                   	push   ebp
c001fa27:	57                   	push   edi
c001fa28:	56                   	push   esi
c001fa29:	53                   	push   ebx
c001fa2a:	83 ec 1c             	sub    esp,0x1c
c001fa2d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001fa31:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fa35:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001fa39:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c001fa40:	74 19                	je     c001fa5b <SATAPI::read(unsigned long long, int, void*)+0x35>
c001fa42:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c001fa47:	7e 2e                	jle    c001fa77 <SATAPI::read(unsigned long long, int, void*)+0x51>
c001fa49:	83 ec 0c             	sub    esp,0xc
c001fa4c:	68 41 53 02 c0       	push   0xc0025341
c001fa51:	e8 4b 49 ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c001fa56:	83 c4 10             	add    esp,0x10
c001fa59:	eb 1c                	jmp    c001fa77 <SATAPI::read(unsigned long long, int, void*)+0x51>
c001fa5b:	83 ec 0c             	sub    esp,0xc
c001fa5e:	55                   	push   ebp
c001fa5f:	e8 58 fe ff ff       	call   c001f8bc <SATAPI::detectMedia()>
c001fa64:	83 c4 10             	add    esp,0x10
c001fa67:	b8 02 00 00 00       	mov    eax,0x2
c001fa6c:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c001fa73:	75 cd                	jne    c001fa42 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c001fa75:	eb 49                	jmp    c001fac0 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c001fa77:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001fa7b:	b9 03 00 00 00       	mov    ecx,0x3
c001fa80:	fc                   	cld    
c001fa81:	31 c0                	xor    eax,eax
c001fa83:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fa85:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001fa8a:	89 d8                	mov    eax,ebx
c001fa8c:	86 e0                	xchg   al,ah
c001fa8e:	c1 c0 10             	rol    eax,0x10
c001fa91:	86 e0                	xchg   al,ah
c001fa93:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c001fa97:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001fa9b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001fa9f:	50                   	push   eax
c001faa0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001faa4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001faa8:	56                   	push   esi
c001faa9:	53                   	push   ebx
c001faaa:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001faae:	c1 e0 0b             	shl    eax,0xb
c001fab1:	50                   	push   eax
c001fab2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fab6:	50                   	push   eax
c001fab7:	55                   	push   ebp
c001fab8:	e8 af fb ff ff       	call   c001f66c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001fabd:	83 c4 20             	add    esp,0x20
c001fac0:	83 c4 1c             	add    esp,0x1c
c001fac3:	5b                   	pop    ebx
c001fac4:	5e                   	pop    esi
c001fac5:	5f                   	pop    edi
c001fac6:	5d                   	pop    ebp
c001fac7:	c3                   	ret    

c001fac8 <AVX::open(int, int, void*)>:
c001fac8:	83 ec 0c             	sub    esp,0xc
c001facb:	e8 38 11 00 00       	call   c0020c08 <avxInit>
c001fad0:	b8 00 00 00 00       	mov    eax,0x0
c001fad5:	83 c4 0c             	add    esp,0xc
c001fad8:	c3                   	ret    
c001fad9:	90                   	nop
c001fada:	66 90                	xchg   ax,ax

c001fadc <AVX::close(int, int, void*)>:
c001fadc:	83 ec 0c             	sub    esp,0xc
c001fadf:	e8 25 11 00 00       	call   c0020c09 <avxClose>
c001fae4:	b8 00 00 00 00       	mov    eax,0x0
c001fae9:	83 c4 0c             	add    esp,0xc
c001faec:	c3                   	ret    
c001faed:	90                   	nop
c001faee:	66 90                	xchg   ax,ax

c001faf0 <AVX::available()>:
c001faf0:	83 ec 0c             	sub    esp,0xc
c001faf3:	e8 08 11 00 00       	call   c0020c00 <avxDetect>
c001faf8:	85 c0                	test   eax,eax
c001fafa:	0f 95 c0             	setne  al
c001fafd:	83 c4 0c             	add    esp,0xc
c001fb00:	c3                   	ret    
c001fb01:	90                   	nop
c001fb02:	66 90                	xchg   ax,ax

c001fb04 <AVX::save(void*)>:
c001fb04:	83 ec 0c             	sub    esp,0xc
c001fb07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fb0b:	83 ec 0c             	sub    esp,0xc
c001fb0e:	50                   	push   eax
c001fb0f:	e8 f2 10 00 00       	call   c0020c06 <avxSave>
c001fb14:	83 c4 10             	add    esp,0x10
c001fb17:	90                   	nop
c001fb18:	83 c4 0c             	add    esp,0xc
c001fb1b:	c3                   	ret    

c001fb1c <AVX::load(void*)>:
c001fb1c:	83 ec 0c             	sub    esp,0xc
c001fb1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fb23:	83 ec 0c             	sub    esp,0xc
c001fb26:	50                   	push   eax
c001fb27:	e8 db 10 00 00       	call   c0020c07 <avxLoad>
c001fb2c:	83 c4 10             	add    esp,0x10
c001fb2f:	90                   	nop
c001fb30:	83 c4 0c             	add    esp,0xc
c001fb33:	c3                   	ret    

c001fb34 <AVX::AVX()>:
c001fb34:	83 ec 0c             	sub    esp,0xc
c001fb37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb3b:	83 ec 08             	sub    esp,0x8
c001fb3e:	68 a4 53 02 c0       	push   0xc00253a4
c001fb43:	50                   	push   eax
c001fb44:	e8 f3 e8 fe ff       	call   c000e43c <FPU::FPU(char const*)>
c001fb49:	83 c4 10             	add    esp,0x10
c001fb4c:	ba b4 53 02 c0       	mov    edx,0xc00253b4
c001fb51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb55:	89 10                	mov    DWORD PTR [eax],edx
c001fb57:	90                   	nop
c001fb58:	83 c4 0c             	add    esp,0xc
c001fb5b:	c3                   	ret    

c001fb5c <MMX::available()>:
c001fb5c:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c001fb61:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001fb67:	83 e0 20             	and    eax,0x20
c001fb6a:	84 c0                	test   al,al
c001fb6c:	0f 95 c0             	setne  al
c001fb6f:	c3                   	ret    

c001fb70 <MMX::open(int, int, void*)>:
c001fb70:	83 ec 0c             	sub    esp,0xc
c001fb73:	e8 1a 11 00 00       	call   c0020c92 <x87Init>
c001fb78:	b8 00 00 00 00       	mov    eax,0x0
c001fb7d:	83 c4 0c             	add    esp,0xc
c001fb80:	c3                   	ret    
c001fb81:	90                   	nop
c001fb82:	66 90                	xchg   ax,ax

c001fb84 <MMX::close(int, int, void*)>:
c001fb84:	83 ec 0c             	sub    esp,0xc
c001fb87:	e8 20 11 00 00       	call   c0020cac <x87Close>
c001fb8c:	b8 00 00 00 00       	mov    eax,0x0
c001fb91:	83 c4 0c             	add    esp,0xc
c001fb94:	c3                   	ret    
c001fb95:	90                   	nop
c001fb96:	66 90                	xchg   ax,ax

c001fb98 <MMX::save(void*)>:
c001fb98:	83 ec 0c             	sub    esp,0xc
c001fb9b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fb9f:	83 ec 0c             	sub    esp,0xc
c001fba2:	50                   	push   eax
c001fba3:	e8 d9 10 00 00       	call   c0020c81 <x87Save>
c001fba8:	83 c4 10             	add    esp,0x10
c001fbab:	90                   	nop
c001fbac:	83 c4 0c             	add    esp,0xc
c001fbaf:	c3                   	ret    

c001fbb0 <MMX::load(void*)>:
c001fbb0:	83 ec 0c             	sub    esp,0xc
c001fbb3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fbb7:	83 ec 0c             	sub    esp,0xc
c001fbba:	50                   	push   eax
c001fbbb:	e8 ca 10 00 00       	call   c0020c8a <x87Load>
c001fbc0:	83 c4 10             	add    esp,0x10
c001fbc3:	90                   	nop
c001fbc4:	83 c4 0c             	add    esp,0xc
c001fbc7:	c3                   	ret    

c001fbc8 <MMX::MMX()>:
c001fbc8:	83 ec 0c             	sub    esp,0xc
c001fbcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbcf:	83 ec 08             	sub    esp,0x8
c001fbd2:	68 e4 53 02 c0       	push   0xc00253e4
c001fbd7:	50                   	push   eax
c001fbd8:	e8 5f e8 fe ff       	call   c000e43c <FPU::FPU(char const*)>
c001fbdd:	83 c4 10             	add    esp,0x10
c001fbe0:	ba f4 53 02 c0       	mov    edx,0xc00253f4
c001fbe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbe9:	89 10                	mov    DWORD PTR [eax],edx
c001fbeb:	90                   	nop
c001fbec:	83 c4 0c             	add    esp,0xc
c001fbef:	c3                   	ret    

c001fbf0 <SSE::open(int, int, void*)>:
c001fbf0:	83 ec 0c             	sub    esp,0xc
c001fbf3:	e8 4c 10 00 00       	call   c0020c44 <sseInit>
c001fbf8:	b8 00 00 00 00       	mov    eax,0x0
c001fbfd:	83 c4 0c             	add    esp,0xc
c001fc00:	c3                   	ret    
c001fc01:	90                   	nop
c001fc02:	66 90                	xchg   ax,ax

c001fc04 <SSE::close(int, int, void*)>:
c001fc04:	83 ec 0c             	sub    esp,0xc
c001fc07:	e8 48 10 00 00       	call   c0020c54 <sseClose>
c001fc0c:	b8 00 00 00 00       	mov    eax,0x0
c001fc11:	83 c4 0c             	add    esp,0xc
c001fc14:	c3                   	ret    
c001fc15:	90                   	nop
c001fc16:	66 90                	xchg   ax,ax

c001fc18 <SSE::available()>:
c001fc18:	83 ec 1c             	sub    esp,0x1c
c001fc1b:	e8 00 10 00 00       	call   c0020c20 <absolutelyNoChanceInHell>
c001fc20:	85 c0                	test   eax,eax
c001fc22:	0f 95 c0             	setne  al
c001fc25:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001fc29:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001fc2d:	83 c4 1c             	add    esp,0x1c
c001fc30:	c3                   	ret    
c001fc31:	90                   	nop
c001fc32:	66 90                	xchg   ax,ax

c001fc34 <SSE::save(void*)>:
c001fc34:	83 ec 0c             	sub    esp,0xc
c001fc37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fc3b:	83 ec 0c             	sub    esp,0xc
c001fc3e:	50                   	push   eax
c001fc3f:	e8 f4 0f 00 00       	call   c0020c38 <sseSave>
c001fc44:	83 c4 10             	add    esp,0x10
c001fc47:	90                   	nop
c001fc48:	83 c4 0c             	add    esp,0xc
c001fc4b:	c3                   	ret    

c001fc4c <SSE::load(void*)>:
c001fc4c:	83 ec 0c             	sub    esp,0xc
c001fc4f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fc53:	83 ec 0c             	sub    esp,0xc
c001fc56:	50                   	push   eax
c001fc57:	e8 e2 0f 00 00       	call   c0020c3e <sseLoad>
c001fc5c:	83 c4 10             	add    esp,0x10
c001fc5f:	90                   	nop
c001fc60:	83 c4 0c             	add    esp,0xc
c001fc63:	c3                   	ret    

c001fc64 <SSE::SSE()>:
c001fc64:	83 ec 0c             	sub    esp,0xc
c001fc67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc6b:	83 ec 08             	sub    esp,0x8
c001fc6e:	68 24 54 02 c0       	push   0xc0025424
c001fc73:	50                   	push   eax
c001fc74:	e8 c3 e7 fe ff       	call   c000e43c <FPU::FPU(char const*)>
c001fc79:	83 c4 10             	add    esp,0x10
c001fc7c:	ba 34 54 02 c0       	mov    edx,0xc0025434
c001fc81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc85:	89 10                	mov    DWORD PTR [eax],edx
c001fc87:	90                   	nop
c001fc88:	83 c4 0c             	add    esp,0xc
c001fc8b:	c3                   	ret    

c001fc8c <x87::open(int, int, void*)>:
c001fc8c:	83 ec 0c             	sub    esp,0xc
c001fc8f:	e8 fe 0f 00 00       	call   c0020c92 <x87Init>
c001fc94:	b8 00 00 00 00       	mov    eax,0x0
c001fc99:	83 c4 0c             	add    esp,0xc
c001fc9c:	c3                   	ret    
c001fc9d:	90                   	nop
c001fc9e:	66 90                	xchg   ax,ax

c001fca0 <x87::close(int, int, void*)>:
c001fca0:	83 ec 0c             	sub    esp,0xc
c001fca3:	e8 04 10 00 00       	call   c0020cac <x87Close>
c001fca8:	b8 00 00 00 00       	mov    eax,0x0
c001fcad:	83 c4 0c             	add    esp,0xc
c001fcb0:	c3                   	ret    
c001fcb1:	90                   	nop
c001fcb2:	66 90                	xchg   ax,ax

c001fcb4 <x87::available()>:
c001fcb4:	83 ec 0c             	sub    esp,0xc
c001fcb7:	e8 aa 0f 00 00       	call   c0020c66 <x87Detect>
c001fcbc:	85 c0                	test   eax,eax
c001fcbe:	0f 95 c0             	setne  al
c001fcc1:	83 c4 0c             	add    esp,0xc
c001fcc4:	c3                   	ret    
c001fcc5:	90                   	nop
c001fcc6:	66 90                	xchg   ax,ax

c001fcc8 <x87::save(void*)>:
c001fcc8:	83 ec 0c             	sub    esp,0xc
c001fccb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fccf:	83 ec 0c             	sub    esp,0xc
c001fcd2:	50                   	push   eax
c001fcd3:	e8 a9 0f 00 00       	call   c0020c81 <x87Save>
c001fcd8:	83 c4 10             	add    esp,0x10
c001fcdb:	90                   	nop
c001fcdc:	83 c4 0c             	add    esp,0xc
c001fcdf:	c3                   	ret    

c001fce0 <x87::load(void*)>:
c001fce0:	83 ec 0c             	sub    esp,0xc
c001fce3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fce7:	83 ec 0c             	sub    esp,0xc
c001fcea:	50                   	push   eax
c001fceb:	e8 9a 0f 00 00       	call   c0020c8a <x87Load>
c001fcf0:	83 c4 10             	add    esp,0x10
c001fcf3:	90                   	nop
c001fcf4:	83 c4 0c             	add    esp,0xc
c001fcf7:	c3                   	ret    

c001fcf8 <x87::x87()>:
c001fcf8:	83 ec 0c             	sub    esp,0xc
c001fcfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcff:	83 ec 08             	sub    esp,0x8
c001fd02:	68 64 54 02 c0       	push   0xc0025464
c001fd07:	50                   	push   eax
c001fd08:	e8 2f e7 fe ff       	call   c000e43c <FPU::FPU(char const*)>
c001fd0d:	83 c4 10             	add    esp,0x10
c001fd10:	ba 74 54 02 c0       	mov    edx,0xc0025474
c001fd15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd19:	89 10                	mov    DWORD PTR [eax],edx
c001fd1b:	90                   	nop
c001fd1c:	83 c4 0c             	add    esp,0xc
c001fd1f:	c3                   	ret    

c001fd20 <APIC::disable()>:
c001fd20:	90                   	nop
c001fd21:	c3                   	ret    

c001fd22 <APIC::close(int, int, void*)>:
c001fd22:	55                   	push   ebp
c001fd23:	89 e5                	mov    ebp,esp
c001fd25:	83 ec 08             	sub    esp,0x8
c001fd28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fd2b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd2d:	83 c0 3c             	add    eax,0x3c
c001fd30:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd32:	83 ec 0c             	sub    esp,0xc
c001fd35:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fd38:	ff d0                	call   eax
c001fd3a:	83 c4 10             	add    esp,0x10
c001fd3d:	b8 00 00 00 00       	mov    eax,0x0
c001fd42:	c9                   	leave  
c001fd43:	c3                   	ret    

c001fd44 <IOAPIC::close(int, int, void*)>:
c001fd44:	b8 00 00 00 00       	mov    eax,0x0
c001fd49:	c3                   	ret    

c001fd4a <APIC::io_wait()>:
c001fd4a:	eb 00                	jmp    c001fd4c <APIC::io_wait()+0x2>
c001fd4c:	eb 00                	jmp    c001fd4e <APIC::io_wait()+0x4>
c001fd4e:	90                   	nop
c001fd4f:	c3                   	ret    

c001fd50 <APIC::getBase()>:
c001fd50:	55                   	push   ebp
c001fd51:	89 e5                	mov    ebp,esp
c001fd53:	83 ec 18             	sub    esp,0x18
c001fd56:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c001fd5b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001fd61:	83 e0 08             	and    eax,0x8
c001fd64:	84 c0                	test   al,al
c001fd66:	75 07                	jne    c001fd6f <APIC::getBase()+0x1f>
c001fd68:	b8 00 00 00 00       	mov    eax,0x0
c001fd6d:	eb 21                	jmp    c001fd90 <APIC::getBase()+0x40>
c001fd6f:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c001fd74:	83 ec 08             	sub    esp,0x8
c001fd77:	6a 1b                	push   0x1b
c001fd79:	50                   	push   eax
c001fd7a:	e8 a5 91 fe ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c001fd7f:	83 c4 10             	add    esp,0x10
c001fd82:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001fd85:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001fd88:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001fd8b:	25 00 f0 ff ff       	and    eax,0xfffff000
c001fd90:	c9                   	leave  
c001fd91:	c3                   	ret    

c001fd92 <APIC::eoi(unsigned char)>:
c001fd92:	55                   	push   ebp
c001fd93:	89 e5                	mov    ebp,esp
c001fd95:	83 ec 28             	sub    esp,0x28
c001fd98:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001fd9b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001fd9e:	83 ec 0c             	sub    esp,0xc
c001fda1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fda4:	e8 a7 ff ff ff       	call   c001fd50 <APIC::getBase()>
c001fda9:	83 c4 10             	add    esp,0x10
c001fdac:	05 b0 00 00 00       	add    eax,0xb0
c001fdb1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001fdb4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001fdb7:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001fdbd:	90                   	nop
c001fdbe:	c9                   	leave  
c001fdbf:	c3                   	ret    

c001fdc0 <APIC::open(int, int, void*)>:
c001fdc0:	55                   	push   ebp
c001fdc1:	89 e5                	mov    ebp,esp
c001fdc3:	57                   	push   edi
c001fdc4:	56                   	push   esi
c001fdc5:	53                   	push   ebx
c001fdc6:	83 ec 2c             	sub    esp,0x2c
c001fdc9:	83 ec 0c             	sub    esp,0xc
c001fdcc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fdcf:	e8 7c ff ff ff       	call   c001fd50 <APIC::getBase()>
c001fdd4:	83 c4 10             	add    esp,0x10
c001fdd7:	89 c2                	mov    edx,eax
c001fdd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fddc:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001fde2:	0f b6 f8             	movzx  edi,al
c001fde5:	89 d0                	mov    eax,edx
c001fde7:	ba 00 00 00 00       	mov    edx,0x0
c001fdec:	89 c1                	mov    ecx,eax
c001fdee:	80 e5 ff             	and    ch,0xff
c001fdf1:	89 cb                	mov    ebx,ecx
c001fdf3:	0f b6 f2             	movzx  esi,dl
c001fdf6:	89 d8                	mov    eax,ebx
c001fdf8:	89 f2                	mov    edx,esi
c001fdfa:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001fdfd:	8d 5f 08             	lea    ebx,[edi+0x8]
c001fe00:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001fe04:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001fe08:	83 e0 00             	and    eax,0x0
c001fe0b:	09 d0                	or     eax,edx
c001fe0d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001fe11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fe14:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001fe1a:	8d 50 01             	lea    edx,[eax+0x1]
c001fe1d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001fe20:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001fe26:	0f b6 d0             	movzx  edx,al
c001fe29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fe2c:	83 c2 08             	add    edx,0x8
c001fe2f:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001fe33:	0f b6 c9             	movzx  ecx,cl
c001fe36:	81 c9 00 00 01 00    	or     ecx,0x10000
c001fe3c:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001fe40:	83 ec 0c             	sub    esp,0xc
c001fe43:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fe46:	e8 05 ff ff ff       	call   c001fd50 <APIC::getBase()>
c001fe4b:	83 c4 10             	add    esp,0x10
c001fe4e:	05 f0 00 00 00       	add    eax,0xf0
c001fe53:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001fe56:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001fe59:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe5b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001fe5e:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c001fe65:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c001fe6c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001fe6f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001fe72:	89 10                	mov    DWORD PTR [eax],edx
c001fe74:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c001fe7b:	a1 f0 6c 02 c0       	mov    eax,ds:0xc0026cf0
c001fe80:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c001fe83:	7d 7c                	jge    c001ff01 <APIC::open(int, int, void*)+0x141>
c001fe85:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fe88:	8b 04 85 00 6d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9300]
c001fe8f:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c001fe92:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fe95:	8b 04 85 00 6d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9300]
c001fe9c:	c1 e8 08             	shr    eax,0x8
c001fe9f:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c001fea3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fea6:	8b 04 85 00 6d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9300]
c001fead:	c1 e8 18             	shr    eax,0x18
c001feb0:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c001feb3:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c001feb7:	75 40                	jne    c001fef9 <APIC::open(int, int, void*)+0x139>
c001feb9:	83 ec 0c             	sub    esp,0xc
c001febc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001febf:	e8 8c fe ff ff       	call   c001fd50 <APIC::getBase()>
c001fec4:	83 c4 10             	add    esp,0x10
c001fec7:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c001fecb:	75 07                	jne    c001fed4 <APIC::open(int, int, void*)+0x114>
c001fecd:	ba 60 03 00 00       	mov    edx,0x360
c001fed2:	eb 05                	jmp    c001fed9 <APIC::open(int, int, void*)+0x119>
c001fed4:	ba 50 03 00 00       	mov    edx,0x350
c001fed9:	01 d0                	add    eax,edx
c001fedb:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001fede:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001fee1:	8b 00                	mov    eax,DWORD PTR [eax]
c001fee3:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c001fee6:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c001feed:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c001fef1:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001fef4:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001fef7:	89 10                	mov    DWORD PTR [eax],edx
c001fef9:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c001fefc:	e9 7a ff ff ff       	jmp    c001fe7b <APIC::open(int, int, void*)+0xbb>
c001ff01:	b8 00 00 00 00       	mov    eax,0x0
c001ff06:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ff09:	5b                   	pop    ebx
c001ff0a:	5e                   	pop    esi
c001ff0b:	5f                   	pop    edi
c001ff0c:	5d                   	pop    ebp
c001ff0d:	c3                   	ret    

c001ff0e <IOAPIC::IOAPIC()>:
c001ff0e:	83 ec 0c             	sub    esp,0xc
c001ff11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff15:	83 ec 08             	sub    esp,0x8
c001ff18:	68 a4 54 02 c0       	push   0xc00254a4
c001ff1d:	50                   	push   eax
c001ff1e:	e8 07 e2 fe ff       	call   c000e12a <Device::Device(char const*)>
c001ff23:	83 c4 10             	add    esp,0x10
c001ff26:	ba cc 55 02 c0       	mov    edx,0xc00255cc
c001ff2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff2f:	89 10                	mov    DWORD PTR [eax],edx
c001ff31:	90                   	nop
c001ff32:	83 c4 0c             	add    esp,0xc
c001ff35:	c3                   	ret    

c001ff36 <APIC::APIC()>:
c001ff36:	53                   	push   ebx
c001ff37:	83 ec 18             	sub    esp,0x18
c001ff3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ff3e:	83 ec 08             	sub    esp,0x8
c001ff41:	68 ac 54 02 c0       	push   0xc00254ac
c001ff46:	50                   	push   eax
c001ff47:	e8 56 e9 fe ff       	call   c000e8a2 <InterruptController::InterruptController(char const*)>
c001ff4c:	83 c4 10             	add    esp,0x10
c001ff4f:	ba 84 55 02 c0       	mov    edx,0xc0025584
c001ff54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ff58:	89 10                	mov    DWORD PTR [eax],edx
c001ff5a:	a0 c0 83 02 c0       	mov    al,ds:0xc00283c0
c001ff5f:	83 f0 01             	xor    eax,0x1
c001ff62:	84 c0                	test   al,al
c001ff64:	0f 84 a1 00 00 00    	je     c002000b <APIC::APIC()+0xd5>
c001ff6a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ff6f:	a0 a0 6d 02 c0       	mov    al,ds:0xc0026da0
c001ff74:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001ff78:	0f 83 86 00 00 00    	jae    c0020004 <APIC::APIC()+0xce>
c001ff7e:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c001ff86:	83 ec 0c             	sub    esp,0xc
c001ff89:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ff8d:	e8 31 9a fe ff       	call   c00099c3 <malloc>
c001ff92:	83 c4 10             	add    esp,0x10
c001ff95:	89 c3                	mov    ebx,eax
c001ff97:	83 ec 0c             	sub    esp,0xc
c001ff9a:	53                   	push   ebx
c001ff9b:	e8 6e ff ff ff       	call   c001ff0e <IOAPIC::IOAPIC()>
c001ffa0:	83 c4 10             	add    esp,0x10
c001ffa3:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001ffa7:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001ffac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ffb0:	89 14 85 a0 83 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7c60],edx
c001ffb7:	a1 80 83 02 c0       	mov    eax,ds:0xc0028380
c001ffbc:	40                   	inc    eax
c001ffbd:	a3 80 83 02 c0       	mov    ds:0xc0028380,eax
c001ffc2:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c001ffc7:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001ffcd:	83 ec 08             	sub    esp,0x8
c001ffd0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ffd4:	50                   	push   eax
c001ffd5:	e8 4c df fe ff       	call   c000df26 <Device::addChild(Device*)>
c001ffda:	83 c4 10             	add    esp,0x10
c001ffdd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ffe1:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffe3:	83 c0 08             	add    eax,0x8
c001ffe6:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffe8:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001ffed:	6a 00                	push   0x0
c001ffef:	6a 00                	push   0x0
c001fff1:	52                   	push   edx
c001fff2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fff6:	ff d0                	call   eax
c001fff8:	83 c4 10             	add    esp,0x10
c001fffb:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001ffff:	e9 6b ff ff ff       	jmp    c001ff6f <APIC::APIC()+0x39>
c0020004:	c6 05 c0 83 02 c0 01 	mov    BYTE PTR ds:0xc00283c0,0x1
c002000b:	90                   	nop
c002000c:	83 c4 18             	add    esp,0x18
c002000f:	5b                   	pop    ebx
c0020010:	c3                   	ret    
c0020011:	90                   	nop

c0020012 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0020012:	55                   	push   ebp
c0020013:	89 e5                	mov    ebp,esp
c0020015:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020018:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002001e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0020021:	72 1d                	jb     c0020040 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0020023:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020026:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002002c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002002f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0020035:	01 d0                	add    eax,edx
c0020037:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002003a:	73 04                	jae    c0020040 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002003c:	b0 01                	mov    al,0x1
c002003e:	eb 02                	jmp    c0020042 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0020040:	b0 00                	mov    al,0x0
c0020042:	5d                   	pop    ebp
c0020043:	c3                   	ret    

c0020044 <IOAPIC::read(int)>:
c0020044:	55                   	push   ebp
c0020045:	89 e5                	mov    ebp,esp
c0020047:	83 ec 10             	sub    esp,0x10
c002004a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002004d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020053:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020056:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020059:	0f b6 d0             	movzx  edx,al
c002005c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002005f:	89 10                	mov    DWORD PTR [eax],edx
c0020061:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020064:	83 c0 10             	add    eax,0x10
c0020067:	8b 00                	mov    eax,DWORD PTR [eax]
c0020069:	c9                   	leave  
c002006a:	c3                   	ret    
c002006b:	90                   	nop

c002006c <IOAPIC::open(int, int, void*)>:
c002006c:	55                   	push   ebp
c002006d:	89 e5                	mov    ebp,esp
c002006f:	57                   	push   edi
c0020070:	56                   	push   esi
c0020071:	53                   	push   ebx
c0020072:	83 ec 0c             	sub    esp,0xc
c0020075:	83 ec 0c             	sub    esp,0xc
c0020078:	68 d7 54 02 c0       	push   0xc00254d7
c002007d:	e8 5d ca fe ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c0020082:	83 c4 10             	add    esp,0x10
c0020085:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020088:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002008b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020091:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020094:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002009a:	8b 14 85 e0 6d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9220]
c00200a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200a4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00200aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200ad:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00200b3:	8b 14 85 60 6e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd91a0]
c00200ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200bd:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00200c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200c6:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00200cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200cf:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00200d5:	0f b6 f8             	movzx  edi,al
c00200d8:	89 d0                	mov    eax,edx
c00200da:	ba 00 00 00 00       	mov    edx,0x0
c00200df:	89 c1                	mov    ecx,eax
c00200e1:	80 e5 ff             	and    ch,0xff
c00200e4:	89 cb                	mov    ebx,ecx
c00200e6:	0f b6 f2             	movzx  esi,dl
c00200e9:	89 d8                	mov    eax,ebx
c00200eb:	89 f2                	mov    edx,esi
c00200ed:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00200f0:	8d 5f 08             	lea    ebx,[edi+0x8]
c00200f3:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00200f7:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00200fb:	83 e0 00             	and    eax,0x0
c00200fe:	09 d0                	or     eax,edx
c0020100:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0020104:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020107:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002010d:	8d 50 01             	lea    edx,[eax+0x1]
c0020110:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020113:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0020119:	0f b6 d0             	movzx  edx,al
c002011c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002011f:	83 c2 08             	add    edx,0x8
c0020122:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0020126:	0f b6 c9             	movzx  ecx,cl
c0020129:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002012f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0020133:	83 ec 08             	sub    esp,0x8
c0020136:	6a 01                	push   0x1
c0020138:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002013b:	e8 04 ff ff ff       	call   c0020044 <IOAPIC::read(int)>
c0020140:	83 c4 10             	add    esp,0x10
c0020143:	c1 f8 10             	sar    eax,0x10
c0020146:	0f b6 c0             	movzx  eax,al
c0020149:	8d 50 01             	lea    edx,[eax+0x1]
c002014c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002014f:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0020155:	b8 00 00 00 00       	mov    eax,0x0
c002015a:	8d 65 f4             	lea    esp,[ebp-0xc]
c002015d:	5b                   	pop    ebx
c002015e:	5e                   	pop    esi
c002015f:	5f                   	pop    edi
c0020160:	5d                   	pop    ebp
c0020161:	c3                   	ret    

c0020162 <IOAPIC::write(int, int)>:
c0020162:	55                   	push   ebp
c0020163:	89 e5                	mov    ebp,esp
c0020165:	83 ec 10             	sub    esp,0x10
c0020168:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002016b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020171:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020174:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020177:	0f b6 d0             	movzx  edx,al
c002017a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002017d:	89 10                	mov    DWORD PTR [eax],edx
c002017f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020182:	8d 50 10             	lea    edx,[eax+0x10]
c0020185:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0020188:	89 02                	mov    DWORD PTR [edx],eax
c002018a:	90                   	nop
c002018b:	c9                   	leave  
c002018c:	c3                   	ret    
c002018d:	90                   	nop

c002018e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002018e:	55                   	push   ebp
c002018f:	89 e5                	mov    ebp,esp
c0020191:	53                   	push   ebx
c0020192:	83 ec 2c             	sub    esp,0x2c
c0020195:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020198:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002019b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002019e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00201a1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00201a4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00201a7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00201aa:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00201ad:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00201b0:	88 d8                	mov    al,bl
c00201b2:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00201b5:	88 c8                	mov    al,cl
c00201b7:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00201ba:	88 d0                	mov    al,dl
c00201bc:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00201bf:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00201c3:	83 c0 08             	add    eax,0x8
c00201c6:	01 c0                	add    eax,eax
c00201c8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00201cb:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00201cf:	83 c0 08             	add    eax,0x8
c00201d2:	01 c0                	add    eax,eax
c00201d4:	40                   	inc    eax
c00201d5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00201d8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00201db:	50                   	push   eax
c00201dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00201df:	e8 60 fe ff ff       	call   c0020044 <IOAPIC::read(int)>
c00201e4:	83 c4 08             	add    esp,0x8
c00201e7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00201ea:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00201f1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00201f4:	c1 e0 18             	shl    eax,0x18
c00201f7:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00201fa:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00201fd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020200:	52                   	push   edx
c0020201:	50                   	push   eax
c0020202:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020205:	e8 58 ff ff ff       	call   c0020162 <IOAPIC::write(int, int)>
c002020a:	83 c4 0c             	add    esp,0xc
c002020d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020210:	50                   	push   eax
c0020211:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020214:	e8 2b fe ff ff       	call   c0020044 <IOAPIC::read(int)>
c0020219:	83 c4 08             	add    esp,0x8
c002021c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002021f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0020226:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002022d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0020234:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0020238:	74 09                	je     c0020243 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c002023a:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0020241:	eb 07                	jmp    c002024a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0020243:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002024a:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c002024e:	74 09                	je     c0020259 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0020250:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0020257:	eb 07                	jmp    c0020260 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0020259:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0020260:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0020267:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002026b:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002026e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0020271:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020274:	52                   	push   edx
c0020275:	50                   	push   eax
c0020276:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020279:	e8 e4 fe ff ff       	call   c0020162 <IOAPIC::write(int, int)>
c002027e:	83 c4 0c             	add    esp,0xc
c0020281:	90                   	nop
c0020282:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0020285:	c9                   	leave  
c0020286:	c3                   	ret    
c0020287:	90                   	nop

c0020288 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0020288:	55                   	push   ebp
c0020289:	89 e5                	mov    ebp,esp
c002028b:	57                   	push   edi
c002028c:	56                   	push   esi
c002028d:	53                   	push   ebx
c002028e:	83 ec 2c             	sub    esp,0x2c
c0020291:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0020294:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0020297:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002029b:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c002029f:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00202a3:	74 5a                	je     c00202ff <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00202a5:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00202a9:	7f 44                	jg     c00202ef <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00202ab:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00202ae:	05 80 5b 02 c0       	add    eax,0xc0025b80
c00202b3:	8a 00                	mov    al,BYTE PTR [eax]
c00202b5:	0f b6 c0             	movzx  eax,al
c00202b8:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00202bb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00202be:	66 8b 84 00 80 6d 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd9280]
c00202c6:	0f b7 c0             	movzx  eax,ax
c00202c9:	83 e0 02             	and    eax,0x2
c00202cc:	85 c0                	test   eax,eax
c00202ce:	74 04                	je     c00202d4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00202d0:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00202d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00202d7:	66 8b 84 00 80 6d 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd9280]
c00202df:	0f b7 c0             	movzx  eax,ax
c00202e2:	83 e0 08             	and    eax,0x8
c00202e5:	85 c0                	test   eax,eax
c00202e7:	74 16                	je     c00202ff <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00202e9:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00202ed:	eb 10                	jmp    c00202ff <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00202ef:	83 ec 0c             	sub    esp,0xc
c00202f2:	68 e8 54 02 c0       	push   0xc00254e8
c00202f7:	e8 a5 40 ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c00202fc:	83 c4 10             	add    esp,0x10
c00202ff:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0020303:	a1 80 83 02 c0       	mov    eax,ds:0xc0028380
c0020308:	83 ec 08             	sub    esp,0x8
c002030b:	50                   	push   eax
c002030c:	68 20 55 02 c0       	push   0xc0025520
c0020311:	e8 c9 c7 fe ff       	call   c000cadf <Dbg::kprintf(char const*, ...)>
c0020316:	83 c4 10             	add    esp,0x10
c0020319:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0020320:	a1 80 83 02 c0       	mov    eax,ds:0xc0028380
c0020325:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0020328:	7d 67                	jge    c0020391 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002032a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002032d:	8b 04 85 a0 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7c60]
c0020334:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0020337:	83 ec 08             	sub    esp,0x8
c002033a:	52                   	push   edx
c002033b:	50                   	push   eax
c002033c:	e8 d1 fc ff ff       	call   c0020012 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0020341:	83 c4 10             	add    esp,0x10
c0020344:	84 c0                	test   al,al
c0020346:	74 44                	je     c002038c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0020348:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002034b:	8b 1c 85 a0 83 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd7c60]
c0020352:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0020356:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0020359:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c002035d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020360:	83 c0 20             	add    eax,0x20
c0020363:	0f b6 f0             	movzx  esi,al
c0020366:	b8 00 00 00 00       	mov    eax,0x0
c002036b:	99                   	cdq    
c002036c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002036f:	0f b6 c9             	movzx  ecx,cl
c0020372:	83 ec 04             	sub    esp,0x4
c0020375:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0020378:	57                   	push   edi
c0020379:	56                   	push   esi
c002037a:	52                   	push   edx
c002037b:	50                   	push   eax
c002037c:	51                   	push   ecx
c002037d:	53                   	push   ebx
c002037e:	e8 0b fe ff ff       	call   c002018e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0020383:	83 c4 20             	add    esp,0x20
c0020386:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c002038a:	eb 05                	jmp    c0020391 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002038c:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c002038f:	eb 8f                	jmp    c0020320 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0020391:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0020394:	83 f0 01             	xor    eax,0x1
c0020397:	84 c0                	test   al,al
c0020399:	74 10                	je     c00203ab <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c002039b:	83 ec 0c             	sub    esp,0xc
c002039e:	68 37 55 02 c0       	push   0xc0025537
c00203a3:	e8 f9 3f ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c00203a8:	83 c4 10             	add    esp,0x10
c00203ab:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00203af:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00203b6:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c00203ba:	7f 65                	jg     c0020421 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00203bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00203bf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00203c2:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00203c9:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00203cc:	01 ca                	add    edx,ecx
c00203ce:	83 c2 54             	add    edx,0x54
c00203d1:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c00203d5:	85 c0                	test   eax,eax
c00203d7:	75 43                	jne    c002041c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c00203d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00203dc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00203df:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00203e6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00203e9:	01 ca                	add    edx,ecx
c00203eb:	8d 4a 54             	lea    ecx,[edx+0x54]
c00203ee:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00203f1:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00203f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00203f8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00203fb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0020402:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0020405:	01 ca                	add    edx,ecx
c0020407:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c002040d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0020410:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0020414:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020417:	83 e8 20             	sub    eax,0x20
c002041a:	eb 1a                	jmp    c0020436 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c002041c:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c002041f:	eb 95                	jmp    c00203b6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0020421:	83 ec 0c             	sub    esp,0xc
c0020424:	68 44 55 02 c0       	push   0xc0025544
c0020429:	e8 73 3f ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c002042e:	83 c4 10             	add    esp,0x10
c0020431:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020436:	8d 65 f4             	lea    esp,[ebp-0xc]
c0020439:	5b                   	pop    ebx
c002043a:	5e                   	pop    esi
c002043b:	5f                   	pop    edi
c002043c:	5d                   	pop    ebp
c002043d:	c3                   	ret    

c002043e <PIC::disable()>:
c002043e:	55                   	push   ebp
c002043f:	89 e5                	mov    ebp,esp
c0020441:	83 ec 10             	sub    esp,0x10
c0020444:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c002044a:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c002044e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0020451:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0020455:	ee                   	out    dx,al
c0020456:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c002045c:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0020460:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0020463:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0020467:	ee                   	out    dx,al
c0020468:	90                   	nop
c0020469:	c9                   	leave  
c002046a:	c3                   	ret    
c002046b:	90                   	nop

c002046c <PIC::close(int, int, void*)>:
c002046c:	55                   	push   ebp
c002046d:	89 e5                	mov    ebp,esp
c002046f:	83 ec 08             	sub    esp,0x8
c0020472:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020475:	8b 00                	mov    eax,DWORD PTR [eax]
c0020477:	83 c0 3c             	add    eax,0x3c
c002047a:	8b 00                	mov    eax,DWORD PTR [eax]
c002047c:	83 ec 0c             	sub    esp,0xc
c002047f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020482:	ff d0                	call   eax
c0020484:	83 c4 10             	add    esp,0x10
c0020487:	b8 00 00 00 00       	mov    eax,0x0
c002048c:	c9                   	leave  
c002048d:	c3                   	ret    

c002048e <PIC::PIC()>:
c002048e:	83 ec 0c             	sub    esp,0xc
c0020491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020495:	83 ec 08             	sub    esp,0x8
c0020498:	68 f0 55 02 c0       	push   0xc00255f0
c002049d:	50                   	push   eax
c002049e:	e8 ff e3 fe ff       	call   c000e8a2 <InterruptController::InterruptController(char const*)>
c00204a3:	83 c4 10             	add    esp,0x10
c00204a6:	ba 1c 56 02 c0       	mov    edx,0xc002561c
c00204ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204af:	89 10                	mov    DWORD PTR [eax],edx
c00204b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204b5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00204bb:	0f b6 d0             	movzx  edx,al
c00204be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204c2:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c00204c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204cd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00204d3:	0f b6 d0             	movzx  edx,al
c00204d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204da:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00204df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204e3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00204e9:	8d 50 01             	lea    edx,[eax+0x1]
c00204ec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00204f0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00204f6:	0f b6 d0             	movzx  edx,al
c00204f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204fd:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020501:	83 e1 3f             	and    ecx,0x3f
c0020504:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002050c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020512:	0f b6 d0             	movzx  edx,al
c0020515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020519:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0020520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020524:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002052a:	0f b6 d0             	movzx  edx,al
c002052d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020531:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0020536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002053a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020540:	8d 50 01             	lea    edx,[eax+0x1]
c0020543:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020547:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002054d:	0f b6 d0             	movzx  edx,al
c0020550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020554:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020558:	83 e1 3f             	and    ecx,0x3f
c002055b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002055f:	90                   	nop
c0020560:	83 c4 0c             	add    esp,0xc
c0020563:	c3                   	ret    

c0020564 <PIC::ioWait()>:
c0020564:	eb 00                	jmp    c0020566 <PIC::ioWait()+0x2>
c0020566:	eb 00                	jmp    c0020568 <PIC::ioWait()+0x4>
c0020568:	90                   	nop
c0020569:	c3                   	ret    

c002056a <PIC::getIRQReg(int)>:
c002056a:	55                   	push   ebp
c002056b:	89 e5                	mov    ebp,esp
c002056d:	83 ec 10             	sub    esp,0x10
c0020570:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020573:	0f b6 c0             	movzx  eax,al
c0020576:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002057c:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c002057f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0020582:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0020586:	ee                   	out    dx,al
c0020587:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002058a:	0f b6 c0             	movzx  eax,al
c002058d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0020593:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0020596:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0020599:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002059d:	ee                   	out    dx,al
c002059e:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c00205a4:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c00205a8:	89 c2                	mov    edx,eax
c00205aa:	ec                   	in     al,dx
c00205ab:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c00205ae:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00205b1:	0f b6 c0             	movzx  eax,al
c00205b4:	c1 e0 08             	shl    eax,0x8
c00205b7:	89 c1                	mov    ecx,eax
c00205b9:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00205bf:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00205c3:	89 c2                	mov    edx,eax
c00205c5:	ec                   	in     al,dx
c00205c6:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00205c9:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00205cc:	0f b6 c0             	movzx  eax,al
c00205cf:	09 c8                	or     eax,ecx
c00205d1:	c9                   	leave  
c00205d2:	c3                   	ret    
c00205d3:	90                   	nop

c00205d4 <PIC::eoi(unsigned char)>:
c00205d4:	55                   	push   ebp
c00205d5:	89 e5                	mov    ebp,esp
c00205d7:	83 ec 14             	sub    esp,0x14
c00205da:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00205dd:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00205e0:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00205e4:	75 1e                	jne    c0020604 <PIC::eoi(unsigned char)+0x30>
c00205e6:	6a 0b                	push   0xb
c00205e8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00205eb:	e8 7a ff ff ff       	call   c002056a <PIC::getIRQReg(int)>
c00205f0:	83 c4 08             	add    esp,0x8
c00205f3:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00205f7:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00205fb:	25 80 00 00 00       	and    eax,0x80
c0020600:	85 c0                	test   eax,eax
c0020602:	74 5f                	je     c0020663 <PIC::eoi(unsigned char)+0x8f>
c0020604:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0020608:	75 2d                	jne    c0020637 <PIC::eoi(unsigned char)+0x63>
c002060a:	6a 0b                	push   0xb
c002060c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002060f:	e8 56 ff ff ff       	call   c002056a <PIC::getIRQReg(int)>
c0020614:	83 c4 08             	add    esp,0x8
c0020617:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c002061b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002061e:	66 85 c0             	test   ax,ax
c0020621:	78 14                	js     c0020637 <PIC::eoi(unsigned char)+0x63>
c0020623:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0020629:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c002062d:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0020630:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0020634:	ee                   	out    dx,al
c0020635:	eb 2d                	jmp    c0020664 <PIC::eoi(unsigned char)+0x90>
c0020637:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002063b:	76 12                	jbe    c002064f <PIC::eoi(unsigned char)+0x7b>
c002063d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0020643:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0020647:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002064a:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002064e:	ee                   	out    dx,al
c002064f:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0020655:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0020659:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002065c:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0020660:	ee                   	out    dx,al
c0020661:	eb 01                	jmp    c0020664 <PIC::eoi(unsigned char)+0x90>
c0020663:	90                   	nop
c0020664:	c9                   	leave  
c0020665:	c3                   	ret    

c0020666 <PIC::remap()>:
c0020666:	55                   	push   ebp
c0020667:	89 e5                	mov    ebp,esp
c0020669:	83 ec 48             	sub    esp,0x48
c002066c:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0020673:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c002067a:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0020680:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0020683:	89 c2                	mov    edx,eax
c0020685:	ec                   	in     al,dx
c0020686:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0020689:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c002068c:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c002068f:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0020695:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0020698:	89 c2                	mov    edx,eax
c002069a:	ec                   	in     al,dx
c002069b:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c002069e:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c00206a1:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00206a4:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00206aa:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00206ae:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00206b1:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00206b4:	ee                   	out    dx,al
c00206b5:	83 ec 0c             	sub    esp,0xc
c00206b8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00206bb:	e8 a4 fe ff ff       	call   c0020564 <PIC::ioWait()>
c00206c0:	83 c4 10             	add    esp,0x10
c00206c3:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00206c9:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00206cd:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00206d0:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00206d3:	ee                   	out    dx,al
c00206d4:	83 ec 0c             	sub    esp,0xc
c00206d7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00206da:	e8 85 fe ff ff       	call   c0020564 <PIC::ioWait()>
c00206df:	83 c4 10             	add    esp,0x10
c00206e2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00206e5:	0f b6 c0             	movzx  eax,al
c00206e8:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00206ee:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00206f1:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00206f4:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00206f7:	ee                   	out    dx,al
c00206f8:	83 ec 0c             	sub    esp,0xc
c00206fb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00206fe:	e8 61 fe ff ff       	call   c0020564 <PIC::ioWait()>
c0020703:	83 c4 10             	add    esp,0x10
c0020706:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020709:	0f b6 c0             	movzx  eax,al
c002070c:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0020712:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0020715:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0020718:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002071b:	ee                   	out    dx,al
c002071c:	83 ec 0c             	sub    esp,0xc
c002071f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020722:	e8 3d fe ff ff       	call   c0020564 <PIC::ioWait()>
c0020727:	83 c4 10             	add    esp,0x10
c002072a:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0020730:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0020734:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0020737:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c002073a:	ee                   	out    dx,al
c002073b:	83 ec 0c             	sub    esp,0xc
c002073e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020741:	e8 1e fe ff ff       	call   c0020564 <PIC::ioWait()>
c0020746:	83 c4 10             	add    esp,0x10
c0020749:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c002074f:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0020753:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0020756:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0020759:	ee                   	out    dx,al
c002075a:	83 ec 0c             	sub    esp,0xc
c002075d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020760:	e8 ff fd ff ff       	call   c0020564 <PIC::ioWait()>
c0020765:	83 c4 10             	add    esp,0x10
c0020768:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c002076e:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0020772:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0020775:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0020778:	ee                   	out    dx,al
c0020779:	83 ec 0c             	sub    esp,0xc
c002077c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002077f:	e8 e0 fd ff ff       	call   c0020564 <PIC::ioWait()>
c0020784:	83 c4 10             	add    esp,0x10
c0020787:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c002078d:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0020791:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0020794:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0020797:	ee                   	out    dx,al
c0020798:	83 ec 0c             	sub    esp,0xc
c002079b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002079e:	e8 c1 fd ff ff       	call   c0020564 <PIC::ioWait()>
c00207a3:	83 c4 10             	add    esp,0x10
c00207a6:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00207aa:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00207b0:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00207b3:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00207b6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00207b9:	ee                   	out    dx,al
c00207ba:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00207be:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00207c4:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00207c7:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00207ca:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00207cd:	ee                   	out    dx,al
c00207ce:	90                   	nop
c00207cf:	c9                   	leave  
c00207d0:	c3                   	ret    
c00207d1:	90                   	nop

c00207d2 <PIC::open(int, int, void*)>:
c00207d2:	55                   	push   ebp
c00207d3:	89 e5                	mov    ebp,esp
c00207d5:	83 ec 18             	sub    esp,0x18
c00207d8:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00207de:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00207e2:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00207e5:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00207e9:	ee                   	out    dx,al
c00207ea:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00207f0:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00207f4:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00207f7:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00207fb:	ee                   	out    dx,al
c00207fc:	83 ec 0c             	sub    esp,0xc
c00207ff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020802:	e8 5f fe ff ff       	call   c0020666 <PIC::remap()>
c0020807:	83 c4 10             	add    esp,0x10
c002080a:	b8 00 00 00 00       	mov    eax,0x0
c002080f:	c9                   	leave  
c0020810:	c3                   	ret    
c0020811:	66 90                	xchg   ax,ax
c0020813:	90                   	nop

c0020814 <APICTimer::close(int, int, void*)>:
c0020814:	b8 00 00 00 00       	mov    eax,0x0
c0020819:	c3                   	ret    
c002081a:	66 90                	xchg   ax,ax

c002081c <apicTimerHandler(regs*, void*)>:
c002081c:	83 ec 0c             	sub    esp,0xc
c002081f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020823:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020825:	b8 10 27 00 00       	mov    eax,0x2710
c002082a:	ba 00 00 00 00       	mov    edx,0x0
c002082f:	f7 f1                	div    ecx
c0020831:	83 ec 0c             	sub    esp,0xc
c0020834:	50                   	push   eax
c0020835:	e8 73 ff fe ff       	call   c00107ad <timerHandler(unsigned int)>
c002083a:	83 c4 10             	add    esp,0x10
c002083d:	90                   	nop
c002083e:	83 c4 0c             	add    esp,0xc
c0020841:	c3                   	ret    
c0020842:	66 90                	xchg   ax,ax

c0020844 <APICTimer::write(int)>:
c0020844:	83 ec 1c             	sub    esp,0x1c
c0020847:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002084b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002084f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020855:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c002085a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020860:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0020866:	83 ec 0c             	sub    esp,0xc
c0020869:	50                   	push   eax
c002086a:	e8 e1 f4 ff ff       	call   c001fd50 <APIC::getBase()>
c002086f:	83 c4 10             	add    esp,0x10
c0020872:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020876:	a1 ac 6a 02 c0       	mov    eax,ds:0xc0026aac
c002087b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002087f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020883:	05 e0 03 00 00       	add    eax,0x3e0
c0020888:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002088e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020892:	05 80 03 00 00       	add    eax,0x380
c0020897:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c002089d:	fb                   	sti    
c002089e:	66 90                	xchg   ax,ax
c00208a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00208a4:	8d 90 10 27 00 00    	lea    edx,[eax+0x2710]
c00208aa:	a1 ac 6a 02 c0       	mov    eax,ds:0xc0026aac
c00208af:	39 c2                	cmp    edx,eax
c00208b1:	76 05                	jbe    c00208b8 <APICTimer::write(int)+0x74>
c00208b3:	eb eb                	jmp    c00208a0 <APICTimer::write(int)+0x5c>
c00208b5:	8d 76 00             	lea    esi,[esi+0x0]
c00208b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00208bc:	05 20 03 00 00       	add    eax,0x320
c00208c1:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00208c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00208cb:	05 90 03 00 00       	add    eax,0x390
c00208d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00208d2:	f7 d0                	not    eax
c00208d4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00208d8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00208dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00208e0:	ba 00 00 00 00       	mov    edx,0x0
c00208e5:	f7 f1                	div    ecx
c00208e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00208ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208ee:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00208f4:	0d 00 00 02 00       	or     eax,0x20000
c00208f9:	89 c2                	mov    edx,eax
c00208fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00208ff:	05 20 03 00 00       	add    eax,0x320
c0020904:	89 10                	mov    DWORD PTR [eax],edx
c0020906:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002090a:	05 e0 03 00 00       	add    eax,0x3e0
c002090f:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0020915:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020919:	05 80 03 00 00       	add    eax,0x380
c002091e:	89 c2                	mov    edx,eax
c0020920:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020923:	89 02                	mov    DWORD PTR [edx],eax
c0020925:	90                   	nop
c0020926:	83 c4 1c             	add    esp,0x1c
c0020929:	c3                   	ret    
c002092a:	66 90                	xchg   ax,ax

c002092c <APICTimer::open(int, int, void*)>:
c002092c:	57                   	push   edi
c002092d:	56                   	push   esi
c002092e:	53                   	push   ebx
c002092f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020933:	8b 00                	mov    eax,DWORD PTR [eax]
c0020935:	83 c0 24             	add    eax,0x24
c0020938:	8b 00                	mov    eax,DWORD PTR [eax]
c002093a:	83 ec 08             	sub    esp,0x8
c002093d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020941:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020945:	ff d0                	call   eax
c0020947:	83 c4 10             	add    esp,0x10
c002094a:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c002094f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020955:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002095b:	83 ec 0c             	sub    esp,0xc
c002095e:	50                   	push   eax
c002095f:	e8 ec f3 ff ff       	call   c001fd50 <APIC::getBase()>
c0020964:	83 c4 10             	add    esp,0x10
c0020967:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c002096d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020971:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020977:	0f b6 f8             	movzx  edi,al
c002097a:	89 d0                	mov    eax,edx
c002097c:	ba 00 00 00 00       	mov    edx,0x0
c0020981:	89 c1                	mov    ecx,eax
c0020983:	80 e5 ff             	and    ch,0xff
c0020986:	89 cb                	mov    ebx,ecx
c0020988:	0f b6 f2             	movzx  esi,dl
c002098b:	89 d8                	mov    eax,ebx
c002098d:	89 f2                	mov    edx,esi
c002098f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020993:	8d 5f 08             	lea    ebx,[edi+0x8]
c0020996:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002099a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002099e:	83 e0 00             	and    eax,0x0
c00209a1:	09 d0                	or     eax,edx
c00209a3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00209a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209ab:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00209b1:	8d 50 01             	lea    edx,[eax+0x1]
c00209b4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00209b8:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00209be:	0f b6 d0             	movzx  edx,al
c00209c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209c5:	83 c2 08             	add    edx,0x8
c00209c8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00209cc:	0f b6 c9             	movzx  ecx,cl
c00209cf:	81 c9 00 00 01 00    	or     ecx,0x10000
c00209d5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00209d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209dd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00209e1:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00209e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209eb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00209ef:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00209f5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00209f9:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00209ff:	83 ec 0c             	sub    esp,0xc
c0020a02:	51                   	push   ecx
c0020a03:	6a 01                	push   0x1
c0020a05:	68 1c 08 02 c0       	push   0xc002081c
c0020a0a:	52                   	push   edx
c0020a0b:	50                   	push   eax
c0020a0c:	e8 8d d4 fe ff       	call   c000de9e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020a11:	83 c4 20             	add    esp,0x20
c0020a14:	89 c2                	mov    edx,eax
c0020a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a1a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020a20:	b8 00 00 00 00       	mov    eax,0x0
c0020a25:	5b                   	pop    ebx
c0020a26:	5e                   	pop    esi
c0020a27:	5f                   	pop    edi
c0020a28:	c3                   	ret    
c0020a29:	90                   	nop
c0020a2a:	66 90                	xchg   ax,ax

c0020a2c <APICTimer::APICTimer()>:
c0020a2c:	83 ec 0c             	sub    esp,0xc
c0020a2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a33:	83 ec 08             	sub    esp,0x8
c0020a36:	68 5c 56 02 c0       	push   0xc002565c
c0020a3b:	50                   	push   eax
c0020a3c:	e8 db fc fe ff       	call   c001071c <Timer::Timer(char const*)>
c0020a41:	83 c4 10             	add    esp,0x10
c0020a44:	ba 70 56 02 c0       	mov    edx,0xc0025670
c0020a49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a4d:	89 10                	mov    DWORD PTR [eax],edx
c0020a4f:	90                   	nop
c0020a50:	83 c4 0c             	add    esp,0xc
c0020a53:	c3                   	ret    

c0020a54 <PIT::write(int)>:
c0020a54:	83 ec 10             	sub    esp,0x10
c0020a57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020a5b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020a5f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020a65:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020a69:	a3 c4 83 02 c0       	mov    ds:0xc00283c4,eax
c0020a6e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0020a73:	99                   	cdq    
c0020a74:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0020a78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020a7c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0020a83:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0020a88:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0020a8c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0020a91:	ee                   	out    dx,al
c0020a92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020a96:	0f b6 c0             	movzx  eax,al
c0020a99:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0020aa0:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0020aa4:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0020aa8:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0020aad:	ee                   	out    dx,al
c0020aae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ab2:	c1 f8 08             	sar    eax,0x8
c0020ab5:	0f b6 c0             	movzx  eax,al
c0020ab8:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0020abf:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020ac3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020ac7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0020acc:	ee                   	out    dx,al
c0020acd:	90                   	nop
c0020ace:	83 c4 10             	add    esp,0x10
c0020ad1:	c3                   	ret    
c0020ad2:	66 90                	xchg   ax,ax

c0020ad4 <pitHandler(regs*, void*)>:
c0020ad4:	83 ec 0c             	sub    esp,0xc
c0020ad7:	8b 0d c4 83 02 c0    	mov    ecx,DWORD PTR ds:0xc00283c4
c0020add:	b8 a0 86 01 00       	mov    eax,0x186a0
c0020ae2:	99                   	cdq    
c0020ae3:	f7 f9                	idiv   ecx
c0020ae5:	83 ec 0c             	sub    esp,0xc
c0020ae8:	50                   	push   eax
c0020ae9:	e8 bf fc fe ff       	call   c00107ad <timerHandler(unsigned int)>
c0020aee:	83 c4 10             	add    esp,0x10
c0020af1:	90                   	nop
c0020af2:	83 c4 0c             	add    esp,0xc
c0020af5:	c3                   	ret    
c0020af6:	66 90                	xchg   ax,ax

c0020af8 <PIT::open(int, int, void*)>:
c0020af8:	83 ec 0c             	sub    esp,0xc
c0020afb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020aff:	8b 00                	mov    eax,DWORD PTR [eax]
c0020b01:	83 c0 24             	add    eax,0x24
c0020b04:	8b 00                	mov    eax,DWORD PTR [eax]
c0020b06:	83 ec 08             	sub    esp,0x8
c0020b09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020b0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020b11:	ff d0                	call   eax
c0020b13:	83 c4 10             	add    esp,0x10
c0020b16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b1a:	83 ec 0c             	sub    esp,0xc
c0020b1d:	6a 00                	push   0x0
c0020b1f:	6a 01                	push   0x1
c0020b21:	68 d4 0a 02 c0       	push   0xc0020ad4
c0020b26:	6a 00                	push   0x0
c0020b28:	50                   	push   eax
c0020b29:	e8 70 d3 fe ff       	call   c000de9e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020b2e:	83 c4 20             	add    esp,0x20
c0020b31:	89 c2                	mov    edx,eax
c0020b33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b37:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020b3d:	b8 00 00 00 00       	mov    eax,0x0
c0020b42:	83 c4 0c             	add    esp,0xc
c0020b45:	c3                   	ret    
c0020b46:	66 90                	xchg   ax,ax

c0020b48 <PIT::close(int, int, void*)>:
c0020b48:	83 ec 0c             	sub    esp,0xc
c0020b4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b4f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0020b59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b5d:	6a 01                	push   0x1
c0020b5f:	68 d4 0a 02 c0       	push   0xc0020ad4
c0020b64:	6a 00                	push   0x0
c0020b66:	50                   	push   eax
c0020b67:	e8 7c d3 fe ff       	call   c000dee8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0020b6c:	83 c4 10             	add    esp,0x10
c0020b6f:	b8 00 00 00 00       	mov    eax,0x0
c0020b74:	83 c4 0c             	add    esp,0xc
c0020b77:	c3                   	ret    

c0020b78 <PIT::PIT()>:
c0020b78:	83 ec 0c             	sub    esp,0xc
c0020b7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b7f:	83 ec 08             	sub    esp,0x8
c0020b82:	68 98 56 02 c0       	push   0xc0025698
c0020b87:	50                   	push   eax
c0020b88:	e8 8f fb fe ff       	call   c001071c <Timer::Timer(char const*)>
c0020b8d:	83 c4 10             	add    esp,0x10
c0020b90:	ba c0 56 02 c0       	mov    edx,0xc00256c0
c0020b95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b99:	89 10                	mov    DWORD PTR [eax],edx
c0020b9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b9f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020ba5:	0f b6 d0             	movzx  edx,al
c0020ba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bac:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0020bb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bb7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020bbd:	0f b6 d0             	movzx  edx,al
c0020bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bc4:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0020bc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bcd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020bd3:	8d 50 01             	lea    edx,[eax+0x1]
c0020bd6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020bda:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0020be0:	0f b6 d0             	movzx  edx,al
c0020be3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020be7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020beb:	83 e1 3f             	and    ecx,0x3f
c0020bee:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020bf2:	90                   	nop
c0020bf3:	83 c4 0c             	add    esp,0xc
c0020bf6:	c3                   	ret    
c0020bf7:	66 90                	xchg   ax,ax
c0020bf9:	66 90                	xchg   ax,ax
c0020bfb:	66 90                	xchg   ax,ax
c0020bfd:	66 90                	xchg   ax,ax
c0020bff:	90                   	nop

c0020c00 <avxDetect>:
c0020c00:	b8 00 00 00 00       	mov    eax,0x0
c0020c05:	c3                   	ret    

c0020c06 <avxSave>:
c0020c06:	c3                   	ret    

c0020c07 <avxLoad>:
c0020c07:	c3                   	ret    

c0020c08 <avxInit>:
c0020c08:	c3                   	ret    

c0020c09 <avxClose>:
c0020c09:	c3                   	ret    

c0020c0a <wouldSheSayYes>:
c0020c0a:	c3                   	ret    
c0020c0b:	49                   	dec    ecx
c0020c0c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0020c10:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0020c14:	75 20                	jne    c0020c36 <sseDetect.noSSE+0x1>
c0020c16:	4e                   	dec    esi
c0020c17:	79 61                	jns    c0020c7a <x87Detect+0x14>
c0020c19:	68 2e 2e 2e 00       	push   0x2e2e2e
c0020c1e:	66 90                	xchg   ax,ax

c0020c20 <absolutelyNoChanceInHell>:
c0020c20:	b8 01 00 00 00       	mov    eax,0x1
c0020c25:	0f a2                	cpuid  
c0020c27:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0020c2d:	74 06                	je     c0020c35 <sseDetect.noSSE>
c0020c2f:	b8 01 00 00 00       	mov    eax,0x1
c0020c34:	c3                   	ret    

c0020c35 <sseDetect.noSSE>:
c0020c35:	31 c0                	xor    eax,eax
c0020c37:	c3                   	ret    

c0020c38 <sseSave>:
c0020c38:	0f ae 44 24 04       	fxsave [esp+0x4]
c0020c3d:	c3                   	ret    

c0020c3e <sseLoad>:
c0020c3e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0020c43:	c3                   	ret    

c0020c44 <sseInit>:
c0020c44:	e8 49 00 00 00       	call   c0020c92 <x87Init>
c0020c49:	0f 20 e0             	mov    eax,cr4
c0020c4c:	66 0d 00 06          	or     ax,0x600
c0020c50:	0f 22 e0             	mov    cr4,eax
c0020c53:	c3                   	ret    

c0020c54 <sseClose>:
c0020c54:	c3                   	ret    
c0020c55:	66 90                	xchg   ax,ax
c0020c57:	66 90                	xchg   ax,ax
c0020c59:	66 90                	xchg   ax,ax
c0020c5b:	66 90                	xchg   ax,ax
c0020c5d:	66 90                	xchg   ax,ax
c0020c5f:	90                   	nop

c0020c60 <value_37F>:
c0020c60:	7f 03                	jg     c0020c65 <value_37A+0x1>

c0020c62 <value_37E>:
c0020c62:	7e 03                	jle    c0020c67 <x87Detect+0x1>

c0020c64 <value_37A>:
c0020c64:	7a 03                	jp     c0020c69 <x87Detect+0x3>

c0020c66 <x87Detect>:
c0020c66:	b8 01 00 00 00       	mov    eax,0x1
c0020c6b:	0f a2                	cpuid  
c0020c6d:	f7 c2 01 00 00 00    	test   edx,0x1
c0020c73:	74 06                	je     c0020c7b <x87Detect.nox87>
c0020c75:	b8 01 00 00 00       	mov    eax,0x1
c0020c7a:	c3                   	ret    

c0020c7b <x87Detect.nox87>:
c0020c7b:	b8 00 00 00 00       	mov    eax,0x0
c0020c80:	c3                   	ret    

c0020c81 <x87Save>:
c0020c81:	55                   	push   ebp
c0020c82:	89 e5                	mov    ebp,esp
c0020c84:	9b dd 75 08          	fsave  [ebp+0x8]
c0020c88:	c9                   	leave  
c0020c89:	c3                   	ret    

c0020c8a <x87Load>:
c0020c8a:	55                   	push   ebp
c0020c8b:	89 e5                	mov    ebp,esp
c0020c8d:	dd 65 08             	frstor [ebp+0x8]
c0020c90:	c9                   	leave  
c0020c91:	c3                   	ret    

c0020c92 <x87Init>:
c0020c92:	9b db e3             	finit  
c0020c95:	0f 20 c0             	mov    eax,cr0
c0020c98:	66 25 fb ff          	and    ax,0xfffb
c0020c9c:	66 0d 22 00          	or     ax,0x22
c0020ca0:	0f 22 c0             	mov    cr0,eax
c0020ca3:	0f 06                	clts   
c0020ca5:	d9 2d 64 0c 02 c0    	fldcw  WORD PTR ds:0xc0020c64
c0020cab:	c3                   	ret    

c0020cac <x87Close>:
c0020cac:	c3                   	ret    
c0020cad:	66 90                	xchg   ax,ax
c0020caf:	90                   	nop

c0020cb0 <__do_global_ctors_aux>:
c0020cb0:	a1 4c 1e 02 c0       	mov    eax,ds:0xc0021e4c
c0020cb5:	83 f8 ff             	cmp    eax,0xffffffff
c0020cb8:	74 1a                	je     c0020cd4 <__do_global_ctors_aux+0x24>
c0020cba:	55                   	push   ebp
c0020cbb:	89 e5                	mov    ebp,esp
c0020cbd:	53                   	push   ebx
c0020cbe:	52                   	push   edx
c0020cbf:	bb 4c 1e 02 c0       	mov    ebx,0xc0021e4c
c0020cc4:	ff d0                	call   eax
c0020cc6:	83 eb 04             	sub    ebx,0x4
c0020cc9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0020cce:	75 f4                	jne    c0020cc4 <__do_global_ctors_aux+0x14>
c0020cd0:	58                   	pop    eax
c0020cd1:	5b                   	pop    ebx
c0020cd2:	5d                   	pop    ebp
c0020cd3:	c3                   	ret    
c0020cd4:	c3                   	ret    
c0020cd5:	66 90                	xchg   ax,ax
c0020cd7:	90                   	nop

c0020cd8 <__divdi3>:
c0020cd8:	55                   	push   ebp
c0020cd9:	57                   	push   edi
c0020cda:	56                   	push   esi
c0020cdb:	53                   	push   ebx
c0020cdc:	83 ec 1c             	sub    esp,0x1c
c0020cdf:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0020ce3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020ce7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0020cea:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0020cee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020cf2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020cf6:	85 db                	test   ebx,ebx
c0020cf8:	0f 88 8e 00 00 00    	js     c0020d8c <__divdi3+0xb4>
c0020cfe:	89 dd                	mov    ebp,ebx
c0020d00:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020d08:	89 d3                	mov    ebx,edx
c0020d0a:	85 d2                	test   edx,edx
c0020d0c:	79 0d                	jns    c0020d1b <__divdi3+0x43>
c0020d0e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0020d12:	f7 d8                	neg    eax
c0020d14:	83 d2 00             	adc    edx,0x0
c0020d17:	f7 da                	neg    edx
c0020d19:	89 d3                	mov    ebx,edx
c0020d1b:	89 c7                	mov    edi,eax
c0020d1d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020d20:	85 db                	test   ebx,ebx
c0020d22:	75 48                	jne    c0020d6c <__divdi3+0x94>
c0020d24:	39 ef                	cmp    edi,ebp
c0020d26:	76 24                	jbe    c0020d4c <__divdi3+0x74>
c0020d28:	89 ea                	mov    edx,ebp
c0020d2a:	f7 f7                	div    edi
c0020d2c:	89 c1                	mov    ecx,eax
c0020d2e:	31 f6                	xor    esi,esi
c0020d30:	89 c8                	mov    eax,ecx
c0020d32:	89 f2                	mov    edx,esi
c0020d34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020d38:	85 c9                	test   ecx,ecx
c0020d3a:	74 07                	je     c0020d43 <__divdi3+0x6b>
c0020d3c:	f7 d8                	neg    eax
c0020d3e:	83 d2 00             	adc    edx,0x0
c0020d41:	f7 da                	neg    edx
c0020d43:	83 c4 1c             	add    esp,0x1c
c0020d46:	5b                   	pop    ebx
c0020d47:	5e                   	pop    esi
c0020d48:	5f                   	pop    edi
c0020d49:	5d                   	pop    ebp
c0020d4a:	c3                   	ret    
c0020d4b:	90                   	nop
c0020d4c:	85 ff                	test   edi,edi
c0020d4e:	75 0b                	jne    c0020d5b <__divdi3+0x83>
c0020d50:	b8 01 00 00 00       	mov    eax,0x1
c0020d55:	31 d2                	xor    edx,edx
c0020d57:	f7 f3                	div    ebx
c0020d59:	89 c7                	mov    edi,eax
c0020d5b:	31 d2                	xor    edx,edx
c0020d5d:	89 e8                	mov    eax,ebp
c0020d5f:	f7 f7                	div    edi
c0020d61:	89 c6                	mov    esi,eax
c0020d63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020d66:	f7 f7                	div    edi
c0020d68:	89 c1                	mov    ecx,eax
c0020d6a:	eb c4                	jmp    c0020d30 <__divdi3+0x58>
c0020d6c:	39 eb                	cmp    ebx,ebp
c0020d6e:	77 3c                	ja     c0020dac <__divdi3+0xd4>
c0020d70:	0f bd f3             	bsr    esi,ebx
c0020d73:	83 f6 1f             	xor    esi,0x1f
c0020d76:	75 40                	jne    c0020db8 <__divdi3+0xe0>
c0020d78:	39 eb                	cmp    ebx,ebp
c0020d7a:	72 09                	jb     c0020d85 <__divdi3+0xad>
c0020d7c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0020d7f:	0f 87 97 00 00 00    	ja     c0020e1c <__divdi3+0x144>
c0020d85:	b9 01 00 00 00       	mov    ecx,0x1
c0020d8a:	eb a4                	jmp    c0020d30 <__divdi3+0x58>
c0020d8c:	f7 d9                	neg    ecx
c0020d8e:	83 d3 00             	adc    ebx,0x0
c0020d91:	f7 db                	neg    ebx
c0020d93:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0020d96:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0020d9a:	89 dd                	mov    ebp,ebx
c0020d9c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0020da4:	e9 5f ff ff ff       	jmp    c0020d08 <__divdi3+0x30>
c0020da9:	8d 76 00             	lea    esi,[esi+0x0]
c0020dac:	31 f6                	xor    esi,esi
c0020dae:	31 c9                	xor    ecx,ecx
c0020db0:	e9 7b ff ff ff       	jmp    c0020d30 <__divdi3+0x58>
c0020db5:	8d 76 00             	lea    esi,[esi+0x0]
c0020db8:	b8 20 00 00 00       	mov    eax,0x20
c0020dbd:	29 f0                	sub    eax,esi
c0020dbf:	89 f1                	mov    ecx,esi
c0020dc1:	d3 e3                	shl    ebx,cl
c0020dc3:	89 fa                	mov    edx,edi
c0020dc5:	88 c1                	mov    cl,al
c0020dc7:	d3 ea                	shr    edx,cl
c0020dc9:	09 da                	or     edx,ebx
c0020dcb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020dcf:	89 f1                	mov    ecx,esi
c0020dd1:	d3 e7                	shl    edi,cl
c0020dd3:	89 eb                	mov    ebx,ebp
c0020dd5:	88 c1                	mov    cl,al
c0020dd7:	d3 eb                	shr    ebx,cl
c0020dd9:	89 f1                	mov    ecx,esi
c0020ddb:	d3 e5                	shl    ebp,cl
c0020ddd:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0020de0:	88 c1                	mov    cl,al
c0020de2:	d3 ea                	shr    edx,cl
c0020de4:	09 d5                	or     ebp,edx
c0020de6:	89 e8                	mov    eax,ebp
c0020de8:	89 da                	mov    edx,ebx
c0020dea:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0020dee:	89 d3                	mov    ebx,edx
c0020df0:	89 c5                	mov    ebp,eax
c0020df2:	f7 e7                	mul    edi
c0020df4:	39 d3                	cmp    ebx,edx
c0020df6:	72 18                	jb     c0020e10 <__divdi3+0x138>
c0020df8:	74 0a                	je     c0020e04 <__divdi3+0x12c>
c0020dfa:	89 e9                	mov    ecx,ebp
c0020dfc:	31 f6                	xor    esi,esi
c0020dfe:	e9 2d ff ff ff       	jmp    c0020d30 <__divdi3+0x58>
c0020e03:	90                   	nop
c0020e04:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0020e07:	89 f1                	mov    ecx,esi
c0020e09:	d3 e7                	shl    edi,cl
c0020e0b:	39 c7                	cmp    edi,eax
c0020e0d:	73 eb                	jae    c0020dfa <__divdi3+0x122>
c0020e0f:	90                   	nop
c0020e10:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0020e13:	31 f6                	xor    esi,esi
c0020e15:	e9 16 ff ff ff       	jmp    c0020d30 <__divdi3+0x58>
c0020e1a:	66 90                	xchg   ax,ax
c0020e1c:	31 c9                	xor    ecx,ecx
c0020e1e:	e9 0d ff ff ff       	jmp    c0020d30 <__divdi3+0x58>
c0020e23:	90                   	nop

c0020e24 <__moddi3>:
c0020e24:	55                   	push   ebp
c0020e25:	57                   	push   edi
c0020e26:	56                   	push   esi
c0020e27:	53                   	push   ebx
c0020e28:	83 ec 2c             	sub    esp,0x2c
c0020e2b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0020e2f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0020e33:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020e37:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0020e3b:	85 db                	test   ebx,ebx
c0020e3d:	0f 88 85 00 00 00    	js     c0020ec8 <__moddi3+0xa4>
c0020e43:	89 de                	mov    esi,ebx
c0020e45:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0020e4d:	89 d7                	mov    edi,edx
c0020e4f:	85 d2                	test   edx,edx
c0020e51:	79 09                	jns    c0020e5c <__moddi3+0x38>
c0020e53:	f7 d8                	neg    eax
c0020e55:	83 d2 00             	adc    edx,0x0
c0020e58:	f7 da                	neg    edx
c0020e5a:	89 d7                	mov    edi,edx
c0020e5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e60:	89 cd                	mov    ebp,ecx
c0020e62:	85 ff                	test   edi,edi
c0020e64:	75 52                	jne    c0020eb8 <__moddi3+0x94>
c0020e66:	89 c3                	mov    ebx,eax
c0020e68:	39 f0                	cmp    eax,esi
c0020e6a:	76 24                	jbe    c0020e90 <__moddi3+0x6c>
c0020e6c:	89 c8                	mov    eax,ecx
c0020e6e:	89 f2                	mov    edx,esi
c0020e70:	f7 f3                	div    ebx
c0020e72:	89 d6                	mov    esi,edx
c0020e74:	89 f0                	mov    eax,esi
c0020e76:	31 d2                	xor    edx,edx
c0020e78:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020e7c:	85 c9                	test   ecx,ecx
c0020e7e:	74 07                	je     c0020e87 <__moddi3+0x63>
c0020e80:	f7 d8                	neg    eax
c0020e82:	83 d2 00             	adc    edx,0x0
c0020e85:	f7 da                	neg    edx
c0020e87:	83 c4 2c             	add    esp,0x2c
c0020e8a:	5b                   	pop    ebx
c0020e8b:	5e                   	pop    esi
c0020e8c:	5f                   	pop    edi
c0020e8d:	5d                   	pop    ebp
c0020e8e:	c3                   	ret    
c0020e8f:	90                   	nop
c0020e90:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020e94:	85 db                	test   ebx,ebx
c0020e96:	75 0d                	jne    c0020ea5 <__moddi3+0x81>
c0020e98:	b8 01 00 00 00       	mov    eax,0x1
c0020e9d:	31 d2                	xor    edx,edx
c0020e9f:	f7 f7                	div    edi
c0020ea1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ea5:	89 f0                	mov    eax,esi
c0020ea7:	31 d2                	xor    edx,edx
c0020ea9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020ead:	f7 f7                	div    edi
c0020eaf:	89 e8                	mov    eax,ebp
c0020eb1:	f7 f7                	div    edi
c0020eb3:	89 d6                	mov    esi,edx
c0020eb5:	eb bd                	jmp    c0020e74 <__moddi3+0x50>
c0020eb7:	90                   	nop
c0020eb8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0020ebc:	39 f7                	cmp    edi,esi
c0020ebe:	76 20                	jbe    c0020ee0 <__moddi3+0xbc>
c0020ec0:	89 c8                	mov    eax,ecx
c0020ec2:	89 f2                	mov    edx,esi
c0020ec4:	eb b2                	jmp    c0020e78 <__moddi3+0x54>
c0020ec6:	66 90                	xchg   ax,ax
c0020ec8:	f7 d9                	neg    ecx
c0020eca:	83 d3 00             	adc    ebx,0x0
c0020ecd:	f7 db                	neg    ebx
c0020ecf:	89 de                	mov    esi,ebx
c0020ed1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0020ed9:	e9 6f ff ff ff       	jmp    c0020e4d <__moddi3+0x29>
c0020ede:	66 90                	xchg   ax,ax
c0020ee0:	0f bd c7             	bsr    eax,edi
c0020ee3:	83 f0 1f             	xor    eax,0x1f
c0020ee6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020eea:	75 24                	jne    c0020f10 <__moddi3+0xec>
c0020eec:	39 f7                	cmp    edi,esi
c0020eee:	72 06                	jb     c0020ef6 <__moddi3+0xd2>
c0020ef0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0020ef4:	77 0c                	ja     c0020f02 <__moddi3+0xde>
c0020ef6:	89 e9                	mov    ecx,ebp
c0020ef8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0020efc:	19 fe                	sbb    esi,edi
c0020efe:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0020f02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f06:	89 f2                	mov    edx,esi
c0020f08:	e9 6b ff ff ff       	jmp    c0020e78 <__moddi3+0x54>
c0020f0d:	8d 76 00             	lea    esi,[esi+0x0]
c0020f10:	b8 20 00 00 00       	mov    eax,0x20
c0020f15:	89 c2                	mov    edx,eax
c0020f17:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020f1b:	29 da                	sub    edx,ebx
c0020f1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020f21:	88 d9                	mov    cl,bl
c0020f23:	d3 e7                	shl    edi,cl
c0020f25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f29:	88 d1                	mov    cl,dl
c0020f2b:	d3 e8                	shr    eax,cl
c0020f2d:	09 c7                	or     edi,eax
c0020f2f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0020f33:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020f37:	89 d8                	mov    eax,ebx
c0020f39:	88 d9                	mov    cl,bl
c0020f3b:	d3 e7                	shl    edi,cl
c0020f3d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020f41:	89 f3                	mov    ebx,esi
c0020f43:	88 d1                	mov    cl,dl
c0020f45:	d3 eb                	shr    ebx,cl
c0020f47:	89 c7                	mov    edi,eax
c0020f49:	88 c1                	mov    cl,al
c0020f4b:	d3 e6                	shl    esi,cl
c0020f4d:	89 e8                	mov    eax,ebp
c0020f4f:	88 d1                	mov    cl,dl
c0020f51:	d3 e8                	shr    eax,cl
c0020f53:	09 f0                	or     eax,esi
c0020f55:	89 f9                	mov    ecx,edi
c0020f57:	d3 e5                	shl    ebp,cl
c0020f59:	89 da                	mov    edx,ebx
c0020f5b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0020f5f:	89 d3                	mov    ebx,edx
c0020f61:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020f65:	89 c6                	mov    esi,eax
c0020f67:	89 d1                	mov    ecx,edx
c0020f69:	39 d3                	cmp    ebx,edx
c0020f6b:	72 27                	jb     c0020f94 <__moddi3+0x170>
c0020f6d:	74 21                	je     c0020f90 <__moddi3+0x16c>
c0020f6f:	29 f5                	sub    ebp,esi
c0020f71:	19 cb                	sbb    ebx,ecx
c0020f73:	89 de                	mov    esi,ebx
c0020f75:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0020f79:	d3 e6                	shl    esi,cl
c0020f7b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0020f7f:	89 f9                	mov    ecx,edi
c0020f81:	d3 ed                	shr    ebp,cl
c0020f83:	09 ee                	or     esi,ebp
c0020f85:	89 f0                	mov    eax,esi
c0020f87:	d3 eb                	shr    ebx,cl
c0020f89:	89 da                	mov    edx,ebx
c0020f8b:	e9 e8 fe ff ff       	jmp    c0020e78 <__moddi3+0x54>
c0020f90:	39 c5                	cmp    ebp,eax
c0020f92:	73 db                	jae    c0020f6f <__moddi3+0x14b>
c0020f94:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0020f98:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0020f9c:	89 d1                	mov    ecx,edx
c0020f9e:	89 c6                	mov    esi,eax
c0020fa0:	eb cd                	jmp    c0020f6f <__moddi3+0x14b>
c0020fa2:	66 90                	xchg   ax,ax

c0020fa4 <__udivdi3>:
c0020fa4:	55                   	push   ebp
c0020fa5:	57                   	push   edi
c0020fa6:	56                   	push   esi
c0020fa7:	53                   	push   ebx
c0020fa8:	83 ec 1c             	sub    esp,0x1c
c0020fab:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020faf:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020fb3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020fb7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020fbb:	85 d2                	test   edx,edx
c0020fbd:	75 41                	jne    c0021000 <__udivdi3+0x5c>
c0020fbf:	39 f7                	cmp    edi,esi
c0020fc1:	76 15                	jbe    c0020fd8 <__udivdi3+0x34>
c0020fc3:	89 e8                	mov    eax,ebp
c0020fc5:	89 f2                	mov    edx,esi
c0020fc7:	f7 f7                	div    edi
c0020fc9:	31 db                	xor    ebx,ebx
c0020fcb:	89 da                	mov    edx,ebx
c0020fcd:	83 c4 1c             	add    esp,0x1c
c0020fd0:	5b                   	pop    ebx
c0020fd1:	5e                   	pop    esi
c0020fd2:	5f                   	pop    edi
c0020fd3:	5d                   	pop    ebp
c0020fd4:	c3                   	ret    
c0020fd5:	8d 76 00             	lea    esi,[esi+0x0]
c0020fd8:	89 f9                	mov    ecx,edi
c0020fda:	85 ff                	test   edi,edi
c0020fdc:	75 0b                	jne    c0020fe9 <__udivdi3+0x45>
c0020fde:	b8 01 00 00 00       	mov    eax,0x1
c0020fe3:	31 d2                	xor    edx,edx
c0020fe5:	f7 f7                	div    edi
c0020fe7:	89 c1                	mov    ecx,eax
c0020fe9:	31 d2                	xor    edx,edx
c0020feb:	89 f0                	mov    eax,esi
c0020fed:	f7 f1                	div    ecx
c0020fef:	89 c3                	mov    ebx,eax
c0020ff1:	89 e8                	mov    eax,ebp
c0020ff3:	f7 f1                	div    ecx
c0020ff5:	89 da                	mov    edx,ebx
c0020ff7:	83 c4 1c             	add    esp,0x1c
c0020ffa:	5b                   	pop    ebx
c0020ffb:	5e                   	pop    esi
c0020ffc:	5f                   	pop    edi
c0020ffd:	5d                   	pop    ebp
c0020ffe:	c3                   	ret    
c0020fff:	90                   	nop
c0021000:	39 f2                	cmp    edx,esi
c0021002:	77 1c                	ja     c0021020 <__udivdi3+0x7c>
c0021004:	0f bd da             	bsr    ebx,edx
c0021007:	83 f3 1f             	xor    ebx,0x1f
c002100a:	75 24                	jne    c0021030 <__udivdi3+0x8c>
c002100c:	39 f2                	cmp    edx,esi
c002100e:	72 08                	jb     c0021018 <__udivdi3+0x74>
c0021010:	39 ef                	cmp    edi,ebp
c0021012:	0f 87 84 00 00 00    	ja     c002109c <__udivdi3+0xf8>
c0021018:	b8 01 00 00 00       	mov    eax,0x1
c002101d:	eb ac                	jmp    c0020fcb <__udivdi3+0x27>
c002101f:	90                   	nop
c0021020:	31 db                	xor    ebx,ebx
c0021022:	31 c0                	xor    eax,eax
c0021024:	89 da                	mov    edx,ebx
c0021026:	83 c4 1c             	add    esp,0x1c
c0021029:	5b                   	pop    ebx
c002102a:	5e                   	pop    esi
c002102b:	5f                   	pop    edi
c002102c:	5d                   	pop    ebp
c002102d:	c3                   	ret    
c002102e:	66 90                	xchg   ax,ax
c0021030:	b8 20 00 00 00       	mov    eax,0x20
c0021035:	29 d8                	sub    eax,ebx
c0021037:	88 d9                	mov    cl,bl
c0021039:	d3 e2                	shl    edx,cl
c002103b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002103f:	89 fa                	mov    edx,edi
c0021041:	88 c1                	mov    cl,al
c0021043:	d3 ea                	shr    edx,cl
c0021045:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021049:	09 d1                	or     ecx,edx
c002104b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002104f:	88 d9                	mov    cl,bl
c0021051:	d3 e7                	shl    edi,cl
c0021053:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021057:	89 f7                	mov    edi,esi
c0021059:	88 c1                	mov    cl,al
c002105b:	d3 ef                	shr    edi,cl
c002105d:	88 d9                	mov    cl,bl
c002105f:	d3 e6                	shl    esi,cl
c0021061:	89 ea                	mov    edx,ebp
c0021063:	88 c1                	mov    cl,al
c0021065:	d3 ea                	shr    edx,cl
c0021067:	09 d6                	or     esi,edx
c0021069:	89 f0                	mov    eax,esi
c002106b:	89 fa                	mov    edx,edi
c002106d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021071:	89 d7                	mov    edi,edx
c0021073:	89 c6                	mov    esi,eax
c0021075:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021079:	39 d7                	cmp    edi,edx
c002107b:	72 13                	jb     c0021090 <__udivdi3+0xec>
c002107d:	74 09                	je     c0021088 <__udivdi3+0xe4>
c002107f:	89 f0                	mov    eax,esi
c0021081:	31 db                	xor    ebx,ebx
c0021083:	e9 43 ff ff ff       	jmp    c0020fcb <__udivdi3+0x27>
c0021088:	88 d9                	mov    cl,bl
c002108a:	d3 e5                	shl    ebp,cl
c002108c:	39 c5                	cmp    ebp,eax
c002108e:	73 ef                	jae    c002107f <__udivdi3+0xdb>
c0021090:	8d 46 ff             	lea    eax,[esi-0x1]
c0021093:	31 db                	xor    ebx,ebx
c0021095:	e9 31 ff ff ff       	jmp    c0020fcb <__udivdi3+0x27>
c002109a:	66 90                	xchg   ax,ax
c002109c:	31 c0                	xor    eax,eax
c002109e:	e9 28 ff ff ff       	jmp    c0020fcb <__udivdi3+0x27>
c00210a3:	90                   	nop

c00210a4 <__umoddi3>:
c00210a4:	55                   	push   ebp
c00210a5:	57                   	push   edi
c00210a6:	56                   	push   esi
c00210a7:	53                   	push   ebx
c00210a8:	83 ec 1c             	sub    esp,0x1c
c00210ab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00210af:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00210b3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00210b7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00210bb:	89 da                	mov    edx,ebx
c00210bd:	85 c0                	test   eax,eax
c00210bf:	75 37                	jne    c00210f8 <__umoddi3+0x54>
c00210c1:	39 df                	cmp    edi,ebx
c00210c3:	76 13                	jbe    c00210d8 <__umoddi3+0x34>
c00210c5:	89 f0                	mov    eax,esi
c00210c7:	f7 f7                	div    edi
c00210c9:	89 d0                	mov    eax,edx
c00210cb:	31 d2                	xor    edx,edx
c00210cd:	83 c4 1c             	add    esp,0x1c
c00210d0:	5b                   	pop    ebx
c00210d1:	5e                   	pop    esi
c00210d2:	5f                   	pop    edi
c00210d3:	5d                   	pop    ebp
c00210d4:	c3                   	ret    
c00210d5:	8d 76 00             	lea    esi,[esi+0x0]
c00210d8:	89 fd                	mov    ebp,edi
c00210da:	85 ff                	test   edi,edi
c00210dc:	75 0b                	jne    c00210e9 <__umoddi3+0x45>
c00210de:	b8 01 00 00 00       	mov    eax,0x1
c00210e3:	31 d2                	xor    edx,edx
c00210e5:	f7 f7                	div    edi
c00210e7:	89 c5                	mov    ebp,eax
c00210e9:	89 d8                	mov    eax,ebx
c00210eb:	31 d2                	xor    edx,edx
c00210ed:	f7 f5                	div    ebp
c00210ef:	89 f0                	mov    eax,esi
c00210f1:	f7 f5                	div    ebp
c00210f3:	89 d0                	mov    eax,edx
c00210f5:	eb d4                	jmp    c00210cb <__umoddi3+0x27>
c00210f7:	90                   	nop
c00210f8:	89 f1                	mov    ecx,esi
c00210fa:	39 d8                	cmp    eax,ebx
c00210fc:	76 0a                	jbe    c0021108 <__umoddi3+0x64>
c00210fe:	89 f0                	mov    eax,esi
c0021100:	83 c4 1c             	add    esp,0x1c
c0021103:	5b                   	pop    ebx
c0021104:	5e                   	pop    esi
c0021105:	5f                   	pop    edi
c0021106:	5d                   	pop    ebp
c0021107:	c3                   	ret    
c0021108:	0f bd e8             	bsr    ebp,eax
c002110b:	83 f5 1f             	xor    ebp,0x1f
c002110e:	75 1c                	jne    c002112c <__umoddi3+0x88>
c0021110:	39 d8                	cmp    eax,ebx
c0021112:	72 04                	jb     c0021118 <__umoddi3+0x74>
c0021114:	39 f7                	cmp    edi,esi
c0021116:	77 08                	ja     c0021120 <__umoddi3+0x7c>
c0021118:	89 da                	mov    edx,ebx
c002111a:	29 fe                	sub    esi,edi
c002111c:	19 c2                	sbb    edx,eax
c002111e:	89 f1                	mov    ecx,esi
c0021120:	89 c8                	mov    eax,ecx
c0021122:	83 c4 1c             	add    esp,0x1c
c0021125:	5b                   	pop    ebx
c0021126:	5e                   	pop    esi
c0021127:	5f                   	pop    edi
c0021128:	5d                   	pop    ebp
c0021129:	c3                   	ret    
c002112a:	66 90                	xchg   ax,ax
c002112c:	ba 20 00 00 00       	mov    edx,0x20
c0021131:	29 ea                	sub    edx,ebp
c0021133:	89 e9                	mov    ecx,ebp
c0021135:	d3 e0                	shl    eax,cl
c0021137:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002113b:	89 f8                	mov    eax,edi
c002113d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021141:	88 d1                	mov    cl,dl
c0021143:	d3 e8                	shr    eax,cl
c0021145:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021149:	09 c1                	or     ecx,eax
c002114b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002114f:	89 e9                	mov    ecx,ebp
c0021151:	d3 e7                	shl    edi,cl
c0021153:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021157:	89 d8                	mov    eax,ebx
c0021159:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002115d:	88 d1                	mov    cl,dl
c002115f:	d3 e8                	shr    eax,cl
c0021161:	89 c7                	mov    edi,eax
c0021163:	89 e9                	mov    ecx,ebp
c0021165:	d3 e3                	shl    ebx,cl
c0021167:	89 f0                	mov    eax,esi
c0021169:	88 d1                	mov    cl,dl
c002116b:	d3 e8                	shr    eax,cl
c002116d:	09 d8                	or     eax,ebx
c002116f:	89 e9                	mov    ecx,ebp
c0021171:	d3 e6                	shl    esi,cl
c0021173:	89 f3                	mov    ebx,esi
c0021175:	89 fa                	mov    edx,edi
c0021177:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002117b:	89 d1                	mov    ecx,edx
c002117d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021181:	89 c6                	mov    esi,eax
c0021183:	89 d7                	mov    edi,edx
c0021185:	39 d1                	cmp    ecx,edx
c0021187:	72 27                	jb     c00211b0 <__umoddi3+0x10c>
c0021189:	74 21                	je     c00211ac <__umoddi3+0x108>
c002118b:	89 ca                	mov    edx,ecx
c002118d:	29 f3                	sub    ebx,esi
c002118f:	19 fa                	sbb    edx,edi
c0021191:	89 d0                	mov    eax,edx
c0021193:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0021197:	d3 e0                	shl    eax,cl
c0021199:	89 e9                	mov    ecx,ebp
c002119b:	d3 eb                	shr    ebx,cl
c002119d:	09 d8                	or     eax,ebx
c002119f:	d3 ea                	shr    edx,cl
c00211a1:	83 c4 1c             	add    esp,0x1c
c00211a4:	5b                   	pop    ebx
c00211a5:	5e                   	pop    esi
c00211a6:	5f                   	pop    edi
c00211a7:	5d                   	pop    ebp
c00211a8:	c3                   	ret    
c00211a9:	8d 76 00             	lea    esi,[esi+0x0]
c00211ac:	39 c3                	cmp    ebx,eax
c00211ae:	73 db                	jae    c002118b <__umoddi3+0xe7>
c00211b0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00211b4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00211b8:	89 d7                	mov    edi,edx
c00211ba:	89 c6                	mov    esi,eax
c00211bc:	eb cd                	jmp    c002118b <__umoddi3+0xe7>

Disassembly of section .init:

c00211be <_init>:
c00211be:	55                   	push   ebp
c00211bf:	89 e5                	mov    ebp,esp
c00211c1:	e8 52 ef fd ff       	call   c0000118 <frame_dummy>
c00211c6:	e8 e5 fa ff ff       	call   c0020cb0 <__do_global_ctors_aux>
c00211cb:	5d                   	pop    ebp
c00211cc:	c3                   	ret    

Disassembly of section .fini:

c00211cd <_fini>:
c00211cd:	55                   	push   ebp
c00211ce:	89 e5                	mov    ebp,esp
c00211d0:	e8 d3 ee fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00211d5:	5d                   	pop    ebp
c00211d6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00211d8 <Computer::~Computer()>:
c00211d8:	83 ec 0c             	sub    esp,0xc
c00211db:	ba f4 27 02 c0       	mov    edx,0xc00227f4
c00211e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211e4:	89 10                	mov    DWORD PTR [eax],edx
c00211e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211ea:	83 ec 0c             	sub    esp,0xc
c00211ed:	50                   	push   eax
c00211ee:	e8 01 cc fe ff       	call   c000ddf4 <Device::~Device()>
c00211f3:	83 c4 10             	add    esp,0x10
c00211f6:	90                   	nop
c00211f7:	83 c4 0c             	add    esp,0xc
c00211fa:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00211fc <Computer::~Computer()>:
c00211fc:	83 ec 0c             	sub    esp,0xc
c00211ff:	83 ec 0c             	sub    esp,0xc
c0021202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021206:	e8 cd ff ff ff       	call   c00211d8 <Computer::~Computer()>
c002120b:	83 c4 10             	add    esp,0x10
c002120e:	83 ec 08             	sub    esp,0x8
c0021211:	68 ec 01 00 00       	push   0x1ec
c0021216:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002121a:	e8 df b7 fe ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c002121f:	83 c4 10             	add    esp,0x10
c0021222:	83 c4 0c             	add    esp,0xc
c0021225:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0021226 <idleCommon()>:
c0021226:	83 ec 0c             	sub    esp,0xc
c0021229:	fa                   	cli    
c002122a:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c0021230:	e8 3f 6d ff ff       	call   c0017f74 <schedule()>
c0021235:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c002123a:	48                   	dec    eax
c002123b:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c0021240:	75 01                	jne    c0021243 <idleCommon()+0x1d>
c0021242:	fb                   	sti    
c0021243:	83 c4 0c             	add    esp,0xc
c0021246:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0021248 <LinkedList<UnixFile>::~LinkedList()>:
c0021248:	90                   	nop
c0021249:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002124a <LinkedList<UnixFile>::LinkedList()>:
c002124a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002124e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021254:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021258:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002125f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021263:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002126a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002126e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021278:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002127f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021283:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002128a:	90                   	nop
c002128b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002128c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002128c:	83 ec 0c             	sub    esp,0xc
c002128f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021294:	75 10                	jne    c00212a6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0021296:	83 ec 0c             	sub    esp,0xc
c0021299:	68 44 2b 02 c0       	push   0xc0022b44
c002129e:	e8 fe 30 ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c00212a3:	83 c4 10             	add    esp,0x10
c00212a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00212ac:	85 c0                	test   eax,eax
c00212ae:	74 34                	je     c00212e4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00212b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00212b7:	85 c0                	test   eax,eax
c00212b9:	74 29                	je     c00212e4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00212bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00212c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00212c6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00212c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212cd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00212d1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00212d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00212db:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00212e2:	eb 65                	jmp    c0021349 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00212e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00212ea:	85 c0                	test   eax,eax
c00212ec:	75 4b                	jne    c0021339 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00212ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00212f5:	85 c0                	test   eax,eax
c00212f7:	75 40                	jne    c0021339 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00212f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021301:	89 10                	mov    DWORD PTR [eax],edx
c0021303:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021307:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002130b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002130e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021312:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021315:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002131c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021320:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021323:	85 c0                	test   eax,eax
c0021325:	74 22                	je     c0021349 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021327:	83 ec 0c             	sub    esp,0xc
c002132a:	68 66 2b 02 c0       	push   0xc0022b66
c002132f:	e8 6d 30 ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c0021334:	83 c4 10             	add    esp,0x10
c0021337:	eb 10                	jmp    c0021349 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021339:	83 ec 0c             	sub    esp,0xc
c002133c:	68 70 2b 02 c0       	push   0xc0022b70
c0021341:	e8 5b 30 ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c0021346:	83 c4 10             	add    esp,0x10
c0021349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002134d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021350:	8d 50 01             	lea    edx,[eax+0x1]
c0021353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021357:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002135a:	90                   	nop
c002135b:	83 c4 0c             	add    esp,0xc
c002135e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0021360 <LinkedList<UnixFile>::getFirstElement()>:
c0021360:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021364:	8b 00                	mov    eax,DWORD PTR [eax]
c0021366:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0021368 <LinkedList<UnixFile>::removeFirst()>:
c0021368:	83 ec 0c             	sub    esp,0xc
c002136b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002136f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021371:	85 c0                	test   eax,eax
c0021373:	75 12                	jne    c0021387 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0021375:	83 ec 0c             	sub    esp,0xc
c0021378:	68 7c 2b 02 c0       	push   0xc0022b7c
c002137d:	e8 1f 30 ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c0021382:	83 c4 10             	add    esp,0x10
c0021385:	eb 7e                	jmp    c0021405 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0021387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002138b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002138e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021391:	85 c0                	test   eax,eax
c0021393:	74 10                	je     c00213a5 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0021395:	83 ec 0c             	sub    esp,0xc
c0021398:	68 c7 2b 02 c0       	push   0xc0022bc7
c002139d:	e8 ff 2f ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c00213a2:	83 c4 10             	add    esp,0x10
c00213a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00213ab:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00213ae:	85 c0                	test   eax,eax
c00213b0:	75 33                	jne    c00213e5 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00213b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213b6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00213bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213c0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00213c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213cb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00213ce:	83 f8 01             	cmp    eax,0x1
c00213d1:	74 21                	je     c00213f4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00213d3:	83 ec 0c             	sub    esp,0xc
c00213d6:	68 a0 2b 02 c0       	push   0xc0022ba0
c00213db:	e8 c1 2f ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c00213e0:	83 c4 10             	add    esp,0x10
c00213e3:	eb 0f                	jmp    c00213f4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00213e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00213eb:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00213ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213f2:	89 10                	mov    DWORD PTR [eax],edx
c00213f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213f8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00213fb:	8d 50 ff             	lea    edx,[eax-0x1]
c00213fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021402:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021405:	83 c4 0c             	add    esp,0xc
c0021408:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002140a <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002140a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002140e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021411:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0021412 <DriverlessDevice::~DriverlessDevice()>:
c0021412:	ba 3c 34 02 c0       	mov    edx,0xc002343c
c0021417:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002141b:	89 10                	mov    DWORD PTR [eax],edx
c002141d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021421:	50                   	push   eax
c0021422:	e8 cd c9 fe ff       	call   c000ddf4 <Device::~Device()>
c0021427:	83 c4 04             	add    esp,0x4
c002142a:	90                   	nop
c002142b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002142c <DriverlessDevice::~DriverlessDevice()>:
c002142c:	83 ec 0c             	sub    esp,0xc
c002142f:	83 ec 0c             	sub    esp,0xc
c0021432:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021436:	e8 d7 ff ff ff       	call   c0021412 <DriverlessDevice::~DriverlessDevice()>
c002143b:	83 c4 10             	add    esp,0x10
c002143e:	83 ec 08             	sub    esp,0x8
c0021441:	68 58 01 00 00       	push   0x158
c0021446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002144a:	e8 af b5 fe ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c002144f:	83 c4 10             	add    esp,0x10
c0021452:	83 c4 0c             	add    esp,0xc
c0021455:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0021456 <LinkedList<Device>::addElement(Device*)>:
c0021456:	83 ec 0c             	sub    esp,0xc
c0021459:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002145e:	75 10                	jne    c0021470 <LinkedList<Device>::addElement(Device*)+0x1a>
c0021460:	83 ec 0c             	sub    esp,0xc
c0021463:	68 44 2b 02 c0       	push   0xc0022b44
c0021468:	e8 34 2f ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c002146d:	83 c4 10             	add    esp,0x10
c0021470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021474:	8b 00                	mov    eax,DWORD PTR [eax]
c0021476:	85 c0                	test   eax,eax
c0021478:	74 3a                	je     c00214b4 <LinkedList<Device>::addElement(Device*)+0x5e>
c002147a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002147e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021481:	85 c0                	test   eax,eax
c0021483:	74 2f                	je     c00214b4 <LinkedList<Device>::addElement(Device*)+0x5e>
c0021485:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021489:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002148c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021490:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0021496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002149a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002149e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00214a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214a5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00214a8:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00214b2:	eb 68                	jmp    c002151c <LinkedList<Device>::addElement(Device*)+0xc6>
c00214b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00214ba:	85 c0                	test   eax,eax
c00214bc:	75 4e                	jne    c002150c <LinkedList<Device>::addElement(Device*)+0xb6>
c00214be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00214c5:	85 c0                	test   eax,eax
c00214c7:	75 43                	jne    c002150c <LinkedList<Device>::addElement(Device*)+0xb6>
c00214c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214cd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00214d1:	89 10                	mov    DWORD PTR [eax],edx
c00214d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214d7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00214db:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00214de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00214e5:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00214ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214f3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00214f6:	85 c0                	test   eax,eax
c00214f8:	74 22                	je     c002151c <LinkedList<Device>::addElement(Device*)+0xc6>
c00214fa:	83 ec 0c             	sub    esp,0xc
c00214fd:	68 66 2b 02 c0       	push   0xc0022b66
c0021502:	e8 9a 2e ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c0021507:	83 c4 10             	add    esp,0x10
c002150a:	eb 10                	jmp    c002151c <LinkedList<Device>::addElement(Device*)+0xc6>
c002150c:	83 ec 0c             	sub    esp,0xc
c002150f:	68 70 2b 02 c0       	push   0xc0022b70
c0021514:	e8 88 2e ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c0021519:	83 c4 10             	add    esp,0x10
c002151c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021520:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021523:	8d 50 01             	lea    edx,[eax+0x1]
c0021526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002152a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002152d:	90                   	nop
c002152e:	83 c4 0c             	add    esp,0xc
c0021531:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0021532 <LinkedList<Device>::LinkedList()>:
c0021532:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021536:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002153c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021540:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021547:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002154b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021552:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021556:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002155c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021560:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021567:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002156b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021572:	90                   	nop
c0021573:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0021574 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0021574:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021578:	8b 00                	mov    eax,DWORD PTR [eax]
c002157a:	85 c0                	test   eax,eax
c002157c:	75 0e                	jne    c002158c <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002157e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021582:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021585:	85 c0                	test   eax,eax
c0021587:	75 03                	jne    c002158c <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021589:	b0 01                	mov    al,0x1
c002158b:	c3                   	ret    
c002158c:	b0 00                	mov    al,0x0
c002158e:	90                   	nop
c002158f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0021590 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0021590:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021594:	8b 00                	mov    eax,DWORD PTR [eax]
c0021596:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0021598 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0021598:	83 ec 0c             	sub    esp,0xc
c002159b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002159f:	8b 00                	mov    eax,DWORD PTR [eax]
c00215a1:	85 c0                	test   eax,eax
c00215a3:	75 17                	jne    c00215bc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c00215a5:	83 ec 0c             	sub    esp,0xc
c00215a8:	68 7c 2b 02 c0       	push   0xc0022b7c
c00215ad:	e8 ef 2d ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c00215b2:	83 c4 10             	add    esp,0x10
c00215b5:	e9 92 00 00 00       	jmp    c002164c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c00215ba:	66 90                	xchg   ax,ax
c00215bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00215c3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00215c6:	85 c0                	test   eax,eax
c00215c8:	0f 95 c0             	setne  al
c00215cb:	84 c0                	test   al,al
c00215cd:	74 11                	je     c00215e0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c00215cf:	83 ec 0c             	sub    esp,0xc
c00215d2:	68 c7 2b 02 c0       	push   0xc0022bc7
c00215d7:	e8 c5 2d ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c00215dc:	83 c4 10             	add    esp,0x10
c00215df:	90                   	nop
c00215e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00215e6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00215e9:	85 c0                	test   eax,eax
c00215eb:	0f 94 c0             	sete   al
c00215ee:	84 c0                	test   al,al
c00215f0:	74 36                	je     c0021628 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c00215f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215f6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00215fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021600:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002160b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002160e:	83 f8 01             	cmp    eax,0x1
c0021611:	74 25                	je     c0021638 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0021613:	83 ec 0c             	sub    esp,0xc
c0021616:	68 a0 2b 02 c0       	push   0xc0022ba0
c002161b:	e8 81 2d ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c0021620:	83 c4 10             	add    esp,0x10
c0021623:	eb 13                	jmp    c0021638 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0021625:	8d 76 00             	lea    esi,[esi+0x0]
c0021628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002162c:	8b 00                	mov    eax,DWORD PTR [eax]
c002162e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0021631:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021635:	89 10                	mov    DWORD PTR [eax],edx
c0021637:	90                   	nop
c0021638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002163c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002163f:	8d 50 ff             	lea    edx,[eax-0x1]
c0021642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021646:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021649:	8d 76 00             	lea    esi,[esi+0x0]
c002164c:	83 c4 0c             	add    esp,0xc
c002164f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0021650 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0021650:	83 ec 0c             	sub    esp,0xc
c0021653:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021658:	75 12                	jne    c002166c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c002165a:	83 ec 0c             	sub    esp,0xc
c002165d:	68 44 2b 02 c0       	push   0xc0022b44
c0021662:	e8 3a 2d ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c0021667:	83 c4 10             	add    esp,0x10
c002166a:	66 90                	xchg   ax,ax
c002166c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021670:	8b 00                	mov    eax,DWORD PTR [eax]
c0021672:	85 c0                	test   eax,eax
c0021674:	74 36                	je     c00216ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002167a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002167d:	85 c0                	test   eax,eax
c002167f:	74 2b                	je     c00216ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021685:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021688:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002168c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002168f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021693:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021697:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002169a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002169e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00216a1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00216a8:	eb 6a                	jmp    c0021714 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00216aa:	66 90                	xchg   ax,ax
c00216ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00216b2:	85 c0                	test   eax,eax
c00216b4:	75 4e                	jne    c0021704 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00216b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00216bd:	85 c0                	test   eax,eax
c00216bf:	75 43                	jne    c0021704 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00216c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216c5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216c9:	89 10                	mov    DWORD PTR [eax],edx
c00216cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216cf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216d3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00216d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00216dd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00216e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216e8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00216eb:	85 c0                	test   eax,eax
c00216ed:	74 25                	je     c0021714 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00216ef:	83 ec 0c             	sub    esp,0xc
c00216f2:	68 66 2b 02 c0       	push   0xc0022b66
c00216f7:	e8 a5 2c ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c00216fc:	83 c4 10             	add    esp,0x10
c00216ff:	eb 13                	jmp    c0021714 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021701:	8d 76 00             	lea    esi,[esi+0x0]
c0021704:	83 ec 0c             	sub    esp,0xc
c0021707:	68 70 2b 02 c0       	push   0xc0022b70
c002170c:	e8 90 2c ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c0021711:	83 c4 10             	add    esp,0x10
c0021714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021718:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002171b:	8d 50 01             	lea    edx,[eax+0x1]
c002171e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021722:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021725:	90                   	nop
c0021726:	83 c4 0c             	add    esp,0xc
c0021729:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c002172c <ACPI::~ACPI()>:
c002172c:	83 ec 0c             	sub    esp,0xc
c002172f:	ba 0c 3f 02 c0       	mov    edx,0xc0023f0c
c0021734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021738:	89 10                	mov    DWORD PTR [eax],edx
c002173a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002173e:	83 ec 0c             	sub    esp,0xc
c0021741:	50                   	push   eax
c0021742:	e8 ad c6 fe ff       	call   c000ddf4 <Device::~Device()>
c0021747:	83 c4 10             	add    esp,0x10
c002174a:	90                   	nop
c002174b:	83 c4 0c             	add    esp,0xc
c002174e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0021750 <ACPI::~ACPI()>:
c0021750:	83 ec 0c             	sub    esp,0xc
c0021753:	83 ec 0c             	sub    esp,0xc
c0021756:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002175a:	e8 cd ff ff ff       	call   c002172c <ACPI::~ACPI()>
c002175f:	83 c4 10             	add    esp,0x10
c0021762:	83 ec 08             	sub    esp,0x8
c0021765:	68 64 12 00 00       	push   0x1264
c002176a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002176e:	e8 8b b2 fe ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c0021773:	83 c4 10             	add    esp,0x10
c0021776:	83 c4 0c             	add    esp,0xc
c0021779:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002177c <LinkedList<Device>::~LinkedList()>:
c002177c:	90                   	nop
c002177d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0021780 <LinkedList<Device>::isEmpty()>:
c0021780:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021784:	8b 00                	mov    eax,DWORD PTR [eax]
c0021786:	85 c0                	test   eax,eax
c0021788:	75 0e                	jne    c0021798 <LinkedList<Device>::isEmpty()+0x18>
c002178a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002178e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021791:	85 c0                	test   eax,eax
c0021793:	75 03                	jne    c0021798 <LinkedList<Device>::isEmpty()+0x18>
c0021795:	b0 01                	mov    al,0x1
c0021797:	c3                   	ret    
c0021798:	b0 00                	mov    al,0x0
c002179a:	90                   	nop
c002179b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002179c <LinkedList<Device>::getFirstElement()>:
c002179c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00217a2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c00217a4 <LinkedList<Device>::removeFirst()>:
c00217a4:	83 ec 0c             	sub    esp,0xc
c00217a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00217ad:	85 c0                	test   eax,eax
c00217af:	75 17                	jne    c00217c8 <LinkedList<Device>::removeFirst()+0x24>
c00217b1:	83 ec 0c             	sub    esp,0xc
c00217b4:	68 7c 2b 02 c0       	push   0xc0022b7c
c00217b9:	e8 e3 2b ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c00217be:	83 c4 10             	add    esp,0x10
c00217c1:	e9 92 00 00 00       	jmp    c0021858 <LinkedList<Device>::removeFirst()+0xb4>
c00217c6:	66 90                	xchg   ax,ax
c00217c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00217cf:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00217d5:	85 c0                	test   eax,eax
c00217d7:	74 13                	je     c00217ec <LinkedList<Device>::removeFirst()+0x48>
c00217d9:	83 ec 0c             	sub    esp,0xc
c00217dc:	68 c7 2b 02 c0       	push   0xc0022bc7
c00217e1:	e8 bb 2b ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c00217e6:	83 c4 10             	add    esp,0x10
c00217e9:	8d 76 00             	lea    esi,[esi+0x0]
c00217ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00217f2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00217f8:	85 c0                	test   eax,eax
c00217fa:	75 34                	jne    c0021830 <LinkedList<Device>::removeFirst()+0x8c>
c00217fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021800:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021806:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002180a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021815:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021818:	83 f8 01             	cmp    eax,0x1
c002181b:	74 27                	je     c0021844 <LinkedList<Device>::removeFirst()+0xa0>
c002181d:	83 ec 0c             	sub    esp,0xc
c0021820:	68 a0 2b 02 c0       	push   0xc0022ba0
c0021825:	e8 77 2b ff ff       	call   c00143a1 <Krnl::panic(char const*)>
c002182a:	83 c4 10             	add    esp,0x10
c002182d:	eb 15                	jmp    c0021844 <LinkedList<Device>::removeFirst()+0xa0>
c002182f:	90                   	nop
c0021830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021834:	8b 00                	mov    eax,DWORD PTR [eax]
c0021836:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002183c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021840:	89 10                	mov    DWORD PTR [eax],edx
c0021842:	66 90                	xchg   ax,ax
c0021844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021848:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002184b:	8d 50 ff             	lea    edx,[eax-0x1]
c002184e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021852:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021855:	8d 76 00             	lea    esi,[esi+0x0]
c0021858:	83 c4 0c             	add    esp,0xc
c002185b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002185c <CPU::~CPU()>:
c002185c:	83 ec 0c             	sub    esp,0xc
c002185f:	ba a8 42 02 c0       	mov    edx,0xc00242a8
c0021864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021868:	89 10                	mov    DWORD PTR [eax],edx
c002186a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002186e:	83 ec 0c             	sub    esp,0xc
c0021871:	50                   	push   eax
c0021872:	e8 7d c5 fe ff       	call   c000ddf4 <Device::~Device()>
c0021877:	83 c4 10             	add    esp,0x10
c002187a:	90                   	nop
c002187b:	83 c4 0c             	add    esp,0xc
c002187e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0021880 <CPU::~CPU()>:
c0021880:	83 ec 0c             	sub    esp,0xc
c0021883:	83 ec 0c             	sub    esp,0xc
c0021886:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002188a:	e8 cd ff ff ff       	call   c002185c <CPU::~CPU()>
c002188f:	83 c4 10             	add    esp,0x10
c0021892:	83 ec 08             	sub    esp,0x8
c0021895:	68 98 11 00 00       	push   0x1198
c002189a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002189e:	e8 5b b1 fe ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c00218a3:	83 c4 10             	add    esp,0x10
c00218a6:	83 c4 0c             	add    esp,0xc
c00218a9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00218ac <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00218ac:	90                   	nop
c00218ad:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00218b0 <ThreadControlBlock::ThreadControlBlock()>:
c00218b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218b4:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00218bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218bf:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00218c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218ca:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00218d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218d5:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c00218dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218e0:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c00218e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218eb:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00218ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218f3:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c00218f7:	90                   	nop
c00218f8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00218fc <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00218fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021900:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002190a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021911:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021915:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002191c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021920:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021926:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002192a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021931:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021935:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002193c:	90                   	nop
c002193d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0021940 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0021940:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021944:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021947:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0021948 <Vm::_FPUState::_FPUState()>:
c0021948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002194c:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0021953:	90                   	nop
c0021954:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0021956 <PCI::~PCI()>:
c0021956:	83 ec 0c             	sub    esp,0xc
c0021959:	ba 08 50 02 c0       	mov    edx,0xc0025008
c002195e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021962:	89 10                	mov    DWORD PTR [eax],edx
c0021964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021968:	83 ec 0c             	sub    esp,0xc
c002196b:	50                   	push   eax
c002196c:	e8 53 be fe ff       	call   c000d7c4 <Bus::~Bus()>
c0021971:	83 c4 10             	add    esp,0x10
c0021974:	90                   	nop
c0021975:	83 c4 0c             	add    esp,0xc
c0021978:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002197a <PCI::~PCI()>:
c002197a:	83 ec 0c             	sub    esp,0xc
c002197d:	83 ec 0c             	sub    esp,0xc
c0021980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021984:	e8 cd ff ff ff       	call   c0021956 <PCI::~PCI()>
c0021989:	83 c4 10             	add    esp,0x10
c002198c:	83 ec 08             	sub    esp,0x8
c002198f:	68 5c 01 00 00       	push   0x15c
c0021994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021998:	e8 61 b0 fe ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c002199d:	83 c4 10             	add    esp,0x10
c00219a0:	83 c4 0c             	add    esp,0xc
c00219a3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00219a4 <IDE::~IDE()>:
c00219a4:	83 ec 0c             	sub    esp,0xc
c00219a7:	ba bc 50 02 c0       	mov    edx,0xc00250bc
c00219ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219b0:	89 10                	mov    DWORD PTR [eax],edx
c00219b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219b6:	83 ec 0c             	sub    esp,0xc
c00219b9:	50                   	push   eax
c00219ba:	e8 4d c9 fe ff       	call   c000e30c <HardDiskController::~HardDiskController()>
c00219bf:	83 c4 10             	add    esp,0x10
c00219c2:	90                   	nop
c00219c3:	83 c4 0c             	add    esp,0xc
c00219c6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00219c8 <IDE::~IDE()>:
c00219c8:	83 ec 0c             	sub    esp,0xc
c00219cb:	83 ec 0c             	sub    esp,0xc
c00219ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219d2:	e8 cd ff ff ff       	call   c00219a4 <IDE::~IDE()>
c00219d7:	83 c4 10             	add    esp,0x10
c00219da:	83 ec 08             	sub    esp,0x8
c00219dd:	68 70 02 00 00       	push   0x270
c00219e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219e6:	e8 13 b0 fe ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c00219eb:	83 c4 10             	add    esp,0x10
c00219ee:	83 c4 0c             	add    esp,0xc
c00219f1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00219f2 <SATABus::~SATABus()>:
c00219f2:	83 ec 0c             	sub    esp,0xc
c00219f5:	ba 34 51 02 c0       	mov    edx,0xc0025134
c00219fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219fe:	89 10                	mov    DWORD PTR [eax],edx
c0021a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a04:	83 ec 0c             	sub    esp,0xc
c0021a07:	50                   	push   eax
c0021a08:	e8 ff c8 fe ff       	call   c000e30c <HardDiskController::~HardDiskController()>
c0021a0d:	83 c4 10             	add    esp,0x10
c0021a10:	90                   	nop
c0021a11:	83 c4 0c             	add    esp,0xc
c0021a14:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0021a16 <SATABus::~SATABus()>:
c0021a16:	83 ec 0c             	sub    esp,0xc
c0021a19:	83 ec 0c             	sub    esp,0xc
c0021a1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a20:	e8 cd ff ff ff       	call   c00219f2 <SATABus::~SATABus()>
c0021a25:	83 c4 10             	add    esp,0x10
c0021a28:	83 ec 08             	sub    esp,0x8
c0021a2b:	68 64 01 00 00       	push   0x164
c0021a30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a34:	e8 c5 af fe ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c0021a39:	83 c4 10             	add    esp,0x10
c0021a3c:	83 c4 0c             	add    esp,0xc
c0021a3f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0021a40 <ATA::~ATA()>:
c0021a40:	83 ec 0c             	sub    esp,0xc
c0021a43:	ba ac 51 02 c0       	mov    edx,0xc00251ac
c0021a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a4c:	89 10                	mov    DWORD PTR [eax],edx
c0021a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a52:	83 ec 0c             	sub    esp,0xc
c0021a55:	50                   	push   eax
c0021a56:	e8 93 c9 fe ff       	call   c000e3ee <PhysicalDisk::~PhysicalDisk()>
c0021a5b:	83 c4 10             	add    esp,0x10
c0021a5e:	90                   	nop
c0021a5f:	83 c4 0c             	add    esp,0xc
c0021a62:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0021a64 <ATA::~ATA()>:
c0021a64:	83 ec 0c             	sub    esp,0xc
c0021a67:	83 ec 0c             	sub    esp,0xc
c0021a6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a6e:	e8 cd ff ff ff       	call   c0021a40 <ATA::~ATA()>
c0021a73:	83 c4 10             	add    esp,0x10
c0021a76:	83 ec 08             	sub    esp,0x8
c0021a79:	68 7c 01 00 00       	push   0x17c
c0021a7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a82:	e8 77 af fe ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c0021a87:	83 c4 10             	add    esp,0x10
c0021a8a:	83 c4 0c             	add    esp,0xc
c0021a8d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0021a8e <ATAPI::~ATAPI()>:
c0021a8e:	83 ec 0c             	sub    esp,0xc
c0021a91:	ba e4 51 02 c0       	mov    edx,0xc00251e4
c0021a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a9a:	89 10                	mov    DWORD PTR [eax],edx
c0021a9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021aa0:	83 ec 0c             	sub    esp,0xc
c0021aa3:	50                   	push   eax
c0021aa4:	e8 45 c9 fe ff       	call   c000e3ee <PhysicalDisk::~PhysicalDisk()>
c0021aa9:	83 c4 10             	add    esp,0x10
c0021aac:	90                   	nop
c0021aad:	83 c4 0c             	add    esp,0xc
c0021ab0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0021ab2 <ATAPI::~ATAPI()>:
c0021ab2:	83 ec 0c             	sub    esp,0xc
c0021ab5:	83 ec 0c             	sub    esp,0xc
c0021ab8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021abc:	e8 cd ff ff ff       	call   c0021a8e <ATAPI::~ATAPI()>
c0021ac1:	83 c4 10             	add    esp,0x10
c0021ac4:	83 ec 08             	sub    esp,0x8
c0021ac7:	68 80 01 00 00       	push   0x180
c0021acc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ad0:	e8 29 af fe ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c0021ad5:	83 c4 10             	add    esp,0x10
c0021ad8:	83 c4 0c             	add    esp,0xc
c0021adb:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0021adc <SATA::~SATA()>:
c0021adc:	83 ec 0c             	sub    esp,0xc
c0021adf:	ba 98 52 02 c0       	mov    edx,0xc0025298
c0021ae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ae8:	89 10                	mov    DWORD PTR [eax],edx
c0021aea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021aee:	83 ec 0c             	sub    esp,0xc
c0021af1:	50                   	push   eax
c0021af2:	e8 f7 c8 fe ff       	call   c000e3ee <PhysicalDisk::~PhysicalDisk()>
c0021af7:	83 c4 10             	add    esp,0x10
c0021afa:	90                   	nop
c0021afb:	83 c4 0c             	add    esp,0xc
c0021afe:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0021b00 <SATA::~SATA()>:
c0021b00:	83 ec 0c             	sub    esp,0xc
c0021b03:	83 ec 0c             	sub    esp,0xc
c0021b06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b0a:	e8 cd ff ff ff       	call   c0021adc <SATA::~SATA()>
c0021b0f:	83 c4 10             	add    esp,0x10
c0021b12:	83 ec 08             	sub    esp,0x8
c0021b15:	68 7c 01 00 00       	push   0x17c
c0021b1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b1e:	e8 db ae fe ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c0021b23:	83 c4 10             	add    esp,0x10
c0021b26:	83 c4 0c             	add    esp,0xc
c0021b29:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0021b2a <SATAPI::~SATAPI()>:
c0021b2a:	83 ec 0c             	sub    esp,0xc
c0021b2d:	ba 74 53 02 c0       	mov    edx,0xc0025374
c0021b32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b36:	89 10                	mov    DWORD PTR [eax],edx
c0021b38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b3c:	83 ec 0c             	sub    esp,0xc
c0021b3f:	50                   	push   eax
c0021b40:	e8 a9 c8 fe ff       	call   c000e3ee <PhysicalDisk::~PhysicalDisk()>
c0021b45:	83 c4 10             	add    esp,0x10
c0021b48:	90                   	nop
c0021b49:	83 c4 0c             	add    esp,0xc
c0021b4c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0021b4e <SATAPI::~SATAPI()>:
c0021b4e:	83 ec 0c             	sub    esp,0xc
c0021b51:	83 ec 0c             	sub    esp,0xc
c0021b54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b58:	e8 cd ff ff ff       	call   c0021b2a <SATAPI::~SATAPI()>
c0021b5d:	83 c4 10             	add    esp,0x10
c0021b60:	83 ec 08             	sub    esp,0x8
c0021b63:	68 80 01 00 00       	push   0x180
c0021b68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b6c:	e8 8d ae fe ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c0021b71:	83 c4 10             	add    esp,0x10
c0021b74:	83 c4 0c             	add    esp,0xc
c0021b77:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0021b78 <AVX::~AVX()>:
c0021b78:	83 ec 0c             	sub    esp,0xc
c0021b7b:	ba b4 53 02 c0       	mov    edx,0xc00253b4
c0021b80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b84:	89 10                	mov    DWORD PTR [eax],edx
c0021b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b8a:	83 ec 0c             	sub    esp,0xc
c0021b8d:	50                   	push   eax
c0021b8e:	e8 e1 c8 fe ff       	call   c000e474 <FPU::~FPU()>
c0021b93:	83 c4 10             	add    esp,0x10
c0021b96:	90                   	nop
c0021b97:	83 c4 0c             	add    esp,0xc
c0021b9a:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0021b9c <AVX::~AVX()>:
c0021b9c:	83 ec 0c             	sub    esp,0xc
c0021b9f:	83 ec 0c             	sub    esp,0xc
c0021ba2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ba6:	e8 cd ff ff ff       	call   c0021b78 <AVX::~AVX()>
c0021bab:	83 c4 10             	add    esp,0x10
c0021bae:	83 ec 08             	sub    esp,0x8
c0021bb1:	68 58 01 00 00       	push   0x158
c0021bb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021bba:	e8 3f ae fe ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c0021bbf:	83 c4 10             	add    esp,0x10
c0021bc2:	83 c4 0c             	add    esp,0xc
c0021bc5:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0021bc8 <MMX::~MMX()>:
c0021bc8:	83 ec 0c             	sub    esp,0xc
c0021bcb:	ba f4 53 02 c0       	mov    edx,0xc00253f4
c0021bd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bd4:	89 10                	mov    DWORD PTR [eax],edx
c0021bd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bda:	83 ec 0c             	sub    esp,0xc
c0021bdd:	50                   	push   eax
c0021bde:	e8 91 c8 fe ff       	call   c000e474 <FPU::~FPU()>
c0021be3:	83 c4 10             	add    esp,0x10
c0021be6:	90                   	nop
c0021be7:	83 c4 0c             	add    esp,0xc
c0021bea:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0021bec <MMX::~MMX()>:
c0021bec:	83 ec 0c             	sub    esp,0xc
c0021bef:	83 ec 0c             	sub    esp,0xc
c0021bf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021bf6:	e8 cd ff ff ff       	call   c0021bc8 <MMX::~MMX()>
c0021bfb:	83 c4 10             	add    esp,0x10
c0021bfe:	83 ec 08             	sub    esp,0x8
c0021c01:	68 58 01 00 00       	push   0x158
c0021c06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c0a:	e8 ef ad fe ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c0021c0f:	83 c4 10             	add    esp,0x10
c0021c12:	83 c4 0c             	add    esp,0xc
c0021c15:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0021c18 <SSE::~SSE()>:
c0021c18:	83 ec 0c             	sub    esp,0xc
c0021c1b:	ba 34 54 02 c0       	mov    edx,0xc0025434
c0021c20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c24:	89 10                	mov    DWORD PTR [eax],edx
c0021c26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c2a:	83 ec 0c             	sub    esp,0xc
c0021c2d:	50                   	push   eax
c0021c2e:	e8 41 c8 fe ff       	call   c000e474 <FPU::~FPU()>
c0021c33:	83 c4 10             	add    esp,0x10
c0021c36:	90                   	nop
c0021c37:	83 c4 0c             	add    esp,0xc
c0021c3a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0021c3c <SSE::~SSE()>:
c0021c3c:	83 ec 0c             	sub    esp,0xc
c0021c3f:	83 ec 0c             	sub    esp,0xc
c0021c42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c46:	e8 cd ff ff ff       	call   c0021c18 <SSE::~SSE()>
c0021c4b:	83 c4 10             	add    esp,0x10
c0021c4e:	83 ec 08             	sub    esp,0x8
c0021c51:	68 58 01 00 00       	push   0x158
c0021c56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c5a:	e8 9f ad fe ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c0021c5f:	83 c4 10             	add    esp,0x10
c0021c62:	83 c4 0c             	add    esp,0xc
c0021c65:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0021c68 <x87::~x87()>:
c0021c68:	83 ec 0c             	sub    esp,0xc
c0021c6b:	ba 74 54 02 c0       	mov    edx,0xc0025474
c0021c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c74:	89 10                	mov    DWORD PTR [eax],edx
c0021c76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c7a:	83 ec 0c             	sub    esp,0xc
c0021c7d:	50                   	push   eax
c0021c7e:	e8 f1 c7 fe ff       	call   c000e474 <FPU::~FPU()>
c0021c83:	83 c4 10             	add    esp,0x10
c0021c86:	90                   	nop
c0021c87:	83 c4 0c             	add    esp,0xc
c0021c8a:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0021c8c <x87::~x87()>:
c0021c8c:	83 ec 0c             	sub    esp,0xc
c0021c8f:	83 ec 0c             	sub    esp,0xc
c0021c92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c96:	e8 cd ff ff ff       	call   c0021c68 <x87::~x87()>
c0021c9b:	83 c4 10             	add    esp,0x10
c0021c9e:	83 ec 08             	sub    esp,0x8
c0021ca1:	68 58 01 00 00       	push   0x158
c0021ca6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021caa:	e8 4f ad fe ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c0021caf:	83 c4 10             	add    esp,0x10
c0021cb2:	83 c4 0c             	add    esp,0xc
c0021cb5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0021cb6 <IOAPIC::~IOAPIC()>:
c0021cb6:	83 ec 0c             	sub    esp,0xc
c0021cb9:	ba cc 55 02 c0       	mov    edx,0xc00255cc
c0021cbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cc2:	89 10                	mov    DWORD PTR [eax],edx
c0021cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cc8:	83 ec 0c             	sub    esp,0xc
c0021ccb:	50                   	push   eax
c0021ccc:	e8 23 c1 fe ff       	call   c000ddf4 <Device::~Device()>
c0021cd1:	83 c4 10             	add    esp,0x10
c0021cd4:	90                   	nop
c0021cd5:	83 c4 0c             	add    esp,0xc
c0021cd8:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0021cda <IOAPIC::~IOAPIC()>:
c0021cda:	83 ec 0c             	sub    esp,0xc
c0021cdd:	83 ec 0c             	sub    esp,0xc
c0021ce0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ce4:	e8 cd ff ff ff       	call   c0021cb6 <IOAPIC::~IOAPIC()>
c0021ce9:	83 c4 10             	add    esp,0x10
c0021cec:	83 ec 08             	sub    esp,0x8
c0021cef:	68 68 01 00 00       	push   0x168
c0021cf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021cf8:	e8 01 ad fe ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c0021cfd:	83 c4 10             	add    esp,0x10
c0021d00:	83 c4 0c             	add    esp,0xc
c0021d03:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0021d04 <APIC::~APIC()>:
c0021d04:	83 ec 0c             	sub    esp,0xc
c0021d07:	ba 84 55 02 c0       	mov    edx,0xc0025584
c0021d0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d10:	89 10                	mov    DWORD PTR [eax],edx
c0021d12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d16:	83 ec 0c             	sub    esp,0xc
c0021d19:	50                   	push   eax
c0021d1a:	e8 29 cc fe ff       	call   c000e948 <InterruptController::~InterruptController()>
c0021d1f:	83 c4 10             	add    esp,0x10
c0021d22:	90                   	nop
c0021d23:	83 c4 0c             	add    esp,0xc
c0021d26:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0021d28 <APIC::~APIC()>:
c0021d28:	83 ec 0c             	sub    esp,0xc
c0021d2b:	83 ec 0c             	sub    esp,0xc
c0021d2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d32:	e8 cd ff ff ff       	call   c0021d04 <APIC::~APIC()>
c0021d37:	83 c4 10             	add    esp,0x10
c0021d3a:	83 ec 08             	sub    esp,0x8
c0021d3d:	68 58 21 00 00       	push   0x2158
c0021d42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d46:	e8 b3 ac fe ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c0021d4b:	83 c4 10             	add    esp,0x10
c0021d4e:	83 c4 0c             	add    esp,0xc
c0021d51:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0021d52 <PIC::~PIC()>:
c0021d52:	83 ec 0c             	sub    esp,0xc
c0021d55:	ba 1c 56 02 c0       	mov    edx,0xc002561c
c0021d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d5e:	89 10                	mov    DWORD PTR [eax],edx
c0021d60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d64:	83 ec 0c             	sub    esp,0xc
c0021d67:	50                   	push   eax
c0021d68:	e8 db cb fe ff       	call   c000e948 <InterruptController::~InterruptController()>
c0021d6d:	83 c4 10             	add    esp,0x10
c0021d70:	90                   	nop
c0021d71:	83 c4 0c             	add    esp,0xc
c0021d74:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0021d76 <PIC::~PIC()>:
c0021d76:	83 ec 0c             	sub    esp,0xc
c0021d79:	83 ec 0c             	sub    esp,0xc
c0021d7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d80:	e8 cd ff ff ff       	call   c0021d52 <PIC::~PIC()>
c0021d85:	83 c4 10             	add    esp,0x10
c0021d88:	83 ec 08             	sub    esp,0x8
c0021d8b:	68 58 21 00 00       	push   0x2158
c0021d90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d94:	e8 65 ac fe ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c0021d99:	83 c4 10             	add    esp,0x10
c0021d9c:	83 c4 0c             	add    esp,0xc
c0021d9f:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0021da0 <APICTimer::~APICTimer()>:
c0021da0:	83 ec 0c             	sub    esp,0xc
c0021da3:	ba 70 56 02 c0       	mov    edx,0xc0025670
c0021da8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dac:	89 10                	mov    DWORD PTR [eax],edx
c0021dae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021db2:	83 ec 0c             	sub    esp,0xc
c0021db5:	50                   	push   eax
c0021db6:	e8 99 e9 fe ff       	call   c0010754 <Timer::~Timer()>
c0021dbb:	83 c4 10             	add    esp,0x10
c0021dbe:	90                   	nop
c0021dbf:	83 c4 0c             	add    esp,0xc
c0021dc2:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0021dc4 <APICTimer::~APICTimer()>:
c0021dc4:	83 ec 0c             	sub    esp,0xc
c0021dc7:	83 ec 0c             	sub    esp,0xc
c0021dca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021dce:	e8 cd ff ff ff       	call   c0021da0 <APICTimer::~APICTimer()>
c0021dd3:	83 c4 10             	add    esp,0x10
c0021dd6:	83 ec 08             	sub    esp,0x8
c0021dd9:	68 60 01 00 00       	push   0x160
c0021dde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021de2:	e8 17 ac fe ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c0021de7:	83 c4 10             	add    esp,0x10
c0021dea:	83 c4 0c             	add    esp,0xc
c0021ded:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0021df0 <PIT::~PIT()>:
c0021df0:	83 ec 0c             	sub    esp,0xc
c0021df3:	ba c0 56 02 c0       	mov    edx,0xc00256c0
c0021df8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dfc:	89 10                	mov    DWORD PTR [eax],edx
c0021dfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e02:	83 ec 0c             	sub    esp,0xc
c0021e05:	50                   	push   eax
c0021e06:	e8 49 e9 fe ff       	call   c0010754 <Timer::~Timer()>
c0021e0b:	83 c4 10             	add    esp,0x10
c0021e0e:	90                   	nop
c0021e0f:	83 c4 0c             	add    esp,0xc
c0021e12:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0021e14 <PIT::~PIT()>:
c0021e14:	83 ec 0c             	sub    esp,0xc
c0021e17:	83 ec 0c             	sub    esp,0xc
c0021e1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e1e:	e8 cd ff ff ff       	call   c0021df0 <PIT::~PIT()>
c0021e23:	83 c4 10             	add    esp,0x10
c0021e26:	83 ec 08             	sub    esp,0x8
c0021e29:	68 5c 01 00 00       	push   0x15c
c0021e2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e32:	e8 c7 ab fe ff       	call   c000c9fe <operator delete(void*, unsigned long)>
c0021e37:	83 c4 10             	add    esp,0x10
c0021e3a:	83 c4 0c             	add    esp,0xc
c0021e3d:	c3                   	ret    
