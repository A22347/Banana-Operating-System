
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d8 fb 00 00       	call   c000fbf8 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 33 86 02 00       	call   c0028658 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 02 92 02 c0       	mov    ebx,0xc0029202
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 10 92 02 c0    	cmp    ebx,0xc0029210
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 38 db 02 c0       	mov    eax,0xc002db38
c0000049:	3d 38 db 02 c0       	cmp    eax,0xc002db38
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 38 db 02 c0       	push   0xc002db38
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 38 db 02 c0       	mov    eax,0xc002db38
c0000075:	2d 38 db 02 c0       	sub    eax,0xc002db38
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 38 db 02 c0       	push   0xc002db38
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 68 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e168,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 18 92 02 c0       	mov    ebx,0xc0029218
c00000bb:	81 eb 14 92 02 c0    	sub    ebx,0xc0029214
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 14 92 02 c0       	mov    esi,0xc0029214
c00000ca:	a1 6c e1 02 c0       	mov    eax,ds:0xc002e16c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 6c e1 02 c0       	mov    ds:0xc002e16c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 6c e1 02 c0       	mov    eax,ds:0xc002e16c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 38 db 02 c0       	push   0xc002db38
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 68 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e168,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 70 e1 02 c0       	push   0xc002e170
c000012c:	68 38 db 02 c0       	push   0xc002db38
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 0d d6 01 00       	call   c001d9a8 <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 47 29 01 00       	call   c0012cfa <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 eb d5 01 00       	call   c001d9a8 <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 39 da 01 00       	call   c001de15 <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 e7 df 01 00       	call   c001e3cc <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 b0 e5 02 c0 	lgdtd  ds:0xc002e5b0
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 24 46 01 00       	call   c0014bfd <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 88 e1 02 c0       	mov    ds:0xc002e188,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 88 e1 02 c0    	mov    DWORD PTR ds:0xc002e188,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d 88 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e188
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 20 92 02 c0 02 	test   BYTE PTR [edx-0x3ffd6de0],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 20 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6de0],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 20 92 02 c0 08 	test   BYTE PTR [edx-0x3ffd6de0],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 20 92 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6de0],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 20 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6de0],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d a0 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e1a0
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d a0 e1 02 c0    	mov    DWORD PTR ds:0xc002e1a0,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 a4 e1 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1e5c]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 a4 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1e5c],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d a0 e1 02 c0    	mov    DWORD PTR ds:0xc002e1a0,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 cc e1 02 c0    	cmp    DWORD PTR ds:0xc002e1cc,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d dc e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e1dc
c0000e60:	c7 42 0c d4 e1 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e1d4
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 dc e1 02 c0    	mov    DWORD PTR ds:0xc002e1dc,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 cc e1 02 c0    	mov    DWORD PTR ds:0xc002e1cc,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 a0 e1 02 c0 02 	test   BYTE PTR ds:0xc002e1a0,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 a0 e1 02 c0       	mov    eax,0xc002e1a0
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d a0 e1 02 c0    	mov    edi,DWORD PTR ds:0xc002e1a0
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 a0 e1 02 c0       	mov    eax,0xc002e1a0
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 a4 e1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1e5c]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 a4 e1 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1e5c],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 d4 e1 02 c0 	lea    edx,[eax*8-0x3ffd1e2c]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 a0 e1 02 c0       	mov    eax,0xc002e1a0
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d e0 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e1e0
c00011e2:	81 fb d4 e1 02 c0    	cmp    ebx,0xc002e1d4
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d d4 e1 02 c0       	cmp    eax,0xc002e1d4
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d d0 e1 02 c0    	cmp    DWORD PTR ds:0xc002e1d0,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 dc e1 02 c0       	mov    ds:0xc002e1dc,eax
c000121e:	a3 e0 e1 02 c0       	mov    ds:0xc002e1e0,eax
c0001223:	a3 d0 e1 02 c0       	mov    ds:0xc002e1d0,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 d4 e1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e1d4
c0001231:	c7 40 0c d4 e1 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e1d4
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 e0 e1 02 c0       	mov    ds:0xc002e1e0,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 d4 e1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e1d4
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 98 e1 02 c0 	lea    ebp,[edx*4-0x3ffd1e68]
c0001282:	8b 14 95 a0 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1e60]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 a0 e1 02 c0 	lea    ecx,[edx*4-0x3ffd1e60]
c000129d:	8b 14 95 a0 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1e60]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd d4 e4 02 c0 	or     DWORD PTR [edi*4-0x3ffd1b2c],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 d4 e1 02 c0 	lea    eax,[eax*8-0x3ffd1e2c]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d dc e1 02 c0    	mov    DWORD PTR ds:0xc002e1dc,ecx
c0001357:	89 0d e0 e1 02 c0    	mov    DWORD PTR ds:0xc002e1e0,ecx
c000135d:	c7 41 08 d4 e1 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e1d4
c0001364:	c7 41 0c d4 e1 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e1d4
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd cc e1 02 c0 	lea    edx,[ecx*8-0x3ffd1e34]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d d4 e4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1b2c]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d d4 e4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1b2c]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 cc e1 02 c0 	lea    edx,[eax*4-0x3ffd1e34]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d d4 e4 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1b2c],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d dc e1 02 c0    	mov    DWORD PTR ds:0xc002e1dc,edi
c000142a:	89 3d e0 e1 02 c0    	mov    DWORD PTR ds:0xc002e1e0,edi
c0001430:	c7 47 08 d4 e1 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e1d4
c0001437:	c7 47 0c d4 e1 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e1d4
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d d0 e1 02 c0    	mov    DWORD PTR ds:0xc002e1d0,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 cc e1 02 c0       	mov    eax,ds:0xc002e1cc
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d cc e1 02 c0    	mov    DWORD PTR ds:0xc002e1cc,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba a0 e1 02 c0       	mov    edx,0xc002e1a0
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d a0 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e1a0,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 a0 e1 02 c0       	mov    eax,0xc002e1a0
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d f4 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4f4
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 f4 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e4f4,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d f4 e4 02 c0    	mov    DWORD PTR ds:0xc002e4f4,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 cc e1 02 c0    	cmp    DWORD PTR ds:0xc002e1cc,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d cc e1 02 c0    	mov    DWORD PTR ds:0xc002e1cc,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d a0 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e1a0,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 a0 e1 02 c0       	mov    eax,0xc002e1a0
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 fc e4 02 c0    	push   DWORD PTR ds:0xc002e4fc
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d a0 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e1a0,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 a0 e1 02 c0       	mov    eax,0xc002e1a0
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 fc e4 02 c0       	mov    eax,ds:0xc002e4fc
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 a0 e1 02 c0       	mov    eax,0xc002e1a0
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d cc e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e1cc,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 a0 e1 02 c0       	mov    eax,0xc002e1a0
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 cc e1 02 c0       	mov    eax,ds:0xc002e1cc
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 a4 e1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1e5c]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 d4 e1 02 c0       	mov    eax,0xc002e1d4
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d cc e4 02 c0       	cmp    eax,0xc002e4cc
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 f0 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e4f0
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 04 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e504
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 14 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e514
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 a0 e1 02 c0       	mov    eax,0xc002e1a0
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 24 93 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6cdc]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 a0 e1 02 c0       	mov    eax,ds:0xc002e1a0
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 a0 e1 02 c0       	mov    ds:0xc002e1a0,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d e4 e4 02 c0    	mov    DWORD PTR ds:0xc002e4e4,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d e8 e4 02 c0    	mov    DWORD PTR ds:0xc002e4e8,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d ec e4 02 c0    	mov    DWORD PTR ds:0xc002e4ec,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 f4 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e4f4,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 80 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce380]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 98 f1 01 00       	jmp    c0020dc4 <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 80 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce380]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 c9 f1 01 00       	jmp    c0020e0b <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 80 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce380]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 f1 f1 01 00       	jmp    c0020e52 <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 78 4a 02 00       	call   c00269bc <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 40 94 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6bc0]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 40 94 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6bc0]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba 40 93 02 c0       	mov    edx,0xc0029340
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba 60 94 02 c0       	mov    edx,0xc0029460
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba ac c9 02 c0       	mov    edx,0xc002c9ac
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba 6c 94 02 c0       	mov    edx,0xc002946c
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba 50 94 02 c0       	mov    edx,0xc0029450
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 40 e5 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1ac0]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 20 e5 02 c0    	mov    ax,ds:0xc002e520
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 20 e5 02 c0    	mov    ds:0xc002e520,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 75 38 02 00       	call   c00269bc <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 72 94 02 c0       	mov    eax,0xc0029472
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad c0 93 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6c40]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 7b 94 02 c0       	mov    eax,0xc002947b
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 40 94 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6bc0]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 40 22 02 00       	call   c00269bc <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba 50 94 02 c0       	mov    edx,0xc0029450
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba 40 93 02 c0       	mov    edx,0xc0029340
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba 50 93 02 c0       	mov    edx,0xc0029350
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 40 e5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1ac0]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 40 e5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1ac0],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 07 0c 02 00       	call   c00269bc <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 ed 0b 02 00       	call   c00269bc <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 97 93 02 c0       	mov    eax,0xc0029397
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 90 93 02 c0       	mov    eax,0xc0029390
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 40 e5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1ac0]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be 80 93 02 c0       	mov    esi,0xc0029380
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 30 f3 01 00       	call   c00269bc <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba 60 94 02 c0       	mov    edx,0xc0029460
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba 60 93 02 c0       	mov    edx,0xc0029360
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba 70 93 02 c0       	mov    edx,0xc0029370
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba 82 94 02 c0       	mov    edx,0xc0029482
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba 8e 94 02 c0       	mov    edx,0xc002948e
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba a2 94 02 c0       	mov    edx,0xc00294a2
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 9d 73 00 00       	call   c000f840 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 97 73 00 00       	call   c000f850 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c c0 97 02 c0 	mov    DWORD PTR [esp+0xc],0xc00297c0
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 c0 97 02 c0 	mov    DWORD PTR [esp+0x10],0xc00297c0
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 c0 95 02 c0       	mov    eax,0xc00295c0
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 00 95 02 c0       	mov    eax,0xc0029500
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 c0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b40]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 dc 70 00 00       	call   c000f850 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c6 70 00 00       	call   c000f850 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 84 fc 01 00       	call   c002848f <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 47 fc 01 00       	call   c0028471 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 1b fc 01 00       	call   c002848f <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 ce f2 01 00       	call   c0027b94 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 48 fd 01 00       	call   c0028620 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 95 fb 01 00       	call   c002848f <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 d7 fa 01 00       	call   c002848f <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 a4 fa 01 00       	call   c0028471 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 91 f9 01 00       	call   c002848f <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 59 f9 01 00       	call   c0028471 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a5 6c 00 00       	call   c000f870 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 40 6c 00 00       	call   c000f850 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 c0 98 02 c0       	mov    eax,0xc00298c0
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 65 f7 01 00       	call   c002848f <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 2a f7 01 00       	call   c0028471 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 20 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd62e0]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 3a f4 01 00       	call   c0028223 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 b8 ed 01 00       	call   c0027bc0 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 74 f6 01 00       	call   c0028493 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 62 f7 01 00       	call   c00285b7 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 4c ed 01 00       	call   c0027bc0 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 f7 f5 01 00       	call   c002848d <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 d8 f5 01 00       	call   c0028491 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 66 f7 01 00       	call   c0028640 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 18 f3 01 00       	call   c0028223 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 96 ec 01 00       	call   c0027bc0 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 52 f5 01 00       	call   c0028493 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 40 f6 01 00       	call   c00285b7 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 2a ec 01 00       	call   c0027bc0 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 d5 f4 01 00       	call   c002848d <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 b5 f4 01 00       	call   c0028491 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 42 f6 01 00       	call   c0028640 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 f0 f3 01 00       	call   c002848f <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 ae f3 01 00       	call   c0028471 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 96 f3 01 00       	call   c002848f <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 08 f1 01 00       	call   c0028223 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 0a e4 01 00       	call   c0027543 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 6d ea 01 00       	call   c0027bc0 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 bf f0 01 00       	call   c0028223 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 c5 e3 01 00       	call   c0027543 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 94 f0 01 00       	call   c0028223 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 e4 f2 01 00       	call   c002848d <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 c1 e9 01 00       	call   c0027b94 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 3b f4 01 00       	call   c0028620 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 6a f2 01 00       	call   c0028471 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 65 e9 01 00       	call   c0027b94 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 e3 ef 01 00       	call   c0028223 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 66 e9 01 00       	call   c0027bc0 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 b8 ef 01 00       	call   c0028223 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 1f ec 01 00       	call   c0027ea4 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 9e e2 01 00       	call   c0027543 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 fe db 01 00       	call   c0026ed8 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 d5 f2 01 00       	call   c00285b7 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 be e8 01 00       	call   c0027bc0 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 a5 f2 01 00       	call   c00285b7 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 17 e2 01 00       	call   c0027543 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 50 f1 01 00       	call   c0028493 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 38 eb 01 00       	call   c0027ea4 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 be e1 01 00       	call   c0027543 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 a4 f2 01 00       	call   c0028640 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 7e ee 01 00       	call   c0028223 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 d5 e7 01 00       	call   c0027b94 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 b4 f0 01 00       	call   c002848f <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 4d e1 01 00       	call   c0027543 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 79 e7 01 00       	call   c0027b94 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 13 f2 01 00       	call   c0028640 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 cc ed 01 00       	call   c0028223 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 49 e7 01 00       	call   c0027bc0 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 9c ed 01 00       	call   c0028223 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 a2 e0 01 00       	call   c0027543 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 72 ed 01 00       	call   c0028223 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 c4 ef 01 00       	call   c002848f <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 9b e6 01 00       	call   c0027b94 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 15 f1 01 00       	call   c0028620 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 44 ef 01 00       	call   c0028471 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 3e e6 01 00       	call   c0027b94 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 bc ec 01 00       	call   c0028223 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 3f e6 01 00       	call   c0027bc0 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 91 ec 01 00       	call   c0028223 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 f8 e8 01 00       	call   c0027ea4 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 77 df 01 00       	call   c0027543 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 c7 d8 01 00       	call   c0026ed8 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 9e ef 01 00       	call   c00285b7 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 87 e5 01 00       	call   c0027bc0 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 6e ef 01 00       	call   c00285b7 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 e0 de 01 00       	call   c0027543 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 19 ee 01 00       	call   c0028493 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 00 e8 01 00       	call   c0027ea4 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 7f de 01 00       	call   c0027543 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 65 ef 01 00       	call   c0028640 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 3f eb 01 00       	call   c0028223 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 96 e4 01 00       	call   c0027b94 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 75 ed 01 00       	call   c002848f <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 0e de 01 00       	call   c0027543 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 3a e4 01 00       	call   c0027b94 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 af ea 01 00       	call   c0028223 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 b5 dd 01 00       	call   c0027543 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 80 9d 02 c0       	mov    eax,0xc0029d80
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 94 9d 02 c0       	mov    eax,0xc0029d94
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 d9 5f 00 00       	call   c000f850 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 db 5f 00 00       	call   c000f870 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 2a e9 01 00       	call   c0028223 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 a8 e2 01 00       	call   c0027bc0 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 3a d5 01 00       	call   c0026ed8 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 11 ec 01 00       	call   c00285b7 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 fa e1 01 00       	call   c0027bc0 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 dd eb 01 00       	call   c00285b7 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 4f db 01 00       	call   c0027543 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 af eb 01 00       	call   c00285b7 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 9e e1 01 00       	call   c0027bc0 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 07 db 01 00       	call   c0027543 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 28 d4 01 00       	call   c0026ed8 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 ff ea 01 00       	call   c00285b7 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 e8 e0 01 00       	call   c0027bc0 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 cb ea 01 00       	call   c00285b7 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 3d da 01 00       	call   c0027543 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 9d ea 01 00       	call   c00285b7 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 8c e0 01 00       	call   c0027bc0 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 f5 d9 01 00       	call   c0027543 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 d3 d9 01 00       	call   c0027543 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 af d2 01 00       	call   c0026ed8 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 86 e9 01 00       	call   c00285b7 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 6f df 01 00       	call   c0027bc0 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 52 e9 01 00       	call   c00285b7 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 c4 d8 01 00       	call   c0027543 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 24 e9 01 00       	call   c00285b7 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 0d df 01 00       	call   c0027bc0 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 76 d8 01 00       	call   c0027543 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 d6 e8 01 00       	call   c00285b7 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 bf de 01 00       	call   c0027bc0 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 28 d8 01 00       	call   c0027543 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 3d d1 01 00       	call   c0026ed8 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 14 e8 01 00       	call   c00285b7 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 fd dd 01 00       	call   c0027bc0 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 e4 e7 01 00       	call   c00285b7 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 56 d7 01 00       	call   c0027543 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 b6 e7 01 00       	call   c00285b7 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 9f dd 01 00       	call   c0027bc0 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 08 d7 01 00       	call   c0027543 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 68 e7 01 00       	call   c00285b7 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 51 dd 01 00       	call   c0027bc0 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 ba d6 01 00       	call   c0027543 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 8e d6 01 00       	call   c0027543 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 eb dc 01 00       	call   c0027bc0 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 a7 e5 01 00       	call   c0028493 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 36 d6 01 00       	call   c0027543 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 93 dc 01 00       	call   c0027bc0 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 4f e5 01 00       	call   c0028493 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 c9 ce 01 00       	call   c0026ed8 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 a0 e5 01 00       	call   c00285b7 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 89 db 01 00       	call   c0027bc0 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 6c e5 01 00       	call   c00285b7 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 de d4 01 00       	call   c0027543 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 3e e5 01 00       	call   c00285b7 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 27 db 01 00       	call   c0027bc0 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 90 d4 01 00       	call   c0027543 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 f0 e4 01 00       	call   c00285b7 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 d9 da 01 00       	call   c0027bc0 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 42 d4 01 00       	call   c0027543 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 a2 e4 01 00       	call   c00285b7 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 8b da 01 00       	call   c0027bc0 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 f4 d3 01 00       	call   c0027543 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 54 e4 01 00       	call   c00285b7 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 3d da 01 00       	call   c0027bc0 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 a6 d3 01 00       	call   c0027543 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 a8 cc 01 00       	call   c0026ed8 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 7f e3 01 00       	call   c00285b7 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 68 d9 01 00       	call   c0027bc0 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 4f e3 01 00       	call   c00285b7 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 c1 d2 01 00       	call   c0027543 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 21 e3 01 00       	call   c00285b7 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 0a d9 01 00       	call   c0027bc0 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 73 d2 01 00       	call   c0027543 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 d3 e2 01 00       	call   c00285b7 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 bc d8 01 00       	call   c0027bc0 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 25 d2 01 00       	call   c0027543 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 85 e2 01 00       	call   c00285b7 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 6e d8 01 00       	call   c0027bc0 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 d7 d1 01 00       	call   c0027543 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 37 e2 01 00       	call   c00285b7 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 20 d8 01 00       	call   c0027bc0 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 89 d1 01 00       	call   c0027543 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 5d d1 01 00       	call   c0027543 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 ba d7 01 00       	call   c0027bc0 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 76 e0 01 00       	call   c0028493 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 05 d1 01 00       	call   c0027543 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 62 d7 01 00       	call   c0027bc0 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 1e e0 01 00       	call   c0028493 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 ac d0 01 00       	call   c0027543 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 09 d7 01 00       	call   c0027bc0 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 c5 df 01 00       	call   c0028493 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 53 d0 01 00       	call   c0027543 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 b0 d6 01 00       	call   c0027bc0 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 6c df 01 00       	call   c0028493 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 ca c8 01 00       	call   c0026ed8 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 a1 df 01 00       	call   c00285b7 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 8a d5 01 00       	call   c0027bc0 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 6d df 01 00       	call   c00285b7 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 df ce 01 00       	call   c0027543 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 3f df 01 00       	call   c00285b7 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 28 d5 01 00       	call   c0027bc0 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 91 ce 01 00       	call   c0027543 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 f1 de 01 00       	call   c00285b7 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 da d4 01 00       	call   c0027bc0 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 43 ce 01 00       	call   c0027543 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 a3 de 01 00       	call   c00285b7 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 8c d4 01 00       	call   c0027bc0 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 f5 cd 01 00       	call   c0027543 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 55 de 01 00       	call   c00285b7 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 3e d4 01 00       	call   c0027bc0 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 a7 cd 01 00       	call   c0027543 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 07 de 01 00       	call   c00285b7 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 f0 d3 01 00       	call   c0027bc0 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 56 cd 01 00       	call   c0027543 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 b6 dd 01 00       	call   c00285b7 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 9f d3 01 00       	call   c0027bc0 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 08 cd 01 00       	call   c0027543 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 02 c6 01 00       	call   c0026ed8 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 d9 dc 01 00       	call   c00285b7 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 c2 d2 01 00       	call   c0027bc0 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 a2 dc 01 00       	call   c00285b7 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 14 cc 01 00       	call   c0027543 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 74 dc 01 00       	call   c00285b7 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 5d d2 01 00       	call   c0027bc0 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 c6 cb 01 00       	call   c0027543 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 26 dc 01 00       	call   c00285b7 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 0f d2 01 00       	call   c0027bc0 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 78 cb 01 00       	call   c0027543 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 d8 db 01 00       	call   c00285b7 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 c1 d1 01 00       	call   c0027bc0 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 2a cb 01 00       	call   c0027543 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 8a db 01 00       	call   c00285b7 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 73 d1 01 00       	call   c0027bc0 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 dc ca 01 00       	call   c0027543 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 3c db 01 00       	call   c00285b7 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 25 d1 01 00       	call   c0027bc0 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 8b ca 01 00       	call   c0027543 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 eb da 01 00       	call   c00285b7 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 d4 d0 01 00       	call   c0027bc0 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 43 ca 01 00       	call   c0027543 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 1c ca 01 00       	call   c0027543 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 7a d0 01 00       	call   c0027bc0 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 36 d9 01 00       	call   c0028493 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 c5 c9 01 00       	call   c0027543 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 23 d0 01 00       	call   c0027bc0 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 df d8 01 00       	call   c0028493 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 6d c9 01 00       	call   c0027543 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 cb cf 01 00       	call   c0027bc0 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 87 d8 01 00       	call   c0028493 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 15 c9 01 00       	call   c0027543 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 73 cf 01 00       	call   c0027bc0 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 2f d8 01 00       	call   c0028493 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 bd c8 01 00       	call   c0027543 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 1b cf 01 00       	call   c0027bc0 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 d7 d7 01 00       	call   c0028493 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 6b c8 01 00       	call   c0027543 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 c9 ce 01 00       	call   c0027bc0 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 85 d7 01 00       	call   c0028493 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 99 c0 01 00       	call   c0026ed8 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 70 d7 01 00       	call   c00285b7 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 59 cd 01 00       	call   c0027bc0 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 40 d7 01 00       	call   c00285b7 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 b2 c6 01 00       	call   c0027543 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 c4 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd623c]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 e6 d6 01 00       	call   c00285b7 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 cf cc 01 00       	call   c0027bc0 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 3a c6 01 00       	call   c0027543 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 87 d6 01 00       	call   c00285b7 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 70 cc 01 00       	call   c0027bc0 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 db c5 01 00       	call   c0027543 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 28 d6 01 00       	call   c00285b7 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 11 cc 01 00       	call   c0027bc0 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 7c c5 01 00       	call   c0027543 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 c9 d5 01 00       	call   c00285b7 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 b2 cb 01 00       	call   c0027bc0 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 1d c5 01 00       	call   c0027543 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 6a d5 01 00       	call   c00285b7 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 53 cb 01 00       	call   c0027bc0 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 be c4 01 00       	call   c0027543 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 0b d5 01 00       	call   c00285b7 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 f4 ca 01 00       	call   c0027bc0 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 5f c4 01 00       	call   c0027543 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 ac d4 01 00       	call   c00285b7 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 95 ca 01 00       	call   c0027bc0 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 00 c4 01 00       	call   c0027543 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 4d d4 01 00       	call   c00285b7 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 36 ca 01 00       	call   c0027bc0 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 a1 c3 01 00       	call   c0027543 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 ab bc 01 00       	call   c0026ed8 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 82 d3 01 00       	call   c00285b7 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 6b c9 01 00       	call   c0027bc0 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 52 d3 01 00       	call   c00285b7 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 c4 c2 01 00       	call   c0027543 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 e0 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6220]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 f7 d2 01 00       	call   c00285b7 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 e0 c8 01 00       	call   c0027bc0 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 4b c2 01 00       	call   c0027543 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 97 d2 01 00       	call   c00285b7 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 80 c8 01 00       	call   c0027bc0 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 eb c1 01 00       	call   c0027543 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 37 d2 01 00       	call   c00285b7 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 20 c8 01 00       	call   c0027bc0 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 8b c1 01 00       	call   c0027543 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 d7 d1 01 00       	call   c00285b7 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 c0 c7 01 00       	call   c0027bc0 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 2b c1 01 00       	call   c0027543 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 77 d1 01 00       	call   c00285b7 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 60 c7 01 00       	call   c0027bc0 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 cb c0 01 00       	call   c0027543 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 17 d1 01 00       	call   c00285b7 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 00 c7 01 00       	call   c0027bc0 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 6b c0 01 00       	call   c0027543 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 b7 d0 01 00       	call   c00285b7 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 a0 c6 01 00       	call   c0027bc0 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 0b c0 01 00       	call   c0027543 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 57 d0 01 00       	call   c00285b7 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 40 c6 01 00       	call   c0027bc0 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 ab bf 01 00       	call   c0027543 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 fc 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6204]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 50 bf 01 00       	call   c0027543 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 ad c5 01 00       	call   c0027bc0 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 69 ce 01 00       	call   c0028493 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 f3 be 01 00       	call   c0027543 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 50 c5 01 00       	call   c0027bc0 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 0c ce 01 00       	call   c0028493 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 96 be 01 00       	call   c0027543 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 f3 c4 01 00       	call   c0027bc0 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 af cd 01 00       	call   c0028493 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 39 be 01 00       	call   c0027543 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 96 c4 01 00       	call   c0027bc0 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 52 cd 01 00       	call   c0028493 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 dc bd 01 00       	call   c0027543 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 39 c4 01 00       	call   c0027bc0 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 f5 cc 01 00       	call   c0028493 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 7f bd 01 00       	call   c0027543 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 dc c3 01 00       	call   c0027bc0 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 98 cc 01 00       	call   c0028493 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 22 bd 01 00       	call   c0027543 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 7f c3 01 00       	call   c0027bc0 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 3b cc 01 00       	call   c0028493 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 c5 bc 01 00       	call   c0027543 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 22 c3 01 00       	call   c0027bc0 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 de cb 01 00       	call   c0028493 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 da c2 01 00       	call   c0027bc0 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 4a cd 01 00       	jmp    c0028640 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 bc c9 01 00       	call   c002848f <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 7a c9 01 00       	call   c0028471 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 11 c7 01 00       	call   c0028223 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 12 ba 01 00       	call   c0027543 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 e1 c6 01 00       	call   c0028223 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 48 c3 01 00       	call   c0027ea4 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 e7 c8 01 00       	call   c0028471 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 ea c8 01 00       	call   c002848f <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 bd c8 01 00       	call   c002848f <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 b6 c2 01 00       	call   c0027ea4 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 38 ca 01 00       	call   c0028640 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 13 ca 01 00       	call   c0028640 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 ed c5 01 00       	call   c0028223 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 44 bf 01 00       	call   c0027b94 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 23 c8 01 00       	call   c002848f <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 bc b8 01 00       	call   c0027543 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 e0 be 01 00       	call   c0027b94 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 7a c9 01 00       	call   c0028640 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 ba c1 01 00       	call   c0027ea4 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 37 b8 01 00       	call   c0027543 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 63 c4 01 00       	call   c0028223 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 63 b7 01 00       	call   c0027543 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 43 b7 01 00       	call   c0027543 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 13 c4 01 00       	call   c0028223 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 63 c6 01 00       	call   c002848d <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 42 bd 01 00       	call   c0027b94 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 bc c7 01 00       	call   c0028620 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 eb c5 01 00       	call   c0028471 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 e9 bc 01 00       	call   c0027b94 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 67 c3 01 00       	call   c0028223 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 ea bc 01 00       	call   c0027bc0 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 3c c3 01 00       	call   c0028223 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 a3 bf 01 00       	call   c0027ea4 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 22 b6 01 00       	call   c0027543 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 ec c2 01 00       	call   c0028223 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 38 c5 01 00       	call   c002848f <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 2d bc 01 00       	call   c0027bc0 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 ff bb 01 00       	call   c0027bc0 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 38 c2 01 00       	call   c0028223 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 9c be 01 00       	call   c0027ea4 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 64 be 01 00       	call   c0027ea4 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 e3 b4 01 00       	call   c0027543 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 c8 c5 01 00       	call   c0028640 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 a2 c1 01 00       	call   c0028223 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 f9 ba 01 00       	call   c0027b94 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 d8 c3 01 00       	call   c002848f <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 70 b4 01 00       	call   c0027543 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 94 ba 01 00       	call   c0027b94 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 2e c5 01 00       	call   c0028640 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 f7 c2 01 00       	call   c002848f <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 b5 c2 01 00       	call   c0028471 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 4c c0 01 00       	call   c0028223 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 4d b3 01 00       	call   c0027543 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 1c c0 01 00       	call   c0028223 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 83 bc 01 00       	call   c0027ea4 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 22 c2 01 00       	call   c0028471 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 25 c2 01 00       	call   c002848f <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 f8 c1 01 00       	call   c002848f <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 f1 bb 01 00       	call   c0027ea4 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 73 c3 01 00       	call   c0028640 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 4e c3 01 00       	call   c0028640 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 28 bf 01 00       	call   c0028223 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 7f b8 01 00       	call   c0027b94 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 5e c1 01 00       	call   c002848f <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 f7 b1 01 00       	call   c0027543 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 1b b8 01 00       	call   c0027b94 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 b5 c2 01 00       	call   c0028640 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 f5 ba 01 00       	call   c0027ea4 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 72 b1 01 00       	call   c0027543 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 9d bd 01 00       	call   c0028223 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 9d b0 01 00       	call   c0027543 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 7d b0 01 00       	call   c0027543 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 4d bd 01 00       	call   c0028223 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 9d bf 01 00       	call   c002848d <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 7b b6 01 00       	call   c0027b94 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 f5 c0 01 00       	call   c0028620 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 24 bf 01 00       	call   c0028471 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 21 b6 01 00       	call   c0027b94 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 9f bc 01 00       	call   c0028223 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 22 b6 01 00       	call   c0027bc0 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 74 bc 01 00       	call   c0028223 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 db b8 01 00       	call   c0027ea4 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 5a af 01 00       	call   c0027543 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 24 bc 01 00       	call   c0028223 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 70 be 01 00       	call   c002848f <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 65 b5 01 00       	call   c0027bc0 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 37 b5 01 00       	call   c0027bc0 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 6e bb 01 00       	call   c0028223 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 d2 b7 01 00       	call   c0027ea4 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 9f b7 01 00       	call   c0027ea4 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 1e ae 01 00       	call   c0027543 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 03 bf 01 00       	call   c0028640 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 dd ba 01 00       	call   c0028223 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 34 b4 01 00       	call   c0027b94 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 13 bd 01 00       	call   c002848f <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 ab ad 01 00       	call   c0027543 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 cf b3 01 00       	call   c0027b94 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 69 be 01 00       	call   c0028640 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 32 bc 01 00       	call   c002848f <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 f0 bb 01 00       	call   c0028471 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 87 b9 01 00       	call   c0028223 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 88 ac 01 00       	call   c0027543 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 57 b9 01 00       	call   c0028223 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 be b5 01 00       	call   c0027ea4 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 5d bb 01 00       	call   c0028471 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 60 bb 01 00       	call   c002848f <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 33 bb 01 00       	call   c002848f <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 2c b5 01 00       	call   c0027ea4 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 ae bc 01 00       	call   c0028640 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 89 bc 01 00       	call   c0028640 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 63 b8 01 00       	call   c0028223 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 ba b1 01 00       	call   c0027b94 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 99 ba 01 00       	call   c002848f <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 32 ab 01 00       	call   c0027543 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 56 b1 01 00       	call   c0027b94 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 f0 bb 01 00       	call   c0028640 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 30 b4 01 00       	call   c0027ea4 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 ad aa 01 00       	call   c0027543 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 d8 b6 01 00       	call   c0028223 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 d8 a9 01 00       	call   c0027543 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 b8 a9 01 00       	call   c0027543 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 88 b6 01 00       	call   c0028223 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 d8 b8 01 00       	call   c002848d <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 b6 af 01 00       	call   c0027b94 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 30 ba 01 00       	call   c0028620 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 5f b8 01 00       	call   c0028471 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 5c af 01 00       	call   c0027b94 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 da b5 01 00       	call   c0028223 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 5d af 01 00       	call   c0027bc0 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 af b5 01 00       	call   c0028223 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 16 b2 01 00       	call   c0027ea4 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 95 a8 01 00       	call   c0027543 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 5f b5 01 00       	call   c0028223 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 ab b7 01 00       	call   c002848f <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 a0 ae 01 00       	call   c0027bc0 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 72 ae 01 00       	call   c0027bc0 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 a9 b4 01 00       	call   c0028223 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 0d b1 01 00       	call   c0027ea4 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 da b0 01 00       	call   c0027ea4 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 59 a7 01 00       	call   c0027543 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 3e b8 01 00       	call   c0028640 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 18 b4 01 00       	call   c0028223 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 6f ad 01 00       	call   c0027b94 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 4e b6 01 00       	call   c002848f <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 e6 a6 01 00       	call   c0027543 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 0a ad 01 00       	call   c0027b94 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 a4 b7 01 00       	call   c0028640 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 6d b5 01 00       	call   c002848f <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 2b b5 01 00       	call   c0028471 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 c2 b2 01 00       	call   c0028223 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 c3 a5 01 00       	call   c0027543 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 92 b2 01 00       	call   c0028223 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 f9 ae 01 00       	call   c0027ea4 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 98 b4 01 00       	call   c0028471 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 9b b4 01 00       	call   c002848f <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 6e b4 01 00       	call   c002848f <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 67 ae 01 00       	call   c0027ea4 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 e9 b5 01 00       	call   c0028640 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 c4 b5 01 00       	call   c0028640 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 9e b1 01 00       	call   c0028223 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 f5 aa 01 00       	call   c0027b94 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 d4 b3 01 00       	call   c002848f <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 6d a4 01 00       	call   c0027543 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 91 aa 01 00       	call   c0027b94 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 2b b5 01 00       	call   c0028640 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 6b ad 01 00       	call   c0027ea4 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 e8 a3 01 00       	call   c0027543 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 13 b0 01 00       	call   c0028223 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 13 a3 01 00       	call   c0027543 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 f3 a2 01 00       	call   c0027543 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 c3 af 01 00       	call   c0028223 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 13 b2 01 00       	call   c002848d <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 f1 a8 01 00       	call   c0027b94 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 6b b3 01 00       	call   c0028620 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 9a b1 01 00       	call   c0028471 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 97 a8 01 00       	call   c0027b94 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 15 af 01 00       	call   c0028223 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 98 a8 01 00       	call   c0027bc0 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 ea ae 01 00       	call   c0028223 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 51 ab 01 00       	call   c0027ea4 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 d0 a1 01 00       	call   c0027543 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 9a ae 01 00       	call   c0028223 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 e6 b0 01 00       	call   c002848f <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 db a7 01 00       	call   c0027bc0 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 ad a7 01 00       	call   c0027bc0 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 e4 ad 01 00       	call   c0028223 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 48 aa 01 00       	call   c0027ea4 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 15 aa 01 00       	call   c0027ea4 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 94 a0 01 00       	call   c0027543 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 79 b1 01 00       	call   c0028640 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 53 ad 01 00       	call   c0028223 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 aa a6 01 00       	call   c0027b94 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 89 af 01 00       	call   c002848f <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 21 a0 01 00       	call   c0027543 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 45 a6 01 00       	call   c0027b94 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 df b0 01 00       	call   c0028640 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 a5 ae 01 00       	call   c002848f <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 63 ae 01 00       	call   c0028471 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 fa ab 01 00       	call   c0028223 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 fb 9e 01 00       	call   c0027543 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 ca ab 01 00       	call   c0028223 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 31 a8 01 00       	call   c0027ea4 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 d0 ad 01 00       	call   c0028471 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 d3 ad 01 00       	call   c002848f <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 a6 ad 01 00       	call   c002848f <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 9f a7 01 00       	call   c0027ea4 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 21 af 01 00       	call   c0028640 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 f8 ae 01 00       	call   c0028640 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 d2 aa 01 00       	call   c0028223 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 29 a4 01 00       	call   c0027b94 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 08 ad 01 00       	call   c002848f <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 a1 9d 01 00       	call   c0027543 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 c9 a3 01 00       	call   c0027b94 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 63 ae 01 00       	call   c0028640 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 a4 a6 01 00       	call   c0027ea4 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 21 9d 01 00       	call   c0027543 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 4d a9 01 00       	call   c0028223 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 4d 9c 01 00       	call   c0027543 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 2d 9c 01 00       	call   c0027543 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 fd a8 01 00       	call   c0028223 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 31 ab 01 00       	call   c0028471 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 28 a2 01 00       	call   c0027b94 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 a2 ac 01 00       	call   c0028620 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 d1 aa 01 00       	call   c0028471 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 cb a1 01 00       	call   c0027b94 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 49 a8 01 00       	call   c0028223 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 cc a1 01 00       	call   c0027bc0 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 1e a8 01 00       	call   c0028223 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 85 a4 01 00       	call   c0027ea4 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 04 9b 01 00       	call   c0027543 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 ce a7 01 00       	call   c0028223 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 1a aa 01 00       	call   c002848f <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 0f a1 01 00       	call   c0027bc0 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 e1 a0 01 00       	call   c0027bc0 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 25 a7 01 00       	call   c0028223 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 8c a3 01 00       	call   c0027ea4 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 75 a0 01 00       	call   c0027bc0 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 31 a9 01 00       	call   c0028493 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 24 a3 01 00       	call   c0027ea4 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 a3 99 01 00       	call   c0027543 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 88 aa 01 00       	call   c0028640 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 62 a6 01 00       	call   c0028223 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 b9 9f 01 00       	call   c0027b94 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 98 a8 01 00       	call   c002848f <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 30 99 01 00       	call   c0027543 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 58 9f 01 00       	call   c0027b94 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 f2 a9 01 00       	call   c0028640 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 24 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd61dc]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 18 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd61e8]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 9f 1b 00 00       	call   c000f850 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 ad a6 01 00       	call   c002848f <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 6b a6 01 00       	call   c0028471 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 57 a6 01 00       	call   c002848f <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 c9 a3 01 00       	call   c0028223 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 47 9d 01 00       	call   c0027bc0 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 99 a3 01 00       	call   c0028223 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 9f 96 01 00       	call   c0027543 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 6e a3 01 00       	call   c0028223 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 be a5 01 00       	call   c002848d <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 9f 9c 01 00       	call   c0027b94 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 19 a7 01 00       	call   c0028620 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 48 a5 01 00       	call   c0028471 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 47 9c 01 00       	call   c0027b94 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 c5 a2 01 00       	call   c0028223 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 48 9c 01 00       	call   c0027bc0 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 9a a2 01 00       	call   c0028223 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 01 9f 01 00       	call   c0027ea4 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 80 95 01 00       	call   c0027543 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 a8 9e 01 00       	call   c0027ea4 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 2e 95 01 00       	call   c0027543 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 14 a6 01 00       	call   c0028640 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 ee a1 01 00       	call   c0028223 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 45 9b 01 00       	call   c0027b94 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 24 a4 01 00       	call   c002848f <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 bd 94 01 00       	call   c0027543 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 e9 9a 01 00       	call   c0027b94 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 83 a5 01 00       	call   c0028640 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 38 a1 01 00       	call   c0028223 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 b5 9a 01 00       	call   c0027bc0 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 06 a1 01 00       	call   c0028223 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 0c 94 01 00       	call   c0027543 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 dc a0 01 00       	call   c0028223 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 30 a3 01 00       	call   c0028491 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 09 9a 01 00       	call   c0027b94 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 83 a4 01 00       	call   c0028620 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 b2 a2 01 00       	call   c0028471 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 b0 99 01 00       	call   c0027b94 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 2e a0 01 00       	call   c0028223 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 b1 99 01 00       	call   c0027bc0 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 03 a0 01 00       	call   c0028223 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 6a 9c 01 00       	call   c0027ea4 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 e9 92 01 00       	call   c0027543 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 05 9c 01 00       	call   c0027ea4 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 84 92 01 00       	call   c0027543 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 6a a3 01 00       	call   c0028640 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 44 9f 01 00       	call   c0028223 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 9b 98 01 00       	call   c0027b94 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 7a a1 01 00       	call   c002848f <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 13 92 01 00       	call   c0027543 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 3f 98 01 00       	call   c0027b94 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 b0 9e 01 00       	call   c0028223 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 b6 91 01 00       	call   c0027543 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 3e 9f 02 c0       	mov    eax,0xc0029f3e
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 4f 9f 02 c0       	mov    eax,0xc0029f4f
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e1 13 00 00       	call   c000f850 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e3 13 00 00       	call   c000f870 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 52 13 00 00       	call   c000f840 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 86 9f 02 c0       	push   0xc0029f86
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 a8 e5 02 c0       	mov    eax,0xc002e5a8
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 8f 9f 02 c0       	push   0xc0029f8f
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 bc 69 02 c0       	mov    eax,0xc00269bc
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 99 9f 02 c0       	push   0xc0029f99
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 f0 66 02 c0       	mov    eax,0xc00266f0
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 a2 9f 02 c0       	push   0xc0029fa2
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 bc 6a 02 c0       	mov    eax,0xc0026abc
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 ac 9f 02 c0       	push   0xc0029fac
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 3c 68 02 c0       	mov    eax,0xc002683c
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 b5 9f 02 c0       	push   0xc0029fb5
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 ac e5 02 c0       	mov    eax,0xc002e5ac
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 c2 9f 02 c0       	push   0xc0029fc2
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 ad e5 02 c0       	mov    eax,0xc002e5ad
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 95 5e 00 00       	call   c00144b8 <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 07 00 00       	push   0x73f
c000e654:	e8 e7 11 00 00       	call   c000f840 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 14 1b 03 c0    	push   DWORD PTR ds:0xc0031b14
c000e668:	68 cf 9f 02 c0       	push   0xc0029fcf
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 a1 f5 00 00       	call   c001dc16 <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 8a f8 00 00       	call   c001df14 <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 72 e7 01 c0       	push   0xc001e772
c000e693:	ff 35 14 1b 03 c0    	push   DWORD PTR ds:0xc0031b14
c000e699:	e8 76 f8 00 00       	call   c001df14 <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 c8 1a 03 c0       	mov    ds:0xc0031ac8,eax
c000e6a6:	c6 05 ad e5 02 c0 01 	mov    BYTE PTR ds:0xc002e5ad,0x1
c000e6ad:	e8 41 04 01 00       	call   c001eaf3 <Vm::initialise8086()>
c000e6b2:	e8 e9 4b 00 00       	call   c00132a0 <Fs::initVFS()>
c000e6b7:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 d3 de 00 00       	call   c001c5a6 <Sys::loadSyscalls()>
c000e6d3:	e8 ac bd 00 00       	call   c001a484 <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 dc 9f 02 c0       	push   0xc0029fdc
c000e6e2:	68 e5 9f 02 c0       	push   0xc0029fe5
c000e6e7:	e8 be ca 00 00       	call   c001b1aa <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 94 56 00 00       	call   c0013d88 <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 87 5d 00 00       	call   c001448c <Device::loadDriversForAll()>
c000e705:	e8 c0 b8 00 00       	call   c0019fca <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d a8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5a8
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 ed 9f 02 c0       	push   0xc0029fed
c000e719:	e8 1c f0 00 00       	call   c001d73a <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 47 f2 00 00       	call   c001d96e <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 44 fb 00 00       	call   c001e278 <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 09 a0 02 c0       	push   0xc002a009
c000e749:	50                   	push   eax
c000e74a:	e8 e3 5d 00 00       	call   c0014532 <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba a8 a1 02 c0       	mov    edx,0xc002a1a8
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 c1 e5 02 c0 04 	test   BYTE PTR ds:0xc002e5c1,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 a3 7d 01 00       	call   c0026686 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 be a3 00 00       	call   c0018cdc <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 97 a3 00 00       	call   c0018cdc <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 75 a3 00 00       	call   c0018cdc <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 53 a3 00 00       	call   c0018cdc <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 c0 e5 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e5c0,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 61 a2 00 00       	call   c0018c58 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 3c a2 00 00       	call   c0018c58 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 0d 7c 01 00       	call   c0026640 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 ca 7b 01 00       	call   c0026620 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 58 a2 00 00       	call   c0018cdc <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 19 a0 02 c0       	push   0xc002a019
c000eaaf:	e8 68 44 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 2c a0 02 c0       	push   0xc002a02c
c000ead2:	e8 45 44 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 3d a0 02 c0       	push   0xc002a03d
c000eaf5:	e8 22 44 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 4e a0 02 c0       	push   0xc002a04e
c000eb18:	e8 ff 43 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 5f a0 02 c0       	push   0xc002a05f
c000eb3b:	e8 dc 43 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 70 a0 02 c0       	push   0xc002a070
c000eb5e:	e8 b9 43 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 81 a0 02 c0       	push   0xc002a081
c000eb81:	e8 96 43 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 92 a0 02 c0       	push   0xc002a092
c000eba4:	e8 73 43 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 a3 a0 02 c0       	push   0xc002a0a3
c000ebc7:	e8 50 43 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 b4 a0 02 c0       	push   0xc002a0b4
c000ebea:	e8 2d 43 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 c5 a0 02 c0       	push   0xc002a0c5
c000ec0d:	e8 0a 43 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 d6 a0 02 c0       	push   0xc002a0d6
c000ec30:	e8 e7 42 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 e7 a0 02 c0       	push   0xc002a0e7
c000ec53:	e8 c4 42 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 f8 a0 02 c0       	push   0xc002a0f8
c000ec76:	e8 a1 42 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 09 a1 02 c0       	push   0xc002a109
c000ec99:	e8 7e 42 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 1a a1 02 c0       	push   0xc002a11a
c000ecbc:	e8 5b 42 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 2b a1 02 c0       	push   0xc002a12b
c000ecdf:	e8 38 42 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 3c a1 02 c0       	push   0xc002a13c
c000ed02:	e8 15 42 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 4d a1 02 c0       	push   0xc002a14d
c000ed21:	e8 f6 41 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 10 bc 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bc10
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 e5 41 00 00       	jmp    c0012f1c <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 5e a1 02 c0       	push   0xc002a15e
c000ee0a:	e8 ae b7 00 00       	call   c001a5bd <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 64 a1 02 c0       	push   0xc002a164
c000ee42:	e8 76 b7 00 00       	call   c001a5bd <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 c0 e5 02 c0 04 	test   BYTE PTR ds:0xc002e5c0,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 e4 d4 02 c0 	sete   BYTE PTR ds:0xc002d4e4
c000eea6:	e8 95 09 00 00       	call   c000f840 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 f7 92 00 00       	call   c00181ac <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 7e 54 00 00       	call   c0014342 <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 56 09 00 00       	call   c000f840 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 a0 9e 00 00       	call   c0018d94 <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 3f 54 00 00       	call   c0014342 <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 a9 59 00 00       	call   c00148c8 <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 0f 54 00 00       	call   c0014342 <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 bf f0 00 00       	call   c001e014 <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 6a a1 02 c0       	push   0xc002a16a
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 79 3f 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 7b a1 02 c0       	push   0xc002a17b
c000efc0:	e8 f8 b5 00 00       	call   c001a5bd <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 88 a1 02 c0       	push   0xc002a188
c000efd5:	e8 e3 b5 00 00       	call   c001a5bd <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 92 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a192
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 cc b5 00 00       	jmp    c001a5bd <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 cc a1 02 c0       	push   0xc002a1cc
c000f086:	e8 91 3e 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 b2 e5 02 c0       	mov    ds:0xc002e5b2,eax
c000f0c7:	66 89 15 b0 e5 02 c0 	mov    WORD PTR ds:0xc002e5b0,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 06 ec 00 00       	call   c001dde4 <unlockScheduler()>
c000f1de:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 a8 e5 02 c0    	push   DWORD PTR ds:0xc002e5a8
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 94 94 01 00       	call   c00286c0 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 8b 94 01 00       	call   c00286c0 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 b8 e5 02 c0 ff 07 	mov    WORD PTR ds:0xc002e5b8,0x7ff
c000f323:	a3 ba e5 02 c0       	mov    ds:0xc002e5ba,eax
c000f328:	0f 01 1d b8 e5 02 c0 	lidtd  ds:0xc002e5b8
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 11 28 00 00       	call   c0011e26 <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 42 2e 00 00       	call   c0012462 <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 12 02 00 00       	call   c000f840 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 7e 1e 00 00       	call   c00114bc <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 af 1e 00 00       	call   c00114fc <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 a8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5a8
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d c0 d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d4c0
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 c0 d4 02 c0       	mov    eax,ds:0xc002d4c0
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 e8 a1 02 c0       	push   0xc002a1e8
c000f6f4:	e8 23 38 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 c0 d4 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d4c0,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 07 27 00 00       	call   c0011e26 <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d c0 d4 02 c0    	mov    ebp,DWORD PTR ds:0xc002d4c0
c000f727:	e8 b6 07 00 00       	call   c000fee2 <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 29 2c 00 00       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d c0 d4 02 c0    	mov    ebx,DWORD PTR ds:0xc002d4c0
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 18 a2 02 c0       	push   0xc002a218
c000f7ad:	e8 0b ae 00 00       	call   c001a5bd <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 1d a2 02 c0       	push   0xc002a21d
c000f7c3:	e8 f5 ad 00 00       	call   c001a5bd <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 09 e6 00 00       	call   c001dde2 <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 fa e5 00 00       	call   c001dde4 <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 2b 26 00 00       	call   c0011e26 <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	6a 01                	push   0x1
c000f800:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f804:	50                   	push   eax
c000f805:	e8 58 2c 00 00       	call   c0012462 <VAS::allocatePages(int, int)>
c000f80a:	83 c4 1c             	add    esp,0x1c
c000f80d:	c3                   	ret    

c000f80e <liballoc_free(void*, int)>:
c000f80e:	83 ec 0c             	sub    esp,0xc
c000f811:	e8 10 26 00 00       	call   c0011e26 <Virt::getAKernelVAS()>
c000f816:	83 ec 08             	sub    esp,0x8
c000f819:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f81d:	50                   	push   eax
c000f81e:	e8 fb 28 00 00       	call   c001211e <VAS::freeAllocatedPages(unsigned long)>
c000f823:	b8 00 00 00 00       	mov    eax,0x0
c000f828:	83 c4 1c             	add    esp,0x1c
c000f82b:	c3                   	ret    

c000f82c <realloc>:
c000f82c:	83 ec 14             	sub    esp,0x14
c000f82f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f833:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f837:	e8 18 1e ff ff       	call   c0001654 <dlrealloc>
c000f83c:	83 c4 1c             	add    esp,0x1c
c000f83f:	c3                   	ret    

c000f840 <malloc>:
c000f840:	83 ec 18             	sub    esp,0x18
c000f843:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f847:	e8 cb 18 ff ff       	call   c0001117 <dlmalloc>
c000f84c:	83 c4 1c             	add    esp,0x1c
c000f84f:	c3                   	ret    

c000f850 <free>:
c000f850:	83 ec 18             	sub    esp,0x18
c000f853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f857:	e8 60 15 ff ff       	call   c0000dbc <dlfree>
c000f85c:	83 c4 1c             	add    esp,0x1c
c000f85f:	c3                   	ret    

c000f860 <rfree>:
c000f860:	83 ec 18             	sub    esp,0x18
c000f863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f867:	e8 50 15 ff ff       	call   c0000dbc <dlfree>
c000f86c:	83 c4 1c             	add    esp,0x1c
c000f86f:	c3                   	ret    

c000f870 <calloc>:
c000f870:	56                   	push   esi
c000f871:	53                   	push   ebx
c000f872:	83 ec 10             	sub    esp,0x10
c000f875:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f879:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f87e:	53                   	push   ebx
c000f87f:	e8 bc ff ff ff       	call   c000f840 <malloc>
c000f884:	89 c6                	mov    esi,eax
c000f886:	83 c4 0c             	add    esp,0xc
c000f889:	53                   	push   ebx
c000f88a:	6a 00                	push   0x0
c000f88c:	50                   	push   eax
c000f88d:	e8 e6 0e ff ff       	call   c0000778 <memset>
c000f892:	89 f0                	mov    eax,esi
c000f894:	83 c4 14             	add    esp,0x14
c000f897:	5b                   	pop    ebx
c000f898:	5e                   	pop    esi
c000f899:	c3                   	ret    

c000f89a <hwTextMode_loadInData(VgaText*)>:
c000f89a:	55                   	push   ebp
c000f89b:	a1 e0 d4 02 c0       	mov    eax,ds:0xc002d4e0
c000f8a0:	57                   	push   edi
c000f8a1:	56                   	push   esi
c000f8a2:	53                   	push   ebx
c000f8a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8a7:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8ad:	85 d2                	test   edx,edx
c000f8af:	7e 2f                	jle    c000f8e0 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b1:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8b7:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8ba:	31 f6                	xor    esi,esi
c000f8bc:	29 fd                	sub    ebp,edi
c000f8be:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c1:	31 c0                	xor    eax,eax
c000f8c3:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8c7:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8cb:	40                   	inc    eax
c000f8cc:	83 f8 50             	cmp    eax,0x50
c000f8cf:	75 f2                	jne    c000f8c3 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d1:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8d7:	46                   	inc    esi
c000f8d8:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8de:	7f de                	jg     c000f8be <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e0:	5b                   	pop    ebx
c000f8e1:	5e                   	pop    esi
c000f8e2:	5f                   	pop    edi
c000f8e3:	5d                   	pop    ebp
c000f8e4:	c3                   	ret    

c000f8e5 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e5:	55                   	push   ebp
c000f8e6:	80 3d 40 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e640,0x0
c000f8ed:	57                   	push   edi
c000f8ee:	56                   	push   esi
c000f8ef:	53                   	push   ebx
c000f8f0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f4:	75 50                	jne    c000f946 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f6:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8fc:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f902:	8b 15 e0 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d4e0
c000f908:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90c:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f912:	eb 0e                	jmp    c000f922 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f914:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91a:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f920:	89 da                	mov    edx,ebx
c000f922:	83 e5 0f             	and    ebp,0xf
c000f925:	c1 e0 04             	shl    eax,0x4
c000f928:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92b:	0f b6 c0             	movzx  eax,al
c000f92e:	41                   	inc    ecx
c000f92f:	09 e8                	or     eax,ebp
c000f931:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f935:	c1 e0 08             	shl    eax,0x8
c000f938:	09 e8                	or     eax,ebp
c000f93a:	39 fb                	cmp    ebx,edi
c000f93c:	66 89 02             	mov    WORD PTR [edx],ax
c000f93f:	75 d3                	jne    c000f914 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f941:	5b                   	pop    ebx
c000f942:	5e                   	pop    esi
c000f943:	5f                   	pop    edi
c000f944:	5d                   	pop    ebp
c000f945:	c3                   	ret    
c000f946:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f950:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95a:	31 c0                	xor    eax,eax
c000f95c:	bd 02 00 00 00       	mov    ebp,0x2
c000f961:	eb 9f                	jmp    c000f902 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f963 <hwTextMode_showCursor(VgaText*, bool)>:
c000f963:	56                   	push   esi
c000f964:	80 3d 40 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e640,0x0
c000f96b:	53                   	push   ebx
c000f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f970:	75 39                	jne    c000f9ab <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f972:	84 c0                	test   al,al
c000f974:	74 38                	je     c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f976:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97b:	b0 0a                	mov    al,0xa
c000f97d:	89 da                	mov    edx,ebx
c000f97f:	ee                   	out    dx,al
c000f980:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f985:	89 ca                	mov    edx,ecx
c000f987:	ec                   	in     al,dx
c000f988:	b2 0f                	mov    dl,0xf
c000f98a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f98e:	83 e0 c0             	and    eax,0xffffffc0
c000f991:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f997:	09 d0                	or     eax,edx
c000f999:	89 ca                	mov    edx,ecx
c000f99b:	ee                   	out    dx,al
c000f99c:	b0 0b                	mov    al,0xb
c000f99e:	89 da                	mov    edx,ebx
c000f9a0:	ee                   	out    dx,al
c000f9a1:	89 ca                	mov    edx,ecx
c000f9a3:	ec                   	in     al,dx
c000f9a4:	83 e0 e0             	and    eax,0xffffffe0
c000f9a7:	83 c8 0f             	or     eax,0xf
c000f9aa:	ee                   	out    dx,al
c000f9ab:	5b                   	pop    ebx
c000f9ac:	5e                   	pop    esi
c000f9ad:	c3                   	ret    
c000f9ae:	b0 0a                	mov    al,0xa
c000f9b0:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b5:	ee                   	out    dx,al
c000f9b6:	b0 20                	mov    al,0x20
c000f9b8:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9bd:	ee                   	out    dx,al
c000f9be:	5b                   	pop    ebx
c000f9bf:	5e                   	pop    esi
c000f9c0:	c3                   	ret    

c000f9c1 <hwTextMode_update(VgaText*)>:
c000f9c1:	c3                   	ret    

c000f9c2 <hwTextMode_updateCursor(VgaText*)>:
c000f9c2:	56                   	push   esi
c000f9c3:	80 3d 40 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e640,0x0
c000f9ca:	53                   	push   ebx
c000f9cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9cf:	75 3f                	jne    c000fa10 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d1:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d6:	b9 19 00 00 00       	mov    ecx,0x19
c000f9db:	89 f2                	mov    edx,esi
c000f9dd:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e3:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9e9:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ec:	c1 e1 04             	shl    ecx,0x4
c000f9ef:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f5:	b0 0f                	mov    al,0xf
c000f9f7:	ee                   	out    dx,al
c000f9f8:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f9fd:	88 c8                	mov    al,cl
c000f9ff:	89 da                	mov    edx,ebx
c000fa01:	ee                   	out    dx,al
c000fa02:	b0 0e                	mov    al,0xe
c000fa04:	89 f2                	mov    edx,esi
c000fa06:	ee                   	out    dx,al
c000fa07:	89 c8                	mov    eax,ecx
c000fa09:	89 da                	mov    edx,ebx
c000fa0b:	66 c1 e8 08          	shr    ax,0x8
c000fa0f:	ee                   	out    dx,al
c000fa10:	5b                   	pop    ebx
c000fa11:	5e                   	pop    esi
c000fa12:	c3                   	ret    

c000fa13 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa17:	80 3d 40 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e640,0x0
c000fa1e:	75 38                	jne    c000fa58 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa20:	ba da 03 00 00       	mov    edx,0x3da
c000fa25:	84 c0                	test   al,al
c000fa27:	75 18                	jne    c000fa41 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa29:	ec                   	in     al,dx
c000fa2a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa2f:	b0 30                	mov    al,0x30
c000fa31:	89 ca                	mov    edx,ecx
c000fa33:	ee                   	out    dx,al
c000fa34:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa39:	ec                   	in     al,dx
c000fa3a:	83 c8 08             	or     eax,0x8
c000fa3d:	89 ca                	mov    edx,ecx
c000fa3f:	ee                   	out    dx,al
c000fa40:	c3                   	ret    
c000fa41:	ec                   	in     al,dx
c000fa42:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa47:	b0 30                	mov    al,0x30
c000fa49:	89 ca                	mov    edx,ecx
c000fa4b:	ee                   	out    dx,al
c000fa4c:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa51:	ec                   	in     al,dx
c000fa52:	83 e0 f7             	and    eax,0xfffffff7
c000fa55:	89 ca                	mov    edx,ecx
c000fa57:	ee                   	out    dx,al
c000fa58:	c3                   	ret    

c000fa59 <hwTextMode_scrollScreen(VgaText*)>:
c000fa59:	55                   	push   ebp
c000fa5a:	57                   	push   edi
c000fa5b:	56                   	push   esi
c000fa5c:	53                   	push   ebx
c000fa5d:	83 ec 1c             	sub    esp,0x1c
c000fa60:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa64:	80 3d 40 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e640,0x0
c000fa6b:	74 14                	je     c000fa81 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa6d:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa77:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa81:	a1 e0 d4 02 c0       	mov    eax,ds:0xc002d4e0
c000fa86:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8b:	05 a0 00 00 00       	add    eax,0xa0
c000fa90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa94:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa98:	31 c0                	xor    eax,eax
c000fa9a:	eb 0b                	jmp    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa2:	74 57                	je     c000fafb <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa4:	43                   	inc    ebx
c000faa5:	89 f0                	mov    eax,esi
c000faa7:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000faad:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab3:	88 13                	mov    BYTE PTR [ebx],dl
c000fab5:	8d 70 01             	lea    esi,[eax+0x1]
c000fab8:	83 fd 18             	cmp    ebp,0x18
c000fabb:	75 df                	jne    c000fa9c <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fabd:	a8 01                	test   al,0x1
c000fabf:	75 13                	jne    c000fad4 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac1:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faca:	75 d8                	jne    c000faa4 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facc:	83 c4 1c             	add    esp,0x1c
c000facf:	5b                   	pop    ebx
c000fad0:	5e                   	pop    esi
c000fad1:	5f                   	pop    edi
c000fad2:	5d                   	pop    ebp
c000fad3:	c3                   	ret    
c000fad4:	83 ec 08             	sub    esp,0x8
c000fad7:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fade:	50                   	push   eax
c000fadf:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae3:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faea:	50                   	push   eax
c000faeb:	e8 9e 0c 00 00       	call   c001078e <VgaText::combineColours(unsigned char, unsigned char)>
c000faf0:	83 c4 10             	add    esp,0x10
c000faf3:	88 07                	mov    BYTE PTR [edi],al
c000faf5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faf9:	eb c9                	jmp    c000fac4 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafb:	45                   	inc    ebp
c000fafc:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb04:	eb 8e                	jmp    c000fa94 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb06 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb06:	57                   	push   edi
c000fb07:	80 3d 40 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e640,0x0
c000fb0e:	56                   	push   esi
c000fb0f:	53                   	push   ebx
c000fb10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb14:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb18:	75 65                	jne    c000fb7f <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1a:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb1f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb24:	83 ec 08             	sub    esp,0x8
c000fb27:	52                   	push   edx
c000fb28:	50                   	push   eax
c000fb29:	e8 60 0c 00 00       	call   c001078e <VgaText::combineColours(unsigned char, unsigned char)>
c000fb2e:	5a                   	pop    edx
c000fb2f:	0f b6 c0             	movzx  eax,al
c000fb32:	59                   	pop    ecx
c000fb33:	50                   	push   eax
c000fb34:	0f be c3             	movsx  eax,bl
c000fb37:	50                   	push   eax
c000fb38:	e8 f7 0c 00 00       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c000fb3d:	83 c4 10             	add    esp,0x10
c000fb40:	8b 35 e0 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d4e0
c000fb46:	80 3d 40 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e640,0x0
c000fb4d:	74 07                	je     c000fb56 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb4f:	66 0f be c3          	movsx  ax,bl
c000fb53:	80 cc 02             	or     ah,0x2
c000fb56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5a:	ba 19 00 00 00       	mov    edx,0x19
c000fb5f:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb65:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb68:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6b:	c1 e1 04             	shl    ecx,0x4
c000fb6e:	c1 e2 04             	shl    edx,0x4
c000fb71:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb75:	01 ca                	add    edx,ecx
c000fb77:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7b:	5b                   	pop    ebx
c000fb7c:	5e                   	pop    esi
c000fb7d:	5f                   	pop    edi
c000fb7e:	c3                   	ret    
c000fb7f:	b8 02 00 00 00       	mov    eax,0x2
c000fb84:	31 d2                	xor    edx,edx
c000fb86:	eb 9c                	jmp    c000fb24 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb88 <setupTextMode()>:
c000fb88:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb8d:	83 e0 30             	and    eax,0x30
c000fb90:	66 83 f8 30          	cmp    ax,0x30
c000fb94:	75 11                	jne    c000fba7 <setupTextMode()+0x1f>
c000fb96:	81 2d e0 d4 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d4e0,0x8000
c000fba0:	c6 05 40 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e640,0x1
c000fba7:	c7 05 78 e6 02 c0 13 fa 00 c0 	mov    DWORD PTR ds:0xc002e678,0xc000fa13
c000fbb1:	c7 05 64 e6 02 c0 9a f8 00 c0 	mov    DWORD PTR ds:0xc002e664,0xc000f89a
c000fbbb:	c7 05 60 e6 02 c0 e5 f8 00 c0 	mov    DWORD PTR ds:0xc002e660,0xc000f8e5
c000fbc5:	c7 05 6c e6 02 c0 59 fa 00 c0 	mov    DWORD PTR ds:0xc002e66c,0xc000fa59
c000fbcf:	c7 05 74 e6 02 c0 63 f9 00 c0 	mov    DWORD PTR ds:0xc002e674,0xc000f963
c000fbd9:	c7 05 68 e6 02 c0 c1 f9 00 c0 	mov    DWORD PTR ds:0xc002e668,0xc000f9c1
c000fbe3:	c7 05 70 e6 02 c0 c2 f9 00 c0 	mov    DWORD PTR ds:0xc002e670,0xc000f9c2
c000fbed:	c7 05 7c e6 02 c0 06 fb 00 c0 	mov    DWORD PTR ds:0xc002e67c,0xc000fb06
c000fbf7:	c3                   	ret    

c000fbf8 <kernel_main>:
c000fbf8:	57                   	push   edi
c000fbf9:	bf f9 03 00 00       	mov    edi,0x3f9
c000fbfe:	56                   	push   esi
c000fbff:	31 f6                	xor    esi,esi
c000fc01:	53                   	push   ebx
c000fc02:	83 ec 10             	sub    esp,0x10
c000fc05:	e8 de 09 00 00       	call   c00105e8 <installVgaTextImplementation()>
c000fc0a:	e8 79 ff ff ff       	call   c000fb88 <setupTextMode()>
c000fc0f:	89 f0                	mov    eax,esi
c000fc11:	89 fa                	mov    edx,edi
c000fc13:	ee                   	out    dx,al
c000fc14:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc19:	b0 80                	mov    al,0x80
c000fc1b:	89 da                	mov    edx,ebx
c000fc1d:	ee                   	out    dx,al
c000fc1e:	b1 03                	mov    cl,0x3
c000fc20:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc25:	88 c8                	mov    al,cl
c000fc27:	ee                   	out    dx,al
c000fc28:	89 f0                	mov    eax,esi
c000fc2a:	89 fa                	mov    edx,edi
c000fc2c:	ee                   	out    dx,al
c000fc2d:	88 c8                	mov    al,cl
c000fc2f:	89 da                	mov    edx,ebx
c000fc31:	ee                   	out    dx,al
c000fc32:	b0 c7                	mov    al,0xc7
c000fc34:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc39:	ee                   	out    dx,al
c000fc3a:	b0 0b                	mov    al,0xb
c000fc3c:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc41:	ee                   	out    dx,al
c000fc42:	83 ec 0c             	sub    esp,0xc
c000fc45:	68 24 a2 02 c0       	push   0xc002a224
c000fc4a:	e8 cd 32 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c000fc4f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc54:	05 ff 0f 00 00       	add    eax,0xfff
c000fc59:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc5e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc61:	e8 3d 04 00 00       	call   c00100a3 <Phys::physicalMemorySetup(unsigned int)>
c000fc66:	e8 df 20 00 00       	call   c0011d4a <Virt::virtualMemorySetup()>
c000fc6b:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc71:	83 c4 10             	add    esp,0x10
c000fc74:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7a:	75 0e                	jne    c000fc8a <kernel_main+0x92>
c000fc7c:	89 d8                	mov    eax,ebx
c000fc7e:	25 48 03 00 00       	and    eax,0x348
c000fc83:	3d 00 03 00 00       	cmp    eax,0x300
c000fc88:	74 10                	je     c000fc9a <kernel_main+0xa2>
c000fc8a:	83 ec 0c             	sub    esp,0xc
c000fc8d:	68 11 bc 02 c0       	push   0xc002bc11
c000fc92:	e8 26 a9 00 00       	call   c001a5bd <Krnl::panic(char const*)>
c000fc97:	83 c4 10             	add    esp,0x10
c000fc9a:	83 ec 0c             	sub    esp,0xc
c000fc9d:	89 1d c0 e5 02 c0    	mov    DWORD PTR ds:0xc002e5c0,ebx
c000fca3:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fca7:	53                   	push   ebx
c000fca8:	e8 af 22 00 00       	call   c0011f5c <VAS::VAS()>
c000fcad:	89 1d 28 e7 02 c0    	mov    DWORD PTR ds:0xc002e728,ebx
c000fcb3:	e8 68 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcb8:	c7 04 24 3b a2 02 c0 	mov    DWORD PTR [esp],0xc002a23b
c000fcbf:	e8 58 32 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c000fcc4:	e8 00 21 00 00       	call   c0011dc9 <Virt::swappingSetup()>
c000fcc9:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fcd0:	e8 6b fb ff ff       	call   c000f840 <malloc>
c000fcd5:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcd8:	89 c6                	mov    esi,eax
c000fcda:	e8 5b ea ff ff       	call   c000e73a <Computer::Computer()>
c000fcdf:	58                   	pop    eax
c000fce0:	89 35 a8 e5 02 c0    	mov    DWORD PTR ds:0xc002e5a8,esi
c000fce6:	5a                   	pop    edx
c000fce7:	56                   	push   esi
c000fce8:	68 58 a2 02 c0       	push   0xc002a258
c000fced:	e8 2a 32 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c000fcf2:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c000fcf7:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcf9:	6a 00                	push   0x0
c000fcfb:	6a 00                	push   0x0
c000fcfd:	6a 00                	push   0x0
c000fcff:	50                   	push   eax
c000fd00:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd03:	83 c4 14             	add    esp,0x14
c000fd06:	53                   	push   ebx
c000fd07:	e8 ea 24 00 00       	call   c00121f6 <VAS::~VAS()>
c000fd0c:	c7 04 24 6b a2 02 c0 	mov    DWORD PTR [esp],0xc002a26b
c000fd13:	e8 a5 a8 00 00       	call   c001a5bd <Krnl::panic(char const*)>
c000fd18:	83 c4 20             	add    esp,0x20
c000fd1b:	5b                   	pop    ebx
c000fd1c:	5e                   	pop    esi
c000fd1d:	5f                   	pop    edi
c000fd1e:	c3                   	ret    

c000fd1f <Phys::allocateDMA(unsigned long)>:
c000fd1f:	55                   	push   ebp
c000fd20:	31 d2                	xor    edx,edx
c000fd22:	57                   	push   edi
c000fd23:	31 ed                	xor    ebp,ebp
c000fd25:	56                   	push   esi
c000fd26:	31 c9                	xor    ecx,ecx
c000fd28:	53                   	push   ebx
c000fd29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd2d:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd33:	31 c0                	xor    eax,eax
c000fd35:	c1 ee 0c             	shr    esi,0xc
c000fd38:	eb 17                	jmp    c000fd51 <Phys::allocateDMA(unsigned long)+0x32>
c000fd3a:	85 c9                	test   ecx,ecx
c000fd3c:	75 04                	jne    c000fd42 <Phys::allocateDMA(unsigned long)+0x23>
c000fd3e:	89 d5                	mov    ebp,edx
c000fd40:	89 d0                	mov    eax,edx
c000fd42:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd45:	39 de                	cmp    esi,ebx
c000fd47:	74 20                	je     c000fd69 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd49:	42                   	inc    edx
c000fd4a:	89 d9                	mov    ecx,ebx
c000fd4c:	83 fa 2f             	cmp    edx,0x2f
c000fd4f:	7f 11                	jg     c000fd62 <Phys::allocateDMA(unsigned long)+0x43>
c000fd51:	80 ba 00 e6 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1a00],0x0
c000fd58:	74 e0                	je     c000fd3a <Phys::allocateDMA(unsigned long)+0x1b>
c000fd5a:	31 c9                	xor    ecx,ecx
c000fd5c:	42                   	inc    edx
c000fd5d:	83 fa 2f             	cmp    edx,0x2f
c000fd60:	7e ef                	jle    c000fd51 <Phys::allocateDMA(unsigned long)+0x32>
c000fd62:	5b                   	pop    ebx
c000fd63:	31 c0                	xor    eax,eax
c000fd65:	5e                   	pop    esi
c000fd66:	5f                   	pop    edi
c000fd67:	5d                   	pop    ebp
c000fd68:	c3                   	ret    
c000fd69:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd6c:	89 d7                	mov    edi,edx
c000fd6e:	4f                   	dec    edi
c000fd6f:	79 03                	jns    c000fd74 <Phys::allocateDMA(unsigned long)+0x55>
c000fd71:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd74:	c1 ff 04             	sar    edi,0x4
c000fd77:	89 c2                	mov    edx,eax
c000fd79:	c1 fa 04             	sar    edx,0x4
c000fd7c:	39 fa                	cmp    edx,edi
c000fd7e:	75 2f                	jne    c000fdaf <Phys::allocateDMA(unsigned long)+0x90>
c000fd80:	85 db                	test   ebx,ebx
c000fd82:	74 1a                	je     c000fd9e <Phys::allocateDMA(unsigned long)+0x7f>
c000fd84:	be 00 e6 02 c0       	mov    esi,0xc002e600
c000fd89:	8d 90 00 e6 02 c0    	lea    edx,[eax-0x3ffd1a00]
c000fd8f:	f7 d6                	not    esi
c000fd91:	29 c6                	sub    esi,eax
c000fd93:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd96:	42                   	inc    edx
c000fd97:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd9a:	39 d9                	cmp    ecx,ebx
c000fd9c:	7f f5                	jg     c000fd93 <Phys::allocateDMA(unsigned long)+0x74>
c000fd9e:	85 ff                	test   edi,edi
c000fda0:	74 13                	je     c000fdb5 <Phys::allocateDMA(unsigned long)+0x96>
c000fda2:	5b                   	pop    ebx
c000fda3:	05 50 20 0c 00       	add    eax,0xc2050
c000fda8:	5e                   	pop    esi
c000fda9:	c1 e0 0c             	shl    eax,0xc
c000fdac:	5f                   	pop    edi
c000fdad:	5d                   	pop    ebp
c000fdae:	c3                   	ret    
c000fdaf:	89 ea                	mov    edx,ebp
c000fdb1:	31 c9                	xor    ecx,ecx
c000fdb3:	eb a7                	jmp    c000fd5c <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb5:	5b                   	pop    ebx
c000fdb6:	c1 e0 0c             	shl    eax,0xc
c000fdb9:	5e                   	pop    esi
c000fdba:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdbf:	5f                   	pop    edi
c000fdc0:	5d                   	pop    ebp
c000fdc1:	c3                   	ret    

c000fdc2 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdca:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdd0:	c1 e9 0c             	shr    ecx,0xc
c000fdd3:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdd8:	76 25                	jbe    c000fdff <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdda:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fddf:	c1 e8 0c             	shr    eax,0xc
c000fde2:	8d 50 10             	lea    edx,[eax+0x10]
c000fde5:	85 c9                	test   ecx,ecx
c000fde7:	74 15                	je     c000fdfe <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fde9:	8d 82 00 e6 02 c0    	lea    eax,[edx-0x3ffd1a00]
c000fdef:	8d 94 11 00 e6 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1a00]
c000fdf6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdf9:	40                   	inc    eax
c000fdfa:	39 d0                	cmp    eax,edx
c000fdfc:	75 f8                	jne    c000fdf6 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdfe:	c3                   	ret    
c000fdff:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe05:	c1 ea 0c             	shr    edx,0xc
c000fe08:	eb db                	jmp    c000fde5 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe0a <Phys::setPageState(unsigned long, bool)>:
c000fe0a:	56                   	push   esi
c000fe0b:	ba 01 00 00 00       	mov    edx,0x1
c000fe10:	53                   	push   ebx
c000fe11:	8b 35 c4 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d4c4
c000fe17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe1b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe1f:	89 c8                	mov    eax,ecx
c000fe21:	83 e1 07             	and    ecx,0x7
c000fe24:	c1 e8 03             	shr    eax,0x3
c000fe27:	d3 e3                	shl    ebx,cl
c000fe29:	01 c6                	add    esi,eax
c000fe2b:	d3 e2                	shl    edx,cl
c000fe2d:	f7 d2                	not    edx
c000fe2f:	20 16                	and    BYTE PTR [esi],dl
c000fe31:	03 05 c4 d4 02 c0    	add    eax,DWORD PTR ds:0xc002d4c4
c000fe37:	08 18                	or     BYTE PTR [eax],bl
c000fe39:	5b                   	pop    ebx
c000fe3a:	5e                   	pop    esi
c000fe3b:	c3                   	ret    

c000fe3c <Phys::getPageState(unsigned long)>:
c000fe3c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe40:	8b 15 c4 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d4c4
c000fe46:	89 c8                	mov    eax,ecx
c000fe48:	83 e1 07             	and    ecx,0x7
c000fe4b:	c1 e8 03             	shr    eax,0x3
c000fe4e:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe52:	d3 f8                	sar    eax,cl
c000fe54:	83 e0 01             	and    eax,0x1
c000fe57:	c3                   	ret    

c000fe58 <Phys::freePage(unsigned long)>:
c000fe58:	53                   	push   ebx
c000fe59:	83 ec 08             	sub    esp,0x8
c000fe5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe60:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe66:	76 57                	jbe    c000febf <Phys::freePage(unsigned long)+0x67>
c000fe68:	c1 eb 0c             	shr    ebx,0xc
c000fe6b:	53                   	push   ebx
c000fe6c:	e8 cb ff ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000fe71:	5a                   	pop    edx
c000fe72:	84 c0                	test   al,al
c000fe74:	74 5b                	je     c000fed1 <Phys::freePage(unsigned long)+0x79>
c000fe76:	a1 f0 e5 02 c0       	mov    eax,ds:0xc002e5f0
c000fe7b:	48                   	dec    eax
c000fe7c:	a3 f0 e5 02 c0       	mov    ds:0xc002e5f0,eax
c000fe81:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe84:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe87:	c1 e0 02             	shl    eax,0x2
c000fe8a:	99                   	cdq    
c000fe8b:	f7 3d f4 e5 02 c0    	idiv   DWORD PTR ds:0xc002e5f4
c000fe91:	39 05 ec e5 02 c0    	cmp    DWORD PTR ds:0xc002e5ec,eax
c000fe97:	75 13                	jne    c000feac <Phys::freePage(unsigned long)+0x54>
c000fe99:	83 ec 08             	sub    esp,0x8
c000fe9c:	6a 00                	push   0x0
c000fe9e:	53                   	push   ebx
c000fe9f:	e8 66 ff ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c000fea4:	83 c4 10             	add    esp,0x10
c000fea7:	83 c4 08             	add    esp,0x8
c000feaa:	5b                   	pop    ebx
c000feab:	c3                   	ret    
c000feac:	83 ec 0c             	sub    esp,0xc
c000feaf:	a3 ec e5 02 c0       	mov    ds:0xc002e5ec,eax
c000feb4:	50                   	push   eax
c000feb5:	e8 c2 0a 00 00       	call   c001097c <VgaText::updateRAMUsageDisplay(int)>
c000feba:	83 c4 10             	add    esp,0x10
c000febd:	eb da                	jmp    c000fe99 <Phys::freePage(unsigned long)+0x41>
c000febf:	68 00 10 00 00       	push   0x1000
c000fec4:	53                   	push   ebx
c000fec5:	e8 f8 fe ff ff       	call   c000fdc2 <Phys::freeDMA(unsigned long, unsigned long)>
c000feca:	59                   	pop    ecx
c000fecb:	5b                   	pop    ebx
c000fecc:	83 c4 08             	add    esp,0x8
c000fecf:	5b                   	pop    ebx
c000fed0:	c3                   	ret    
c000fed1:	c7 44 24 10 86 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a286
c000fed9:	83 c4 08             	add    esp,0x8
c000fedc:	5b                   	pop    ebx
c000fedd:	e9 db a6 00 00       	jmp    c001a5bd <Krnl::panic(char const*)>

c000fee2 <Phys::allocatePage()>:
c000fee2:	56                   	push   esi
c000fee3:	53                   	push   ebx
c000fee4:	83 ec 14             	sub    esp,0x14
c000fee7:	8b 35 e4 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e5e4
c000feed:	89 f3                	mov    ebx,esi
c000feef:	eb 0a                	jmp    c000fefb <Phys::allocatePage()+0x19>
c000fef1:	89 1d e4 e5 02 c0    	mov    DWORD PTR ds:0xc002e5e4,ebx
c000fef7:	39 de                	cmp    esi,ebx
c000fef9:	74 24                	je     c000ff1f <Phys::allocatePage()+0x3d>
c000fefb:	53                   	push   ebx
c000fefc:	e8 3b ff ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000ff01:	5a                   	pop    edx
c000ff02:	84 c0                	test   al,al
c000ff04:	74 5e                	je     c000ff64 <Phys::allocatePage()+0x82>
c000ff06:	43                   	inc    ebx
c000ff07:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff0d:	75 e2                	jne    c000fef1 <Phys::allocatePage()+0xf>
c000ff0f:	31 db                	xor    ebx,ebx
c000ff11:	c7 05 e4 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e5e4,0x0
c000ff1b:	39 de                	cmp    esi,ebx
c000ff1d:	75 dc                	jne    c000fefb <Phys::allocatePage()+0x19>
c000ff1f:	83 ec 0c             	sub    esp,0xc
c000ff22:	68 b0 a2 02 c0       	push   0xc002a2b0
c000ff27:	e8 f0 2f 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c000ff2c:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff33:	e8 e7 fd ff ff       	call   c000fd1f <Phys::allocateDMA(unsigned long)>
c000ff38:	83 c4 10             	add    esp,0x10
c000ff3b:	85 c0                	test   eax,eax
c000ff3d:	0f 85 a8 00 00 00    	jne    c000ffeb <Phys::allocatePage()+0x109>
c000ff43:	83 ec 0c             	sub    esp,0xc
c000ff46:	68 c1 a2 02 c0       	push   0xc002a2c1
c000ff4b:	e8 6d a6 00 00       	call   c001a5bd <Krnl::panic(char const*)>
c000ff50:	83 c4 10             	add    esp,0x10
c000ff53:	8b 1d e4 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5e4
c000ff59:	53                   	push   ebx
c000ff5a:	e8 dd fe ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000ff5f:	5a                   	pop    edx
c000ff60:	84 c0                	test   al,al
c000ff62:	75 a2                	jne    c000ff06 <Phys::allocatePage()+0x24>
c000ff64:	6a 01                	push   0x1
c000ff66:	53                   	push   ebx
c000ff67:	e8 9e fe ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c000ff6c:	a1 f0 e5 02 c0       	mov    eax,ds:0xc002e5f0
c000ff71:	40                   	inc    eax
c000ff72:	a3 f0 e5 02 c0       	mov    ds:0xc002e5f0,eax
c000ff77:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff7a:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff7d:	c1 e0 02             	shl    eax,0x2
c000ff80:	99                   	cdq    
c000ff81:	f7 3d f4 e5 02 c0    	idiv   DWORD PTR ds:0xc002e5f4
c000ff87:	5a                   	pop    edx
c000ff88:	39 05 ec e5 02 c0    	cmp    DWORD PTR ds:0xc002e5ec,eax
c000ff8e:	59                   	pop    ecx
c000ff8f:	75 60                	jne    c000fff1 <Phys::allocatePage()+0x10f>
c000ff91:	83 f8 32             	cmp    eax,0x32
c000ff94:	7e 4d                	jle    c000ffe3 <Phys::allocatePage()+0x101>
c000ff96:	80 3d e0 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5e0,0x0
c000ff9d:	75 44                	jne    c000ffe3 <Phys::allocatePage()+0x101>
c000ff9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffa4:	85 c0                	test   eax,eax
c000ffa6:	74 3b                	je     c000ffe3 <Phys::allocatePage()+0x101>
c000ffa8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ffab:	85 c0                	test   eax,eax
c000ffad:	74 34                	je     c000ffe3 <Phys::allocatePage()+0x101>
c000ffaf:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000ffb5:	85 c0                	test   eax,eax
c000ffb7:	74 2a                	je     c000ffe3 <Phys::allocatePage()+0x101>
c000ffb9:	83 ec 0c             	sub    esp,0xc
c000ffbc:	68 9c a2 02 c0       	push   0xc002a29c
c000ffc1:	e8 56 2f 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c000ffc6:	83 c4 0c             	add    esp,0xc
c000ffc9:	6a 01                	push   0x1
c000ffcb:	6a 08                	push   0x8
c000ffcd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffd2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ffd5:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ffdb:	e8 46 2c 00 00       	call   c0012c26 <VAS::scanForEviction(int, int)>
c000ffe0:	83 c4 10             	add    esp,0x10
c000ffe3:	a1 e4 e5 02 c0       	mov    eax,ds:0xc002e5e4
c000ffe8:	c1 e0 0c             	shl    eax,0xc
c000ffeb:	83 c4 14             	add    esp,0x14
c000ffee:	5b                   	pop    ebx
c000ffef:	5e                   	pop    esi
c000fff0:	c3                   	ret    
c000fff1:	83 ec 0c             	sub    esp,0xc
c000fff4:	a3 ec e5 02 c0       	mov    ds:0xc002e5ec,eax
c000fff9:	50                   	push   eax
c000fffa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fffe:	e8 79 09 00 00       	call   c001097c <VgaText::updateRAMUsageDisplay(int)>
c0010003:	83 c4 10             	add    esp,0x10
c0010006:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001000a:	83 f8 32             	cmp    eax,0x32
c001000d:	7e d4                	jle    c000ffe3 <Phys::allocatePage()+0x101>
c001000f:	eb 85                	jmp    c000ff96 <Phys::allocatePage()+0xb4>

c0010011 <Phys::allocateContiguousPages(int)>:
c0010011:	57                   	push   edi
c0010012:	56                   	push   esi
c0010013:	53                   	push   ebx
c0010014:	31 db                	xor    ebx,ebx
c0010016:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001001a:	e8 c3 dd 00 00       	call   c001dde2 <lockScheduler()>
c001001f:	85 db                	test   ebx,ebx
c0010021:	75 11                	jne    c0010034 <Phys::allocateContiguousPages(int)+0x23>
c0010023:	e8 ba fe ff ff       	call   c000fee2 <Phys::allocatePage()>
c0010028:	83 ff 01             	cmp    edi,0x1
c001002b:	89 c6                	mov    esi,eax
c001002d:	74 21                	je     c0010050 <Phys::allocateContiguousPages(int)+0x3f>
c001002f:	bb 01 00 00 00       	mov    ebx,0x1
c0010034:	e8 a9 fe ff ff       	call   c000fee2 <Phys::allocatePage()>
c0010039:	89 da                	mov    edx,ebx
c001003b:	c1 e2 0c             	shl    edx,0xc
c001003e:	01 f2                	add    edx,esi
c0010040:	39 c2                	cmp    edx,eax
c0010042:	74 17                	je     c001005b <Phys::allocateContiguousPages(int)+0x4a>
c0010044:	bb 01 00 00 00       	mov    ebx,0x1
c0010049:	89 c6                	mov    esi,eax
c001004b:	83 ff 01             	cmp    edi,0x1
c001004e:	75 e4                	jne    c0010034 <Phys::allocateContiguousPages(int)+0x23>
c0010050:	e8 8f dd 00 00       	call   c001dde4 <unlockScheduler()>
c0010055:	89 f0                	mov    eax,esi
c0010057:	5b                   	pop    ebx
c0010058:	5e                   	pop    esi
c0010059:	5f                   	pop    edi
c001005a:	c3                   	ret    
c001005b:	43                   	inc    ebx
c001005c:	39 fb                	cmp    ebx,edi
c001005e:	75 bf                	jne    c001001f <Phys::allocateContiguousPages(int)+0xe>
c0010060:	e8 7f dd 00 00       	call   c001dde4 <unlockScheduler()>
c0010065:	89 f0                	mov    eax,esi
c0010067:	5b                   	pop    ebx
c0010068:	5e                   	pop    esi
c0010069:	5f                   	pop    edi
c001006a:	c3                   	ret    

c001006b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c001006b:	56                   	push   esi
c001006c:	53                   	push   ebx
c001006d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010071:	39 1d e8 e5 02 c0    	cmp    DWORD PTR ds:0xc002e5e8,ebx
c0010077:	73 06                	jae    c001007f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010079:	89 1d e8 e5 02 c0    	mov    DWORD PTR ds:0xc002e5e8,ebx
c001007f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010083:	c1 eb 0c             	shr    ebx,0xc
c0010086:	c1 e8 0c             	shr    eax,0xc
c0010089:	39 d8                	cmp    eax,ebx
c001008b:	73 13                	jae    c00100a0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001008d:	6a 00                	push   0x0
c001008f:	8d 70 01             	lea    esi,[eax+0x1]
c0010092:	50                   	push   eax
c0010093:	e8 72 fd ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c0010098:	5a                   	pop    edx
c0010099:	89 f0                	mov    eax,esi
c001009b:	59                   	pop    ecx
c001009c:	39 f3                	cmp    ebx,esi
c001009e:	75 ed                	jne    c001008d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c00100a0:	5b                   	pop    ebx
c00100a1:	5e                   	pop    esi
c00100a2:	c3                   	ret    

c00100a3 <Phys::physicalMemorySetup(unsigned int)>:
c00100a3:	55                   	push   ebp
c00100a4:	57                   	push   edi
c00100a5:	56                   	push   esi
c00100a6:	53                   	push   ebx
c00100a7:	31 db                	xor    ebx,ebx
c00100a9:	83 ec 40             	sub    esp,0x40
c00100ac:	6a 30                	push   0x30
c00100ae:	6a 00                	push   0x0
c00100b0:	68 00 e6 02 c0       	push   0xc002e600
c00100b5:	e8 be 06 ff ff       	call   c0000778 <memset>
c00100ba:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00100be:	25 00 f0 ff ff       	and    eax,0xfffff000
c00100c3:	05 00 10 00 00       	add    eax,0x1000
c00100c8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00100cc:	83 c4 10             	add    esp,0x10
c00100cf:	83 ec 08             	sub    esp,0x8
c00100d2:	6a 01                	push   0x1
c00100d4:	53                   	push   ebx
c00100d5:	43                   	inc    ebx
c00100d6:	e8 2f fd ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00100db:	83 c4 10             	add    esp,0x10
c00100de:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100e4:	75 e9                	jne    c00100cf <Phys::physicalMemorySetup(unsigned int)+0x2c>
c00100e6:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c00100ed:	66 85 c0             	test   ax,ax
c00100f0:	0f 84 8e 01 00 00    	je     c0010284 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c00100f6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00100fa:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010102:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010106:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c001010b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001010f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0010117:	eb 15                	jmp    c001012e <Phys::physicalMemorySetup(unsigned int)+0x8b>
c0010119:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001011d:	83 c3 18             	add    ebx,0x18
c0010120:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010124:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010128:	0f 84 66 01 00 00    	je     c0010294 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c001012e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010131:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010134:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0010137:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001013b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001013f:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010141:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010144:	01 f0                	add    eax,esi
c0010146:	55                   	push   ebp
c0010147:	11 fa                	adc    edx,edi
c0010149:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001014d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010151:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010155:	56                   	push   esi
c0010156:	68 fc a2 02 c0       	push   0xc002a2fc
c001015b:	e8 bc 2d 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0010160:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010164:	83 c4 10             	add    esp,0x10
c0010167:	09 f8                	or     eax,edi
c0010169:	0f 85 25 01 00 00    	jne    c0010294 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c001016f:	4d                   	dec    ebp
c0010170:	75 a7                	jne    c0010119 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010172:	ba 00 00 08 00       	mov    edx,0x80000
c0010177:	89 c1                	mov    ecx,eax
c0010179:	39 f2                	cmp    edx,esi
c001017b:	19 f9                	sbb    ecx,edi
c001017d:	0f 82 a7 00 00 00    	jb     c001022a <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010183:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010187:	89 c1                	mov    ecx,eax
c0010189:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c001018d:	0f 83 97 00 00 00    	jae    c001022a <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010193:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010198:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001019c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101a0:	39 fa                	cmp    edx,edi
c00101a2:	19 e8                	sbb    eax,ebp
c00101a4:	0f 82 14 01 00 00    	jb     c00102be <Phys::physicalMemorySetup(unsigned int)+0x21b>
c00101aa:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101ae:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101b2:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00101b8:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101bd:	83 d5 ff             	adc    ebp,0xffffffff
c00101c0:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00101c4:	31 c0                	xor    eax,eax
c00101c6:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00101ca:	39 fa                	cmp    edx,edi
c00101cc:	89 c1                	mov    ecx,eax
c00101ce:	19 e9                	sbb    ecx,ebp
c00101d0:	0f 83 43 ff ff ff    	jae    c0010119 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101d6:	be 00 00 08 00       	mov    esi,0x80000
c00101db:	50                   	push   eax
c00101dc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101e0:	57                   	push   edi
c00101e1:	56                   	push   esi
c00101e2:	68 20 a3 02 c0       	push   0xc002a320
c00101e7:	e8 30 2d 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c00101ec:	5a                   	pop    edx
c00101ed:	59                   	pop    ecx
c00101ee:	57                   	push   edi
c00101ef:	56                   	push   esi
c00101f0:	e8 76 fe ff ff       	call   c001006b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101f5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101fd:	83 c4 0c             	add    esp,0xc
c0010200:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010204:	03 05 f4 e5 02 c0    	add    eax,DWORD PTR ds:0xc002e5f4
c001020a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010211:	a3 f4 e5 02 c0       	mov    ds:0xc002e5f4,eax
c0010216:	52                   	push   edx
c0010217:	50                   	push   eax
c0010218:	68 dd a2 02 c0       	push   0xc002a2dd
c001021d:	e8 fa 2c 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0010222:	83 c4 10             	add    esp,0x10
c0010225:	e9 ef fe ff ff       	jmp    c0010119 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001022a:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001022e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010232:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010236:	39 ea                	cmp    edx,ebp
c0010238:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c001023c:	0f 82 d7 fe ff ff    	jb     c0010119 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010242:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010247:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c001024b:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c001024f:	0f 83 c4 fe ff ff    	jae    c0010119 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010255:	39 ee                	cmp    esi,ebp
c0010257:	89 f8                	mov    eax,edi
c0010259:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c001025d:	0f 83 78 ff ff ff    	jae    c00101db <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010263:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010267:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001026b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001026f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010273:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010277:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001027b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001027f:	e9 57 ff ff ff       	jmp    c00101db <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010284:	83 ec 0c             	sub    esp,0xc
c0010287:	68 cf a2 02 c0       	push   0xc002a2cf
c001028c:	e8 2c a3 00 00       	call   c001a5bd <Krnl::panic(char const*)>
c0010291:	83 c4 10             	add    esp,0x10
c0010294:	bb 40 01 00 00       	mov    ebx,0x140
c0010299:	83 ec 08             	sub    esp,0x8
c001029c:	6a 00                	push   0x0
c001029e:	53                   	push   ebx
c001029f:	43                   	inc    ebx
c00102a0:	e8 65 fb ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00102a5:	ff 05 f4 e5 02 c0    	inc    DWORD PTR ds:0xc002e5f4
c00102ab:	83 c4 10             	add    esp,0x10
c00102ae:	81 fb 80 01 00 00    	cmp    ebx,0x180
c00102b4:	75 e3                	jne    c0010299 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00102b6:	83 c4 3c             	add    esp,0x3c
c00102b9:	5b                   	pop    ebx
c00102ba:	5e                   	pop    esi
c00102bb:	5f                   	pop    edi
c00102bc:	5d                   	pop    ebp
c00102bd:	c3                   	ret    
c00102be:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00102c6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00102ce:	e9 d7 fe ff ff       	jmp    c00101aa <Phys::physicalMemorySetup(unsigned int)+0x107>
c00102d3:	90                   	nop

c00102d4 <Pipe::isAtty()>:
c00102d4:	31 c0                	xor    eax,eax
c00102d6:	c3                   	ret    
c00102d7:	90                   	nop

c00102d8 <Pipe::~Pipe()>:
c00102d8:	83 ec 0c             	sub    esp,0xc
c00102db:	ba 8c a3 02 c0       	mov    edx,0xc002a38c
c00102e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102e4:	89 10                	mov    DWORD PTR [eax],edx
c00102e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102ea:	83 ec 0c             	sub    esp,0xc
c00102ed:	50                   	push   eax
c00102ee:	e8 37 16 00 00       	call   c001192a <UnixFile::~UnixFile()>
c00102f3:	83 c4 10             	add    esp,0x10
c00102f6:	90                   	nop
c00102f7:	83 c4 0c             	add    esp,0xc
c00102fa:	c3                   	ret    
c00102fb:	90                   	nop

c00102fc <Pipe::~Pipe()>:
c00102fc:	83 ec 0c             	sub    esp,0xc
c00102ff:	83 ec 0c             	sub    esp,0xc
c0010302:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010306:	e8 cd ff ff ff       	call   c00102d8 <Pipe::~Pipe()>
c001030b:	83 c4 10             	add    esp,0x10
c001030e:	83 ec 08             	sub    esp,0x8
c0010311:	6a 20                	push   0x20
c0010313:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010317:	e8 20 2b 00 00       	call   c0012e3c <operator delete(void*, unsigned long)>
c001031c:	83 c4 10             	add    esp,0x10
c001031f:	83 c4 0c             	add    esp,0xc
c0010322:	c3                   	ret    
c0010323:	90                   	nop

c0010324 <Pipe::read(unsigned long long, void*, int*)>:
c0010324:	55                   	push   ebp
c0010325:	57                   	push   edi
c0010326:	56                   	push   esi
c0010327:	53                   	push   ebx
c0010328:	83 ec 1c             	sub    esp,0x1c
c001032b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001032f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010333:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010337:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001033a:	89 c8                	mov    eax,ecx
c001033c:	99                   	cdq    
c001033d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010341:	74 19                	je     c001035c <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010343:	39 f9                	cmp    ecx,edi
c0010345:	89 d1                	mov    ecx,edx
c0010347:	19 f1                	sbb    ecx,esi
c0010349:	73 11                	jae    c001035c <Pipe::read(unsigned long long, void*, int*)+0x38>
c001034b:	e8 92 da 00 00       	call   c001dde2 <lockScheduler()>
c0010350:	e8 c9 dd 00 00       	call   c001e11e <schedule()>
c0010355:	e8 8a da 00 00       	call   c001dde4 <unlockScheduler()>
c001035a:	eb db                	jmp    c0010337 <Pipe::read(unsigned long long, void*, int*)+0x13>
c001035c:	39 f8                	cmp    eax,edi
c001035e:	89 d1                	mov    ecx,edx
c0010360:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010364:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010368:	19 f1                	sbb    ecx,esi
c001036a:	73 08                	jae    c0010374 <Pipe::read(unsigned long long, void*, int*)+0x50>
c001036c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010370:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010374:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010377:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001037a:	29 c6                	sub    esi,eax
c001037c:	89 f1                	mov    ecx,esi
c001037e:	c1 f9 1f             	sar    ecx,0x1f
c0010381:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010385:	89 ca                	mov    edx,ecx
c0010387:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001038b:	19 d1                	sbb    ecx,edx
c001038d:	73 04                	jae    c0010393 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c001038f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0010393:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010397:	89 fd                	mov    ebp,edi
c0010399:	29 f5                	sub    ebp,esi
c001039b:	85 f6                	test   esi,esi
c001039d:	74 12                	je     c00103b1 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c001039f:	52                   	push   edx
c00103a0:	56                   	push   esi
c00103a1:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c00103a4:	50                   	push   eax
c00103a5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00103a9:	e8 96 03 ff ff       	call   c0000744 <memcpy>
c00103ae:	83 c4 10             	add    esp,0x10
c00103b1:	85 ed                	test   ebp,ebp
c00103b3:	74 12                	je     c00103c7 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c00103b5:	50                   	push   eax
c00103b6:	55                   	push   ebp
c00103b7:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00103ba:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c00103be:	56                   	push   esi
c00103bf:	e8 80 03 ff ff       	call   c0000744 <memcpy>
c00103c4:	83 c4 10             	add    esp,0x10
c00103c7:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c00103ca:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103cd:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103d0:	99                   	cdq    
c00103d1:	89 f7                	mov    edi,esi
c00103d3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00103d7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00103db:	c1 ff 1f             	sar    edi,0x1f
c00103de:	57                   	push   edi
c00103df:	56                   	push   esi
c00103e0:	52                   	push   edx
c00103e1:	50                   	push   eax
c00103e2:	e8 d5 66 01 00       	call   c0026abc <__umoddi3>
c00103e7:	83 c4 10             	add    esp,0x10
c00103ea:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00103ed:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00103f2:	75 10                	jne    c0010404 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c00103f4:	83 ec 0c             	sub    esp,0xc
c00103f7:	68 49 a3 02 c0       	push   0xc002a349
c00103fc:	e8 bc a1 00 00       	call   c001a5bd <Krnl::panic(char const*)>
c0010401:	83 c4 10             	add    esp,0x10
c0010404:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010408:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001040c:	89 10                	mov    DWORD PTR [eax],edx
c001040e:	83 c4 1c             	add    esp,0x1c
c0010411:	31 c0                	xor    eax,eax
c0010413:	5b                   	pop    ebx
c0010414:	5e                   	pop    esi
c0010415:	5f                   	pop    edi
c0010416:	5d                   	pop    ebp
c0010417:	c3                   	ret    

c0010418 <Pipe::write(unsigned long long, void*, int*)>:
c0010418:	55                   	push   ebp
c0010419:	57                   	push   edi
c001041a:	56                   	push   esi
c001041b:	53                   	push   ebx
c001041c:	83 ec 1c             	sub    esp,0x1c
c001041f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010423:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010427:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001042b:	89 04 24             	mov    DWORD PTR [esp],eax
c001042e:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0010431:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0010434:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010438:	89 de                	mov    esi,ebx
c001043a:	89 df                	mov    edi,ebx
c001043c:	c1 ff 1f             	sar    edi,0x1f
c001043f:	01 c6                	add    esi,eax
c0010441:	89 c8                	mov    eax,ecx
c0010443:	11 d7                	adc    edi,edx
c0010445:	99                   	cdq    
c0010446:	39 f1                	cmp    ecx,esi
c0010448:	89 d0                	mov    eax,edx
c001044a:	19 f8                	sbb    eax,edi
c001044c:	b8 01 00 00 00       	mov    eax,0x1
c0010451:	0f 82 80 00 00 00    	jb     c00104d7 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c0010457:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001045a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001045d:	01 d8                	add    eax,ebx
c001045f:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0010463:	99                   	cdq    
c0010464:	f7 f9                	idiv   ecx
c0010466:	29 d1                	sub    ecx,edx
c0010468:	89 d7                	mov    edi,edx
c001046a:	89 c8                	mov    eax,ecx
c001046c:	99                   	cdq    
c001046d:	39 ce                	cmp    esi,ecx
c001046f:	19 d3                	sbb    ebx,edx
c0010471:	bb 00 00 00 00       	mov    ebx,0x0
c0010476:	72 04                	jb     c001047c <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010478:	89 f3                	mov    ebx,esi
c001047a:	29 cb                	sub    ebx,ecx
c001047c:	89 f1                	mov    ecx,esi
c001047e:	29 d9                	sub    ecx,ebx
c0010480:	74 1a                	je     c001049c <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010482:	52                   	push   edx
c0010483:	51                   	push   ecx
c0010484:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010488:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001048c:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c001048f:	57                   	push   edi
c0010490:	e8 af 02 ff ff       	call   c0000744 <memcpy>
c0010495:	83 c4 10             	add    esp,0x10
c0010498:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001049c:	85 db                	test   ebx,ebx
c001049e:	74 12                	je     c00104b2 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c00104a0:	50                   	push   eax
c00104a1:	53                   	push   ebx
c00104a2:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c00104a6:	51                   	push   ecx
c00104a7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00104aa:	e8 95 02 ff ff       	call   c0000744 <memcpy>
c00104af:	83 c4 10             	add    esp,0x10
c00104b2:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c00104b5:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00104ba:	75 10                	jne    c00104cc <Pipe::write(unsigned long long, void*, int*)+0xb4>
c00104bc:	83 ec 0c             	sub    esp,0xc
c00104bf:	68 65 a3 02 c0       	push   0xc002a365
c00104c4:	e8 f4 a0 00 00       	call   c001a5bd <Krnl::panic(char const*)>
c00104c9:	83 c4 10             	add    esp,0x10
c00104cc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00104d0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00104d3:	89 38                	mov    DWORD PTR [eax],edi
c00104d5:	31 c0                	xor    eax,eax
c00104d7:	83 c4 1c             	add    esp,0x1c
c00104da:	5b                   	pop    ebx
c00104db:	5e                   	pop    esi
c00104dc:	5f                   	pop    edi
c00104dd:	5d                   	pop    ebp
c00104de:	c3                   	ret    
c00104df:	90                   	nop

c00104e0 <Pipe::Pipe(int)>:
c00104e0:	83 ec 0c             	sub    esp,0xc
c00104e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e7:	83 ec 08             	sub    esp,0x8
c00104ea:	6a 00                	push   0x0
c00104ec:	50                   	push   eax
c00104ed:	e8 56 12 00 00       	call   c0011748 <UnixFile::UnixFile(int)>
c00104f2:	83 c4 10             	add    esp,0x10
c00104f5:	ba 8c a3 02 c0       	mov    edx,0xc002a38c
c00104fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104fe:	89 10                	mov    DWORD PTR [eax],edx
c0010500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010504:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010508:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001050b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001051a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010521:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010525:	83 ec 0c             	sub    esp,0xc
c0010528:	50                   	push   eax
c0010529:	e8 12 f3 ff ff       	call   c000f840 <malloc>
c001052e:	83 c4 10             	add    esp,0x10
c0010531:	89 c2                	mov    edx,eax
c0010533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010537:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001053a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001053e:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010542:	90                   	nop
c0010543:	83 c4 0c             	add    esp,0xc
c0010546:	c3                   	ret    
c0010547:	90                   	nop

c0010548 <VgaText::isAtty()>:
c0010548:	b0 01                	mov    al,0x1
c001054a:	c3                   	ret    
c001054b:	90                   	nop

c001054c <VgaText::~VgaText()>:
c001054c:	83 ec 0c             	sub    esp,0xc
c001054f:	ba 48 a4 02 c0       	mov    edx,0xc002a448
c0010554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010558:	89 10                	mov    DWORD PTR [eax],edx
c001055a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001055e:	83 ec 0c             	sub    esp,0xc
c0010561:	50                   	push   eax
c0010562:	e8 c3 13 00 00       	call   c001192a <UnixFile::~UnixFile()>
c0010567:	83 c4 10             	add    esp,0x10
c001056a:	90                   	nop
c001056b:	83 c4 0c             	add    esp,0xc
c001056e:	c3                   	ret    
c001056f:	90                   	nop

c0010570 <VgaText::~VgaText()>:
c0010570:	83 ec 0c             	sub    esp,0xc
c0010573:	83 ec 0c             	sub    esp,0xc
c0010576:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001057a:	e8 cd ff ff ff       	call   c001054c <VgaText::~VgaText()>
c001057f:	83 c4 10             	add    esp,0x10
c0010582:	83 ec 08             	sub    esp,0x8
c0010585:	68 60 12 00 00       	push   0x1260
c001058a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001058e:	e8 a9 28 00 00       	call   c0012e3c <operator delete(void*, unsigned long)>
c0010593:	83 c4 10             	add    esp,0x10
c0010596:	83 c4 0c             	add    esp,0xc
c0010599:	c3                   	ret    

c001059a <VgaText::read(unsigned long long, void*, int*)>:
c001059a:	83 ec 10             	sub    esp,0x10
c001059d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00105a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105a9:	e8 10 5d 00 00       	call   c00162be <readKeyboard(VgaText*, char*, unsigned long)>
c00105ae:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00105b2:	89 02                	mov    DWORD PTR [edx],eax
c00105b4:	31 c0                	xor    eax,eax
c00105b6:	83 c4 1c             	add    esp,0x1c
c00105b9:	c3                   	ret    

c00105ba <setTerminalScrollLock(bool)>:
c00105ba:	c3                   	ret    

c00105bb <addToTerminalCycle(VgaText*)>:
c00105bb:	8b 15 80 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e680
c00105c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105c5:	85 d2                	test   edx,edx
c00105c7:	75 0c                	jne    c00105d5 <addToTerminalCycle(VgaText*)+0x1a>
c00105c9:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c00105cf:	a3 80 e6 02 c0       	mov    ds:0xc002e680,eax
c00105d4:	c3                   	ret    
c00105d5:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c00105db:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c00105e1:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c00105e7:	c3                   	ret    

c00105e8 <installVgaTextImplementation()>:
c00105e8:	83 ec 10             	sub    esp,0x10
c00105eb:	6a 20                	push   0x20
c00105ed:	6a 00                	push   0x0
c00105ef:	68 60 e6 02 c0       	push   0xc002e660
c00105f4:	e8 7f 01 ff ff       	call   c0000778 <memset>
c00105f9:	83 c4 1c             	add    esp,0x1c
c00105fc:	c3                   	ret    

c00105fd <scrollTerminalScrollLock(int)>:
c00105fd:	c3                   	ret    

c00105fe <VgaText::load()>:
c00105fe:	53                   	push   ebx
c00105ff:	31 c0                	xor    eax,eax
c0010601:	83 ec 58             	sub    esp,0x58
c0010604:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010608:	89 e2                	mov    edx,esp
c001060a:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c001060e:	40                   	inc    eax
c001060f:	83 f8 50             	cmp    eax,0x50
c0010612:	75 f6                	jne    c001060a <VgaText::load()+0xc>
c0010614:	31 c0                	xor    eax,eax
c0010616:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c001061d:	84 c9                	test   cl,cl
c001061f:	74 06                	je     c0010627 <VgaText::load()+0x29>
c0010621:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010624:	40                   	inc    eax
c0010625:	eb ef                	jmp    c0010616 <VgaText::load()+0x18>
c0010627:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c001062d:	85 c0                	test   eax,eax
c001062f:	74 09                	je     c001063a <VgaText::load()+0x3c>
c0010631:	51                   	push   ecx
c0010632:	51                   	push   ecx
c0010633:	52                   	push   edx
c0010634:	53                   	push   ebx
c0010635:	ff d0                	call   eax
c0010637:	83 c4 10             	add    esp,0x10
c001063a:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010640:	85 c0                	test   eax,eax
c0010642:	74 09                	je     c001064d <VgaText::load()+0x4f>
c0010644:	83 ec 0c             	sub    esp,0xc
c0010647:	53                   	push   ebx
c0010648:	ff d0                	call   eax
c001064a:	83 c4 10             	add    esp,0x10
c001064d:	83 c4 58             	add    esp,0x58
c0010650:	5b                   	pop    ebx
c0010651:	c3                   	ret    

c0010652 <VgaText::updateCursor()>:
c0010652:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010656:	39 05 84 e6 02 c0    	cmp    DWORD PTR ds:0xc002e684,eax
c001065c:	75 0c                	jne    c001066a <VgaText::updateCursor()+0x18>
c001065e:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010664:	85 c0                	test   eax,eax
c0010666:	74 02                	je     c001066a <VgaText::updateCursor()+0x18>
c0010668:	ff e0                	jmp    eax
c001066a:	c3                   	ret    
c001066b:	90                   	nop

c001066c <VgaText::showCursor(bool)>:
c001066c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010670:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010674:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c001067a:	c3                   	ret    
c001067b:	90                   	nop

c001067c <VgaText::disableBlink(bool)>:
c001067c:	56                   	push   esi
c001067d:	53                   	push   ebx
c001067e:	51                   	push   ecx
c001067f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010683:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010687:	39 1d 84 e6 02 c0    	cmp    DWORD PTR ds:0xc002e684,ebx
c001068d:	75 18                	jne    c00106a7 <VgaText::disableBlink(bool)+0x2b>
c001068f:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c0010695:	85 c0                	test   eax,eax
c0010697:	74 0e                	je     c00106a7 <VgaText::disableBlink(bool)+0x2b>
c0010699:	89 f1                	mov    ecx,esi
c001069b:	52                   	push   edx
c001069c:	52                   	push   edx
c001069d:	0f b6 d1             	movzx  edx,cl
c00106a0:	52                   	push   edx
c00106a1:	53                   	push   ebx
c00106a2:	ff d0                	call   eax
c00106a4:	83 c4 10             	add    esp,0x10
c00106a7:	89 f0                	mov    eax,esi
c00106a9:	83 f0 01             	xor    eax,0x1
c00106ac:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c00106b2:	58                   	pop    eax
c00106b3:	5b                   	pop    ebx
c00106b4:	5e                   	pop    esi
c00106b5:	c3                   	ret    

c00106b6 <VgaText::doANSI_SGR(int)>:
c00106b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106be:	85 d2                	test   edx,edx
c00106c0:	75 14                	jne    c00106d6 <VgaText::doANSI_SGR(int)+0x20>
c00106c2:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00106c8:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106ce:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c00106d4:	eb 65                	jmp    c001073b <VgaText::doANSI_SGR(int)+0x85>
c00106d6:	83 fa 07             	cmp    edx,0x7
c00106d9:	75 14                	jne    c00106ef <VgaText::doANSI_SGR(int)+0x39>
c00106db:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c00106e1:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c00106e7:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c00106ed:	eb 4c                	jmp    c001073b <VgaText::doANSI_SGR(int)+0x85>
c00106ef:	83 fa 1b             	cmp    edx,0x1b
c00106f2:	74 ce                	je     c00106c2 <VgaText::doANSI_SGR(int)+0xc>
c00106f4:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00106f7:	83 f9 07             	cmp    ecx,0x7
c00106fa:	77 09                	ja     c0010705 <VgaText::doANSI_SGR(int)+0x4f>
c00106fc:	8b 14 8d 00 d5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2b00]
c0010703:	eb 20                	jmp    c0010725 <VgaText::doANSI_SGR(int)+0x6f>
c0010705:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010708:	83 f9 07             	cmp    ecx,0x7
c001070b:	77 09                	ja     c0010716 <VgaText::doANSI_SGR(int)+0x60>
c001070d:	8b 14 8d 00 d5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2b00]
c0010714:	eb 25                	jmp    c001073b <VgaText::doANSI_SGR(int)+0x85>
c0010716:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010719:	83 f9 07             	cmp    ecx,0x7
c001071c:	77 0e                	ja     c001072c <VgaText::doANSI_SGR(int)+0x76>
c001071e:	8b 14 95 b8 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2c48]
c0010725:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001072b:	c3                   	ret    
c001072c:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001072f:	83 f9 07             	cmp    ecx,0x7
c0010732:	77 0d                	ja     c0010741 <VgaText::doANSI_SGR(int)+0x8b>
c0010734:	8b 14 95 90 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2c70]
c001073b:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010741:	c3                   	ret    

c0010742 <VgaText::setDefaultBgColour(VgaColour)>:
c0010742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010746:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001074a:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010750:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010756:	c3                   	ret    
c0010757:	90                   	nop

c0010758 <VgaText::setDefaultFgColour(VgaColour)>:
c0010758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001075c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010760:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c0010766:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001076c:	c3                   	ret    
c001076d:	90                   	nop

c001076e <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001076e:	53                   	push   ebx
c001076f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010773:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010777:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001077b:	51                   	push   ecx
c001077c:	e8 c1 ff ff ff       	call   c0010742 <VgaText::setDefaultBgColour(VgaColour)>
c0010781:	58                   	pop    eax
c0010782:	5a                   	pop    edx
c0010783:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010787:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001078b:	5b                   	pop    ebx
c001078c:	eb ca                	jmp    c0010758 <VgaText::setDefaultFgColour(VgaColour)>

c001078e <VgaText::combineColours(unsigned char, unsigned char)>:
c001078e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010792:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010797:	83 e0 0f             	and    eax,0xf
c001079a:	c1 e2 04             	shl    edx,0x4
c001079d:	09 d0                	or     eax,edx
c001079f:	c3                   	ret    

c00107a0 <VgaText::scrollScreen()>:
c00107a0:	57                   	push   edi
c00107a1:	56                   	push   esi
c00107a2:	be 01 00 00 00       	mov    esi,0x1
c00107a7:	53                   	push   ebx
c00107a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107ac:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00107b2:	31 ff                	xor    edi,edi
c00107b4:	01 d9                	add    ecx,ebx
c00107b6:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c00107b9:	83 fe 17             	cmp    esi,0x17
c00107bc:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c00107c2:	75 28                	jne    c00107ec <VgaText::scrollScreen()+0x4c>
c00107c4:	f7 c7 01 00 00 00    	test   edi,0x1
c00107ca:	74 1c                	je     c00107e8 <VgaText::scrollScreen()+0x48>
c00107cc:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c00107d3:	50                   	push   eax
c00107d4:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c00107db:	50                   	push   eax
c00107dc:	e8 ad ff ff ff       	call   c001078e <VgaText::combineColours(unsigned char, unsigned char)>
c00107e1:	5a                   	pop    edx
c00107e2:	5a                   	pop    edx
c00107e3:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c00107e6:	eb 04                	jmp    c00107ec <VgaText::scrollScreen()+0x4c>
c00107e8:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c00107ec:	47                   	inc    edi
c00107ed:	41                   	inc    ecx
c00107ee:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00107f4:	75 c0                	jne    c00107b6 <VgaText::scrollScreen()+0x16>
c00107f6:	46                   	inc    esi
c00107f7:	83 fe 18             	cmp    esi,0x18
c00107fa:	75 b0                	jne    c00107ac <VgaText::scrollScreen()+0xc>
c00107fc:	39 1d 84 e6 02 c0    	cmp    DWORD PTR ds:0xc002e684,ebx
c0010802:	75 24                	jne    c0010828 <VgaText::scrollScreen()+0x88>
c0010804:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c001080b:	74 08                	je     c0010815 <VgaText::scrollScreen()+0x75>
c001080d:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010813:	eb 13                	jmp    c0010828 <VgaText::scrollScreen()+0x88>
c0010815:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c001081b:	85 c0                	test   eax,eax
c001081d:	74 09                	je     c0010828 <VgaText::scrollScreen()+0x88>
c001081f:	83 ec 0c             	sub    esp,0xc
c0010822:	53                   	push   ebx
c0010823:	ff d0                	call   eax
c0010825:	83 c4 10             	add    esp,0x10
c0010828:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001082c:	5b                   	pop    ebx
c001082d:	5e                   	pop    esi
c001082e:	5f                   	pop    edi
c001082f:	e9 1e fe ff ff       	jmp    c0010652 <VgaText::updateCursor()>

c0010834 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010834:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010839:	c1 e0 08             	shl    eax,0x8
c001083c:	89 c2                	mov    edx,eax
c001083e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010843:	09 d0                	or     eax,edx
c0010845:	c3                   	ret    

c0010846 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010846:	53                   	push   ebx
c0010847:	83 ec 08             	sub    esp,0x8
c001084a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001084e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010853:	50                   	push   eax
c0010854:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010859:	50                   	push   eax
c001085a:	e8 2f ff ff ff       	call   c001078e <VgaText::combineColours(unsigned char, unsigned char)>
c001085f:	5a                   	pop    edx
c0010860:	0f b6 c0             	movzx  eax,al
c0010863:	5b                   	pop    ebx
c0010864:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010869:	50                   	push   eax
c001086a:	53                   	push   ebx
c001086b:	e8 c4 ff ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010870:	5a                   	pop    edx
c0010871:	5a                   	pop    edx
c0010872:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010878:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c001087c:	0f b7 d2             	movzx  edx,dx
c001087f:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010884:	39 0d 84 e6 02 c0    	cmp    DWORD PTR ds:0xc002e684,ecx
c001088a:	75 14                	jne    c00108a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001088c:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c0010892:	85 c0                	test   eax,eax
c0010894:	74 0a                	je     c00108a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010896:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001089a:	83 c4 08             	add    esp,0x8
c001089d:	5b                   	pop    ebx
c001089e:	ff e0                	jmp    eax
c00108a0:	83 c4 08             	add    esp,0x8
c00108a3:	5b                   	pop    ebx
c00108a4:	c3                   	ret    
c00108a5:	90                   	nop

c00108a6 <VgaText::getCursorX()>:
c00108a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108aa:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00108b0:	c3                   	ret    
c00108b1:	90                   	nop

c00108b2 <VgaText::getCursorY()>:
c00108b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108b6:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00108bc:	c3                   	ret    
c00108bd:	90                   	nop

c00108be <VgaText::setCursor(int, int)>:
c00108be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108c6:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c00108cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00108d0:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c00108d6:	e9 77 fd ff ff       	jmp    c0010652 <VgaText::updateCursor()>
c00108db:	90                   	nop

c00108dc <VgaText::setCursorX(int)>:
c00108dc:	83 ec 10             	sub    esp,0x10
c00108df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108e3:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00108e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108ed:	50                   	push   eax
c00108ee:	e8 cb ff ff ff       	call   c00108be <VgaText::setCursor(int, int)>
c00108f3:	83 c4 1c             	add    esp,0x1c
c00108f6:	c3                   	ret    
c00108f7:	90                   	nop

c00108f8 <VgaText::setCursorY(int)>:
c00108f8:	83 ec 10             	sub    esp,0x10
c00108fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010903:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010909:	50                   	push   eax
c001090a:	e8 af ff ff ff       	call   c00108be <VgaText::setCursor(int, int)>
c001090f:	83 c4 1c             	add    esp,0x1c
c0010912:	c3                   	ret    
c0010913:	90                   	nop

c0010914 <VgaText::incrementCursor(bool)>:
c0010914:	56                   	push   esi
c0010915:	53                   	push   ebx
c0010916:	51                   	push   ecx
c0010917:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001091b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001091f:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010925:	40                   	inc    eax
c0010926:	83 f8 50             	cmp    eax,0x50
c0010929:	74 08                	je     c0010933 <VgaText::incrementCursor(bool)+0x1f>
c001092b:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010931:	eb 33                	jmp    c0010966 <VgaText::incrementCursor(bool)+0x52>
c0010933:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010939:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010943:	8d 50 01             	lea    edx,[eax+0x1]
c0010946:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c001094c:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010952:	75 12                	jne    c0010966 <VgaText::incrementCursor(bool)+0x52>
c0010954:	83 ec 0c             	sub    esp,0xc
c0010957:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c001095d:	53                   	push   ebx
c001095e:	e8 3d fe ff ff       	call   c00107a0 <VgaText::scrollScreen()>
c0010963:	83 c4 10             	add    esp,0x10
c0010966:	89 f0                	mov    eax,esi
c0010968:	84 c0                	test   al,al
c001096a:	74 0c                	je     c0010978 <VgaText::incrementCursor(bool)+0x64>
c001096c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010970:	5a                   	pop    edx
c0010971:	5b                   	pop    ebx
c0010972:	5e                   	pop    esi
c0010973:	e9 da fc ff ff       	jmp    c0010652 <VgaText::updateCursor()>
c0010978:	58                   	pop    eax
c0010979:	5b                   	pop    ebx
c001097a:	5e                   	pop    esi
c001097b:	c3                   	ret    

c001097c <VgaText::updateRAMUsageDisplay(int)>:
c001097c:	56                   	push   esi
c001097d:	8b 35 e0 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d4e0
c0010983:	53                   	push   ebx
c0010984:	bb 0a 00 00 00       	mov    ebx,0xa
c0010989:	6a 0f                	push   0xf
c001098b:	6a 00                	push   0x0
c001098d:	e8 fc fd ff ff       	call   c001078e <VgaText::combineColours(unsigned char, unsigned char)>
c0010992:	5a                   	pop    edx
c0010993:	59                   	pop    ecx
c0010994:	0f b6 c8             	movzx  ecx,al
c0010997:	51                   	push   ecx
c0010998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001099c:	99                   	cdq    
c001099d:	f7 fb                	idiv   ebx
c001099f:	89 d3                	mov    ebx,edx
c00109a1:	83 c0 30             	add    eax,0x30
c00109a4:	83 c3 30             	add    ebx,0x30
c00109a7:	0f be c0             	movsx  eax,al
c00109aa:	0f b6 db             	movzx  ebx,bl
c00109ad:	50                   	push   eax
c00109ae:	e8 81 fe ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c00109b3:	5a                   	pop    edx
c00109b4:	5a                   	pop    edx
c00109b5:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00109bc:	51                   	push   ecx
c00109bd:	53                   	push   ebx
c00109be:	e8 71 fe ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c00109c3:	5b                   	pop    ebx
c00109c4:	5a                   	pop    edx
c00109c5:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00109cc:	51                   	push   ecx
c00109cd:	6a 25                	push   0x25
c00109cf:	e8 60 fe ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c00109d4:	59                   	pop    ecx
c00109d5:	5b                   	pop    ebx
c00109d6:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00109dd:	5b                   	pop    ebx
c00109de:	5e                   	pop    esi
c00109df:	c3                   	ret    

c00109e0 <VgaText::updateDiskUsage()>:
c00109e0:	55                   	push   ebp
c00109e1:	bd 10 27 00 00       	mov    ebp,0x2710
c00109e6:	57                   	push   edi
c00109e7:	8b 3d e0 d4 02 c0    	mov    edi,DWORD PTR ds:0xc002d4e0
c00109ed:	56                   	push   esi
c00109ee:	53                   	push   ebx
c00109ef:	6a 0f                	push   0xf
c00109f1:	6a 00                	push   0x0
c00109f3:	e8 96 fd ff ff       	call   c001078e <VgaText::combineColours(unsigned char, unsigned char)>
c00109f8:	5a                   	pop    edx
c00109f9:	0f b6 d8             	movzx  ebx,al
c00109fc:	59                   	pop    ecx
c00109fd:	8b 35 08 29 03 c0    	mov    esi,DWORD PTR ds:0xc0032908
c0010a03:	53                   	push   ebx
c0010a04:	b9 0a 00 00 00       	mov    ecx,0xa
c0010a09:	89 f0                	mov    eax,esi
c0010a0b:	99                   	cdq    
c0010a0c:	f7 fd                	idiv   ebp
c0010a0e:	99                   	cdq    
c0010a0f:	f7 f9                	idiv   ecx
c0010a11:	8d 42 30             	lea    eax,[edx+0x30]
c0010a14:	0f b6 c0             	movzx  eax,al
c0010a17:	50                   	push   eax
c0010a18:	e8 17 fe ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a1d:	5d                   	pop    ebp
c0010a1e:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a23:	5a                   	pop    edx
c0010a24:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010a28:	53                   	push   ebx
c0010a29:	89 f0                	mov    eax,esi
c0010a2b:	99                   	cdq    
c0010a2c:	f7 fd                	idiv   ebp
c0010a2e:	99                   	cdq    
c0010a2f:	f7 f9                	idiv   ecx
c0010a31:	8d 42 30             	lea    eax,[edx+0x30]
c0010a34:	0f b6 c0             	movzx  eax,al
c0010a37:	50                   	push   eax
c0010a38:	e8 f7 fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a3d:	5d                   	pop    ebp
c0010a3e:	bd 64 00 00 00       	mov    ebp,0x64
c0010a43:	5a                   	pop    edx
c0010a44:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a4b:	53                   	push   ebx
c0010a4c:	89 f0                	mov    eax,esi
c0010a4e:	99                   	cdq    
c0010a4f:	f7 fd                	idiv   ebp
c0010a51:	99                   	cdq    
c0010a52:	f7 f9                	idiv   ecx
c0010a54:	8d 42 30             	lea    eax,[edx+0x30]
c0010a57:	0f b6 c0             	movzx  eax,al
c0010a5a:	50                   	push   eax
c0010a5b:	e8 d4 fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a60:	5d                   	pop    ebp
c0010a61:	5a                   	pop    edx
c0010a62:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a69:	53                   	push   ebx
c0010a6a:	89 f0                	mov    eax,esi
c0010a6c:	99                   	cdq    
c0010a6d:	f7 f9                	idiv   ecx
c0010a6f:	89 d6                	mov    esi,edx
c0010a71:	99                   	cdq    
c0010a72:	f7 f9                	idiv   ecx
c0010a74:	8d 42 30             	lea    eax,[edx+0x30]
c0010a77:	0f b6 c0             	movzx  eax,al
c0010a7a:	50                   	push   eax
c0010a7b:	e8 b4 fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a80:	5d                   	pop    ebp
c0010a81:	5a                   	pop    edx
c0010a82:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a89:	53                   	push   ebx
c0010a8a:	8d 46 30             	lea    eax,[esi+0x30]
c0010a8d:	0f b6 f0             	movzx  esi,al
c0010a90:	56                   	push   esi
c0010a91:	e8 9e fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a96:	5e                   	pop    esi
c0010a97:	8b 35 04 29 03 c0    	mov    esi,DWORD PTR ds:0xc0032904
c0010a9d:	5d                   	pop    ebp
c0010a9e:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010aa5:	bd 10 27 00 00       	mov    ebp,0x2710
c0010aaa:	53                   	push   ebx
c0010aab:	89 f0                	mov    eax,esi
c0010aad:	99                   	cdq    
c0010aae:	f7 fd                	idiv   ebp
c0010ab0:	99                   	cdq    
c0010ab1:	f7 f9                	idiv   ecx
c0010ab3:	8d 42 30             	lea    eax,[edx+0x30]
c0010ab6:	0f b6 c0             	movzx  eax,al
c0010ab9:	50                   	push   eax
c0010aba:	e8 75 fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010abf:	5a                   	pop    edx
c0010ac0:	5d                   	pop    ebp
c0010ac1:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010ac8:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010acd:	53                   	push   ebx
c0010ace:	89 f0                	mov    eax,esi
c0010ad0:	99                   	cdq    
c0010ad1:	f7 fd                	idiv   ebp
c0010ad3:	99                   	cdq    
c0010ad4:	f7 f9                	idiv   ecx
c0010ad6:	8d 42 30             	lea    eax,[edx+0x30]
c0010ad9:	0f b6 c0             	movzx  eax,al
c0010adc:	50                   	push   eax
c0010add:	e8 52 fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ae2:	5a                   	pop    edx
c0010ae3:	5d                   	pop    ebp
c0010ae4:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010aeb:	bd 64 00 00 00       	mov    ebp,0x64
c0010af0:	53                   	push   ebx
c0010af1:	89 f0                	mov    eax,esi
c0010af3:	99                   	cdq    
c0010af4:	f7 fd                	idiv   ebp
c0010af6:	99                   	cdq    
c0010af7:	f7 f9                	idiv   ecx
c0010af9:	83 c2 30             	add    edx,0x30
c0010afc:	0f b6 d2             	movzx  edx,dl
c0010aff:	52                   	push   edx
c0010b00:	e8 2f fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b05:	5a                   	pop    edx
c0010b06:	5d                   	pop    ebp
c0010b07:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010b0e:	53                   	push   ebx
c0010b0f:	89 f0                	mov    eax,esi
c0010b11:	99                   	cdq    
c0010b12:	f7 f9                	idiv   ecx
c0010b14:	89 d6                	mov    esi,edx
c0010b16:	99                   	cdq    
c0010b17:	f7 f9                	idiv   ecx
c0010b19:	8d 42 30             	lea    eax,[edx+0x30]
c0010b1c:	0f b6 c0             	movzx  eax,al
c0010b1f:	50                   	push   eax
c0010b20:	e8 0f fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b25:	5a                   	pop    edx
c0010b26:	59                   	pop    ecx
c0010b27:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010b2e:	53                   	push   ebx
c0010b2f:	8d 46 30             	lea    eax,[esi+0x30]
c0010b32:	0f b6 f0             	movzx  esi,al
c0010b35:	56                   	push   esi
c0010b36:	e8 f9 fc ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b3b:	5b                   	pop    ebx
c0010b3c:	5e                   	pop    esi
c0010b3d:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010b44:	5b                   	pop    ebx
c0010b45:	5e                   	pop    esi
c0010b46:	5f                   	pop    edi
c0010b47:	5d                   	pop    ebp
c0010b48:	c3                   	ret    
c0010b49:	90                   	nop

c0010b4a <VgaText::updateTitle()>:
c0010b4a:	53                   	push   ebx
c0010b4b:	31 c0                	xor    eax,eax
c0010b4d:	83 ec 58             	sub    esp,0x58
c0010b50:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b54:	89 e1                	mov    ecx,esp
c0010b56:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b5a:	40                   	inc    eax
c0010b5b:	83 f8 50             	cmp    eax,0x50
c0010b5e:	75 f6                	jne    c0010b56 <VgaText::updateTitle()+0xc>
c0010b60:	31 c0                	xor    eax,eax
c0010b62:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b69:	84 db                	test   bl,bl
c0010b6b:	74 06                	je     c0010b73 <VgaText::updateTitle()+0x29>
c0010b6d:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b70:	40                   	inc    eax
c0010b71:	eb ef                	jmp    c0010b62 <VgaText::updateTitle()+0x18>
c0010b73:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b79:	85 c0                	test   eax,eax
c0010b7b:	74 09                	je     c0010b86 <VgaText::updateTitle()+0x3c>
c0010b7d:	53                   	push   ebx
c0010b7e:	53                   	push   ebx
c0010b7f:	51                   	push   ecx
c0010b80:	52                   	push   edx
c0010b81:	ff d0                	call   eax
c0010b83:	83 c4 10             	add    esp,0x10
c0010b86:	e8 55 fe ff ff       	call   c00109e0 <VgaText::updateDiskUsage()>
c0010b8b:	83 c4 58             	add    esp,0x58
c0010b8e:	5b                   	pop    ebx
c0010b8f:	c3                   	ret    

c0010b90 <VgaText::setTitleTextColour(VgaColour)>:
c0010b90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b98:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010b9e:	eb aa                	jmp    c0010b4a <VgaText::updateTitle()>

c0010ba0 <VgaText::setTitleColour(VgaColour)>:
c0010ba0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ba4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ba8:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010bae:	eb 9a                	jmp    c0010b4a <VgaText::updateTitle()>

c0010bb0 <VgaText::setTitle(char*)>:
c0010bb0:	53                   	push   ebx
c0010bb1:	83 ec 10             	sub    esp,0x10
c0010bb4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010bb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bbc:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010bc2:	50                   	push   eax
c0010bc3:	e8 6c fc fe ff       	call   c0000834 <strcpy>
c0010bc8:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010bcc:	83 c4 18             	add    esp,0x18
c0010bcf:	5b                   	pop    ebx
c0010bd0:	e9 75 ff ff ff       	jmp    c0010b4a <VgaText::updateTitle()>
c0010bd5:	90                   	nop

c0010bd6 <VgaText::decrementCursor(bool)>:
c0010bd6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010bda:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010bde:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010be4:	85 c0                	test   eax,eax
c0010be6:	74 07                	je     c0010bef <VgaText::decrementCursor(bool)+0x19>
c0010be8:	48                   	dec    eax
c0010be9:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010bef:	84 c9                	test   cl,cl
c0010bf1:	74 09                	je     c0010bfc <VgaText::decrementCursor(bool)+0x26>
c0010bf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010bf7:	e9 56 fa ff ff       	jmp    c0010652 <VgaText::updateCursor()>
c0010bfc:	c3                   	ret    
c0010bfd:	90                   	nop

c0010bfe <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010bfe:	53                   	push   ebx
c0010bff:	83 ec 08             	sub    esp,0x8
c0010c02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c06:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c0a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010c0e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010c12:	3c 07                	cmp    al,0x7
c0010c14:	75 2a                	jne    c0010c40 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010c16:	a1 30 e7 02 c0       	mov    eax,ds:0xc002e730
c0010c1b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010c23:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010c2b:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010c33:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010c37:	83 c4 08             	add    esp,0x8
c0010c3a:	5b                   	pop    ebx
c0010c3b:	e9 da 30 00 00       	jmp    c0013d1a <Buzzer::beep(int, int, bool)>
c0010c40:	3c 0d                	cmp    al,0xd
c0010c42:	75 0c                	jne    c0010c50 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010c44:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c4e:	eb 3b                	jmp    c0010c8b <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010c50:	3c 0a                	cmp    al,0xa
c0010c52:	75 40                	jne    c0010c94 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c54:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010c5a:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c64:	8d 50 01             	lea    edx,[eax+0x1]
c0010c67:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c6d:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c73:	75 12                	jne    c0010c87 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c75:	83 ec 0c             	sub    esp,0xc
c0010c78:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c7e:	53                   	push   ebx
c0010c7f:	e8 1c fb ff ff       	call   c00107a0 <VgaText::scrollScreen()>
c0010c84:	83 c4 10             	add    esp,0x10
c0010c87:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c8b:	83 c4 08             	add    esp,0x8
c0010c8e:	5b                   	pop    ebx
c0010c8f:	e9 be f9 ff ff       	jmp    c0010652 <VgaText::updateCursor()>
c0010c94:	3c 08                	cmp    al,0x8
c0010c96:	75 31                	jne    c0010cc9 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010c98:	50                   	push   eax
c0010c99:	50                   	push   eax
c0010c9a:	6a 01                	push   0x1
c0010c9c:	53                   	push   ebx
c0010c9d:	e8 34 ff ff ff       	call   c0010bd6 <VgaText::decrementCursor(bool)>
c0010ca2:	5a                   	pop    edx
c0010ca3:	59                   	pop    ecx
c0010ca4:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010caa:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010cb0:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010cb6:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010cbc:	6a 20                	push   0x20
c0010cbe:	53                   	push   ebx
c0010cbf:	e8 82 fb ff ff       	call   c0010846 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cc4:	83 c4 28             	add    esp,0x28
c0010cc7:	5b                   	pop    ebx
c0010cc8:	c3                   	ret    
c0010cc9:	83 ec 08             	sub    esp,0x8
c0010ccc:	0f be c0             	movsx  eax,al
c0010ccf:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010cd5:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010cdb:	51                   	push   ecx
c0010cdc:	52                   	push   edx
c0010cdd:	50                   	push   eax
c0010cde:	53                   	push   ebx
c0010cdf:	e8 62 fb ff ff       	call   c0010846 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ce4:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010ce8:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010cf0:	83 c4 28             	add    esp,0x28
c0010cf3:	5b                   	pop    ebx
c0010cf4:	e9 1b fc ff ff       	jmp    c0010914 <VgaText::incrementCursor(bool)>
c0010cf9:	90                   	nop

c0010cfa <VgaText::isShowingCursor()>:
c0010cfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cfe:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010d04:	c3                   	ret    
c0010d05:	90                   	nop

c0010d06 <VgaText::isBlinkDisabled()>:
c0010d06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d0a:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010d10:	83 f0 01             	xor    eax,0x1
c0010d13:	c3                   	ret    

c0010d14 <VgaText::setCursorHeight(int)>:
c0010d14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d18:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d1c:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010d22:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010d29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d2d:	e9 3a f9 ff ff       	jmp    c001066c <VgaText::showCursor(bool)>

c0010d32 <VgaText::getCursorHeight()>:
c0010d32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d36:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010d3c:	c3                   	ret    

c0010d3d <setActiveTerminal(VgaText*)>:
c0010d3d:	53                   	push   ebx
c0010d3e:	83 ec 08             	sub    esp,0x8
c0010d41:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d45:	85 db                	test   ebx,ebx
c0010d47:	75 11                	jne    c0010d5a <setActiveTerminal(VgaText*)+0x1d>
c0010d49:	c7 44 24 10 a0 a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a3a0
c0010d51:	83 c4 08             	add    esp,0x8
c0010d54:	5b                   	pop    ebx
c0010d55:	e9 63 98 00 00       	jmp    c001a5bd <Krnl::panic(char const*)>
c0010d5a:	50                   	push   eax
c0010d5b:	50                   	push   eax
c0010d5c:	53                   	push   ebx
c0010d5d:	68 ae a3 02 c0       	push   0xc002a3ae
c0010d62:	e8 b5 21 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0010d67:	a1 84 e6 02 c0       	mov    eax,ds:0xc002e684
c0010d6c:	83 c4 10             	add    esp,0x10
c0010d6f:	85 c0                	test   eax,eax
c0010d71:	74 0c                	je     c0010d7f <setActiveTerminal(VgaText*)+0x42>
c0010d73:	83 ec 0c             	sub    esp,0xc
c0010d76:	50                   	push   eax
c0010d77:	e8 d6 f8 ff ff       	call   c0010652 <VgaText::updateCursor()>
c0010d7c:	83 c4 10             	add    esp,0x10
c0010d7f:	89 1d 84 e6 02 c0    	mov    DWORD PTR ds:0xc002e684,ebx
c0010d85:	51                   	push   ecx
c0010d86:	51                   	push   ecx
c0010d87:	53                   	push   ebx
c0010d88:	68 c6 a3 02 c0       	push   0xc002a3c6
c0010d8d:	e8 8a 21 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0010d92:	83 c4 0c             	add    esp,0xc
c0010d95:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d9b:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010da1:	53                   	push   ebx
c0010da2:	e8 17 fb ff ff       	call   c00108be <VgaText::setCursor(int, int)>
c0010da7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010daa:	e8 57 ff ff ff       	call   c0010d06 <VgaText::isBlinkDisabled()>
c0010daf:	5a                   	pop    edx
c0010db0:	0f b6 c0             	movzx  eax,al
c0010db3:	59                   	pop    ecx
c0010db4:	50                   	push   eax
c0010db5:	53                   	push   ebx
c0010db6:	e8 c1 f8 ff ff       	call   c001067c <VgaText::disableBlink(bool)>
c0010dbb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dbe:	e8 6f ff ff ff       	call   c0010d32 <VgaText::getCursorHeight()>
c0010dc3:	5a                   	pop    edx
c0010dc4:	59                   	pop    ecx
c0010dc5:	50                   	push   eax
c0010dc6:	53                   	push   ebx
c0010dc7:	e8 48 ff ff ff       	call   c0010d14 <VgaText::setCursorHeight(int)>
c0010dcc:	83 c4 10             	add    esp,0x10
c0010dcf:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010dd6:	75 0a                	jne    c0010de2 <setActiveTerminal(VgaText*)+0xa5>
c0010dd8:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010de2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010de6:	83 c4 08             	add    esp,0x8
c0010de9:	5b                   	pop    ebx
c0010dea:	e9 0f f8 ff ff       	jmp    c00105fe <VgaText::load()>

c0010def <doTerminalCycle()>:
c0010def:	83 ec 18             	sub    esp,0x18
c0010df2:	a1 80 e6 02 c0       	mov    eax,ds:0xc002e680
c0010df7:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010dfd:	50                   	push   eax
c0010dfe:	a3 80 e6 02 c0       	mov    ds:0xc002e680,eax
c0010e03:	e8 35 ff ff ff       	call   c0010d3d <setActiveTerminal(VgaText*)>
c0010e08:	83 c4 1c             	add    esp,0x1c
c0010e0b:	c3                   	ret    

c0010e0c <VgaText::doUpdate()>:
c0010e0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e10:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010e16:	85 c0                	test   eax,eax
c0010e18:	74 02                	je     c0010e1c <VgaText::doUpdate()+0x10>
c0010e1a:	ff e0                	jmp    eax
c0010e1c:	c3                   	ret    
c0010e1d:	90                   	nop

c0010e1e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010e1e:	55                   	push   ebp
c0010e1f:	57                   	push   edi
c0010e20:	56                   	push   esi
c0010e21:	53                   	push   ebx
c0010e22:	83 ec 1c             	sub    esp,0x1c
c0010e25:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010e29:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e2e:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010e35:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010e38:	50                   	push   eax
c0010e39:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e3e:	50                   	push   eax
c0010e3f:	e8 4a f9 ff ff       	call   c001078e <VgaText::combineColours(unsigned char, unsigned char)>
c0010e44:	59                   	pop    ecx
c0010e45:	0f b6 c0             	movzx  eax,al
c0010e48:	5b                   	pop    ebx
c0010e49:	31 c9                	xor    ecx,ecx
c0010e4b:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e53:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010e57:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e5d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e61:	0f b7 db             	movzx  ebx,bx
c0010e64:	01 db                	add    ebx,ebx
c0010e66:	01 fb                	add    ebx,edi
c0010e68:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e6b:	84 c0                	test   al,al
c0010e6d:	0f 84 38 01 00 00    	je     c0010fab <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e73:	3c 0d                	cmp    al,0xd
c0010e75:	75 0f                	jne    c0010e86 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e77:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e81:	e9 1f 01 00 00       	jmp    c0010fa5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e86:	3c 0a                	cmp    al,0xa
c0010e88:	75 5b                	jne    c0010ee5 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e8a:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010e90:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e9a:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e9d:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010ea3:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010ea9:	75 12                	jne    c0010ebd <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010eab:	83 ec 0c             	sub    esp,0xc
c0010eae:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010eb4:	55                   	push   ebp
c0010eb5:	e8 e6 f8 ff ff       	call   c00107a0 <VgaText::scrollScreen()>
c0010eba:	83 c4 10             	add    esp,0x10
c0010ebd:	83 ec 0c             	sub    esp,0xc
c0010ec0:	55                   	push   ebp
c0010ec1:	e8 8c f7 ff ff       	call   c0010652 <VgaText::updateCursor()>
c0010ec6:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ece:	83 c4 10             	add    esp,0x10
c0010ed1:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ed7:	31 c9                	xor    ecx,ecx
c0010ed9:	0f b7 db             	movzx  ebx,bx
c0010edc:	01 db                	add    ebx,ebx
c0010ede:	01 fb                	add    ebx,edi
c0010ee0:	e9 c0 00 00 00       	jmp    c0010fa5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ee5:	3c 08                	cmp    al,0x8
c0010ee7:	75 4e                	jne    c0010f37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010ee9:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010eed:	53                   	push   ebx
c0010eee:	53                   	push   ebx
c0010eef:	6a 01                	push   0x1
c0010ef1:	55                   	push   ebp
c0010ef2:	e8 df fc ff ff       	call   c0010bd6 <VgaText::decrementCursor(bool)>
c0010ef7:	58                   	pop    eax
c0010ef8:	5a                   	pop    edx
c0010ef9:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010eff:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f05:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010f0b:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010f11:	6a 20                	push   0x20
c0010f13:	55                   	push   ebp
c0010f14:	e8 2d f9 ff ff       	call   c0010846 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f19:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f21:	83 c4 20             	add    esp,0x20
c0010f24:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010f2a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f2e:	0f b7 db             	movzx  ebx,bx
c0010f31:	01 db                	add    ebx,ebx
c0010f33:	01 fb                	add    ebx,edi
c0010f35:	eb 6e                	jmp    c0010fa5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010f37:	51                   	push   ecx
c0010f38:	51                   	push   ecx
c0010f39:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f3d:	50                   	push   eax
c0010f3e:	e8 f1 f8 ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010f43:	83 c4 10             	add    esp,0x10
c0010f46:	66 89 03             	mov    WORD PTR [ebx],ax
c0010f49:	39 2d 84 e6 02 c0    	cmp    DWORD PTR ds:0xc002e684,ebp
c0010f4f:	75 2a                	jne    c0010f7b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f51:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010f57:	85 c0                	test   eax,eax
c0010f59:	74 20                	je     c0010f7b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f5b:	52                   	push   edx
c0010f5c:	52                   	push   edx
c0010f5d:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f63:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f69:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f6d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f71:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f74:	51                   	push   ecx
c0010f75:	55                   	push   ebp
c0010f76:	ff d0                	call   eax
c0010f78:	83 c4 20             	add    esp,0x20
c0010f7b:	83 c3 02             	add    ebx,0x2
c0010f7e:	50                   	push   eax
c0010f7f:	50                   	push   eax
c0010f80:	6a 00                	push   0x0
c0010f82:	55                   	push   ebp
c0010f83:	e8 8c f9 ff ff       	call   c0010914 <VgaText::incrementCursor(bool)>
c0010f88:	83 c4 10             	add    esp,0x10
c0010f8b:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010f92:	75 0f                	jne    c0010fa3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010f94:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f9c:	0f b7 db             	movzx  ebx,bx
c0010f9f:	01 db                	add    ebx,ebx
c0010fa1:	01 fb                	add    ebx,edi
c0010fa3:	b1 01                	mov    cl,0x1
c0010fa5:	46                   	inc    esi
c0010fa6:	e9 bd fe ff ff       	jmp    c0010e68 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010fab:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010faf:	83 ec 0c             	sub    esp,0xc
c0010fb2:	55                   	push   ebp
c0010fb3:	e8 9a f6 ff ff       	call   c0010652 <VgaText::updateCursor()>
c0010fb8:	83 c4 10             	add    esp,0x10
c0010fbb:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010fbf:	84 c9                	test   cl,cl
c0010fc1:	74 0c                	je     c0010fcf <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010fc3:	83 ec 0c             	sub    esp,0xc
c0010fc6:	55                   	push   ebp
c0010fc7:	e8 40 fe ff ff       	call   c0010e0c <VgaText::doUpdate()>
c0010fcc:	83 c4 10             	add    esp,0x10
c0010fcf:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010fd6:	83 c4 1c             	add    esp,0x1c
c0010fd9:	5b                   	pop    ebx
c0010fda:	5e                   	pop    esi
c0010fdb:	5f                   	pop    edi
c0010fdc:	5d                   	pop    ebp
c0010fdd:	c3                   	ret    

c0010fde <VgaText::clearScreen()>:
c0010fde:	57                   	push   edi
c0010fdf:	56                   	push   esi
c0010fe0:	31 f6                	xor    esi,esi
c0010fe2:	53                   	push   ebx
c0010fe3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010fe7:	52                   	push   edx
c0010fe8:	6a 00                	push   0x0
c0010fea:	6a 00                	push   0x0
c0010fec:	53                   	push   ebx
c0010fed:	e8 cc f8 ff ff       	call   c00108be <VgaText::setCursor(int, int)>
c0010ff2:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010ff9:	83 c4 10             	add    esp,0x10
c0010ffc:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0011002:	7e 26                	jle    c001102a <VgaText::clearScreen()+0x4c>
c0011004:	31 ff                	xor    edi,edi
c0011006:	50                   	push   eax
c0011007:	50                   	push   eax
c0011008:	56                   	push   esi
c0011009:	57                   	push   edi
c001100a:	47                   	inc    edi
c001100b:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011011:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011017:	6a 20                	push   0x20
c0011019:	53                   	push   ebx
c001101a:	e8 27 f8 ff ff       	call   c0010846 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001101f:	83 c4 20             	add    esp,0x20
c0011022:	83 ff 50             	cmp    edi,0x50
c0011025:	75 df                	jne    c0011006 <VgaText::clearScreen()+0x28>
c0011027:	46                   	inc    esi
c0011028:	eb d2                	jmp    c0010ffc <VgaText::clearScreen()+0x1e>
c001102a:	83 ec 0c             	sub    esp,0xc
c001102d:	53                   	push   ebx
c001102e:	e8 d9 fd ff ff       	call   c0010e0c <VgaText::doUpdate()>
c0011033:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c001103a:	83 c4 10             	add    esp,0x10
c001103d:	5b                   	pop    ebx
c001103e:	5e                   	pop    esi
c001103f:	5f                   	pop    edi
c0011040:	c3                   	ret    
c0011041:	90                   	nop

c0011042 <VgaText::putchar(char)>:
c0011042:	56                   	push   esi
c0011043:	53                   	push   ebx
c0011044:	83 ec 14             	sub    esp,0x14
c0011047:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001104b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001104f:	3c 5b                	cmp    al,0x5b
c0011051:	75 21                	jne    c0011074 <VgaText::putchar(char)+0x32>
c0011053:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c001105a:	74 28                	je     c0011084 <VgaText::putchar(char)+0x42>
c001105c:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0011065:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c001106f:	e9 e2 00 00 00       	jmp    c0011156 <VgaText::putchar(char)+0x114>
c0011074:	3c 1b                	cmp    al,0x1b
c0011076:	75 0c                	jne    c0011084 <VgaText::putchar(char)+0x42>
c0011078:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c001107f:	e9 d2 00 00 00       	jmp    c0011156 <VgaText::putchar(char)+0x114>
c0011084:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c001108a:	84 c9                	test   cl,cl
c001108c:	0f 84 ab 00 00 00    	je     c001113d <VgaText::putchar(char)+0xfb>
c0011092:	8d 50 c0             	lea    edx,[eax-0x40]
c0011095:	80 fa 3e             	cmp    dl,0x3e
c0011098:	0f 87 82 00 00 00    	ja     c0011120 <VgaText::putchar(char)+0xde>
c001109e:	3c 6d                	cmp    al,0x6d
c00110a0:	75 4d                	jne    c00110ef <VgaText::putchar(char)+0xad>
c00110a2:	31 f6                	xor    esi,esi
c00110a4:	31 d2                	xor    edx,edx
c00110a6:	31 c0                	xor    eax,eax
c00110a8:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c00110ae:	7e 30                	jle    c00110e0 <VgaText::putchar(char)+0x9e>
c00110b0:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00110b8:	80 fa 3b             	cmp    dl,0x3b
c00110bb:	75 17                	jne    c00110d4 <VgaText::putchar(char)+0x92>
c00110bd:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00110c1:	50                   	push   eax
c00110c2:	53                   	push   ebx
c00110c3:	e8 ee f5 ff ff       	call   c00106b6 <VgaText::doANSI_SGR(int)>
c00110c8:	59                   	pop    ecx
c00110c9:	31 d2                	xor    edx,edx
c00110cb:	58                   	pop    eax
c00110cc:	31 c0                	xor    eax,eax
c00110ce:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00110d2:	eb 09                	jmp    c00110dd <VgaText::putchar(char)+0x9b>
c00110d4:	6b c0 0a             	imul   eax,eax,0xa
c00110d7:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00110db:	88 ca                	mov    dl,cl
c00110dd:	46                   	inc    esi
c00110de:	eb c8                	jmp    c00110a8 <VgaText::putchar(char)+0x66>
c00110e0:	84 d2                	test   dl,dl
c00110e2:	74 31                	je     c0011115 <VgaText::putchar(char)+0xd3>
c00110e4:	50                   	push   eax
c00110e5:	53                   	push   ebx
c00110e6:	e8 cb f5 ff ff       	call   c00106b6 <VgaText::doANSI_SGR(int)>
c00110eb:	58                   	pop    eax
c00110ec:	5a                   	pop    edx
c00110ed:	eb 26                	jmp    c0011115 <VgaText::putchar(char)+0xd3>
c00110ef:	3c 4a                	cmp    al,0x4a
c00110f1:	75 22                	jne    c0011115 <VgaText::putchar(char)+0xd3>
c00110f3:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c00110fa:	75 19                	jne    c0011115 <VgaText::putchar(char)+0xd3>
c00110fc:	83 ec 0c             	sub    esp,0xc
c00110ff:	53                   	push   ebx
c0011100:	e8 d9 fe ff ff       	call   c0010fde <VgaText::clearScreen()>
c0011105:	83 c4 0c             	add    esp,0xc
c0011108:	6a 00                	push   0x0
c001110a:	6a 00                	push   0x0
c001110c:	53                   	push   ebx
c001110d:	e8 ac f7 ff ff       	call   c00108be <VgaText::setCursor(int, int)>
c0011112:	83 c4 10             	add    esp,0x10
c0011115:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c001111e:	eb 36                	jmp    c0011156 <VgaText::putchar(char)+0x114>
c0011120:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0011126:	83 fa 0e             	cmp    edx,0xe
c0011129:	7f 2b                	jg     c0011156 <VgaText::putchar(char)+0x114>
c001112b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001112e:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0011134:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c001113b:	eb 19                	jmp    c0011156 <VgaText::putchar(char)+0x114>
c001113d:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011143:	0f be c0             	movsx  eax,al
c0011146:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001114c:	50                   	push   eax
c001114d:	53                   	push   ebx
c001114e:	e8 ab fa ff ff       	call   c0010bfe <VgaText::putchar(char, VgaColour, VgaColour)>
c0011153:	83 c4 10             	add    esp,0x10
c0011156:	83 c4 14             	add    esp,0x14
c0011159:	5b                   	pop    ebx
c001115a:	5e                   	pop    esi
c001115b:	c3                   	ret    

c001115c <VgaText::puts(char const*)>:
c001115c:	53                   	push   ebx
c001115d:	83 ec 08             	sub    esp,0x8
c0011160:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011164:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011167:	84 c0                	test   al,al
c0011169:	74 12                	je     c001117d <VgaText::puts(char const*)+0x21>
c001116b:	43                   	inc    ebx
c001116c:	51                   	push   ecx
c001116d:	51                   	push   ecx
c001116e:	50                   	push   eax
c001116f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011173:	e8 ca fe ff ff       	call   c0011042 <VgaText::putchar(char)>
c0011178:	83 c4 10             	add    esp,0x10
c001117b:	eb e7                	jmp    c0011164 <VgaText::puts(char const*)+0x8>
c001117d:	83 c4 08             	add    esp,0x8
c0011180:	5b                   	pop    ebx
c0011181:	c3                   	ret    

c0011182 <VgaText::putx(unsigned int)>:
c0011182:	57                   	push   edi
c0011183:	b9 11 00 00 00       	mov    ecx,0x11
c0011188:	56                   	push   esi
c0011189:	be e2 a3 02 c0       	mov    esi,0xc002a3e2
c001118e:	53                   	push   ebx
c001118f:	83 ec 20             	sub    esp,0x20
c0011192:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011196:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001119a:	fc                   	cld    
c001119b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001119d:	be 08 00 00 00       	mov    esi,0x8
c00111a2:	50                   	push   eax
c00111a3:	50                   	push   eax
c00111a4:	89 d8                	mov    eax,ebx
c00111a6:	c1 e3 04             	shl    ebx,0x4
c00111a9:	c1 e8 1c             	shr    eax,0x1c
c00111ac:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00111b1:	50                   	push   eax
c00111b2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00111b6:	e8 87 fe ff ff       	call   c0011042 <VgaText::putchar(char)>
c00111bb:	83 c4 10             	add    esp,0x10
c00111be:	4e                   	dec    esi
c00111bf:	75 e1                	jne    c00111a2 <VgaText::putx(unsigned int)+0x20>
c00111c1:	83 c4 20             	add    esp,0x20
c00111c4:	5b                   	pop    ebx
c00111c5:	5e                   	pop    esi
c00111c6:	5f                   	pop    edi
c00111c7:	c3                   	ret    

c00111c8 <VgaText::VgaText(char const*)>:
c00111c8:	57                   	push   edi
c00111c9:	56                   	push   esi
c00111ca:	53                   	push   ebx
c00111cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111cf:	83 ec 08             	sub    esp,0x8
c00111d2:	6a 00                	push   0x0
c00111d4:	50                   	push   eax
c00111d5:	e8 6e 05 00 00       	call   c0011748 <UnixFile::UnixFile(int)>
c00111da:	83 c4 10             	add    esp,0x10
c00111dd:	ba 48 a4 02 c0       	mov    edx,0xc002a448
c00111e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e6:	89 10                	mov    DWORD PTR [eax],edx
c00111e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ec:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c00111f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111fa:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0011204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011208:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c001120f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011213:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c001121a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001121e:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0011228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001122c:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0011236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001123a:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0011241:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011245:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c001124c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011250:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0011256:	bb 60 e6 02 c0       	mov    ebx,0xc002e660
c001125b:	b8 08 00 00 00       	mov    eax,0x8
c0011260:	fc                   	cld    
c0011261:	89 d7                	mov    edi,edx
c0011263:	89 de                	mov    esi,ebx
c0011265:	89 c1                	mov    ecx,eax
c0011267:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001126d:	05 1e 10 00 00       	add    eax,0x101e
c0011272:	83 ec 08             	sub    esp,0x8
c0011275:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011279:	50                   	push   eax
c001127a:	e8 b5 f5 fe ff       	call   c0000834 <strcpy>
c001127f:	83 c4 10             	add    esp,0x10
c0011282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011286:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0011290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011294:	83 c0 0c             	add    eax,0xc
c0011297:	83 ec 04             	sub    esp,0x4
c001129a:	68 00 0f 00 00       	push   0xf00
c001129f:	6a 00                	push   0x0
c00112a1:	50                   	push   eax
c00112a2:	e8 d1 f4 fe ff       	call   c0000778 <memset>
c00112a7:	83 c4 10             	add    esp,0x10
c00112aa:	83 ec 04             	sub    esp,0x4
c00112ad:	6a 00                	push   0x0
c00112af:	6a 07                	push   0x7
c00112b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112b5:	e8 b4 f4 ff ff       	call   c001076e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00112ba:	83 c4 10             	add    esp,0x10
c00112bd:	83 ec 08             	sub    esp,0x8
c00112c0:	6a 02                	push   0x2
c00112c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112c6:	e8 49 fa ff ff       	call   c0010d14 <VgaText::setCursorHeight(int)>
c00112cb:	83 c4 10             	add    esp,0x10
c00112ce:	83 ec 04             	sub    esp,0x4
c00112d1:	6a 00                	push   0x0
c00112d3:	6a 00                	push   0x0
c00112d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112d9:	e8 e0 f5 ff ff       	call   c00108be <VgaText::setCursor(int, int)>
c00112de:	83 c4 10             	add    esp,0x10
c00112e1:	83 ec 08             	sub    esp,0x8
c00112e4:	6a 01                	push   0x1
c00112e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112ea:	e8 7d f3 ff ff       	call   c001066c <VgaText::showCursor(bool)>
c00112ef:	83 c4 10             	add    esp,0x10
c00112f2:	83 ec 08             	sub    esp,0x8
c00112f5:	6a 01                	push   0x1
c00112f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112fb:	e8 7c f3 ff ff       	call   c001067c <VgaText::disableBlink(bool)>
c0011300:	83 c4 10             	add    esp,0x10
c0011303:	83 ec 0c             	sub    esp,0xc
c0011306:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001130a:	e8 cf fc ff ff       	call   c0010fde <VgaText::clearScreen()>
c001130f:	83 c4 10             	add    esp,0x10
c0011312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011316:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c001131d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011321:	05 9e 10 00 00       	add    eax,0x109e
c0011326:	83 ec 04             	sub    esp,0x4
c0011329:	68 96 00 00 00       	push   0x96
c001132e:	6a 00                	push   0x0
c0011330:	50                   	push   eax
c0011331:	e8 42 f4 fe ff       	call   c0000778 <memset>
c0011336:	83 c4 10             	add    esp,0x10
c0011339:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001133d:	05 34 11 00 00       	add    eax,0x1134
c0011342:	83 ec 04             	sub    esp,0x4
c0011345:	68 2c 01 00 00       	push   0x12c
c001134a:	6a 00                	push   0x0
c001134c:	50                   	push   eax
c001134d:	e8 26 f4 fe ff       	call   c0000778 <memset>
c0011352:	83 c4 10             	add    esp,0x10
c0011355:	90                   	nop
c0011356:	5b                   	pop    ebx
c0011357:	5e                   	pop    esi
c0011358:	5f                   	pop    edi
c0011359:	c3                   	ret    

c001135a <VgaText::receiveKey(unsigned char)>:
c001135a:	55                   	push   ebp
c001135b:	57                   	push   edi
c001135c:	56                   	push   esi
c001135d:	53                   	push   ebx
c001135e:	83 ec 1c             	sub    esp,0x1c
c0011361:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011365:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011369:	84 db                	test   bl,bl
c001136b:	0f 84 c9 00 00 00    	je     c001143a <VgaText::receiveKey(unsigned char)+0xe0>
c0011371:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0011377:	80 fb 08             	cmp    bl,0x8
c001137a:	75 2c                	jne    c00113a8 <VgaText::receiveKey(unsigned char)+0x4e>
c001137c:	83 ec 0c             	sub    esp,0xc
c001137f:	57                   	push   edi
c0011380:	e8 0f f4 fe ff       	call   c0000794 <strlen>
c0011385:	83 c4 10             	add    esp,0x10
c0011388:	85 c0                	test   eax,eax
c001138a:	74 41                	je     c00113cd <VgaText::receiveKey(unsigned char)+0x73>
c001138c:	50                   	push   eax
c001138d:	50                   	push   eax
c001138e:	6a 08                	push   0x8
c0011390:	56                   	push   esi
c0011391:	e8 ac fc ff ff       	call   c0011042 <VgaText::putchar(char)>
c0011396:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011399:	e8 f6 f3 fe ff       	call   c0000794 <strlen>
c001139e:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c00113a6:	eb 22                	jmp    c00113ca <VgaText::receiveKey(unsigned char)+0x70>
c00113a8:	0f be c3             	movsx  eax,bl
c00113ab:	52                   	push   edx
c00113ac:	52                   	push   edx
c00113ad:	50                   	push   eax
c00113ae:	56                   	push   esi
c00113af:	e8 8e fc ff ff       	call   c0011042 <VgaText::putchar(char)>
c00113b4:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00113b8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00113bd:	59                   	pop    ecx
c00113be:	5d                   	pop    ebp
c00113bf:	8d 44 24 16          	lea    eax,[esp+0x16]
c00113c3:	50                   	push   eax
c00113c4:	57                   	push   edi
c00113c5:	e8 aa f5 fe ff       	call   c0000974 <strcat>
c00113ca:	83 c4 10             	add    esp,0x10
c00113cd:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c00113d4:	75 05                	jne    c00113db <VgaText::receiveKey(unsigned char)+0x81>
c00113d6:	80 fb 0a             	cmp    bl,0xa
c00113d9:	75 53                	jne    c001142e <VgaText::receiveKey(unsigned char)+0xd4>
c00113db:	83 ec 0c             	sub    esp,0xc
c00113de:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c00113e4:	53                   	push   ebx
c00113e5:	e8 aa f3 fe ff       	call   c0000794 <strlen>
c00113ea:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113ed:	89 c5                	mov    ebp,eax
c00113ef:	e8 a0 f3 fe ff       	call   c0000794 <strlen>
c00113f4:	83 c4 10             	add    esp,0x10
c00113f7:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00113fb:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011400:	76 10                	jbe    c0011412 <VgaText::receiveKey(unsigned char)+0xb8>
c0011402:	83 ec 0c             	sub    esp,0xc
c0011405:	68 f3 a3 02 c0       	push   0xc002a3f3
c001140a:	e8 ae 91 00 00       	call   c001a5bd <Krnl::panic(char const*)>
c001140f:	83 c4 10             	add    esp,0x10
c0011412:	50                   	push   eax
c0011413:	50                   	push   eax
c0011414:	57                   	push   edi
c0011415:	53                   	push   ebx
c0011416:	e8 59 f5 fe ff       	call   c0000974 <strcat>
c001141b:	83 c4 0c             	add    esp,0xc
c001141e:	68 96 00 00 00       	push   0x96
c0011423:	6a 00                	push   0x0
c0011425:	57                   	push   edi
c0011426:	e8 4d f3 fe ff       	call   c0000778 <memset>
c001142b:	83 c4 10             	add    esp,0x10
c001142e:	83 ec 0c             	sub    esp,0xc
c0011431:	56                   	push   esi
c0011432:	e8 d5 f9 ff ff       	call   c0010e0c <VgaText::doUpdate()>
c0011437:	83 c4 10             	add    esp,0x10
c001143a:	83 c4 1c             	add    esp,0x1c
c001143d:	5b                   	pop    ebx
c001143e:	5e                   	pop    esi
c001143f:	5f                   	pop    edi
c0011440:	5d                   	pop    ebp
c0011441:	c3                   	ret    

c0011442 <VgaText::write(unsigned long long, void*, int*)>:
c0011442:	55                   	push   ebp
c0011443:	57                   	push   edi
c0011444:	56                   	push   esi
c0011445:	53                   	push   ebx
c0011446:	83 ec 0c             	sub    esp,0xc
c0011449:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001144d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011451:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011455:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c001145c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001145f:	39 eb                	cmp    ebx,ebp
c0011461:	74 13                	je     c0011476 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011463:	43                   	inc    ebx
c0011464:	50                   	push   eax
c0011465:	50                   	push   eax
c0011466:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001146a:	50                   	push   eax
c001146b:	56                   	push   esi
c001146c:	e8 d1 fb ff ff       	call   c0011042 <VgaText::putchar(char)>
c0011471:	83 c4 10             	add    esp,0x10
c0011474:	eb e9                	jmp    c001145f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011476:	83 ec 0c             	sub    esp,0xc
c0011479:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011480:	56                   	push   esi
c0011481:	e8 86 f9 ff ff       	call   c0010e0c <VgaText::doUpdate()>
c0011486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001148a:	89 38                	mov    DWORD PTR [eax],edi
c001148c:	83 c4 1c             	add    esp,0x1c
c001148f:	31 c0                	xor    eax,eax
c0011491:	5b                   	pop    ebx
c0011492:	5e                   	pop    esi
c0011493:	5f                   	pop    edi
c0011494:	5d                   	pop    ebp
c0011495:	c3                   	ret    

c0011496 <newTerminal(char*)>:
c0011496:	83 ec 28             	sub    esp,0x28
c0011499:	68 60 12 00 00       	push   0x1260
c001149e:	e8 9d e3 ff ff       	call   c000f840 <malloc>
c00114a3:	5a                   	pop    edx
c00114a4:	59                   	pop    ecx
c00114a5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00114a9:	50                   	push   eax
c00114aa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114ae:	e8 15 fd ff ff       	call   c00111c8 <VgaText::VgaText(char const*)>
c00114b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114b7:	83 c4 2c             	add    esp,0x2c
c00114ba:	c3                   	ret    
c00114bb:	90                   	nop

c00114bc <TSS::TSS()>:
c00114bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114c0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00114c7:	90                   	nop
c00114c8:	c3                   	ret    
c00114c9:	90                   	nop

c00114ca <TSS::setESP(unsigned long)>:
c00114ca:	55                   	push   ebp
c00114cb:	89 e5                	mov    ebp,esp
c00114cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114d3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114d6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114d9:	90                   	nop
c00114da:	5d                   	pop    ebp
c00114db:	c3                   	ret    

c00114dc <TSS::flush()>:
c00114dc:	55                   	push   ebp
c00114dd:	89 e5                	mov    ebp,esp
c00114df:	83 ec 10             	sub    esp,0x10
c00114e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00114e7:	83 c8 03             	or     eax,0x3
c00114ea:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00114ee:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00114f2:	66 89 d0             	mov    ax,dx
c00114f5:	0f 00 d8             	ltr    ax
c00114f8:	90                   	nop
c00114f9:	c9                   	leave  
c00114fa:	c3                   	ret    
c00114fb:	90                   	nop

c00114fc <TSS::setup(unsigned long, unsigned long)>:
c00114fc:	55                   	push   ebp
c00114fd:	89 e5                	mov    ebp,esp
c00114ff:	83 ec 18             	sub    esp,0x18
c0011502:	83 ec 0c             	sub    esp,0xc
c0011505:	6a 68                	push   0x68
c0011507:	e8 34 e3 ff ff       	call   c000f840 <malloc>
c001150c:	83 c4 10             	add    esp,0x10
c001150f:	89 c2                	mov    edx,eax
c0011511:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011514:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011517:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001151a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001151d:	83 ec 04             	sub    esp,0x4
c0011520:	6a 68                	push   0x68
c0011522:	6a 00                	push   0x0
c0011524:	50                   	push   eax
c0011525:	e8 4e f2 fe ff       	call   c0000778 <memset>
c001152a:	83 c4 10             	add    esp,0x10
c001152d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011530:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011533:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011539:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001153c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001153f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011545:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011548:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001154b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001154e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011551:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011554:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011557:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c001155d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011560:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011563:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011569:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001156c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001156f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011575:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011578:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001157b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011584:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011587:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c001158d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011590:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011593:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011599:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001159c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001159f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00115a2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00115a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115ab:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00115ae:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115b7:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00115be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115c4:	0f 20 da             	mov    edx,cr3
c00115c7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00115ca:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00115cd:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00115d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115d6:	83 ec 08             	sub    esp,0x8
c00115d9:	50                   	push   eax
c00115da:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115dd:	50                   	push   eax
c00115de:	e8 3b da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c00115e3:	83 c4 10             	add    esp,0x10
c00115e6:	83 ec 08             	sub    esp,0x8
c00115e9:	6a 68                	push   0x68
c00115eb:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115ee:	50                   	push   eax
c00115ef:	e8 46 da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c00115f4:	83 c4 10             	add    esp,0x10
c00115f7:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00115fb:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115fe:	83 e0 0f             	and    eax,0xf
c0011601:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011604:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011607:	83 c8 40             	or     eax,0x40
c001160a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001160d:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c0011612:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011618:	05 78 01 00 00       	add    eax,0x178
c001161d:	83 ec 04             	sub    esp,0x4
c0011620:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011623:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011626:	50                   	push   eax
c0011627:	e8 42 da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c001162c:	83 c4 10             	add    esp,0x10
c001162f:	89 c2                	mov    edx,eax
c0011631:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011634:	89 10                	mov    DWORD PTR [eax],edx
c0011636:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c001163b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011641:	05 78 01 00 00       	add    eax,0x178
c0011646:	83 ec 0c             	sub    esp,0xc
c0011649:	50                   	push   eax
c001164a:	e8 63 da ff ff       	call   c000f0b2 <GDT::flush()>
c001164f:	83 c4 10             	add    esp,0x10
c0011652:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011655:	8b 00                	mov    eax,DWORD PTR [eax]
c0011657:	83 ec 08             	sub    esp,0x8
c001165a:	50                   	push   eax
c001165b:	68 5c a4 02 c0       	push   0xc002a45c
c0011660:	e8 b7 18 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0011665:	83 c4 10             	add    esp,0x10
c0011668:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001166b:	8b 00                	mov    eax,DWORD PTR [eax]
c001166d:	c9                   	leave  
c001166e:	c3                   	ret    
c001166f:	90                   	nop

c0011670 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011670:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011674:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011678:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001167b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011680:	75 08                	jne    c001168a <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011682:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011688:	eb 38                	jmp    c00116c2 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001168a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001168f:	75 17                	jne    c00116a8 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011691:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011696:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011699:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001169f:	8b 10                	mov    edx,DWORD PTR [eax]
c00116a1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116a5:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00116a8:	89 c1                	mov    ecx,eax
c00116aa:	83 e1 fd             	and    ecx,0xfffffffd
c00116ad:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00116b3:	74 cd                	je     c0011682 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116b5:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116ba:	83 e0 ef             	and    eax,0xffffffef
c00116bd:	83 f8 08             	cmp    eax,0x8
c00116c0:	76 c0                	jbe    c0011682 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116c2:	31 c0                	xor    eax,eax
c00116c4:	c3                   	ret    
c00116c5:	90                   	nop

c00116c6 <ReservedFilename::isAtty()>:
c00116c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116ca:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00116cd:	31 c0                	xor    eax,eax
c00116cf:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00116d5:	74 09                	je     c00116e0 <ReservedFilename::isAtty()+0x1a>
c00116d7:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00116dd:	0f 94 c0             	sete   al
c00116e0:	c3                   	ret    
c00116e1:	90                   	nop

c00116e2 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00116e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116e6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00116ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116ed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00116f1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00116f6:	75 08                	jne    c0011700 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00116f8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00116fe:	eb 3d                	jmp    c001173d <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011700:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011705:	75 17                	jne    c001171e <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011707:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001170c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001170f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011715:	8b 10                	mov    edx,DWORD PTR [eax]
c0011717:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001171b:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c001171e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011723:	75 04                	jne    c0011729 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011725:	89 0a                	mov    DWORD PTR [edx],ecx
c0011727:	eb 14                	jmp    c001173d <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011729:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c001172e:	74 c8                	je     c00116f8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011730:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011735:	83 e0 ef             	and    eax,0xffffffef
c0011738:	83 f8 08             	cmp    eax,0x8
c001173b:	76 bb                	jbe    c00116f8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001173d:	31 c0                	xor    eax,eax
c001173f:	c3                   	ret    

c0011740 <UnixFile::getFileDescriptor()>:
c0011740:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011744:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011747:	c3                   	ret    

c0011748 <UnixFile::UnixFile(int)>:
c0011748:	53                   	push   ebx
c0011749:	83 ec 28             	sub    esp,0x28
c001174c:	ba 48 a5 02 c0       	mov    edx,0xc002a548
c0011751:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011755:	89 10                	mov    DWORD PTR [eax],edx
c0011757:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001175f:	0f 8f 8c 01 00 00    	jg     c00118f1 <UnixFile::UnixFile(int)+0x1a9>
c0011765:	a1 40 d5 02 c0       	mov    eax,ds:0xc002d540
c001176a:	8d 50 01             	lea    edx,[eax+0x1]
c001176d:	89 15 40 d5 02 c0    	mov    DWORD PTR ds:0xc002d540,edx
c0011773:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011777:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001177a:	83 ec 08             	sub    esp,0x8
c001177d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011781:	68 18 e7 02 c0       	push   0xc002e718
c0011786:	e8 a5 6f 01 00       	call   c0028730 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001178b:	83 c4 10             	add    esp,0x10
c001178e:	a0 14 e7 02 c0       	mov    al,ds:0xc002e714
c0011793:	83 f0 01             	xor    eax,0x1
c0011796:	84 c0                	test   al,al
c0011798:	0f 84 54 01 00 00    	je     c00118f2 <UnixFile::UnixFile(int)+0x1aa>
c001179e:	c6 05 14 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e714,0x1
c00117a5:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00117ad:	83 ec 0c             	sub    esp,0xc
c00117b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00117b4:	e8 87 e0 ff ff       	call   c000f840 <malloc>
c00117b9:	83 c4 10             	add    esp,0x10
c00117bc:	89 c3                	mov    ebx,eax
c00117be:	83 ec 08             	sub    esp,0x8
c00117c1:	68 03 ff ff 0f       	push   0xfffff03
c00117c6:	53                   	push   ebx
c00117c7:	e8 2c 01 00 00       	call   c00118f8 <ReservedFilename::ReservedFilename(int)>
c00117cc:	83 c4 10             	add    esp,0x10
c00117cf:	89 1d 0c e7 02 c0    	mov    DWORD PTR ds:0xc002e70c,ebx
c00117d5:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00117dd:	83 ec 0c             	sub    esp,0xc
c00117e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117e4:	e8 57 e0 ff ff       	call   c000f840 <malloc>
c00117e9:	83 c4 10             	add    esp,0x10
c00117ec:	89 c3                	mov    ebx,eax
c00117ee:	83 ec 08             	sub    esp,0x8
c00117f1:	68 01 ff ff 0f       	push   0xfffff01
c00117f6:	53                   	push   ebx
c00117f7:	e8 fc 00 00 00       	call   c00118f8 <ReservedFilename::ReservedFilename(int)>
c00117fc:	83 c4 10             	add    esp,0x10
c00117ff:	89 1d 10 e7 02 c0    	mov    DWORD PTR ds:0xc002e710,ebx
c0011805:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c001180d:	83 ec 0c             	sub    esp,0xc
c0011810:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011814:	e8 27 e0 ff ff       	call   c000f840 <malloc>
c0011819:	83 c4 10             	add    esp,0x10
c001181c:	89 c3                	mov    ebx,eax
c001181e:	83 ec 08             	sub    esp,0x8
c0011821:	68 00 ff ff 0f       	push   0xfffff00
c0011826:	53                   	push   ebx
c0011827:	e8 cc 00 00 00       	call   c00118f8 <ReservedFilename::ReservedFilename(int)>
c001182c:	83 c4 10             	add    esp,0x10
c001182f:	89 1d 04 e7 02 c0    	mov    DWORD PTR ds:0xc002e704,ebx
c0011835:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c001183d:	83 ec 0c             	sub    esp,0xc
c0011840:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011844:	e8 f7 df ff ff       	call   c000f840 <malloc>
c0011849:	83 c4 10             	add    esp,0x10
c001184c:	89 c3                	mov    ebx,eax
c001184e:	83 ec 08             	sub    esp,0x8
c0011851:	68 02 ff ff 0f       	push   0xfffff02
c0011856:	53                   	push   ebx
c0011857:	e8 9c 00 00 00       	call   c00118f8 <ReservedFilename::ReservedFilename(int)>
c001185c:	83 c4 10             	add    esp,0x10
c001185f:	89 1d 08 e7 02 c0    	mov    DWORD PTR ds:0xc002e708,ebx
c0011865:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001186d:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011872:	7f 7e                	jg     c00118f2 <UnixFile::UnixFile(int)+0x1aa>
c0011874:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001187c:	83 ec 0c             	sub    esp,0xc
c001187f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011883:	e8 b8 df ff ff       	call   c000f840 <malloc>
c0011888:	83 c4 10             	add    esp,0x10
c001188b:	89 c3                	mov    ebx,eax
c001188d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011891:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011896:	83 ec 08             	sub    esp,0x8
c0011899:	50                   	push   eax
c001189a:	53                   	push   ebx
c001189b:	e8 58 00 00 00       	call   c00118f8 <ReservedFilename::ReservedFilename(int)>
c00118a0:	83 c4 10             	add    esp,0x10
c00118a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118a7:	89 1c 85 e0 e6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1920],ebx
c00118ae:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00118b6:	83 ec 0c             	sub    esp,0xc
c00118b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118bd:	e8 7e df ff ff       	call   c000f840 <malloc>
c00118c2:	83 c4 10             	add    esp,0x10
c00118c5:	89 c3                	mov    ebx,eax
c00118c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118cb:	05 20 ff ff 0f       	add    eax,0xfffff20
c00118d0:	83 ec 08             	sub    esp,0x8
c00118d3:	50                   	push   eax
c00118d4:	53                   	push   ebx
c00118d5:	e8 1e 00 00 00       	call   c00118f8 <ReservedFilename::ReservedFilename(int)>
c00118da:	83 c4 10             	add    esp,0x10
c00118dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118e1:	89 1c 85 a0 e6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1960],ebx
c00118e8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118ec:	e9 7c ff ff ff       	jmp    c001186d <UnixFile::UnixFile(int)+0x125>
c00118f1:	90                   	nop
c00118f2:	83 c4 28             	add    esp,0x28
c00118f5:	5b                   	pop    ebx
c00118f6:	c3                   	ret    
c00118f7:	90                   	nop

c00118f8 <ReservedFilename::ReservedFilename(int)>:
c00118f8:	83 ec 0c             	sub    esp,0xc
c00118fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ff:	83 ec 08             	sub    esp,0x8
c0011902:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011906:	50                   	push   eax
c0011907:	e8 3c fe ff ff       	call   c0011748 <UnixFile::UnixFile(int)>
c001190c:	83 c4 10             	add    esp,0x10
c001190f:	ba 64 a5 02 c0       	mov    edx,0xc002a564
c0011914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011918:	89 10                	mov    DWORD PTR [eax],edx
c001191a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001191e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011922:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011925:	90                   	nop
c0011926:	83 c4 0c             	add    esp,0xc
c0011929:	c3                   	ret    

c001192a <UnixFile::~UnixFile()>:
c001192a:	83 ec 1c             	sub    esp,0x1c
c001192d:	ba 48 a5 02 c0       	mov    edx,0xc002a548
c0011932:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011936:	89 10                	mov    DWORD PTR [eax],edx
c0011938:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001193c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001193f:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011944:	7f 73                	jg     c00119b9 <UnixFile::~UnixFile()+0x8f>
c0011946:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001194e:	83 ec 0c             	sub    esp,0xc
c0011951:	68 18 e7 02 c0       	push   0xc002e718
c0011956:	e8 a9 6e 01 00       	call   c0028804 <LinkedList<UnixFile>::getFirstElement()>
c001195b:	83 c4 10             	add    esp,0x10
c001195e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011962:	83 ec 0c             	sub    esp,0xc
c0011965:	68 18 e7 02 c0       	push   0xc002e718
c001196a:	e8 9d 6e 01 00       	call   c002880c <LinkedList<UnixFile>::removeFirst()>
c001196f:	83 c4 10             	add    esp,0x10
c0011972:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011976:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001197a:	74 40                	je     c00119bc <UnixFile::~UnixFile()+0x92>
c001197c:	83 ec 08             	sub    esp,0x8
c001197f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011983:	68 18 e7 02 c0       	push   0xc002e718
c0011988:	e8 a3 6d 01 00       	call   c0028730 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001198d:	83 c4 10             	add    esp,0x10
c0011990:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011994:	8d 50 01             	lea    edx,[eax+0x1]
c0011997:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001199b:	3d 88 13 00 00       	cmp    eax,0x1388
c00119a0:	0f 94 c0             	sete   al
c00119a3:	84 c0                	test   al,al
c00119a5:	74 a7                	je     c001194e <UnixFile::~UnixFile()+0x24>
c00119a7:	83 ec 0c             	sub    esp,0xc
c00119aa:	68 20 a5 02 c0       	push   0xc002a520
c00119af:	e8 09 8c 00 00       	call   c001a5bd <Krnl::panic(char const*)>
c00119b4:	83 c4 10             	add    esp,0x10
c00119b7:	eb 95                	jmp    c001194e <UnixFile::~UnixFile()+0x24>
c00119b9:	90                   	nop
c00119ba:	eb 01                	jmp    c00119bd <UnixFile::~UnixFile()+0x93>
c00119bc:	90                   	nop
c00119bd:	90                   	nop
c00119be:	83 c4 1c             	add    esp,0x1c
c00119c1:	c3                   	ret    

c00119c2 <UnixFile::~UnixFile()>:
c00119c2:	83 ec 0c             	sub    esp,0xc
c00119c5:	83 ec 0c             	sub    esp,0xc
c00119c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119cc:	e8 59 ff ff ff       	call   c001192a <UnixFile::~UnixFile()>
c00119d1:	83 c4 10             	add    esp,0x10
c00119d4:	83 ec 08             	sub    esp,0x8
c00119d7:	6a 0c                	push   0xc
c00119d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119dd:	e8 5a 14 00 00       	call   c0012e3c <operator delete(void*, unsigned long)>
c00119e2:	83 c4 10             	add    esp,0x10
c00119e5:	83 c4 0c             	add    esp,0xc
c00119e8:	c3                   	ret    
c00119e9:	90                   	nop

c00119ea <ReservedFilename::~ReservedFilename()>:
c00119ea:	83 ec 0c             	sub    esp,0xc
c00119ed:	ba 64 a5 02 c0       	mov    edx,0xc002a564
c00119f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119f6:	89 10                	mov    DWORD PTR [eax],edx
c00119f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119fc:	83 ec 0c             	sub    esp,0xc
c00119ff:	50                   	push   eax
c0011a00:	e8 25 ff ff ff       	call   c001192a <UnixFile::~UnixFile()>
c0011a05:	83 c4 10             	add    esp,0x10
c0011a08:	90                   	nop
c0011a09:	83 c4 0c             	add    esp,0xc
c0011a0c:	c3                   	ret    
c0011a0d:	90                   	nop

c0011a0e <ReservedFilename::~ReservedFilename()>:
c0011a0e:	83 ec 0c             	sub    esp,0xc
c0011a11:	83 ec 0c             	sub    esp,0xc
c0011a14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a18:	e8 cd ff ff ff       	call   c00119ea <ReservedFilename::~ReservedFilename()>
c0011a1d:	83 c4 10             	add    esp,0x10
c0011a20:	83 ec 08             	sub    esp,0x8
c0011a23:	6a 0c                	push   0xc
c0011a25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a29:	e8 0e 14 00 00       	call   c0012e3c <operator delete(void*, unsigned long)>
c0011a2e:	83 c4 10             	add    esp,0x10
c0011a31:	83 c4 0c             	add    esp,0xc
c0011a34:	c3                   	ret    

c0011a35 <getFromFileDescriptor(int)>:
c0011a35:	53                   	push   ebx
c0011a36:	83 ec 08             	sub    esp,0x8
c0011a39:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a3d:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011a43:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011a49:	7f 2c                	jg     c0011a77 <getFromFileDescriptor(int)+0x42>
c0011a4b:	83 ec 0c             	sub    esp,0xc
c0011a4e:	68 18 e7 02 c0       	push   0xc002e718
c0011a53:	e8 ac 6d 01 00       	call   c0028804 <LinkedList<UnixFile>::getFirstElement()>
c0011a58:	83 c4 10             	add    esp,0x10
c0011a5b:	85 c0                	test   eax,eax
c0011a5d:	75 04                	jne    c0011a63 <getFromFileDescriptor(int)+0x2e>
c0011a5f:	31 c0                	xor    eax,eax
c0011a61:	eb 6e                	jmp    c0011ad1 <getFromFileDescriptor(int)+0x9c>
c0011a63:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a66:	74 69                	je     c0011ad1 <getFromFileDescriptor(int)+0x9c>
c0011a68:	52                   	push   edx
c0011a69:	52                   	push   edx
c0011a6a:	50                   	push   eax
c0011a6b:	68 18 e7 02 c0       	push   0xc002e718
c0011a70:	e8 39 6e 01 00       	call   c00288ae <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a75:	eb e1                	jmp    c0011a58 <getFromFileDescriptor(int)+0x23>
c0011a77:	a1 0c e7 02 c0       	mov    eax,ds:0xc002e70c
c0011a7c:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a82:	74 4d                	je     c0011ad1 <getFromFileDescriptor(int)+0x9c>
c0011a84:	a1 10 e7 02 c0       	mov    eax,ds:0xc002e710
c0011a89:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011a8f:	74 40                	je     c0011ad1 <getFromFileDescriptor(int)+0x9c>
c0011a91:	a1 08 e7 02 c0       	mov    eax,ds:0xc002e708
c0011a96:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011a9c:	74 33                	je     c0011ad1 <getFromFileDescriptor(int)+0x9c>
c0011a9e:	a1 04 e7 02 c0       	mov    eax,ds:0xc002e704
c0011aa3:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011aa9:	74 26                	je     c0011ad1 <getFromFileDescriptor(int)+0x9c>
c0011aab:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011ab1:	83 f8 08             	cmp    eax,0x8
c0011ab4:	77 09                	ja     c0011abf <getFromFileDescriptor(int)+0x8a>
c0011ab6:	8b 04 85 e0 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1920]
c0011abd:	eb 12                	jmp    c0011ad1 <getFromFileDescriptor(int)+0x9c>
c0011abf:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011ac5:	83 fb 08             	cmp    ebx,0x8
c0011ac8:	77 95                	ja     c0011a5f <getFromFileDescriptor(int)+0x2a>
c0011aca:	8b 04 9d a0 e6 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1960]
c0011ad1:	83 c4 08             	add    esp,0x8
c0011ad4:	5b                   	pop    ebx
c0011ad5:	c3                   	ret    

c0011ad6 <__static_initialization_and_destruction_0(int, int)>:
c0011ad6:	83 ec 0c             	sub    esp,0xc
c0011ad9:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011ade:	75 34                	jne    c0011b14 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011ae0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011ae8:	75 2a                	jne    c0011b14 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011aea:	83 ec 0c             	sub    esp,0xc
c0011aed:	68 18 e7 02 c0       	push   0xc002e718
c0011af2:	e8 e1 6b 01 00       	call   c00286d8 <LinkedList<UnixFile>::LinkedList()>
c0011af7:	83 c4 10             	add    esp,0x10
c0011afa:	83 ec 04             	sub    esp,0x4
c0011afd:	68 bc d4 02 c0       	push   0xc002d4bc
c0011b02:	68 18 e7 02 c0       	push   0xc002e718
c0011b07:	68 d6 86 02 c0       	push   0xc00286d6
c0011b0c:	e8 a5 12 00 00       	call   c0012db6 <__cxa_atexit>
c0011b11:	83 c4 10             	add    esp,0x10
c0011b14:	90                   	nop
c0011b15:	83 c4 0c             	add    esp,0xc
c0011b18:	c3                   	ret    

c0011b19 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011b19:	83 ec 0c             	sub    esp,0xc
c0011b1c:	83 ec 08             	sub    esp,0x8
c0011b1f:	68 ff ff 00 00       	push   0xffff
c0011b24:	6a 01                	push   0x1
c0011b26:	e8 ab ff ff ff       	call   c0011ad6 <__static_initialization_and_destruction_0(int, int)>
c0011b2b:	83 c4 10             	add    esp,0x10
c0011b2e:	83 c4 0c             	add    esp,0xc
c0011b31:	c3                   	ret    

c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011b32:	53                   	push   ebx
c0011b33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b37:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b3b:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011b41:	89 c8                	mov    eax,ecx
c0011b43:	d1 e8                	shr    eax,1
c0011b45:	03 05 48 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d548
c0011b4b:	83 e1 01             	and    ecx,0x1
c0011b4e:	8a 10                	mov    dl,BYTE PTR [eax]
c0011b50:	75 09                	jne    c0011b5b <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011b52:	83 e2 f0             	and    edx,0xfffffff0
c0011b55:	09 da                	or     edx,ebx
c0011b57:	88 10                	mov    BYTE PTR [eax],dl
c0011b59:	5b                   	pop    ebx
c0011b5a:	c3                   	ret    
c0011b5b:	c1 e3 04             	shl    ebx,0x4
c0011b5e:	83 e2 0f             	and    edx,0xf
c0011b61:	09 da                	or     edx,ebx
c0011b63:	88 10                	mov    BYTE PTR [eax],dl
c0011b65:	5b                   	pop    ebx
c0011b66:	c3                   	ret    

c0011b67 <Virt::getPageState(unsigned long)>:
c0011b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b6b:	8b 0d 48 d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d548
c0011b71:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b77:	89 d0                	mov    eax,edx
c0011b79:	d1 e8                	shr    eax,1
c0011b7b:	83 e2 01             	and    edx,0x1
c0011b7e:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b81:	75 04                	jne    c0011b87 <Virt::getPageState(unsigned long)+0x20>
c0011b83:	83 e0 0f             	and    eax,0xf
c0011b86:	c3                   	ret    
c0011b87:	c0 e8 04             	shr    al,0x4
c0011b8a:	c3                   	ret    

c0011b8b <Virt::allocateKernelVirtualPages(int)>:
c0011b8b:	55                   	push   ebp
c0011b8c:	31 ed                	xor    ebp,ebp
c0011b8e:	57                   	push   edi
c0011b8f:	56                   	push   esi
c0011b90:	53                   	push   ebx
c0011b91:	31 db                	xor    ebx,ebx
c0011b93:	83 ec 1c             	sub    esp,0x1c
c0011b96:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011b9a:	8b 3d 44 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d544
c0011ba0:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011ba5:	57                   	push   edi
c0011ba6:	e8 bc ff ff ff       	call   c0011b67 <Virt::getPageState(unsigned long)>
c0011bab:	5a                   	pop    edx
c0011bac:	84 c0                	test   al,al
c0011bae:	75 3a                	jne    c0011bea <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011bb0:	85 db                	test   ebx,ebx
c0011bb2:	75 02                	jne    c0011bb6 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011bb4:	89 fd                	mov    ebp,edi
c0011bb6:	43                   	inc    ebx
c0011bb7:	39 f3                	cmp    ebx,esi
c0011bb9:	74 5a                	je     c0011c15 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011bbb:	47                   	inc    edi
c0011bbc:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bc2:	76 31                	jbe    c0011bf5 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011bc4:	c7 05 44 d5 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d544,0xc8000
c0011bce:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011bd3:	75 28                	jne    c0011bfd <Virt::allocateKernelVirtualPages(int)+0x72>
c0011bd5:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011bda:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011bdf:	57                   	push   edi
c0011be0:	e8 82 ff ff ff       	call   c0011b67 <Virt::getPageState(unsigned long)>
c0011be5:	5a                   	pop    edx
c0011be6:	84 c0                	test   al,al
c0011be8:	74 c6                	je     c0011bb0 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011bea:	31 db                	xor    ebx,ebx
c0011bec:	47                   	inc    edi
c0011bed:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bf3:	77 cf                	ja     c0011bc4 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011bf5:	89 3d 44 d5 02 c0    	mov    DWORD PTR ds:0xc002d544,edi
c0011bfb:	eb a8                	jmp    c0011ba5 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011bfd:	83 ec 0c             	sub    esp,0xc
c0011c00:	68 78 a5 02 c0       	push   0xc002a578
c0011c05:	e8 b3 89 00 00       	call   c001a5bd <Krnl::panic(char const*)>
c0011c0a:	8b 3d 44 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d544
c0011c10:	83 c4 10             	add    esp,0x10
c0011c13:	eb 90                	jmp    c0011ba5 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c15:	89 2d 44 d5 02 c0    	mov    DWORD PTR ds:0xc002d544,ebp
c0011c1b:	4b                   	dec    ebx
c0011c1c:	74 5f                	je     c0011c7d <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011c1e:	85 f6                	test   esi,esi
c0011c20:	74 3d                	je     c0011c5f <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c22:	89 e8                	mov    eax,ebp
c0011c24:	31 db                	xor    ebx,ebx
c0011c26:	8d 7e ff             	lea    edi,[esi-0x1]
c0011c29:	eb 14                	jmp    c0011c3f <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011c2b:	6a 01                	push   0x1
c0011c2d:	43                   	inc    ebx
c0011c2e:	50                   	push   eax
c0011c2f:	e8 fe fe ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c34:	58                   	pop    eax
c0011c35:	39 f3                	cmp    ebx,esi
c0011c37:	5a                   	pop    edx
c0011c38:	74 25                	je     c0011c5f <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c3a:	a1 44 d5 02 c0       	mov    eax,ds:0xc002d544
c0011c3f:	8d 50 01             	lea    edx,[eax+0x1]
c0011c42:	85 db                	test   ebx,ebx
c0011c44:	89 15 44 d5 02 c0    	mov    DWORD PTR ds:0xc002d544,edx
c0011c4a:	74 20                	je     c0011c6c <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011c4c:	39 df                	cmp    edi,ebx
c0011c4e:	75 db                	jne    c0011c2b <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011c50:	6a 03                	push   0x3
c0011c52:	43                   	inc    ebx
c0011c53:	50                   	push   eax
c0011c54:	e8 d9 fe ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c59:	59                   	pop    ecx
c0011c5a:	39 f3                	cmp    ebx,esi
c0011c5c:	58                   	pop    eax
c0011c5d:	75 db                	jne    c0011c3a <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c5f:	83 c4 1c             	add    esp,0x1c
c0011c62:	89 e8                	mov    eax,ebp
c0011c64:	5b                   	pop    ebx
c0011c65:	c1 e0 0c             	shl    eax,0xc
c0011c68:	5e                   	pop    esi
c0011c69:	5f                   	pop    edi
c0011c6a:	5d                   	pop    ebp
c0011c6b:	c3                   	ret    
c0011c6c:	6a 02                	push   0x2
c0011c6e:	bb 01 00 00 00       	mov    ebx,0x1
c0011c73:	50                   	push   eax
c0011c74:	e8 b9 fe ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c79:	58                   	pop    eax
c0011c7a:	5a                   	pop    edx
c0011c7b:	eb bd                	jmp    c0011c3a <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c7d:	6a 04                	push   0x4
c0011c7f:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c82:	55                   	push   ebp
c0011c83:	a3 44 d5 02 c0       	mov    ds:0xc002d544,eax
c0011c88:	e8 a5 fe ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c8d:	59                   	pop    ecx
c0011c8e:	89 e8                	mov    eax,ebp
c0011c90:	5b                   	pop    ebx
c0011c91:	c1 e0 0c             	shl    eax,0xc
c0011c94:	83 c4 1c             	add    esp,0x1c
c0011c97:	5b                   	pop    ebx
c0011c98:	5e                   	pop    esi
c0011c99:	5f                   	pop    edi
c0011c9a:	5d                   	pop    ebp
c0011c9b:	c3                   	ret    

c0011c9c <Virt::freeSwapfilePage(unsigned long)>:
c0011c9c:	53                   	push   ebx
c0011c9d:	8b 15 24 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e724
c0011ca3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011ca7:	b8 01 00 00 00       	mov    eax,0x1
c0011cac:	89 cb                	mov    ebx,ecx
c0011cae:	d3 e0                	shl    eax,cl
c0011cb0:	c1 eb 05             	shr    ebx,0x5
c0011cb3:	f7 d0                	not    eax
c0011cb5:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011cb8:	5b                   	pop    ebx
c0011cb9:	c3                   	ret    

c0011cba <Virt::swapIDToSector(unsigned long)>:
c0011cba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cbe:	0f af 05 4c d5 02 c0 	imul   eax,DWORD PTR ds:0xc002d54c
c0011cc5:	03 05 54 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d554
c0011ccb:	c3                   	ret    

c0011ccc <Virt::allocateSwapfilePage()>:
c0011ccc:	55                   	push   ebp
c0011ccd:	31 d2                	xor    edx,edx
c0011ccf:	57                   	push   edi
c0011cd0:	56                   	push   esi
c0011cd1:	53                   	push   ebx
c0011cd2:	83 ec 0c             	sub    esp,0xc
c0011cd5:	8b 0d 4c d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d54c
c0011cdb:	a1 50 d5 02 c0       	mov    eax,ds:0xc002d550
c0011ce0:	f7 f1                	div    ecx
c0011ce2:	39 0d 50 d5 02 c0    	cmp    DWORD PTR ds:0xc002d550,ecx
c0011ce8:	72 2d                	jb     c0011d17 <Virt::allocateSwapfilePage()+0x4b>
c0011cea:	8b 35 24 e7 02 c0    	mov    esi,DWORD PTR ds:0xc002e724
c0011cf0:	8b 16                	mov    edx,DWORD PTR [esi]
c0011cf2:	f6 c2 01             	test   dl,0x1
c0011cf5:	74 3c                	je     c0011d33 <Virt::allocateSwapfilePage()+0x67>
c0011cf7:	31 c9                	xor    ecx,ecx
c0011cf9:	bf 01 00 00 00       	mov    edi,0x1
c0011cfe:	eb 12                	jmp    c0011d12 <Virt::allocateSwapfilePage()+0x46>
c0011d00:	89 fd                	mov    ebp,edi
c0011d02:	89 ca                	mov    edx,ecx
c0011d04:	d3 e5                	shl    ebp,cl
c0011d06:	c1 ea 05             	shr    edx,0x5
c0011d09:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011d0c:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011d0e:	85 ea                	test   edx,ebp
c0011d10:	74 2a                	je     c0011d3c <Virt::allocateSwapfilePage()+0x70>
c0011d12:	41                   	inc    ecx
c0011d13:	39 c8                	cmp    eax,ecx
c0011d15:	77 e9                	ja     c0011d00 <Virt::allocateSwapfilePage()+0x34>
c0011d17:	83 ec 0c             	sub    esp,0xc
c0011d1a:	68 ea a7 02 c0       	push   0xc002a7ea
c0011d1f:	e8 99 88 00 00       	call   c001a5bd <Krnl::panic(char const*)>
c0011d24:	83 c4 10             	add    esp,0x10
c0011d27:	31 c9                	xor    ecx,ecx
c0011d29:	83 c4 0c             	add    esp,0xc
c0011d2c:	89 c8                	mov    eax,ecx
c0011d2e:	5b                   	pop    ebx
c0011d2f:	5e                   	pop    esi
c0011d30:	5f                   	pop    edi
c0011d31:	5d                   	pop    ebp
c0011d32:	c3                   	ret    
c0011d33:	89 f3                	mov    ebx,esi
c0011d35:	bd 01 00 00 00       	mov    ebp,0x1
c0011d3a:	31 c9                	xor    ecx,ecx
c0011d3c:	09 ea                	or     edx,ebp
c0011d3e:	89 c8                	mov    eax,ecx
c0011d40:	89 13                	mov    DWORD PTR [ebx],edx
c0011d42:	83 c4 0c             	add    esp,0xc
c0011d45:	5b                   	pop    ebx
c0011d46:	5e                   	pop    esi
c0011d47:	5f                   	pop    edi
c0011d48:	5d                   	pop    ebp
c0011d49:	c3                   	ret    

c0011d4a <Virt::virtualMemorySetup()>:
c0011d4a:	53                   	push   ebx
c0011d4b:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d50:	83 ec 08             	sub    esp,0x8
c0011d53:	6a 0f                	push   0xf
c0011d55:	53                   	push   ebx
c0011d56:	43                   	inc    ebx
c0011d57:	e8 d6 fd ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d5c:	59                   	pop    ecx
c0011d5d:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d63:	58                   	pop    eax
c0011d64:	75 ed                	jne    c0011d53 <Virt::virtualMemorySetup()+0x9>
c0011d66:	83 ec 08             	sub    esp,0x8
c0011d69:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d6e:	68 00 00 00 c8       	push   0xc8000000
c0011d73:	68 01 a8 02 c0       	push   0xc002a801
c0011d78:	e8 9f 11 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0011d7d:	58                   	pop    eax
c0011d7e:	5a                   	pop    edx
c0011d7f:	68 00 f0 ff ef       	push   0xeffff000
c0011d84:	68 15 a8 02 c0       	push   0xc002a815
c0011d89:	e8 8e 11 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0011d8e:	83 c4 10             	add    esp,0x10
c0011d91:	83 ec 08             	sub    esp,0x8
c0011d94:	6a 00                	push   0x0
c0011d96:	53                   	push   ebx
c0011d97:	43                   	inc    ebx
c0011d98:	e8 95 fd ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d9d:	83 c4 10             	add    esp,0x10
c0011da0:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011da6:	75 e9                	jne    c0011d91 <Virt::virtualMemorySetup()+0x47>
c0011da8:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011dad:	83 ec 08             	sub    esp,0x8
c0011db0:	6a 0f                	push   0xf
c0011db2:	53                   	push   ebx
c0011db3:	43                   	inc    ebx
c0011db4:	e8 79 fd ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011db9:	83 c4 10             	add    esp,0x10
c0011dbc:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011dc2:	75 e9                	jne    c0011dad <Virt::virtualMemorySetup()+0x63>
c0011dc4:	83 c4 08             	add    esp,0x8
c0011dc7:	5b                   	pop    ebx
c0011dc8:	c3                   	ret    

c0011dc9 <Virt::swappingSetup()>:
c0011dc9:	83 ec 14             	sub    esp,0x14
c0011dcc:	31 d2                	xor    edx,edx
c0011dce:	a1 50 d5 02 c0       	mov    eax,ds:0xc002d550
c0011dd3:	f7 35 4c d5 02 c0    	div    DWORD PTR ds:0xc002d54c
c0011dd9:	c1 e8 05             	shr    eax,0x5
c0011ddc:	50                   	push   eax
c0011ddd:	68 29 a8 02 c0       	push   0xc002a829
c0011de2:	e8 35 11 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0011de7:	a1 50 d5 02 c0       	mov    eax,ds:0xc002d550
c0011dec:	31 d2                	xor    edx,edx
c0011dee:	f7 35 4c d5 02 c0    	div    DWORD PTR ds:0xc002d54c
c0011df4:	c1 e8 05             	shr    eax,0x5
c0011df7:	89 04 24             	mov    DWORD PTR [esp],eax
c0011dfa:	e8 41 da ff ff       	call   c000f840 <malloc>
c0011dff:	83 c4 0c             	add    esp,0xc
c0011e02:	89 c1                	mov    ecx,eax
c0011e04:	a3 24 e7 02 c0       	mov    ds:0xc002e724,eax
c0011e09:	31 d2                	xor    edx,edx
c0011e0b:	a1 50 d5 02 c0       	mov    eax,ds:0xc002d550
c0011e10:	f7 35 4c d5 02 c0    	div    DWORD PTR ds:0xc002d54c
c0011e16:	c1 e8 05             	shr    eax,0x5
c0011e19:	50                   	push   eax
c0011e1a:	6a 00                	push   0x0
c0011e1c:	51                   	push   ecx
c0011e1d:	e8 56 e9 fe ff       	call   c0000778 <memset>
c0011e22:	83 c4 1c             	add    esp,0x1c
c0011e25:	c3                   	ret    

c0011e26 <Virt::getAKernelVAS()>:
c0011e26:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c0011e2b:	c3                   	ret    

c0011e2c <Virt::setupPageSwapping(int)>:
c0011e2c:	57                   	push   edi
c0011e2d:	56                   	push   esi
c0011e2e:	53                   	push   ebx
c0011e2f:	83 ec 1c             	sub    esp,0x1c
c0011e32:	68 14 01 00 00       	push   0x114
c0011e37:	e8 04 da ff ff       	call   c000f840 <malloc>
c0011e3c:	83 c4 0c             	add    esp,0xc
c0011e3f:	89 c6                	mov    esi,eax
c0011e41:	ff 35 14 1b 03 c0    	push   DWORD PTR ds:0xc0031b14
c0011e47:	68 44 a8 02 c0       	push   0xc002a844
c0011e4c:	50                   	push   eax
c0011e4d:	e8 22 16 00 00       	call   c0013474 <File::File(char const*, Process*)>
c0011e52:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e55:	e8 f6 17 00 00       	call   c0013650 <File::unlink()>
c0011e5a:	58                   	pop    eax
c0011e5b:	5a                   	pop    edx
c0011e5c:	6a 12                	push   0x12
c0011e5e:	56                   	push   esi
c0011e5f:	e8 74 16 00 00       	call   c00134d8 <File::open(FileOpenMode)>
c0011e64:	83 c4 10             	add    esp,0x10
c0011e67:	85 c0                	test   eax,eax
c0011e69:	0f 85 ca 00 00 00    	jne    c0011f39 <Virt::setupPageSwapping(int)+0x10d>
c0011e6f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e73:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e7b:	c1 e3 08             	shl    ebx,0x8
c0011e7e:	83 ec 0c             	sub    esp,0xc
c0011e81:	68 00 00 01 00       	push   0x10000
c0011e86:	e8 b5 d9 ff ff       	call   c000f840 <malloc>
c0011e8b:	83 c4 0c             	add    esp,0xc
c0011e8e:	89 c7                	mov    edi,eax
c0011e90:	68 00 00 01 00       	push   0x10000
c0011e95:	6a 00                	push   0x0
c0011e97:	50                   	push   eax
c0011e98:	e8 db e8 fe ff       	call   c0000778 <memset>
c0011e9d:	83 c4 10             	add    esp,0x10
c0011ea0:	85 db                	test   ebx,ebx
c0011ea2:	79 03                	jns    c0011ea7 <Virt::setupPageSwapping(int)+0x7b>
c0011ea4:	83 c3 0f             	add    ebx,0xf
c0011ea7:	c1 fb 04             	sar    ebx,0x4
c0011eaa:	4b                   	dec    ebx
c0011eab:	83 fb ff             	cmp    ebx,0xffffffff
c0011eae:	74 4b                	je     c0011efb <Virt::setupPageSwapping(int)+0xcf>
c0011eb0:	83 ec 0c             	sub    esp,0xc
c0011eb3:	8b 06                	mov    eax,DWORD PTR [esi]
c0011eb5:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011eb9:	52                   	push   edx
c0011eba:	57                   	push   edi
c0011ebb:	6a 00                	push   0x0
c0011ebd:	68 00 00 01 00       	push   0x10000
c0011ec2:	56                   	push   esi
c0011ec3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011ec6:	83 c4 20             	add    esp,0x20
c0011ec9:	85 c0                	test   eax,eax
c0011ecb:	75 59                	jne    c0011f26 <Virt::setupPageSwapping(int)+0xfa>
c0011ecd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ed1:	3d 00 00 01 00       	cmp    eax,0x10000
c0011ed6:	74 d2                	je     c0011eaa <Virt::setupPageSwapping(int)+0x7e>
c0011ed8:	83 ec 08             	sub    esp,0x8
c0011edb:	4b                   	dec    ebx
c0011edc:	50                   	push   eax
c0011edd:	68 97 a8 02 c0       	push   0xc002a897
c0011ee2:	e8 35 10 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0011ee7:	c7 04 24 a0 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8a0
c0011eee:	e8 ca 86 00 00       	call   c001a5bd <Krnl::panic(char const*)>
c0011ef3:	83 c4 10             	add    esp,0x10
c0011ef6:	83 fb ff             	cmp    ebx,0xffffffff
c0011ef9:	75 b5                	jne    c0011eb0 <Virt::setupPageSwapping(int)+0x84>
c0011efb:	83 ec 0c             	sub    esp,0xc
c0011efe:	56                   	push   esi
c0011eff:	e8 32 16 00 00       	call   c0013536 <File::close()>
c0011f04:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011f07:	e8 54 d9 ff ff       	call   c000f860 <rfree>
c0011f0c:	83 c4 10             	add    esp,0x10
c0011f0f:	85 f6                	test   esi,esi
c0011f11:	74 0c                	je     c0011f1f <Virt::setupPageSwapping(int)+0xf3>
c0011f13:	83 ec 0c             	sub    esp,0xc
c0011f16:	8b 06                	mov    eax,DWORD PTR [esi]
c0011f18:	56                   	push   esi
c0011f19:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f1c:	83 c4 10             	add    esp,0x10
c0011f1f:	83 c4 10             	add    esp,0x10
c0011f22:	5b                   	pop    ebx
c0011f23:	5e                   	pop    esi
c0011f24:	5f                   	pop    edi
c0011f25:	c3                   	ret    
c0011f26:	83 ec 08             	sub    esp,0x8
c0011f29:	50                   	push   eax
c0011f2a:	68 7f a8 02 c0       	push   0xc002a87f
c0011f2f:	e8 e8 0f 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0011f34:	83 c4 10             	add    esp,0x10
c0011f37:	eb 94                	jmp    c0011ecd <Virt::setupPageSwapping(int)+0xa1>
c0011f39:	83 ec 08             	sub    esp,0x8
c0011f3c:	50                   	push   eax
c0011f3d:	68 5b a8 02 c0       	push   0xc002a85b
c0011f42:	e8 d5 0f 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0011f47:	c7 04 24 64 a8 02 c0 	mov    DWORD PTR [esp],0xc002a864
c0011f4e:	e8 6a 86 00 00       	call   c001a5bd <Krnl::panic(char const*)>
c0011f53:	83 c4 10             	add    esp,0x10
c0011f56:	e9 14 ff ff ff       	jmp    c0011e6f <Virt::setupPageSwapping(int)+0x43>
c0011f5b:	90                   	nop

c0011f5c <VAS::VAS()>:
c0011f5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f60:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f6b:	a3 28 e7 02 c0       	mov    ds:0xc002e728,eax
c0011f70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f74:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011f78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f7c:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011f7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f83:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011f8a:	90                   	nop
c0011f8b:	c3                   	ret    

c0011f8c <VAS::VAS(VAS*)>:
c0011f8c:	83 ec 0c             	sub    esp,0xc
c0011f8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f93:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f9a:	83 ec 0c             	sub    esp,0xc
c0011f9d:	68 98 a5 02 c0       	push   0xc002a598
c0011fa2:	e8 16 86 00 00       	call   c001a5bd <Krnl::panic(char const*)>
c0011fa7:	83 c4 10             	add    esp,0x10
c0011faa:	90                   	nop
c0011fab:	83 c4 0c             	add    esp,0xc
c0011fae:	c3                   	ret    
c0011faf:	90                   	nop

c0011fb0 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011fb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fb4:	89 c2                	mov    edx,eax
c0011fb6:	c1 e8 0a             	shr    eax,0xa
c0011fb9:	c1 ea 16             	shr    edx,0x16
c0011fbc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011fc1:	19 c9                	sbb    ecx,ecx
c0011fc3:	c1 e2 0c             	shl    edx,0xc
c0011fc6:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011fcc:	25 fc 0f 00 00       	and    eax,0xffc
c0011fd1:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011fd8:	01 d0                	add    eax,edx
c0011fda:	c3                   	ret    
c0011fdb:	90                   	nop

c0011fdc <VAS::getPageTableEntry(unsigned long)>:
c0011fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011fe0:	89 ca                	mov    edx,ecx
c0011fe2:	c1 e9 0a             	shr    ecx,0xa
c0011fe5:	c1 ea 16             	shr    edx,0x16
c0011fe8:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011fee:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011ff4:	c1 e0 0c             	shl    eax,0xc
c0011ff7:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011ffa:	c3                   	ret    

c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>:
c0011ffb:	57                   	push   edi
c0011ffc:	56                   	push   esi
c0011ffd:	be 01 00 00 00       	mov    esi,0x1
c0012002:	53                   	push   ebx
c0012003:	83 ec 10             	sub    esp,0x10
c0012006:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001200a:	c1 eb 0c             	shr    ebx,0xc
c001200d:	eb 3f                	jmp    c001204e <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c001200f:	e8 12 fe ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0012014:	83 ec 08             	sub    esp,0x8
c0012017:	57                   	push   edi
c0012018:	50                   	push   eax
c0012019:	e8 be ff ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c001201e:	83 c4 10             	add    esp,0x10
c0012021:	8b 00                	mov    eax,DWORD PTR [eax]
c0012023:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012027:	f6 c4 04             	test   ah,0x4
c001202a:	75 5f                	jne    c001208b <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c001202c:	80 fa 04             	cmp    dl,0x4
c001202f:	74 78                	je     c00120a9 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0012031:	80 fa 02             	cmp    dl,0x2
c0012034:	0f 84 88 00 00 00    	je     c00120c2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001203a:	80 fa 03             	cmp    dl,0x3
c001203d:	0f 84 ad 00 00 00    	je     c00120f0 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0012043:	fe ca                	dec    dl
c0012045:	0f 84 92 00 00 00    	je     c00120dd <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001204b:	43                   	inc    ebx
c001204c:	31 f6                	xor    esi,esi
c001204e:	53                   	push   ebx
c001204f:	e8 13 fb ff ff       	call   c0011b67 <Virt::getPageState(unsigned long)>
c0012054:	5f                   	pop    edi
c0012055:	89 df                	mov    edi,ebx
c0012057:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001205b:	c1 e7 0c             	shl    edi,0xc
c001205e:	84 c0                	test   al,al
c0012060:	75 ad                	jne    c001200f <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0012062:	83 ec 0c             	sub    esp,0xc
c0012065:	68 a6 a8 02 c0       	push   0xc002a8a6
c001206a:	e8 4e 85 00 00       	call   c001a5bd <Krnl::panic(char const*)>
c001206f:	e8 b2 fd ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0012074:	5a                   	pop    edx
c0012075:	59                   	pop    ecx
c0012076:	57                   	push   edi
c0012077:	50                   	push   eax
c0012078:	e8 5f ff ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c001207d:	83 c4 10             	add    esp,0x10
c0012080:	8b 00                	mov    eax,DWORD PTR [eax]
c0012082:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012086:	f6 c4 04             	test   ah,0x4
c0012089:	74 c0                	je     c001204b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001208b:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001208f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012094:	83 ec 0c             	sub    esp,0xc
c0012097:	50                   	push   eax
c0012098:	e8 bb dd ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c001209d:	83 c4 10             	add    esp,0x10
c00120a0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00120a4:	80 fa 04             	cmp    dl,0x4
c00120a7:	75 88                	jne    c0012031 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00120a9:	89 f0                	mov    eax,esi
c00120ab:	84 c0                	test   al,al
c00120ad:	75 47                	jne    c00120f6 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00120af:	c7 44 24 20 bc a5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a5bc
c00120b7:	83 c4 10             	add    esp,0x10
c00120ba:	5b                   	pop    ebx
c00120bb:	5e                   	pop    esi
c00120bc:	5f                   	pop    edi
c00120bd:	e9 fb 84 00 00       	jmp    c001a5bd <Krnl::panic(char const*)>
c00120c2:	89 f0                	mov    eax,esi
c00120c4:	84 c0                	test   al,al
c00120c6:	75 15                	jne    c00120dd <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00120c8:	83 ec 0c             	sub    esp,0xc
c00120cb:	68 c2 a8 02 c0       	push   0xc002a8c2
c00120d0:	e8 e8 84 00 00       	call   c001a5bd <Krnl::panic(char const*)>
c00120d5:	83 c4 10             	add    esp,0x10
c00120d8:	e9 6e ff ff ff       	jmp    c001204b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120dd:	83 ec 08             	sub    esp,0x8
c00120e0:	6a 00                	push   0x0
c00120e2:	53                   	push   ebx
c00120e3:	e8 4a fa ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120e8:	83 c4 10             	add    esp,0x10
c00120eb:	e9 5b ff ff ff       	jmp    c001204b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120f0:	89 f0                	mov    eax,esi
c00120f2:	84 c0                	test   al,al
c00120f4:	75 15                	jne    c001210b <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00120f6:	83 ec 08             	sub    esp,0x8
c00120f9:	6a 00                	push   0x0
c00120fb:	53                   	push   ebx
c00120fc:	e8 31 fa ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012101:	83 c4 10             	add    esp,0x10
c0012104:	83 c4 10             	add    esp,0x10
c0012107:	5b                   	pop    ebx
c0012108:	5e                   	pop    esi
c0012109:	5f                   	pop    edi
c001210a:	c3                   	ret    
c001210b:	c7 44 24 20 de a8 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a8de
c0012113:	83 c4 10             	add    esp,0x10
c0012116:	5b                   	pop    ebx
c0012117:	5e                   	pop    esi
c0012118:	5f                   	pop    edi
c0012119:	e9 9f 84 00 00       	jmp    c001a5bd <Krnl::panic(char const*)>

c001211e <VAS::freeAllocatedPages(unsigned long)>:
c001211e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012122:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012126:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001212a:	74 09                	je     c0012135 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001212c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012130:	e9 c6 fe ff ff       	jmp    c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c0012135:	c7 44 24 04 e0 a5 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a5e0
c001213d:	e9 da 0d 00 00       	jmp    c0012f1c <Dbg::kprintf(char const*, ...)>

c0012142 <VAS::virtualToPhysical(unsigned long)>:
c0012142:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012146:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001214a:	e8 8d fe ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c001214f:	5a                   	pop    edx
c0012150:	8b 00                	mov    eax,DWORD PTR [eax]
c0012152:	59                   	pop    ecx
c0012153:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012158:	c3                   	ret    
c0012159:	90                   	nop

c001215a <VAS::reflagRange(unsigned long, int, int, int)>:
c001215a:	55                   	push   ebp
c001215b:	57                   	push   edi
c001215c:	56                   	push   esi
c001215d:	53                   	push   ebx
c001215e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012162:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012166:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001216a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001216e:	85 db                	test   ebx,ebx
c0012170:	7e 22                	jle    c0012194 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012172:	c1 e3 0c             	shl    ebx,0xc
c0012175:	01 f3                	add    ebx,esi
c0012177:	56                   	push   esi
c0012178:	81 c6 00 10 00 00    	add    esi,0x1000
c001217e:	55                   	push   ebp
c001217f:	e8 58 fe ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c0012184:	5a                   	pop    edx
c0012185:	59                   	pop    ecx
c0012186:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012188:	21 f9                	and    ecx,edi
c001218a:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001218e:	39 f3                	cmp    ebx,esi
c0012190:	89 08                	mov    DWORD PTR [eax],ecx
c0012192:	75 e3                	jne    c0012177 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0012194:	5b                   	pop    ebx
c0012195:	5e                   	pop    esi
c0012196:	5f                   	pop    edi
c0012197:	5d                   	pop    ebp
c0012198:	c3                   	ret    
c0012199:	90                   	nop

c001219a <VAS::setToWriteCombining(unsigned long, int)>:
c001219a:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c001219f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121a5:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00121ac:	75 01                	jne    c00121af <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00121ae:	c3                   	ret    
c00121af:	68 80 00 00 00       	push   0x80
c00121b4:	6a ff                	push   0xffffffff
c00121b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121c2:	e8 93 ff ff ff       	call   c001215a <VAS::reflagRange(unsigned long, int, int, int)>
c00121c7:	83 c4 14             	add    esp,0x14
c00121ca:	c3                   	ret    
c00121cb:	90                   	nop

c00121cc <VAS::mapOtherVASIn(bool, VAS*)>:
c00121cc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00121d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121d5:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00121d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121dc:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00121df:	19 c0                	sbb    eax,eax
c00121e1:	83 ca 03             	or     edx,0x3
c00121e4:	83 e0 fc             	and    eax,0xfffffffc
c00121e7:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00121ee:	0f 20 d8             	mov    eax,cr3
c00121f1:	0f 22 d8             	mov    cr3,eax
c00121f4:	c3                   	ret    
c00121f5:	90                   	nop

c00121f6 <VAS::~VAS()>:
c00121f6:	83 ec 2c             	sub    esp,0x2c
c00121f9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012201:	e8 dc bb 00 00       	call   c001dde2 <lockScheduler()>
c0012206:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001220b:	8b 00                	mov    eax,DWORD PTR [eax]
c001220d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012210:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012216:	83 ec 04             	sub    esp,0x4
c0012219:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001221d:	6a 01                	push   0x1
c001221f:	50                   	push   eax
c0012220:	e8 a7 ff ff ff       	call   c00121cc <VAS::mapOtherVASIn(bool, VAS*)>
c0012225:	83 c4 10             	add    esp,0x10
c0012228:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012230:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012238:	0f 8f d7 00 00 00    	jg     c0012315 <VAS::~VAS()+0x11f>
c001223e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012242:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012245:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012249:	c1 e2 02             	shl    edx,0x2
c001224c:	01 d0                	add    eax,edx
c001224e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012250:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012258:	83 e0 01             	and    eax,0x1
c001225b:	0f 84 ab 00 00 00    	je     c001230c <VAS::~VAS()+0x116>
c0012261:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012269:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012271:	7f 75                	jg     c00122e8 <VAS::~VAS()+0xf2>
c0012273:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012277:	c1 e0 0a             	shl    eax,0xa
c001227a:	89 c2                	mov    edx,eax
c001227c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012280:	01 d0                	add    eax,edx
c0012282:	c1 e0 0c             	shl    eax,0xc
c0012285:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012289:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001228e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012290:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012293:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012299:	83 ec 04             	sub    esp,0x4
c001229c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00122a0:	6a 01                	push   0x1
c00122a2:	50                   	push   eax
c00122a3:	e8 08 fd ff ff       	call   c0011fb0 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00122a8:	83 c4 10             	add    esp,0x10
c00122ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00122af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00122b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00122b5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00122b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122bd:	25 01 04 00 00       	and    eax,0x401
c00122c2:	3d 01 04 00 00       	cmp    eax,0x401
c00122c7:	75 19                	jne    c00122e2 <VAS::~VAS()+0xec>
c00122c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122cd:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122d2:	83 ec 0c             	sub    esp,0xc
c00122d5:	50                   	push   eax
c00122d6:	e8 7d db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c00122db:	83 c4 10             	add    esp,0x10
c00122de:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122e2:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00122e6:	eb 81                	jmp    c0012269 <VAS::~VAS()+0x73>
c00122e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122ec:	25 00 04 00 00       	and    eax,0x400
c00122f1:	74 19                	je     c001230c <VAS::~VAS()+0x116>
c00122f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122f7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122fc:	83 ec 0c             	sub    esp,0xc
c00122ff:	50                   	push   eax
c0012300:	e8 53 db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012305:	83 c4 10             	add    esp,0x10
c0012308:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001230c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012310:	e9 1b ff ff ff       	jmp    c0012230 <VAS::~VAS()+0x3a>
c0012315:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012319:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001231c:	83 ec 0c             	sub    esp,0xc
c001231f:	50                   	push   eax
c0012320:	e8 d6 fc ff ff       	call   c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c0012325:	83 c4 10             	add    esp,0x10
c0012328:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001232c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001232f:	83 ec 0c             	sub    esp,0xc
c0012332:	50                   	push   eax
c0012333:	e8 20 db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012338:	83 c4 10             	add    esp,0x10
c001233b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001233f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012343:	c1 e0 02             	shl    eax,0x2
c0012346:	83 ec 08             	sub    esp,0x8
c0012349:	50                   	push   eax
c001234a:	68 04 a6 02 c0       	push   0xc002a604
c001234f:	e8 c8 0b 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0012354:	83 c4 10             	add    esp,0x10
c0012357:	e8 88 ba 00 00       	call   c001dde4 <unlockScheduler()>
c001235c:	90                   	nop
c001235d:	83 c4 2c             	add    esp,0x2c
c0012360:	c3                   	ret    
c0012361:	90                   	nop

c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012362:	55                   	push   ebp
c0012363:	57                   	push   edi
c0012364:	56                   	push   esi
c0012365:	53                   	push   ebx
c0012366:	83 ec 1c             	sub    esp,0x1c
c0012369:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001236d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012371:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012377:	77 08                	ja     c0012381 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012379:	0f 20 d8             	mov    eax,cr3
c001237c:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c001237f:	75 47                	jne    c00123c8 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012381:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012385:	09 d8                	or     eax,ebx
c0012387:	a9 ff 0f 00 00       	test   eax,0xfff
c001238c:	75 57                	jne    c00123e5 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c001238e:	89 de                	mov    esi,ebx
c0012390:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012393:	c1 ee 16             	shr    esi,0x16
c0012396:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001239d:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00123a1:	74 54                	je     c00123f7 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00123a3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00123a7:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00123ad:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00123b1:	c1 e6 0c             	shl    esi,0xc
c00123b4:	c1 eb 0a             	shr    ebx,0xa
c00123b7:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00123bd:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00123c0:	83 c4 1c             	add    esp,0x1c
c00123c3:	5b                   	pop    ebx
c00123c4:	5e                   	pop    esi
c00123c5:	5f                   	pop    edi
c00123c6:	5d                   	pop    ebp
c00123c7:	c3                   	ret    
c00123c8:	83 ec 0c             	sub    esp,0xc
c00123cb:	68 24 a6 02 c0       	push   0xc002a624
c00123d0:	e8 47 0b 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c00123d5:	83 c4 10             	add    esp,0x10
c00123d8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123dc:	09 d8                	or     eax,ebx
c00123de:	a9 ff 0f 00 00       	test   eax,0xfff
c00123e3:	74 a9                	je     c001238e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123e5:	83 ec 0c             	sub    esp,0xc
c00123e8:	68 8c a6 02 c0       	push   0xc002a68c
c00123ed:	e8 cb 81 00 00       	call   c001a5bd <Krnl::panic(char const*)>
c00123f2:	83 c4 10             	add    esp,0x10
c00123f5:	eb 97                	jmp    c001238e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123fb:	e8 e2 da ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012400:	89 c5                	mov    ebp,eax
c0012402:	e8 1f fa ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0012407:	83 ec 0c             	sub    esp,0xc
c001240a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001240e:	6a 01                	push   0x1
c0012410:	e8 76 f7 ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0012415:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001241c:	6a 01                	push   0x1
c001241e:	50                   	push   eax
c001241f:	55                   	push   ebp
c0012420:	81 cd 07 04 00 00    	or     ebp,0x407
c0012426:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001242a:	51                   	push   ecx
c001242b:	e8 26 02 00 00       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012430:	83 c4 1c             	add    esp,0x1c
c0012433:	68 00 10 00 00       	push   0x1000
c0012438:	6a 00                	push   0x0
c001243a:	50                   	push   eax
c001243b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001243f:	e8 34 e3 fe ff       	call   c0000778 <memset>
c0012444:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012448:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001244b:	e8 ab fb ff ff       	call   c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c0012450:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012454:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012457:	83 c4 10             	add    esp,0x10
c001245a:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c001245d:	e9 41 ff ff ff       	jmp    c00123a3 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0012462 <VAS::allocatePages(int, int)>:
c0012462:	55                   	push   ebp
c0012463:	57                   	push   edi
c0012464:	56                   	push   esi
c0012465:	53                   	push   ebx
c0012466:	83 ec 1c             	sub    esp,0x1c
c0012469:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001246d:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c0012472:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012478:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001247e:	83 e0 01             	and    eax,0x1
c0012481:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0012485:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012489:	0f 85 cc 00 00 00    	jne    c001255b <VAS::allocatePages(int, int)+0xf9>
c001248f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012492:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012496:	85 c0                	test   eax,eax
c0012498:	0f 84 a1 00 00 00    	je     c001253f <VAS::allocatePages(int, int)+0xdd>
c001249e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00124a2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124a6:	c1 e6 0c             	shl    esi,0xc
c00124a9:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00124ad:	85 c0                	test   eax,eax
c00124af:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00124b2:	7e 33                	jle    c00124e7 <VAS::allocatePages(int, int)+0x85>
c00124b4:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00124b8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124bc:	81 cd 00 04 00 00    	or     ebp,0x400
c00124c2:	e8 1b da ff ff       	call   c000fee2 <Phys::allocatePage()>
c00124c7:	55                   	push   ebp
c00124c8:	53                   	push   ebx
c00124c9:	50                   	push   eax
c00124ca:	57                   	push   edi
c00124cb:	e8 92 fe ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c00124d0:	83 c4 10             	add    esp,0x10
c00124d3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124d8:	74 03                	je     c00124dd <VAS::allocatePages(int, int)+0x7b>
c00124da:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124dd:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124e3:	39 de                	cmp    esi,ebx
c00124e5:	75 db                	jne    c00124c2 <VAS::allocatePages(int, int)+0x60>
c00124e7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124ec:	75 12                	jne    c0012500 <VAS::allocatePages(int, int)+0x9e>
c00124ee:	0f 20 d8             	mov    eax,cr3
c00124f1:	0f 22 d8             	mov    cr3,eax
c00124f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124f8:	83 c4 1c             	add    esp,0x1c
c00124fb:	5b                   	pop    ebx
c00124fc:	5e                   	pop    esi
c00124fd:	5f                   	pop    edi
c00124fe:	5d                   	pop    ebp
c00124ff:	c3                   	ret    
c0012500:	c1 ee 0a             	shr    esi,0xa
c0012503:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012507:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c001250d:	c1 eb 0a             	shr    ebx,0xa
c0012510:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0012516:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001251c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012522:	39 c3                	cmp    ebx,eax
c0012524:	77 ce                	ja     c00124f4 <VAS::allocatePages(int, int)+0x92>
c0012526:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012529:	81 c3 00 10 00 00    	add    ebx,0x1000
c001252f:	39 d8                	cmp    eax,ebx
c0012531:	73 f3                	jae    c0012526 <VAS::allocatePages(int, int)+0xc4>
c0012533:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012537:	83 c4 1c             	add    esp,0x1c
c001253a:	5b                   	pop    ebx
c001253b:	5e                   	pop    esi
c001253c:	5f                   	pop    edi
c001253d:	5d                   	pop    ebp
c001253e:	c3                   	ret    
c001253f:	83 ec 0c             	sub    esp,0xc
c0012542:	68 b0 a6 02 c0       	push   0xc002a6b0
c0012547:	e8 71 80 00 00       	call   c001a5bd <Krnl::panic(char const*)>
c001254c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001254f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012553:	83 c4 10             	add    esp,0x10
c0012556:	e9 43 ff ff ff       	jmp    c001249e <VAS::allocatePages(int, int)+0x3c>
c001255b:	83 ec 0c             	sub    esp,0xc
c001255e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012562:	e8 24 f6 ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0012567:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001256b:	83 c4 10             	add    esp,0x10
c001256e:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012573:	0f 87 9b 00 00 00    	ja     c0012614 <VAS::allocatePages(int, int)+0x1b2>
c0012579:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001257d:	85 d2                	test   edx,edx
c001257f:	7e 3c                	jle    c00125bd <VAS::allocatePages(int, int)+0x15b>
c0012581:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012585:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012589:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001258d:	c1 e5 0c             	shl    ebp,0xc
c0012590:	81 ce 00 04 00 00    	or     esi,0x400
c0012596:	01 dd                	add    ebp,ebx
c0012598:	e8 45 d9 ff ff       	call   c000fee2 <Phys::allocatePage()>
c001259d:	56                   	push   esi
c001259e:	53                   	push   ebx
c001259f:	50                   	push   eax
c00125a0:	57                   	push   edi
c00125a1:	e8 bc fd ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c00125a6:	83 c4 10             	add    esp,0x10
c00125a9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125ae:	74 03                	je     c00125b3 <VAS::allocatePages(int, int)+0x151>
c00125b0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125b3:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125b9:	39 dd                	cmp    ebp,ebx
c00125bb:	75 db                	jne    c0012598 <VAS::allocatePages(int, int)+0x136>
c00125bd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125c2:	0f 84 26 ff ff ff    	je     c00124ee <VAS::allocatePages(int, int)+0x8c>
c00125c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00125cc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00125d0:	89 d3                	mov    ebx,edx
c00125d2:	c1 e0 0c             	shl    eax,0xc
c00125d5:	c1 eb 0a             	shr    ebx,0xa
c00125d8:	01 d0                	add    eax,edx
c00125da:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125e0:	c1 e8 0a             	shr    eax,0xa
c00125e3:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00125e9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125ee:	2d 00 00 40 00       	sub    eax,0x400000
c00125f3:	39 c3                	cmp    ebx,eax
c00125f5:	0f 87 f9 fe ff ff    	ja     c00124f4 <VAS::allocatePages(int, int)+0x92>
c00125fb:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125fe:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012604:	39 d8                	cmp    eax,ebx
c0012606:	73 f3                	jae    c00125fb <VAS::allocatePages(int, int)+0x199>
c0012608:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001260c:	83 c4 1c             	add    esp,0x1c
c001260f:	5b                   	pop    ebx
c0012610:	5e                   	pop    esi
c0012611:	5f                   	pop    edi
c0012612:	5d                   	pop    ebp
c0012613:	c3                   	ret    
c0012614:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c0012619:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001261f:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012626:	0f 84 4d ff ff ff    	je     c0012579 <VAS::allocatePages(int, int)+0x117>
c001262c:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012634:	e9 40 ff ff ff       	jmp    c0012579 <VAS::allocatePages(int, int)+0x117>
c0012639:	90                   	nop

c001263a <VAS::setCPUSpecific(unsigned long)>:
c001263a:	83 ec 0c             	sub    esp,0xc
c001263d:	6a 05                	push   0x5
c001263f:	68 00 00 40 c2       	push   0xc2400000
c0012644:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012648:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001264c:	e8 11 fd ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012651:	83 c4 1c             	add    esp,0x1c
c0012654:	c3                   	ret    
c0012655:	90                   	nop

c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012656:	55                   	push   ebp
c0012657:	57                   	push   edi
c0012658:	56                   	push   esi
c0012659:	53                   	push   ebx
c001265a:	83 ec 1c             	sub    esp,0x1c
c001265d:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c0012662:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012666:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001266c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012670:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012676:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001267a:	83 e0 01             	and    eax,0x1
c001267d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012681:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012685:	85 c0                	test   eax,eax
c0012687:	7e 39                	jle    c00126c2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012689:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001268d:	89 f3                	mov    ebx,esi
c001268f:	c1 e0 0c             	shl    eax,0xc
c0012692:	01 f0                	add    eax,esi
c0012694:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012698:	55                   	push   ebp
c0012699:	53                   	push   ebx
c001269a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001269e:	29 f0                	sub    eax,esi
c00126a0:	01 d8                	add    eax,ebx
c00126a2:	50                   	push   eax
c00126a3:	57                   	push   edi
c00126a4:	e8 b9 fc ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c00126a9:	83 c4 10             	add    esp,0x10
c00126ac:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126b1:	74 03                	je     c00126b6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00126b3:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126b6:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126bc:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00126c0:	75 d6                	jne    c0012698 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00126c2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126c7:	75 10                	jne    c00126d9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00126c9:	0f 20 d8             	mov    eax,cr3
c00126cc:	0f 22 d8             	mov    cr3,eax
c00126cf:	83 c4 1c             	add    esp,0x1c
c00126d2:	89 f0                	mov    eax,esi
c00126d4:	5b                   	pop    ebx
c00126d5:	5e                   	pop    esi
c00126d6:	5f                   	pop    edi
c00126d7:	5d                   	pop    ebp
c00126d8:	c3                   	ret    
c00126d9:	89 f3                	mov    ebx,esi
c00126db:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126df:	c1 eb 0a             	shr    ebx,0xa
c00126e2:	c1 e0 0c             	shl    eax,0xc
c00126e5:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00126eb:	01 f0                	add    eax,esi
c00126ed:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00126f3:	c1 e8 0a             	shr    eax,0xa
c00126f6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00126fb:	2d 00 00 40 00       	sub    eax,0x400000
c0012700:	39 c3                	cmp    ebx,eax
c0012702:	77 cb                	ja     c00126cf <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012704:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012707:	81 c3 00 10 00 00    	add    ebx,0x1000
c001270d:	39 d8                	cmp    eax,ebx
c001270f:	73 f3                	jae    c0012704 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012711:	83 c4 1c             	add    esp,0x1c
c0012714:	89 f0                	mov    eax,esi
c0012716:	5b                   	pop    ebx
c0012717:	5e                   	pop    esi
c0012718:	5f                   	pop    edi
c0012719:	5d                   	pop    ebp
c001271a:	c3                   	ret    
c001271b:	90                   	nop

c001271c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c001271c:	55                   	push   ebp
c001271d:	57                   	push   edi
c001271e:	56                   	push   esi
c001271f:	53                   	push   ebx
c0012720:	83 ec 1c             	sub    esp,0x1c
c0012723:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012727:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001272b:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c001272f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012733:	a9 ff 0f 00 00       	test   eax,0xfff
c0012738:	75 4a                	jne    c0012784 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c001273a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001273e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012741:	c1 eb 16             	shr    ebx,0x16
c0012744:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c001274b:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c001274f:	74 4d                	je     c001279e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012751:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012755:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012759:	c1 e8 0a             	shr    eax,0xa
c001275c:	80 fa 01             	cmp    dl,0x1
c001275f:	19 d2                	sbb    edx,edx
c0012761:	c1 e3 0c             	shl    ebx,0xc
c0012764:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012768:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c001276e:	25 fc 0f 00 00       	and    eax,0xffc
c0012773:	01 d8                	add    eax,ebx
c0012775:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c001277c:	83 c4 1c             	add    esp,0x1c
c001277f:	5b                   	pop    ebx
c0012780:	5e                   	pop    esi
c0012781:	5f                   	pop    edi
c0012782:	5d                   	pop    ebp
c0012783:	c3                   	ret    
c0012784:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012788:	83 ec 0c             	sub    esp,0xc
c001278b:	68 dc a6 02 c0       	push   0xc002a6dc
c0012790:	e8 28 7e 00 00       	call   c001a5bd <Krnl::panic(char const*)>
c0012795:	83 c4 10             	add    esp,0x10
c0012798:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001279c:	eb 9c                	jmp    c001273a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c001279e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127a2:	e8 3b d7 ff ff       	call   c000fee2 <Phys::allocatePage()>
c00127a7:	89 c5                	mov    ebp,eax
c00127a9:	e8 78 f6 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c00127ae:	83 ec 0c             	sub    esp,0xc
c00127b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00127b5:	6a 01                	push   0x1
c00127b7:	e8 cf f3 ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c00127bc:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00127c3:	6a 01                	push   0x1
c00127c5:	50                   	push   eax
c00127c6:	55                   	push   ebp
c00127c7:	81 cd 07 04 00 00    	or     ebp,0x407
c00127cd:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00127d1:	51                   	push   ecx
c00127d2:	e8 7f fe ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127d7:	83 c4 1c             	add    esp,0x1c
c00127da:	68 00 10 00 00       	push   0x1000
c00127df:	6a 00                	push   0x0
c00127e1:	50                   	push   eax
c00127e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00127e6:	e8 8d df fe ff       	call   c0000778 <memset>
c00127eb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00127ef:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00127f2:	e8 04 f8 ff ff       	call   c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c00127f7:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00127fa:	83 c4 10             	add    esp,0x10
c00127fd:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012800:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012804:	e9 48 ff ff ff       	jmp    c0012751 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012809:	90                   	nop

c001280a <VAS::VAS(bool)>:
c001280a:	53                   	push   ebx
c001280b:	83 ec 28             	sub    esp,0x28
c001280e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012812:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012816:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001281a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012821:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012825:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012829:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001282c:	e8 b1 d6 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012831:	89 c2                	mov    edx,eax
c0012833:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012837:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001283a:	e8 e7 f5 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c001283f:	89 c3                	mov    ebx,eax
c0012841:	83 ec 0c             	sub    esp,0xc
c0012844:	6a 01                	push   0x1
c0012846:	e8 40 f3 ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c001284b:	83 c4 10             	add    esp,0x10
c001284e:	89 c2                	mov    edx,eax
c0012850:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012854:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012857:	83 ec 0c             	sub    esp,0xc
c001285a:	6a 03                	push   0x3
c001285c:	6a 01                	push   0x1
c001285e:	52                   	push   edx
c001285f:	50                   	push   eax
c0012860:	53                   	push   ebx
c0012861:	e8 f0 fd ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012866:	83 c4 20             	add    esp,0x20
c0012869:	89 c2                	mov    edx,eax
c001286b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001286f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012872:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001287a:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012882:	7f 1c                	jg     c00128a0 <VAS::VAS(bool)+0x96>
c0012884:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012888:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001288b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001288f:	c1 e2 02             	shl    edx,0x2
c0012892:	01 d0                	add    eax,edx
c0012894:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001289a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001289e:	eb da                	jmp    c001287a <VAS::VAS(bool)+0x70>
c00128a0:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00128a8:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00128b0:	7f 7a                	jg     c001292c <VAS::VAS(bool)+0x122>
c00128b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128b6:	2d 00 02 00 00       	sub    eax,0x200
c00128bb:	c1 e0 0c             	shl    eax,0xc
c00128be:	83 c8 03             	or     eax,0x3
c00128c1:	89 c2                	mov    edx,eax
c00128c3:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c00128c8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128ce:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128d4:	83 e0 10             	and    eax,0x10
c00128d7:	84 c0                	test   al,al
c00128d9:	74 07                	je     c00128e2 <VAS::VAS(bool)+0xd8>
c00128db:	b8 00 01 00 00       	mov    eax,0x100
c00128e0:	eb 05                	jmp    c00128e7 <VAS::VAS(bool)+0xdd>
c00128e2:	b8 00 00 00 00       	mov    eax,0x0
c00128e7:	09 d0                	or     eax,edx
c00128e9:	89 c1                	mov    ecx,eax
c00128eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128ef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00128f2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00128f6:	c1 e2 02             	shl    edx,0x2
c00128f9:	01 d0                	add    eax,edx
c00128fb:	89 ca                	mov    edx,ecx
c00128fd:	89 10                	mov    DWORD PTR [eax],edx
c00128ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012903:	2d 40 03 00 00       	sub    eax,0x340
c0012908:	83 f8 7f             	cmp    eax,0x7f
c001290b:	77 16                	ja     c0012923 <VAS::VAS(bool)+0x119>
c001290d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012911:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012914:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012918:	c1 e2 02             	shl    edx,0x2
c001291b:	01 d0                	add    eax,edx
c001291d:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012923:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012927:	e9 7c ff ff ff       	jmp    c00128a8 <VAS::VAS(bool)+0x9e>
c001292c:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c0012931:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012937:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001293d:	83 e0 10             	and    eax,0x10
c0012940:	84 c0                	test   al,al
c0012942:	74 07                	je     c001294b <VAS::VAS(bool)+0x141>
c0012944:	b8 03 41 00 00       	mov    eax,0x4103
c0012949:	eb 05                	jmp    c0012950 <VAS::VAS(bool)+0x146>
c001294b:	b8 03 40 00 00       	mov    eax,0x4003
c0012950:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012954:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012957:	81 c2 20 0c 00 00    	add    edx,0xc20
c001295d:	89 02                	mov    DWORD PTR [edx],eax
c001295f:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c0012964:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001296a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012970:	83 ec 08             	sub    esp,0x8
c0012973:	50                   	push   eax
c0012974:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012978:	e8 bd fc ff ff       	call   c001263a <VAS::setCPUSpecific(unsigned long)>
c001297d:	83 c4 10             	add    esp,0x10
c0012980:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012984:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012987:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c001298c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012992:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012998:	83 e0 10             	and    eax,0x10
c001299b:	84 c0                	test   al,al
c001299d:	74 07                	je     c00129a6 <VAS::VAS(bool)+0x19c>
c001299f:	b8 00 01 00 00       	mov    eax,0x100
c00129a4:	eb 05                	jmp    c00129ab <VAS::VAS(bool)+0x1a1>
c00129a6:	b8 00 00 00 00       	mov    eax,0x0
c00129ab:	09 c2                	or     edx,eax
c00129ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129b1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00129b4:	05 fc 0f 00 00       	add    eax,0xffc
c00129b9:	83 ca 03             	or     edx,0x3
c00129bc:	89 10                	mov    DWORD PTR [eax],edx
c00129be:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c00129c3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129c9:	83 ec 0c             	sub    esp,0xc
c00129cc:	50                   	push   eax
c00129cd:	e8 5c 1c 00 00       	call   c001462e <Device::getName()>
c00129d2:	83 c4 10             	add    esp,0x10
c00129d5:	83 ec 08             	sub    esp,0x8
c00129d8:	68 f8 a8 02 c0       	push   0xc002a8f8
c00129dd:	50                   	push   eax
c00129de:	e8 dd de fe ff       	call   c00008c0 <strcmp>
c00129e3:	83 c4 10             	add    esp,0x10
c00129e6:	85 c0                	test   eax,eax
c00129e8:	0f 94 c0             	sete   al
c00129eb:	84 c0                	test   al,al
c00129ed:	74 70                	je     c0012a5f <VAS::VAS(bool)+0x255>
c00129ef:	e8 d1 b3 00 00       	call   c001ddc5 <disableIRQs()>
c00129f4:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c00129f9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129ff:	05 7c 09 00 00       	add    eax,0x97c
c0012a04:	83 ec 0c             	sub    esp,0xc
c0012a07:	50                   	push   eax
c0012a08:	e8 af c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a0d:	83 c4 10             	add    esp,0x10
c0012a10:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a15:	89 c3                	mov    ebx,eax
c0012a17:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c0012a1c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a22:	05 7c 09 00 00       	add    eax,0x97c
c0012a27:	83 ec 0c             	sub    esp,0xc
c0012a2a:	50                   	push   eax
c0012a2b:	e8 8c c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a30:	83 c4 10             	add    esp,0x10
c0012a33:	83 ec 08             	sub    esp,0x8
c0012a36:	50                   	push   eax
c0012a37:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a3b:	e8 9c f5 ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c0012a40:	83 c4 10             	add    esp,0x10
c0012a43:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a45:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a4a:	6a 11                	push   0x11
c0012a4c:	53                   	push   ebx
c0012a4d:	50                   	push   eax
c0012a4e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a52:	e8 0b f9 ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a57:	83 c4 10             	add    esp,0x10
c0012a5a:	e8 74 b3 00 00       	call   c001ddd3 <enableIRQs()>
c0012a5f:	90                   	nop
c0012a60:	83 c4 28             	add    esp,0x28
c0012a63:	5b                   	pop    ebx
c0012a64:	c3                   	ret    
c0012a65:	90                   	nop

c0012a66 <VAS::evict(unsigned long)>:
c0012a66:	57                   	push   edi
c0012a67:	56                   	push   esi
c0012a68:	53                   	push   ebx
c0012a69:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012a6d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012a71:	e8 6c b3 00 00       	call   c001dde2 <lockScheduler()>
c0012a76:	83 ec 08             	sub    esp,0x8
c0012a79:	56                   	push   esi
c0012a7a:	68 00 a7 02 c0       	push   0xc002a700
c0012a7f:	e8 98 04 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0012a84:	e8 43 f2 ff ff       	call   c0011ccc <Virt::allocateSwapfilePage()>
c0012a89:	83 c4 0c             	add    esp,0xc
c0012a8c:	89 c3                	mov    ebx,eax
c0012a8e:	50                   	push   eax
c0012a8f:	50                   	push   eax
c0012a90:	68 06 a9 02 c0       	push   0xc002a906
c0012a95:	e8 82 04 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0012a9a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012a9d:	e8 18 f2 ff ff       	call   c0011cba <Virt::swapIDToSector(unsigned long)>
c0012aa2:	c1 e3 0b             	shl    ebx,0xb
c0012aa5:	89 34 24             	mov    DWORD PTR [esp],esi
c0012aa8:	31 d2                	xor    edx,edx
c0012aaa:	6a 08                	push   0x8
c0012aac:	52                   	push   edx
c0012aad:	50                   	push   eax
c0012aae:	0f be 05 58 d5 02 c0 	movsx  eax,BYTE PTR ds:0xc002d558
c0012ab5:	ff 34 85 bc ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1544]
c0012abc:	e8 d7 3c 00 00       	call   c0016798 <LogicalDisk::write(unsigned long long, int, void*)>
c0012ac1:	83 c4 18             	add    esp,0x18
c0012ac4:	56                   	push   esi
c0012ac5:	57                   	push   edi
c0012ac6:	e8 11 f5 ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c0012acb:	89 c6                	mov    esi,eax
c0012acd:	8b 00                	mov    eax,DWORD PTR [eax]
c0012acf:	c1 e8 0c             	shr    eax,0xc
c0012ad2:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ad5:	e8 7e d3 ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012ada:	8b 16                	mov    edx,DWORD PTR [esi]
c0012adc:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012ae2:	09 d3                	or     ebx,edx
c0012ae4:	89 1e                	mov    DWORD PTR [esi],ebx
c0012ae6:	c7 04 24 16 a9 02 c0 	mov    DWORD PTR [esp],0xc002a916
c0012aed:	e8 2a 04 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0012af2:	83 c4 10             	add    esp,0x10
c0012af5:	5b                   	pop    ebx
c0012af6:	5e                   	pop    esi
c0012af7:	5f                   	pop    edi
c0012af8:	e9 e7 b2 00 00       	jmp    c001dde4 <unlockScheduler()>
c0012afd:	90                   	nop

c0012afe <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012afe:	57                   	push   edi
c0012aff:	56                   	push   esi
c0012b00:	53                   	push   ebx
c0012b01:	83 ec 10             	sub    esp,0x10
c0012b04:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012b08:	e8 d5 b2 00 00       	call   c001dde2 <lockScheduler()>
c0012b0d:	83 ec 08             	sub    esp,0x8
c0012b10:	56                   	push   esi
c0012b11:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012b17:	68 20 a7 02 c0       	push   0xc002a720
c0012b1c:	e8 fb 03 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0012b21:	58                   	pop    eax
c0012b22:	5a                   	pop    edx
c0012b23:	56                   	push   esi
c0012b24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b28:	e8 af f4 ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c0012b2d:	59                   	pop    ecx
c0012b2e:	5b                   	pop    ebx
c0012b2f:	89 c3                	mov    ebx,eax
c0012b31:	50                   	push   eax
c0012b32:	68 26 a9 02 c0       	push   0xc002a926
c0012b37:	e8 e0 03 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0012b3c:	83 c4 10             	add    esp,0x10
c0012b3f:	85 db                	test   ebx,ebx
c0012b41:	74 08                	je     c0012b4b <VAS::tryLoadBackOffDisk(unsigned long)+0x4d>

c0012b43:	f7 03 00 04 00 00    	test   DWORD PTR [ebx],0x400

c0012b49:	75 1e                	jne    c0012b69 <VAS::tryLoadBackOffDisk(unsigned long)+0x6b>
c0012b4b:	83 ec 0c             	sub    esp,0xc
c0012b4e:	68 8c a9 02 c0       	push   0xc002a98c
c0012b53:	e8 c4 03 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0012b58:	e8 87 b2 00 00       	call   c001dde4 <unlockScheduler()>
c0012b5d:	83 c4 10             	add    esp,0x10
c0012b60:	31 c0                	xor    eax,eax
c0012b62:	83 c4 10             	add    esp,0x10
c0012b65:	5b                   	pop    ebx
c0012b66:	5e                   	pop    esi
c0012b67:	5f                   	pop    edi
c0012b68:	c3                   	ret    
c0012b69:	83 ec 0c             	sub    esp,0xc
c0012b6c:	68 34 a9 02 c0       	push   0xc002a934
c0012b71:	e8 a6 03 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0012b76:	c6 05 e0 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e5e0,0x1
c0012b7d:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0012b7f:	e8 5e d3 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012b84:	c1 ef 0b             	shr    edi,0xb
c0012b87:	5a                   	pop    edx
c0012b88:	c6 05 e0 e5 02 c0 00 	mov    BYTE PTR ds:0xc002e5e0,0x0
c0012b8f:	59                   	pop    ecx
c0012b90:	50                   	push   eax
c0012b91:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012b95:	68 4c a9 02 c0       	push   0xc002a94c
c0012b9a:	e8 7d 03 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0012b9f:	58                   	pop    eax
c0012ba0:	5a                   	pop    edx
c0012ba1:	ff 33                	push   DWORD PTR [ebx]
c0012ba3:	68 66 a9 02 c0       	push   0xc002a966
c0012ba8:	e8 6f 03 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0012bad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012bb1:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012bb3:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012bb9:	09 d0                	or     eax,edx
c0012bbb:	0d 01 08 00 00       	or     eax,0x801
c0012bc0:	89 03                	mov    DWORD PTR [ebx],eax
c0012bc2:	59                   	pop    ecx
c0012bc3:	5b                   	pop    ebx
c0012bc4:	50                   	push   eax
c0012bc5:	68 79 a9 02 c0       	push   0xc002a979
c0012bca:	e8 4d 03 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0012bcf:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012bd2:	e8 e3 f0 ff ff       	call   c0011cba <Virt::swapIDToSector(unsigned long)>
c0012bd7:	89 34 24             	mov    DWORD PTR [esp],esi
c0012bda:	31 d2                	xor    edx,edx
c0012bdc:	ff 35 4c d5 02 c0    	push   DWORD PTR ds:0xc002d54c
c0012be2:	52                   	push   edx
c0012be3:	50                   	push   eax
c0012be4:	0f be 05 58 d5 02 c0 	movsx  eax,BYTE PTR ds:0xc002d558
c0012beb:	ff 34 85 bc ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1544]
c0012bf2:	e8 35 3b 00 00       	call   c001672c <LogicalDisk::read(unsigned long long, int, void*)>
c0012bf7:	83 c4 14             	add    esp,0x14
c0012bfa:	57                   	push   edi
c0012bfb:	e8 9c f0 ff ff       	call   c0011c9c <Virt::freeSwapfilePage(unsigned long)>
c0012c00:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012c03:	e8 b2 f0 ff ff       	call   c0011cba <Virt::swapIDToSector(unsigned long)>
c0012c08:	5e                   	pop    esi
c0012c09:	5f                   	pop    edi
c0012c0a:	50                   	push   eax
c0012c0b:	68 4c a7 02 c0       	push   0xc002a74c
c0012c10:	e8 07 03 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0012c15:	e8 ca b1 00 00       	call   c001dde4 <unlockScheduler()>
c0012c1a:	83 c4 10             	add    esp,0x10
c0012c1d:	b0 01                	mov    al,0x1
c0012c1f:	83 c4 10             	add    esp,0x10
c0012c22:	5b                   	pop    ebx
c0012c23:	5e                   	pop    esi
c0012c24:	5f                   	pop    edi
c0012c25:	c3                   	ret    

c0012c26 <VAS::scanForEviction(int, int)>:
c0012c26:	55                   	push   ebp
c0012c27:	57                   	push   edi
c0012c28:	56                   	push   esi
c0012c29:	53                   	push   ebx
c0012c2a:	83 ec 0c             	sub    esp,0xc
c0012c2d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012c31:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012c35:	85 c9                	test   ecx,ecx
c0012c37:	75 08                	jne    c0012c41 <VAS::scanForEviction(int, int)+0x1b>
c0012c39:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0012c41:	83 ec 0c             	sub    esp,0xc
c0012c44:	31 ed                	xor    ebp,ebp
c0012c46:	68 6c a7 02 c0       	push   0xc002a76c
c0012c4b:	e8 cc 02 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0012c50:	83 c4 10             	add    esp,0x10
c0012c53:	eb 0f                	jmp    c0012c64 <VAS::scanForEviction(int, int)+0x3e>
c0012c55:	83 c5 04             	add    ebp,0x4
c0012c58:	81 fd 00 0c 00 00    	cmp    ebp,0xc00
c0012c5e:	0f 84 8e 00 00 00    	je     c0012cf2 <VAS::scanForEviction(int, int)+0xcc>
c0012c64:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012c67:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0012c6b:	74 e8                	je     c0012c55 <VAS::scanForEviction(int, int)+0x2f>
c0012c6d:	89 eb                	mov    ebx,ebp
c0012c6f:	31 f6                	xor    esi,esi
c0012c71:	c1 e3 14             	shl    ebx,0x14
c0012c74:	eb 0f                	jmp    c0012c85 <VAS::scanForEviction(int, int)+0x5f>
c0012c76:	46                   	inc    esi
c0012c77:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012c7d:	81 fe 00 04 00 00    	cmp    esi,0x400
c0012c83:	74 d0                	je     c0012c55 <VAS::scanForEviction(int, int)+0x2f>
c0012c85:	83 ec 08             	sub    esp,0x8
c0012c88:	53                   	push   ebx
c0012c89:	57                   	push   edi
c0012c8a:	e8 4d f3 ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c0012c8f:	83 c4 10             	add    esp,0x10
c0012c92:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c94:	89 c2                	mov    edx,eax
c0012c96:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012c9c:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012ca2:	75 d2                	jne    c0012c76 <VAS::scanForEviction(int, int)+0x50>
c0012ca4:	a8 01                	test   al,0x1
c0012ca6:	74 37                	je     c0012cdf <VAS::scanForEviction(int, int)+0xb9>
c0012ca8:	83 ec 08             	sub    esp,0x8
c0012cab:	53                   	push   ebx
c0012cac:	68 90 a7 02 c0       	push   0xc002a790
c0012cb1:	e8 66 02 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0012cb6:	89 f0                	mov    eax,esi
c0012cb8:	99                   	cdq    
c0012cb9:	f7 7c 24 34          	idiv   DWORD PTR [esp+0x34]
c0012cbd:	83 c4 10             	add    esp,0x10
c0012cc0:	85 d2                	test   edx,edx
c0012cc2:	75 b2                	jne    c0012c76 <VAS::scanForEviction(int, int)+0x50>
c0012cc4:	83 ec 0c             	sub    esp,0xc
c0012cc7:	68 a5 a9 02 c0       	push   0xc002a9a5
c0012ccc:	e8 4b 02 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0012cd1:	58                   	pop    eax
c0012cd2:	5a                   	pop    edx
c0012cd3:	53                   	push   ebx
c0012cd4:	57                   	push   edi
c0012cd5:	e8 8c fd ff ff       	call   c0012a66 <VAS::evict(unsigned long)>
c0012cda:	83 c4 10             	add    esp,0x10
c0012cdd:	eb 97                	jmp    c0012c76 <VAS::scanForEviction(int, int)+0x50>
c0012cdf:	83 ec 08             	sub    esp,0x8
c0012ce2:	53                   	push   ebx
c0012ce3:	68 bc a7 02 c0       	push   0xc002a7bc
c0012ce8:	e8 2f 02 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0012ced:	83 c4 10             	add    esp,0x10
c0012cf0:	eb 84                	jmp    c0012c76 <VAS::scanForEviction(int, int)+0x50>
c0012cf2:	83 c4 0c             	add    esp,0xc
c0012cf5:	5b                   	pop    ebx
c0012cf6:	5e                   	pop    esi
c0012cf7:	5f                   	pop    edi
c0012cf8:	5d                   	pop    ebp
c0012cf9:	c3                   	ret    

c0012cfa <mapVASFirstTime>:
c0012cfa:	55                   	push   ebp
c0012cfb:	57                   	push   edi
c0012cfc:	56                   	push   esi
c0012cfd:	53                   	push   ebx
c0012cfe:	83 ec 0c             	sub    esp,0xc
c0012d01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d06:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012d09:	4a                   	dec    edx
c0012d0a:	0f 84 8e 00 00 00    	je     c0012d9e <mapVASFirstTime+0xa4>
c0012d10:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012d13:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012d16:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012d1b:	c1 e5 15             	shl    ebp,0x15
c0012d1e:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012d23:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012d29:	29 eb                	sub    ebx,ebp
c0012d2b:	29 ee                	sub    esi,ebp
c0012d2d:	e8 b0 d1 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012d32:	83 ec 0c             	sub    esp,0xc
c0012d35:	68 03 04 00 00       	push   0x403
c0012d3a:	6a 01                	push   0x1
c0012d3c:	53                   	push   ebx
c0012d3d:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012d43:	50                   	push   eax
c0012d44:	57                   	push   edi
c0012d45:	e8 0c f9 ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d4a:	83 c4 20             	add    esp,0x20
c0012d4d:	39 f3                	cmp    ebx,esi
c0012d4f:	75 dc                	jne    c0012d2d <mapVASFirstTime+0x33>
c0012d51:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012d56:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012d5b:	29 ee                	sub    esi,ebp
c0012d5d:	29 e8                	sub    eax,ebp
c0012d5f:	89 c5                	mov    ebp,eax
c0012d61:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012d65:	19 db                	sbb    ebx,ebx
c0012d67:	e8 76 d1 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012d6c:	83 e3 04             	and    ebx,0x4
c0012d6f:	83 ec 0c             	sub    esp,0xc
c0012d72:	81 c3 03 04 00 00    	add    ebx,0x403
c0012d78:	53                   	push   ebx
c0012d79:	6a 01                	push   0x1
c0012d7b:	56                   	push   esi
c0012d7c:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012d82:	50                   	push   eax
c0012d83:	57                   	push   edi
c0012d84:	e8 cd f8 ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d89:	83 c4 20             	add    esp,0x20
c0012d8c:	39 f5                	cmp    ebp,esi
c0012d8e:	75 d1                	jne    c0012d61 <mapVASFirstTime+0x67>
c0012d90:	0f 20 d8             	mov    eax,cr3
c0012d93:	0f 22 d8             	mov    cr3,eax
c0012d96:	83 c4 0c             	add    esp,0xc
c0012d99:	5b                   	pop    ebx
c0012d9a:	5e                   	pop    esi
c0012d9b:	5f                   	pop    edi
c0012d9c:	5d                   	pop    ebp
c0012d9d:	c3                   	ret    
c0012d9e:	83 ec 0c             	sub    esp,0xc
c0012da1:	68 b0 a9 02 c0       	push   0xc002a9b0
c0012da6:	e8 71 01 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0012dab:	83 c4 10             	add    esp,0x10
c0012dae:	83 c4 0c             	add    esp,0xc
c0012db1:	5b                   	pop    ebx
c0012db2:	5e                   	pop    esi
c0012db3:	5f                   	pop    edi
c0012db4:	5d                   	pop    ebp
c0012db5:	c3                   	ret    

c0012db6 <__cxa_atexit>:
c0012db6:	31 c0                	xor    eax,eax
c0012db8:	c3                   	ret    

c0012db9 <__cxa_finalize>:
c0012db9:	c3                   	ret    

c0012dba <__stack_chk_fail>:
c0012dba:	55                   	push   ebp
c0012dbb:	89 e5                	mov    ebp,esp
c0012dbd:	83 ec 14             	sub    esp,0x14
c0012dc0:	68 c9 a9 02 c0       	push   0xc002a9c9
c0012dc5:	e8 52 01 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0012dca:	58                   	pop    eax
c0012dcb:	5a                   	pop    edx
c0012dcc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012dcf:	68 19 aa 02 c0       	push   0xc002aa19
c0012dd4:	e8 43 01 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0012dd9:	59                   	pop    ecx
c0012dda:	58                   	pop    eax
c0012ddb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012dde:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012de1:	68 19 aa 02 c0       	push   0xc002aa19
c0012de6:	e8 31 01 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0012deb:	5a                   	pop    edx
c0012dec:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012def:	59                   	pop    ecx
c0012df0:	8b 00                	mov    eax,DWORD PTR [eax]
c0012df2:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012df5:	68 19 aa 02 c0       	push   0xc002aa19
c0012dfa:	e8 1d 01 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0012dff:	5a                   	pop    edx
c0012e00:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e03:	59                   	pop    ecx
c0012e04:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e06:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e08:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e0b:	68 19 aa 02 c0       	push   0xc002aa19
c0012e10:	e8 07 01 00 00       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0012e15:	c7 04 24 21 aa 02 c0 	mov    DWORD PTR [esp],0xc002aa21
c0012e1c:	e8 9c 77 00 00       	call   c001a5bd <Krnl::panic(char const*)>
c0012e21:	83 c4 10             	add    esp,0x10
c0012e24:	c9                   	leave  
c0012e25:	c3                   	ret    

c0012e26 <__cxa_pure_virtual>:
c0012e26:	83 ec 18             	sub    esp,0x18
c0012e29:	68 39 aa 02 c0       	push   0xc002aa39
c0012e2e:	e8 8a 77 00 00       	call   c001a5bd <Krnl::panic(char const*)>
c0012e33:	83 c4 1c             	add    esp,0x1c
c0012e36:	c3                   	ret    

c0012e37 <operator new[](unsigned long)>:
c0012e37:	e9 04 ca ff ff       	jmp    c000f840 <malloc>

c0012e3c <operator delete(void*, unsigned long)>:
c0012e3c:	e9 1f ca ff ff       	jmp    c000f860 <rfree>

c0012e41 <operator delete[](void*)>:
c0012e41:	e9 1a ca ff ff       	jmp    c000f860 <rfree>

c0012e46 <operator delete[](void*, unsigned long)>:
c0012e46:	e9 15 ca ff ff       	jmp    c000f860 <rfree>

c0012e4b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012e4b:	57                   	push   edi
c0012e4c:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012e51:	56                   	push   esi
c0012e52:	be 4c aa 02 c0       	mov    esi,0xc002aa4c
c0012e57:	53                   	push   ebx
c0012e58:	83 ec 40             	sub    esp,0x40
c0012e5b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012e5f:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012e63:	fc                   	cld    
c0012e64:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e66:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012e6a:	83 f9 3e             	cmp    ecx,0x3e
c0012e6d:	7e 05                	jle    c0012e74 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012e6f:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012e74:	89 df                	mov    edi,ebx
c0012e76:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012e7a:	eb 02                	jmp    c0012e7e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012e7c:	89 c7                	mov    edi,eax
c0012e7e:	31 d2                	xor    edx,edx
c0012e80:	46                   	inc    esi
c0012e81:	89 f8                	mov    eax,edi
c0012e83:	f7 f1                	div    ecx
c0012e85:	39 cf                	cmp    edi,ecx
c0012e87:	73 f3                	jae    c0012e7c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012e89:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012e8c:	eb 02                	jmp    c0012e90 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012e8e:	89 c3                	mov    ebx,eax
c0012e90:	31 d2                	xor    edx,edx
c0012e92:	4e                   	dec    esi
c0012e93:	89 d8                	mov    eax,ebx
c0012e95:	f7 f1                	div    ecx
c0012e97:	39 cb                	cmp    ebx,ecx
c0012e99:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012e9d:	88 16                	mov    BYTE PTR [esi],dl
c0012e9f:	73 ed                	jae    c0012e8e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012ea1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012ea5:	83 c4 40             	add    esp,0x40
c0012ea8:	5b                   	pop    ebx
c0012ea9:	5e                   	pop    esi
c0012eaa:	5f                   	pop    edi
c0012eab:	c3                   	ret    

c0012eac <Dbg::logc(char)>:
c0012eac:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012eb0:	ba fd 03 00 00       	mov    edx,0x3fd
c0012eb5:	ec                   	in     al,dx
c0012eb6:	a8 20                	test   al,0x20
c0012eb8:	74 fb                	je     c0012eb5 <Dbg::logc(char)+0x9>
c0012eba:	ba f8 03 00 00       	mov    edx,0x3f8
c0012ebf:	88 c8                	mov    al,cl
c0012ec1:	ee                   	out    dx,al
c0012ec2:	c3                   	ret    

c0012ec3 <Dbg::logs(char*)>:
c0012ec3:	53                   	push   ebx
c0012ec4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012ec8:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012ecb:	84 c0                	test   al,al
c0012ecd:	74 0f                	je     c0012ede <Dbg::logs(char*)+0x1b>
c0012ecf:	50                   	push   eax
c0012ed0:	43                   	inc    ebx
c0012ed1:	e8 d6 ff ff ff       	call   c0012eac <Dbg::logc(char)>
c0012ed6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012ed9:	5a                   	pop    edx
c0012eda:	84 c0                	test   al,al
c0012edc:	75 f1                	jne    c0012ecf <Dbg::logs(char*)+0xc>
c0012ede:	5b                   	pop    ebx
c0012edf:	c3                   	ret    

c0012ee0 <Dbg::logWriteInt(unsigned int)>:
c0012ee0:	83 ec 10             	sub    esp,0x10
c0012ee3:	6a 0a                	push   0xa
c0012ee5:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012ee9:	50                   	push   eax
c0012eea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012eee:	e8 58 ff ff ff       	call   c0012e4b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012ef3:	50                   	push   eax
c0012ef4:	e8 ca ff ff ff       	call   c0012ec3 <Dbg::logs(char*)>
c0012ef9:	83 c4 20             	add    esp,0x20
c0012efc:	c3                   	ret    

c0012efd <Dbg::logWriteIntBase(unsigned int, int)>:
c0012efd:	83 ec 10             	sub    esp,0x10
c0012f00:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f04:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012f08:	50                   	push   eax
c0012f09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f0d:	e8 39 ff ff ff       	call   c0012e4b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012f12:	50                   	push   eax
c0012f13:	e8 ab ff ff ff       	call   c0012ec3 <Dbg::logs(char*)>
c0012f18:	83 c4 20             	add    esp,0x20
c0012f1b:	c3                   	ret    

c0012f1c <Dbg::kprintf(char const*, ...)>:
c0012f1c:	55                   	push   ebp
c0012f1d:	57                   	push   edi
c0012f1e:	56                   	push   esi
c0012f1f:	53                   	push   ebx
c0012f20:	83 ec 0c             	sub    esp,0xc
c0012f23:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012f27:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012f2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012f2f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012f32:	84 c0                	test   al,al
c0012f34:	74 4a                	je     c0012f80 <Dbg::kprintf(char const*, ...)+0x64>
c0012f36:	31 db                	xor    ebx,ebx
c0012f38:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012f3b:	3c 25                	cmp    al,0x25
c0012f3d:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012f40:	0f 85 e4 00 00 00    	jne    c001302a <Dbg::kprintf(char const*, ...)+0x10e>
c0012f46:	83 c3 02             	add    ebx,0x2
c0012f49:	8a 07                	mov    al,BYTE PTR [edi]
c0012f4b:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012f4e:	83 e8 25             	sub    eax,0x25
c0012f51:	3c 53                	cmp    al,0x53
c0012f53:	0f 87 ba 00 00 00    	ja     c0013013 <Dbg::kprintf(char const*, ...)+0xf7>
c0012f59:	0f b6 c0             	movzx  eax,al
c0012f5c:	ff 24 85 8c aa 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5574]
c0012f63:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f67:	89 c8                	mov    eax,ecx
c0012f69:	83 c1 04             	add    ecx,0x4
c0012f6c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f70:	ff 30                	push   DWORD PTR [eax]
c0012f72:	e8 4c ff ff ff       	call   c0012ec3 <Dbg::logs(char*)>
c0012f77:	58                   	pop    eax
c0012f78:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012f7c:	84 c0                	test   al,al
c0012f7e:	75 b8                	jne    c0012f38 <Dbg::kprintf(char const*, ...)+0x1c>
c0012f80:	83 c4 0c             	add    esp,0xc
c0012f83:	5b                   	pop    ebx
c0012f84:	5e                   	pop    esi
c0012f85:	5f                   	pop    edi
c0012f86:	5d                   	pop    ebp
c0012f87:	c3                   	ret    
c0012f88:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f8c:	89 d0                	mov    eax,edx
c0012f8e:	83 c2 04             	add    edx,0x4
c0012f91:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f95:	ff 30                	push   DWORD PTR [eax]
c0012f97:	e8 44 ff ff ff       	call   c0012ee0 <Dbg::logWriteInt(unsigned int)>
c0012f9c:	58                   	pop    eax
c0012f9d:	eb d9                	jmp    c0012f78 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f9f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012fa3:	89 d0                	mov    eax,edx
c0012fa5:	83 c2 04             	add    edx,0x4
c0012fa8:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012fab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012faf:	50                   	push   eax
c0012fb0:	e8 f7 fe ff ff       	call   c0012eac <Dbg::logc(char)>
c0012fb5:	58                   	pop    eax
c0012fb6:	eb c0                	jmp    c0012f78 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fb8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012fbc:	89 c8                	mov    eax,ecx
c0012fbe:	83 c1 04             	add    ecx,0x4
c0012fc1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012fc5:	ff 30                	push   DWORD PTR [eax]
c0012fc7:	e8 14 ff ff ff       	call   c0012ee0 <Dbg::logWriteInt(unsigned int)>
c0012fcc:	5f                   	pop    edi
c0012fcd:	eb a9                	jmp    c0012f78 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fcf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012fd3:	89 c8                	mov    eax,ecx
c0012fd5:	83 c1 04             	add    ecx,0x4
c0012fd8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012fdc:	6a 10                	push   0x10
c0012fde:	ff 30                	push   DWORD PTR [eax]
c0012fe0:	e8 18 ff ff ff       	call   c0012efd <Dbg::logWriteIntBase(unsigned int, int)>
c0012fe5:	59                   	pop    ecx
c0012fe6:	5f                   	pop    edi
c0012fe7:	eb 8f                	jmp    c0012f78 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fe9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012fed:	89 d0                	mov    eax,edx
c0012fef:	83 c2 08             	add    edx,0x8
c0012ff2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012ff6:	6a 10                	push   0x10
c0012ff8:	ff 30                	push   DWORD PTR [eax]
c0012ffa:	e8 fe fe ff ff       	call   c0012efd <Dbg::logWriteIntBase(unsigned int, int)>
c0012fff:	58                   	pop    eax
c0013000:	5a                   	pop    edx
c0013001:	e9 72 ff ff ff       	jmp    c0012f78 <Dbg::kprintf(char const*, ...)+0x5c>
c0013006:	6a 25                	push   0x25
c0013008:	e8 9f fe ff ff       	call   c0012eac <Dbg::logc(char)>
c001300d:	58                   	pop    eax
c001300e:	e9 65 ff ff ff       	jmp    c0012f78 <Dbg::kprintf(char const*, ...)+0x5c>
c0013013:	6a 25                	push   0x25
c0013015:	e8 92 fe ff ff       	call   c0012eac <Dbg::logc(char)>
c001301a:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001301d:	50                   	push   eax
c001301e:	e8 89 fe ff ff       	call   c0012eac <Dbg::logc(char)>
c0013023:	5a                   	pop    edx
c0013024:	59                   	pop    ecx
c0013025:	e9 4e ff ff ff       	jmp    c0012f78 <Dbg::kprintf(char const*, ...)+0x5c>
c001302a:	50                   	push   eax
c001302b:	89 eb                	mov    ebx,ebp
c001302d:	e8 7a fe ff ff       	call   c0012eac <Dbg::logc(char)>
c0013032:	89 fd                	mov    ebp,edi
c0013034:	58                   	pop    eax
c0013035:	e9 3e ff ff ff       	jmp    c0012f78 <Dbg::kprintf(char const*, ...)+0x5c>

c001303a <File::read(unsigned long long, void*, int*)>:
c001303a:	53                   	push   ebx
c001303b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001303f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013043:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001304a:	3c 19                	cmp    al,0x19
c001304c:	77 35                	ja     c0013083 <File::read(unsigned long long, void*, int*)+0x49>
c001304e:	8b 04 85 c0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1440]
c0013055:	85 c0                	test   eax,eax
c0013057:	74 2a                	je     c0013083 <File::read(unsigned long long, void*, int*)+0x49>
c0013059:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001305f:	85 c0                	test   eax,eax
c0013061:	74 20                	je     c0013083 <File::read(unsigned long long, void*, int*)+0x49>
c0013063:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013067:	74 21                	je     c001308a <File::read(unsigned long long, void*, int*)+0x50>
c0013069:	8b 08                	mov    ecx,DWORD PTR [eax]
c001306b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001306f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013075:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013079:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001307d:	5b                   	pop    ebx
c001307e:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0013081:	ff e0                	jmp    eax
c0013083:	b8 0b 00 00 00       	mov    eax,0xb
c0013088:	eb 05                	jmp    c001308f <File::read(unsigned long long, void*, int*)+0x55>
c001308a:	b8 05 00 00 00       	mov    eax,0x5
c001308f:	5b                   	pop    ebx
c0013090:	c3                   	ret    
c0013091:	90                   	nop

c0013092 <File::write(unsigned long long, void*, int*)>:
c0013092:	53                   	push   ebx
c0013093:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013097:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001309b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00130a2:	3c 19                	cmp    al,0x19
c00130a4:	77 35                	ja     c00130db <File::write(unsigned long long, void*, int*)+0x49>
c00130a6:	8b 04 85 c0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1440]
c00130ad:	85 c0                	test   eax,eax
c00130af:	74 2a                	je     c00130db <File::write(unsigned long long, void*, int*)+0x49>
c00130b1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00130b7:	85 c0                	test   eax,eax
c00130b9:	74 20                	je     c00130db <File::write(unsigned long long, void*, int*)+0x49>
c00130bb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130bf:	74 21                	je     c00130e2 <File::write(unsigned long long, void*, int*)+0x50>
c00130c1:	8b 08                	mov    ecx,DWORD PTR [eax]
c00130c3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00130c7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00130cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130d1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00130d5:	5b                   	pop    ebx
c00130d6:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00130d9:	ff e0                	jmp    eax
c00130db:	b8 0b 00 00 00       	mov    eax,0xb
c00130e0:	eb 05                	jmp    c00130e7 <File::write(unsigned long long, void*, int*)+0x55>
c00130e2:	b8 05 00 00 00       	mov    eax,0x5
c00130e7:	5b                   	pop    ebx
c00130e8:	c3                   	ret    
c00130e9:	90                   	nop

c00130ea <Directory::read(unsigned long long, void*, int*)>:
c00130ea:	53                   	push   ebx
c00130eb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130ef:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00130f3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00130fa:	3c 19                	cmp    al,0x19
c00130fc:	77 35                	ja     c0013133 <Directory::read(unsigned long long, void*, int*)+0x49>
c00130fe:	8b 04 85 c0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1440]
c0013105:	85 c0                	test   eax,eax
c0013107:	74 2a                	je     c0013133 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013109:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001310f:	85 c0                	test   eax,eax
c0013111:	74 20                	je     c0013133 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013113:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013117:	74 21                	je     c001313a <Directory::read(unsigned long long, void*, int*)+0x50>
c0013119:	8b 08                	mov    ecx,DWORD PTR [eax]
c001311b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001311f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013125:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013129:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001312d:	5b                   	pop    ebx
c001312e:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0013131:	ff e0                	jmp    eax
c0013133:	b8 0b 00 00 00       	mov    eax,0xb
c0013138:	eb 05                	jmp    c001313f <Directory::read(unsigned long long, void*, int*)+0x55>
c001313a:	b8 05 00 00 00       	mov    eax,0x5
c001313f:	5b                   	pop    ebx
c0013140:	c3                   	ret    
c0013141:	90                   	nop

c0013142 <Directory::write(unsigned long long, void*, int*)>:
c0013142:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013146:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c001314d:	b8 0b 00 00 00       	mov    eax,0xb
c0013152:	80 fa 19             	cmp    dl,0x19
c0013155:	77 18                	ja     c001316f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013157:	8b 14 95 c0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1440]
c001315e:	85 d2                	test   edx,edx
c0013160:	74 0d                	je     c001316f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013162:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0013169:	19 c0                	sbb    eax,eax
c001316b:	83 e0 0a             	and    eax,0xa
c001316e:	40                   	inc    eax
c001316f:	c3                   	ret    

c0013170 <File::isAtty()>:
c0013170:	31 c0                	xor    eax,eax
c0013172:	c3                   	ret    
c0013173:	90                   	nop

c0013174 <Directory::isAtty()>:
c0013174:	31 c0                	xor    eax,eax
c0013176:	c3                   	ret    
c0013177:	90                   	nop

c0013178 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0013178:	b8 0a 00 00 00       	mov    eax,0xa
c001317d:	c3                   	ret    

c001317e <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c001317e:	b8 0a 00 00 00       	mov    eax,0xa
c0013183:	c3                   	ret    

c0013184 <File::~File()>:
c0013184:	83 ec 0c             	sub    esp,0xc
c0013187:	ba 48 ac 02 c0       	mov    edx,0xc002ac48
c001318c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013190:	89 10                	mov    DWORD PTR [eax],edx
c0013192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013196:	83 ec 0c             	sub    esp,0xc
c0013199:	50                   	push   eax
c001319a:	e8 8b e7 ff ff       	call   c001192a <UnixFile::~UnixFile()>
c001319f:	83 c4 10             	add    esp,0x10
c00131a2:	90                   	nop
c00131a3:	83 c4 0c             	add    esp,0xc
c00131a6:	c3                   	ret    
c00131a7:	90                   	nop

c00131a8 <File::~File()>:
c00131a8:	83 ec 0c             	sub    esp,0xc
c00131ab:	83 ec 0c             	sub    esp,0xc
c00131ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131b2:	e8 cd ff ff ff       	call   c0013184 <File::~File()>
c00131b7:	83 c4 10             	add    esp,0x10
c00131ba:	83 ec 08             	sub    esp,0x8
c00131bd:	68 14 01 00 00       	push   0x114
c00131c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131c6:	e8 71 fc ff ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c00131cb:	83 c4 10             	add    esp,0x10
c00131ce:	83 c4 0c             	add    esp,0xc
c00131d1:	c3                   	ret    

c00131d2 <Directory::~Directory()>:
c00131d2:	83 ec 0c             	sub    esp,0xc
c00131d5:	ba 64 ac 02 c0       	mov    edx,0xc002ac64
c00131da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131de:	89 10                	mov    DWORD PTR [eax],edx
c00131e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131e4:	83 ec 0c             	sub    esp,0xc
c00131e7:	50                   	push   eax
c00131e8:	e8 3d e7 ff ff       	call   c001192a <UnixFile::~UnixFile()>
c00131ed:	83 c4 10             	add    esp,0x10
c00131f0:	90                   	nop
c00131f1:	83 c4 0c             	add    esp,0xc
c00131f4:	c3                   	ret    
c00131f5:	90                   	nop

c00131f6 <Directory::~Directory()>:
c00131f6:	83 ec 0c             	sub    esp,0xc
c00131f9:	83 ec 0c             	sub    esp,0xc
c00131fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013200:	e8 cd ff ff ff       	call   c00131d2 <Directory::~Directory()>
c0013205:	83 c4 10             	add    esp,0x10
c0013208:	83 ec 08             	sub    esp,0x8
c001320b:	68 14 01 00 00       	push   0x114
c0013210:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013214:	e8 23 fc ff ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c0013219:	83 c4 10             	add    esp,0x10
c001321c:	83 c4 0c             	add    esp,0xc
c001321f:	c3                   	ret    

c0013220 <Filesystem::Filesystem()>:
c0013220:	ba e4 ab 02 c0       	mov    edx,0xc002abe4
c0013225:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013229:	89 10                	mov    DWORD PTR [eax],edx
c001322b:	8b 15 2c e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e72c
c0013231:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013235:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013238:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001323c:	a3 2c e7 02 c0       	mov    ds:0xc002e72c,eax
c0013241:	90                   	nop
c0013242:	c3                   	ret    
c0013243:	90                   	nop

c0013244 <Filesystem::~Filesystem()>:
c0013244:	ba e4 ab 02 c0       	mov    edx,0xc002abe4
c0013249:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001324d:	89 10                	mov    DWORD PTR [eax],edx
c001324f:	90                   	nop
c0013250:	c3                   	ret    
c0013251:	90                   	nop

c0013252 <Filesystem::~Filesystem()>:
c0013252:	83 ec 0c             	sub    esp,0xc
c0013255:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013259:	e8 e6 ff ff ff       	call   c0013244 <Filesystem::~Filesystem()>
c001325e:	83 c4 04             	add    esp,0x4
c0013261:	83 ec 08             	sub    esp,0x8
c0013264:	6a 08                	push   0x8
c0013266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001326a:	e8 cd fb ff ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c001326f:	83 c4 10             	add    esp,0x10
c0013272:	83 c4 0c             	add    esp,0xc
c0013275:	c3                   	ret    

c0013276 <Fs::getcwd(Process*, char*, int)>:
c0013276:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001327a:	31 c0                	xor    eax,eax
c001327c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001327f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0013283:	7d 15                	jge    c001329a <Fs::getcwd(Process*, char*, int)+0x24>
c0013285:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013289:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0013290:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0013293:	84 c9                	test   cl,cl
c0013295:	74 06                	je     c001329d <Fs::getcwd(Process*, char*, int)+0x27>
c0013297:	40                   	inc    eax
c0013298:	eb e2                	jmp    c001327c <Fs::getcwd(Process*, char*, int)+0x6>
c001329a:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001329d:	31 c0                	xor    eax,eax
c001329f:	c3                   	ret    

c00132a0 <Fs::initVFS()>:
c00132a0:	83 ec 18             	sub    esp,0x18
c00132a3:	6a 08                	push   0x8
c00132a5:	e8 96 c5 ff ff       	call   c000f840 <malloc>
c00132aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00132ad:	e8 a4 dc 00 00       	call   c0020f56 <FAT::FAT()>
c00132b2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00132b9:	e8 82 c5 ff ff       	call   c000f840 <malloc>
c00132be:	89 04 24             	mov    DWORD PTR [esp],eax
c00132c1:	e8 e8 ee 00 00       	call   c00221ae <ISO9660::ISO9660()>
c00132c6:	83 c4 1c             	add    esp,0x1c
c00132c9:	c3                   	ret    

c00132ca <Fs::standardiseFiles(char*, char const*, char const*)>:
c00132ca:	55                   	push   ebp
c00132cb:	57                   	push   edi
c00132cc:	56                   	push   esi
c00132cd:	53                   	push   ebx
c00132ce:	81 ec 10 04 00 00    	sub    esp,0x410
c00132d4:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00132db:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00132e2:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00132e9:	68 00 04 00 00       	push   0x400
c00132ee:	6a 00                	push   0x0
c00132f0:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00132f4:	56                   	push   esi
c00132f5:	e8 7e d4 fe ff       	call   c0000778 <memset>
c00132fa:	83 c4 10             	add    esp,0x10
c00132fd:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0013301:	75 0b                	jne    c001330e <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0013303:	50                   	push   eax
c0013304:	50                   	push   eax
c0013305:	57                   	push   edi
c0013306:	56                   	push   esi
c0013307:	e8 28 d5 fe ff       	call   c0000834 <strcpy>
c001330c:	eb 41                	jmp    c001334f <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c001330e:	8a 07                	mov    al,BYTE PTR [edi]
c0013310:	3c 5c                	cmp    al,0x5c
c0013312:	74 04                	je     c0013318 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0013314:	3c 2f                	cmp    al,0x2f
c0013316:	75 18                	jne    c0013330 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0013318:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001331b:	3c 60                	cmp    al,0x60
c001331d:	7e 03                	jle    c0013322 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c001331f:	83 e8 20             	sub    eax,0x20
c0013322:	88 04 24             	mov    BYTE PTR [esp],al
c0013325:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001332c:	50                   	push   eax
c001332d:	50                   	push   eax
c001332e:	eb 18                	jmp    c0013348 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0013330:	50                   	push   eax
c0013331:	50                   	push   eax
c0013332:	55                   	push   ebp
c0013333:	56                   	push   esi
c0013334:	e8 fb d4 fe ff       	call   c0000834 <strcpy>
c0013339:	5a                   	pop    edx
c001333a:	59                   	pop    ecx
c001333b:	68 81 c3 02 c0       	push   0xc002c381
c0013340:	56                   	push   esi
c0013341:	e8 2e d6 fe ff       	call   c0000974 <strcat>
c0013346:	5d                   	pop    ebp
c0013347:	58                   	pop    eax
c0013348:	57                   	push   edi
c0013349:	56                   	push   esi
c001334a:	e8 25 d6 fe ff       	call   c0000974 <strcat>
c001334f:	83 c4 10             	add    esp,0x10
c0013352:	8a 04 24             	mov    al,BYTE PTR [esp]
c0013355:	3c 60                	cmp    al,0x60
c0013357:	7e 03                	jle    c001335c <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0013359:	83 e8 20             	sub    eax,0x20
c001335c:	88 04 24             	mov    BYTE PTR [esp],al
c001335f:	88 03                	mov    BYTE PTR [ebx],al
c0013361:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013368:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c001336e:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0013372:	bf 03 00 00 00       	mov    edi,0x3
c0013377:	b8 03 00 00 00       	mov    eax,0x3
c001337c:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c001337f:	84 d2                	test   dl,dl
c0013381:	0f 84 91 00 00 00    	je     c0013418 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0013387:	8d 4f 01             	lea    ecx,[edi+0x1]
c001338a:	80 fa 5c             	cmp    dl,0x5c
c001338d:	74 05                	je     c0013394 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c001338f:	80 fa 2f             	cmp    dl,0x2f
c0013392:	75 12                	jne    c00133a6 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013394:	89 c5                	mov    ebp,eax
c0013396:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001339b:	74 09                	je     c00133a6 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c001339d:	40                   	inc    eax
c001339e:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00133a2:	89 cf                	mov    edi,ecx
c00133a4:	eb d6                	jmp    c001337c <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c00133a6:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00133ab:	75 5b                	jne    c0013408 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00133ad:	80 fa 2e             	cmp    dl,0x2e
c00133b0:	75 56                	jne    c0013408 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00133b2:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00133b6:	74 19                	je     c00133d1 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c00133b8:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00133bd:	74 53                	je     c0013412 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00133bf:	89 f9                	mov    ecx,edi
c00133c1:	41                   	inc    ecx
c00133c2:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00133c5:	80 fa 2f             	cmp    dl,0x2f
c00133c8:	74 f7                	je     c00133c1 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00133ca:	80 fa 5c             	cmp    dl,0x5c
c00133cd:	74 f2                	je     c00133c1 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00133cf:	eb d1                	jmp    c00133a2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133d1:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00133d6:	74 3a                	je     c0013412 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00133d8:	83 f8 03             	cmp    eax,0x3
c00133db:	74 c5                	je     c00133a2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133dd:	41                   	inc    ecx
c00133de:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00133e1:	80 fa 2f             	cmp    dl,0x2f
c00133e4:	74 f7                	je     c00133dd <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00133e6:	80 fa 5c             	cmp    dl,0x5c
c00133e9:	74 f2                	je     c00133dd <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00133eb:	48                   	dec    eax
c00133ec:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00133f0:	75 06                	jne    c00133f8 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00133f2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00133f6:	eb f3                	jmp    c00133eb <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c00133f8:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00133fc:	74 07                	je     c0013405 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c00133fe:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013402:	48                   	dec    eax
c0013403:	eb f3                	jmp    c00133f8 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013405:	40                   	inc    eax
c0013406:	eb 9a                	jmp    c00133a2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013408:	80 fa 2f             	cmp    dl,0x2f
c001340b:	74 95                	je     c00133a2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001340d:	80 fa 5c             	cmp    dl,0x5c
c0013410:	74 90                	je     c00133a2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013412:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0013415:	40                   	inc    eax
c0013416:	eb 8a                	jmp    c00133a2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013418:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001341c:	83 ec 0c             	sub    esp,0xc
c001341f:	53                   	push   ebx
c0013420:	e8 6f d3 fe ff       	call   c0000794 <strlen>
c0013425:	83 c4 10             	add    esp,0x10
c0013428:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c001342d:	75 26                	jne    c0013455 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c001342f:	83 ec 0c             	sub    esp,0xc
c0013432:	53                   	push   ebx
c0013433:	e8 5c d3 fe ff       	call   c0000794 <strlen>
c0013438:	83 c4 10             	add    esp,0x10
c001343b:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0013440:	74 26                	je     c0013468 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0013442:	83 ec 0c             	sub    esp,0xc
c0013445:	53                   	push   ebx
c0013446:	e8 49 d3 fe ff       	call   c0000794 <strlen>
c001344b:	83 c4 10             	add    esp,0x10
c001344e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013453:	eb c7                	jmp    c001341c <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0013455:	83 ec 0c             	sub    esp,0xc
c0013458:	53                   	push   ebx
c0013459:	e8 36 d3 fe ff       	call   c0000794 <strlen>
c001345e:	83 c4 10             	add    esp,0x10
c0013461:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013466:	74 c7                	je     c001342f <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0013468:	81 c4 0c 04 00 00    	add    esp,0x40c
c001346e:	5b                   	pop    ebx
c001346f:	5e                   	pop    esi
c0013470:	5f                   	pop    edi
c0013471:	5d                   	pop    ebp
c0013472:	c3                   	ret    
c0013473:	90                   	nop

c0013474 <File::File(char const*, Process*)>:
c0013474:	83 ec 0c             	sub    esp,0xc
c0013477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001347b:	83 ec 08             	sub    esp,0x8
c001347e:	6a 00                	push   0x0
c0013480:	50                   	push   eax
c0013481:	e8 c2 e2 ff ff       	call   c0011748 <UnixFile::UnixFile(int)>
c0013486:	83 c4 10             	add    esp,0x10
c0013489:	ba 48 ac 02 c0       	mov    edx,0xc002ac48
c001348e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013492:	89 10                	mov    DWORD PTR [eax],edx
c0013494:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013498:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001349e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134a2:	83 c0 0d             	add    eax,0xd
c00134a5:	83 ec 04             	sub    esp,0x4
c00134a8:	52                   	push   edx
c00134a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134ad:	50                   	push   eax
c00134ae:	e8 17 fe ff ff       	call   c00132ca <Fs::standardiseFiles(char*, char const*, char const*)>
c00134b3:	83 c4 10             	add    esp,0x10
c00134b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134ba:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00134bd:	8d 50 bf             	lea    edx,[eax-0x41]
c00134c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134c4:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00134ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134ce:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00134d2:	90                   	nop
c00134d3:	83 c4 0c             	add    esp,0xc
c00134d6:	c3                   	ret    
c00134d7:	90                   	nop

c00134d8 <File::open(FileOpenMode)>:
c00134d8:	53                   	push   ebx
c00134d9:	b8 0b 00 00 00       	mov    eax,0xb
c00134de:	83 ec 08             	sub    esp,0x8
c00134e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00134e5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00134ec:	80 fa 19             	cmp    dl,0x19
c00134ef:	77 40                	ja     c0013531 <File::open(FileOpenMode)+0x59>
c00134f1:	8b 14 95 c0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1440]
c00134f8:	85 d2                	test   edx,edx
c00134fa:	74 35                	je     c0013531 <File::open(FileOpenMode)+0x59>
c00134fc:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013502:	85 d2                	test   edx,edx
c0013504:	74 2b                	je     c0013531 <File::open(FileOpenMode)+0x59>
c0013506:	b8 06 00 00 00       	mov    eax,0x6
c001350b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001350f:	75 20                	jne    c0013531 <File::open(FileOpenMode)+0x59>
c0013511:	8b 02                	mov    eax,DWORD PTR [edx]
c0013513:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001351d:	51                   	push   ecx
c001351e:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013521:	51                   	push   ecx
c0013522:	52                   	push   edx
c0013523:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013526:	83 c4 10             	add    esp,0x10
c0013529:	85 c0                	test   eax,eax
c001352b:	75 04                	jne    c0013531 <File::open(FileOpenMode)+0x59>
c001352d:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013531:	83 c4 08             	add    esp,0x8
c0013534:	5b                   	pop    ebx
c0013535:	c3                   	ret    

c0013536 <File::close()>:
c0013536:	53                   	push   ebx
c0013537:	b8 0b 00 00 00       	mov    eax,0xb
c001353c:	83 ec 08             	sub    esp,0x8
c001353f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013543:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001354a:	80 fa 19             	cmp    dl,0x19
c001354d:	77 41                	ja     c0013590 <File::close()+0x5a>
c001354f:	8b 1c 95 c0 eb 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1440]
c0013556:	85 db                	test   ebx,ebx
c0013558:	74 36                	je     c0013590 <File::close()+0x5a>
c001355a:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013561:	74 2d                	je     c0013590 <File::close()+0x5a>
c0013563:	b8 05 00 00 00       	mov    eax,0x5
c0013568:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001356c:	74 22                	je     c0013590 <File::close()+0x5a>
c001356e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013572:	8b 04 95 c0 eb 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1440]
c0013579:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001357f:	53                   	push   ebx
c0013580:	53                   	push   ebx
c0013581:	8b 10                	mov    edx,DWORD PTR [eax]
c0013583:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013589:	50                   	push   eax
c001358a:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c001358d:	83 c4 10             	add    esp,0x10
c0013590:	83 c4 08             	add    esp,0x8
c0013593:	5b                   	pop    ebx
c0013594:	c3                   	ret    
c0013595:	90                   	nop

c0013596 <File::seek(unsigned long long)>:
c0013596:	56                   	push   esi
c0013597:	53                   	push   ebx
c0013598:	b8 0b 00 00 00       	mov    eax,0xb
c001359d:	51                   	push   ecx
c001359e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00135a2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00135a6:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00135ad:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00135b1:	80 fa 19             	cmp    dl,0x19
c00135b4:	77 31                	ja     c00135e7 <File::seek(unsigned long long)+0x51>
c00135b6:	8b 14 95 c0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1440]
c00135bd:	85 d2                	test   edx,edx
c00135bf:	74 26                	je     c00135e7 <File::seek(unsigned long long)+0x51>
c00135c1:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00135c7:	85 d2                	test   edx,edx
c00135c9:	74 1c                	je     c00135e7 <File::seek(unsigned long long)+0x51>
c00135cb:	b8 05 00 00 00       	mov    eax,0x5
c00135d0:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00135d4:	74 11                	je     c00135e7 <File::seek(unsigned long long)+0x51>
c00135d6:	8b 02                	mov    eax,DWORD PTR [edx]
c00135d8:	53                   	push   ebx
c00135d9:	51                   	push   ecx
c00135da:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00135e0:	52                   	push   edx
c00135e1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00135e4:	83 c4 10             	add    esp,0x10
c00135e7:	5a                   	pop    edx
c00135e8:	5b                   	pop    ebx
c00135e9:	5e                   	pop    esi
c00135ea:	c3                   	ret    
c00135eb:	90                   	nop

c00135ec <File::tell(unsigned long long*)>:
c00135ec:	83 ec 0c             	sub    esp,0xc
c00135ef:	b8 0b 00 00 00       	mov    eax,0xb
c00135f4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00135f8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00135ff:	80 fa 19             	cmp    dl,0x19
c0013602:	77 34                	ja     c0013638 <File::tell(unsigned long long*)+0x4c>
c0013604:	8b 14 95 c0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1440]
c001360b:	85 d2                	test   edx,edx
c001360d:	74 29                	je     c0013638 <File::tell(unsigned long long*)+0x4c>
c001360f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013615:	85 d2                	test   edx,edx
c0013617:	74 1f                	je     c0013638 <File::tell(unsigned long long*)+0x4c>
c0013619:	b8 05 00 00 00       	mov    eax,0x5
c001361e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013622:	74 14                	je     c0013638 <File::tell(unsigned long long*)+0x4c>
c0013624:	50                   	push   eax
c0013625:	8b 02                	mov    eax,DWORD PTR [edx]
c0013627:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001362b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013631:	52                   	push   edx
c0013632:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013635:	83 c4 10             	add    esp,0x10
c0013638:	83 c4 0c             	add    esp,0xc
c001363b:	c3                   	ret    

c001363c <File::rewind()>:
c001363c:	83 ec 10             	sub    esp,0x10
c001363f:	6a 00                	push   0x0
c0013641:	6a 00                	push   0x0
c0013643:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013647:	e8 4a ff ff ff       	call   c0013596 <File::seek(unsigned long long)>
c001364c:	83 c4 1c             	add    esp,0x1c
c001364f:	c3                   	ret    

c0013650 <File::unlink()>:
c0013650:	83 ec 0c             	sub    esp,0xc
c0013653:	b8 0b 00 00 00       	mov    eax,0xb
c0013658:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001365c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013663:	80 f9 19             	cmp    cl,0x19
c0013666:	77 2f                	ja     c0013697 <File::unlink()+0x47>
c0013668:	8b 0c 8d c0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1440]
c001366f:	85 c9                	test   ecx,ecx
c0013671:	74 24                	je     c0013697 <File::unlink()+0x47>
c0013673:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013679:	85 c9                	test   ecx,ecx
c001367b:	74 1a                	je     c0013697 <File::unlink()+0x47>
c001367d:	b8 06 00 00 00       	mov    eax,0x6
c0013682:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013686:	75 0f                	jne    c0013697 <File::unlink()+0x47>
c0013688:	83 c2 0d             	add    edx,0xd
c001368b:	50                   	push   eax
c001368c:	50                   	push   eax
c001368d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001368f:	52                   	push   edx
c0013690:	51                   	push   ecx
c0013691:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013694:	83 c4 10             	add    esp,0x10
c0013697:	83 c4 0c             	add    esp,0xc
c001369a:	c3                   	ret    
c001369b:	90                   	nop

c001369c <File::rename(char const*)>:
c001369c:	83 ec 0c             	sub    esp,0xc
c001369f:	b8 0b 00 00 00       	mov    eax,0xb
c00136a4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136a8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136af:	80 f9 19             	cmp    cl,0x19
c00136b2:	77 32                	ja     c00136e6 <File::rename(char const*)+0x4a>
c00136b4:	8b 0c 8d c0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1440]
c00136bb:	85 c9                	test   ecx,ecx
c00136bd:	74 27                	je     c00136e6 <File::rename(char const*)+0x4a>
c00136bf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136c5:	85 c9                	test   ecx,ecx
c00136c7:	74 1d                	je     c00136e6 <File::rename(char const*)+0x4a>
c00136c9:	b8 06 00 00 00       	mov    eax,0x6
c00136ce:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136d2:	75 12                	jne    c00136e6 <File::rename(char const*)+0x4a>
c00136d4:	83 c2 0d             	add    edx,0xd
c00136d7:	50                   	push   eax
c00136d8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136de:	52                   	push   edx
c00136df:	51                   	push   ecx
c00136e0:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00136e3:	83 c4 10             	add    esp,0x10
c00136e6:	83 c4 0c             	add    esp,0xc
c00136e9:	c3                   	ret    

c00136ea <File::chfatattr(unsigned char, unsigned char)>:
c00136ea:	57                   	push   edi
c00136eb:	b8 0b 00 00 00       	mov    eax,0xb
c00136f0:	56                   	push   esi
c00136f1:	53                   	push   ebx
c00136f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136f6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00136fa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013701:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013705:	80 f9 19             	cmp    cl,0x19
c0013708:	77 37                	ja     c0013741 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001370a:	8b 0c 8d c0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1440]
c0013711:	85 c9                	test   ecx,ecx
c0013713:	74 2c                	je     c0013741 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013715:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001371b:	85 c9                	test   ecx,ecx
c001371d:	74 22                	je     c0013741 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001371f:	b8 06 00 00 00       	mov    eax,0x6
c0013724:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013728:	75 17                	jne    c0013741 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001372a:	8b 39                	mov    edi,DWORD PTR [ecx]
c001372c:	89 f0                	mov    eax,esi
c001372e:	83 c2 0d             	add    edx,0xd
c0013731:	0f b6 f0             	movzx  esi,al
c0013734:	0f b6 db             	movzx  ebx,bl
c0013737:	56                   	push   esi
c0013738:	53                   	push   ebx
c0013739:	52                   	push   edx
c001373a:	51                   	push   ecx
c001373b:	ff 57 34             	call   DWORD PTR [edi+0x34]
c001373e:	83 c4 10             	add    esp,0x10
c0013741:	5b                   	pop    ebx
c0013742:	5e                   	pop    esi
c0013743:	5f                   	pop    edi
c0013744:	c3                   	ret    
c0013745:	90                   	nop

c0013746 <File::exists()>:
c0013746:	83 ec 0c             	sub    esp,0xc
c0013749:	31 c0                	xor    eax,eax
c001374b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001374f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013756:	80 f9 19             	cmp    cl,0x19
c0013759:	77 24                	ja     c001377f <File::exists()+0x39>
c001375b:	8b 0c 8d c0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1440]
c0013762:	85 c9                	test   ecx,ecx
c0013764:	74 19                	je     c001377f <File::exists()+0x39>
c0013766:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001376c:	85 c9                	test   ecx,ecx
c001376e:	74 0f                	je     c001377f <File::exists()+0x39>
c0013770:	83 c2 0d             	add    edx,0xd
c0013773:	50                   	push   eax
c0013774:	50                   	push   eax
c0013775:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013777:	52                   	push   edx
c0013778:	51                   	push   ecx
c0013779:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001377c:	83 c4 10             	add    esp,0x10
c001377f:	83 c4 0c             	add    esp,0xc
c0013782:	c3                   	ret    
c0013783:	90                   	nop

c0013784 <File::stat(unsigned long long*, bool*)>:
c0013784:	56                   	push   esi
c0013785:	53                   	push   ebx
c0013786:	50                   	push   eax
c0013787:	b8 0b 00 00 00       	mov    eax,0xb
c001378c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013790:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013794:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001379b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001379f:	80 f9 19             	cmp    cl,0x19
c00137a2:	77 3d                	ja     c00137e1 <File::stat(unsigned long long*, bool*)+0x5d>
c00137a4:	8b 0c 8d c0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1440]
c00137ab:	85 c9                	test   ecx,ecx
c00137ad:	74 32                	je     c00137e1 <File::stat(unsigned long long*, bool*)+0x5d>
c00137af:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00137b5:	85 c9                	test   ecx,ecx
c00137b7:	74 28                	je     c00137e1 <File::stat(unsigned long long*, bool*)+0x5d>
c00137b9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137bb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00137bf:	74 13                	je     c00137d4 <File::stat(unsigned long long*, bool*)+0x50>
c00137c1:	83 ec 04             	sub    esp,0x4
c00137c4:	56                   	push   esi
c00137c5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00137cb:	51                   	push   ecx
c00137cc:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00137cf:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00137d2:	eb 0a                	jmp    c00137de <File::stat(unsigned long long*, bool*)+0x5a>
c00137d4:	53                   	push   ebx
c00137d5:	83 c2 0d             	add    edx,0xd
c00137d8:	56                   	push   esi
c00137d9:	52                   	push   edx
c00137da:	51                   	push   ecx
c00137db:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00137de:	83 c4 10             	add    esp,0x10
c00137e1:	5a                   	pop    edx
c00137e2:	5b                   	pop    ebx
c00137e3:	5e                   	pop    esi
c00137e4:	c3                   	ret    

c00137e5 <Fs::setcwd(Process*, char*)>:
c00137e5:	55                   	push   ebp
c00137e6:	57                   	push   edi
c00137e7:	56                   	push   esi
c00137e8:	53                   	push   ebx
c00137e9:	81 ec 20 02 00 00    	sub    esp,0x220
c00137ef:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00137f6:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00137fc:	57                   	push   edi
c00137fd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013804:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013808:	56                   	push   esi
c0013809:	e8 bc fa ff ff       	call   c00132ca <Fs::standardiseFiles(char*, char const*, char const*)>
c001380e:	89 34 24             	mov    DWORD PTR [esp],esi
c0013811:	e8 7e cf fe ff       	call   c0000794 <strlen>
c0013816:	83 c4 10             	add    esp,0x10
c0013819:	83 f8 02             	cmp    eax,0x2
c001381c:	77 17                	ja     c0013835 <Fs::setcwd(Process*, char*)+0x50>
c001381e:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013823:	83 e8 41             	sub    eax,0x41
c0013826:	83 f8 19             	cmp    eax,0x19
c0013829:	76 24                	jbe    c001384f <Fs::setcwd(Process*, char*)+0x6a>
c001382b:	b8 03 00 00 00       	mov    eax,0x3
c0013830:	e9 e0 00 00 00       	jmp    c0013915 <Fs::setcwd(Process*, char*)+0x130>
c0013835:	83 ec 0c             	sub    esp,0xc
c0013838:	56                   	push   esi
c0013839:	e8 56 cf fe ff       	call   c0000794 <strlen>
c001383e:	83 c4 10             	add    esp,0x10
c0013841:	83 f8 03             	cmp    eax,0x3
c0013844:	75 34                	jne    c001387a <Fs::setcwd(Process*, char*)+0x95>
c0013846:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001384b:	75 2d                	jne    c001387a <Fs::setcwd(Process*, char*)+0x95>
c001384d:	eb cf                	jmp    c001381e <Fs::setcwd(Process*, char*)+0x39>
c001384f:	8b 14 85 c0 eb 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1440]
c0013856:	b8 05 00 00 00       	mov    eax,0x5
c001385b:	85 d2                	test   edx,edx
c001385d:	0f 84 b2 00 00 00    	je     c0013915 <Fs::setcwd(Process*, char*)+0x130>
c0013863:	b8 06 00 00 00       	mov    eax,0x6
c0013868:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001386f:	0f 85 92 00 00 00    	jne    c0013907 <Fs::setcwd(Process*, char*)+0x122>
c0013875:	e9 9b 00 00 00       	jmp    c0013915 <Fs::setcwd(Process*, char*)+0x130>
c001387a:	83 ec 0c             	sub    esp,0xc
c001387d:	68 14 01 00 00       	push   0x114
c0013882:	e8 b9 bf ff ff       	call   c000f840 <malloc>
c0013887:	83 c4 0c             	add    esp,0xc
c001388a:	89 c3                	mov    ebx,eax
c001388c:	55                   	push   ebp
c001388d:	56                   	push   esi
c001388e:	50                   	push   eax
c001388f:	e8 e0 fb ff ff       	call   c0013474 <File::File(char const*, Process*)>
c0013894:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013899:	83 c4 0c             	add    esp,0xc
c001389c:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00138a0:	50                   	push   eax
c00138a1:	8d 44 24 10          	lea    eax,[esp+0x10]
c00138a5:	50                   	push   eax
c00138a6:	53                   	push   ebx
c00138a7:	e8 d8 fe ff ff       	call   c0013784 <File::stat(unsigned long long*, bool*)>
c00138ac:	83 c4 10             	add    esp,0x10
c00138af:	83 f8 02             	cmp    eax,0x2
c00138b2:	74 04                	je     c00138b8 <Fs::setcwd(Process*, char*)+0xd3>
c00138b4:	85 c0                	test   eax,eax
c00138b6:	74 1c                	je     c00138d4 <Fs::setcwd(Process*, char*)+0xef>
c00138b8:	b8 01 00 00 00       	mov    eax,0x1
c00138bd:	85 db                	test   ebx,ebx
c00138bf:	74 54                	je     c0013915 <Fs::setcwd(Process*, char*)+0x130>
c00138c1:	83 ec 0c             	sub    esp,0xc
c00138c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138c6:	53                   	push   ebx
c00138c7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138ca:	83 c4 10             	add    esp,0x10
c00138cd:	b8 01 00 00 00       	mov    eax,0x1
c00138d2:	eb 41                	jmp    c0013915 <Fs::setcwd(Process*, char*)+0x130>
c00138d4:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00138d9:	75 1c                	jne    c00138f7 <Fs::setcwd(Process*, char*)+0x112>
c00138db:	b8 02 00 00 00       	mov    eax,0x2
c00138e0:	85 db                	test   ebx,ebx
c00138e2:	74 31                	je     c0013915 <Fs::setcwd(Process*, char*)+0x130>
c00138e4:	83 ec 0c             	sub    esp,0xc
c00138e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138e9:	53                   	push   ebx
c00138ea:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138ed:	83 c4 10             	add    esp,0x10
c00138f0:	b8 02 00 00 00       	mov    eax,0x2
c00138f5:	eb 1e                	jmp    c0013915 <Fs::setcwd(Process*, char*)+0x130>
c00138f7:	85 db                	test   ebx,ebx
c00138f9:	74 0c                	je     c0013907 <Fs::setcwd(Process*, char*)+0x122>
c00138fb:	83 ec 0c             	sub    esp,0xc
c00138fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013900:	53                   	push   ebx
c0013901:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013904:	83 c4 10             	add    esp,0x10
c0013907:	50                   	push   eax
c0013908:	50                   	push   eax
c0013909:	56                   	push   esi
c001390a:	57                   	push   edi
c001390b:	e8 24 cf fe ff       	call   c0000834 <strcpy>
c0013910:	83 c4 10             	add    esp,0x10
c0013913:	31 c0                	xor    eax,eax
c0013915:	81 c4 1c 02 00 00    	add    esp,0x21c
c001391b:	5b                   	pop    ebx
c001391c:	5e                   	pop    esi
c001391d:	5f                   	pop    edi
c001391e:	5d                   	pop    ebp
c001391f:	c3                   	ret    

c0013920 <Directory::Directory(char const*, Process*)>:
c0013920:	83 ec 0c             	sub    esp,0xc
c0013923:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013927:	83 ec 08             	sub    esp,0x8
c001392a:	6a 00                	push   0x0
c001392c:	50                   	push   eax
c001392d:	e8 16 de ff ff       	call   c0011748 <UnixFile::UnixFile(int)>
c0013932:	83 c4 10             	add    esp,0x10
c0013935:	ba 64 ac 02 c0       	mov    edx,0xc002ac64
c001393a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001393e:	89 10                	mov    DWORD PTR [eax],edx
c0013940:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013944:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001394a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001394e:	83 c0 0d             	add    eax,0xd
c0013951:	83 ec 04             	sub    esp,0x4
c0013954:	52                   	push   edx
c0013955:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013959:	50                   	push   eax
c001395a:	e8 6b f9 ff ff       	call   c00132ca <Fs::standardiseFiles(char*, char const*, char const*)>
c001395f:	83 c4 10             	add    esp,0x10
c0013962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013966:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013969:	8d 50 bf             	lea    edx,[eax-0x41]
c001396c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013970:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001397a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001397e:	90                   	nop
c001397f:	83 c4 0c             	add    esp,0xc
c0013982:	c3                   	ret    
c0013983:	90                   	nop

c0013984 <Directory::open()>:
c0013984:	53                   	push   ebx
c0013985:	b8 0b 00 00 00       	mov    eax,0xb
c001398a:	83 ec 08             	sub    esp,0x8
c001398d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013991:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013998:	80 fa 19             	cmp    dl,0x19
c001399b:	77 3d                	ja     c00139da <Directory::open()+0x56>
c001399d:	8b 14 95 c0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1440]
c00139a4:	85 d2                	test   edx,edx
c00139a6:	74 32                	je     c00139da <Directory::open()+0x56>
c00139a8:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00139ae:	85 d2                	test   edx,edx
c00139b0:	74 28                	je     c00139da <Directory::open()+0x56>
c00139b2:	b8 06 00 00 00       	mov    eax,0x6
c00139b7:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00139bb:	75 1d                	jne    c00139da <Directory::open()+0x56>
c00139bd:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00139c3:	50                   	push   eax
c00139c4:	8b 02                	mov    eax,DWORD PTR [edx]
c00139c6:	51                   	push   ecx
c00139c7:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00139ca:	51                   	push   ecx
c00139cb:	52                   	push   edx
c00139cc:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00139cf:	83 c4 10             	add    esp,0x10
c00139d2:	85 c0                	test   eax,eax
c00139d4:	75 04                	jne    c00139da <Directory::open()+0x56>
c00139d6:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00139da:	83 c4 08             	add    esp,0x8
c00139dd:	5b                   	pop    ebx
c00139de:	c3                   	ret    
c00139df:	90                   	nop

c00139e0 <Directory::close()>:
c00139e0:	53                   	push   ebx
c00139e1:	b8 0b 00 00 00       	mov    eax,0xb
c00139e6:	83 ec 08             	sub    esp,0x8
c00139e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00139ed:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00139f4:	80 fa 19             	cmp    dl,0x19
c00139f7:	77 41                	ja     c0013a3a <Directory::close()+0x5a>
c00139f9:	8b 1c 95 c0 eb 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1440]
c0013a00:	85 db                	test   ebx,ebx
c0013a02:	74 36                	je     c0013a3a <Directory::close()+0x5a>
c0013a04:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013a0b:	74 2d                	je     c0013a3a <Directory::close()+0x5a>
c0013a0d:	b8 05 00 00 00       	mov    eax,0x5
c0013a12:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013a16:	74 22                	je     c0013a3a <Directory::close()+0x5a>
c0013a18:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013a1c:	8b 04 95 c0 eb 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1440]
c0013a23:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013a29:	53                   	push   ebx
c0013a2a:	53                   	push   ebx
c0013a2b:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a2d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013a33:	50                   	push   eax
c0013a34:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013a37:	83 c4 10             	add    esp,0x10
c0013a3a:	83 c4 08             	add    esp,0x8
c0013a3d:	5b                   	pop    ebx
c0013a3e:	c3                   	ret    
c0013a3f:	90                   	nop

c0013a40 <Directory::unlink()>:
c0013a40:	83 ec 0c             	sub    esp,0xc
c0013a43:	b8 0b 00 00 00       	mov    eax,0xb
c0013a48:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a4c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a53:	80 f9 19             	cmp    cl,0x19
c0013a56:	77 2f                	ja     c0013a87 <Directory::unlink()+0x47>
c0013a58:	8b 0c 8d c0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1440]
c0013a5f:	85 c9                	test   ecx,ecx
c0013a61:	74 24                	je     c0013a87 <Directory::unlink()+0x47>
c0013a63:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a69:	85 c9                	test   ecx,ecx
c0013a6b:	74 1a                	je     c0013a87 <Directory::unlink()+0x47>
c0013a6d:	b8 06 00 00 00       	mov    eax,0x6
c0013a72:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a76:	75 0f                	jne    c0013a87 <Directory::unlink()+0x47>
c0013a78:	83 c2 0d             	add    edx,0xd
c0013a7b:	50                   	push   eax
c0013a7c:	50                   	push   eax
c0013a7d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a7f:	52                   	push   edx
c0013a80:	51                   	push   ecx
c0013a81:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013a84:	83 c4 10             	add    esp,0x10
c0013a87:	83 c4 0c             	add    esp,0xc
c0013a8a:	c3                   	ret    
c0013a8b:	90                   	nop

c0013a8c <Directory::rename(char const*)>:
c0013a8c:	83 ec 0c             	sub    esp,0xc
c0013a8f:	b8 0b 00 00 00       	mov    eax,0xb
c0013a94:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a98:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a9f:	80 f9 19             	cmp    cl,0x19
c0013aa2:	77 32                	ja     c0013ad6 <Directory::rename(char const*)+0x4a>
c0013aa4:	8b 0c 8d c0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1440]
c0013aab:	85 c9                	test   ecx,ecx
c0013aad:	74 27                	je     c0013ad6 <Directory::rename(char const*)+0x4a>
c0013aaf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013ab5:	85 c9                	test   ecx,ecx
c0013ab7:	74 1d                	je     c0013ad6 <Directory::rename(char const*)+0x4a>
c0013ab9:	b8 06 00 00 00       	mov    eax,0x6
c0013abe:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013ac2:	75 12                	jne    c0013ad6 <Directory::rename(char const*)+0x4a>
c0013ac4:	83 c2 0d             	add    edx,0xd
c0013ac7:	50                   	push   eax
c0013ac8:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013aca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ace:	52                   	push   edx
c0013acf:	51                   	push   ecx
c0013ad0:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013ad3:	83 c4 10             	add    esp,0x10
c0013ad6:	83 c4 0c             	add    esp,0xc
c0013ad9:	c3                   	ret    

c0013ada <Directory::exists()>:
c0013ada:	83 ec 0c             	sub    esp,0xc
c0013add:	31 c0                	xor    eax,eax
c0013adf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013ae3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013aea:	80 f9 19             	cmp    cl,0x19
c0013aed:	77 24                	ja     c0013b13 <Directory::exists()+0x39>
c0013aef:	8b 0c 8d c0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1440]
c0013af6:	85 c9                	test   ecx,ecx
c0013af8:	74 19                	je     c0013b13 <Directory::exists()+0x39>
c0013afa:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b00:	85 c9                	test   ecx,ecx
c0013b02:	74 0f                	je     c0013b13 <Directory::exists()+0x39>
c0013b04:	83 c2 0d             	add    edx,0xd
c0013b07:	50                   	push   eax
c0013b08:	50                   	push   eax
c0013b09:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b0b:	52                   	push   edx
c0013b0c:	51                   	push   ecx
c0013b0d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013b10:	83 c4 10             	add    esp,0x10
c0013b13:	83 c4 0c             	add    esp,0xc
c0013b16:	c3                   	ret    
c0013b17:	90                   	nop

c0013b18 <Directory::read(dirent*)>:
c0013b18:	83 ec 1c             	sub    esp,0x1c
c0013b1b:	b8 0b 00 00 00       	mov    eax,0xb
c0013b20:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013b24:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013b2b:	80 fa 19             	cmp    dl,0x19
c0013b2e:	77 30                	ja     c0013b60 <Directory::read(dirent*)+0x48>
c0013b30:	8b 14 95 c0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1440]
c0013b37:	85 d2                	test   edx,edx
c0013b39:	74 25                	je     c0013b60 <Directory::read(dirent*)+0x48>
c0013b3b:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013b42:	74 1c                	je     c0013b60 <Directory::read(dirent*)+0x48>
c0013b44:	83 ec 0c             	sub    esp,0xc
c0013b47:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b49:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013b4d:	52                   	push   edx
c0013b4e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013b52:	6a 00                	push   0x0
c0013b54:	68 10 01 00 00       	push   0x110
c0013b59:	51                   	push   ecx
c0013b5a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b5d:	83 c4 20             	add    esp,0x20
c0013b60:	83 c4 1c             	add    esp,0x1c
c0013b63:	c3                   	ret    

c0013b64 <Directory::create()>:
c0013b64:	83 ec 0c             	sub    esp,0xc
c0013b67:	b8 0b 00 00 00       	mov    eax,0xb
c0013b6c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b70:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b77:	80 f9 19             	cmp    cl,0x19
c0013b7a:	77 2f                	ja     c0013bab <Directory::create()+0x47>
c0013b7c:	8b 0c 8d c0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1440]
c0013b83:	85 c9                	test   ecx,ecx
c0013b85:	74 24                	je     c0013bab <Directory::create()+0x47>
c0013b87:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b8d:	85 c9                	test   ecx,ecx
c0013b8f:	74 1a                	je     c0013bab <Directory::create()+0x47>
c0013b91:	b8 06 00 00 00       	mov    eax,0x6
c0013b96:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b9a:	75 0f                	jne    c0013bab <Directory::create()+0x47>
c0013b9c:	83 c2 0d             	add    edx,0xd
c0013b9f:	50                   	push   eax
c0013ba0:	50                   	push   eax
c0013ba1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ba3:	52                   	push   edx
c0013ba4:	51                   	push   ecx
c0013ba5:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013ba8:	83 c4 10             	add    esp,0x10
c0013bab:	83 c4 0c             	add    esp,0xc
c0013bae:	c3                   	ret    
c0013baf:	90                   	nop

c0013bb0 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013bb0:	b8 0a 00 00 00       	mov    eax,0xa
c0013bb5:	c3                   	ret    

c0013bb6 <Bus::Bus(char const*)>:
c0013bb6:	83 ec 0c             	sub    esp,0xc
c0013bb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bbd:	83 ec 08             	sub    esp,0x8
c0013bc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bc4:	50                   	push   eax
c0013bc5:	e8 68 09 00 00       	call   c0014532 <Device::Device(char const*)>
c0013bca:	83 c4 10             	add    esp,0x10
c0013bcd:	ba 80 ac 02 c0       	mov    edx,0xc002ac80
c0013bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bd6:	89 10                	mov    DWORD PTR [eax],edx
c0013bd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bdc:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013be6:	90                   	nop
c0013be7:	83 c4 0c             	add    esp,0xc
c0013bea:	c3                   	ret    
c0013beb:	90                   	nop

c0013bec <Bus::~Bus()>:
c0013bec:	83 ec 0c             	sub    esp,0xc
c0013bef:	ba 80 ac 02 c0       	mov    edx,0xc002ac80
c0013bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bf8:	89 10                	mov    DWORD PTR [eax],edx
c0013bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bfe:	83 ec 0c             	sub    esp,0xc
c0013c01:	50                   	push   eax
c0013c02:	e8 0d 06 00 00       	call   c0014214 <Device::~Device()>
c0013c07:	83 c4 10             	add    esp,0x10
c0013c0a:	90                   	nop
c0013c0b:	83 c4 0c             	add    esp,0xc
c0013c0e:	c3                   	ret    
c0013c0f:	90                   	nop

c0013c10 <Bus::~Bus()>:
c0013c10:	83 ec 0c             	sub    esp,0xc
c0013c13:	83 ec 0c             	sub    esp,0xc
c0013c16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c1a:	e8 cd ff ff ff       	call   c0013bec <Bus::~Bus()>
c0013c1f:	83 c4 10             	add    esp,0x10
c0013c22:	83 ec 08             	sub    esp,0x8
c0013c25:	68 58 01 00 00       	push   0x158
c0013c2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c2e:	e8 09 f2 ff ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c0013c33:	83 c4 10             	add    esp,0x10
c0013c36:	83 c4 0c             	add    esp,0xc
c0013c39:	c3                   	ret    

c0013c3a <Buzzer::Buzzer(char const*)>:
c0013c3a:	83 ec 0c             	sub    esp,0xc
c0013c3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c41:	83 ec 08             	sub    esp,0x8
c0013c44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c48:	50                   	push   eax
c0013c49:	e8 e4 08 00 00       	call   c0014532 <Device::Device(char const*)>
c0013c4e:	83 c4 10             	add    esp,0x10
c0013c51:	ba ac ac 02 c0       	mov    edx,0xc002acac
c0013c56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c5a:	89 10                	mov    DWORD PTR [eax],edx
c0013c5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c60:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c6e:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013c78:	90                   	nop
c0013c79:	83 c4 0c             	add    esp,0xc
c0013c7c:	c3                   	ret    
c0013c7d:	90                   	nop

c0013c7e <Buzzer::~Buzzer()>:
c0013c7e:	83 ec 0c             	sub    esp,0xc
c0013c81:	ba ac ac 02 c0       	mov    edx,0xc002acac
c0013c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c8a:	89 10                	mov    DWORD PTR [eax],edx
c0013c8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c90:	83 ec 0c             	sub    esp,0xc
c0013c93:	50                   	push   eax
c0013c94:	e8 7b 05 00 00       	call   c0014214 <Device::~Device()>
c0013c99:	83 c4 10             	add    esp,0x10
c0013c9c:	90                   	nop
c0013c9d:	83 c4 0c             	add    esp,0xc
c0013ca0:	c3                   	ret    
c0013ca1:	90                   	nop

c0013ca2 <Buzzer::~Buzzer()>:
c0013ca2:	83 ec 0c             	sub    esp,0xc
c0013ca5:	83 ec 0c             	sub    esp,0xc
c0013ca8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cac:	e8 cd ff ff ff       	call   c0013c7e <Buzzer::~Buzzer()>
c0013cb1:	83 c4 10             	add    esp,0x10
c0013cb4:	83 ec 08             	sub    esp,0x8
c0013cb7:	68 5c 01 00 00       	push   0x15c
c0013cbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cc0:	e8 77 f1 ff ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c0013cc5:	83 c4 10             	add    esp,0x10
c0013cc8:	83 c4 0c             	add    esp,0xc
c0013ccb:	c3                   	ret    

c0013ccc <Buzzer::stop()>:
c0013ccc:	83 ec 14             	sub    esp,0x14
c0013ccf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cd3:	8b 10                	mov    edx,DWORD PTR [eax]
c0013cd5:	6a 00                	push   0x0
c0013cd7:	50                   	push   eax
c0013cd8:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013cdb:	83 c4 1c             	add    esp,0x1c
c0013cde:	c3                   	ret    

c0013cdf <beepThread(void*)>:
c0013cdf:	53                   	push   ebx
c0013ce0:	83 ec 08             	sub    esp,0x8
c0013ce3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ce7:	e8 f8 a0 00 00       	call   c001dde4 <unlockScheduler()>
c0013cec:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013cf1:	52                   	push   edx
c0013cf2:	52                   	push   edx
c0013cf3:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013cf9:	52                   	push   edx
c0013cfa:	50                   	push   eax
c0013cfb:	e8 32 a6 00 00       	call   c001e332 <nanoSleep(unsigned long long)>
c0013d00:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d03:	e8 c4 ff ff ff       	call   c0013ccc <Buzzer::stop()>
c0013d08:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013d10:	83 c4 18             	add    esp,0x18
c0013d13:	5b                   	pop    ebx
c0013d14:	e9 5f a5 00 00       	jmp    c001e278 <blockTask(TaskState)>
c0013d19:	90                   	nop

c0013d1a <Buzzer::beep(int, int, bool)>:
c0013d1a:	57                   	push   edi
c0013d1b:	56                   	push   esi
c0013d1c:	53                   	push   ebx
c0013d1d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013d25:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d29:	52                   	push   edx
c0013d2a:	52                   	push   edx
c0013d2b:	8b 06                	mov    eax,DWORD PTR [esi]
c0013d2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d31:	56                   	push   esi
c0013d32:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013d35:	83 c4 10             	add    esp,0x10
c0013d38:	89 f8                	mov    eax,edi
c0013d3a:	84 c0                	test   al,al
c0013d3c:	74 1f                	je     c0013d5d <Buzzer::beep(int, int, bool)+0x43>
c0013d3e:	50                   	push   eax
c0013d3f:	50                   	push   eax
c0013d40:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013d46:	99                   	cdq    
c0013d47:	52                   	push   edx
c0013d48:	50                   	push   eax
c0013d49:	e8 e4 a5 00 00       	call   c001e332 <nanoSleep(unsigned long long)>
c0013d4e:	83 c4 10             	add    esp,0x10
c0013d51:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013d55:	5b                   	pop    ebx
c0013d56:	5e                   	pop    esi
c0013d57:	5f                   	pop    edi
c0013d58:	e9 6f ff ff ff       	jmp    c0013ccc <Buzzer::stop()>
c0013d5d:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013d63:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0013d68:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013d70:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013d74:	c7 44 24 14 df 3c 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013cdf
c0013d7c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013d80:	5b                   	pop    ebx
c0013d81:	5e                   	pop    esi
c0013d82:	5f                   	pop    edi
c0013d83:	e9 8c a1 00 00       	jmp    c001df14 <Process::createThread(void (*)(void*), void*, int)>

c0013d88 <User::loadClockSettings(int)>:
c0013d88:	53                   	push   ebx
c0013d89:	83 ec 14             	sub    esp,0x14
c0013d8c:	68 14 01 00 00       	push   0x114
c0013d91:	e8 aa ba ff ff       	call   c000f840 <malloc>
c0013d96:	83 c4 0c             	add    esp,0xc
c0013d99:	89 c3                	mov    ebx,eax
c0013d9b:	ff 35 14 1b 03 c0    	push   DWORD PTR ds:0xc0031b14
c0013da1:	68 d4 ac 02 c0       	push   0xc002acd4
c0013da6:	50                   	push   eax
c0013da7:	e8 c8 f6 ff ff       	call   c0013474 <File::File(char const*, Process*)>
c0013dac:	58                   	pop    eax
c0013dad:	5a                   	pop    edx
c0013dae:	6a 01                	push   0x1
c0013db0:	53                   	push   ebx
c0013db1:	e8 22 f7 ff ff       	call   c00134d8 <File::open(FileOpenMode)>
c0013db6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013db9:	e8 78 f7 ff ff       	call   c0013536 <File::close()>
c0013dbe:	83 c4 10             	add    esp,0x10
c0013dc1:	85 db                	test   ebx,ebx
c0013dc3:	74 0f                	je     c0013dd4 <User::loadClockSettings(int)+0x4c>
c0013dc5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013dc7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013dcb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013dce:	83 c4 08             	add    esp,0x8
c0013dd1:	5b                   	pop    ebx
c0013dd2:	ff e0                	jmp    eax
c0013dd4:	83 c4 08             	add    esp,0x8
c0013dd7:	5b                   	pop    ebx
c0013dd8:	c3                   	ret    
c0013dd9:	90                   	nop

c0013dda <Clock::Clock(char const*)>:
c0013dda:	83 ec 0c             	sub    esp,0xc
c0013ddd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013de1:	83 ec 08             	sub    esp,0x8
c0013de4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013de8:	50                   	push   eax
c0013de9:	e8 44 07 00 00       	call   c0014532 <Device::Device(char const*)>
c0013dee:	83 c4 10             	add    esp,0x10
c0013df1:	ba fc ac 02 c0       	mov    edx,0xc002acfc
c0013df6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dfa:	89 10                	mov    DWORD PTR [eax],edx
c0013dfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e00:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013e0a:	90                   	nop
c0013e0b:	83 c4 0c             	add    esp,0xc
c0013e0e:	c3                   	ret    
c0013e0f:	90                   	nop

c0013e10 <Clock::~Clock()>:
c0013e10:	83 ec 0c             	sub    esp,0xc
c0013e13:	ba fc ac 02 c0       	mov    edx,0xc002acfc
c0013e18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e1c:	89 10                	mov    DWORD PTR [eax],edx
c0013e1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e22:	83 ec 0c             	sub    esp,0xc
c0013e25:	50                   	push   eax
c0013e26:	e8 e9 03 00 00       	call   c0014214 <Device::~Device()>
c0013e2b:	83 c4 10             	add    esp,0x10
c0013e2e:	90                   	nop
c0013e2f:	83 c4 0c             	add    esp,0xc
c0013e32:	c3                   	ret    
c0013e33:	90                   	nop

c0013e34 <Clock::~Clock()>:
c0013e34:	83 ec 0c             	sub    esp,0xc
c0013e37:	83 ec 0c             	sub    esp,0xc
c0013e3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e3e:	e8 cd ff ff ff       	call   c0013e10 <Clock::~Clock()>
c0013e43:	83 c4 10             	add    esp,0x10
c0013e46:	83 ec 08             	sub    esp,0x8
c0013e49:	68 58 01 00 00       	push   0x158
c0013e4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e52:	e8 e5 ef ff ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c0013e57:	83 c4 10             	add    esp,0x10
c0013e5a:	83 c4 0c             	add    esp,0xc
c0013e5d:	c3                   	ret    

c0013e5e <Clock::timeInSecondsLocal()>:
c0013e5e:	53                   	push   ebx
c0013e5f:	83 ec 14             	sub    esp,0x14
c0013e62:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e66:	8b 10                	mov    edx,DWORD PTR [eax]
c0013e68:	50                   	push   eax
c0013e69:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013e6c:	0f b6 0d 34 e7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e734
c0013e73:	03 0d 38 e7 02 c0    	add    ecx,DWORD PTR ds:0xc002e738
c0013e79:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013e7f:	89 cb                	mov    ebx,ecx
c0013e81:	c1 fb 1f             	sar    ebx,0x1f
c0013e84:	01 c8                	add    eax,ecx
c0013e86:	11 da                	adc    edx,ebx
c0013e88:	83 c4 10             	add    esp,0x10
c0013e8b:	31 c9                	xor    ecx,ecx
c0013e8d:	80 3d 35 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e735,0x0
c0013e94:	74 05                	je     c0013e9b <Clock::timeInSecondsLocal()+0x3d>
c0013e96:	b9 08 07 00 00       	mov    ecx,0x708
c0013e9b:	31 db                	xor    ebx,ebx
c0013e9d:	01 c8                	add    eax,ecx
c0013e9f:	11 da                	adc    edx,ebx
c0013ea1:	83 c4 08             	add    esp,0x8
c0013ea4:	5b                   	pop    ebx
c0013ea5:	c3                   	ret    

c0013ea6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013ea6:	57                   	push   edi
c0013ea7:	56                   	push   esi
c0013ea8:	53                   	push   ebx
c0013ea9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013ead:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013eb1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013eb3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013eb7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013eba:	0f b6 05 34 e7 02 c0 	movzx  eax,BYTE PTR ds:0xc002e734
c0013ec1:	03 05 38 e7 02 c0    	add    eax,DWORD PTR ds:0xc002e738
c0013ec7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013ecd:	99                   	cdq    
c0013ece:	29 c6                	sub    esi,eax
c0013ed0:	19 d7                	sbb    edi,edx
c0013ed2:	89 f0                	mov    eax,esi
c0013ed4:	89 fa                	mov    edx,edi
c0013ed6:	31 f6                	xor    esi,esi
c0013ed8:	80 3d 35 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e735,0x0
c0013edf:	74 05                	je     c0013ee6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013ee1:	be 08 07 00 00       	mov    esi,0x708
c0013ee6:	31 ff                	xor    edi,edi
c0013ee8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013eec:	29 f0                	sub    eax,esi
c0013eee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ef2:	19 fa                	sbb    edx,edi
c0013ef4:	89 d8                	mov    eax,ebx
c0013ef6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013efa:	5b                   	pop    ebx
c0013efb:	5e                   	pop    esi
c0013efc:	5f                   	pop    edi
c0013efd:	ff e0                	jmp    eax

c0013eff <datetimeToSeconds(datetime_t)>:
c0013eff:	55                   	push   ebp
c0013f00:	57                   	push   edi
c0013f01:	56                   	push   esi
c0013f02:	53                   	push   ebx
c0013f03:	83 ec 14             	sub    esp,0x14
c0013f06:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013f0a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013f0e:	89 d3                	mov    ebx,edx
c0013f10:	0f b6 c6             	movzx  eax,dh
c0013f13:	c1 eb 10             	shr    ebx,0x10
c0013f16:	48                   	dec    eax
c0013f17:	66 81 eb 6c 07       	sub    bx,0x76c
c0013f1c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013f20:	0f b6 f5             	movzx  esi,ch
c0013f23:	89 cf                	mov    edi,ecx
c0013f25:	6b f6 3c             	imul   esi,esi,0x3c
c0013f28:	c1 ef 10             	shr    edi,0x10
c0013f2b:	0f b6 c9             	movzx  ecx,cl
c0013f2e:	89 f8                	mov    eax,edi
c0013f30:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f36:	0f b6 f8             	movzx  edi,al
c0013f39:	0f b6 d2             	movzx  edx,dl
c0013f3c:	01 fe                	add    esi,edi
c0013f3e:	01 f1                	add    ecx,esi
c0013f40:	0f b7 f3             	movzx  esi,bx
c0013f43:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013f47:	c1 f9 1f             	sar    ecx,0x1f
c0013f4a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013f4f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f53:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013f58:	8b 0c 8d 40 ad 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd52c0]
c0013f5f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013f63:	76 29                	jbe    c0013f8e <datetimeToSeconds(datetime_t)+0x8f>
c0013f65:	f6 c3 03             	test   bl,0x3
c0013f68:	75 24                	jne    c0013f8e <datetimeToSeconds(datetime_t)+0x8f>
c0013f6a:	31 d2                	xor    edx,edx
c0013f6c:	bf 64 00 00 00       	mov    edi,0x64
c0013f71:	89 d8                	mov    eax,ebx
c0013f73:	66 f7 f7             	div    di
c0013f76:	66 85 d2             	test   dx,dx
c0013f79:	75 12                	jne    c0013f8d <datetimeToSeconds(datetime_t)+0x8e>
c0013f7b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013f81:	bf 90 01 00 00       	mov    edi,0x190
c0013f86:	99                   	cdq    
c0013f87:	f7 ff                	idiv   edi
c0013f89:	85 d2                	test   edx,edx
c0013f8b:	75 01                	jne    c0013f8e <datetimeToSeconds(datetime_t)+0x8f>
c0013f8d:	41                   	inc    ecx
c0013f8e:	66 83 fb 46          	cmp    bx,0x46
c0013f92:	76 45                	jbe    c0013fd9 <datetimeToSeconds(datetime_t)+0xda>
c0013f94:	bb 46 00 00 00       	mov    ebx,0x46
c0013f99:	bf 64 00 00 00       	mov    edi,0x64
c0013f9e:	bd 90 01 00 00       	mov    ebp,0x190
c0013fa3:	b8 6d 01 00 00       	mov    eax,0x16d
c0013fa8:	f6 c3 03             	test   bl,0x3
c0013fab:	75 23                	jne    c0013fd0 <datetimeToSeconds(datetime_t)+0xd1>
c0013fad:	89 d8                	mov    eax,ebx
c0013faf:	99                   	cdq    
c0013fb0:	f7 ff                	idiv   edi
c0013fb2:	b8 6e 01 00 00       	mov    eax,0x16e
c0013fb7:	85 d2                	test   edx,edx
c0013fb9:	75 15                	jne    c0013fd0 <datetimeToSeconds(datetime_t)+0xd1>
c0013fbb:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013fc1:	99                   	cdq    
c0013fc2:	f7 fd                	idiv   ebp
c0013fc4:	83 fa 01             	cmp    edx,0x1
c0013fc7:	19 c0                	sbb    eax,eax
c0013fc9:	f7 d0                	not    eax
c0013fcb:	05 6e 01 00 00       	add    eax,0x16e
c0013fd0:	01 c1                	add    ecx,eax
c0013fd2:	43                   	inc    ebx
c0013fd3:	39 f3                	cmp    ebx,esi
c0013fd5:	7c cc                	jl     c0013fa3 <datetimeToSeconds(datetime_t)+0xa4>
c0013fd7:	eb 35                	jmp    c001400e <datetimeToSeconds(datetime_t)+0x10f>
c0013fd9:	74 33                	je     c001400e <datetimeToSeconds(datetime_t)+0x10f>
c0013fdb:	b8 45 00 00 00       	mov    eax,0x45
c0013fe0:	89 c2                	mov    edx,eax
c0013fe2:	83 e2 03             	and    edx,0x3
c0013fe5:	39 f0                	cmp    eax,esi
c0013fe7:	7e 0f                	jle    c0013ff8 <datetimeToSeconds(datetime_t)+0xf9>
c0013fe9:	83 fa 01             	cmp    edx,0x1
c0013fec:	19 d2                	sbb    edx,edx
c0013fee:	48                   	dec    eax
c0013fef:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013ff6:	eb e8                	jmp    c0013fe0 <datetimeToSeconds(datetime_t)+0xe1>
c0013ff8:	b8 6d 01 00 00       	mov    eax,0x16d
c0013ffd:	85 d2                	test   edx,edx
c0013fff:	75 0b                	jne    c001400c <datetimeToSeconds(datetime_t)+0x10d>
c0014001:	66 83 fb 01          	cmp    bx,0x1
c0014005:	19 c0                	sbb    eax,eax
c0014007:	05 6e 01 00 00       	add    eax,0x16e
c001400c:	29 c1                	sub    ecx,eax
c001400e:	b8 80 51 01 00       	mov    eax,0x15180
c0014013:	f7 e9                	imul   ecx
c0014015:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0014019:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001401d:	83 c4 14             	add    esp,0x14
c0014020:	5b                   	pop    ebx
c0014021:	5e                   	pop    esi
c0014022:	5f                   	pop    edi
c0014023:	5d                   	pop    ebp
c0014024:	c3                   	ret    
c0014025:	90                   	nop

c0014026 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0014026:	57                   	push   edi
c0014027:	56                   	push   esi
c0014028:	53                   	push   ebx
c0014029:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001402d:	8b 06                	mov    eax,DWORD PTR [esi]
c001402f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0014032:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014036:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001403a:	e8 c0 fe ff ff       	call   c0013eff <datetimeToSeconds(datetime_t)>
c001403f:	59                   	pop    ecx
c0014040:	0f b6 0d 34 e7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e734
c0014047:	5b                   	pop    ebx
c0014048:	03 0d 38 e7 02 c0    	add    ecx,DWORD PTR ds:0xc002e738
c001404e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0014054:	89 cb                	mov    ebx,ecx
c0014056:	c1 fb 1f             	sar    ebx,0x1f
c0014059:	29 c8                	sub    eax,ecx
c001405b:	19 da                	sbb    edx,ebx
c001405d:	31 c9                	xor    ecx,ecx
c001405f:	80 3d 35 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e735,0x0
c0014066:	74 05                	je     c001406d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0014068:	b9 08 07 00 00       	mov    ecx,0x708
c001406d:	31 db                	xor    ebx,ebx
c001406f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0014073:	29 c8                	sub    eax,ecx
c0014075:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014079:	19 da                	sbb    edx,ebx
c001407b:	89 f8                	mov    eax,edi
c001407d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014081:	5b                   	pop    ebx
c0014082:	5e                   	pop    esi
c0014083:	5f                   	pop    edi
c0014084:	ff e0                	jmp    eax

c0014086 <secondsToDatetime(unsigned long long)>:
c0014086:	55                   	push   ebp
c0014087:	57                   	push   edi
c0014088:	56                   	push   esi
c0014089:	53                   	push   ebx
c001408a:	83 ec 1c             	sub    esp,0x1c
c001408d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0014091:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0014095:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0014099:	6a 00                	push   0x0
c001409b:	68 80 51 01 00       	push   0x15180
c00140a0:	55                   	push   ebp
c00140a1:	57                   	push   edi
c00140a2:	e8 15 29 01 00       	call   c00269bc <__udivdi3>
c00140a7:	83 c4 10             	add    esp,0x10
c00140aa:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00140b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00140b4:	6a 00                	push   0x0
c00140b6:	68 80 51 01 00       	push   0x15180
c00140bb:	55                   	push   ebp
c00140bc:	57                   	push   edi
c00140bd:	bf 10 0e 00 00       	mov    edi,0xe10
c00140c2:	e8 f5 29 01 00       	call   c0026abc <__umoddi3>
c00140c7:	83 c4 10             	add    esp,0x10
c00140ca:	99                   	cdq    
c00140cb:	f7 ff                	idiv   edi
c00140cd:	bf 3c 00 00 00       	mov    edi,0x3c
c00140d2:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00140d5:	89 d0                	mov    eax,edx
c00140d7:	99                   	cdq    
c00140d8:	f7 ff                	idiv   edi
c00140da:	85 db                	test   ebx,ebx
c00140dc:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00140df:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00140e2:	79 11                	jns    c00140f5 <secondsToDatetime(unsigned long long)+0x6f>
c00140e4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00140e8:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00140ee:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00140f3:	eb 07                	jmp    c00140fc <secondsToDatetime(unsigned long long)+0x76>
c00140f5:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00140fa:	89 d8                	mov    eax,ebx
c00140fc:	bf b4 05 00 00       	mov    edi,0x5b4
c0014101:	99                   	cdq    
c0014102:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0014107:	f7 f9                	idiv   ecx
c0014109:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001410e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014112:	31 d2                	xor    edx,edx
c0014114:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001411c:	01 c3                	add    ebx,eax
c001411e:	89 d8                	mov    eax,ebx
c0014120:	f7 f1                	div    ecx
c0014122:	31 d2                	xor    edx,edx
c0014124:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0014127:	89 d8                	mov    eax,ebx
c0014129:	f7 f7                	div    edi
c001412b:	31 d2                	xor    edx,edx
c001412d:	29 c1                	sub    ecx,eax
c001412f:	89 d8                	mov    eax,ebx
c0014131:	f7 f5                	div    ebp
c0014133:	bd 6d 01 00 00       	mov    ebp,0x16d
c0014138:	29 c1                	sub    ecx,eax
c001413a:	31 d2                	xor    edx,edx
c001413c:	89 c8                	mov    eax,ecx
c001413e:	f7 f5                	div    ebp
c0014140:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0014145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014149:	31 d2                	xor    edx,edx
c001414b:	89 c8                	mov    eax,ecx
c001414d:	f7 f5                	div    ebp
c001414f:	31 d2                	xor    edx,edx
c0014151:	01 c3                	add    ebx,eax
c0014153:	89 c8                	mov    eax,ecx
c0014155:	f7 f7                	div    edi
c0014157:	bf 99 00 00 00       	mov    edi,0x99
c001415c:	29 c3                	sub    ebx,eax
c001415e:	31 d2                	xor    edx,edx
c0014160:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0014168:	29 c3                	sub    ebx,eax
c001416a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001416d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0014170:	bb 05 00 00 00       	mov    ebx,0x5
c0014175:	83 c1 02             	add    ecx,0x2
c0014178:	89 c8                	mov    eax,ecx
c001417a:	f7 f7                	div    edi
c001417c:	31 d2                	xor    edx,edx
c001417e:	89 c7                	mov    edi,eax
c0014180:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0014186:	83 c0 02             	add    eax,0x2
c0014189:	f7 f3                	div    ebx
c001418b:	89 eb                	mov    ebx,ebp
c001418d:	29 c3                	sub    ebx,eax
c001418f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0014195:	88 1e                	mov    BYTE PTR [esi],bl
c0014197:	19 c0                	sbb    eax,eax
c0014199:	31 d2                	xor    edx,edx
c001419b:	83 e0 0c             	and    eax,0xc
c001419e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00141a2:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00141aa:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00141ae:	83 f9 01             	cmp    ecx,0x1
c00141b1:	0f 96 c2             	setbe  dl
c00141b4:	41                   	inc    ecx
c00141b5:	01 d0                	add    eax,edx
c00141b7:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00141ba:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00141be:	83 c4 1c             	add    esp,0x1c
c00141c1:	89 f0                	mov    eax,esi
c00141c3:	5b                   	pop    ebx
c00141c4:	5e                   	pop    esi
c00141c5:	5f                   	pop    edi
c00141c6:	5d                   	pop    ebp
c00141c7:	c2 04 00             	ret    0x4

c00141ca <Clock::timeInDatetimeLocal()>:
c00141ca:	53                   	push   ebx
c00141cb:	83 ec 14             	sub    esp,0x14
c00141ce:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00141d2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00141d6:	e8 83 fc ff ff       	call   c0013e5e <Clock::timeInSecondsLocal()>
c00141db:	83 c4 0c             	add    esp,0xc
c00141de:	52                   	push   edx
c00141df:	50                   	push   eax
c00141e0:	53                   	push   ebx
c00141e1:	e8 a0 fe ff ff       	call   c0014086 <secondsToDatetime(unsigned long long)>
c00141e6:	89 d8                	mov    eax,ebx
c00141e8:	83 c4 14             	add    esp,0x14
c00141eb:	5b                   	pop    ebx
c00141ec:	c2 04 00             	ret    0x4
c00141ef:	90                   	nop

c00141f0 <Device::hibernate()>:
c00141f0:	c3                   	ret    
c00141f1:	90                   	nop

c00141f2 <Device::wake()>:
c00141f2:	c3                   	ret    
c00141f3:	90                   	nop

c00141f4 <Device::detect()>:
c00141f4:	c3                   	ret    
c00141f5:	90                   	nop

c00141f6 <Device::disableLegacy()>:
c00141f6:	c3                   	ret    
c00141f7:	90                   	nop

c00141f8 <Device::powerSaving(PowerSavingLevel)>:
c00141f8:	c3                   	ret    
c00141f9:	90                   	nop

c00141fa <DriverlessDevice::close(int, int, void*)>:
c00141fa:	31 c0                	xor    eax,eax
c00141fc:	c3                   	ret    
c00141fd:	90                   	nop

c00141fe <DriverlessDevice::detect()>:
c00141fe:	c3                   	ret    
c00141ff:	90                   	nop

c0014200 <DriverlessDevice::open(int, int, void*)>:
c0014200:	83 ec 18             	sub    esp,0x18
c0014203:	68 70 ad 02 c0       	push   0xc002ad70
c0014208:	e8 b0 63 00 00       	call   c001a5bd <Krnl::panic(char const*)>
c001420d:	83 c8 ff             	or     eax,0xffffffff
c0014210:	83 c4 1c             	add    esp,0x1c
c0014213:	c3                   	ret    

c0014214 <Device::~Device()>:
c0014214:	ba 98 ad 02 c0       	mov    edx,0xc002ad98
c0014219:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001421d:	89 10                	mov    DWORD PTR [eax],edx
c001421f:	90                   	nop
c0014220:	c3                   	ret    
c0014221:	90                   	nop

c0014222 <Device::~Device()>:
c0014222:	83 ec 0c             	sub    esp,0xc
c0014225:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014229:	e8 e6 ff ff ff       	call   c0014214 <Device::~Device()>
c001422e:	83 c4 04             	add    esp,0x4
c0014231:	83 ec 08             	sub    esp,0x8
c0014234:	68 58 01 00 00       	push   0x158
c0014239:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001423d:	e8 fa eb ff ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c0014242:	83 c4 10             	add    esp,0x10
c0014245:	83 c4 0c             	add    esp,0xc
c0014248:	c3                   	ret    
c0014249:	90                   	nop

c001424a <Device::findAndLoadDriver()>:
c001424a:	c3                   	ret    
c001424b:	90                   	nop

c001424c <Device::preOpenPCI(PCIDeviceInfo)>:
c001424c:	57                   	push   edi
c001424d:	b9 09 00 00 00       	mov    ecx,0x9
c0014252:	56                   	push   esi
c0014253:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014257:	8d 74 24 10          	lea    esi,[esp+0x10]
c001425b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0014265:	81 c7 18 01 00 00    	add    edi,0x118
c001426b:	fc                   	cld    
c001426c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001426e:	5e                   	pop    esi
c001426f:	5f                   	pop    edi
c0014270:	c3                   	ret    
c0014271:	90                   	nop

c0014272 <Device::preOpenACPI(void*, char*, char*)>:
c0014272:	56                   	push   esi
c0014273:	53                   	push   ebx
c0014274:	83 ec 08             	sub    esp,0x8
c0014277:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001427b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001427f:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0014289:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001428d:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0014293:	6a 1e                	push   0x1e
c0014295:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c001429b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001429f:	81 c3 3a 01 00 00    	add    ebx,0x13a
c00142a5:	50                   	push   eax
c00142a6:	e8 99 c4 fe ff       	call   c0000744 <memcpy>
c00142ab:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00142af:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00142b3:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00142bb:	83 c4 14             	add    esp,0x14
c00142be:	5b                   	pop    ebx
c00142bf:	5e                   	pop    esi
c00142c0:	e9 7f c4 fe ff       	jmp    c0000744 <memcpy>
c00142c5:	90                   	nop

c00142c6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00142c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142ca:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00142cf:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00142d6:	75 0b                	jne    c00142e3 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c00142d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00142da:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142de:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00142e1:	eb 1e                	jmp    c0014301 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c00142e3:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c00142e8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00142ee:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00142f4:	8b 08                	mov    ecx,DWORD PTR [eax]
c00142f6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00142fe:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014301:	ff e0                	jmp    eax
c0014303:	90                   	nop

c0014304 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014304:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014308:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001430d:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014314:	75 0b                	jne    c0014321 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0014316:	8b 00                	mov    eax,DWORD PTR [eax]
c0014318:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001431c:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001431f:	eb 1e                	jmp    c001433f <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0014321:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c0014326:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001432c:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014332:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014334:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014338:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001433c:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c001433f:	ff e0                	jmp    eax
c0014341:	90                   	nop

c0014342 <Device::addChild(Device*)>:
c0014342:	53                   	push   ebx
c0014343:	83 ec 08             	sub    esp,0x8
c0014346:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001434a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001434e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0014354:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001435a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001435c:	85 d2                	test   edx,edx
c001435e:	74 04                	je     c0014364 <Device::addChild(Device*)+0x22>
c0014360:	89 d3                	mov    ebx,edx
c0014362:	eb f6                	jmp    c001435a <Device::addChild(Device*)+0x18>
c0014364:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014367:	83 ec 0c             	sub    esp,0xc
c001436a:	6a 08                	push   0x8
c001436c:	e8 cf b4 ff ff       	call   c000f840 <malloc>
c0014371:	89 03                	mov    DWORD PTR [ebx],eax
c0014373:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014379:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014380:	83 c4 18             	add    esp,0x18
c0014383:	5b                   	pop    ebx
c0014384:	c3                   	ret    
c0014385:	90                   	nop

c0014386 <Device::removeAllChildren()>:
c0014386:	56                   	push   esi
c0014387:	53                   	push   ebx
c0014388:	52                   	push   edx
c0014389:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001438d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0014393:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014396:	74 17                	je     c00143af <Device::removeAllChildren()+0x29>
c0014398:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001439b:	85 c0                	test   eax,eax
c001439d:	74 0c                	je     c00143ab <Device::removeAllChildren()+0x25>
c001439f:	83 ec 0c             	sub    esp,0xc
c00143a2:	8b 10                	mov    edx,DWORD PTR [eax]
c00143a4:	50                   	push   eax
c00143a5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00143a8:	83 c4 10             	add    esp,0x10
c00143ab:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143ad:	eb e4                	jmp    c0014393 <Device::removeAllChildren()+0xd>
c00143af:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00143b5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00143bb:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00143c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00143c8:	58                   	pop    eax
c00143c9:	5b                   	pop    ebx
c00143ca:	5e                   	pop    esi
c00143cb:	c3                   	ret    

c00143cc <Device::hibernateAll()>:
c00143cc:	53                   	push   ebx
c00143cd:	83 ec 14             	sub    esp,0x14
c00143d0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143d6:	53                   	push   ebx
c00143d7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00143da:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143e0:	83 c4 10             	add    esp,0x10
c00143e3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143e6:	74 0f                	je     c00143f7 <Device::hibernateAll()+0x2b>
c00143e8:	83 ec 0c             	sub    esp,0xc
c00143eb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143ee:	e8 d9 ff ff ff       	call   c00143cc <Device::hibernateAll()>
c00143f3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143f5:	eb e9                	jmp    c00143e0 <Device::hibernateAll()+0x14>
c00143f7:	83 c4 08             	add    esp,0x8
c00143fa:	5b                   	pop    ebx
c00143fb:	c3                   	ret    

c00143fc <Device::wakeAll()>:
c00143fc:	53                   	push   ebx
c00143fd:	83 ec 14             	sub    esp,0x14
c0014400:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014404:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014406:	53                   	push   ebx
c0014407:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001440a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014410:	83 c4 10             	add    esp,0x10
c0014413:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014416:	74 0f                	je     c0014427 <Device::wakeAll()+0x2b>
c0014418:	83 ec 0c             	sub    esp,0xc
c001441b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001441e:	e8 d9 ff ff ff       	call   c00143fc <Device::wakeAll()>
c0014423:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014425:	eb e9                	jmp    c0014410 <Device::wakeAll()+0x14>
c0014427:	83 c4 08             	add    esp,0x8
c001442a:	5b                   	pop    ebx
c001442b:	c3                   	ret    

c001442c <Device::detectAll()>:
c001442c:	53                   	push   ebx
c001442d:	83 ec 14             	sub    esp,0x14
c0014430:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014434:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014436:	53                   	push   ebx
c0014437:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001443a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014440:	83 c4 10             	add    esp,0x10
c0014443:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014446:	74 0f                	je     c0014457 <Device::detectAll()+0x2b>
c0014448:	83 ec 0c             	sub    esp,0xc
c001444b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001444e:	e8 d9 ff ff ff       	call   c001442c <Device::detectAll()>
c0014453:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014455:	eb e9                	jmp    c0014440 <Device::detectAll()+0x14>
c0014457:	83 c4 08             	add    esp,0x8
c001445a:	5b                   	pop    ebx
c001445b:	c3                   	ret    

c001445c <Device::disableLegacyAll()>:
c001445c:	53                   	push   ebx
c001445d:	83 ec 14             	sub    esp,0x14
c0014460:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014464:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014466:	53                   	push   ebx
c0014467:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c001446a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014470:	83 c4 10             	add    esp,0x10
c0014473:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014476:	74 0f                	je     c0014487 <Device::disableLegacyAll()+0x2b>
c0014478:	83 ec 0c             	sub    esp,0xc
c001447b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001447e:	e8 d9 ff ff ff       	call   c001445c <Device::disableLegacyAll()>
c0014483:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014485:	eb e9                	jmp    c0014470 <Device::disableLegacyAll()+0x14>
c0014487:	83 c4 08             	add    esp,0x8
c001448a:	5b                   	pop    ebx
c001448b:	c3                   	ret    

c001448c <Device::loadDriversForAll()>:
c001448c:	53                   	push   ebx
c001448d:	83 ec 08             	sub    esp,0x8
c0014490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014494:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001449a:	8b 18                	mov    ebx,DWORD PTR [eax]
c001449c:	85 db                	test   ebx,ebx
c001449e:	74 12                	je     c00144b2 <Device::loadDriversForAll()+0x26>
c00144a0:	83 ec 0c             	sub    esp,0xc
c00144a3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00144a6:	e8 e1 ff ff ff       	call   c001448c <Device::loadDriversForAll()>
c00144ab:	83 c4 10             	add    esp,0x10
c00144ae:	89 d8                	mov    eax,ebx
c00144b0:	eb e8                	jmp    c001449a <Device::loadDriversForAll()+0xe>
c00144b2:	83 c4 08             	add    esp,0x8
c00144b5:	5b                   	pop    ebx
c00144b6:	c3                   	ret    
c00144b7:	90                   	nop

c00144b8 <Device::closeAll()>:
c00144b8:	53                   	push   ebx
c00144b9:	83 ec 08             	sub    esp,0x8
c00144bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00144c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144c2:	6a 00                	push   0x0
c00144c4:	6a 00                	push   0x0
c00144c6:	6a 00                	push   0x0
c00144c8:	53                   	push   ebx
c00144c9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00144cc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144d2:	83 c4 10             	add    esp,0x10
c00144d5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144d8:	74 0f                	je     c00144e9 <Device::closeAll()+0x31>
c00144da:	83 ec 0c             	sub    esp,0xc
c00144dd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144e0:	e8 d3 ff ff ff       	call   c00144b8 <Device::closeAll()>
c00144e5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144e7:	eb e9                	jmp    c00144d2 <Device::closeAll()+0x1a>
c00144e9:	83 c4 08             	add    esp,0x8
c00144ec:	5b                   	pop    ebx
c00144ed:	c3                   	ret    

c00144ee <Device::powerSavingAll(PowerSavingLevel)>:
c00144ee:	56                   	push   esi
c00144ef:	53                   	push   ebx
c00144f0:	83 ec 0c             	sub    esp,0xc
c00144f3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00144f7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00144fb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144fd:	56                   	push   esi
c00144fe:	53                   	push   ebx
c00144ff:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0014502:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014508:	83 c4 10             	add    esp,0x10
c001450b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001450e:	74 0f                	je     c001451f <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0014510:	52                   	push   edx
c0014511:	52                   	push   edx
c0014512:	56                   	push   esi
c0014513:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014516:	e8 d3 ff ff ff       	call   c00144ee <Device::powerSavingAll(PowerSavingLevel)>
c001451b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001451d:	eb e9                	jmp    c0014508 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001451f:	58                   	pop    eax
c0014520:	5b                   	pop    ebx
c0014521:	5e                   	pop    esi
c0014522:	c3                   	ret    
c0014523:	90                   	nop

c0014524 <Device::setName(char const*)>:
c0014524:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001452c:	e9 03 c3 fe ff       	jmp    c0000834 <strcpy>
c0014531:	90                   	nop

c0014532 <Device::Device(char const*)>:
c0014532:	83 ec 1c             	sub    esp,0x1c
c0014535:	ba 98 ad 02 c0       	mov    edx,0xc002ad98
c001453a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001453e:	89 10                	mov    DWORD PTR [eax],edx
c0014540:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014544:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001454e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014552:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001455c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014560:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001456a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001456e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014578:	83 ec 08             	sub    esp,0x8
c001457b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001457f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014583:	e8 9c ff ff ff       	call   c0014524 <Device::setName(char const*)>
c0014588:	83 c4 10             	add    esp,0x10
c001458b:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0014593:	83 ec 0c             	sub    esp,0xc
c0014596:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001459a:	e8 a1 b2 ff ff       	call   c000f840 <malloc>
c001459f:	83 c4 10             	add    esp,0x10
c00145a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00145a8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00145af:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00145b3:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00145b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145bd:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00145c3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00145c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145cd:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00145d3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00145da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145de:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00145e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145e9:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00145f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145f4:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00145fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014602:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001460c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014610:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001461a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001461e:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0014628:	90                   	nop
c0014629:	83 c4 1c             	add    esp,0x1c
c001462c:	c3                   	ret    
c001462d:	90                   	nop

c001462e <Device::getName()>:
c001462e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014632:	05 d0 00 00 00       	add    eax,0xd0
c0014637:	c3                   	ret    

c0014638 <DriverlessDevice::DriverlessDevice(char const*)>:
c0014638:	83 ec 0c             	sub    esp,0xc
c001463b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001463f:	83 ec 08             	sub    esp,0x8
c0014642:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014646:	50                   	push   eax
c0014647:	e8 e6 fe ff ff       	call   c0014532 <Device::Device(char const*)>
c001464c:	83 c4 10             	add    esp,0x10
c001464f:	ba c4 ad 02 c0       	mov    edx,0xc002adc4
c0014654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014658:	89 10                	mov    DWORD PTR [eax],edx
c001465a:	90                   	nop
c001465b:	83 c4 0c             	add    esp,0xc
c001465e:	c3                   	ret    
c001465f:	90                   	nop

c0014660 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014660:	57                   	push   edi
c0014661:	56                   	push   esi
c0014662:	53                   	push   ebx
c0014663:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014667:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001466b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001466f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014675:	75 0c                	jne    c0014683 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014677:	52                   	push   edx
c0014678:	52                   	push   edx
c0014679:	53                   	push   ebx
c001467a:	56                   	push   esi
c001467b:	e8 7a 42 01 00       	call   c00288fa <LinkedList<Device>::addElement(Device*)>
c0014680:	83 c4 10             	add    esp,0x10
c0014683:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014689:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001468c:	74 12                	je     c00146a0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001468e:	50                   	push   eax
c001468f:	57                   	push   edi
c0014690:	56                   	push   esi
c0014691:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014694:	e8 c7 ff ff ff       	call   c0014660 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014699:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001469b:	83 c4 10             	add    esp,0x10
c001469e:	eb e9                	jmp    c0014689 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00146a0:	5b                   	pop    ebx
c00146a1:	5e                   	pop    esi
c00146a2:	5f                   	pop    edi
c00146a3:	c3                   	ret    

c00146a4 <getDevicesOfType(DeviceType)>:
c00146a4:	53                   	push   ebx
c00146a5:	83 ec 14             	sub    esp,0x14
c00146a8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00146ac:	53                   	push   ebx
c00146ad:	e8 24 43 01 00       	call   c00289d6 <LinkedList<Device>::LinkedList()>
c00146b2:	83 c4 0c             	add    esp,0xc
c00146b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146b9:	53                   	push   ebx
c00146ba:	ff 35 a8 e5 02 c0    	push   DWORD PTR ds:0xc002e5a8
c00146c0:	e8 9b ff ff ff       	call   c0014660 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00146c5:	89 d8                	mov    eax,ebx
c00146c7:	83 c4 18             	add    esp,0x18
c00146ca:	5b                   	pop    ebx
c00146cb:	c2 04 00             	ret    0x4

c00146ce <HardDiskController::HardDiskController(char const*)>:
c00146ce:	83 ec 0c             	sub    esp,0xc
c00146d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146d5:	83 ec 08             	sub    esp,0x8
c00146d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146dc:	50                   	push   eax
c00146dd:	e8 50 fe ff ff       	call   c0014532 <Device::Device(char const*)>
c00146e2:	83 c4 10             	add    esp,0x10
c00146e5:	ba f0 ad 02 c0       	mov    edx,0xc002adf0
c00146ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146ee:	89 10                	mov    DWORD PTR [eax],edx
c00146f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146f4:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00146fe:	90                   	nop
c00146ff:	83 c4 0c             	add    esp,0xc
c0014702:	c3                   	ret    
c0014703:	90                   	nop

c0014704 <HardDiskController::~HardDiskController()>:
c0014704:	83 ec 0c             	sub    esp,0xc
c0014707:	ba f0 ad 02 c0       	mov    edx,0xc002adf0
c001470c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014710:	89 10                	mov    DWORD PTR [eax],edx
c0014712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014716:	83 ec 0c             	sub    esp,0xc
c0014719:	50                   	push   eax
c001471a:	e8 f5 fa ff ff       	call   c0014214 <Device::~Device()>
c001471f:	83 c4 10             	add    esp,0x10
c0014722:	90                   	nop
c0014723:	83 c4 0c             	add    esp,0xc
c0014726:	c3                   	ret    
c0014727:	90                   	nop

c0014728 <HardDiskController::~HardDiskController()>:
c0014728:	83 ec 0c             	sub    esp,0xc
c001472b:	83 ec 0c             	sub    esp,0xc
c001472e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014732:	e8 cd ff ff ff       	call   c0014704 <HardDiskController::~HardDiskController()>
c0014737:	83 c4 10             	add    esp,0x10
c001473a:	83 ec 08             	sub    esp,0x8
c001473d:	68 58 01 00 00       	push   0x158
c0014742:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014746:	e8 f1 e6 ff ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c001474b:	83 c4 10             	add    esp,0x10
c001474e:	83 c4 0c             	add    esp,0xc
c0014751:	c3                   	ret    

c0014752 <PhysicalDisk::eject()>:
c0014752:	83 ec 18             	sub    esp,0x18
c0014755:	68 14 ae 02 c0       	push   0xc002ae14
c001475a:	e8 bd e7 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001475f:	83 c8 ff             	or     eax,0xffffffff
c0014762:	83 c4 1c             	add    esp,0x1c
c0014765:	c3                   	ret    

c0014766 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014766:	83 ec 0c             	sub    esp,0xc
c0014769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001476d:	83 ec 08             	sub    esp,0x8
c0014770:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014774:	50                   	push   eax
c0014775:	e8 b8 fd ff ff       	call   c0014532 <Device::Device(char const*)>
c001477a:	83 c4 10             	add    esp,0x10
c001477d:	ba 44 ae 02 c0       	mov    edx,0xc002ae44
c0014782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014786:	89 10                	mov    DWORD PTR [eax],edx
c0014788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001478c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014793:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014797:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001479e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147a2:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00147ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147b0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00147b4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00147ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147be:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00147c8:	90                   	nop
c00147c9:	83 c4 0c             	add    esp,0xc
c00147cc:	c3                   	ret    
c00147cd:	90                   	nop

c00147ce <PhysicalDisk::startCache()>:
c00147ce:	56                   	push   esi
c00147cf:	53                   	push   ebx
c00147d0:	83 ec 10             	sub    esp,0x10
c00147d3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00147d7:	6a 44                	push   0x44
c00147d9:	e8 62 b0 ff ff       	call   c000f840 <malloc>
c00147de:	89 c6                	mov    esi,eax
c00147e0:	58                   	pop    eax
c00147e1:	5a                   	pop    edx
c00147e2:	53                   	push   ebx
c00147e3:	56                   	push   esi
c00147e4:	e8 29 27 00 00       	call   c0016f12 <VCache::VCache(PhysicalDisk*)>
c00147e9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00147ef:	83 c4 14             	add    esp,0x14
c00147f2:	5b                   	pop    ebx
c00147f3:	5e                   	pop    esi
c00147f4:	c3                   	ret    
c00147f5:	90                   	nop

c00147f6 <PhysicalDisk::~PhysicalDisk()>:
c00147f6:	83 ec 0c             	sub    esp,0xc
c00147f9:	ba 44 ae 02 c0       	mov    edx,0xc002ae44
c00147fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014802:	89 10                	mov    DWORD PTR [eax],edx
c0014804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014808:	83 ec 0c             	sub    esp,0xc
c001480b:	50                   	push   eax
c001480c:	e8 03 fa ff ff       	call   c0014214 <Device::~Device()>
c0014811:	83 c4 10             	add    esp,0x10
c0014814:	90                   	nop
c0014815:	83 c4 0c             	add    esp,0xc
c0014818:	c3                   	ret    
c0014819:	90                   	nop

c001481a <PhysicalDisk::~PhysicalDisk()>:
c001481a:	83 ec 0c             	sub    esp,0xc
c001481d:	83 ec 0c             	sub    esp,0xc
c0014820:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014824:	e8 cd ff ff ff       	call   c00147f6 <PhysicalDisk::~PhysicalDisk()>
c0014829:	83 c4 10             	add    esp,0x10
c001482c:	83 ec 08             	sub    esp,0x8
c001482f:	68 6c 01 00 00       	push   0x16c
c0014834:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014838:	e8 ff e5 ff ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c001483d:	83 c4 10             	add    esp,0x10
c0014840:	83 c4 0c             	add    esp,0xc
c0014843:	c3                   	ret    

c0014844 <FPU::FPU(char const*)>:
c0014844:	83 ec 0c             	sub    esp,0xc
c0014847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001484b:	83 ec 08             	sub    esp,0x8
c001484e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014852:	50                   	push   eax
c0014853:	e8 da fc ff ff       	call   c0014532 <Device::Device(char const*)>
c0014858:	83 c4 10             	add    esp,0x10
c001485b:	ba 88 ae 02 c0       	mov    edx,0xc002ae88
c0014860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014864:	89 10                	mov    DWORD PTR [eax],edx
c0014866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001486a:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014874:	90                   	nop
c0014875:	83 c4 0c             	add    esp,0xc
c0014878:	c3                   	ret    
c0014879:	90                   	nop

c001487a <FPU::~FPU()>:
c001487a:	83 ec 0c             	sub    esp,0xc
c001487d:	ba 88 ae 02 c0       	mov    edx,0xc002ae88
c0014882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014886:	89 10                	mov    DWORD PTR [eax],edx
c0014888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001488c:	83 ec 0c             	sub    esp,0xc
c001488f:	50                   	push   eax
c0014890:	e8 7f f9 ff ff       	call   c0014214 <Device::~Device()>
c0014895:	83 c4 10             	add    esp,0x10
c0014898:	90                   	nop
c0014899:	83 c4 0c             	add    esp,0xc
c001489c:	c3                   	ret    
c001489d:	90                   	nop

c001489e <FPU::~FPU()>:
c001489e:	83 ec 0c             	sub    esp,0xc
c00148a1:	83 ec 0c             	sub    esp,0xc
c00148a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148a8:	e8 cd ff ff ff       	call   c001487a <FPU::~FPU()>
c00148ad:	83 c4 10             	add    esp,0x10
c00148b0:	83 ec 08             	sub    esp,0x8
c00148b3:	68 58 01 00 00       	push   0x158
c00148b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148bc:	e8 7b e5 ff ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c00148c1:	83 c4 10             	add    esp,0x10
c00148c4:	83 c4 0c             	add    esp,0xc
c00148c7:	c3                   	ret    

c00148c8 <setupFPU()>:
c00148c8:	53                   	push   ebx
c00148c9:	83 ec 08             	sub    esp,0x8
c00148cc:	8b 15 a8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5a8
c00148d2:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00148d9:	74 19                	je     c00148f4 <setupFPU()+0x2c>
c00148db:	83 ec 0c             	sub    esp,0xc
c00148de:	68 58 01 00 00       	push   0x158
c00148e3:	e8 58 af ff ff       	call   c000f840 <malloc>
c00148e8:	89 c3                	mov    ebx,eax
c00148ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00148ed:	e8 56 0c 01 00       	call   c0025548 <AVX::AVX()>
c00148f2:	eb 5b                	jmp    c001494f <setupFPU()+0x87>
c00148f4:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00148fa:	84 c0                	test   al,al
c00148fc:	79 19                	jns    c0014917 <setupFPU()+0x4f>
c00148fe:	83 ec 0c             	sub    esp,0xc
c0014901:	68 58 01 00 00       	push   0x158
c0014906:	e8 35 af ff ff       	call   c000f840 <malloc>
c001490b:	89 c3                	mov    ebx,eax
c001490d:	89 04 24             	mov    DWORD PTR [esp],eax
c0014910:	e8 59 0d 01 00       	call   c002566e <SSE::SSE()>
c0014915:	eb 38                	jmp    c001494f <setupFPU()+0x87>
c0014917:	a8 20                	test   al,0x20
c0014919:	74 19                	je     c0014934 <setupFPU()+0x6c>
c001491b:	83 ec 0c             	sub    esp,0xc
c001491e:	68 58 01 00 00       	push   0x158
c0014923:	e8 18 af ff ff       	call   c000f840 <malloc>
c0014928:	89 c3                	mov    ebx,eax
c001492a:	89 04 24             	mov    DWORD PTR [esp],eax
c001492d:	e8 a6 0c 01 00       	call   c00255d8 <MMX::MMX()>
c0014932:	eb 1b                	jmp    c001494f <setupFPU()+0x87>
c0014934:	a8 10                	test   al,0x10
c0014936:	74 1c                	je     c0014954 <setupFPU()+0x8c>
c0014938:	83 ec 0c             	sub    esp,0xc
c001493b:	68 58 01 00 00       	push   0x158
c0014940:	e8 fb ae ff ff       	call   c000f840 <malloc>
c0014945:	89 c3                	mov    ebx,eax
c0014947:	89 04 24             	mov    DWORD PTR [esp],eax
c001494a:	e8 ad 0d 01 00       	call   c00256fc <x87::x87()>
c001494f:	83 c4 10             	add    esp,0x10
c0014952:	eb 24                	jmp    c0014978 <setupFPU()+0xb0>
c0014954:	83 e0 ef             	and    eax,0xffffffef
c0014957:	83 ec 0c             	sub    esp,0xc
c001495a:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014960:	68 74 ae 02 c0       	push   0xc002ae74
c0014965:	e8 b2 e5 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001496a:	0f 20 c0             	mov    eax,cr0
c001496d:	83 c8 04             	or     eax,0x4
c0014970:	0f 22 c0             	mov    cr0,eax
c0014973:	31 db                	xor    ebx,ebx
c0014975:	83 c4 10             	add    esp,0x10
c0014978:	89 d8                	mov    eax,ebx
c001497a:	83 c4 08             	add    esp,0x8
c001497d:	5b                   	pop    ebx
c001497e:	c3                   	ret    
c001497f:	90                   	nop

c0014980 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014980:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014984:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014988:	c1 e0 04             	shl    eax,0x4
c001498b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001498f:	8d 50 10             	lea    edx,[eax+0x10]
c0014992:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014998:	74 08                	je     c00149a2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c001499a:	83 c0 04             	add    eax,0x4
c001499d:	39 d0                	cmp    eax,edx
c001499f:	75 f1                	jne    c0014992 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00149a1:	c3                   	ret    
c00149a2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00149ac:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00149b6:	eb e2                	jmp    c001499a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00149b8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00149b8:	57                   	push   edi
c00149b9:	31 c0                	xor    eax,eax
c00149bb:	56                   	push   esi
c00149bc:	53                   	push   ebx
c00149bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00149c1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00149c5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00149c9:	89 da                	mov    edx,ebx
c00149cb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00149cf:	c1 e2 04             	shl    edx,0x4
c00149d2:	01 ca                	add    edx,ecx
c00149d4:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00149dc:	74 16                	je     c00149f4 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00149de:	40                   	inc    eax
c00149df:	83 f8 04             	cmp    eax,0x4
c00149e2:	75 f0                	jne    c00149d4 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00149e4:	c7 44 24 10 b8 ae 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aeb8
c00149ec:	5b                   	pop    ebx
c00149ed:	5e                   	pop    esi
c00149ee:	5f                   	pop    edi
c00149ef:	e9 c9 5b 00 00       	jmp    c001a5bd <Krnl::panic(char const*)>
c00149f4:	8d 04 98             	lea    eax,[eax+ebx*4]
c00149f7:	8d 04 81             	lea    eax,[ecx+eax*4]
c00149fa:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014a00:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014a06:	5b                   	pop    ebx
c0014a07:	5e                   	pop    esi
c0014a08:	5f                   	pop    edi
c0014a09:	c3                   	ret    

c0014a0a <doubleFault(regs*, void*)>:
c0014a0a:	55                   	push   ebp
c0014a0b:	89 e5                	mov    ebp,esp
c0014a0d:	83 ec 08             	sub    esp,0x8
c0014a10:	83 ec 0c             	sub    esp,0xc
c0014a13:	68 f3 ae 02 c0       	push   0xc002aef3
c0014a18:	e8 a0 5b 00 00       	call   c001a5bd <Krnl::panic(char const*)>
c0014a1d:	83 c4 10             	add    esp,0x10
c0014a20:	90                   	nop
c0014a21:	c9                   	leave  
c0014a22:	c3                   	ret    
c0014a23:	90                   	nop

c0014a24 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014a24:	56                   	push   esi
c0014a25:	53                   	push   ebx
c0014a26:	50                   	push   eax
c0014a27:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a2b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a2f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014a34:	75 35                	jne    c0014a6b <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014a36:	8d 43 20             	lea    eax,[ebx+0x20]
c0014a39:	31 d2                	xor    edx,edx
c0014a3b:	89 c1                	mov    ecx,eax
c0014a3d:	c1 e1 04             	shl    ecx,0x4
c0014a40:	01 f1                	add    ecx,esi
c0014a42:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014a4a:	74 3e                	je     c0014a8a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014a4c:	42                   	inc    edx
c0014a4d:	83 fa 04             	cmp    edx,0x4
c0014a50:	75 f0                	jne    c0014a42 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014a52:	83 ec 0c             	sub    esp,0xc
c0014a55:	68 38 af 02 c0       	push   0xc002af38
c0014a5a:	e8 5e 5b 00 00       	call   c001a5bd <Krnl::panic(char const*)>
c0014a5f:	83 c4 10             	add    esp,0x10
c0014a62:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014a67:	5a                   	pop    edx
c0014a68:	5b                   	pop    ebx
c0014a69:	5e                   	pop    esi
c0014a6a:	c3                   	ret    
c0014a6b:	83 ec 0c             	sub    esp,0xc
c0014a6e:	56                   	push   esi
c0014a6f:	e8 ba fb ff ff       	call   c001462e <Device::getName()>
c0014a74:	83 c4 10             	add    esp,0x10
c0014a77:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a7a:	75 ba                	jne    c0014a36 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a7c:	83 fb 0f             	cmp    ebx,0xf
c0014a7f:	7f 29                	jg     c0014aaa <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014a81:	0f b6 9b 00 d8 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2800]
c0014a88:	eb ac                	jmp    c0014a36 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a8a:	8d 04 82             	lea    eax,[edx+eax*4]
c0014a8d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014a91:	8d 04 86             	lea    eax,[esi+eax*4]
c0014a94:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014a9a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014a9e:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014aa4:	89 d8                	mov    eax,ebx
c0014aa6:	5a                   	pop    edx
c0014aa7:	5b                   	pop    ebx
c0014aa8:	5e                   	pop    esi
c0014aa9:	c3                   	ret    
c0014aaa:	83 ec 0c             	sub    esp,0xc
c0014aad:	68 00 af 02 c0       	push   0xc002af00
c0014ab2:	e8 06 5b 00 00       	call   c001a5bd <Krnl::panic(char const*)>
c0014ab7:	83 c4 10             	add    esp,0x10
c0014aba:	e9 77 ff ff ff       	jmp    c0014a36 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014abf:	90                   	nop

c0014ac0 <InterruptController::clearAllHandlers(int, bool)>:
c0014ac0:	56                   	push   esi
c0014ac1:	53                   	push   ebx
c0014ac2:	52                   	push   edx
c0014ac3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014ac7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014acb:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014ad0:	75 61                	jne    c0014b33 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014ad2:	8d 46 20             	lea    eax,[esi+0x20]
c0014ad5:	c1 e6 04             	shl    esi,0x4
c0014ad8:	c1 e0 04             	shl    eax,0x4
c0014adb:	01 de                	add    esi,ebx
c0014add:	01 d8                	add    eax,ebx
c0014adf:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014ae9:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014af3:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014afd:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014b07:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014b11:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014b1b:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014b25:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014b2f:	58                   	pop    eax
c0014b30:	5b                   	pop    ebx
c0014b31:	5e                   	pop    esi
c0014b32:	c3                   	ret    
c0014b33:	83 ec 0c             	sub    esp,0xc
c0014b36:	53                   	push   ebx
c0014b37:	e8 f2 fa ff ff       	call   c001462e <Device::getName()>
c0014b3c:	83 c4 10             	add    esp,0x10
c0014b3f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b42:	75 8e                	jne    c0014ad2 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b44:	83 fe 0f             	cmp    esi,0xf
c0014b47:	7f 09                	jg     c0014b52 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014b49:	0f b6 b6 00 d8 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2800]
c0014b50:	eb 80                	jmp    c0014ad2 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b52:	83 ec 0c             	sub    esp,0xc
c0014b55:	68 74 af 02 c0       	push   0xc002af74
c0014b5a:	e8 5e 5a 00 00       	call   c001a5bd <Krnl::panic(char const*)>
c0014b5f:	83 c4 10             	add    esp,0x10
c0014b62:	e9 6b ff ff ff       	jmp    c0014ad2 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b67:	90                   	nop

c0014b68 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014b68:	56                   	push   esi
c0014b69:	53                   	push   ebx
c0014b6a:	52                   	push   edx
c0014b6b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014b6f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014b73:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014b78:	75 3a                	jne    c0014bb4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014b7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b7e:	8d 50 20             	lea    edx,[eax+0x20]
c0014b81:	c1 e2 04             	shl    edx,0x4
c0014b84:	8d 04 16             	lea    eax,[esi+edx*1]
c0014b87:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014b8b:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014b91:	74 0b                	je     c0014b9e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014b93:	83 c0 04             	add    eax,0x4
c0014b96:	39 d0                	cmp    eax,edx
c0014b98:	75 f1                	jne    c0014b8b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014b9a:	58                   	pop    eax
c0014b9b:	5b                   	pop    ebx
c0014b9c:	5e                   	pop    esi
c0014b9d:	c3                   	ret    
c0014b9e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014ba8:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014bb2:	eb df                	jmp    c0014b93 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014bb4:	83 ec 0c             	sub    esp,0xc
c0014bb7:	56                   	push   esi
c0014bb8:	e8 71 fa ff ff       	call   c001462e <Device::getName()>
c0014bbd:	83 c4 10             	add    esp,0x10
c0014bc0:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014bc3:	75 b5                	jne    c0014b7a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014bc5:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014bca:	7f 11                	jg     c0014bdd <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014bcc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014bd0:	0f b6 80 00 d8 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2800]
c0014bd7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014bdb:	eb 9d                	jmp    c0014b7a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014bdd:	83 ec 0c             	sub    esp,0xc
c0014be0:	68 74 af 02 c0       	push   0xc002af74
c0014be5:	e8 d3 59 00 00       	call   c001a5bd <Krnl::panic(char const*)>
c0014bea:	83 c4 10             	add    esp,0x10
c0014bed:	eb 8b                	jmp    c0014b7a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014bef <nmiHandler(regs*, void*)>:
c0014bef:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c0014bf4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014bf8:	e9 8f a3 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c0014bfd <int_handler>:
c0014bfd:	55                   	push   ebp
c0014bfe:	57                   	push   edi
c0014bff:	56                   	push   esi
c0014c00:	53                   	push   ebx
c0014c01:	83 ec 0c             	sub    esp,0xc
c0014c04:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014c08:	80 3d 04 11 03 c0 00 	cmp    BYTE PTR ds:0xc0031104,0x0
c0014c0f:	74 0b                	je     c0014c1c <int_handler+0x1f>
c0014c11:	fa                   	cli    
c0014c12:	f4                   	hlt    
c0014c13:	80 3d 04 11 03 c0 00 	cmp    BYTE PTR ds:0xc0031104,0x0
c0014c1a:	75 f5                	jne    c0014c11 <int_handler+0x14>
c0014c1c:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c0014c21:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014c24:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014c2a:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014c30:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c33:	83 f8 17             	cmp    eax,0x17
c0014c36:	77 13                	ja     c0014c4b <int_handler+0x4e>
c0014c38:	83 ec 08             	sub    esp,0x8
c0014c3b:	8b 17                	mov    edx,DWORD PTR [edi]
c0014c3d:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c40:	0f b6 c0             	movzx  eax,al
c0014c43:	50                   	push   eax
c0014c44:	57                   	push   edi
c0014c45:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014c48:	83 c4 10             	add    esp,0x10
c0014c4b:	83 c3 15             	add    ebx,0x15
c0014c4e:	c1 e3 04             	shl    ebx,0x4
c0014c51:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014c55:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014c5c:	31 db                	xor    ebx,ebx
c0014c5e:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014c62:	85 c0                	test   eax,eax
c0014c64:	74 13                	je     c0014c79 <int_handler+0x7c>
c0014c66:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014c69:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014c6d:	74 1c                	je     c0014c8b <int_handler+0x8e>
c0014c6f:	83 ec 08             	sub    esp,0x8
c0014c72:	52                   	push   edx
c0014c73:	56                   	push   esi
c0014c74:	ff d0                	call   eax
c0014c76:	83 c4 10             	add    esp,0x10
c0014c79:	43                   	inc    ebx
c0014c7a:	83 fb 04             	cmp    ebx,0x4
c0014c7d:	75 df                	jne    c0014c5e <int_handler+0x61>
c0014c7f:	83 c4 0c             	add    esp,0xc
c0014c82:	31 c0                	xor    eax,eax
c0014c84:	5b                   	pop    ebx
c0014c85:	31 d2                	xor    edx,edx
c0014c87:	5e                   	pop    esi
c0014c88:	5f                   	pop    edi
c0014c89:	5d                   	pop    ebp
c0014c8a:	c3                   	ret    
c0014c8b:	83 ec 08             	sub    esp,0x8
c0014c8e:	52                   	push   edx
c0014c8f:	56                   	push   esi
c0014c90:	ff d0                	call   eax
c0014c92:	83 c4 10             	add    esp,0x10
c0014c95:	83 c4 0c             	add    esp,0xc
c0014c98:	5b                   	pop    ebx
c0014c99:	5e                   	pop    esi
c0014c9a:	5f                   	pop    edi
c0014c9b:	5d                   	pop    ebp
c0014c9c:	c3                   	ret    
c0014c9d:	90                   	nop

c0014c9e <InterruptController::InterruptController(char const*)>:
c0014c9e:	83 ec 1c             	sub    esp,0x1c
c0014ca1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ca5:	83 ec 08             	sub    esp,0x8
c0014ca8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014cac:	50                   	push   eax
c0014cad:	e8 80 f8 ff ff       	call   c0014532 <Device::Device(char const*)>
c0014cb2:	83 c4 10             	add    esp,0x10
c0014cb5:	ba 10 b2 02 c0       	mov    edx,0xc002b210
c0014cba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cbe:	89 10                	mov    DWORD PTR [eax],edx
c0014cc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cc4:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014cce:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014cd6:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014cde:	7f 5e                	jg     c0014d3e <InterruptController::InterruptController(char const*)+0xa0>
c0014ce0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014ce8:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014ced:	7f 49                	jg     c0014d38 <InterruptController::InterruptController(char const*)+0x9a>
c0014cef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cf3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014cf7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014cfe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d02:	01 ca                	add    edx,ecx
c0014d04:	83 c2 54             	add    edx,0x54
c0014d07:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d13:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d17:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014d1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d22:	01 ca                	add    edx,ecx
c0014d24:	81 c2 54 04 00 00    	add    edx,0x454
c0014d2a:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d32:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014d36:	eb b0                	jmp    c0014ce8 <InterruptController::InterruptController(char const*)+0x4a>
c0014d38:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014d3c:	eb 98                	jmp    c0014cd6 <InterruptController::InterruptController(char const*)+0x38>
c0014d3e:	90                   	nop
c0014d3f:	83 c4 1c             	add    esp,0x1c
c0014d42:	c3                   	ret    
c0014d43:	90                   	nop

c0014d44 <InterruptController::~InterruptController()>:
c0014d44:	83 ec 0c             	sub    esp,0xc
c0014d47:	ba 10 b2 02 c0       	mov    edx,0xc002b210
c0014d4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d50:	89 10                	mov    DWORD PTR [eax],edx
c0014d52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d56:	83 ec 0c             	sub    esp,0xc
c0014d59:	50                   	push   eax
c0014d5a:	e8 b5 f4 ff ff       	call   c0014214 <Device::~Device()>
c0014d5f:	83 c4 10             	add    esp,0x10
c0014d62:	90                   	nop
c0014d63:	83 c4 0c             	add    esp,0xc
c0014d66:	c3                   	ret    
c0014d67:	90                   	nop

c0014d68 <InterruptController::~InterruptController()>:
c0014d68:	83 ec 0c             	sub    esp,0xc
c0014d6b:	83 ec 0c             	sub    esp,0xc
c0014d6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d72:	e8 cd ff ff ff       	call   c0014d44 <InterruptController::~InterruptController()>
c0014d77:	83 c4 10             	add    esp,0x10
c0014d7a:	83 ec 08             	sub    esp,0x8
c0014d7d:	68 58 21 00 00       	push   0x2158
c0014d82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d86:	e8 b1 e0 ff ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c0014d8b:	83 c4 10             	add    esp,0x10
c0014d8e:	83 c4 0c             	add    esp,0xc
c0014d91:	c3                   	ret    

c0014d92 <displayDebugInfo(regs*)>:
c0014d92:	55                   	push   ebp
c0014d93:	57                   	push   edi
c0014d94:	56                   	push   esi
c0014d95:	53                   	push   ebx
c0014d96:	83 ec 24             	sub    esp,0x24
c0014d99:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014d9d:	0f 20 c2             	mov    edx,cr0
c0014da0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014da4:	0f 20 d7             	mov    edi,cr2
c0014da7:	0f 20 de             	mov    esi,cr3
c0014daa:	0f 20 e5             	mov    ebp,cr4
c0014dad:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014db0:	68 ae af 02 c0       	push   0xc002afae
c0014db5:	e8 62 e1 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0014dba:	59                   	pop    ecx
c0014dbb:	58                   	pop    eax
c0014dbc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014dbf:	68 b9 af 02 c0       	push   0xc002afb9
c0014dc4:	e8 53 e1 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0014dc9:	58                   	pop    eax
c0014dca:	5a                   	pop    edx
c0014dcb:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014dce:	68 c4 af 02 c0       	push   0xc002afc4
c0014dd3:	e8 44 e1 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0014dd8:	59                   	pop    ecx
c0014dd9:	58                   	pop    eax
c0014dda:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014ddd:	68 cf af 02 c0       	push   0xc002afcf
c0014de2:	e8 35 e1 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0014de7:	58                   	pop    eax
c0014de8:	5a                   	pop    edx
c0014de9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014dec:	68 da af 02 c0       	push   0xc002afda
c0014df1:	e8 26 e1 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0014df6:	59                   	pop    ecx
c0014df7:	58                   	pop    eax
c0014df8:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014dfb:	68 e5 af 02 c0       	push   0xc002afe5
c0014e00:	e8 17 e1 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0014e05:	58                   	pop    eax
c0014e06:	5a                   	pop    edx
c0014e07:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014e0a:	68 f0 af 02 c0       	push   0xc002aff0
c0014e0f:	e8 08 e1 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0014e14:	59                   	pop    ecx
c0014e15:	58                   	pop    eax
c0014e16:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014e19:	68 fb af 02 c0       	push   0xc002affb
c0014e1e:	e8 f9 e0 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0014e23:	58                   	pop    eax
c0014e24:	5a                   	pop    edx
c0014e25:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014e28:	68 06 b0 02 c0       	push   0xc002b006
c0014e2d:	e8 ea e0 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0014e32:	59                   	pop    ecx
c0014e33:	58                   	pop    eax
c0014e34:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e37:	68 15 b0 02 c0       	push   0xc002b015
c0014e3c:	e8 db e0 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0014e41:	58                   	pop    eax
c0014e42:	5a                   	pop    edx
c0014e43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014e46:	68 20 b0 02 c0       	push   0xc002b020
c0014e4b:	e8 cc e0 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0014e50:	59                   	pop    ecx
c0014e51:	58                   	pop    eax
c0014e52:	57                   	push   edi
c0014e53:	68 2b b0 02 c0       	push   0xc002b02b
c0014e58:	e8 bf e0 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0014e5d:	58                   	pop    eax
c0014e5e:	5a                   	pop    edx
c0014e5f:	56                   	push   esi
c0014e60:	68 36 b0 02 c0       	push   0xc002b036
c0014e65:	e8 b2 e0 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0014e6a:	59                   	pop    ecx
c0014e6b:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0014e70:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e76:	e8 c2 be ff ff       	call   c0010d3d <setActiveTerminal(VgaText*)>
c0014e7b:	58                   	pop    eax
c0014e7c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014e7f:	5a                   	pop    edx
c0014e80:	c1 e0 05             	shl    eax,0x5
c0014e83:	05 60 d5 02 c0       	add    eax,0xc002d560
c0014e88:	50                   	push   eax
c0014e89:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0014e8e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e94:	e8 c3 c2 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014e99:	59                   	pop    ecx
c0014e9a:	58                   	pop    eax
c0014e9b:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0014ea0:	68 41 b0 02 c0       	push   0xc002b041
c0014ea5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eab:	e8 ac c2 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014eb0:	58                   	pop    eax
c0014eb1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014eb6:	5a                   	pop    edx
c0014eb7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014eba:	83 c0 0c             	add    eax,0xc
c0014ebd:	50                   	push   eax
c0014ebe:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0014ec3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ec9:	e8 8e c2 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014ece:	59                   	pop    ecx
c0014ecf:	58                   	pop    eax
c0014ed0:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0014ed5:	68 4a b0 02 c0       	push   0xc002b04a
c0014eda:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ee0:	e8 77 c2 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014ee5:	58                   	pop    eax
c0014ee6:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0014eeb:	5a                   	pop    edx
c0014eec:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014eef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ef5:	e8 88 c2 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0014efa:	59                   	pop    ecx
c0014efb:	58                   	pop    eax
c0014efc:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0014f01:	68 52 b0 02 c0       	push   0xc002b052
c0014f06:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f0c:	e8 4b c2 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014f11:	58                   	pop    eax
c0014f12:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0014f17:	5a                   	pop    edx
c0014f18:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014f1b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f21:	e8 5c c2 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0014f26:	59                   	pop    ecx
c0014f27:	58                   	pop    eax
c0014f28:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0014f2d:	68 5a b0 02 c0       	push   0xc002b05a
c0014f32:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f38:	e8 1f c2 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014f3d:	58                   	pop    eax
c0014f3e:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0014f43:	5a                   	pop    edx
c0014f44:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014f47:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f4d:	e8 30 c2 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0014f52:	59                   	pop    ecx
c0014f53:	58                   	pop    eax
c0014f54:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0014f59:	68 62 b0 02 c0       	push   0xc002b062
c0014f5e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f64:	e8 f3 c1 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014f69:	58                   	pop    eax
c0014f6a:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0014f6f:	5a                   	pop    edx
c0014f70:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014f73:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f79:	e8 04 c2 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0014f7e:	59                   	pop    ecx
c0014f7f:	58                   	pop    eax
c0014f80:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0014f85:	68 6a b0 02 c0       	push   0xc002b06a
c0014f8a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f90:	e8 c7 c1 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014f95:	58                   	pop    eax
c0014f96:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0014f9b:	5a                   	pop    edx
c0014f9c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014f9f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fa5:	e8 d8 c1 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0014faa:	59                   	pop    ecx
c0014fab:	58                   	pop    eax
c0014fac:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0014fb1:	68 72 b0 02 c0       	push   0xc002b072
c0014fb6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fbc:	e8 9b c1 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014fc1:	58                   	pop    eax
c0014fc2:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0014fc7:	5a                   	pop    edx
c0014fc8:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014fcb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fd1:	e8 ac c1 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0014fd6:	59                   	pop    ecx
c0014fd7:	58                   	pop    eax
c0014fd8:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0014fdd:	68 7a b0 02 c0       	push   0xc002b07a
c0014fe2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fe8:	e8 6f c1 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014fed:	58                   	pop    eax
c0014fee:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0014ff3:	5a                   	pop    edx
c0014ff4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014ff8:	52                   	push   edx
c0014ff9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fff:	e8 7e c1 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0015004:	59                   	pop    ecx
c0015005:	58                   	pop    eax
c0015006:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001500b:	68 83 b0 02 c0       	push   0xc002b083
c0015010:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015016:	e8 41 c1 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001501b:	58                   	pop    eax
c001501c:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0015021:	5a                   	pop    edx
c0015022:	57                   	push   edi
c0015023:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015029:	e8 54 c1 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001502e:	59                   	pop    ecx
c001502f:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0015034:	5f                   	pop    edi
c0015035:	68 8b b0 02 c0       	push   0xc002b08b
c001503a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015040:	e8 17 c1 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0015045:	58                   	pop    eax
c0015046:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001504b:	5a                   	pop    edx
c001504c:	56                   	push   esi
c001504d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015053:	e8 2a c1 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0015058:	59                   	pop    ecx
c0015059:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001505e:	5e                   	pop    esi
c001505f:	68 93 b0 02 c0       	push   0xc002b093
c0015064:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001506a:	e8 ed c0 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001506f:	5f                   	pop    edi
c0015070:	58                   	pop    eax
c0015071:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0015076:	55                   	push   ebp
c0015077:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001507d:	e8 00 c1 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0015082:	58                   	pop    eax
c0015083:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0015088:	5a                   	pop    edx
c0015089:	68 9b b0 02 c0       	push   0xc002b09b
c001508e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015094:	e8 c3 c0 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0015099:	0f 21 c0             	mov    eax,db0
c001509c:	59                   	pop    ecx
c001509d:	5e                   	pop    esi
c001509e:	50                   	push   eax
c001509f:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c00150a4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150aa:	e8 d3 c0 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c00150af:	5f                   	pop    edi
c00150b0:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c00150b5:	5d                   	pop    ebp
c00150b6:	68 a4 b0 02 c0       	push   0xc002b0a4
c00150bb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150c1:	e8 96 c0 ff ff       	call   c001115c <VgaText::puts(char const*)>
c00150c6:	0f 21 c8             	mov    eax,db1
c00150c9:	5a                   	pop    edx
c00150ca:	59                   	pop    ecx
c00150cb:	50                   	push   eax
c00150cc:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c00150d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150d7:	e8 a6 c0 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c00150dc:	5e                   	pop    esi
c00150dd:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c00150e2:	5f                   	pop    edi
c00150e3:	68 ac b0 02 c0       	push   0xc002b0ac
c00150e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150ee:	e8 69 c0 ff ff       	call   c001115c <VgaText::puts(char const*)>
c00150f3:	0f 21 d0             	mov    eax,db2
c00150f6:	5d                   	pop    ebp
c00150f7:	5a                   	pop    edx
c00150f8:	50                   	push   eax
c00150f9:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c00150fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015104:	e8 79 c0 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0015109:	59                   	pop    ecx
c001510a:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001510f:	5e                   	pop    esi
c0015110:	68 b4 b0 02 c0       	push   0xc002b0b4
c0015115:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001511b:	e8 3c c0 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0015120:	0f 21 d8             	mov    eax,db3
c0015123:	5f                   	pop    edi
c0015124:	5d                   	pop    ebp
c0015125:	50                   	push   eax
c0015126:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001512b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015131:	e8 4c c0 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0015136:	58                   	pop    eax
c0015137:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001513c:	5a                   	pop    edx
c001513d:	68 bc b0 02 c0       	push   0xc002b0bc
c0015142:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015148:	e8 0f c0 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001514d:	0f 21 f0             	mov    eax,db6
c0015150:	59                   	pop    ecx
c0015151:	5e                   	pop    esi
c0015152:	50                   	push   eax
c0015153:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0015158:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001515e:	e8 1f c0 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0015163:	5f                   	pop    edi
c0015164:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0015169:	5d                   	pop    ebp
c001516a:	68 c4 b0 02 c0       	push   0xc002b0c4
c001516f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015175:	e8 e2 bf ff ff       	call   c001115c <VgaText::puts(char const*)>
c001517a:	0f 21 f8             	mov    eax,db7
c001517d:	5a                   	pop    edx
c001517e:	59                   	pop    ecx
c001517f:	50                   	push   eax
c0015180:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0015185:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001518b:	e8 f2 bf ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0015190:	5e                   	pop    esi
c0015191:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015194:	e8 50 85 00 00       	call   c001d6e9 <Thr::getDriverNameFromAddress(unsigned long)>
c0015199:	83 c4 10             	add    esp,0x10
c001519c:	85 c0                	test   eax,eax
c001519e:	74 7d                	je     c001521d <displayDebugInfo(regs*)+0x48b>
c00151a0:	89 c6                	mov    esi,eax
c00151a2:	50                   	push   eax
c00151a3:	50                   	push   eax
c00151a4:	56                   	push   esi
c00151a5:	68 cc b0 02 c0       	push   0xc002b0cc
c00151aa:	e8 6d dd ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c00151af:	5a                   	pop    edx
c00151b0:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c00151b5:	59                   	pop    ecx
c00151b6:	68 da b0 02 c0       	push   0xc002b0da
c00151bb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151c1:	e8 96 bf ff ff       	call   c001115c <VgaText::puts(char const*)>
c00151c6:	5f                   	pop    edi
c00151c7:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c00151cc:	5d                   	pop    ebp
c00151cd:	56                   	push   esi
c00151ce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151d4:	e8 83 bf ff ff       	call   c001115c <VgaText::puts(char const*)>
c00151d9:	58                   	pop    eax
c00151da:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c00151df:	5a                   	pop    edx
c00151e0:	68 e6 b0 02 c0       	push   0xc002b0e6
c00151e5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151eb:	e8 6c bf ff ff       	call   c001115c <VgaText::puts(char const*)>
c00151f0:	59                   	pop    ecx
c00151f1:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c00151f6:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00151fc:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00151ff:	e8 1c 85 00 00       	call   c001d720 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0015204:	5b                   	pop    ebx
c0015205:	5d                   	pop    ebp
c0015206:	50                   	push   eax
c0015207:	57                   	push   edi
c0015208:	e8 75 bf ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001520d:	58                   	pop    eax
c001520e:	5a                   	pop    edx
c001520f:	56                   	push   esi
c0015210:	68 f2 b0 02 c0       	push   0xc002b0f2
c0015215:	e8 02 dd ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001521a:	83 c4 10             	add    esp,0x10
c001521d:	fa                   	cli    
c001521e:	f4                   	hlt    
c001521f:	eb fe                	jmp    c001521f <displayDebugInfo(regs*)+0x48d>

c0015221 <x87EmulHandler(regs*, void*)>:
c0015221:	53                   	push   ebx
c0015222:	83 ec 14             	sub    esp,0x14
c0015225:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015229:	53                   	push   ebx
c001522a:	e8 47 a8 00 00       	call   c001fa76 <Vm::x87Handler(regs*)>
c001522f:	83 c4 10             	add    esp,0x10
c0015232:	84 c0                	test   al,al
c0015234:	74 05                	je     c001523b <x87EmulHandler(regs*, void*)+0x1a>
c0015236:	83 c4 08             	add    esp,0x8
c0015239:	5b                   	pop    ebx
c001523a:	c3                   	ret    
c001523b:	83 ec 0c             	sub    esp,0xc
c001523e:	68 02 b1 02 c0       	push   0xc002b102
c0015243:	e8 d4 dc ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0015248:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001524b:	e8 42 fb ff ff       	call   c0014d92 <displayDebugInfo(regs*)>

c0015250 <gpFault(regs*, void*)>:
c0015250:	53                   	push   ebx
c0015251:	83 ec 14             	sub    esp,0x14
c0015254:	c7 05 54 e7 02 c0 f3 ed 01 c0 	mov    DWORD PTR ds:0xc002e754,0xc001edf3
c001525e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015262:	53                   	push   ebx
c0015263:	e8 8b 9b 00 00       	call   c001edf3 <Vm::faultHandler(regs*)>
c0015268:	83 c4 10             	add    esp,0x10
c001526b:	84 c0                	test   al,al
c001526d:	74 05                	je     c0015274 <gpFault(regs*, void*)+0x24>
c001526f:	83 c4 08             	add    esp,0x8
c0015272:	5b                   	pop    ebx
c0015273:	c3                   	ret    
c0015274:	83 ec 0c             	sub    esp,0xc
c0015277:	68 18 b1 02 c0       	push   0xc002b118
c001527c:	e8 9b dc ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0015281:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015284:	e8 09 fb ff ff       	call   c0014d92 <displayDebugInfo(regs*)>

c0015289 <pgFault(regs*, void*)>:
c0015289:	83 ec 18             	sub    esp,0x18
c001528c:	68 33 b1 02 c0       	push   0xc002b133
c0015291:	e8 86 dc ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0015296:	0f 20 d0             	mov    eax,cr2
c0015299:	5a                   	pop    edx
c001529a:	59                   	pop    ecx
c001529b:	50                   	push   eax
c001529c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152a1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152a4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00152aa:	e8 4f d8 ff ff       	call   c0012afe <VAS::tryLoadBackOffDisk(unsigned long)>
c00152af:	83 c4 10             	add    esp,0x10
c00152b2:	84 c0                	test   al,al
c00152b4:	74 04                	je     c00152ba <pgFault(regs*, void*)+0x31>
c00152b6:	83 c4 0c             	add    esp,0xc
c00152b9:	c3                   	ret    
c00152ba:	83 ec 0c             	sub    esp,0xc
c00152bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152c1:	e8 cc fa ff ff       	call   c0014d92 <displayDebugInfo(regs*)>

c00152c6 <otherISRHandler(regs*, void*)>:
c00152c6:	53                   	push   ebx
c00152c7:	83 ec 0c             	sub    esp,0xc
c00152ca:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00152ce:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00152d1:	50                   	push   eax
c00152d2:	50                   	push   eax
c00152d3:	68 40 b1 02 c0       	push   0xc002b140
c00152d8:	e8 3f dc ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c00152dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152e0:	e8 ad fa ff ff       	call   c0014d92 <displayDebugInfo(regs*)>

c00152e5 <opcodeFault(regs*, void*)>:
c00152e5:	55                   	push   ebp
c00152e6:	89 e5                	mov    ebp,esp
c00152e8:	56                   	push   esi
c00152e9:	53                   	push   ebx
c00152ea:	83 ec 40             	sub    esp,0x40
c00152ed:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c00152f2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00152f8:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c00152fe:	84 c0                	test   al,al
c0015300:	74 24                	je     c0015326 <opcodeFault(regs*, void*)+0x41>
c0015302:	83 ec 0c             	sub    esp,0xc
c0015305:	68 60 b1 02 c0       	push   0xc002b160
c001530a:	e8 0d dc ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001530f:	83 c4 10             	add    esp,0x10
c0015312:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015315:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015318:	8d 50 19             	lea    edx,[eax+0x19]
c001531b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001531e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015321:	e9 be 05 00 00       	jmp    c00158e4 <opcodeFault(regs*, void*)+0x5ff>
c0015326:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015329:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001532c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001532f:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0015333:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0015337:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001533a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001533d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0015340:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015343:	8a 00                	mov    al,BYTE PTR [eax]
c0015345:	3c f0                	cmp    al,0xf0
c0015347:	75 17                	jne    c0015360 <opcodeFault(regs*, void*)+0x7b>
c0015349:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001534c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001534f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015352:	8d 50 01             	lea    edx,[eax+0x1]
c0015355:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015358:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001535b:	e9 da 00 00 00       	jmp    c001543a <opcodeFault(regs*, void*)+0x155>
c0015360:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015363:	8a 00                	mov    al,BYTE PTR [eax]
c0015365:	3c f2                	cmp    al,0xf2
c0015367:	74 09                	je     c0015372 <opcodeFault(regs*, void*)+0x8d>
c0015369:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001536c:	8a 00                	mov    al,BYTE PTR [eax]
c001536e:	3c f3                	cmp    al,0xf3
c0015370:	75 1b                	jne    c001538d <opcodeFault(regs*, void*)+0xa8>
c0015372:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015376:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015379:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001537c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001537f:	8d 50 01             	lea    edx,[eax+0x1]
c0015382:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015385:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015388:	e9 ad 00 00 00       	jmp    c001543a <opcodeFault(regs*, void*)+0x155>
c001538d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015390:	8a 00                	mov    al,BYTE PTR [eax]
c0015392:	3c 66                	cmp    al,0x66
c0015394:	75 1f                	jne    c00153b5 <opcodeFault(regs*, void*)+0xd0>
c0015396:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001539a:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c001539e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153a7:	8d 50 01             	lea    edx,[eax+0x1]
c00153aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ad:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153b0:	e9 85 00 00 00       	jmp    c001543a <opcodeFault(regs*, void*)+0x155>
c00153b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153b8:	8a 00                	mov    al,BYTE PTR [eax]
c00153ba:	3c 67                	cmp    al,0x67
c00153bc:	75 18                	jne    c00153d6 <opcodeFault(regs*, void*)+0xf1>
c00153be:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153c2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153cb:	8d 50 01             	lea    edx,[eax+0x1]
c00153ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153d4:	eb 64                	jmp    c001543a <opcodeFault(regs*, void*)+0x155>
c00153d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d9:	8a 00                	mov    al,BYTE PTR [eax]
c00153db:	3c 2e                	cmp    al,0x2e
c00153dd:	74 09                	je     c00153e8 <opcodeFault(regs*, void*)+0x103>
c00153df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153e2:	8a 00                	mov    al,BYTE PTR [eax]
c00153e4:	3c 3e                	cmp    al,0x3e
c00153e6:	75 18                	jne    c0015400 <opcodeFault(regs*, void*)+0x11b>
c00153e8:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153ec:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153f5:	8d 50 01             	lea    edx,[eax+0x1]
c00153f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153fb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153fe:	eb 3a                	jmp    c001543a <opcodeFault(regs*, void*)+0x155>
c0015400:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015403:	8a 00                	mov    al,BYTE PTR [eax]
c0015405:	3c 36                	cmp    al,0x36
c0015407:	74 1b                	je     c0015424 <opcodeFault(regs*, void*)+0x13f>
c0015409:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001540c:	8a 00                	mov    al,BYTE PTR [eax]
c001540e:	3c 26                	cmp    al,0x26
c0015410:	74 12                	je     c0015424 <opcodeFault(regs*, void*)+0x13f>
c0015412:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015415:	8a 00                	mov    al,BYTE PTR [eax]
c0015417:	3c 64                	cmp    al,0x64
c0015419:	74 09                	je     c0015424 <opcodeFault(regs*, void*)+0x13f>
c001541b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001541e:	8a 00                	mov    al,BYTE PTR [eax]
c0015420:	3c 65                	cmp    al,0x65
c0015422:	75 16                	jne    c001543a <opcodeFault(regs*, void*)+0x155>
c0015424:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015428:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001542b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001542e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015431:	8d 50 01             	lea    edx,[eax+0x1]
c0015434:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015437:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001543a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001543d:	8a 00                	mov    al,BYTE PTR [eax]
c001543f:	3c 0f                	cmp    al,0xf
c0015441:	0f 85 ad 00 00 00    	jne    c00154f4 <opcodeFault(regs*, void*)+0x20f>
c0015447:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001544a:	40                   	inc    eax
c001544b:	8a 00                	mov    al,BYTE PTR [eax]
c001544d:	3c c2                	cmp    al,0xc2
c001544f:	74 0e                	je     c001545f <opcodeFault(regs*, void*)+0x17a>
c0015451:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015454:	40                   	inc    eax
c0015455:	8a 00                	mov    al,BYTE PTR [eax]
c0015457:	3c c3                	cmp    al,0xc3
c0015459:	0f 85 95 00 00 00    	jne    c00154f4 <opcodeFault(regs*, void*)+0x20f>
c001545f:	83 ec 0c             	sub    esp,0xc
c0015462:	68 83 b1 02 c0       	push   0xc002b183
c0015467:	e8 b0 da ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001546c:	83 c4 10             	add    esp,0x10
c001546f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015472:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015475:	8d 50 01             	lea    edx,[eax+0x1]
c0015478:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001547b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001547e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015481:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015484:	8a 00                	mov    al,BYTE PTR [eax]
c0015486:	8d 50 fe             	lea    edx,[eax-0x2]
c0015489:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001548c:	88 10                	mov    BYTE PTR [eax],dl
c001548e:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0015491:	50                   	push   eax
c0015492:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0015495:	50                   	push   eax
c0015496:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0015499:	50                   	push   eax
c001549a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001549d:	e8 e2 47 00 00       	call   c0019c84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00154a2:	83 c4 10             	add    esp,0x10
c00154a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154ab:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00154ae:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00154b1:	01 d0                	add    eax,edx
c00154b3:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00154b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154b9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154bc:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00154bf:	48                   	dec    eax
c00154c0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00154c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154c6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00154c9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154cf:	83 ec 04             	sub    esp,0x4
c00154d2:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00154d5:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00154d8:	50                   	push   eax
c00154d9:	e8 d6 ac fe ff       	call   c00001b4 <voodooXADD>
c00154de:	83 c4 10             	add    esp,0x10
c00154e1:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00154e4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00154e7:	01 c2                	add    edx,eax
c00154e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ec:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154ef:	e9 f0 03 00 00       	jmp    c00158e4 <opcodeFault(regs*, void*)+0x5ff>
c00154f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154f7:	8a 00                	mov    al,BYTE PTR [eax]
c00154f9:	3c 0f                	cmp    al,0xf
c00154fb:	0f 85 8b 01 00 00    	jne    c001568c <opcodeFault(regs*, void*)+0x3a7>
c0015501:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015504:	40                   	inc    eax
c0015505:	8a 00                	mov    al,BYTE PTR [eax]
c0015507:	3c c7                	cmp    al,0xc7
c0015509:	0f 86 7d 01 00 00    	jbe    c001568c <opcodeFault(regs*, void*)+0x3a7>
c001550f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015512:	40                   	inc    eax
c0015513:	8a 00                	mov    al,BYTE PTR [eax]
c0015515:	3c cf                	cmp    al,0xcf
c0015517:	0f 87 6f 01 00 00    	ja     c001568c <opcodeFault(regs*, void*)+0x3a7>
c001551d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015520:	40                   	inc    eax
c0015521:	8a 00                	mov    al,BYTE PTR [eax]
c0015523:	83 c0 38             	add    eax,0x38
c0015526:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0015529:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001552d:	75 0b                	jne    c001553a <opcodeFault(regs*, void*)+0x255>
c001552f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015532:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015535:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015538:	eb 75                	jmp    c00155af <opcodeFault(regs*, void*)+0x2ca>
c001553a:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001553e:	75 0b                	jne    c001554b <opcodeFault(regs*, void*)+0x266>
c0015540:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015543:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015546:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015549:	eb 64                	jmp    c00155af <opcodeFault(regs*, void*)+0x2ca>
c001554b:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001554f:	75 0b                	jne    c001555c <opcodeFault(regs*, void*)+0x277>
c0015551:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015554:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015557:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001555a:	eb 53                	jmp    c00155af <opcodeFault(regs*, void*)+0x2ca>
c001555c:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015560:	75 0b                	jne    c001556d <opcodeFault(regs*, void*)+0x288>
c0015562:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015565:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015568:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001556b:	eb 42                	jmp    c00155af <opcodeFault(regs*, void*)+0x2ca>
c001556d:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015571:	75 0b                	jne    c001557e <opcodeFault(regs*, void*)+0x299>
c0015573:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015576:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015579:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001557c:	eb 31                	jmp    c00155af <opcodeFault(regs*, void*)+0x2ca>
c001557e:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015582:	75 0b                	jne    c001558f <opcodeFault(regs*, void*)+0x2aa>
c0015584:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015587:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001558a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001558d:	eb 20                	jmp    c00155af <opcodeFault(regs*, void*)+0x2ca>
c001558f:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015593:	75 0b                	jne    c00155a0 <opcodeFault(regs*, void*)+0x2bb>
c0015595:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015598:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001559b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001559e:	eb 0f                	jmp    c00155af <opcodeFault(regs*, void*)+0x2ca>
c00155a0:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00155a4:	75 09                	jne    c00155af <opcodeFault(regs*, void*)+0x2ca>
c00155a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155a9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00155ac:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155af:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00155b3:	74 10                	je     c00155c5 <opcodeFault(regs*, void*)+0x2e0>
c00155b5:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c00155bc:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c00155c3:	eb 2d                	jmp    c00155f2 <opcodeFault(regs*, void*)+0x30d>
c00155c5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155c8:	c1 e0 18             	shl    eax,0x18
c00155cb:	89 c2                	mov    edx,eax
c00155cd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155d0:	c1 e0 08             	shl    eax,0x8
c00155d3:	25 00 00 ff 00       	and    eax,0xff0000
c00155d8:	09 c2                	or     edx,eax
c00155da:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155dd:	c1 e8 08             	shr    eax,0x8
c00155e0:	25 00 ff 00 00       	and    eax,0xff00
c00155e5:	09 c2                	or     edx,eax
c00155e7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155ea:	c1 e8 18             	shr    eax,0x18
c00155ed:	09 d0                	or     eax,edx
c00155ef:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155f2:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00155f6:	75 0b                	jne    c0015603 <opcodeFault(regs*, void*)+0x31e>
c00155f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155fb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155fe:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015601:	eb 75                	jmp    c0015678 <opcodeFault(regs*, void*)+0x393>
c0015603:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015607:	75 0b                	jne    c0015614 <opcodeFault(regs*, void*)+0x32f>
c0015609:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001560c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001560f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015612:	eb 64                	jmp    c0015678 <opcodeFault(regs*, void*)+0x393>
c0015614:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015618:	75 0b                	jne    c0015625 <opcodeFault(regs*, void*)+0x340>
c001561a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001561d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015620:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015623:	eb 53                	jmp    c0015678 <opcodeFault(regs*, void*)+0x393>
c0015625:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015629:	75 0b                	jne    c0015636 <opcodeFault(regs*, void*)+0x351>
c001562b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001562e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015631:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015634:	eb 42                	jmp    c0015678 <opcodeFault(regs*, void*)+0x393>
c0015636:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001563a:	75 0b                	jne    c0015647 <opcodeFault(regs*, void*)+0x362>
c001563c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001563f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015642:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015645:	eb 31                	jmp    c0015678 <opcodeFault(regs*, void*)+0x393>
c0015647:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001564b:	75 0b                	jne    c0015658 <opcodeFault(regs*, void*)+0x373>
c001564d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015650:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015653:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015656:	eb 20                	jmp    c0015678 <opcodeFault(regs*, void*)+0x393>
c0015658:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001565c:	75 0b                	jne    c0015669 <opcodeFault(regs*, void*)+0x384>
c001565e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015661:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015664:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015667:	eb 0f                	jmp    c0015678 <opcodeFault(regs*, void*)+0x393>
c0015669:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001566d:	75 09                	jne    c0015678 <opcodeFault(regs*, void*)+0x393>
c001566f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015672:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015675:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015678:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001567b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001567e:	8d 50 02             	lea    edx,[eax+0x2]
c0015681:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015684:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015687:	e9 58 02 00 00       	jmp    c00158e4 <opcodeFault(regs*, void*)+0x5ff>
c001568c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001568f:	8a 00                	mov    al,BYTE PTR [eax]
c0015691:	3c 0f                	cmp    al,0xf
c0015693:	0f 85 76 01 00 00    	jne    c001580f <opcodeFault(regs*, void*)+0x52a>
c0015699:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001569c:	40                   	inc    eax
c001569d:	8a 00                	mov    al,BYTE PTR [eax]
c001569f:	3c c7                	cmp    al,0xc7
c00156a1:	0f 85 68 01 00 00    	jne    c001580f <opcodeFault(regs*, void*)+0x52a>
c00156a7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00156aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ad:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156b0:	8d 50 01             	lea    edx,[eax+0x1]
c00156b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156b9:	8d 45 ba             	lea    eax,[ebp-0x46]
c00156bc:	50                   	push   eax
c00156bd:	8d 45 bb             	lea    eax,[ebp-0x45]
c00156c0:	50                   	push   eax
c00156c1:	8d 45 bc             	lea    eax,[ebp-0x44]
c00156c4:	50                   	push   eax
c00156c5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00156c8:	e8 b7 45 00 00       	call   c0019c84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00156cd:	83 c4 10             	add    esp,0x10
c00156d0:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00156d3:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00156d6:	83 f0 01             	xor    eax,0x1
c00156d9:	84 c0                	test   al,al
c00156db:	0f 84 2e 01 00 00    	je     c001580f <opcodeFault(regs*, void*)+0x52a>
c00156e1:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c00156e4:	3c 01                	cmp    al,0x1
c00156e6:	0f 85 23 01 00 00    	jne    c001580f <opcodeFault(regs*, void*)+0x52a>
c00156ec:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00156ef:	83 f0 01             	xor    eax,0x1
c00156f2:	84 c0                	test   al,al
c00156f4:	0f 84 15 01 00 00    	je     c001580f <opcodeFault(regs*, void*)+0x52a>
c00156fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156fd:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015700:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015703:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001570a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001570d:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015710:	89 c2                	mov    edx,eax
c0015712:	b8 00 00 00 00       	mov    eax,0x0
c0015717:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001571a:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001571d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015720:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015723:	ba 00 00 00 00       	mov    edx,0x0
c0015728:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c001572b:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c001572e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015731:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015734:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015737:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001573e:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015741:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015744:	89 c2                	mov    edx,eax
c0015746:	b8 00 00 00 00       	mov    eax,0x0
c001574b:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001574e:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015754:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015757:	ba 00 00 00 00       	mov    edx,0x0
c001575c:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001575f:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015762:	e8 7b 86 00 00       	call   c001dde2 <lockScheduler()>
c0015767:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001576a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001576d:	8b 00                	mov    eax,DWORD PTR [eax]
c001576f:	89 c1                	mov    ecx,eax
c0015771:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015774:	89 cb                	mov    ebx,ecx
c0015776:	89 d0                	mov    eax,edx
c0015778:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c001577b:	89 c6                	mov    esi,eax
c001577d:	89 f0                	mov    eax,esi
c001577f:	09 d8                	or     eax,ebx
c0015781:	85 c0                	test   eax,eax
c0015783:	75 21                	jne    c00157a6 <opcodeFault(regs*, void*)+0x4c1>
c0015785:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015788:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001578b:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001578e:	89 01                	mov    DWORD PTR [ecx],eax
c0015790:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015793:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015796:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015799:	83 c8 40             	or     eax,0x40
c001579c:	89 c2                	mov    edx,eax
c001579e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a1:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00157a4:	eb 3e                	jmp    c00157e4 <opcodeFault(regs*, void*)+0x4ff>
c00157a6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00157a9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00157ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00157ae:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00157b1:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00157b4:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00157b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ba:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00157bd:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00157c0:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00157c3:	89 d0                	mov    eax,edx
c00157c5:	31 d2                	xor    edx,edx
c00157c7:	89 c3                	mov    ebx,eax
c00157c9:	89 d6                	mov    esi,edx
c00157cb:	89 da                	mov    edx,ebx
c00157cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d0:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00157d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157d9:	83 e0 bf             	and    eax,0xffffffbf
c00157dc:	89 c2                	mov    edx,eax
c00157de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e1:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00157e4:	e8 fb 85 00 00       	call   c001dde4 <unlockScheduler()>
c00157e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ec:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00157ef:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00157f2:	01 c2                	add    edx,eax
c00157f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00157fa:	83 ec 0c             	sub    esp,0xc
c00157fd:	68 92 b1 02 c0       	push   0xc002b192
c0015802:	e8 15 d7 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0015807:	83 c4 10             	add    esp,0x10
c001580a:	e9 d5 00 00 00       	jmp    c00158e4 <opcodeFault(regs*, void*)+0x5ff>
c001580f:	83 ec 0c             	sub    esp,0xc
c0015812:	68 a5 b1 02 c0       	push   0xc002b1a5
c0015817:	e8 00 d7 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001581c:	83 c4 10             	add    esp,0x10
c001581f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015822:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015825:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015828:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001582b:	c1 e0 04             	shl    eax,0x4
c001582e:	01 d0                	add    eax,edx
c0015830:	83 c0 03             	add    eax,0x3
c0015833:	8a 00                	mov    al,BYTE PTR [eax]
c0015835:	0f b6 d8             	movzx  ebx,al
c0015838:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001583b:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001583e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015841:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015844:	c1 e0 04             	shl    eax,0x4
c0015847:	01 d0                	add    eax,edx
c0015849:	83 c0 02             	add    eax,0x2
c001584c:	8a 00                	mov    al,BYTE PTR [eax]
c001584e:	0f b6 c8             	movzx  ecx,al
c0015851:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015854:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015857:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001585a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001585d:	c1 e0 04             	shl    eax,0x4
c0015860:	01 d0                	add    eax,edx
c0015862:	40                   	inc    eax
c0015863:	8a 00                	mov    al,BYTE PTR [eax]
c0015865:	0f b6 d0             	movzx  edx,al
c0015868:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001586b:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c001586e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015871:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015874:	c1 e0 04             	shl    eax,0x4
c0015877:	01 f0                	add    eax,esi
c0015879:	8a 00                	mov    al,BYTE PTR [eax]
c001587b:	0f b6 c0             	movzx  eax,al
c001587e:	83 ec 0c             	sub    esp,0xc
c0015881:	53                   	push   ebx
c0015882:	51                   	push   ecx
c0015883:	52                   	push   edx
c0015884:	50                   	push   eax
c0015885:	68 b8 b1 02 c0       	push   0xc002b1b8
c001588a:	e8 8d d6 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001588f:	83 c4 20             	add    esp,0x20
c0015892:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015895:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015898:	83 c0 03             	add    eax,0x3
c001589b:	8a 00                	mov    al,BYTE PTR [eax]
c001589d:	0f b6 d8             	movzx  ebx,al
c00158a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158a6:	83 c0 02             	add    eax,0x2
c00158a9:	8a 00                	mov    al,BYTE PTR [eax]
c00158ab:	0f b6 c8             	movzx  ecx,al
c00158ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158b4:	40                   	inc    eax
c00158b5:	8a 00                	mov    al,BYTE PTR [eax]
c00158b7:	0f b6 d0             	movzx  edx,al
c00158ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158bd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158c0:	8a 00                	mov    al,BYTE PTR [eax]
c00158c2:	0f b6 c0             	movzx  eax,al
c00158c5:	83 ec 0c             	sub    esp,0xc
c00158c8:	53                   	push   ebx
c00158c9:	51                   	push   ecx
c00158ca:	52                   	push   edx
c00158cb:	50                   	push   eax
c00158cc:	68 e0 b1 02 c0       	push   0xc002b1e0
c00158d1:	e8 46 d6 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c00158d6:	83 c4 20             	add    esp,0x20
c00158d9:	83 ec 0c             	sub    esp,0xc
c00158dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00158df:	e8 ae f4 ff ff       	call   c0014d92 <displayDebugInfo(regs*)>
c00158e4:	8d 65 f8             	lea    esp,[ebp-0x8]
c00158e7:	5b                   	pop    ebx
c00158e8:	5e                   	pop    esi
c00158e9:	5d                   	pop    ebp
c00158ea:	c3                   	ret    

c00158eb <displayProgramFault(char const*)>:
c00158eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158f0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00158f3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00158f9:	85 c0                	test   eax,eax
c00158fb:	74 15                	je     c0015912 <displayProgramFault(char const*)+0x27>
c00158fd:	83 ec 0c             	sub    esp,0xc
c0015900:	6a 04                	push   0x4
c0015902:	6a 0f                	push   0xf
c0015904:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015908:	50                   	push   eax
c0015909:	e8 10 b5 ff ff       	call   c0010e1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c001590e:	83 c4 1c             	add    esp,0x1c
c0015911:	c3                   	ret    
c0015912:	c3                   	ret    

c0015913 <setupInterruptController()>:
c0015913:	55                   	push   ebp
c0015914:	89 e5                	mov    ebp,esp
c0015916:	53                   	push   ebx
c0015917:	83 ec 24             	sub    esp,0x24
c001591a:	b8 00 00 00 00       	mov    eax,0x0
c001591f:	85 c0                	test   eax,eax
c0015921:	0f 95 c0             	setne  al
c0015924:	84 c0                	test   al,al
c0015926:	74 5b                	je     c0015983 <setupInterruptController()+0x70>
c0015928:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c001592f:	83 ec 0c             	sub    esp,0xc
c0015932:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015935:	e8 06 9f ff ff       	call   c000f840 <malloc>
c001593a:	83 c4 10             	add    esp,0x10
c001593d:	89 c3                	mov    ebx,eax
c001593f:	83 ec 0c             	sub    esp,0xc
c0015942:	53                   	push   ebx
c0015943:	e8 f2 ff 00 00       	call   c002593a <APIC::APIC()>
c0015948:	83 c4 10             	add    esp,0x10
c001594b:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c001594e:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015951:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015954:	8b 00                	mov    eax,DWORD PTR [eax]
c0015956:	83 c0 08             	add    eax,0x8
c0015959:	8b 00                	mov    eax,DWORD PTR [eax]
c001595b:	6a 00                	push   0x0
c001595d:	6a 00                	push   0x0
c001595f:	6a 00                	push   0x0
c0015961:	52                   	push   edx
c0015962:	ff d0                	call   eax
c0015964:	83 c4 10             	add    esp,0x10
c0015967:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c001596c:	83 ec 08             	sub    esp,0x8
c001596f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015972:	50                   	push   eax
c0015973:	e8 ca e9 ff ff       	call   c0014342 <Device::addChild(Device*)>
c0015978:	83 c4 10             	add    esp,0x10
c001597b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001597e:	e9 52 03 00 00       	jmp    c0015cd5 <setupInterruptController()+0x3c2>
c0015983:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c0015988:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001598e:	83 e0 01             	and    eax,0x1
c0015991:	84 c0                	test   al,al
c0015993:	0f 95 c0             	setne  al
c0015996:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015999:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00159a0:	83 ec 0c             	sub    esp,0xc
c00159a3:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00159a6:	e8 95 9e ff ff       	call   c000f840 <malloc>
c00159ab:	83 c4 10             	add    esp,0x10
c00159ae:	89 c3                	mov    ebx,eax
c00159b0:	83 ec 0c             	sub    esp,0xc
c00159b3:	53                   	push   ebx
c00159b4:	e8 d9 04 01 00       	call   c0025e92 <PIC::PIC()>
c00159b9:	83 c4 10             	add    esp,0x10
c00159bc:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00159bf:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00159c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00159c7:	83 c0 08             	add    eax,0x8
c00159ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00159cc:	6a 00                	push   0x0
c00159ce:	6a 00                	push   0x0
c00159d0:	6a 00                	push   0x0
c00159d2:	52                   	push   edx
c00159d3:	ff d0                	call   eax
c00159d5:	83 c4 10             	add    esp,0x10
c00159d8:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00159dc:	74 73                	je     c0015a51 <setupInterruptController()+0x13e>
c00159de:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00159e1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00159e6:	83 c0 0c             	add    eax,0xc
c00159e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00159eb:	6a 00                	push   0x0
c00159ed:	6a 00                	push   0x0
c00159ef:	6a 00                	push   0x0
c00159f1:	52                   	push   edx
c00159f2:	ff d0                	call   eax
c00159f4:	83 c4 10             	add    esp,0x10
c00159f7:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00159fb:	74 15                	je     c0015a12 <setupInterruptController()+0xff>
c00159fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a00:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a02:	83 c0 04             	add    eax,0x4
c0015a05:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a07:	83 ec 0c             	sub    esp,0xc
c0015a0a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a0d:	ff d0                	call   eax
c0015a0f:	83 c4 10             	add    esp,0x10
c0015a12:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015a19:	83 ec 0c             	sub    esp,0xc
c0015a1c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015a1f:	e8 1c 9e ff ff       	call   c000f840 <malloc>
c0015a24:	83 c4 10             	add    esp,0x10
c0015a27:	89 c3                	mov    ebx,eax
c0015a29:	83 ec 0c             	sub    esp,0xc
c0015a2c:	53                   	push   ebx
c0015a2d:	e8 08 ff 00 00       	call   c002593a <APIC::APIC()>
c0015a32:	83 c4 10             	add    esp,0x10
c0015a35:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a38:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a3b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a40:	83 c0 08             	add    eax,0x8
c0015a43:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a45:	6a 00                	push   0x0
c0015a47:	6a 00                	push   0x0
c0015a49:	6a 00                	push   0x0
c0015a4b:	52                   	push   edx
c0015a4c:	ff d0                	call   eax
c0015a4e:	83 c4 10             	add    esp,0x10
c0015a51:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c0015a56:	83 ec 08             	sub    esp,0x8
c0015a59:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a5c:	50                   	push   eax
c0015a5d:	e8 e0 e8 ff ff       	call   c0014342 <Device::addChild(Device*)>
c0015a62:	83 c4 10             	add    esp,0x10
c0015a65:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a68:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a6a:	83 c0 24             	add    eax,0x24
c0015a6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a6f:	6a 00                	push   0x0
c0015a71:	68 c6 52 01 c0       	push   0xc00152c6
c0015a76:	6a 00                	push   0x0
c0015a78:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a7b:	ff d0                	call   eax
c0015a7d:	83 c4 10             	add    esp,0x10
c0015a80:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a83:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a85:	83 c0 24             	add    eax,0x24
c0015a88:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a8a:	6a 00                	push   0x0
c0015a8c:	68 c6 52 01 c0       	push   0xc00152c6
c0015a91:	6a 01                	push   0x1
c0015a93:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a96:	ff d0                	call   eax
c0015a98:	83 c4 10             	add    esp,0x10
c0015a9b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa0:	83 c0 24             	add    eax,0x24
c0015aa3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa5:	6a 00                	push   0x0
c0015aa7:	68 ef 4b 01 c0       	push   0xc0014bef
c0015aac:	6a 02                	push   0x2
c0015aae:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ab1:	ff d0                	call   eax
c0015ab3:	83 c4 10             	add    esp,0x10
c0015ab6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ab9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015abb:	83 c0 24             	add    eax,0x24
c0015abe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac0:	6a 00                	push   0x0
c0015ac2:	68 c6 52 01 c0       	push   0xc00152c6
c0015ac7:	6a 03                	push   0x3
c0015ac9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015acc:	ff d0                	call   eax
c0015ace:	83 c4 10             	add    esp,0x10
c0015ad1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ad4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad6:	83 c0 24             	add    eax,0x24
c0015ad9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015adb:	6a 00                	push   0x0
c0015add:	68 c6 52 01 c0       	push   0xc00152c6
c0015ae2:	6a 04                	push   0x4
c0015ae4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ae7:	ff d0                	call   eax
c0015ae9:	83 c4 10             	add    esp,0x10
c0015aec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aef:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af1:	83 c0 24             	add    eax,0x24
c0015af4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af6:	6a 00                	push   0x0
c0015af8:	68 c6 52 01 c0       	push   0xc00152c6
c0015afd:	6a 05                	push   0x5
c0015aff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b02:	ff d0                	call   eax
c0015b04:	83 c4 10             	add    esp,0x10
c0015b07:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b0c:	83 c0 24             	add    eax,0x24
c0015b0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b11:	6a 00                	push   0x0
c0015b13:	68 e5 52 01 c0       	push   0xc00152e5
c0015b18:	6a 06                	push   0x6
c0015b1a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b1d:	ff d0                	call   eax
c0015b1f:	83 c4 10             	add    esp,0x10
c0015b22:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b25:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b27:	83 c0 24             	add    eax,0x24
c0015b2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b2c:	6a 00                	push   0x0
c0015b2e:	68 21 52 01 c0       	push   0xc0015221
c0015b33:	6a 07                	push   0x7
c0015b35:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b38:	ff d0                	call   eax
c0015b3a:	83 c4 10             	add    esp,0x10
c0015b3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b40:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b42:	83 c0 24             	add    eax,0x24
c0015b45:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b47:	6a 00                	push   0x0
c0015b49:	68 0a 4a 01 c0       	push   0xc0014a0a
c0015b4e:	6a 08                	push   0x8
c0015b50:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b53:	ff d0                	call   eax
c0015b55:	83 c4 10             	add    esp,0x10
c0015b58:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b5d:	83 c0 24             	add    eax,0x24
c0015b60:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b62:	6a 00                	push   0x0
c0015b64:	68 c6 52 01 c0       	push   0xc00152c6
c0015b69:	6a 09                	push   0x9
c0015b6b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b6e:	ff d0                	call   eax
c0015b70:	83 c4 10             	add    esp,0x10
c0015b73:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b76:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b78:	83 c0 24             	add    eax,0x24
c0015b7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b7d:	6a 00                	push   0x0
c0015b7f:	68 c6 52 01 c0       	push   0xc00152c6
c0015b84:	6a 0a                	push   0xa
c0015b86:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b89:	ff d0                	call   eax
c0015b8b:	83 c4 10             	add    esp,0x10
c0015b8e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b91:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b93:	83 c0 24             	add    eax,0x24
c0015b96:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b98:	6a 00                	push   0x0
c0015b9a:	68 c6 52 01 c0       	push   0xc00152c6
c0015b9f:	6a 0b                	push   0xb
c0015ba1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ba4:	ff d0                	call   eax
c0015ba6:	83 c4 10             	add    esp,0x10
c0015ba9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bac:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bae:	83 c0 24             	add    eax,0x24
c0015bb1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb3:	6a 00                	push   0x0
c0015bb5:	68 c6 52 01 c0       	push   0xc00152c6
c0015bba:	6a 0c                	push   0xc
c0015bbc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bbf:	ff d0                	call   eax
c0015bc1:	83 c4 10             	add    esp,0x10
c0015bc4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bc7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc9:	83 c0 24             	add    eax,0x24
c0015bcc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bce:	6a 00                	push   0x0
c0015bd0:	68 50 52 01 c0       	push   0xc0015250
c0015bd5:	6a 0d                	push   0xd
c0015bd7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bda:	ff d0                	call   eax
c0015bdc:	83 c4 10             	add    esp,0x10
c0015bdf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015be2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be4:	83 c0 24             	add    eax,0x24
c0015be7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be9:	6a 00                	push   0x0
c0015beb:	68 89 52 01 c0       	push   0xc0015289
c0015bf0:	6a 0e                	push   0xe
c0015bf2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bf5:	ff d0                	call   eax
c0015bf7:	83 c4 10             	add    esp,0x10
c0015bfa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bfd:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bff:	83 c0 24             	add    eax,0x24
c0015c02:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c04:	6a 00                	push   0x0
c0015c06:	68 c6 52 01 c0       	push   0xc00152c6
c0015c0b:	6a 0f                	push   0xf
c0015c0d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c10:	ff d0                	call   eax
c0015c12:	83 c4 10             	add    esp,0x10
c0015c15:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c18:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c1a:	83 c0 24             	add    eax,0x24
c0015c1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c1f:	6a 00                	push   0x0
c0015c21:	68 c6 52 01 c0       	push   0xc00152c6
c0015c26:	6a 10                	push   0x10
c0015c28:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c2b:	ff d0                	call   eax
c0015c2d:	83 c4 10             	add    esp,0x10
c0015c30:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c33:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c35:	83 c0 24             	add    eax,0x24
c0015c38:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c3a:	6a 00                	push   0x0
c0015c3c:	68 c6 52 01 c0       	push   0xc00152c6
c0015c41:	6a 11                	push   0x11
c0015c43:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c46:	ff d0                	call   eax
c0015c48:	83 c4 10             	add    esp,0x10
c0015c4b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c50:	83 c0 24             	add    eax,0x24
c0015c53:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c55:	6a 00                	push   0x0
c0015c57:	68 c6 52 01 c0       	push   0xc00152c6
c0015c5c:	6a 12                	push   0x12
c0015c5e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c61:	ff d0                	call   eax
c0015c63:	83 c4 10             	add    esp,0x10
c0015c66:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c69:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c6b:	83 c0 24             	add    eax,0x24
c0015c6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c70:	6a 00                	push   0x0
c0015c72:	68 c6 52 01 c0       	push   0xc00152c6
c0015c77:	6a 13                	push   0x13
c0015c79:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c7c:	ff d0                	call   eax
c0015c7e:	83 c4 10             	add    esp,0x10
c0015c81:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c84:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c86:	83 c0 24             	add    eax,0x24
c0015c89:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c8b:	6a 00                	push   0x0
c0015c8d:	68 c6 52 01 c0       	push   0xc00152c6
c0015c92:	6a 14                	push   0x14
c0015c94:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c97:	ff d0                	call   eax
c0015c99:	83 c4 10             	add    esp,0x10
c0015c9c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ca1:	83 c0 24             	add    eax,0x24
c0015ca4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ca6:	6a 00                	push   0x0
c0015ca8:	68 c6 52 01 c0       	push   0xc00152c6
c0015cad:	6a 1e                	push   0x1e
c0015caf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cb2:	ff d0                	call   eax
c0015cb4:	83 c4 10             	add    esp,0x10
c0015cb7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cba:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cbc:	83 c0 24             	add    eax,0x24
c0015cbf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cc1:	6a 00                	push   0x0
c0015cc3:	68 91 c7 01 c0       	push   0xc001c791
c0015cc8:	6a 60                	push   0x60
c0015cca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ccd:	ff d0                	call   eax
c0015ccf:	83 c4 10             	add    esp,0x10
c0015cd2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cd5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015cd8:	c9                   	leave  
c0015cd9:	c3                   	ret    

c0015cda <InterruptController::convertLegacyIRQNumber(int)>:
c0015cda:	55                   	push   ebp
c0015cdb:	89 e5                	mov    ebp,esp
c0015cdd:	83 ec 08             	sub    esp,0x8
c0015ce0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ce3:	83 ec 0c             	sub    esp,0xc
c0015ce6:	50                   	push   eax
c0015ce7:	e8 42 e9 ff ff       	call   c001462e <Device::getName()>
c0015cec:	83 c4 10             	add    esp,0x10
c0015cef:	8a 00                	mov    al,BYTE PTR [eax]
c0015cf1:	3c 41                	cmp    al,0x41
c0015cf3:	0f 94 c0             	sete   al
c0015cf6:	84 c0                	test   al,al
c0015cf8:	74 28                	je     c0015d22 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015cfa:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015cfe:	7f 12                	jg     c0015d12 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015d00:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d03:	05 00 d8 02 c0       	add    eax,0xc002d800
c0015d08:	8a 00                	mov    al,BYTE PTR [eax]
c0015d0a:	0f b6 c0             	movzx  eax,al
c0015d0d:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015d10:	eb 10                	jmp    c0015d22 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d12:	83 ec 0c             	sub    esp,0xc
c0015d15:	68 00 af 02 c0       	push   0xc002af00
c0015d1a:	e8 9e 48 00 00       	call   c001a5bd <Krnl::panic(char const*)>
c0015d1f:	83 c4 10             	add    esp,0x10
c0015d22:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d25:	c9                   	leave  
c0015d26:	c3                   	ret    
c0015d27:	90                   	nop

c0015d28 <startGUI(void*)>:
c0015d28:	55                   	push   ebp
c0015d29:	89 e5                	mov    ebp,esp
c0015d2b:	53                   	push   ebx
c0015d2c:	83 ec 04             	sub    esp,0x4
c0015d2f:	e8 b0 80 00 00       	call   c001dde4 <unlockScheduler()>
c0015d34:	8b 1d a8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5a8
c0015d3a:	83 ec 08             	sub    esp,0x8
c0015d3d:	6a 01                	push   0x1
c0015d3f:	68 50 b2 02 c0       	push   0xc002b250
c0015d44:	e8 f1 79 00 00       	call   c001d73a <Thr::loadDLL(char const*, bool)>
c0015d49:	83 c4 10             	add    esp,0x10
c0015d4c:	83 ec 08             	sub    esp,0x8
c0015d4f:	53                   	push   ebx
c0015d50:	50                   	push   eax
c0015d51:	e8 18 7c 00 00       	call   c001d96e <Thr::executeDLL(unsigned long, void*)>
c0015d56:	83 c4 10             	add    esp,0x10
c0015d59:	8b 1d a8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5a8
c0015d5f:	83 ec 08             	sub    esp,0x8
c0015d62:	6a 01                	push   0x1
c0015d64:	68 6a b2 02 c0       	push   0xc002b26a
c0015d69:	e8 cc 79 00 00       	call   c001d73a <Thr::loadDLL(char const*, bool)>
c0015d6e:	83 c4 10             	add    esp,0x10
c0015d71:	83 ec 08             	sub    esp,0x8
c0015d74:	53                   	push   ebx
c0015d75:	50                   	push   eax
c0015d76:	e8 f3 7b 00 00       	call   c001d96e <Thr::executeDLL(unsigned long, void*)>
c0015d7b:	83 c4 10             	add    esp,0x10
c0015d7e:	90                   	nop
c0015d7f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d82:	c9                   	leave  
c0015d83:	c3                   	ret    

c0015d84 <startGUIVESA(void*)>:
c0015d84:	55                   	push   ebp
c0015d85:	89 e5                	mov    ebp,esp
c0015d87:	53                   	push   ebx
c0015d88:	83 ec 04             	sub    esp,0x4
c0015d8b:	e8 54 80 00 00       	call   c001dde4 <unlockScheduler()>
c0015d90:	8b 1d a8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5a8
c0015d96:	83 ec 08             	sub    esp,0x8
c0015d99:	6a 01                	push   0x1
c0015d9b:	68 84 b2 02 c0       	push   0xc002b284
c0015da0:	e8 95 79 00 00       	call   c001d73a <Thr::loadDLL(char const*, bool)>
c0015da5:	83 c4 10             	add    esp,0x10
c0015da8:	83 ec 08             	sub    esp,0x8
c0015dab:	53                   	push   ebx
c0015dac:	50                   	push   eax
c0015dad:	e8 bc 7b 00 00       	call   c001d96e <Thr::executeDLL(unsigned long, void*)>
c0015db2:	83 c4 10             	add    esp,0x10
c0015db5:	8b 1d a8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5a8
c0015dbb:	83 ec 08             	sub    esp,0x8
c0015dbe:	6a 01                	push   0x1
c0015dc0:	68 6a b2 02 c0       	push   0xc002b26a
c0015dc5:	e8 70 79 00 00       	call   c001d73a <Thr::loadDLL(char const*, bool)>
c0015dca:	83 c4 10             	add    esp,0x10
c0015dcd:	83 ec 08             	sub    esp,0x8
c0015dd0:	53                   	push   ebx
c0015dd1:	50                   	push   eax
c0015dd2:	e8 97 7b 00 00       	call   c001d96e <Thr::executeDLL(unsigned long, void*)>
c0015dd7:	83 c4 10             	add    esp,0x10
c0015dda:	90                   	nop
c0015ddb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015dde:	c9                   	leave  
c0015ddf:	c3                   	ret    

c0015de0 <sendKeyToTerminal(unsigned char)>:
c0015de0:	55                   	push   ebp
c0015de1:	89 e5                	mov    ebp,esp
c0015de3:	83 ec 28             	sub    esp,0x28
c0015de6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015de9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015dec:	a1 84 e6 02 c0       	mov    eax,ds:0xc002e684
c0015df1:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015df5:	83 ec 08             	sub    esp,0x8
c0015df8:	52                   	push   edx
c0015df9:	50                   	push   eax
c0015dfa:	e8 5b b5 ff ff       	call   c001135a <VgaText::receiveKey(unsigned char)>
c0015dff:	83 c4 10             	add    esp,0x10
c0015e02:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015e06:	75 41                	jne    c0015e49 <sendKeyToTerminal(unsigned char)+0x69>
c0015e08:	e8 fc 7f 00 00       	call   c001de09 <lockStuff()>
c0015e0d:	a1 60 e7 02 c0       	mov    eax,ds:0xc002e760
c0015e12:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e15:	c7 05 60 e7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e760,0x0
c0015e1f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015e23:	74 1f                	je     c0015e44 <sendKeyToTerminal(unsigned char)+0x64>
c0015e25:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e28:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015e2b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015e2e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015e31:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e34:	83 ec 0c             	sub    esp,0xc
c0015e37:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015e3a:	e8 bb 85 00 00       	call   c001e3fa <unblockTask(ThreadControlBlock*)>
c0015e3f:	83 c4 10             	add    esp,0x10
c0015e42:	eb db                	jmp    c0015e1f <sendKeyToTerminal(unsigned char)+0x3f>
c0015e44:	e8 5a 83 00 00       	call   c001e1a3 <unlockStuff()>
c0015e49:	90                   	nop
c0015e4a:	c9                   	leave  
c0015e4b:	c3                   	ret    

c0015e4c <sendKeyboardToken(KeyboardToken)>:
c0015e4c:	55                   	push   ebp
c0015e4d:	89 e5                	mov    ebp,esp
c0015e4f:	83 ec 18             	sub    esp,0x18
c0015e52:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015e55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e58:	0f b7 c0             	movzx  eax,ax
c0015e5b:	83 f2 01             	xor    edx,0x1
c0015e5e:	88 90 80 e7 02 c0    	mov    BYTE PTR [eax-0x3ffd1880],dl
c0015e64:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c0015e69:	85 c0                	test   eax,eax
c0015e6b:	74 24                	je     c0015e91 <sendKeyboardToken(KeyboardToken)+0x45>
c0015e6d:	8b 0d 68 e7 02 c0    	mov    ecx,DWORD PTR ds:0xc002e768
c0015e73:	83 ec 04             	sub    esp,0x4
c0015e76:	68 80 e7 02 c0       	push   0xc002e780
c0015e7b:	83 ec 08             	sub    esp,0x8
c0015e7e:	89 e2                	mov    edx,esp
c0015e80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e83:	89 02                	mov    DWORD PTR [edx],eax
c0015e85:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015e88:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015e8c:	ff d1                	call   ecx
c0015e8e:	83 c4 10             	add    esp,0x10
c0015e91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e94:	66 3d 03 02          	cmp    ax,0x203
c0015e98:	75 07                	jne    c0015ea1 <sendKeyboardToken(KeyboardToken)+0x55>
c0015e9a:	a0 80 e8 02 c0       	mov    al,ds:0xc002e880
c0015e9f:	84 c0                	test   al,al
c0015ea1:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015ea5:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015ea8:	a0 88 eb 02 c0       	mov    al,ds:0xc002eb88
c0015ead:	38 c2                	cmp    dl,al
c0015eaf:	74 1c                	je     c0015ecd <sendKeyboardToken(KeyboardToken)+0x81>
c0015eb1:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015eb4:	a2 88 eb 02 c0       	mov    ds:0xc002eb88,al
c0015eb9:	a0 88 eb 02 c0       	mov    al,ds:0xc002eb88
c0015ebe:	0f b6 c0             	movzx  eax,al
c0015ec1:	83 ec 0c             	sub    esp,0xc
c0015ec4:	50                   	push   eax
c0015ec5:	e8 f0 a6 ff ff       	call   c00105ba <setTerminalScrollLock(bool)>
c0015eca:	83 c4 10             	add    esp,0x10
c0015ecd:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015ed0:	84 c0                	test   al,al
c0015ed2:	0f 84 ae 00 00 00    	je     c0015f86 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015ed8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015edb:	66 3d 10 03          	cmp    ax,0x310
c0015edf:	75 06                	jne    c0015ee7 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015ee1:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015ee7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eea:	66 3d 11 03          	cmp    ax,0x311
c0015eee:	75 06                	jne    c0015ef6 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015ef0:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015ef6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ef9:	66 3d 12 03          	cmp    ax,0x312
c0015efd:	75 06                	jne    c0015f05 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015eff:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015f05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f08:	66 3d 13 03          	cmp    ax,0x313
c0015f0c:	75 06                	jne    c0015f14 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015f0e:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015f14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f17:	66 3d 14 03          	cmp    ax,0x314
c0015f1b:	75 06                	jne    c0015f23 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015f1d:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015f23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f26:	66 3d 15 03          	cmp    ax,0x315
c0015f2a:	75 06                	jne    c0015f32 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015f2c:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015f32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f35:	66 3d 16 03          	cmp    ax,0x316
c0015f39:	75 06                	jne    c0015f41 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015f3b:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015f41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f44:	66 3d 17 03          	cmp    ax,0x317
c0015f48:	75 06                	jne    c0015f50 <sendKeyboardToken(KeyboardToken)+0x104>
c0015f4a:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015f50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f53:	66 3d 18 03          	cmp    ax,0x318
c0015f57:	75 06                	jne    c0015f5f <sendKeyboardToken(KeyboardToken)+0x113>
c0015f59:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015f5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f62:	66 3d 19 03          	cmp    ax,0x319
c0015f66:	75 06                	jne    c0015f6e <sendKeyboardToken(KeyboardToken)+0x122>
c0015f68:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015f6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f71:	66 3d 1a 03          	cmp    ax,0x31a
c0015f75:	0f 85 c9 00 00 00    	jne    c0016044 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015f7b:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015f81:	e9 be 00 00 00       	jmp    c0016044 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015f86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f89:	66 3d 10 03          	cmp    ax,0x310
c0015f8d:	75 0a                	jne    c0015f99 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015f8f:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015f95:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f9c:	66 3d 11 03          	cmp    ax,0x311
c0015fa0:	75 0a                	jne    c0015fac <sendKeyboardToken(KeyboardToken)+0x160>
c0015fa2:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015fa8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015faf:	66 3d 12 03          	cmp    ax,0x312
c0015fb3:	75 0a                	jne    c0015fbf <sendKeyboardToken(KeyboardToken)+0x173>
c0015fb5:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015fbb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fc2:	66 3d 13 03          	cmp    ax,0x313
c0015fc6:	75 0a                	jne    c0015fd2 <sendKeyboardToken(KeyboardToken)+0x186>
c0015fc8:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015fce:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd5:	66 3d 14 03          	cmp    ax,0x314
c0015fd9:	75 0a                	jne    c0015fe5 <sendKeyboardToken(KeyboardToken)+0x199>
c0015fdb:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015fe1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fe5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fe8:	66 3d 15 03          	cmp    ax,0x315
c0015fec:	75 0a                	jne    c0015ff8 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015fee:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015ff4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ff8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ffb:	66 3d 16 03          	cmp    ax,0x316
c0015fff:	75 0a                	jne    c001600b <sendKeyboardToken(KeyboardToken)+0x1bf>
c0016001:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0016007:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001600b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001600e:	66 3d 17 03          	cmp    ax,0x317
c0016012:	75 0a                	jne    c001601e <sendKeyboardToken(KeyboardToken)+0x1d2>
c0016014:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001601a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001601e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016021:	66 3d 18 03          	cmp    ax,0x318
c0016025:	75 0a                	jne    c0016031 <sendKeyboardToken(KeyboardToken)+0x1e5>
c0016027:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001602d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016034:	66 3d 19 03          	cmp    ax,0x319
c0016038:	75 0a                	jne    c0016044 <sendKeyboardToken(KeyboardToken)+0x1f8>
c001603a:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0016040:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016044:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016047:	66 3d 00 02          	cmp    ax,0x200
c001604b:	75 2c                	jne    c0016079 <sendKeyboardToken(KeyboardToken)+0x22d>
c001604d:	a0 80 eb 02 c0       	mov    al,ds:0xc002eb80
c0016052:	83 f0 01             	xor    eax,0x1
c0016055:	84 c0                	test   al,al
c0016057:	74 20                	je     c0016079 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016059:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001605e:	6a 01                	push   0x1
c0016060:	6a 00                	push   0x0
c0016062:	68 28 5d 01 c0       	push   0xc0015d28
c0016067:	50                   	push   eax
c0016068:	e8 a7 7e 00 00       	call   c001df14 <Process::createThread(void (*)(void*), void*, int)>
c001606d:	83 c4 10             	add    esp,0x10
c0016070:	c6 05 80 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eb80,0x1
c0016077:	eb 33                	jmp    c00160ac <sendKeyboardToken(KeyboardToken)+0x260>
c0016079:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001607c:	66 3d 01 02          	cmp    ax,0x201
c0016080:	75 2a                	jne    c00160ac <sendKeyboardToken(KeyboardToken)+0x260>
c0016082:	a0 80 eb 02 c0       	mov    al,ds:0xc002eb80
c0016087:	83 f0 01             	xor    eax,0x1
c001608a:	84 c0                	test   al,al
c001608c:	74 1e                	je     c00160ac <sendKeyboardToken(KeyboardToken)+0x260>
c001608e:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0016093:	6a 01                	push   0x1
c0016095:	6a 00                	push   0x0
c0016097:	68 84 5d 01 c0       	push   0xc0015d84
c001609c:	50                   	push   eax
c001609d:	e8 72 7e 00 00       	call   c001df14 <Process::createThread(void (*)(void*), void*, int)>
c00160a2:	83 c4 10             	add    esp,0x10
c00160a5:	c6 05 80 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eb80,0x1
c00160ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160af:	66 3d 1d 03          	cmp    ax,0x31d
c00160b3:	75 06                	jne    c00160bb <sendKeyboardToken(KeyboardToken)+0x26f>
c00160b5:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00160bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160be:	66 3d 1c 03          	cmp    ax,0x31c
c00160c2:	75 06                	jne    c00160ca <sendKeyboardToken(KeyboardToken)+0x27e>
c00160c4:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00160ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160cd:	66 3d 1b 03          	cmp    ax,0x31b
c00160d1:	75 06                	jne    c00160d9 <sendKeyboardToken(KeyboardToken)+0x28d>
c00160d3:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00160d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160dc:	66 3d 1e 03          	cmp    ax,0x31e
c00160e0:	75 06                	jne    c00160e8 <sendKeyboardToken(KeyboardToken)+0x29c>
c00160e2:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00160e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160eb:	66 3d 1f 03          	cmp    ax,0x31f
c00160ef:	75 06                	jne    c00160f7 <sendKeyboardToken(KeyboardToken)+0x2ab>
c00160f1:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00160f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160fa:	66 3d 1a 03          	cmp    ax,0x31a
c00160fe:	75 06                	jne    c0016106 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0016100:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0016106:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001610a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001610d:	83 f0 01             	xor    eax,0x1
c0016110:	84 c0                	test   al,al
c0016112:	74 77                	je     c001618b <sendKeyboardToken(KeyboardToken)+0x33f>
c0016114:	a0 81 e8 02 c0       	mov    al,ds:0xc002e881
c0016119:	84 c0                	test   al,al
c001611b:	74 41                	je     c001615e <sendKeyboardToken(KeyboardToken)+0x312>
c001611d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016121:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0016125:	74 2b                	je     c0016152 <sendKeyboardToken(KeyboardToken)+0x306>
c0016127:	8b 15 84 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb84
c001612d:	89 d0                	mov    eax,edx
c001612f:	c1 e0 02             	shl    eax,0x2
c0016132:	01 d0                	add    eax,edx
c0016134:	01 c0                	add    eax,eax
c0016136:	a3 84 eb 02 c0       	mov    ds:0xc002eb84,eax
c001613b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001613e:	0f b7 c0             	movzx  eax,ax
c0016141:	8d 50 d0             	lea    edx,[eax-0x30]
c0016144:	a1 84 eb 02 c0       	mov    eax,ds:0xc002eb84
c0016149:	01 d0                	add    eax,edx
c001614b:	a3 84 eb 02 c0       	mov    ds:0xc002eb84,eax
c0016150:	eb 6d                	jmp    c00161bf <sendKeyboardToken(KeyboardToken)+0x373>
c0016152:	c7 05 84 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb84,0x0
c001615c:	eb 61                	jmp    c00161bf <sendKeyboardToken(KeyboardToken)+0x373>
c001615e:	a1 84 eb 02 c0       	mov    eax,ds:0xc002eb84
c0016163:	85 c0                	test   eax,eax
c0016165:	74 18                	je     c001617f <sendKeyboardToken(KeyboardToken)+0x333>
c0016167:	a1 84 eb 02 c0       	mov    eax,ds:0xc002eb84
c001616c:	0f b6 c0             	movzx  eax,al
c001616f:	83 ec 0c             	sub    esp,0xc
c0016172:	50                   	push   eax
c0016173:	e8 68 fc ff ff       	call   c0015de0 <sendKeyToTerminal(unsigned char)>
c0016178:	83 c4 10             	add    esp,0x10
c001617b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001617f:	c7 05 84 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb84,0x0
c0016189:	eb 34                	jmp    c00161bf <sendKeyboardToken(KeyboardToken)+0x373>
c001618b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001618e:	66 3d 01 01          	cmp    ax,0x101
c0016192:	75 2b                	jne    c00161bf <sendKeyboardToken(KeyboardToken)+0x373>
c0016194:	a1 84 eb 02 c0       	mov    eax,ds:0xc002eb84
c0016199:	85 c0                	test   eax,eax
c001619b:	74 18                	je     c00161b5 <sendKeyboardToken(KeyboardToken)+0x369>
c001619d:	a1 84 eb 02 c0       	mov    eax,ds:0xc002eb84
c00161a2:	0f b6 c0             	movzx  eax,al
c00161a5:	83 ec 0c             	sub    esp,0xc
c00161a8:	50                   	push   eax
c00161a9:	e8 32 fc ff ff       	call   c0015de0 <sendKeyToTerminal(unsigned char)>
c00161ae:	83 c4 10             	add    esp,0x10
c00161b1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161b5:	c7 05 84 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb84,0x0
c00161bf:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00161c2:	83 f0 01             	xor    eax,0x1
c00161c5:	84 c0                	test   al,al
c00161c7:	74 4c                	je     c0016215 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00161c9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00161cc:	83 f0 01             	xor    eax,0x1
c00161cf:	84 c0                	test   al,al
c00161d1:	74 42                	je     c0016215 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00161d3:	a0 80 e8 02 c0       	mov    al,ds:0xc002e880
c00161d8:	83 f0 01             	xor    eax,0x1
c00161db:	84 c0                	test   al,al
c00161dd:	74 36                	je     c0016215 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00161df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161e2:	66 83 f8 1f          	cmp    ax,0x1f
c00161e6:	76 09                	jbe    c00161f1 <sendKeyboardToken(KeyboardToken)+0x3a5>
c00161e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161eb:	66 83 f8 7e          	cmp    ax,0x7e
c00161ef:	76 12                	jbe    c0016203 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00161f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161f4:	66 83 f8 0a          	cmp    ax,0xa
c00161f8:	74 09                	je     c0016203 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00161fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161fd:	66 83 f8 08          	cmp    ax,0x8
c0016201:	75 12                	jne    c0016215 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016203:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016206:	0f b6 c0             	movzx  eax,al
c0016209:	83 ec 0c             	sub    esp,0xc
c001620c:	50                   	push   eax
c001620d:	e8 ce fb ff ff       	call   c0015de0 <sendKeyToTerminal(unsigned char)>
c0016212:	83 c4 10             	add    esp,0x10
c0016215:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016218:	83 f0 01             	xor    eax,0x1
c001621b:	84 c0                	test   al,al
c001621d:	74 4f                	je     c001626e <sendKeyboardToken(KeyboardToken)+0x422>
c001621f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016222:	83 f0 01             	xor    eax,0x1
c0016225:	84 c0                	test   al,al
c0016227:	74 45                	je     c001626e <sendKeyboardToken(KeyboardToken)+0x422>
c0016229:	a0 80 e8 02 c0       	mov    al,ds:0xc002e880
c001622e:	84 c0                	test   al,al
c0016230:	74 3c                	je     c001626e <sendKeyboardToken(KeyboardToken)+0x422>
c0016232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016235:	66 83 f8 3f          	cmp    ax,0x3f
c0016239:	76 33                	jbe    c001626e <sendKeyboardToken(KeyboardToken)+0x422>
c001623b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001623e:	66 83 f8 7f          	cmp    ax,0x7f
c0016242:	77 2a                	ja     c001626e <sendKeyboardToken(KeyboardToken)+0x422>
c0016244:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016247:	88 c2                	mov    dl,al
c0016249:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001624c:	66 83 f8 5f          	cmp    ax,0x5f
c0016250:	76 04                	jbe    c0016256 <sendKeyboardToken(KeyboardToken)+0x40a>
c0016252:	b0 20                	mov    al,0x20
c0016254:	eb 02                	jmp    c0016258 <sendKeyboardToken(KeyboardToken)+0x40c>
c0016256:	b0 00                	mov    al,0x0
c0016258:	29 c2                	sub    edx,eax
c001625a:	88 d0                	mov    al,dl
c001625c:	83 e8 40             	sub    eax,0x40
c001625f:	0f b6 c0             	movzx  eax,al
c0016262:	83 ec 0c             	sub    esp,0xc
c0016265:	50                   	push   eax
c0016266:	e8 75 fb ff ff       	call   c0015de0 <sendKeyToTerminal(unsigned char)>
c001626b:	83 c4 10             	add    esp,0x10
c001626e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016271:	66 3d 00 03          	cmp    ax,0x300
c0016275:	75 0f                	jne    c0016286 <sendKeyboardToken(KeyboardToken)+0x43a>
c0016277:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001627a:	83 f0 01             	xor    eax,0x1
c001627d:	84 c0                	test   al,al
c001627f:	74 05                	je     c0016286 <sendKeyboardToken(KeyboardToken)+0x43a>
c0016281:	e8 69 ab ff ff       	call   c0010def <doTerminalCycle()>
c0016286:	90                   	nop
c0016287:	c9                   	leave  
c0016288:	c3                   	ret    

c0016289 <clearInternalKeybuffer(VgaText*)>:
c0016289:	55                   	push   ebp
c001628a:	89 e5                	mov    ebp,esp
c001628c:	83 ec 08             	sub    esp,0x8
c001628f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016292:	05 34 11 00 00       	add    eax,0x1134
c0016297:	83 ec 0c             	sub    esp,0xc
c001629a:	50                   	push   eax
c001629b:	e8 f4 a4 fe ff       	call   c0000794 <strlen>
c00162a0:	83 c4 10             	add    esp,0x10
c00162a3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162a6:	81 c2 34 11 00 00    	add    edx,0x1134
c00162ac:	83 ec 04             	sub    esp,0x4
c00162af:	50                   	push   eax
c00162b0:	6a 00                	push   0x0
c00162b2:	52                   	push   edx
c00162b3:	e8 c0 a4 fe ff       	call   c0000778 <memset>
c00162b8:	83 c4 10             	add    esp,0x10
c00162bb:	90                   	nop
c00162bc:	c9                   	leave  
c00162bd:	c3                   	ret    

c00162be <readKeyboard(VgaText*, char*, unsigned long)>:
c00162be:	55                   	push   ebp
c00162bf:	89 e5                	mov    ebp,esp
c00162c1:	83 ec 18             	sub    esp,0x18
c00162c4:	fb                   	sti    
c00162c5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00162cc:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00162d0:	0f 84 8a 00 00 00    	je     c0016360 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c00162d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162d9:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00162df:	84 c0                	test   al,al
c00162e1:	75 11                	jne    c00162f4 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c00162e3:	e8 fa 7a 00 00       	call   c001dde2 <lockScheduler()>
c00162e8:	e8 31 7e 00 00       	call   c001e11e <schedule()>
c00162ed:	e8 f2 7a 00 00       	call   c001dde4 <unlockScheduler()>
c00162f2:	eb e2                	jmp    c00162d6 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c00162f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00162f7:	8d 50 01             	lea    edx,[eax+0x1]
c00162fa:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00162fd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016300:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0016306:	88 10                	mov    BYTE PTR [eax],dl
c0016308:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001630b:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0016311:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0016314:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016317:	05 34 11 00 00       	add    eax,0x1134
c001631c:	83 ec 0c             	sub    esp,0xc
c001631f:	50                   	push   eax
c0016320:	e8 6f a4 fe ff       	call   c0000794 <strlen>
c0016325:	83 c4 10             	add    esp,0x10
c0016328:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001632b:	81 c2 34 11 00 00    	add    edx,0x1134
c0016331:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016334:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016337:	81 c2 34 11 00 00    	add    edx,0x1134
c001633d:	83 ec 04             	sub    esp,0x4
c0016340:	50                   	push   eax
c0016341:	51                   	push   ecx
c0016342:	52                   	push   edx
c0016343:	e8 34 a3 fe ff       	call   c000067c <memmove>
c0016348:	83 c4 10             	add    esp,0x10
c001634b:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c001634e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0016351:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0016355:	0f 85 71 ff ff ff    	jne    c00162cc <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c001635b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001635e:	eb 03                	jmp    c0016363 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0016360:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016363:	c9                   	leave  
c0016364:	c3                   	ret    
c0016365:	90                   	nop

c0016366 <Keyboard::Keyboard(char const*)>:
c0016366:	83 ec 0c             	sub    esp,0xc
c0016369:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001636d:	83 ec 08             	sub    esp,0x8
c0016370:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016374:	50                   	push   eax
c0016375:	e8 b8 e1 ff ff       	call   c0014532 <Device::Device(char const*)>
c001637a:	83 c4 10             	add    esp,0x10
c001637d:	ba a8 b2 02 c0       	mov    edx,0xc002b2a8
c0016382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016386:	89 10                	mov    DWORD PTR [eax],edx
c0016388:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001638c:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0016396:	c6 05 64 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e764,0x1
c001639d:	90                   	nop
c001639e:	83 c4 0c             	add    esp,0xc
c00163a1:	c3                   	ret    

c00163a2 <Keyboard::~Keyboard()>:
c00163a2:	83 ec 0c             	sub    esp,0xc
c00163a5:	ba a8 b2 02 c0       	mov    edx,0xc002b2a8
c00163aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163ae:	89 10                	mov    DWORD PTR [eax],edx
c00163b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163b4:	83 ec 0c             	sub    esp,0xc
c00163b7:	50                   	push   eax
c00163b8:	e8 57 de ff ff       	call   c0014214 <Device::~Device()>
c00163bd:	83 c4 10             	add    esp,0x10
c00163c0:	90                   	nop
c00163c1:	83 c4 0c             	add    esp,0xc
c00163c4:	c3                   	ret    
c00163c5:	90                   	nop

c00163c6 <Keyboard::~Keyboard()>:
c00163c6:	83 ec 0c             	sub    esp,0xc
c00163c9:	83 ec 0c             	sub    esp,0xc
c00163cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163d0:	e8 cd ff ff ff       	call   c00163a2 <Keyboard::~Keyboard()>
c00163d5:	83 c4 10             	add    esp,0x10
c00163d8:	83 ec 08             	sub    esp,0x8
c00163db:	68 5c 01 00 00       	push   0x15c
c00163e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163e4:	e8 53 ca ff ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c00163e9:	83 c4 10             	add    esp,0x10
c00163ec:	83 c4 0c             	add    esp,0xc
c00163ef:	c3                   	ret    

c00163f0 <LogicalDisk::close(int, int, void*)>:
c00163f0:	83 c8 ff             	or     eax,0xffffffff
c00163f3:	c3                   	ret    

c00163f4 <LogicalDisk::~LogicalDisk()>:
c00163f4:	83 ec 0c             	sub    esp,0xc
c00163f7:	ba 58 b3 02 c0       	mov    edx,0xc002b358
c00163fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016400:	89 10                	mov    DWORD PTR [eax],edx
c0016402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016406:	83 ec 0c             	sub    esp,0xc
c0016409:	50                   	push   eax
c001640a:	e8 05 de ff ff       	call   c0014214 <Device::~Device()>
c001640f:	83 c4 10             	add    esp,0x10
c0016412:	90                   	nop
c0016413:	83 c4 0c             	add    esp,0xc
c0016416:	c3                   	ret    
c0016417:	90                   	nop

c0016418 <LogicalDisk::~LogicalDisk()>:
c0016418:	83 ec 0c             	sub    esp,0xc
c001641b:	83 ec 0c             	sub    esp,0xc
c001641e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016422:	e8 cd ff ff ff       	call   c00163f4 <LogicalDisk::~LogicalDisk()>
c0016427:	83 c4 10             	add    esp,0x10
c001642a:	83 ec 08             	sub    esp,0x8
c001642d:	68 74 01 00 00       	push   0x174
c0016432:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016436:	e8 01 ca ff ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c001643b:	83 c4 10             	add    esp,0x10
c001643e:	83 c4 0c             	add    esp,0xc
c0016441:	c3                   	ret    

c0016442 <LogicalDisk::open(int, int, void*)>:
c0016442:	83 ec 18             	sub    esp,0x18
c0016445:	68 d4 b2 02 c0       	push   0xc002b2d4
c001644a:	e8 6e 41 00 00       	call   c001a5bd <Krnl::panic(char const*)>
c001644f:	83 c8 ff             	or     eax,0xffffffff
c0016452:	83 c4 1c             	add    esp,0x1c
c0016455:	c3                   	ret    

c0016456 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0016456:	53                   	push   ebx
c0016457:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001645b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001645f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016463:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0016469:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001646f:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0016475:	77 10                	ja     c0016487 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0016477:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001647d:	89 d3                	mov    ebx,edx
c001647f:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0016485:	72 05                	jb     c001648c <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0016487:	83 c8 ff             	or     eax,0xffffffff
c001648a:	89 c2                	mov    edx,eax
c001648c:	5b                   	pop    ebx
c001648d:	c3                   	ret    

c001648e <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001648e:	56                   	push   esi
c001648f:	83 c8 ff             	or     eax,0xffffffff
c0016492:	53                   	push   ebx
c0016493:	89 c2                	mov    edx,eax
c0016495:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016499:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001649d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00164a1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00164a7:	77 27                	ja     c00164d0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00164a9:	89 d8                	mov    eax,ebx
c00164ab:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00164b1:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00164b7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00164bc:	89 c2                	mov    edx,eax
c00164be:	73 10                	jae    c00164d0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00164c0:	89 c8                	mov    eax,ecx
c00164c2:	89 da                	mov    edx,ebx
c00164c4:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00164ca:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00164d0:	5b                   	pop    ebx
c00164d1:	5e                   	pop    esi
c00164d2:	c3                   	ret    
c00164d3:	90                   	nop

c00164d4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00164d4:	83 ec 1c             	sub    esp,0x1c
c00164d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00164db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00164df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00164e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00164e7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00164eb:	89 04 24             	mov    DWORD PTR [esp],eax
c00164ee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00164f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00164f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164fa:	83 ec 08             	sub    esp,0x8
c00164fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016501:	50                   	push   eax
c0016502:	e8 2b e0 ff ff       	call   c0014532 <Device::Device(char const*)>
c0016507:	83 c4 10             	add    esp,0x10
c001650a:	ba 58 b3 02 c0       	mov    edx,0xc002b358
c001650f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016513:	89 10                	mov    DWORD PTR [eax],edx
c0016515:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016519:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016520:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016524:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001652b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001652f:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016539:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001653d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016541:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016545:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001654b:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0016551:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016555:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016558:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001655c:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0016562:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016568:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001656c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016570:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016576:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001657a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016584:	90                   	nop
c0016585:	83 c4 1c             	add    esp,0x1c
c0016588:	c3                   	ret    
c0016589:	90                   	nop

c001658a <LogicalDisk::assignDriveLetter()>:
c001658a:	55                   	push   ebp
c001658b:	57                   	push   edi
c001658c:	56                   	push   esi
c001658d:	53                   	push   ebx
c001658e:	83 ec 14             	sub    esp,0x14
c0016591:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016595:	8b 3d a0 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002eba0
c001659b:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00165a1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00165a5:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00165ab:	8b 3d a4 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002eba4
c00165b1:	3c 01                	cmp    al,0x1
c00165b3:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00165b7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00165bb:	19 c0                	sbb    eax,eax
c00165bd:	83 e0 02             	and    eax,0x2
c00165c0:	83 c0 41             	add    eax,0x41
c00165c3:	0f be e8             	movsx  ebp,al
c00165c6:	3c 43                	cmp    al,0x43
c00165c8:	75 10                	jne    c00165da <LogicalDisk::assignDriveLetter()+0x50>
c00165ca:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00165d1:	75 5d                	jne    c0016630 <LogicalDisk::assignDriveLetter()+0xa6>
c00165d3:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00165d8:	75 56                	jne    c0016630 <LogicalDisk::assignDriveLetter()+0xa6>
c00165da:	8d 75 bf             	lea    esi,[ebp-0x41]
c00165dd:	ba 01 00 00 00       	mov    edx,0x1
c00165e2:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00165e6:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00165ea:	d3 e2                	shl    edx,cl
c00165ec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00165f0:	89 d7                	mov    edi,edx
c00165f2:	89 d6                	mov    esi,edx
c00165f4:	c1 ff 1f             	sar    edi,0x1f
c00165f7:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00165fb:	21 f9                	and    ecx,edi
c00165fd:	09 d1                	or     ecx,edx
c00165ff:	75 2f                	jne    c0016630 <LogicalDisk::assignDriveLetter()+0xa6>
c0016601:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016605:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016609:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001660f:	09 f2                	or     edx,esi
c0016611:	89 15 a0 eb 02 c0    	mov    DWORD PTR ds:0xc002eba0,edx
c0016617:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001661b:	09 fa                	or     edx,edi
c001661d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016621:	89 15 a4 eb 02 c0    	mov    DWORD PTR ds:0xc002eba4,edx
c0016627:	89 1c bd c0 eb 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1440],ebx
c001662e:	eb 08                	jmp    c0016638 <LogicalDisk::assignDriveLetter()+0xae>
c0016630:	45                   	inc    ebp
c0016631:	40                   	inc    eax
c0016632:	3c 5b                	cmp    al,0x5b
c0016634:	75 90                	jne    c00165c6 <LogicalDisk::assignDriveLetter()+0x3c>
c0016636:	31 c0                	xor    eax,eax
c0016638:	83 c4 14             	add    esp,0x14
c001663b:	5b                   	pop    ebx
c001663c:	5e                   	pop    esi
c001663d:	5f                   	pop    edi
c001663e:	5d                   	pop    ebp
c001663f:	c3                   	ret    

c0016640 <LogicalDisk::mount()>:
c0016640:	56                   	push   esi
c0016641:	53                   	push   ebx
c0016642:	51                   	push   ecx
c0016643:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016647:	8b 1d 2c e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e72c
c001664d:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016657:	85 db                	test   ebx,ebx
c0016659:	74 50                	je     c00166ab <LogicalDisk::mount()+0x6b>
c001665b:	e8 6d 77 00 00       	call   c001ddcd <getIRQNestingLevel()>
c0016660:	52                   	push   edx
c0016661:	52                   	push   edx
c0016662:	50                   	push   eax
c0016663:	68 f8 b2 02 c0       	push   0xc002b2f8
c0016668:	e8 af c8 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001666d:	83 c4 0c             	add    esp,0xc
c0016670:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016677:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016679:	83 e8 41             	sub    eax,0x41
c001667c:	50                   	push   eax
c001667d:	56                   	push   esi
c001667e:	53                   	push   ebx
c001667f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016682:	83 c4 10             	add    esp,0x10
c0016685:	84 c0                	test   al,al
c0016687:	74 08                	je     c0016691 <LogicalDisk::mount()+0x51>
c0016689:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001668f:	eb 1c                	jmp    c00166ad <LogicalDisk::mount()+0x6d>
c0016691:	e8 37 77 00 00       	call   c001ddcd <getIRQNestingLevel()>
c0016696:	51                   	push   ecx
c0016697:	51                   	push   ecx
c0016698:	50                   	push   eax
c0016699:	68 13 b3 02 c0       	push   0xc002b313
c001669e:	e8 79 c8 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c00166a3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00166a6:	83 c4 10             	add    esp,0x10
c00166a9:	eb ac                	jmp    c0016657 <LogicalDisk::mount()+0x17>
c00166ab:	31 c0                	xor    eax,eax
c00166ad:	5a                   	pop    edx
c00166ae:	5b                   	pop    ebx
c00166af:	5e                   	pop    esi
c00166b0:	c3                   	ret    
c00166b1:	90                   	nop

c00166b2 <LogicalDisk::unmount()>:
c00166b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00166b6:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00166c0:	c3                   	ret    
c00166c1:	90                   	nop

c00166c2 <LogicalDisk::eject()>:
c00166c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00166c6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00166cc:	8b 10                	mov    edx,DWORD PTR [eax]
c00166ce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00166d2:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00166d5:	90                   	nop

c00166d6 <LogicalDisk::unassignDriveLetter()>:
c00166d6:	57                   	push   edi
c00166d7:	56                   	push   esi
c00166d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00166dc:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00166e3:	84 c9                	test   cl,cl
c00166e5:	75 0f                	jne    c00166f6 <LogicalDisk::unassignDriveLetter()+0x20>
c00166e7:	c7 44 24 0c 2e b3 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b32e
c00166ef:	5e                   	pop    esi
c00166f0:	5f                   	pop    edi
c00166f1:	e9 c7 3e 00 00       	jmp    c001a5bd <Krnl::panic(char const*)>
c00166f6:	83 e9 41             	sub    ecx,0x41
c00166f9:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0016700:	b8 01 00 00 00       	mov    eax,0x1
c0016705:	c7 04 8d c0 eb 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1440],0x0
c0016710:	d3 e0                	shl    eax,cl
c0016712:	89 c7                	mov    edi,eax
c0016714:	f7 d0                	not    eax
c0016716:	c1 ff 1f             	sar    edi,0x1f
c0016719:	21 05 a0 eb 02 c0    	and    DWORD PTR ds:0xc002eba0,eax
c001671f:	89 fe                	mov    esi,edi
c0016721:	f7 d6                	not    esi
c0016723:	21 35 a4 eb 02 c0    	and    DWORD PTR ds:0xc002eba4,esi
c0016729:	5e                   	pop    esi
c001672a:	5f                   	pop    edi
c001672b:	c3                   	ret    

c001672c <LogicalDisk::read(unsigned long long, int, void*)>:
c001672c:	57                   	push   edi
c001672d:	56                   	push   esi
c001672e:	53                   	push   ebx
c001672f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016733:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016737:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001673b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001673f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016745:	77 41                	ja     c0016788 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016747:	99                   	cdq    
c0016748:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001674e:	01 c8                	add    eax,ecx
c0016750:	11 da                	adc    edx,ebx
c0016752:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016758:	19 d7                	sbb    edi,edx
c001675a:	72 33                	jb     c001678f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001675c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016762:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016768:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001676c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016770:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016776:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001677c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016780:	5b                   	pop    ebx
c0016781:	5e                   	pop    esi
c0016782:	5f                   	pop    edi
c0016783:	e9 b0 0a 00 00       	jmp    c0017238 <VCache::read(unsigned long long, int, void*)>
c0016788:	b8 05 00 00 00       	mov    eax,0x5
c001678d:	eb 05                	jmp    c0016794 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001678f:	b8 07 00 00 00       	mov    eax,0x7
c0016794:	5b                   	pop    ebx
c0016795:	5e                   	pop    esi
c0016796:	5f                   	pop    edi
c0016797:	c3                   	ret    

c0016798 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016798:	57                   	push   edi
c0016799:	56                   	push   esi
c001679a:	53                   	push   ebx
c001679b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001679f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167a3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00167a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167ab:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00167b1:	77 41                	ja     c00167f4 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00167b3:	99                   	cdq    
c00167b4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00167ba:	01 c8                	add    eax,ecx
c00167bc:	11 da                	adc    edx,ebx
c00167be:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00167c4:	19 d7                	sbb    edi,edx
c00167c6:	72 33                	jb     c00167fb <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00167c8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00167ce:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00167d4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00167d8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00167dc:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00167e2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00167e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167ec:	5b                   	pop    ebx
c00167ed:	5e                   	pop    esi
c00167ee:	5f                   	pop    edi
c00167ef:	e9 4e 09 00 00       	jmp    c0017142 <VCache::write(unsigned long long, int, void*)>
c00167f4:	b8 05 00 00 00       	mov    eax,0x5
c00167f9:	eb 05                	jmp    c0016800 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00167fb:	b8 07 00 00 00       	mov    eax,0x7
c0016800:	5b                   	pop    ebx
c0016801:	5e                   	pop    esi
c0016802:	5f                   	pop    edi
c0016803:	c3                   	ret    

c0016804 <Mouse::Mouse(char const*)>:
c0016804:	83 ec 0c             	sub    esp,0xc
c0016807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001680b:	83 ec 08             	sub    esp,0x8
c001680e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016812:	50                   	push   eax
c0016813:	e8 1a dd ff ff       	call   c0014532 <Device::Device(char const*)>
c0016818:	83 c4 10             	add    esp,0x10
c001681b:	ba 84 b3 02 c0       	mov    edx,0xc002b384
c0016820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016824:	89 10                	mov    DWORD PTR [eax],edx
c0016826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001682a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016834:	90                   	nop
c0016835:	83 c4 0c             	add    esp,0xc
c0016838:	c3                   	ret    
c0016839:	90                   	nop

c001683a <Mouse::~Mouse()>:
c001683a:	83 ec 0c             	sub    esp,0xc
c001683d:	ba 84 b3 02 c0       	mov    edx,0xc002b384
c0016842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016846:	89 10                	mov    DWORD PTR [eax],edx
c0016848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001684c:	83 ec 0c             	sub    esp,0xc
c001684f:	50                   	push   eax
c0016850:	e8 bf d9 ff ff       	call   c0014214 <Device::~Device()>
c0016855:	83 c4 10             	add    esp,0x10
c0016858:	90                   	nop
c0016859:	83 c4 0c             	add    esp,0xc
c001685c:	c3                   	ret    
c001685d:	90                   	nop

c001685e <Mouse::~Mouse()>:
c001685e:	83 ec 0c             	sub    esp,0xc
c0016861:	83 ec 0c             	sub    esp,0xc
c0016864:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016868:	e8 cd ff ff ff       	call   c001683a <Mouse::~Mouse()>
c001686d:	83 c4 10             	add    esp,0x10
c0016870:	83 ec 08             	sub    esp,0x8
c0016873:	68 58 01 00 00       	push   0x158
c0016878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001687c:	e8 bb c5 ff ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c0016881:	83 c4 10             	add    esp,0x10
c0016884:	83 c4 0c             	add    esp,0xc
c0016887:	c3                   	ret    

c0016888 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016888:	55                   	push   ebp
c0016889:	57                   	push   edi
c001688a:	56                   	push   esi
c001688b:	53                   	push   ebx
c001688c:	81 ec 28 01 00 00    	sub    esp,0x128
c0016892:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016899:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00168a0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00168a7:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00168ae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00168b2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00168b6:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00168bd:	e8 6c dd ff ff       	call   c001462e <Device::getName()>
c00168c2:	5a                   	pop    edx
c00168c3:	59                   	pop    ecx
c00168c4:	50                   	push   eax
c00168c5:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00168c9:	55                   	push   ebp
c00168ca:	e8 65 9f fe ff       	call   c0000834 <strcpy>
c00168cf:	5b                   	pop    ebx
c00168d0:	58                   	pop    eax
c00168d1:	68 a8 b3 02 c0       	push   0xc002b3a8
c00168d6:	55                   	push   ebp
c00168d7:	e8 98 a0 fe ff       	call   c0000974 <strcat>
c00168dc:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00168e3:	e8 58 8f ff ff       	call   c000f840 <malloc>
c00168e8:	83 c4 0c             	add    esp,0xc
c00168eb:	89 c3                	mov    ebx,eax
c00168ed:	57                   	push   edi
c00168ee:	56                   	push   esi
c00168ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00168f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00168f7:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00168fe:	55                   	push   ebp
c00168ff:	50                   	push   eax
c0016900:	e8 cf fb ff ff       	call   c00164d4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016905:	83 c4 14             	add    esp,0x14
c0016908:	53                   	push   ebx
c0016909:	e8 7c fc ff ff       	call   c001658a <LogicalDisk::assignDriveLetter()>
c001690e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016911:	89 c6                	mov    esi,eax
c0016913:	e8 28 fd ff ff       	call   c0016640 <LogicalDisk::mount()>
c0016918:	58                   	pop    eax
c0016919:	5a                   	pop    edx
c001691a:	53                   	push   ebx
c001691b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016922:	e8 1b da ff ff       	call   c0014342 <Device::addChild(Device*)>
c0016927:	59                   	pop    ecx
c0016928:	89 f0                	mov    eax,esi
c001692a:	5b                   	pop    ebx
c001692b:	0f be f0             	movsx  esi,al
c001692e:	56                   	push   esi
c001692f:	68 b3 b3 02 c0       	push   0xc002b3b3
c0016934:	e8 e3 c5 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0016939:	81 c4 2c 01 00 00    	add    esp,0x12c
c001693f:	5b                   	pop    ebx
c0016940:	5e                   	pop    esi
c0016941:	5f                   	pop    edi
c0016942:	5d                   	pop    ebp
c0016943:	c3                   	ret    

c0016944 <createPartitionsForDisk(PhysicalDisk*)>:
c0016944:	55                   	push   ebp
c0016945:	57                   	push   edi
c0016946:	56                   	push   esi
c0016947:	53                   	push   ebx
c0016948:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001694e:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016955:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001695b:	3d 00 02 00 00       	cmp    eax,0x200
c0016960:	74 27                	je     c0016989 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016962:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016968:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001696e:	83 ec 10             	sub    esp,0x10
c0016971:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016975:	99                   	cdq    
c0016976:	c1 e6 0a             	shl    esi,0xa
c0016979:	52                   	push   edx
c001697a:	89 fd                	mov    ebp,edi
c001697c:	50                   	push   eax
c001697d:	55                   	push   ebp
c001697e:	56                   	push   esi
c001697f:	e8 38 00 01 00       	call   c00269bc <__udivdi3>
c0016984:	e9 b1 00 00 00       	jmp    c0016a3a <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016989:	83 ec 0c             	sub    esp,0xc
c001698c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001698e:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016992:	56                   	push   esi
c0016993:	6a 01                	push   0x1
c0016995:	6a 00                	push   0x0
c0016997:	6a 00                	push   0x0
c0016999:	53                   	push   ebx
c001699a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001699d:	83 c4 20             	add    esp,0x20
c00169a0:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00169a8:	75 0a                	jne    c00169b4 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00169aa:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00169b2:	74 2c                	je     c00169e0 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00169b4:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00169ba:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00169c0:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00169c6:	83 ec 10             	sub    esp,0x10
c00169c9:	0f a4 c2 0a          	shld   edx,eax,0xa
c00169cd:	89 f7                	mov    edi,esi
c00169cf:	c1 e0 0a             	shl    eax,0xa
c00169d2:	c1 ff 1f             	sar    edi,0x1f
c00169d5:	57                   	push   edi
c00169d6:	56                   	push   esi
c00169d7:	52                   	push   edx
c00169d8:	50                   	push   eax
c00169d9:	e8 de ff 00 00       	call   c00269bc <__udivdi3>
c00169de:	eb 5a                	jmp    c0016a3a <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00169e0:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00169e7:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00169ee:	83 e1 7f             	and    ecx,0x7f
c00169f1:	83 e0 7f             	and    eax,0x7f
c00169f4:	01 c1                	add    ecx,eax
c00169f6:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00169fd:	83 e0 7f             	and    eax,0x7f
c0016a00:	01 c1                	add    ecx,eax
c0016a02:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016a09:	83 e0 7f             	and    eax,0x7f
c0016a0c:	00 c1                	add    cl,al
c0016a0e:	74 41                	je     c0016a51 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016a10:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a16:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a1c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a22:	83 ec 10             	sub    esp,0x10
c0016a25:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a29:	89 f7                	mov    edi,esi
c0016a2b:	c1 e0 0a             	shl    eax,0xa
c0016a2e:	c1 ff 1f             	sar    edi,0x1f
c0016a31:	57                   	push   edi
c0016a32:	56                   	push   esi
c0016a33:	52                   	push   edx
c0016a34:	50                   	push   eax
c0016a35:	e8 82 ff 00 00       	call   c00269bc <__udivdi3>
c0016a3a:	83 c4 14             	add    esp,0x14
c0016a3d:	52                   	push   edx
c0016a3e:	50                   	push   eax
c0016a3f:	6a 00                	push   0x0
c0016a41:	6a 00                	push   0x0
c0016a43:	53                   	push   ebx
c0016a44:	e8 3f fe ff ff       	call   c0016888 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016a49:	83 c4 20             	add    esp,0x20
c0016a4c:	e9 79 01 00 00       	jmp    c0016bca <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016a51:	89 f0                	mov    eax,esi
c0016a53:	31 f6                	xor    esi,esi
c0016a55:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016a5c:	75 02                	jne    c0016a60 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016a5e:	89 f1                	mov    ecx,esi
c0016a60:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016a67:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016a6e:	c1 e2 08             	shl    edx,0x8
c0016a71:	c1 e7 10             	shl    edi,0x10
c0016a74:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016a7c:	09 fa                	or     edx,edi
c0016a7e:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016a86:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016a8d:	83 c0 10             	add    eax,0x10
c0016a90:	09 fa                	or     edx,edi
c0016a92:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016a99:	c1 e7 18             	shl    edi,0x18
c0016a9c:	09 fa                	or     edx,edi
c0016a9e:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016aa5:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016aa9:	c1 e7 10             	shl    edi,0x10
c0016aac:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016ab3:	c1 e2 08             	shl    edx,0x8
c0016ab6:	09 fa                	or     edx,edi
c0016ab8:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016abf:	09 fa                	or     edx,edi
c0016ac1:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016ac8:	c1 e7 18             	shl    edi,0x18
c0016acb:	09 fa                	or     edx,edi
c0016acd:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016ad1:	46                   	inc    esi
c0016ad2:	83 fe 04             	cmp    esi,0x4
c0016ad5:	0f 85 7a ff ff ff    	jne    c0016a55 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016adb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016adf:	83 f0 01             	xor    eax,0x1
c0016ae2:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016ae6:	75 57                	jne    c0016b3f <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016ae8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016aec:	83 f0 01             	xor    eax,0x1
c0016aef:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016af3:	75 4a                	jne    c0016b3f <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016af5:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016af9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016b01:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016b09:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016b0f:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016b15:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016b1b:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b1f:	89 f7                	mov    edi,esi
c0016b21:	c1 e0 0a             	shl    eax,0xa
c0016b24:	c1 ff 1f             	sar    edi,0x1f
c0016b27:	57                   	push   edi
c0016b28:	56                   	push   esi
c0016b29:	52                   	push   edx
c0016b2a:	50                   	push   eax
c0016b2b:	e8 8c fe 00 00       	call   c00269bc <__udivdi3>
c0016b30:	83 c4 10             	add    esp,0x10
c0016b33:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016b37:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016b3b:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016b3f:	84 c9                	test   cl,cl
c0016b41:	74 53                	je     c0016b96 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016b43:	0f b6 c9             	movzx  ecx,cl
c0016b46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b4a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016b4e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b52:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016b56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016b5e:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016b62:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016b66:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016b6a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016b6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016b72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016b76:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016b7a:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016b7e:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016b82:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016b86:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016b8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016b8e:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016b92:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016b96:	31 ed                	xor    ebp,ebp
c0016b98:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016b9c:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016ba0:	89 f8                	mov    eax,edi
c0016ba2:	09 f0                	or     eax,esi
c0016ba4:	74 1e                	je     c0016bc4 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016ba6:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016baa:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016bae:	89 d1                	mov    ecx,edx
c0016bb0:	09 c1                	or     ecx,eax
c0016bb2:	74 10                	je     c0016bc4 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016bb4:	83 ec 0c             	sub    esp,0xc
c0016bb7:	57                   	push   edi
c0016bb8:	56                   	push   esi
c0016bb9:	52                   	push   edx
c0016bba:	50                   	push   eax
c0016bbb:	53                   	push   ebx
c0016bbc:	e8 c7 fc ff ff       	call   c0016888 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016bc1:	83 c4 20             	add    esp,0x20
c0016bc4:	45                   	inc    ebp
c0016bc5:	83 fd 04             	cmp    ebp,0x4
c0016bc8:	75 ce                	jne    c0016b98 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016bca:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016bd0:	5b                   	pop    ebx
c0016bd1:	5e                   	pop    esi
c0016bd2:	5f                   	pop    edi
c0016bd3:	5d                   	pop    ebp
c0016bd4:	c3                   	ret    
c0016bd5:	90                   	nop

c0016bd6 <Serial::Serial(char const*)>:
c0016bd6:	83 ec 0c             	sub    esp,0xc
c0016bd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bdd:	83 ec 08             	sub    esp,0x8
c0016be0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016be4:	50                   	push   eax
c0016be5:	e8 48 d9 ff ff       	call   c0014532 <Device::Device(char const*)>
c0016bea:	83 c4 10             	add    esp,0x10
c0016bed:	ba e0 b3 02 c0       	mov    edx,0xc002b3e0
c0016bf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bf6:	89 10                	mov    DWORD PTR [eax],edx
c0016bf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bfc:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016c06:	90                   	nop
c0016c07:	83 c4 0c             	add    esp,0xc
c0016c0a:	c3                   	ret    
c0016c0b:	90                   	nop

c0016c0c <Serial::~Serial()>:
c0016c0c:	83 ec 0c             	sub    esp,0xc
c0016c0f:	ba e0 b3 02 c0       	mov    edx,0xc002b3e0
c0016c14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c18:	89 10                	mov    DWORD PTR [eax],edx
c0016c1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c1e:	83 ec 0c             	sub    esp,0xc
c0016c21:	50                   	push   eax
c0016c22:	e8 ed d5 ff ff       	call   c0014214 <Device::~Device()>
c0016c27:	83 c4 10             	add    esp,0x10
c0016c2a:	90                   	nop
c0016c2b:	83 c4 0c             	add    esp,0xc
c0016c2e:	c3                   	ret    
c0016c2f:	90                   	nop

c0016c30 <Serial::~Serial()>:
c0016c30:	83 ec 0c             	sub    esp,0xc
c0016c33:	83 ec 0c             	sub    esp,0xc
c0016c36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c3a:	e8 cd ff ff ff       	call   c0016c0c <Serial::~Serial()>
c0016c3f:	83 c4 10             	add    esp,0x10
c0016c42:	83 ec 08             	sub    esp,0x8
c0016c45:	68 58 01 00 00       	push   0x158
c0016c4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c4e:	e8 e9 c1 ff ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c0016c53:	83 c4 10             	add    esp,0x10
c0016c56:	83 c4 0c             	add    esp,0xc
c0016c59:	c3                   	ret    

c0016c5a <Timer::Timer(char const*)>:
c0016c5a:	83 ec 0c             	sub    esp,0xc
c0016c5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c61:	83 ec 08             	sub    esp,0x8
c0016c64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c68:	50                   	push   eax
c0016c69:	e8 c4 d8 ff ff       	call   c0014532 <Device::Device(char const*)>
c0016c6e:	83 c4 10             	add    esp,0x10
c0016c71:	ba 24 b4 02 c0       	mov    edx,0xc002b424
c0016c76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c7a:	89 10                	mov    DWORD PTR [eax],edx
c0016c7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c80:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016c8a:	90                   	nop
c0016c8b:	83 c4 0c             	add    esp,0xc
c0016c8e:	c3                   	ret    
c0016c8f:	90                   	nop

c0016c90 <Timer::~Timer()>:
c0016c90:	83 ec 0c             	sub    esp,0xc
c0016c93:	ba 24 b4 02 c0       	mov    edx,0xc002b424
c0016c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c9c:	89 10                	mov    DWORD PTR [eax],edx
c0016c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ca2:	83 ec 0c             	sub    esp,0xc
c0016ca5:	50                   	push   eax
c0016ca6:	e8 69 d5 ff ff       	call   c0014214 <Device::~Device()>
c0016cab:	83 c4 10             	add    esp,0x10
c0016cae:	90                   	nop
c0016caf:	83 c4 0c             	add    esp,0xc
c0016cb2:	c3                   	ret    
c0016cb3:	90                   	nop

c0016cb4 <Timer::~Timer()>:
c0016cb4:	83 ec 0c             	sub    esp,0xc
c0016cb7:	83 ec 0c             	sub    esp,0xc
c0016cba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cbe:	e8 cd ff ff ff       	call   c0016c90 <Timer::~Timer()>
c0016cc3:	83 c4 10             	add    esp,0x10
c0016cc6:	83 ec 08             	sub    esp,0x8
c0016cc9:	68 5c 01 00 00       	push   0x15c
c0016cce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cd2:	e8 65 c1 ff ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c0016cd7:	83 c4 10             	add    esp,0x10
c0016cda:	83 c4 0c             	add    esp,0xc
c0016cdd:	c3                   	ret    

c0016cde <Timer::read()>:
c0016cde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ce2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016ce8:	c3                   	ret    

c0016ce9 <timerHandler(unsigned long long)>:
c0016ce9:	55                   	push   ebp
c0016cea:	57                   	push   edi
c0016ceb:	56                   	push   esi
c0016cec:	53                   	push   ebx
c0016ced:	83 ec 0c             	sub    esp,0xc
c0016cf0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016cf4:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016cf8:	01 35 30 ec 02 c0    	add    DWORD PTR ds:0xc002ec30,esi
c0016cfe:	11 3d 34 ec 02 c0    	adc    DWORD PTR ds:0xc002ec34,edi
c0016d04:	80 3d ad e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5ad,0x0
c0016d0b:	0f 84 07 01 00 00    	je     c0016e18 <timerHandler(unsigned long long)+0x12f>
c0016d11:	e8 f3 70 00 00       	call   c001de09 <lockStuff()>
c0016d16:	83 ec 0c             	sub    esp,0xc
c0016d19:	68 fc 1a 03 c0       	push   0xc0031afc
c0016d1e:	e8 0b 1d 01 00       	call   c0028a2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d23:	c7 04 24 fc 1a 03 c0 	mov    DWORD PTR [esp],0xc0031afc
c0016d2a:	89 c3                	mov    ebx,eax
c0016d2c:	e8 05 1d 01 00       	call   c0028a36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016d31:	83 c4 10             	add    esp,0x10
c0016d34:	84 c0                	test   al,al
c0016d36:	74 60                	je     c0016d98 <timerHandler(unsigned long long)+0xaf>
c0016d38:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016d3e:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016d41:	85 c0                	test   eax,eax
c0016d43:	0f 85 91 00 00 00    	jne    c0016dda <timerHandler(unsigned long long)+0xf1>
c0016d49:	e9 be 00 00 00       	jmp    c0016e0c <timerHandler(unsigned long long)+0x123>
c0016d4e:	83 ec 0c             	sub    esp,0xc
c0016d51:	55                   	push   ebp
c0016d52:	e8 a3 76 00 00       	call   c001e3fa <unblockTask(ThreadControlBlock*)>
c0016d57:	83 c4 10             	add    esp,0x10
c0016d5a:	39 eb                	cmp    ebx,ebp
c0016d5c:	75 12                	jne    c0016d70 <timerHandler(unsigned long long)+0x87>
c0016d5e:	83 ec 0c             	sub    esp,0xc
c0016d61:	68 fc 1a 03 c0       	push   0xc0031afc
c0016d66:	e8 c3 1c 01 00       	call   c0028a2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d6b:	89 c3                	mov    ebx,eax
c0016d6d:	83 c4 10             	add    esp,0x10
c0016d70:	83 ec 0c             	sub    esp,0xc
c0016d73:	68 fc 1a 03 c0       	push   0xc0031afc
c0016d78:	e8 b9 1c 01 00       	call   c0028a36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016d7d:	83 c4 10             	add    esp,0x10
c0016d80:	84 c0                	test   al,al
c0016d82:	75 b4                	jne    c0016d38 <timerHandler(unsigned long long)+0x4f>
c0016d84:	83 ec 0c             	sub    esp,0xc
c0016d87:	68 fc 1a 03 c0       	push   0xc0031afc
c0016d8c:	e8 9d 1c 01 00       	call   c0028a2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d91:	83 c4 10             	add    esp,0x10
c0016d94:	39 d8                	cmp    eax,ebx
c0016d96:	74 a0                	je     c0016d38 <timerHandler(unsigned long long)+0x4f>
c0016d98:	83 ec 0c             	sub    esp,0xc
c0016d9b:	68 fc 1a 03 c0       	push   0xc0031afc
c0016da0:	e8 89 1c 01 00       	call   c0028a2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016da5:	c7 04 24 fc 1a 03 c0 	mov    DWORD PTR [esp],0xc0031afc
c0016dac:	89 c5                	mov    ebp,eax
c0016dae:	e8 9f 1c 01 00       	call   c0028a52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016db3:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016db6:	83 c4 10             	add    esp,0x10
c0016db9:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016dbc:	39 15 30 ec 02 c0    	cmp    DWORD PTR ds:0xc002ec30,edx
c0016dc2:	a1 34 ec 02 c0       	mov    eax,ds:0xc002ec34
c0016dc7:	19 c8                	sbb    eax,ecx
c0016dc9:	73 83                	jae    c0016d4e <timerHandler(unsigned long long)+0x65>
c0016dcb:	50                   	push   eax
c0016dcc:	50                   	push   eax
c0016dcd:	55                   	push   ebp
c0016dce:	68 fc 1a 03 c0       	push   0xc0031afc
c0016dd3:	e8 28 1d 01 00       	call   c0028b00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016dd8:	eb 93                	jmp    c0016d6d <timerHandler(unsigned long long)+0x84>
c0016dda:	80 3d ac e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5ac,0x0
c0016de1:	74 29                	je     c0016e0c <timerHandler(unsigned long long)+0x123>
c0016de3:	39 c6                	cmp    esi,eax
c0016de5:	bb 00 00 00 00       	mov    ebx,0x0
c0016dea:	19 df                	sbb    edi,ebx
c0016dec:	72 19                	jb     c0016e07 <timerHandler(unsigned long long)+0x11e>
c0016dee:	e8 ef 6f 00 00       	call   c001dde2 <lockScheduler()>
c0016df3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016df8:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016dfb:	e8 1e 73 00 00       	call   c001e11e <schedule()>
c0016e00:	e8 df 6f 00 00       	call   c001dde4 <unlockScheduler()>
c0016e05:	eb 05                	jmp    c0016e0c <timerHandler(unsigned long long)+0x123>
c0016e07:	29 f0                	sub    eax,esi
c0016e09:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016e0c:	83 c4 0c             	add    esp,0xc
c0016e0f:	5b                   	pop    ebx
c0016e10:	5e                   	pop    esi
c0016e11:	5f                   	pop    edi
c0016e12:	5d                   	pop    ebp
c0016e13:	e9 8b 73 00 00       	jmp    c001e1a3 <unlockStuff()>
c0016e18:	83 c4 0c             	add    esp,0xc
c0016e1b:	5b                   	pop    ebx
c0016e1c:	5e                   	pop    esi
c0016e1d:	5f                   	pop    edi
c0016e1e:	5d                   	pop    ebp
c0016e1f:	c3                   	ret    

c0016e20 <setupTimer(int)>:
c0016e20:	57                   	push   edi
c0016e21:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c0016e26:	56                   	push   esi
c0016e27:	53                   	push   ebx
c0016e28:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016e2c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016e32:	83 ec 0c             	sub    esp,0xc
c0016e35:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016e3b:	e8 ee d7 ff ff       	call   c001462e <Device::getName()>
c0016e40:	83 c4 10             	add    esp,0x10
c0016e43:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016e46:	0f 85 8d 00 00 00    	jne    c0016ed9 <setupTimer(int)+0xb9>
c0016e4c:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c0016e51:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016e58:	74 7f                	je     c0016ed9 <setupTimer(int)+0xb9>
c0016e5a:	83 ec 0c             	sub    esp,0xc
c0016e5d:	68 5c 01 00 00       	push   0x15c
c0016e62:	e8 d9 89 ff ff       	call   c000f840 <malloc>
c0016e67:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e6a:	89 c3                	mov    ebx,eax
c0016e6c:	e8 2b f7 00 00       	call   c002659c <PIT::PIT()>
c0016e71:	59                   	pop    ecx
c0016e72:	5f                   	pop    edi
c0016e73:	53                   	push   ebx
c0016e74:	ff 35 a8 e5 02 c0    	push   DWORD PTR ds:0xc002e5a8
c0016e7a:	e8 c3 d4 ff ff       	call   c0014342 <Device::addChild(Device*)>
c0016e7f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016e81:	6a 00                	push   0x0
c0016e83:	6a 00                	push   0x0
c0016e85:	56                   	push   esi
c0016e86:	53                   	push   ebx
c0016e87:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016e8a:	83 c4 14             	add    esp,0x14
c0016e8d:	68 60 01 00 00       	push   0x160
c0016e92:	e8 a9 89 ff ff       	call   c000f840 <malloc>
c0016e97:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e9a:	89 c7                	mov    edi,eax
c0016e9c:	e8 ab f5 00 00       	call   c002644c <APICTimer::APICTimer()>
c0016ea1:	6a 00                	push   0x0
c0016ea3:	6a 00                	push   0x0
c0016ea5:	56                   	push   esi
c0016ea6:	57                   	push   edi
c0016ea7:	e8 a2 f4 00 00       	call   c002634e <APICTimer::open(int, int, void*)>
c0016eac:	83 c4 20             	add    esp,0x20
c0016eaf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016eb1:	6a 00                	push   0x0
c0016eb3:	6a 00                	push   0x0
c0016eb5:	6a 00                	push   0x0
c0016eb7:	53                   	push   ebx
c0016eb8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016ebb:	58                   	pop    eax
c0016ebc:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c0016ec1:	5a                   	pop    edx
c0016ec2:	57                   	push   edi
c0016ec3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016ec9:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016ecf:	e8 6e d4 ff ff       	call   c0014342 <Device::addChild(Device*)>
c0016ed4:	83 c4 10             	add    esp,0x10
c0016ed7:	eb 33                	jmp    c0016f0c <setupTimer(int)+0xec>
c0016ed9:	83 ec 0c             	sub    esp,0xc
c0016edc:	68 5c 01 00 00       	push   0x15c
c0016ee1:	e8 5a 89 ff ff       	call   c000f840 <malloc>
c0016ee6:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ee9:	89 c3                	mov    ebx,eax
c0016eeb:	e8 ac f6 00 00       	call   c002659c <PIT::PIT()>
c0016ef0:	58                   	pop    eax
c0016ef1:	5a                   	pop    edx
c0016ef2:	53                   	push   ebx
c0016ef3:	ff 35 a8 e5 02 c0    	push   DWORD PTR ds:0xc002e5a8
c0016ef9:	e8 44 d4 ff ff       	call   c0014342 <Device::addChild(Device*)>
c0016efe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f00:	6a 00                	push   0x0
c0016f02:	6a 00                	push   0x0
c0016f04:	56                   	push   esi
c0016f05:	53                   	push   ebx
c0016f06:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f09:	83 c4 20             	add    esp,0x20
c0016f0c:	89 d8                	mov    eax,ebx
c0016f0e:	5b                   	pop    ebx
c0016f0f:	5e                   	pop    esi
c0016f10:	5f                   	pop    edi
c0016f11:	c3                   	ret    

c0016f12 <VCache::VCache(PhysicalDisk*)>:
c0016f12:	53                   	push   ebx
c0016f13:	83 ec 18             	sub    esp,0x18
c0016f16:	ba 54 b4 02 c0       	mov    edx,0xc002b454
c0016f1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f1f:	89 10                	mov    DWORD PTR [eax],edx
c0016f21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f25:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016f2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f30:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016f37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f3b:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016f42:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016f49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f4d:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016f54:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016f5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f5f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016f66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f6a:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016f6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f72:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016f79:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016f80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f84:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016f88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f8c:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016f90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f94:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016f98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f9c:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016fa3:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016fab:	83 ec 0c             	sub    esp,0xc
c0016fae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016fb2:	e8 89 88 ff ff       	call   c000f840 <malloc>
c0016fb7:	83 c4 10             	add    esp,0x10
c0016fba:	89 c3                	mov    ebx,eax
c0016fbc:	83 ec 0c             	sub    esp,0xc
c0016fbf:	53                   	push   ebx
c0016fc0:	e8 3d 6f 00 00       	call   c001df02 <Mutex::Mutex()>
c0016fc5:	83 c4 10             	add    esp,0x10
c0016fc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fcc:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016fcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fd3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016fd7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016fda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fde:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016fe5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016fe9:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016fef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ff3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016ff6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016ffa:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0017000:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017006:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001700a:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001700d:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0017010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017014:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0017018:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001701c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017022:	05 00 01 00 00       	add    eax,0x100
c0017027:	c1 e0 04             	shl    eax,0x4
c001702a:	83 ec 0c             	sub    esp,0xc
c001702d:	50                   	push   eax
c001702e:	e8 0d 88 ff ff       	call   c000f840 <malloc>
c0017033:	83 c4 10             	add    esp,0x10
c0017036:	89 c2                	mov    edx,eax
c0017038:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001703c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001703f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017043:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001704a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001704e:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017052:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017056:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001705c:	c1 e0 07             	shl    eax,0x7
c001705f:	83 ec 0c             	sub    esp,0xc
c0017062:	50                   	push   eax
c0017063:	e8 d8 87 ff ff       	call   c000f840 <malloc>
c0017068:	83 c4 10             	add    esp,0x10
c001706b:	89 c2                	mov    edx,eax
c001706d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017071:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0017074:	90                   	nop
c0017075:	83 c4 18             	add    esp,0x18
c0017078:	5b                   	pop    ebx
c0017079:	c3                   	ret    

c001707a <VCache::invalidateReadBuffer()>:
c001707a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001707e:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0017084:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017088:	c3                   	ret    
c0017089:	90                   	nop

c001708a <VCache::writeWriteBuffer()>:
c001708a:	53                   	push   ebx
c001708b:	83 ec 14             	sub    esp,0x14
c001708e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017092:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017095:	8b 10                	mov    edx,DWORD PTR [eax]
c0017097:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001709a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001709d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00170a0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00170a3:	50                   	push   eax
c00170a4:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00170a7:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00170ae:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00170b5:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00170b9:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00170c0:	83 c4 28             	add    esp,0x28
c00170c3:	5b                   	pop    ebx
c00170c4:	c3                   	ret    
c00170c5:	90                   	nop

c00170c6 <VCache::~VCache()>:
c00170c6:	83 ec 0c             	sub    esp,0xc
c00170c9:	ba 54 b4 02 c0       	mov    edx,0xc002b454
c00170ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170d2:	89 10                	mov    DWORD PTR [eax],edx
c00170d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170d8:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00170db:	84 c0                	test   al,al
c00170dd:	74 0f                	je     c00170ee <VCache::~VCache()+0x28>
c00170df:	83 ec 0c             	sub    esp,0xc
c00170e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170e6:	e8 9f ff ff ff       	call   c001708a <VCache::writeWriteBuffer()>
c00170eb:	83 c4 10             	add    esp,0x10
c00170ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170f2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00170f5:	83 ec 0c             	sub    esp,0xc
c00170f8:	50                   	push   eax
c00170f9:	e8 52 87 ff ff       	call   c000f850 <free>
c00170fe:	83 c4 10             	add    esp,0x10
c0017101:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017105:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017108:	83 ec 0c             	sub    esp,0xc
c001710b:	50                   	push   eax
c001710c:	e8 3f 87 ff ff       	call   c000f850 <free>
c0017111:	83 c4 10             	add    esp,0x10
c0017114:	90                   	nop
c0017115:	83 c4 0c             	add    esp,0xc
c0017118:	c3                   	ret    
c0017119:	90                   	nop

c001711a <VCache::~VCache()>:
c001711a:	83 ec 0c             	sub    esp,0xc
c001711d:	83 ec 0c             	sub    esp,0xc
c0017120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017124:	e8 9d ff ff ff       	call   c00170c6 <VCache::~VCache()>
c0017129:	83 c4 10             	add    esp,0x10
c001712c:	83 ec 08             	sub    esp,0x8
c001712f:	6a 44                	push   0x44
c0017131:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017135:	e8 02 bd ff ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c001713a:	83 c4 10             	add    esp,0x10
c001713d:	83 c4 0c             	add    esp,0xc
c0017140:	c3                   	ret    
c0017141:	90                   	nop

c0017142 <VCache::write(unsigned long long, int, void*)>:
c0017142:	55                   	push   ebp
c0017143:	57                   	push   edi
c0017144:	56                   	push   esi
c0017145:	53                   	push   ebx
c0017146:	83 ec 28             	sub    esp,0x28
c0017149:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001714d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017151:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017155:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017159:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001715c:	e8 03 72 00 00       	call   c001e364 <Semaphore::acquire()>
c0017161:	83 c4 10             	add    esp,0x10
c0017164:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017168:	74 0c                	je     c0017176 <VCache::write(unsigned long long, int, void*)+0x34>
c001716a:	83 ec 0c             	sub    esp,0xc
c001716d:	53                   	push   ebx
c001716e:	e8 07 ff ff ff       	call   c001707a <VCache::invalidateReadBuffer()>
c0017173:	83 c4 10             	add    esp,0x10
c0017176:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001717a:	74 66                	je     c00171e2 <VCache::write(unsigned long long, int, void*)+0xa0>
c001717c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001717f:	99                   	cdq    
c0017180:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017184:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0017187:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001718a:	89 c1                	mov    ecx,eax
c001718c:	89 d0                	mov    eax,edx
c001718e:	31 f1                	xor    ecx,esi
c0017190:	31 f8                	xor    eax,edi
c0017192:	89 ca                	mov    edx,ecx
c0017194:	09 c2                	or     edx,eax
c0017196:	75 3e                	jne    c00171d6 <VCache::write(unsigned long long, int, void*)+0x94>
c0017198:	83 fd 01             	cmp    ebp,0x1
c001719b:	75 39                	jne    c00171d6 <VCache::write(unsigned long long, int, void*)+0x94>
c001719d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00171a0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00171a6:	51                   	push   ecx
c00171a7:	50                   	push   eax
c00171a8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00171ac:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00171b0:	0f af c8             	imul   ecx,eax
c00171b3:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00171b6:	51                   	push   ecx
c00171b7:	e8 88 95 fe ff       	call   c0000744 <memcpy>
c00171bc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171bf:	83 c4 10             	add    esp,0x10
c00171c2:	40                   	inc    eax
c00171c3:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00171c6:	83 c0 80             	add    eax,0xffffff80
c00171c9:	75 57                	jne    c0017222 <VCache::write(unsigned long long, int, void*)+0xe0>
c00171cb:	83 ec 0c             	sub    esp,0xc
c00171ce:	53                   	push   ebx
c00171cf:	e8 b6 fe ff ff       	call   c001708a <VCache::writeWriteBuffer()>
c00171d4:	eb 34                	jmp    c001720a <VCache::write(unsigned long long, int, void*)+0xc8>
c00171d6:	83 ec 0c             	sub    esp,0xc
c00171d9:	53                   	push   ebx
c00171da:	e8 ab fe ff ff       	call   c001708a <VCache::writeWriteBuffer()>
c00171df:	83 c4 10             	add    esp,0x10
c00171e2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00171e5:	83 fd 7f             	cmp    ebp,0x7f
c00171e8:	7f 25                	jg     c001720f <VCache::write(unsigned long long, int, void*)+0xcd>
c00171ea:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00171ed:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00171f0:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00171f3:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00171f7:	52                   	push   edx
c00171f8:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00171fe:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017202:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017205:	e8 3a 95 fe ff       	call   c0000744 <memcpy>
c001720a:	83 c4 10             	add    esp,0x10
c001720d:	eb 13                	jmp    c0017222 <VCache::write(unsigned long long, int, void*)+0xe0>
c001720f:	83 ec 0c             	sub    esp,0xc
c0017212:	8b 10                	mov    edx,DWORD PTR [eax]
c0017214:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017218:	55                   	push   ebp
c0017219:	57                   	push   edi
c001721a:	56                   	push   esi
c001721b:	50                   	push   eax
c001721c:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001721f:	83 c4 20             	add    esp,0x20
c0017222:	83 ec 0c             	sub    esp,0xc
c0017225:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017228:	e8 e5 76 00 00       	call   c001e912 <Semaphore::release()>
c001722d:	83 c4 2c             	add    esp,0x2c
c0017230:	31 c0                	xor    eax,eax
c0017232:	5b                   	pop    ebx
c0017233:	5e                   	pop    esi
c0017234:	5f                   	pop    edi
c0017235:	5d                   	pop    ebp
c0017236:	c3                   	ret    
c0017237:	90                   	nop

c0017238 <VCache::read(unsigned long long, int, void*)>:
c0017238:	55                   	push   ebp
c0017239:	57                   	push   edi
c001723a:	56                   	push   esi
c001723b:	53                   	push   ebx
c001723c:	83 ec 28             	sub    esp,0x28
c001723f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017243:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017247:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001724b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001724f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0017253:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017257:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001725b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001725e:	e8 01 71 00 00       	call   c001e364 <Semaphore::acquire()>
c0017263:	83 c4 10             	add    esp,0x10
c0017266:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001726a:	74 0c                	je     c0017278 <VCache::read(unsigned long long, int, void*)+0x40>
c001726c:	83 ec 0c             	sub    esp,0xc
c001726f:	53                   	push   ebx
c0017270:	e8 15 fe ff ff       	call   c001708a <VCache::writeWriteBuffer()>
c0017275:	83 c4 10             	add    esp,0x10
c0017278:	83 fe 01             	cmp    esi,0x1
c001727b:	0f 85 80 00 00 00    	jne    c0017301 <VCache::read(unsigned long long, int, void*)+0xc9>
c0017281:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017284:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001728b:	75 74                	jne    c0017301 <VCache::read(unsigned long long, int, void*)+0xc9>
c001728d:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017290:	89 d1                	mov    ecx,edx
c0017292:	f7 d9                	neg    ecx
c0017294:	89 cf                	mov    edi,ecx
c0017296:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001729a:	c1 ff 1f             	sar    edi,0x1f
c001729d:	23 0c 24             	and    ecx,DWORD PTR [esp]
c00172a0:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00172a4:	89 ce                	mov    esi,ecx
c00172a6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00172aa:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c00172ae:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00172b2:	89 cf                	mov    edi,ecx
c00172b4:	74 0a                	je     c00172c0 <VCache::read(unsigned long long, int, void*)+0x88>
c00172b6:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c00172b9:	75 05                	jne    c00172c0 <VCache::read(unsigned long long, int, void*)+0x88>
c00172bb:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c00172be:	74 1c                	je     c00172dc <VCache::read(unsigned long long, int, void*)+0xa4>
c00172c0:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c00172c4:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00172c7:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c00172ca:	83 ec 0c             	sub    esp,0xc
c00172cd:	8b 08                	mov    ecx,DWORD PTR [eax]
c00172cf:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00172d2:	52                   	push   edx
c00172d3:	57                   	push   edi
c00172d4:	56                   	push   esi
c00172d5:	50                   	push   eax
c00172d6:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c00172d9:	83 c4 20             	add    esp,0x20
c00172dc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172df:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00172e5:	50                   	push   eax
c00172e6:	52                   	push   edx
c00172e7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00172ea:	48                   	dec    eax
c00172eb:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c00172ef:	0f af c2             	imul   eax,edx
c00172f2:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c00172f5:	50                   	push   eax
c00172f6:	55                   	push   ebp
c00172f7:	e8 48 94 fe ff       	call   c0000744 <memcpy>
c00172fc:	83 c4 10             	add    esp,0x10
c00172ff:	eb 21                	jmp    c0017322 <VCache::read(unsigned long long, int, void*)+0xea>
c0017301:	83 ec 0c             	sub    esp,0xc
c0017304:	53                   	push   ebx
c0017305:	e8 70 fd ff ff       	call   c001707a <VCache::invalidateReadBuffer()>
c001730a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001730d:	8b 10                	mov    edx,DWORD PTR [eax]
c001730f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017312:	56                   	push   esi
c0017313:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017317:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001731b:	50                   	push   eax
c001731c:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001731f:	83 c4 20             	add    esp,0x20
c0017322:	83 ec 0c             	sub    esp,0xc
c0017325:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017328:	e8 e5 75 00 00       	call   c001e912 <Semaphore::release()>
c001732d:	83 c4 2c             	add    esp,0x2c
c0017330:	31 c0                	xor    eax,eax
c0017332:	5b                   	pop    ebx
c0017333:	5e                   	pop    esi
c0017334:	5f                   	pop    edi
c0017335:	5d                   	pop    ebp
c0017336:	c3                   	ret    
c0017337:	90                   	nop

c0017338 <Video::putrect(int, int, int, int, unsigned int)>:
c0017338:	55                   	push   ebp
c0017339:	57                   	push   edi
c001733a:	56                   	push   esi
c001733b:	53                   	push   ebx
c001733c:	83 ec 1c             	sub    esp,0x1c
c001733f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017343:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017347:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001734b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001734f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017353:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017357:	01 df                	add    edi,ebx
c0017359:	39 fb                	cmp    ebx,edi
c001735b:	7d 1f                	jge    c001737c <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001735d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017361:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0017365:	7d 12                	jge    c0017379 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0017367:	8b 16                	mov    edx,DWORD PTR [esi]
c0017369:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001736d:	53                   	push   ebx
c001736e:	55                   	push   ebp
c001736f:	45                   	inc    ebp
c0017370:	56                   	push   esi
c0017371:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017374:	83 c4 10             	add    esp,0x10
c0017377:	eb e8                	jmp    c0017361 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0017379:	43                   	inc    ebx
c001737a:	eb dd                	jmp    c0017359 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001737c:	83 c4 1c             	add    esp,0x1c
c001737f:	5b                   	pop    ebx
c0017380:	5e                   	pop    esi
c0017381:	5f                   	pop    edi
c0017382:	5d                   	pop    ebp
c0017383:	c3                   	ret    

c0017384 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0017384:	55                   	push   ebp
c0017385:	57                   	push   edi
c0017386:	31 ff                	xor    edi,edi
c0017388:	56                   	push   esi
c0017389:	53                   	push   ebx
c001738a:	83 ec 1c             	sub    esp,0x1c
c001738d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017391:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017395:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001739c:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c00173a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00173a5:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00173a9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00173ad:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c00173b0:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00173b4:	01 f9                	add    ecx,edi
c00173b6:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c00173ba:	7d 2f                	jge    c00173eb <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c00173bc:	31 f6                	xor    esi,esi
c00173be:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00173c2:	01 f2                	add    edx,esi
c00173c4:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00173c8:	7d 1a                	jge    c00173e4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00173ca:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00173cd:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c00173d0:	46                   	inc    esi
c00173d1:	51                   	push   ecx
c00173d2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00173d6:	52                   	push   edx
c00173d7:	55                   	push   ebp
c00173d8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00173db:	83 c4 10             	add    esp,0x10
c00173de:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00173e2:	eb da                	jmp    c00173be <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00173e4:	47                   	inc    edi
c00173e5:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00173e9:	eb c5                	jmp    c00173b0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00173eb:	83 c4 1c             	add    esp,0x1c
c00173ee:	5b                   	pop    ebx
c00173ef:	5e                   	pop    esi
c00173f0:	5f                   	pop    edi
c00173f1:	5d                   	pop    ebp
c00173f2:	c3                   	ret    
c00173f3:	90                   	nop

c00173f4 <Video::blit(unsigned int*, int, int, int, int)>:
c00173f4:	55                   	push   ebp
c00173f5:	57                   	push   edi
c00173f6:	56                   	push   esi
c00173f7:	53                   	push   ebx
c00173f8:	83 ec 1c             	sub    esp,0x1c
c00173fb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00173ff:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017403:	85 c0                	test   eax,eax
c0017405:	79 02                	jns    c0017409 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0017407:	31 c0                	xor    eax,eax
c0017409:	c1 e0 02             	shl    eax,0x2
c001740c:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017410:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017414:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017418:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001741c:	39 d8                	cmp    eax,ebx
c001741e:	7e 49                	jle    c0017469 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017420:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017426:	7c 41                	jl     c0017469 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017428:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001742c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017430:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017434:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0017438:	39 f9                	cmp    ecx,edi
c001743a:	7e 22                	jle    c001745e <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001743c:	83 c5 04             	add    ebp,0x4
c001743f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017445:	7c 14                	jl     c001745b <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0017447:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017449:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001744c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017450:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017454:	56                   	push   esi
c0017455:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017458:	83 c4 10             	add    esp,0x10
c001745b:	47                   	inc    edi
c001745c:	eb d2                	jmp    c0017430 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001745e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017462:	43                   	inc    ebx
c0017463:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017467:	eb ab                	jmp    c0017414 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017469:	83 c4 1c             	add    esp,0x1c
c001746c:	5b                   	pop    ebx
c001746d:	5e                   	pop    esi
c001746e:	5f                   	pop    edi
c001746f:	5d                   	pop    ebp
c0017470:	c3                   	ret    
c0017471:	90                   	nop

c0017472 <Video::clearScreen(unsigned int)>:
c0017472:	57                   	push   edi
c0017473:	56                   	push   esi
c0017474:	53                   	push   ebx
c0017475:	31 db                	xor    ebx,ebx
c0017477:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001747b:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017481:	7e 1f                	jle    c00174a2 <Video::clearScreen(unsigned int)+0x30>
c0017483:	31 ff                	xor    edi,edi
c0017485:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001748b:	7e 12                	jle    c001749f <Video::clearScreen(unsigned int)+0x2d>
c001748d:	8b 06                	mov    eax,DWORD PTR [esi]
c001748f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017493:	53                   	push   ebx
c0017494:	57                   	push   edi
c0017495:	47                   	inc    edi
c0017496:	56                   	push   esi
c0017497:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001749a:	83 c4 10             	add    esp,0x10
c001749d:	eb e6                	jmp    c0017485 <Video::clearScreen(unsigned int)+0x13>
c001749f:	43                   	inc    ebx
c00174a0:	eb d9                	jmp    c001747b <Video::clearScreen(unsigned int)+0x9>
c00174a2:	5b                   	pop    ebx
c00174a3:	5e                   	pop    esi
c00174a4:	5f                   	pop    edi
c00174a5:	c3                   	ret    

c00174a6 <Video::putpixel(int, int, unsigned int)>:
c00174a6:	c7 44 24 04 5c b4 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b45c
c00174ae:	e9 0a 31 00 00       	jmp    c001a5bd <Krnl::panic(char const*)>
c00174b3:	90                   	nop

c00174b4 <Video::Video(char const*)>:
c00174b4:	83 ec 0c             	sub    esp,0xc
c00174b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174bb:	83 ec 08             	sub    esp,0x8
c00174be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00174c2:	50                   	push   eax
c00174c3:	e8 6a d0 ff ff       	call   c0014532 <Device::Device(char const*)>
c00174c8:	83 c4 10             	add    esp,0x10
c00174cb:	ba e0 b4 02 c0       	mov    edx,0xc002b4e0
c00174d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174d4:	89 10                	mov    DWORD PTR [eax],edx
c00174d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174da:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00174e4:	90                   	nop
c00174e5:	83 c4 0c             	add    esp,0xc
c00174e8:	c3                   	ret    
c00174e9:	90                   	nop

c00174ea <Video::~Video()>:
c00174ea:	83 ec 0c             	sub    esp,0xc
c00174ed:	ba e0 b4 02 c0       	mov    edx,0xc002b4e0
c00174f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174f6:	89 10                	mov    DWORD PTR [eax],edx
c00174f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174fc:	83 ec 0c             	sub    esp,0xc
c00174ff:	50                   	push   eax
c0017500:	e8 0f cd ff ff       	call   c0014214 <Device::~Device()>
c0017505:	83 c4 10             	add    esp,0x10
c0017508:	90                   	nop
c0017509:	83 c4 0c             	add    esp,0xc
c001750c:	c3                   	ret    
c001750d:	90                   	nop

c001750e <Video::~Video()>:
c001750e:	83 ec 0c             	sub    esp,0xc
c0017511:	83 ec 0c             	sub    esp,0xc
c0017514:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017518:	e8 cd ff ff ff       	call   c00174ea <Video::~Video()>
c001751d:	83 c4 10             	add    esp,0x10
c0017520:	83 ec 08             	sub    esp,0x8
c0017523:	68 64 01 00 00       	push   0x164
c0017528:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001752c:	e8 0b b9 ff ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c0017531:	83 c4 10             	add    esp,0x10
c0017534:	83 c4 0c             	add    esp,0xc
c0017537:	c3                   	ret    

c0017538 <Video::isMonochrome()>:
c0017538:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001753c:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0017542:	c3                   	ret    
c0017543:	90                   	nop

c0017544 <Video::getWidth()>:
c0017544:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017548:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001754e:	c3                   	ret    
c001754f:	90                   	nop

c0017550 <Video::getHeight()>:
c0017550:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017554:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001755a:	c3                   	ret    
c001755b:	90                   	nop

c001755c <Video::drawCursor(int, int, unsigned char*, int)>:
c001755c:	55                   	push   ebp
c001755d:	57                   	push   edi
c001755e:	56                   	push   esi
c001755f:	53                   	push   ebx
c0017560:	83 ec 2c             	sub    esp,0x2c
c0017563:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017567:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001756b:	83 f8 01             	cmp    eax,0x1
c001756e:	19 c9                	sbb    ecx,ecx
c0017570:	31 db                	xor    ebx,ebx
c0017572:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0017576:	89 cd                	mov    ebp,ecx
c0017578:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0017580:	f7 d5                	not    ebp
c0017582:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017588:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001758c:	01 d8                	add    eax,ebx
c001758e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017592:	56                   	push   esi
c0017593:	e8 b8 ff ff ff       	call   c0017550 <Video::getHeight()>
c0017598:	59                   	pop    ecx
c0017599:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001759d:	7e 70                	jle    c001760f <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c001759f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00175a3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00175a7:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00175aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00175ae:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00175b2:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00175b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00175bd:	89 f8                	mov    eax,edi
c00175bf:	83 c0 20             	add    eax,0x20
c00175c2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00175c6:	56                   	push   esi
c00175c7:	e8 78 ff ff ff       	call   c0017544 <Video::getWidth()>
c00175cc:	5a                   	pop    edx
c00175cd:	39 c7                	cmp    edi,eax
c00175cf:	7d 34                	jge    c0017605 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00175d1:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00175d6:	74 05                	je     c00175dd <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00175d8:	8b 06                	mov    eax,DWORD PTR [esi]
c00175da:	55                   	push   ebp
c00175db:	eb 0d                	jmp    c00175ea <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00175dd:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00175e2:	74 12                	je     c00175f6 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00175e4:	8b 06                	mov    eax,DWORD PTR [esi]
c00175e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00175ea:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00175ee:	57                   	push   edi
c00175ef:	56                   	push   esi
c00175f0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00175f3:	83 c4 10             	add    esp,0x10
c00175f6:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00175fa:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00175fe:	47                   	inc    edi
c00175ff:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017603:	75 c1                	jne    c00175c6 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0017605:	43                   	inc    ebx
c0017606:	83 fb 20             	cmp    ebx,0x20
c0017609:	0f 85 79 ff ff ff    	jne    c0017588 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c001760f:	83 c4 2c             	add    esp,0x2c
c0017612:	5b                   	pop    ebx
c0017613:	5e                   	pop    esi
c0017614:	5f                   	pop    edi
c0017615:	5d                   	pop    ebp
c0017616:	c3                   	ret    
c0017617:	90                   	nop

c0017618 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017618:	55                   	push   ebp
c0017619:	57                   	push   edi
c001761a:	56                   	push   esi
c001761b:	53                   	push   ebx
c001761c:	83 ec 28             	sub    esp,0x28
c001761f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017623:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017627:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c001762b:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001762f:	c1 e7 08             	shl    edi,0x8
c0017632:	01 c7                	add    edi,eax
c0017634:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017638:	c1 e0 08             	shl    eax,0x8
c001763b:	01 d0                	add    eax,edx
c001763d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017641:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017645:	0f af c7             	imul   eax,edi
c0017648:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001764f:	50                   	push   eax
c0017650:	e8 eb 81 ff ff       	call   c000f840 <malloc>
c0017655:	83 c4 10             	add    esp,0x10
c0017658:	89 c5                	mov    ebp,eax
c001765a:	85 c0                	test   eax,eax
c001765c:	75 15                	jne    c0017673 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c001765e:	83 ec 0c             	sub    esp,0xc
c0017661:	68 7d b4 02 c0       	push   0xc002b47d
c0017666:	e8 b1 b8 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001766b:	83 c4 10             	add    esp,0x10
c001766e:	e9 1c 01 00 00       	jmp    c001778f <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017673:	be 12 00 00 00       	mov    esi,0x12
c0017678:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001767c:	74 11                	je     c001768f <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c001767e:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0017682:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0017686:	c1 fe 03             	sar    esi,0x3
c0017689:	0f af f0             	imul   esi,eax
c001768c:	83 c6 12             	add    esi,0x12
c001768f:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0017693:	74 04                	je     c0017699 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0017695:	85 ff                	test   edi,edi
c0017697:	75 12                	jne    c00176ab <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017699:	83 ec 0c             	sub    esp,0xc
c001769c:	68 94 b4 02 c0       	push   0xc002b494
c00176a1:	e8 76 b8 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c00176a6:	e9 ce 00 00 00       	jmp    c0017779 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c00176ab:	52                   	push   edx
c00176ac:	52                   	push   edx
c00176ad:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c00176b1:	50                   	push   eax
c00176b2:	68 a9 b4 02 c0       	push   0xc002b4a9
c00176b7:	e8 60 b8 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c00176bc:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c00176c0:	83 c4 10             	add    esp,0x10
c00176c3:	80 fa 02             	cmp    dl,0x2
c00176c6:	0f 85 98 00 00 00    	jne    c0017764 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c00176cc:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00176d1:	75 10                	jne    c00176e3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00176d3:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00176d7:	75 0a                	jne    c00176e3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00176d9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00176dc:	83 e8 18             	sub    eax,0x18
c00176df:	a8 f7                	test   al,0xf7
c00176e1:	74 0a                	je     c00176ed <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c00176e3:	83 ec 0c             	sub    esp,0xc
c00176e6:	68 b6 b4 02 c0       	push   0xc002b4b6
c00176eb:	eb 7f                	jmp    c001776c <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c00176ed:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00176f5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00176fd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017701:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017709:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001770d:	75 0c                	jne    c001771b <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c001770f:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0017714:	c1 e0 18             	shl    eax,0x18
c0017717:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001771b:	41                   	inc    ecx
c001771c:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0017721:	c1 e2 10             	shl    edx,0x10
c0017724:	89 d0                	mov    eax,edx
c0017726:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c001772b:	c1 e2 08             	shl    edx,0x8
c001772e:	09 c2                	or     edx,eax
c0017730:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0017734:	09 c2                	or     edx,eax
c0017736:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c001773a:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c001773e:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017742:	c1 f8 03             	sar    eax,0x3
c0017745:	01 c6                	add    esi,eax
c0017747:	89 c8                	mov    eax,ecx
c0017749:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001774d:	39 c7                	cmp    edi,eax
c001774f:	7f b0                	jg     c0017701 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0017751:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017755:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017759:	39 14 24             	cmp    DWORD PTR [esp],edx
c001775c:	7e 22                	jle    c0017780 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c001775e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0017762:	eb 99                	jmp    c00176fd <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0017764:	50                   	push   eax
c0017765:	50                   	push   eax
c0017766:	52                   	push   edx
c0017767:	68 c4 b4 02 c0       	push   0xc002b4c4
c001776c:	e8 ab b7 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0017771:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017774:	e8 d7 80 ff ff       	call   c000f850 <free>
c0017779:	83 c4 10             	add    esp,0x10
c001777c:	31 ed                	xor    ebp,ebp
c001777e:	eb 0f                	jmp    c001778f <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017780:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017784:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017787:	89 38                	mov    DWORD PTR [eax],edi
c0017789:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001778d:	89 08                	mov    DWORD PTR [eax],ecx
c001778f:	83 c4 1c             	add    esp,0x1c
c0017792:	89 e8                	mov    eax,ebp
c0017794:	5b                   	pop    ebx
c0017795:	5e                   	pop    esi
c0017796:	5f                   	pop    edi
c0017797:	5d                   	pop    ebp
c0017798:	c3                   	ret    
c0017799:	90                   	nop

c001779a <Video::putTGA(int, int, unsigned char*, int)>:
c001779a:	55                   	push   ebp
c001779b:	57                   	push   edi
c001779c:	56                   	push   esi
c001779d:	53                   	push   ebx
c001779e:	83 ec 28             	sub    esp,0x28
c00177a1:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00177a5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177a9:	50                   	push   eax
c00177aa:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177ae:	50                   	push   eax
c00177af:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00177b3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00177b7:	56                   	push   esi
c00177b8:	e8 5b fe ff ff       	call   c0017618 <Video::tgaParse(unsigned char*, int, int*, int*)>
c00177bd:	83 c4 20             	add    esp,0x20
c00177c0:	85 c0                	test   eax,eax
c00177c2:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00177c6:	74 35                	je     c00177fd <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00177c8:	89 c7                	mov    edi,eax
c00177ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00177ce:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00177d2:	39 d8                	cmp    eax,ebx
c00177d4:	7e 27                	jle    c00177fd <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00177d6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00177da:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00177de:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00177e2:	39 e8                	cmp    eax,ebp
c00177e4:	7e 14                	jle    c00177fa <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00177e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00177e8:	83 c7 04             	add    edi,0x4
c00177eb:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00177ee:	53                   	push   ebx
c00177ef:	55                   	push   ebp
c00177f0:	45                   	inc    ebp
c00177f1:	56                   	push   esi
c00177f2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00177f5:	83 c4 10             	add    esp,0x10
c00177f8:	eb e0                	jmp    c00177da <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00177fa:	43                   	inc    ebx
c00177fb:	eb cd                	jmp    c00177ca <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00177fd:	83 c4 1c             	add    esp,0x1c
c0017800:	5b                   	pop    ebx
c0017801:	5e                   	pop    esi
c0017802:	5f                   	pop    edi
c0017803:	5d                   	pop    ebp
c0017804:	c3                   	ret    
c0017805:	90                   	nop

c0017806 <ACPI::close(int, int, void*)>:
c0017806:	83 ec 1c             	sub    esp,0x1c
c0017809:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017811:	74 0a                	je     c001781d <ACPI::close(int, int, void*)+0x17>
c0017813:	b8 00 00 00 00       	mov    eax,0x0
c0017818:	e9 9a 00 00 00       	jmp    c00178b7 <ACPI::close(int, int, void*)+0xb1>
c001781d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017822:	75 37                	jne    c001785b <ACPI::close(int, int, void*)+0x55>
c0017824:	83 ec 0c             	sub    esp,0xc
c0017827:	68 20 b5 02 c0       	push   0xc002b520
c001782c:	e8 eb b6 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0017831:	83 c4 10             	add    esp,0x10
c0017834:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c0017839:	85 c0                	test   eax,eax
c001783b:	74 07                	je     c0017844 <ACPI::close(int, int, void*)+0x3e>
c001783d:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c0017842:	ff d0                	call   eax
c0017844:	83 ec 0c             	sub    esp,0xc
c0017847:	68 44 b6 02 c0       	push   0xc002b644
c001784c:	e8 6c 2d 00 00       	call   c001a5bd <Krnl::panic(char const*)>
c0017851:	83 c4 10             	add    esp,0x10
c0017854:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017859:	eb 5c                	jmp    c00178b7 <ACPI::close(int, int, void*)+0xb1>
c001785b:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017860:	75 50                	jne    c00178b2 <ACPI::close(int, int, void*)+0xac>
c0017862:	a1 64 0c 03 c0       	mov    eax,ds:0xc0030c64
c0017867:	85 c0                	test   eax,eax
c0017869:	74 07                	je     c0017872 <ACPI::close(int, int, void*)+0x6c>
c001786b:	a1 64 0c 03 c0       	mov    eax,ds:0xc0030c64
c0017870:	ff d0                	call   eax
c0017872:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017877:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001787c:	83 e0 02             	and    eax,0x2
c001787f:	74 1c                	je     c001789d <ACPI::close(int, int, void*)+0x97>
c0017881:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017888:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001788c:	89 c2                	mov    edx,eax
c001788e:	ec                   	in     al,dx
c001788f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017893:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017897:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001789b:	eb da                	jmp    c0017877 <ACPI::close(int, int, void*)+0x71>
c001789d:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00178a4:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00178a9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00178ad:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00178b1:	ee                   	out    dx,al
c00178b2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00178b7:	83 c4 1c             	add    esp,0x1c
c00178ba:	c3                   	ret    

c00178bb <findRSDP()>:
c00178bb:	83 ec 1c             	sub    esp,0x1c
c00178be:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c00178c3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00178c9:	83 e0 04             	and    eax,0x4
c00178cc:	84 c0                	test   al,al
c00178ce:	75 07                	jne    c00178d7 <findRSDP()+0x1c>
c00178d0:	b8 00 00 00 00       	mov    eax,0x0
c00178d5:	eb 6a                	jmp    c0017941 <findRSDP()+0x86>
c00178d7:	a1 f4 e5 02 c0       	mov    eax,ds:0xc002e5f4
c00178dc:	3d ff 07 00 00       	cmp    eax,0x7ff
c00178e1:	7f 1b                	jg     c00178fe <findRSDP()+0x43>
c00178e3:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c00178e8:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00178ee:	83 e2 fb             	and    edx,0xfffffffb
c00178f1:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00178f7:	b8 00 00 00 00       	mov    eax,0x0
c00178fc:	eb 43                	jmp    c0017941 <findRSDP()+0x86>
c00178fe:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017906:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001790e:	77 2c                	ja     c001793c <findRSDP()+0x81>
c0017910:	83 ec 04             	sub    esp,0x4
c0017913:	6a 08                	push   0x8
c0017915:	68 2d b5 02 c0       	push   0xc002b52d
c001791a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001791e:	e8 1d 8d fe ff       	call   c0000640 <memcmp>
c0017923:	83 c4 10             	add    esp,0x10
c0017926:	85 c0                	test   eax,eax
c0017928:	0f 94 c0             	sete   al
c001792b:	84 c0                	test   al,al
c001792d:	74 06                	je     c0017935 <findRSDP()+0x7a>
c001792f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017933:	eb 0c                	jmp    c0017941 <findRSDP()+0x86>
c0017935:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001793a:	eb ca                	jmp    c0017906 <findRSDP()+0x4b>
c001793c:	b8 00 00 00 00       	mov    eax,0x0
c0017941:	83 c4 1c             	add    esp,0x1c
c0017944:	c3                   	ret    

c0017945 <loadACPITables(unsigned char*)>:
c0017945:	56                   	push   esi
c0017946:	53                   	push   ebx
c0017947:	83 ec 44             	sub    esp,0x44
c001794a:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c001794f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017955:	83 e0 04             	and    eax,0x4
c0017958:	84 c0                	test   al,al
c001795a:	0f 84 05 02 00 00    	je     c0017b65 <loadACPITables(unsigned char*)+0x220>
c0017960:	a0 80 0e 03 c0       	mov    al,ds:0xc0030e80
c0017965:	84 c0                	test   al,al
c0017967:	74 75                	je     c00179de <loadACPITables(unsigned char*)+0x99>
c0017969:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001796d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017971:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017975:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017978:	83 e8 24             	sub    eax,0x24
c001797b:	c1 e8 03             	shr    eax,0x3
c001797e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017982:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001798a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001798e:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0017992:	0f 8d b2 00 00 00    	jge    c0017a4a <loadACPITables(unsigned char*)+0x105>
c0017998:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001799c:	83 c0 24             	add    eax,0x24
c001799f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00179a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179a7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00179ab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00179af:	c1 e0 03             	shl    eax,0x3
c00179b2:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00179b6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00179ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00179bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00179bf:	89 c1                	mov    ecx,eax
c00179c1:	a1 6c 0c 03 c0       	mov    eax,ds:0xc0030c6c
c00179c6:	8d 50 01             	lea    edx,[eax+0x1]
c00179c9:	89 15 6c 0c 03 c0    	mov    DWORD PTR ds:0xc0030c6c,edx
c00179cf:	89 ca                	mov    edx,ecx
c00179d1:	89 14 c5 84 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf37c],edx
c00179d8:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c00179dc:	eb ac                	jmp    c001798a <loadACPITables(unsigned char*)+0x45>
c00179de:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179e2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00179e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179ed:	83 e8 24             	sub    eax,0x24
c00179f0:	c1 e8 02             	shr    eax,0x2
c00179f3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00179f7:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c00179ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a03:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017a07:	7d 41                	jge    c0017a4a <loadACPITables(unsigned char*)+0x105>
c0017a09:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a0d:	83 c0 24             	add    eax,0x24
c0017a10:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017a14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a18:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a1c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a20:	c1 e0 02             	shl    eax,0x2
c0017a23:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017a27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a2b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017a2d:	a1 6c 0c 03 c0       	mov    eax,ds:0xc0030c6c
c0017a32:	8d 50 01             	lea    edx,[eax+0x1]
c0017a35:	89 15 6c 0c 03 c0    	mov    DWORD PTR ds:0xc0030c6c,edx
c0017a3b:	89 ca                	mov    edx,ecx
c0017a3d:	89 14 c5 84 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf37c],edx
c0017a44:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017a48:	eb b5                	jmp    c00179ff <loadACPITables(unsigned char*)+0xba>
c0017a4a:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017a52:	a1 6c 0c 03 c0       	mov    eax,ds:0xc0030c6c
c0017a57:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017a5b:	0f 8d 05 01 00 00    	jge    c0017b66 <loadACPITables(unsigned char*)+0x221>
c0017a61:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a65:	8b 04 c5 84 0c 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf37c]
c0017a6c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a74:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017a78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a7c:	25 ff 0f 00 00       	and    eax,0xfff
c0017a81:	89 c6                	mov    esi,eax
c0017a83:	e8 9e a3 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0017a88:	89 c3                	mov    ebx,eax
c0017a8a:	83 ec 0c             	sub    esp,0xc
c0017a8d:	6a 01                	push   0x1
c0017a8f:	e8 f7 a0 ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0017a94:	83 c4 10             	add    esp,0x10
c0017a97:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017a9b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017aa1:	83 ec 0c             	sub    esp,0xc
c0017aa4:	6a 01                	push   0x1
c0017aa6:	6a 01                	push   0x1
c0017aa8:	50                   	push   eax
c0017aa9:	52                   	push   edx
c0017aaa:	53                   	push   ebx
c0017aab:	e8 a6 ab ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017ab0:	83 c4 20             	add    esp,0x20
c0017ab3:	09 f0                	or     eax,esi
c0017ab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017ab9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017abd:	c1 e0 03             	shl    eax,0x3
c0017ac0:	05 80 0c 03 c0       	add    eax,0xc0030c80
c0017ac5:	83 ec 04             	sub    esp,0x4
c0017ac8:	6a 04                	push   0x4
c0017aca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017ace:	50                   	push   eax
c0017acf:	e8 70 8c fe ff       	call   c0000744 <memcpy>
c0017ad4:	83 c4 10             	add    esp,0x10
c0017ad7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017adb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ade:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017ae2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ae6:	05 00 10 00 00       	add    eax,0x1000
c0017aeb:	c1 e8 0c             	shr    eax,0xc
c0017aee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017af2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017af6:	89 04 24             	mov    DWORD PTR [esp],eax
c0017af9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017afd:	25 ff 0f 00 00       	and    eax,0xfff
c0017b02:	89 c6                	mov    esi,eax
c0017b04:	e8 1d a3 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0017b09:	89 c3                	mov    ebx,eax
c0017b0b:	83 ec 0c             	sub    esp,0xc
c0017b0e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017b12:	e8 74 a0 ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0017b17:	83 c4 10             	add    esp,0x10
c0017b1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b1e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b24:	83 ec 0c             	sub    esp,0xc
c0017b27:	6a 01                	push   0x1
c0017b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017b2d:	50                   	push   eax
c0017b2e:	52                   	push   edx
c0017b2f:	53                   	push   ebx
c0017b30:	e8 21 ab ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b35:	83 c4 20             	add    esp,0x20
c0017b38:	09 f0                	or     eax,esi
c0017b3a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b3e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017b41:	83 ec 0c             	sub    esp,0xc
c0017b44:	50                   	push   eax
c0017b45:	e8 b1 a4 ff ff       	call   c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c0017b4a:	83 c4 10             	add    esp,0x10
c0017b4d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b51:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017b55:	89 14 c5 84 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf37c],edx
c0017b5c:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017b60:	e9 ed fe ff ff       	jmp    c0017a52 <loadACPITables(unsigned char*)+0x10d>
c0017b65:	90                   	nop
c0017b66:	83 c4 44             	add    esp,0x44
c0017b69:	5b                   	pop    ebx
c0017b6a:	5e                   	pop    esi
c0017b6b:	c3                   	ret    

c0017b6c <findRSDT(unsigned char*)>:
c0017b6c:	56                   	push   esi
c0017b6d:	53                   	push   ebx
c0017b6e:	83 ec 44             	sub    esp,0x44
c0017b71:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c0017b76:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017b7c:	83 e0 04             	and    eax,0x4
c0017b7f:	84 c0                	test   al,al
c0017b81:	75 0a                	jne    c0017b8d <findRSDT(unsigned char*)+0x21>
c0017b83:	b8 00 00 00 00       	mov    eax,0x0
c0017b88:	e9 f7 00 00 00       	jmp    c0017c84 <findRSDT(unsigned char*)+0x118>
c0017b8d:	83 ec 04             	sub    esp,0x4
c0017b90:	6a 24                	push   0x24
c0017b92:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017b96:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017b9a:	50                   	push   eax
c0017b9b:	e8 a4 8b fe ff       	call   c0000744 <memcpy>
c0017ba0:	83 c4 10             	add    esp,0x10
c0017ba3:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017ba7:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017bab:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017bb3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017bb7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bbb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017bbf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017bc3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017bc7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017bcb:	25 ff 0f 00 00       	and    eax,0xfff
c0017bd0:	89 c6                	mov    esi,eax
c0017bd2:	e8 4f a2 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0017bd7:	89 c3                	mov    ebx,eax
c0017bd9:	83 ec 0c             	sub    esp,0xc
c0017bdc:	6a 02                	push   0x2
c0017bde:	e8 a8 9f ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0017be3:	83 c4 10             	add    esp,0x10
c0017be6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017bea:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017bf0:	83 ec 0c             	sub    esp,0xc
c0017bf3:	6a 01                	push   0x1
c0017bf5:	6a 02                	push   0x2
c0017bf7:	50                   	push   eax
c0017bf8:	52                   	push   edx
c0017bf9:	53                   	push   ebx
c0017bfa:	e8 57 aa ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017bff:	83 c4 20             	add    esp,0x20
c0017c02:	09 f0                	or     eax,esi
c0017c04:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017c08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c0c:	25 ff 0f 00 00       	and    eax,0xfff
c0017c11:	89 c6                	mov    esi,eax
c0017c13:	e8 0e a2 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0017c18:	89 c3                	mov    ebx,eax
c0017c1a:	83 ec 0c             	sub    esp,0xc
c0017c1d:	6a 02                	push   0x2
c0017c1f:	e8 67 9f ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0017c24:	83 c4 10             	add    esp,0x10
c0017c27:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017c2b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c31:	83 ec 0c             	sub    esp,0xc
c0017c34:	6a 01                	push   0x1
c0017c36:	6a 02                	push   0x2
c0017c38:	50                   	push   eax
c0017c39:	52                   	push   edx
c0017c3a:	53                   	push   ebx
c0017c3b:	e8 16 aa ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c40:	83 c4 20             	add    esp,0x20
c0017c43:	09 f0                	or     eax,esi
c0017c45:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c49:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017c4e:	75 11                	jne    c0017c61 <findRSDT(unsigned char*)+0xf5>
c0017c50:	c6 05 80 0e 03 c0 00 	mov    BYTE PTR ds:0xc0030e80,0x0
c0017c57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c5b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017c5f:	eb 1f                	jmp    c0017c80 <findRSDT(unsigned char*)+0x114>
c0017c61:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017c66:	75 11                	jne    c0017c79 <findRSDT(unsigned char*)+0x10d>
c0017c68:	c6 05 80 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030e80,0x1
c0017c6f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c73:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017c77:	eb 07                	jmp    c0017c80 <findRSDT(unsigned char*)+0x114>
c0017c79:	b8 00 00 00 00       	mov    eax,0x0
c0017c7e:	eb 04                	jmp    c0017c84 <findRSDT(unsigned char*)+0x118>
c0017c80:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017c84:	83 c4 44             	add    esp,0x44
c0017c87:	5b                   	pop    ebx
c0017c88:	5e                   	pop    esi
c0017c89:	c3                   	ret    

c0017c8a <findDataTable(unsigned char*, char*)>:
c0017c8a:	83 ec 1c             	sub    esp,0x1c
c0017c8d:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c0017c92:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c98:	83 e0 04             	and    eax,0x4
c0017c9b:	84 c0                	test   al,al
c0017c9d:	75 07                	jne    c0017ca6 <findDataTable(unsigned char*, char*)+0x1c>
c0017c9f:	b8 00 00 00 00       	mov    eax,0x0
c0017ca4:	eb 7c                	jmp    c0017d22 <findDataTable(unsigned char*, char*)+0x98>
c0017ca6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017cae:	a1 6c 0c 03 c0       	mov    eax,ds:0xc0030c6c
c0017cb3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017cb7:	7d 3a                	jge    c0017cf3 <findDataTable(unsigned char*, char*)+0x69>
c0017cb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017cbd:	c1 e0 03             	shl    eax,0x3
c0017cc0:	05 80 0c 03 c0       	add    eax,0xc0030c80
c0017cc5:	83 ec 04             	sub    esp,0x4
c0017cc8:	6a 04                	push   0x4
c0017cca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017cce:	50                   	push   eax
c0017ccf:	e8 6c 89 fe ff       	call   c0000640 <memcmp>
c0017cd4:	83 c4 10             	add    esp,0x10
c0017cd7:	85 c0                	test   eax,eax
c0017cd9:	0f 94 c0             	sete   al
c0017cdc:	84 c0                	test   al,al
c0017cde:	74 0d                	je     c0017ced <findDataTable(unsigned char*, char*)+0x63>
c0017ce0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ce4:	8b 04 c5 84 0c 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf37c]
c0017ceb:	eb 35                	jmp    c0017d22 <findDataTable(unsigned char*, char*)+0x98>
c0017ced:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017cf1:	eb bb                	jmp    c0017cae <findDataTable(unsigned char*, char*)+0x24>
c0017cf3:	a0 80 0e 03 c0       	mov    al,ds:0xc0030e80
c0017cf8:	84 c0                	test   al,al
c0017cfa:	74 07                	je     c0017d03 <findDataTable(unsigned char*, char*)+0x79>
c0017cfc:	b8 58 00 00 00       	mov    eax,0x58
c0017d01:	eb 05                	jmp    c0017d08 <findDataTable(unsigned char*, char*)+0x7e>
c0017d03:	b8 52 00 00 00       	mov    eax,0x52
c0017d08:	83 ec 04             	sub    esp,0x4
c0017d0b:	50                   	push   eax
c0017d0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d10:	68 68 b6 02 c0       	push   0xc002b668
c0017d15:	e8 02 b2 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0017d1a:	83 c4 10             	add    esp,0x10
c0017d1d:	b8 00 00 00 00       	mov    eax,0x0
c0017d22:	83 c4 1c             	add    esp,0x1c
c0017d25:	c3                   	ret    

c0017d26 <scanMADT()>:
c0017d26:	53                   	push   ebx
c0017d27:	83 ec 38             	sub    esp,0x38
c0017d2a:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c0017d2f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d35:	83 e0 04             	and    eax,0x4
c0017d38:	84 c0                	test   al,al
c0017d3a:	0f 84 63 04 00 00    	je     c00181a3 <scanMADT()+0x47d>
c0017d40:	e8 76 fb ff ff       	call   c00178bb <findRSDP()>
c0017d45:	a3 8c 0e 03 c0       	mov    ds:0xc0030e8c,eax
c0017d4a:	a1 8c 0e 03 c0       	mov    eax,ds:0xc0030e8c
c0017d4f:	85 c0                	test   eax,eax
c0017d51:	75 19                	jne    c0017d6c <scanMADT()+0x46>
c0017d53:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c0017d58:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017d5e:	83 e2 fb             	and    edx,0xfffffffb
c0017d61:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017d67:	e9 3b 04 00 00       	jmp    c00181a7 <scanMADT()+0x481>
c0017d6c:	a1 8c 0e 03 c0       	mov    eax,ds:0xc0030e8c
c0017d71:	83 ec 0c             	sub    esp,0xc
c0017d74:	50                   	push   eax
c0017d75:	e8 f2 fd ff ff       	call   c0017b6c <findRSDT(unsigned char*)>
c0017d7a:	83 c4 10             	add    esp,0x10
c0017d7d:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c0017d82:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c0017d87:	85 c0                	test   eax,eax
c0017d89:	75 19                	jne    c0017da4 <scanMADT()+0x7e>
c0017d8b:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c0017d90:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017d96:	83 e2 fb             	and    edx,0xfffffffb
c0017d99:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017d9f:	e9 03 04 00 00       	jmp    c00181a7 <scanMADT()+0x481>
c0017da4:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c0017da9:	83 ec 0c             	sub    esp,0xc
c0017dac:	50                   	push   eax
c0017dad:	e8 93 fb ff ff       	call   c0017945 <loadACPITables(unsigned char*)>
c0017db2:	83 c4 10             	add    esp,0x10
c0017db5:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c0017dba:	83 ec 08             	sub    esp,0x8
c0017dbd:	68 36 b5 02 c0       	push   0xc002b536
c0017dc2:	50                   	push   eax
c0017dc3:	e8 c2 fe ff ff       	call   c0017c8a <findDataTable(unsigned char*, char*)>
c0017dc8:	83 c4 10             	add    esp,0x10
c0017dcb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017dcf:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017dd4:	75 19                	jne    c0017def <scanMADT()+0xc9>
c0017dd6:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c0017ddb:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017de1:	83 e2 fe             	and    edx,0xfffffffe
c0017de4:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017dea:	e9 b8 03 00 00       	jmp    c00181a7 <scanMADT()+0x481>
c0017def:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017df7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017dfb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017dfe:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017e02:	0f 87 9f 03 00 00    	ja     c00181a7 <scanMADT()+0x481>
c0017e08:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017e10:	0f 87 91 03 00 00    	ja     c00181a7 <scanMADT()+0x481>
c0017e16:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e1a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017e1e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e22:	8d 50 01             	lea    edx,[eax+0x1]
c0017e25:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e29:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e2d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e31:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017e35:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e39:	8d 50 01             	lea    edx,[eax+0x1]
c0017e3c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e40:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e44:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e48:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017e4c:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017e51:	0f 86 4f 03 00 00    	jbe    c00181a6 <scanMADT()+0x480>
c0017e57:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017e5c:	75 57                	jne    c0017eb5 <scanMADT()+0x18f>
c0017e5e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e62:	8d 50 01             	lea    edx,[eax+0x1]
c0017e65:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e69:	8a 15 80 10 03 c0    	mov    dl,BYTE PTR ds:0xc0031080
c0017e6f:	0f b6 d2             	movzx  edx,dl
c0017e72:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017e76:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017e7a:	88 82 c0 10 03 c0    	mov    BYTE PTR [edx-0x3ffcef40],al
c0017e80:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e84:	8d 50 01             	lea    edx,[eax+0x1]
c0017e87:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e8b:	8a 15 80 10 03 c0    	mov    dl,BYTE PTR ds:0xc0031080
c0017e91:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017e94:	88 0d 80 10 03 c0    	mov    BYTE PTR ds:0xc0031080,cl
c0017e9a:	0f b6 d2             	movzx  edx,dl
c0017e9d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017ea1:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017ea5:	88 82 a0 10 03 c0    	mov    BYTE PTR [edx-0x3ffcef60],al
c0017eab:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017eb0:	e9 da 02 00 00       	jmp    c001818f <scanMADT()+0x469>
c0017eb5:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017eba:	0f 85 14 01 00 00    	jne    c0017fd4 <scanMADT()+0x2ae>
c0017ec0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ec4:	8d 50 01             	lea    edx,[eax+0x1]
c0017ec7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ecb:	8a 15 40 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030f40
c0017ed1:	0f b6 d2             	movzx  edx,dl
c0017ed4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017ed8:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017edc:	88 82 60 0f 03 c0    	mov    BYTE PTR [edx-0x3ffcf0a0],al
c0017ee2:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017ee6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017eea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eee:	01 d0                	add    eax,edx
c0017ef0:	83 c0 2c             	add    eax,0x2c
c0017ef3:	8a 00                	mov    al,BYTE PTR [eax]
c0017ef5:	0f b6 d0             	movzx  edx,al
c0017ef8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017efc:	8d 48 01             	lea    ecx,[eax+0x1]
c0017eff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f03:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017f07:	0f b6 c0             	movzx  eax,al
c0017f0a:	c1 e0 08             	shl    eax,0x8
c0017f0d:	89 d1                	mov    ecx,edx
c0017f0f:	09 c1                	or     ecx,eax
c0017f11:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f15:	8d 50 02             	lea    edx,[eax+0x2]
c0017f18:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f1c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f20:	0f b6 c0             	movzx  eax,al
c0017f23:	c1 e0 10             	shl    eax,0x10
c0017f26:	09 c1                	or     ecx,eax
c0017f28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f2c:	8d 50 03             	lea    edx,[eax+0x3]
c0017f2f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f33:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f37:	0f b6 c0             	movzx  eax,al
c0017f3a:	c1 e0 18             	shl    eax,0x18
c0017f3d:	09 c1                	or     ecx,eax
c0017f3f:	89 ca                	mov    edx,ecx
c0017f41:	a0 40 0f 03 c0       	mov    al,ds:0xc0030f40
c0017f46:	0f b6 c0             	movzx  eax,al
c0017f49:	89 14 85 80 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf080],edx
c0017f50:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f55:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f59:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f5d:	01 d0                	add    eax,edx
c0017f5f:	83 c0 2c             	add    eax,0x2c
c0017f62:	8a 00                	mov    al,BYTE PTR [eax]
c0017f64:	0f b6 d0             	movzx  edx,al
c0017f67:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f6b:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f6e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f72:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017f76:	0f b6 c0             	movzx  eax,al
c0017f79:	c1 e0 08             	shl    eax,0x8
c0017f7c:	89 d1                	mov    ecx,edx
c0017f7e:	09 c1                	or     ecx,eax
c0017f80:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f84:	8d 50 02             	lea    edx,[eax+0x2]
c0017f87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f8b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f8f:	0f b6 c0             	movzx  eax,al
c0017f92:	c1 e0 10             	shl    eax,0x10
c0017f95:	09 c1                	or     ecx,eax
c0017f97:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f9b:	8d 50 03             	lea    edx,[eax+0x3]
c0017f9e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fa2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017fa6:	0f b6 c0             	movzx  eax,al
c0017fa9:	c1 e0 18             	shl    eax,0x18
c0017fac:	09 c1                	or     ecx,eax
c0017fae:	89 ca                	mov    edx,ecx
c0017fb0:	a0 40 0f 03 c0       	mov    al,ds:0xc0030f40
c0017fb5:	0f b6 c0             	movzx  eax,al
c0017fb8:	89 14 85 00 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf000],edx
c0017fbf:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017fc4:	a0 40 0f 03 c0       	mov    al,ds:0xc0030f40
c0017fc9:	40                   	inc    eax
c0017fca:	a2 40 0f 03 c0       	mov    ds:0xc0030f40,al
c0017fcf:	e9 bb 01 00 00       	jmp    c001818f <scanMADT()+0x469>
c0017fd4:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017fd9:	0f 85 e9 00 00 00    	jne    c00180c8 <scanMADT()+0x3a2>
c0017fdf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fe3:	8d 50 01             	lea    edx,[eax+0x1]
c0017fe6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fea:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fee:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ff2:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017ff6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ffa:	8d 50 01             	lea    edx,[eax+0x1]
c0017ffd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018001:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018005:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018009:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001800d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018011:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018015:	01 d0                	add    eax,edx
c0018017:	83 c0 2c             	add    eax,0x2c
c001801a:	8a 00                	mov    al,BYTE PTR [eax]
c001801c:	0f b6 d0             	movzx  edx,al
c001801f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018023:	8d 48 01             	lea    ecx,[eax+0x1]
c0018026:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001802a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001802e:	0f b6 c0             	movzx  eax,al
c0018031:	c1 e0 08             	shl    eax,0x8
c0018034:	89 d1                	mov    ecx,edx
c0018036:	09 c1                	or     ecx,eax
c0018038:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001803c:	8d 50 02             	lea    edx,[eax+0x2]
c001803f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018043:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018047:	0f b6 c0             	movzx  eax,al
c001804a:	c1 e0 10             	shl    eax,0x10
c001804d:	09 c1                	or     ecx,eax
c001804f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018053:	8d 50 03             	lea    edx,[eax+0x3]
c0018056:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001805a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001805e:	0f b6 c0             	movzx  eax,al
c0018061:	c1 e0 18             	shl    eax,0x18
c0018064:	09 c8                	or     eax,ecx
c0018066:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001806a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001806f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018073:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018077:	01 d0                	add    eax,edx
c0018079:	83 c0 2c             	add    eax,0x2c
c001807c:	8a 00                	mov    al,BYTE PTR [eax]
c001807e:	0f b6 c0             	movzx  eax,al
c0018081:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018085:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018088:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001808c:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0018090:	0f b6 d2             	movzx  edx,dl
c0018093:	c1 e2 08             	shl    edx,0x8
c0018096:	09 d0                	or     eax,edx
c0018098:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001809d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00180a2:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00180a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00180ab:	88 90 00 d8 02 c0    	mov    BYTE PTR [eax-0x3ffd2800],dl
c00180b1:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00180b6:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00180bb:	66 89 84 12 20 0f 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf0e0],ax
c00180c3:	e9 c7 00 00 00       	jmp    c001818f <scanMADT()+0x469>
c00180c8:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00180cd:	0f 85 b0 00 00 00    	jne    c0018183 <scanMADT()+0x45d>
c00180d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180d7:	8d 50 01             	lea    edx,[eax+0x1]
c00180da:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00180de:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180e2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00180e6:	0f b6 c0             	movzx  eax,al
c00180e9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00180ed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180f5:	01 d0                	add    eax,edx
c00180f7:	83 c0 2c             	add    eax,0x2c
c00180fa:	8a 00                	mov    al,BYTE PTR [eax]
c00180fc:	0f b6 d0             	movzx  edx,al
c00180ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018103:	8d 48 01             	lea    ecx,[eax+0x1]
c0018106:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001810a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001810e:	0f b6 c0             	movzx  eax,al
c0018111:	c1 e0 08             	shl    eax,0x8
c0018114:	09 d0                	or     eax,edx
c0018116:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001811a:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001811f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018123:	8d 50 01             	lea    edx,[eax+0x1]
c0018126:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001812a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001812e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018132:	0f b6 c0             	movzx  eax,al
c0018135:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001813d:	c1 e0 08             	shl    eax,0x8
c0018140:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0018144:	89 c1                	mov    ecx,eax
c0018146:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001814a:	c1 e0 18             	shl    eax,0x18
c001814d:	89 c3                	mov    ebx,eax
c001814f:	a1 90 0e 03 c0       	mov    eax,ds:0xc0030e90
c0018154:	8d 50 01             	lea    edx,[eax+0x1]
c0018157:	89 15 90 0e 03 c0    	mov    DWORD PTR ds:0xc0030e90,edx
c001815d:	09 d9                	or     ecx,ebx
c001815f:	89 ca                	mov    edx,ecx
c0018161:	89 14 85 a0 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf160],edx
c0018168:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001816c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018170:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018174:	68 98 b6 02 c0       	push   0xc002b698
c0018179:	e8 9e ad ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001817e:	83 c4 10             	add    esp,0x10
c0018181:	eb 0c                	jmp    c001818f <scanMADT()+0x469>
c0018183:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0018188:	75 05                	jne    c001818f <scanMADT()+0x469>
c001818a:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001818f:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0018194:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018198:	01 d0                	add    eax,edx
c001819a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001819e:	e9 54 fc ff ff       	jmp    c0017df7 <scanMADT()+0xd1>
c00181a3:	90                   	nop
c00181a4:	eb 01                	jmp    c00181a7 <scanMADT()+0x481>
c00181a6:	90                   	nop
c00181a7:	83 c4 38             	add    esp,0x38
c00181aa:	5b                   	pop    ebx
c00181ab:	c3                   	ret    

c00181ac <ACPI::ACPI()>:
c00181ac:	83 ec 0c             	sub    esp,0xc
c00181af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181b3:	83 ec 08             	sub    esp,0x8
c00181b6:	68 3b b5 02 c0       	push   0xc002b53b
c00181bb:	50                   	push   eax
c00181bc:	e8 71 c3 ff ff       	call   c0014532 <Device::Device(char const*)>
c00181c1:	83 c4 10             	add    esp,0x10
c00181c4:	ba 0c b7 02 c0       	mov    edx,0xc002b70c
c00181c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181cd:	89 10                	mov    DWORD PTR [eax],edx
c00181cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181d3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00181da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181de:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00181e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181ec:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00181f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181fa:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018205:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c001820c:	e8 15 fb ff ff       	call   c0017d26 <scanMADT()>
c0018211:	90                   	nop
c0018212:	83 c4 0c             	add    esp,0xc
c0018215:	c3                   	ret    

c0018216 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0018216:	83 ec 2c             	sub    esp,0x2c
c0018219:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001821d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018221:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018225:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018229:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001822e:	88 d0                	mov    al,dl
c0018230:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018234:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0018239:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0018241:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018245:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001824b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001824f:	0f 8d 97 00 00 00    	jge    c00182ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0018255:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018259:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001825d:	83 c2 2a             	add    edx,0x2a
c0018260:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0018264:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0018269:	75 78                	jne    c00182e3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001826b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001826f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018273:	83 c2 2a             	add    edx,0x2a
c0018276:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001827a:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001827e:	75 63                	jne    c00182e3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018280:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018285:	74 3a                	je     c00182c1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0018287:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001828b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001828f:	83 c2 2a             	add    edx,0x2a
c0018292:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0018296:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001829a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001829d:	39 c2                	cmp    edx,eax
c001829f:	74 10                	je     c00182b1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00182a1:	83 ec 0c             	sub    esp,0xc
c00182a4:	68 d4 b6 02 c0       	push   0xc002b6d4
c00182a9:	e8 0f 23 00 00       	call   c001a5bd <Krnl::panic(char const*)>
c00182ae:	83 c4 10             	add    esp,0x10
c00182b1:	83 ec 0c             	sub    esp,0xc
c00182b4:	68 40 b5 02 c0       	push   0xc002b540
c00182b9:	e8 ff 22 00 00       	call   c001a5bd <Krnl::panic(char const*)>
c00182be:	83 c4 10             	add    esp,0x10
c00182c1:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00182c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182c9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182cd:	83 c2 2a             	add    edx,0x2a
c00182d0:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00182d4:	8b 02                	mov    eax,DWORD PTR [edx]
c00182d6:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00182d9:	89 01                	mov    DWORD PTR [ecx],eax
c00182db:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00182de:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00182e3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00182e7:	e9 55 ff ff ff       	jmp    c0018241 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00182ec:	90                   	nop
c00182ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182f1:	83 c4 2c             	add    esp,0x2c
c00182f4:	c2 04 00             	ret    0x4
c00182f7:	90                   	nop

c00182f8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00182f8:	83 ec 1c             	sub    esp,0x1c
c00182fb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00182ff:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0018303:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018307:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001830c:	88 c8                	mov    al,cl
c001830e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018312:	88 d0                	mov    al,dl
c0018314:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018318:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001831c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018322:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018326:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018329:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001832d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0018331:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018335:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001833b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001833f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0018342:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018346:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001834b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001834f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018355:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018359:	8d 48 01             	lea    ecx,[eax+0x1]
c001835c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018360:	83 c2 2a             	add    edx,0x2a
c0018363:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0018367:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001836b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018375:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018378:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001837c:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0018380:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018384:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001838a:	8d 50 01             	lea    edx,[eax+0x1]
c001838d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018391:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0018397:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001839b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183a1:	3d 00 02 00 00       	cmp    eax,0x200
c00183a6:	75 10                	jne    c00183b8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00183a8:	83 ec 0c             	sub    esp,0xc
c00183ab:	68 4f b5 02 c0       	push   0xc002b54f
c00183b0:	e8 08 22 00 00       	call   c001a5bd <Krnl::panic(char const*)>
c00183b5:	83 c4 10             	add    esp,0x10
c00183b8:	90                   	nop
c00183b9:	83 c4 1c             	add    esp,0x1c
c00183bc:	c3                   	ret    
c00183bd:	90                   	nop

c00183be <ACPI::setScreenBrightnessLevel(void*, int)>:
c00183be:	b8 00 00 00 00       	mov    eax,0x0
c00183c3:	c3                   	ret    

c00183c4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00183c4:	83 ec 1c             	sub    esp,0x1c
c00183c7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00183cb:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00183ce:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00183d2:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c00183d7:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00183dc:	83 ec 08             	sub    esp,0x8
c00183df:	52                   	push   edx
c00183e0:	50                   	push   eax
c00183e1:	e8 72 6a ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c00183e6:	83 c4 10             	add    esp,0x10
c00183e9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00183ed:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c00183f2:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00183f7:	83 ec 04             	sub    esp,0x4
c00183fa:	6a 01                	push   0x1
c00183fc:	52                   	push   edx
c00183fd:	50                   	push   eax
c00183fe:	e8 6b 6b ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c0018403:	83 c4 10             	add    esp,0x10
c0018406:	90                   	nop
c0018407:	83 c4 1c             	add    esp,0x1c
c001840a:	c3                   	ret    
c001840b:	90                   	nop

c001840c <ACPI::open(int, int, void*)>:
c001840c:	53                   	push   ebx
c001840d:	83 ec 28             	sub    esp,0x28
c0018410:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018414:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c001841b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001841f:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018426:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c001842b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018431:	83 e0 04             	and    eax,0x4
c0018434:	84 c0                	test   al,al
c0018436:	74 47                	je     c001847f <ACPI::open(int, int, void*)+0x73>
c0018438:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c001843d:	83 ec 08             	sub    esp,0x8
c0018440:	68 6c b5 02 c0       	push   0xc002b56c
c0018445:	50                   	push   eax
c0018446:	e8 3f f8 ff ff       	call   c0017c8a <findDataTable(unsigned char*, char*)>
c001844b:	83 c4 10             	add    esp,0x10
c001844e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018452:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018457:	74 26                	je     c001847f <ACPI::open(int, int, void*)+0x73>
c0018459:	83 ec 0c             	sub    esp,0xc
c001845c:	68 71 b5 02 c0       	push   0xc002b571
c0018461:	e8 b6 aa ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0018466:	83 c4 10             	add    esp,0x10
c0018469:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001846d:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018474:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018478:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001847f:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c0018487:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001848b:	8a 00                	mov    al,BYTE PTR [eax]
c001848d:	3c 01                	cmp    al,0x1
c001848f:	75 28                	jne    c00184b9 <ACPI::open(int, int, void*)+0xad>
c0018491:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018495:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001849c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184a0:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00184a7:	83 ec 0c             	sub    esp,0xc
c00184aa:	68 82 b5 02 c0       	push   0xc002b582
c00184af:	e8 68 aa ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c00184b4:	83 c4 10             	add    esp,0x10
c00184b7:	eb 25                	jmp    c00184de <ACPI::open(int, int, void*)+0xd2>
c00184b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00184bd:	8a 00                	mov    al,BYTE PTR [eax]
c00184bf:	3c 02                	cmp    al,0x2
c00184c1:	75 1b                	jne    c00184de <ACPI::open(int, int, void*)+0xd2>
c00184c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184c7:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184ce:	83 ec 0c             	sub    esp,0xc
c00184d1:	68 8a b5 02 c0       	push   0xc002b58a
c00184d6:	e8 41 aa ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c00184db:	83 c4 10             	add    esp,0x10
c00184de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184e2:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00184e8:	83 f0 01             	xor    eax,0x1
c00184eb:	84 c0                	test   al,al
c00184ed:	74 6a                	je     c0018559 <ACPI::open(int, int, void*)+0x14d>
c00184ef:	83 ec 0c             	sub    esp,0xc
c00184f2:	68 92 b5 02 c0       	push   0xc002b592
c00184f7:	e8 20 aa ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c00184fc:	83 c4 10             	add    esp,0x10
c00184ff:	e8 4c 7c fe ff       	call   c0000150 <manualPCIProbe>
c0018504:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018508:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c001850d:	75 28                	jne    c0018537 <ACPI::open(int, int, void*)+0x12b>
c001850f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018513:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001851a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001851e:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018525:	83 ec 0c             	sub    esp,0xc
c0018528:	68 a0 b5 02 c0       	push   0xc002b5a0
c001852d:	e8 ea a9 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0018532:	83 c4 10             	add    esp,0x10
c0018535:	eb 22                	jmp    c0018559 <ACPI::open(int, int, void*)+0x14d>
c0018537:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c001853c:	75 1b                	jne    c0018559 <ACPI::open(int, int, void*)+0x14d>
c001853e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018542:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018549:	83 ec 0c             	sub    esp,0xc
c001854c:	68 aa b5 02 c0       	push   0xc002b5aa
c0018551:	e8 c6 a9 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0018556:	83 c4 10             	add    esp,0x10
c0018559:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001855d:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018563:	84 c0                	test   al,al
c0018565:	74 13                	je     c001857a <ACPI::open(int, int, void*)+0x16e>
c0018567:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001856b:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c0018571:	83 f0 01             	xor    eax,0x1
c0018574:	0f b6 c0             	movzx  eax,al
c0018577:	40                   	inc    eax
c0018578:	eb 05                	jmp    c001857f <ACPI::open(int, int, void*)+0x173>
c001857a:	b8 00 00 00 00       	mov    eax,0x0
c001857f:	83 ec 08             	sub    esp,0x8
c0018582:	50                   	push   eax
c0018583:	68 b4 b5 02 c0       	push   0xc002b5b4
c0018588:	e8 8f a9 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001858d:	83 c4 10             	add    esp,0x10
c0018590:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018594:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001859a:	84 c0                	test   al,al
c001859c:	74 67                	je     c0018605 <ACPI::open(int, int, void*)+0x1f9>
c001859e:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c00185a6:	83 ec 0c             	sub    esp,0xc
c00185a9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00185ad:	e8 8e 72 ff ff       	call   c000f840 <malloc>
c00185b2:	83 c4 10             	add    esp,0x10
c00185b5:	89 c3                	mov    ebx,eax
c00185b7:	83 ec 0c             	sub    esp,0xc
c00185ba:	53                   	push   ebx
c00185bb:	e8 26 a3 00 00       	call   c00228e6 <PCI::PCI()>
c00185c0:	83 c4 10             	add    esp,0x10
c00185c3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00185c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185cb:	83 ec 08             	sub    esp,0x8
c00185ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00185d2:	50                   	push   eax
c00185d3:	e8 6a bd ff ff       	call   c0014342 <Device::addChild(Device*)>
c00185d8:	83 c4 10             	add    esp,0x10
c00185db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185df:	8b 00                	mov    eax,DWORD PTR [eax]
c00185e1:	83 c0 08             	add    eax,0x8
c00185e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00185e6:	6a 00                	push   0x0
c00185e8:	6a 00                	push   0x0
c00185ea:	6a 00                	push   0x0
c00185ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00185f0:	ff d0                	call   eax
c00185f2:	83 c4 10             	add    esp,0x10
c00185f5:	83 ec 0c             	sub    esp,0xc
c00185f8:	68 bd b5 02 c0       	push   0xc002b5bd
c00185fd:	e8 1a a9 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0018602:	83 c4 10             	add    esp,0x10
c0018605:	83 ec 0c             	sub    esp,0xc
c0018608:	68 c8 b5 02 c0       	push   0xc002b5c8
c001860d:	e8 cb 46 00 00       	call   c001ccdd <Thr::loadKernelSymbolTable(char const*)>
c0018612:	83 c4 10             	add    esp,0x10
c0018615:	8b 1d a8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5a8
c001861b:	83 ec 08             	sub    esp,0x8
c001861e:	6a 01                	push   0x1
c0018620:	68 e6 b5 02 c0       	push   0xc002b5e6
c0018625:	e8 10 51 00 00       	call   c001d73a <Thr::loadDLL(char const*, bool)>
c001862a:	83 c4 10             	add    esp,0x10
c001862d:	83 ec 08             	sub    esp,0x8
c0018630:	53                   	push   ebx
c0018631:	50                   	push   eax
c0018632:	e8 37 53 00 00       	call   c001d96e <Thr::executeDLL(unsigned long, void*)>
c0018637:	83 c4 10             	add    esp,0x10
c001863a:	8b 1d a8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5a8
c0018640:	83 ec 08             	sub    esp,0x8
c0018643:	6a 01                	push   0x1
c0018645:	68 03 b6 02 c0       	push   0xc002b603
c001864a:	e8 eb 50 00 00       	call   c001d73a <Thr::loadDLL(char const*, bool)>
c001864f:	83 c4 10             	add    esp,0x10
c0018652:	83 ec 08             	sub    esp,0x8
c0018655:	53                   	push   ebx
c0018656:	50                   	push   eax
c0018657:	e8 12 53 00 00       	call   c001d96e <Thr::executeDLL(unsigned long, void*)>
c001865c:	83 c4 10             	add    esp,0x10
c001865f:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c0018664:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001866a:	83 e0 04             	and    eax,0x4
c001866d:	84 c0                	test   al,al
c001866f:	0f 84 d2 00 00 00    	je     c0018747 <ACPI::open(int, int, void*)+0x33b>
c0018675:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001867c:	83 ec 0c             	sub    esp,0xc
c001867f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018683:	e8 b8 71 ff ff       	call   c000f840 <malloc>
c0018688:	83 c4 10             	add    esp,0x10
c001868b:	89 c3                	mov    ebx,eax
c001868d:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0018692:	83 ec 04             	sub    esp,0x4
c0018695:	50                   	push   eax
c0018696:	68 20 b6 02 c0       	push   0xc002b620
c001869b:	53                   	push   ebx
c001869c:	e8 d3 ad ff ff       	call   c0013474 <File::File(char const*, Process*)>
c00186a1:	83 c4 10             	add    esp,0x10
c00186a4:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00186a8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00186ad:	74 17                	je     c00186c6 <ACPI::open(int, int, void*)+0x2ba>
c00186af:	83 ec 0c             	sub    esp,0xc
c00186b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00186b6:	e8 8b b0 ff ff       	call   c0013746 <File::exists()>
c00186bb:	83 c4 10             	add    esp,0x10
c00186be:	84 c0                	test   al,al
c00186c0:	74 04                	je     c00186c6 <ACPI::open(int, int, void*)+0x2ba>
c00186c2:	b0 01                	mov    al,0x1
c00186c4:	eb 02                	jmp    c00186c8 <ACPI::open(int, int, void*)+0x2bc>
c00186c6:	b0 00                	mov    al,0x0
c00186c8:	84 c0                	test   al,al
c00186ca:	74 22                	je     c00186ee <ACPI::open(int, int, void*)+0x2e2>
c00186cc:	83 ec 08             	sub    esp,0x8
c00186cf:	6a 01                	push   0x1
c00186d1:	68 20 b6 02 c0       	push   0xc002b620
c00186d6:	e8 5f 50 00 00       	call   c001d73a <Thr::loadDLL(char const*, bool)>
c00186db:	83 c4 10             	add    esp,0x10
c00186de:	83 ec 08             	sub    esp,0x8
c00186e1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00186e5:	50                   	push   eax
c00186e6:	e8 83 52 00 00       	call   c001d96e <Thr::executeDLL(unsigned long, void*)>
c00186eb:	83 c4 10             	add    esp,0x10
c00186ee:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00186f3:	74 1e                	je     c0018713 <ACPI::open(int, int, void*)+0x307>
c00186f5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00186fa:	74 17                	je     c0018713 <ACPI::open(int, int, void*)+0x307>
c00186fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018700:	8b 00                	mov    eax,DWORD PTR [eax]
c0018702:	83 c0 08             	add    eax,0x8
c0018705:	8b 00                	mov    eax,DWORD PTR [eax]
c0018707:	83 ec 0c             	sub    esp,0xc
c001870a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001870e:	ff d0                	call   eax
c0018710:	83 c4 10             	add    esp,0x10
c0018713:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c0018718:	83 ec 08             	sub    esp,0x8
c001871b:	68 3d b6 02 c0       	push   0xc002b63d
c0018720:	50                   	push   eax
c0018721:	e8 64 f5 ff ff       	call   c0017c8a <findDataTable(unsigned char*, char*)>
c0018726:	83 c4 10             	add    esp,0x10
c0018729:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001872d:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018732:	74 13                	je     c0018747 <ACPI::open(int, int, void*)+0x33b>
c0018734:	83 ec 08             	sub    esp,0x8
c0018737:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001873b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001873f:	e8 80 fc ff ff       	call   c00183c4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018744:	83 c4 10             	add    esp,0x10
c0018747:	b8 00 00 00 00       	mov    eax,0x0
c001874c:	83 c4 28             	add    esp,0x28
c001874f:	5b                   	pop    ebx
c0018750:	c3                   	ret    
c0018751:	90                   	nop

c0018752 <ACPI::sleep()>:
c0018752:	83 ec 0c             	sub    esp,0xc
c0018755:	a1 60 0c 03 c0       	mov    eax,ds:0xc0030c60
c001875a:	85 c0                	test   eax,eax
c001875c:	74 07                	je     c0018765 <ACPI::sleep()+0x13>
c001875e:	a1 60 0c 03 c0       	mov    eax,ds:0xc0030c60
c0018763:	ff d0                	call   eax
c0018765:	90                   	nop
c0018766:	83 c4 0c             	add    esp,0xc
c0018769:	c3                   	ret    

c001876a <CPU::close(int, int, void*)>:
c001876a:	31 c0                	xor    eax,eax
c001876c:	c3                   	ret    
c001876d:	90                   	nop

c001876e <CPU::lookupAMDName(unsigned char, unsigned char)>:
c001876e:	55                   	push   ebp
c001876f:	57                   	push   edi
c0018770:	56                   	push   esi
c0018771:	53                   	push   ebx
c0018772:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018776:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001877a:	89 ce                	mov    esi,ecx
c001877c:	89 d5                	mov    ebp,edx
c001877e:	80 f9 04             	cmp    cl,0x4
c0018781:	75 28                	jne    c00187ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018783:	8d 42 f9             	lea    eax,[edx-0x7]
c0018786:	3c 03                	cmp    al,0x3
c0018788:	0f 86 63 01 00 00    	jbe    c00188f1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001878e:	80 fa 03             	cmp    dl,0x3
c0018791:	0f 84 5a 01 00 00    	je     c00188f1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018797:	8d 7a f2             	lea    edi,[edx-0xe]
c001879a:	b8 d0 d9 02 c0       	mov    eax,0xc002d9d0
c001879f:	89 fb                	mov    ebx,edi
c00187a1:	80 fb 01             	cmp    bl,0x1
c00187a4:	77 4e                	ja     c00187f4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00187a6:	e9 52 01 00 00       	jmp    c00188fd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187ab:	80 f9 05             	cmp    cl,0x5
c00187ae:	75 4d                	jne    c00187fd <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00187b0:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c00187b5:	80 fa 03             	cmp    dl,0x3
c00187b8:	0f 86 3f 01 00 00    	jbe    c00188fd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187be:	8d 7a fa             	lea    edi,[edx-0x6]
c00187c1:	b8 f0 d9 02 c0       	mov    eax,0xc002d9f0
c00187c6:	89 fb                	mov    ebx,edi
c00187c8:	80 fb 01             	cmp    bl,0x1
c00187cb:	0f 86 2c 01 00 00    	jbe    c00188fd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187d1:	b8 00 da 02 c0       	mov    eax,0xc002da00
c00187d6:	80 fa 08             	cmp    dl,0x8
c00187d9:	0f 84 1e 01 00 00    	je     c00188fd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187df:	89 d7                	mov    edi,edx
c00187e1:	b8 10 da 02 c0       	mov    eax,0xc002da10
c00187e6:	83 e7 fb             	and    edi,0xfffffffb
c00187e9:	89 fb                	mov    ebx,edi
c00187eb:	80 fb 09             	cmp    bl,0x9
c00187ee:	0f 84 09 01 00 00    	je     c00188fd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187f4:	31 c0                	xor    eax,eax
c00187f6:	89 eb                	mov    ebx,ebp
c00187f8:	0f b6 fb             	movzx  edi,bl
c00187fb:	eb 30                	jmp    c001882d <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00187fd:	31 c0                	xor    eax,eax
c00187ff:	80 f9 06             	cmp    cl,0x6
c0018802:	75 f2                	jne    c00187f6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018804:	80 fa 0a             	cmp    dl,0xa
c0018807:	77 ed                	ja     c00187f6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018809:	bf de 05 00 00       	mov    edi,0x5de
c001880e:	0f a3 d7             	bt     edi,edx
c0018811:	73 e3                	jae    c00187f6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018813:	b8 20 da 02 c0       	mov    eax,0xc002da20
c0018818:	e9 e0 00 00 00       	jmp    c00188fd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001881d:	39 c7                	cmp    edi,eax
c001881f:	0f 84 d3 00 00 00    	je     c00188f8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018825:	40                   	inc    eax
c0018826:	3d d0 00 00 00       	cmp    eax,0xd0
c001882b:	74 09                	je     c0018836 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001882d:	89 f3                	mov    ebx,esi
c001882f:	80 fb 0f             	cmp    bl,0xf
c0018832:	75 f1                	jne    c0018825 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018834:	eb e7                	jmp    c001881d <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018836:	80 f9 10             	cmp    cl,0x10
c0018839:	75 14                	jne    c001884f <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c001883b:	8d 42 fc             	lea    eax,[edx-0x4]
c001883e:	83 e0 fb             	and    eax,0xfffffffb
c0018841:	3c 02                	cmp    al,0x2
c0018843:	76 34                	jbe    c0018879 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018845:	b8 22 ba 02 c0       	mov    eax,0xc002ba22
c001884a:	80 fa 02             	cmp    dl,0x2
c001884d:	eb 24                	jmp    c0018873 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c001884f:	80 f9 11             	cmp    cl,0x11
c0018852:	75 13                	jne    c0018867 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018854:	b8 22 ba 02 c0       	mov    eax,0xc002ba22
c0018859:	80 fa 03             	cmp    dl,0x3
c001885c:	0f 85 9b 00 00 00    	jne    c00188fd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018862:	e9 91 00 00 00       	jmp    c00188f8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018867:	80 f9 12             	cmp    cl,0x12
c001886a:	75 14                	jne    c0018880 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c001886c:	b8 22 ba 02 c0       	mov    eax,0xc002ba22
c0018871:	fe ca                	dec    dl
c0018873:	0f 85 84 00 00 00    	jne    c00188fd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018879:	b8 40 da 02 c0       	mov    eax,0xc002da40
c001887e:	eb 7d                	jmp    c00188fd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018880:	80 f9 14             	cmp    cl,0x14
c0018883:	75 12                	jne    c0018897 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018885:	4a                   	dec    edx
c0018886:	b8 22 ba 02 c0       	mov    eax,0xc002ba22
c001888b:	80 fa 01             	cmp    dl,0x1
c001888e:	77 6d                	ja     c00188fd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018890:	b8 50 da 02 c0       	mov    eax,0xc002da50
c0018895:	eb 66                	jmp    c00188fd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018897:	80 f9 15             	cmp    cl,0x15
c001889a:	75 31                	jne    c00188cd <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c001889c:	b8 60 da 02 c0       	mov    eax,0xc002da60
c00188a1:	80 fa 01             	cmp    dl,0x1
c00188a4:	74 57                	je     c00188fd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188a6:	b8 22 ba 02 c0       	mov    eax,0xc002ba22
c00188ab:	80 fa 13             	cmp    dl,0x13
c00188ae:	76 0c                	jbe    c00188bc <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00188b0:	80 fa 30             	cmp    dl,0x30
c00188b3:	75 48                	jne    c00188fd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188b5:	b8 80 da 02 c0       	mov    eax,0xc002da80
c00188ba:	eb 41                	jmp    c00188fd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188bc:	b9 04 00 09 00       	mov    ecx,0x90004
c00188c1:	0f a3 d1             	bt     ecx,edx
c00188c4:	73 37                	jae    c00188fd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188c6:	b8 70 da 02 c0       	mov    eax,0xc002da70
c00188cb:	eb 30                	jmp    c00188fd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188cd:	b8 22 ba 02 c0       	mov    eax,0xc002ba22
c00188d2:	80 f9 16             	cmp    cl,0x16
c00188d5:	75 26                	jne    c00188fd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188d7:	b8 90 da 02 c0       	mov    eax,0xc002da90
c00188dc:	84 d2                	test   dl,dl
c00188de:	74 1d                	je     c00188fd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188e0:	b8 22 ba 02 c0       	mov    eax,0xc002ba22
c00188e5:	80 fa 30             	cmp    dl,0x30
c00188e8:	75 13                	jne    c00188fd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188ea:	b8 a0 da 02 c0       	mov    eax,0xc002daa0
c00188ef:	eb 0c                	jmp    c00188fd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188f1:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c00188f6:	eb 05                	jmp    c00188fd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188f8:	b8 30 da 02 c0       	mov    eax,0xc002da30
c00188fd:	5b                   	pop    ebx
c00188fe:	5e                   	pop    esi
c00188ff:	5f                   	pop    edi
c0018900:	5d                   	pop    ebp
c0018901:	c3                   	ret    

c0018902 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018902:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018906:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001890a:	80 f9 04             	cmp    cl,0x4
c001890d:	75 6b                	jne    c001897a <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c001890f:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c0018914:	80 fa 01             	cmp    dl,0x1
c0018917:	0f 86 92 02 00 00    	jbe    c0018baf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001891d:	b8 30 d8 02 c0       	mov    eax,0xc002d830
c0018922:	80 fa 02             	cmp    dl,0x2
c0018925:	0f 84 84 02 00 00    	je     c0018baf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001892b:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c0018930:	80 fa 03             	cmp    dl,0x3
c0018933:	0f 84 76 02 00 00    	je     c0018baf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018939:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c001893e:	80 fa 04             	cmp    dl,0x4
c0018941:	0f 84 68 02 00 00    	je     c0018baf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018947:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c001894c:	80 fa 05             	cmp    dl,0x5
c001894f:	0f 84 5a 02 00 00    	je     c0018baf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018955:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c001895a:	80 fa 07             	cmp    dl,0x7
c001895d:	0f 84 4c 02 00 00    	je     c0018baf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018963:	83 ea 08             	sub    edx,0x8
c0018966:	b8 22 ba 02 c0       	mov    eax,0xc002ba22
c001896b:	80 fa 01             	cmp    dl,0x1
c001896e:	0f 87 3b 02 00 00    	ja     c0018baf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018974:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c0018979:	c3                   	ret    
c001897a:	80 f9 05             	cmp    cl,0x5
c001897d:	75 45                	jne    c00189c4 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c001897f:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018982:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c0018987:	80 f9 02             	cmp    cl,0x2
c001898a:	0f 86 1f 02 00 00    	jbe    c0018baf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018990:	80 fa 04             	cmp    dl,0x4
c0018993:	0f 84 f3 01 00 00    	je     c0018b8c <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018999:	80 fa 07             	cmp    dl,0x7
c001899c:	0f 84 0d 02 00 00    	je     c0018baf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189a2:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c00189a7:	80 fa 08             	cmp    dl,0x8
c00189aa:	0f 84 ff 01 00 00    	je     c0018baf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189b0:	b8 22 ba 02 c0       	mov    eax,0xc002ba22
c00189b5:	80 fa 09             	cmp    dl,0x9
c00189b8:	0f 85 f1 01 00 00    	jne    c0018baf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189be:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c00189c3:	c3                   	ret    
c00189c4:	80 f9 06             	cmp    cl,0x6
c00189c7:	0f 85 85 01 00 00    	jne    c0018b52 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00189cd:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c00189d2:	80 fa 01             	cmp    dl,0x1
c00189d5:	0f 84 d4 01 00 00    	je     c0018baf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189db:	8d 42 fb             	lea    eax,[edx-0x5]
c00189de:	3c 01                	cmp    al,0x1
c00189e0:	0f 86 ac 01 00 00    	jbe    c0018b92 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00189e6:	80 fa 03             	cmp    dl,0x3
c00189e9:	0f 84 a3 01 00 00    	je     c0018b92 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00189ef:	8d 4a f9             	lea    ecx,[edx-0x7]
c00189f2:	b8 d0 d8 02 c0       	mov    eax,0xc002d8d0
c00189f7:	80 f9 01             	cmp    cl,0x1
c00189fa:	0f 86 af 01 00 00    	jbe    c0018baf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a00:	80 fa 09             	cmp    dl,0x9
c0018a03:	0f 84 8f 01 00 00    	je     c0018b98 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018a09:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018a0c:	80 f9 01             	cmp    cl,0x1
c0018a0f:	0f 86 9a 01 00 00    	jbe    c0018baf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a15:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c0018a1a:	80 fa 0d             	cmp    dl,0xd
c0018a1d:	0f 84 8c 01 00 00    	je     c0018baf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a23:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c0018a28:	80 fa 0e             	cmp    dl,0xe
c0018a2b:	0f 84 7e 01 00 00    	je     c0018baf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a31:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0018a36:	80 fa 0f             	cmp    dl,0xf
c0018a39:	0f 84 70 01 00 00    	je     c0018baf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a3f:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c0018a44:	80 fa 15             	cmp    dl,0x15
c0018a47:	0f 84 62 01 00 00    	je     c0018baf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a4d:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018a50:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0018a55:	80 f9 01             	cmp    cl,0x1
c0018a58:	0f 86 51 01 00 00    	jbe    c0018baf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a5e:	80 fa 1a             	cmp    dl,0x1a
c0018a61:	0f 84 37 01 00 00    	je     c0018b9e <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018a67:	80 fa 1c             	cmp    dl,0x1c
c0018a6a:	0f 84 34 01 00 00    	je     c0018ba4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018a70:	80 fa 1d             	cmp    dl,0x1d
c0018a73:	0f 84 36 01 00 00    	je     c0018baf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a79:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c0018a7e:	80 fa 25             	cmp    dl,0x25
c0018a81:	0f 84 28 01 00 00    	je     c0018baf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a87:	8d 4a da             	lea    ecx,[edx-0x26]
c0018a8a:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c0018a8f:	80 f9 01             	cmp    cl,0x1
c0018a92:	0f 86 17 01 00 00    	jbe    c0018baf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a98:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c0018a9d:	80 fa 2a             	cmp    dl,0x2a
c0018aa0:	0f 84 09 01 00 00    	je     c0018baf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aa6:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c0018aab:	80 fa 2c             	cmp    dl,0x2c
c0018aae:	0f 84 fb 00 00 00    	je     c0018baf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ab4:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c0018ab9:	80 fa 2d             	cmp    dl,0x2d
c0018abc:	0f 84 ed 00 00 00    	je     c0018baf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ac2:	b8 10 d9 02 c0       	mov    eax,0xc002d910
c0018ac7:	80 fa 2e             	cmp    dl,0x2e
c0018aca:	0f 84 df 00 00 00    	je     c0018baf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ad0:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c0018ad5:	80 fa 2f             	cmp    dl,0x2f
c0018ad8:	0f 84 d1 00 00 00    	je     c0018baf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ade:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018ae1:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c0018ae6:	80 f9 01             	cmp    cl,0x1
c0018ae9:	0f 86 c0 00 00 00    	jbe    c0018baf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aef:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c0018af4:	80 fa 37             	cmp    dl,0x37
c0018af7:	0f 84 b2 00 00 00    	je     c0018baf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018afd:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0018b02:	80 fa 3a             	cmp    dl,0x3a
c0018b05:	0f 84 a4 00 00 00    	je     c0018baf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b0b:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c0018b10:	80 fa 3c             	cmp    dl,0x3c
c0018b13:	0f 84 96 00 00 00    	je     c0018baf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b19:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018b1e:	80 fa 3d             	cmp    dl,0x3d
c0018b21:	0f 84 88 00 00 00    	je     c0018baf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b27:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0018b2c:	80 fa 3e             	cmp    dl,0x3e
c0018b2f:	74 7e                	je     c0018baf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b31:	8d 42 bb             	lea    eax,[edx-0x45]
c0018b34:	3c 01                	cmp    al,0x1
c0018b36:	76 72                	jbe    c0018baa <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b38:	80 fa 3f             	cmp    dl,0x3f
c0018b3b:	74 6d                	je     c0018baa <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b3d:	80 fa 4a             	cmp    dl,0x4a
c0018b40:	74 0a                	je     c0018b4c <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018b42:	b8 22 ba 02 c0       	mov    eax,0xc002ba22
c0018b47:	80 fa 4d             	cmp    dl,0x4d
c0018b4a:	75 63                	jne    c0018baf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b4c:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c0018b51:	c3                   	ret    
c0018b52:	b8 22 ba 02 c0       	mov    eax,0xc002ba22
c0018b57:	80 f9 0b             	cmp    cl,0xb
c0018b5a:	75 0a                	jne    c0018b66 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018b5c:	fe ca                	dec    dl
c0018b5e:	75 4f                	jne    c0018baf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b60:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c0018b65:	c3                   	ret    
c0018b66:	80 f9 0f             	cmp    cl,0xf
c0018b69:	75 44                	jne    c0018baf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b6b:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c0018b70:	80 fa 02             	cmp    dl,0x2
c0018b73:	76 3a                	jbe    c0018baf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b75:	8d 42 fd             	lea    eax,[edx-0x3]
c0018b78:	3c 01                	cmp    al,0x1
c0018b7a:	76 0a                	jbe    c0018b86 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018b7c:	b8 22 ba 02 c0       	mov    eax,0xc002ba22
c0018b81:	80 fa 06             	cmp    dl,0x6
c0018b84:	75 29                	jne    c0018baf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b86:	b8 b0 d9 02 c0       	mov    eax,0xc002d9b0
c0018b8b:	c3                   	ret    
c0018b8c:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c0018b91:	c3                   	ret    
c0018b92:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c0018b97:	c3                   	ret    
c0018b98:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c0018b9d:	c3                   	ret    
c0018b9e:	b8 10 d9 02 c0       	mov    eax,0xc002d910
c0018ba3:	c3                   	ret    
c0018ba4:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c0018ba9:	c3                   	ret    
c0018baa:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c0018baf:	c3                   	ret    

c0018bb0 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018bb0:	60                   	pusha  
c0018bb1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018bb5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018bb9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018bbd:	9c                   	pushf  
c0018bbe:	fa                   	cli    
c0018bbf:	0f 09                	wbinvd 
c0018bc1:	0f 30                	wrmsr  
c0018bc3:	9d                   	popf   
c0018bc4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018bc8:	89 02                	mov    DWORD PTR [edx],eax
c0018bca:	61                   	popa   
c0018bcb:	c3                   	ret    

c0018bcc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018bcc:	60                   	pusha  
c0018bcd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018bd1:	9c                   	pushf  
c0018bd2:	fa                   	cli    
c0018bd3:	0f 09                	wbinvd 
c0018bd5:	31 c0                	xor    eax,eax
c0018bd7:	31 d2                	xor    edx,edx
c0018bd9:	0f 32                	rdmsr  
c0018bdb:	9d                   	popf   
c0018bdc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018be0:	89 02                	mov    DWORD PTR [edx],eax
c0018be2:	61                   	popa   
c0018be3:	c3                   	ret    

c0018be4 <CPU::AMD_K6_writeback(int, int, int)>:
c0018be4:	56                   	push   esi
c0018be5:	53                   	push   ebx
c0018be6:	83 ec 10             	sub    esp,0x10
c0018be9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018bed:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018bf2:	75 5d                	jne    c0018c51 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018bf4:	83 f8 08             	cmp    eax,0x8
c0018bf7:	75 09                	jne    c0018c02 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018bf9:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018bfe:	7e 13                	jle    c0018c13 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c00:	eb 30                	jmp    c0018c32 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c02:	83 f8 06             	cmp    eax,0x6
c0018c05:	7c 4a                	jl     c0018c51 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c07:	83 f8 07             	cmp    eax,0x7
c0018c0a:	7e 07                	jle    c0018c13 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c0c:	83 f8 09             	cmp    eax,0x9
c0018c0f:	74 21                	je     c0018c32 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c11:	eb 3e                	jmp    c0018c51 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c13:	89 e6                	mov    esi,esp
c0018c15:	8b 1d e8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5e8
c0018c1b:	56                   	push   esi
c0018c1c:	c1 eb 15             	shr    ebx,0x15
c0018c1f:	68 82 00 00 c0       	push   0xc0000082
c0018c24:	83 e3 7e             	and    ebx,0x7e
c0018c27:	e8 a0 ff ff ff       	call   c0018bcc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c2c:	56                   	push   esi
c0018c2d:	6a 00                	push   0x0
c0018c2f:	53                   	push   ebx
c0018c30:	eb 12                	jmp    c0018c44 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018c32:	89 e3                	mov    ebx,esp
c0018c34:	53                   	push   ebx
c0018c35:	68 82 00 00 c0       	push   0xc0000082
c0018c3a:	e8 8d ff ff ff       	call   c0018bcc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c3f:	53                   	push   ebx
c0018c40:	6a 00                	push   0x0
c0018c42:	6a 00                	push   0x0
c0018c44:	68 82 00 00 c0       	push   0xc0000082
c0018c49:	e8 62 ff ff ff       	call   c0018bb0 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018c4e:	83 c4 18             	add    esp,0x18
c0018c51:	83 c4 10             	add    esp,0x10
c0018c54:	5b                   	pop    ebx
c0018c55:	5e                   	pop    esi
c0018c56:	c3                   	ret    
c0018c57:	90                   	nop

c0018c58 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018c58:	55                   	push   ebp
c0018c59:	57                   	push   edi
c0018c5a:	56                   	push   esi
c0018c5b:	53                   	push   ebx
c0018c5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c60:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018c64:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018c68:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018c6c:	39 05 c0 da 02 c0    	cmp    DWORD PTR ds:0xc002dac0,eax
c0018c72:	75 23                	jne    c0018c97 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018c74:	a1 ec 10 03 c0       	mov    eax,ds:0xc00310ec
c0018c79:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018c7d:	89 06                	mov    DWORD PTR [esi],eax
c0018c7f:	a1 e8 10 03 c0       	mov    eax,ds:0xc00310e8
c0018c84:	89 07                	mov    DWORD PTR [edi],eax
c0018c86:	a1 e4 10 03 c0       	mov    eax,ds:0xc00310e4
c0018c8b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018c8e:	a1 e0 10 03 c0       	mov    eax,ds:0xc00310e0
c0018c93:	89 02                	mov    DWORD PTR [edx],eax
c0018c95:	eb 3f                	jmp    c0018cd6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018c97:	31 c9                	xor    ecx,ecx
c0018c99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c9d:	0f a2                	cpuid  
c0018c9f:	89 06                	mov    DWORD PTR [esi],eax
c0018ca1:	89 1f                	mov    DWORD PTR [edi],ebx
c0018ca3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018ca7:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018caa:	89 10                	mov    DWORD PTR [eax],edx
c0018cac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cb0:	a3 c0 da 02 c0       	mov    ds:0xc002dac0,eax
c0018cb5:	8b 06                	mov    eax,DWORD PTR [esi]
c0018cb7:	a3 ec 10 03 c0       	mov    ds:0xc00310ec,eax
c0018cbc:	8b 07                	mov    eax,DWORD PTR [edi]
c0018cbe:	a3 e8 10 03 c0       	mov    ds:0xc00310e8,eax
c0018cc3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018cc6:	a3 e4 10 03 c0       	mov    ds:0xc00310e4,eax
c0018ccb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018ccf:	8b 00                	mov    eax,DWORD PTR [eax]
c0018cd1:	a3 e0 10 03 c0       	mov    ds:0xc00310e0,eax
c0018cd6:	5b                   	pop    ebx
c0018cd7:	5e                   	pop    esi
c0018cd8:	5f                   	pop    edi
c0018cd9:	5d                   	pop    ebp
c0018cda:	c3                   	ret    
c0018cdb:	90                   	nop

c0018cdc <CPU::cpuidCheckEDX(unsigned int)>:
c0018cdc:	83 ec 10             	sub    esp,0x10
c0018cdf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ce3:	50                   	push   eax
c0018ce4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ce8:	50                   	push   eax
c0018ce9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ced:	50                   	push   eax
c0018cee:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cf2:	50                   	push   eax
c0018cf3:	6a 01                	push   0x1
c0018cf5:	e8 5e ff ff ff       	call   c0018c58 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018cfa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018cfe:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018d02:	0f 95 c0             	setne  al
c0018d05:	83 c4 24             	add    esp,0x24
c0018d08:	c3                   	ret    
c0018d09:	90                   	nop

c0018d0a <CPU::cpuidCheckECX(unsigned int)>:
c0018d0a:	83 ec 10             	sub    esp,0x10
c0018d0d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d11:	50                   	push   eax
c0018d12:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d16:	50                   	push   eax
c0018d17:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d1b:	50                   	push   eax
c0018d1c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d20:	50                   	push   eax
c0018d21:	6a 01                	push   0x1
c0018d23:	e8 30 ff ff ff       	call   c0018c58 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d28:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d2c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018d30:	0f 95 c0             	setne  al
c0018d33:	83 c4 24             	add    esp,0x24
c0018d36:	c3                   	ret    
c0018d37:	90                   	nop

c0018d38 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018d38:	83 ec 10             	sub    esp,0x10
c0018d3b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d3f:	50                   	push   eax
c0018d40:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d44:	50                   	push   eax
c0018d45:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d49:	50                   	push   eax
c0018d4a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d4e:	50                   	push   eax
c0018d4f:	6a 07                	push   0x7
c0018d51:	e8 02 ff ff ff       	call   c0018c58 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d56:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d5a:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018d5e:	0f 95 c0             	setne  al
c0018d61:	83 c4 24             	add    esp,0x24
c0018d64:	c3                   	ret    
c0018d65:	90                   	nop

c0018d66 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018d66:	83 ec 10             	sub    esp,0x10
c0018d69:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d6d:	50                   	push   eax
c0018d6e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d72:	50                   	push   eax
c0018d73:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d77:	50                   	push   eax
c0018d78:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d7c:	50                   	push   eax
c0018d7d:	6a 07                	push   0x7
c0018d7f:	e8 d4 fe ff ff       	call   c0018c58 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d88:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018d8c:	0f 95 c0             	setne  al
c0018d8f:	83 c4 24             	add    esp,0x24
c0018d92:	c3                   	ret    
c0018d93:	90                   	nop

c0018d94 <CPU::CPU()>:
c0018d94:	83 ec 0c             	sub    esp,0xc
c0018d97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d9b:	83 ec 08             	sub    esp,0x8
c0018d9e:	68 22 ba 02 c0       	push   0xc002ba22
c0018da3:	50                   	push   eax
c0018da4:	e8 89 b7 ff ff       	call   c0014532 <Device::Device(char const*)>
c0018da9:	83 c4 10             	add    esp,0x10
c0018dac:	ba fc ba 02 c0       	mov    edx,0xc002bafc
c0018db1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018db5:	89 10                	mov    DWORD PTR [eax],edx
c0018db7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dbb:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018dc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dc9:	05 78 01 00 00       	add    eax,0x178
c0018dce:	83 ec 0c             	sub    esp,0xc
c0018dd1:	50                   	push   eax
c0018dd2:	e8 81 62 ff ff       	call   c000f058 <GDT::GDT()>
c0018dd7:	83 c4 10             	add    esp,0x10
c0018dda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dde:	05 7c 09 00 00       	add    eax,0x97c
c0018de3:	83 ec 0c             	sub    esp,0xc
c0018de6:	50                   	push   eax
c0018de7:	e8 ce 64 ff ff       	call   c000f2ba <IDT::IDT()>
c0018dec:	83 c4 10             	add    esp,0x10
c0018def:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018df3:	05 7c 11 00 00       	add    eax,0x117c
c0018df8:	83 ec 0c             	sub    esp,0xc
c0018dfb:	50                   	push   eax
c0018dfc:	e8 bb 86 ff ff       	call   c00114bc <TSS::TSS()>
c0018e01:	83 c4 10             	add    esp,0x10
c0018e04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e08:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018e0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e13:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018e1d:	90                   	nop
c0018e1e:	83 c4 0c             	add    esp,0xc
c0018e21:	c3                   	ret    

c0018e22 <CPU::displayFeatures()>:
c0018e22:	53                   	push   ebx
c0018e23:	83 ec 10             	sub    esp,0x10
c0018e26:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018e2a:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018e30:	68 30 b7 02 c0       	push   0xc002b730
c0018e35:	e8 e2 a0 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0018e3a:	59                   	pop    ecx
c0018e3b:	58                   	pop    eax
c0018e3c:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018e42:	50                   	push   eax
c0018e43:	68 41 b7 02 c0       	push   0xc002b741
c0018e48:	e8 cf a0 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0018e4d:	58                   	pop    eax
c0018e4e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e54:	5a                   	pop    edx
c0018e55:	c1 e8 0e             	shr    eax,0xe
c0018e58:	0f b6 c0             	movzx  eax,al
c0018e5b:	50                   	push   eax
c0018e5c:	68 52 b7 02 c0       	push   0xc002b752
c0018e61:	e8 b6 a0 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0018e66:	59                   	pop    ecx
c0018e67:	58                   	pop    eax
c0018e68:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e6e:	66 c1 e8 06          	shr    ax,0x6
c0018e72:	0f b6 c0             	movzx  eax,al
c0018e75:	50                   	push   eax
c0018e76:	68 63 b7 02 c0       	push   0xc002b763
c0018e7b:	e8 9c a0 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0018e80:	c7 04 24 10 bc 02 c0 	mov    DWORD PTR [esp],0xc002bc10
c0018e87:	e8 90 a0 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0018e8c:	83 c4 10             	add    esp,0x10
c0018e8f:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018e94:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018e9b:	74 05                	je     c0018ea2 <CPU::displayFeatures()+0x80>
c0018e9d:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018ea2:	52                   	push   edx
c0018ea3:	52                   	push   edx
c0018ea4:	50                   	push   eax
c0018ea5:	68 74 b7 02 c0       	push   0xc002b774
c0018eaa:	e8 6d a0 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0018eaf:	83 c4 10             	add    esp,0x10
c0018eb2:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018eb7:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018ebe:	78 05                	js     c0018ec5 <CPU::displayFeatures()+0xa3>
c0018ec0:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018ec5:	51                   	push   ecx
c0018ec6:	51                   	push   ecx
c0018ec7:	50                   	push   eax
c0018ec8:	68 8b b7 02 c0       	push   0xc002b78b
c0018ecd:	e8 4a a0 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0018ed2:	83 c4 10             	add    esp,0x10
c0018ed5:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018eda:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018ee1:	75 05                	jne    c0018ee8 <CPU::displayFeatures()+0xc6>
c0018ee3:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018ee8:	52                   	push   edx
c0018ee9:	52                   	push   edx
c0018eea:	50                   	push   eax
c0018eeb:	68 a2 b7 02 c0       	push   0xc002b7a2
c0018ef0:	e8 27 a0 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0018ef5:	83 c4 10             	add    esp,0x10
c0018ef8:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018efd:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018f04:	75 05                	jne    c0018f0b <CPU::displayFeatures()+0xe9>
c0018f06:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018f0b:	51                   	push   ecx
c0018f0c:	51                   	push   ecx
c0018f0d:	50                   	push   eax
c0018f0e:	68 b9 b7 02 c0       	push   0xc002b7b9
c0018f13:	e8 04 a0 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0018f18:	83 c4 10             	add    esp,0x10
c0018f1b:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018f20:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018f27:	75 05                	jne    c0018f2e <CPU::displayFeatures()+0x10c>
c0018f29:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018f2e:	52                   	push   edx
c0018f2f:	52                   	push   edx
c0018f30:	50                   	push   eax
c0018f31:	68 d0 b7 02 c0       	push   0xc002b7d0
c0018f36:	e8 e1 9f ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0018f3b:	83 c4 10             	add    esp,0x10
c0018f3e:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018f43:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018f4a:	75 05                	jne    c0018f51 <CPU::displayFeatures()+0x12f>
c0018f4c:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018f51:	51                   	push   ecx
c0018f52:	51                   	push   ecx
c0018f53:	50                   	push   eax
c0018f54:	68 e7 b7 02 c0       	push   0xc002b7e7
c0018f59:	e8 be 9f ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0018f5e:	83 c4 10             	add    esp,0x10
c0018f61:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018f66:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018f6d:	75 05                	jne    c0018f74 <CPU::displayFeatures()+0x152>
c0018f6f:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018f74:	52                   	push   edx
c0018f75:	52                   	push   edx
c0018f76:	50                   	push   eax
c0018f77:	68 fe b7 02 c0       	push   0xc002b7fe
c0018f7c:	e8 9b 9f ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0018f81:	83 c4 10             	add    esp,0x10
c0018f84:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018f89:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018f90:	75 05                	jne    c0018f97 <CPU::displayFeatures()+0x175>
c0018f92:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018f97:	51                   	push   ecx
c0018f98:	51                   	push   ecx
c0018f99:	50                   	push   eax
c0018f9a:	68 15 b8 02 c0       	push   0xc002b815
c0018f9f:	e8 78 9f ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0018fa4:	83 c4 10             	add    esp,0x10
c0018fa7:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018fac:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018fb3:	75 05                	jne    c0018fba <CPU::displayFeatures()+0x198>
c0018fb5:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018fba:	52                   	push   edx
c0018fbb:	52                   	push   edx
c0018fbc:	50                   	push   eax
c0018fbd:	68 2c b8 02 c0       	push   0xc002b82c
c0018fc2:	e8 55 9f ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0018fc7:	83 c4 10             	add    esp,0x10
c0018fca:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018fcf:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018fd6:	75 05                	jne    c0018fdd <CPU::displayFeatures()+0x1bb>
c0018fd8:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018fdd:	51                   	push   ecx
c0018fde:	51                   	push   ecx
c0018fdf:	50                   	push   eax
c0018fe0:	68 43 b8 02 c0       	push   0xc002b843
c0018fe5:	e8 32 9f ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0018fea:	83 c4 10             	add    esp,0x10
c0018fed:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018ff2:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018ff9:	75 05                	jne    c0019000 <CPU::displayFeatures()+0x1de>
c0018ffb:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0019000:	52                   	push   edx
c0019001:	52                   	push   edx
c0019002:	50                   	push   eax
c0019003:	68 5a b8 02 c0       	push   0xc002b85a
c0019008:	e8 0f 9f ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001900d:	83 c4 10             	add    esp,0x10
c0019010:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0019015:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c001901c:	75 05                	jne    c0019023 <CPU::displayFeatures()+0x201>
c001901e:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0019023:	51                   	push   ecx
c0019024:	51                   	push   ecx
c0019025:	50                   	push   eax
c0019026:	68 71 b8 02 c0       	push   0xc002b871
c001902b:	e8 ec 9e ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0019030:	83 c4 10             	add    esp,0x10
c0019033:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0019038:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c001903f:	75 05                	jne    c0019046 <CPU::displayFeatures()+0x224>
c0019041:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0019046:	52                   	push   edx
c0019047:	52                   	push   edx
c0019048:	50                   	push   eax
c0019049:	68 88 b8 02 c0       	push   0xc002b888
c001904e:	e8 c9 9e ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0019053:	83 c4 10             	add    esp,0x10
c0019056:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c001905b:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0019062:	78 05                	js     c0019069 <CPU::displayFeatures()+0x247>
c0019064:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0019069:	51                   	push   ecx
c001906a:	51                   	push   ecx
c001906b:	50                   	push   eax
c001906c:	68 9f b8 02 c0       	push   0xc002b89f
c0019071:	e8 a6 9e ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0019076:	83 c4 10             	add    esp,0x10
c0019079:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c001907e:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0019085:	75 05                	jne    c001908c <CPU::displayFeatures()+0x26a>
c0019087:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c001908c:	52                   	push   edx
c001908d:	52                   	push   edx
c001908e:	50                   	push   eax
c001908f:	68 b6 b8 02 c0       	push   0xc002b8b6
c0019094:	e8 83 9e ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0019099:	83 c4 18             	add    esp,0x18
c001909c:	5b                   	pop    ebx
c001909d:	c3                   	ret    

c001909e <CPU::detectFeatures()>:
c001909e:	55                   	push   ebp
c001909f:	57                   	push   edi
c00190a0:	56                   	push   esi
c00190a1:	53                   	push   ebx
c00190a2:	83 ec 50             	sub    esp,0x50
c00190a5:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00190a9:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00190b3:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00190ba:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c00190c0:	6a 0d                	push   0xd
c00190c2:	6a 00                	push   0x0
c00190c4:	57                   	push   edi
c00190c5:	e8 ae 76 fe ff       	call   c0000778 <memset>
c00190ca:	83 c4 10             	add    esp,0x10
c00190cd:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c00190d2:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00190d9:	0f 84 20 09 00 00    	je     c00199ff <CPU::detectFeatures()+0x961>
c00190df:	83 ec 0c             	sub    esp,0xc
c00190e2:	6a 10                	push   0x10
c00190e4:	e8 f3 fb ff ff       	call   c0018cdc <CPU::cpuidCheckEDX(unsigned int)>
c00190e9:	83 e0 01             	and    eax,0x1
c00190ec:	8d 14 00             	lea    edx,[eax+eax*1]
c00190ef:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00190f5:	83 e0 fd             	and    eax,0xfffffffd
c00190f8:	09 d0                	or     eax,edx
c00190fa:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019100:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0019107:	e8 d0 fb ff ff       	call   c0018cdc <CPU::cpuidCheckEDX(unsigned int)>
c001910c:	83 e0 01             	and    eax,0x1
c001910f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019116:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001911c:	83 e0 fb             	and    eax,0xfffffffb
c001911f:	09 d0                	or     eax,edx
c0019121:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019127:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001912e:	e8 a9 fb ff ff       	call   c0018cdc <CPU::cpuidCheckEDX(unsigned int)>
c0019133:	83 e0 01             	and    eax,0x1
c0019136:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001913d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019143:	83 e0 f7             	and    eax,0xfffffff7
c0019146:	09 d0                	or     eax,edx
c0019148:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001914e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0019155:	e8 82 fb ff ff       	call   c0018cdc <CPU::cpuidCheckEDX(unsigned int)>
c001915a:	83 e0 01             	and    eax,0x1
c001915d:	c1 e0 04             	shl    eax,0x4
c0019160:	88 c2                	mov    dl,al
c0019162:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019168:	83 e0 ef             	and    eax,0xffffffef
c001916b:	09 d0                	or     eax,edx
c001916d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019173:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001917a:	e8 5d fb ff ff       	call   c0018cdc <CPU::cpuidCheckEDX(unsigned int)>
c001917f:	83 e0 01             	and    eax,0x1
c0019182:	c1 e0 05             	shl    eax,0x5
c0019185:	88 c2                	mov    dl,al
c0019187:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001918d:	83 e0 df             	and    eax,0xffffffdf
c0019190:	09 d0                	or     eax,edx
c0019192:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019198:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001919f:	e8 38 fb ff ff       	call   c0018cdc <CPU::cpuidCheckEDX(unsigned int)>
c00191a4:	83 e0 01             	and    eax,0x1
c00191a7:	8d 14 00             	lea    edx,[eax+eax*1]
c00191aa:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00191b0:	83 e0 fd             	and    eax,0xfffffffd
c00191b3:	09 d0                	or     eax,edx
c00191b5:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00191bb:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00191c2:	e8 15 fb ff ff       	call   c0018cdc <CPU::cpuidCheckEDX(unsigned int)>
c00191c7:	83 e0 01             	and    eax,0x1
c00191ca:	c1 e0 06             	shl    eax,0x6
c00191cd:	88 c2                	mov    dl,al
c00191cf:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00191d5:	83 e0 bf             	and    eax,0xffffffbf
c00191d8:	09 d0                	or     eax,edx
c00191da:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00191e0:	58                   	pop    eax
c00191e1:	8d 74 24 28          	lea    esi,[esp+0x28]
c00191e5:	56                   	push   esi
c00191e6:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00191ea:	55                   	push   ebp
c00191eb:	8d 44 24 28          	lea    eax,[esp+0x28]
c00191ef:	50                   	push   eax
c00191f0:	8d 54 24 28          	lea    edx,[esp+0x28]
c00191f4:	52                   	push   edx
c00191f5:	6a 00                	push   0x0
c00191f7:	e8 5c fa ff ff       	call   c0018c58 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00191fc:	83 c4 1c             	add    esp,0x1c
c00191ff:	6a 04                	push   0x4
c0019201:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019205:	50                   	push   eax
c0019206:	57                   	push   edi
c0019207:	e8 38 75 fe ff       	call   c0000744 <memcpy>
c001920c:	83 c4 0c             	add    esp,0xc
c001920f:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0019215:	6a 04                	push   0x4
c0019217:	56                   	push   esi
c0019218:	50                   	push   eax
c0019219:	e8 26 75 fe ff       	call   c0000744 <memcpy>
c001921e:	83 c4 0c             	add    esp,0xc
c0019221:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0019227:	6a 04                	push   0x4
c0019229:	55                   	push   ebp
c001922a:	50                   	push   eax
c001922b:	e8 14 75 fe ff       	call   c0000744 <memcpy>
c0019230:	58                   	pop    eax
c0019231:	5a                   	pop    edx
c0019232:	68 cd b8 02 c0       	push   0xc002b8cd
c0019237:	57                   	push   edi
c0019238:	e8 83 76 fe ff       	call   c00008c0 <strcmp>
c001923d:	83 c4 10             	add    esp,0x10
c0019240:	85 c0                	test   eax,eax
c0019242:	75 0f                	jne    c0019253 <CPU::detectFeatures()+0x1b5>
c0019244:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001924e:	e9 22 02 00 00       	jmp    c0019475 <CPU::detectFeatures()+0x3d7>
c0019253:	50                   	push   eax
c0019254:	50                   	push   eax
c0019255:	68 da b8 02 c0       	push   0xc002b8da
c001925a:	57                   	push   edi
c001925b:	e8 60 76 fe ff       	call   c00008c0 <strcmp>
c0019260:	83 c4 10             	add    esp,0x10
c0019263:	85 c0                	test   eax,eax
c0019265:	74 dd                	je     c0019244 <CPU::detectFeatures()+0x1a6>
c0019267:	51                   	push   ecx
c0019268:	51                   	push   ecx
c0019269:	68 e7 b8 02 c0       	push   0xc002b8e7
c001926e:	57                   	push   edi
c001926f:	e8 4c 76 fe ff       	call   c00008c0 <strcmp>
c0019274:	83 c4 10             	add    esp,0x10
c0019277:	85 c0                	test   eax,eax
c0019279:	74 2a                	je     c00192a5 <CPU::detectFeatures()+0x207>
c001927b:	52                   	push   edx
c001927c:	52                   	push   edx
c001927d:	68 f4 b8 02 c0       	push   0xc002b8f4
c0019282:	57                   	push   edi
c0019283:	e8 38 76 fe ff       	call   c00008c0 <strcmp>
c0019288:	83 c4 10             	add    esp,0x10
c001928b:	85 c0                	test   eax,eax
c001928d:	74 16                	je     c00192a5 <CPU::detectFeatures()+0x207>
c001928f:	50                   	push   eax
c0019290:	50                   	push   eax
c0019291:	68 01 b9 02 c0       	push   0xc002b901
c0019296:	57                   	push   edi
c0019297:	e8 24 76 fe ff       	call   c00008c0 <strcmp>
c001929c:	83 c4 10             	add    esp,0x10
c001929f:	85 c0                	test   eax,eax
c00192a1:	74 48                	je     c00192eb <CPU::detectFeatures()+0x24d>
c00192a3:	eb 0f                	jmp    c00192b4 <CPU::detectFeatures()+0x216>
c00192a5:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00192af:	e9 c1 01 00 00       	jmp    c0019475 <CPU::detectFeatures()+0x3d7>
c00192b4:	50                   	push   eax
c00192b5:	50                   	push   eax
c00192b6:	68 0e b9 02 c0       	push   0xc002b90e
c00192bb:	57                   	push   edi
c00192bc:	e8 ff 75 fe ff       	call   c00008c0 <strcmp>
c00192c1:	83 c4 10             	add    esp,0x10
c00192c4:	85 c0                	test   eax,eax
c00192c6:	74 23                	je     c00192eb <CPU::detectFeatures()+0x24d>
c00192c8:	50                   	push   eax
c00192c9:	50                   	push   eax
c00192ca:	68 1b b9 02 c0       	push   0xc002b91b
c00192cf:	57                   	push   edi
c00192d0:	e8 eb 75 fe ff       	call   c00008c0 <strcmp>
c00192d5:	83 c4 10             	add    esp,0x10
c00192d8:	85 c0                	test   eax,eax
c00192da:	75 1e                	jne    c00192fa <CPU::detectFeatures()+0x25c>
c00192dc:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00192e6:	e9 8a 01 00 00       	jmp    c0019475 <CPU::detectFeatures()+0x3d7>
c00192eb:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00192f5:	e9 7b 01 00 00       	jmp    c0019475 <CPU::detectFeatures()+0x3d7>
c00192fa:	50                   	push   eax
c00192fb:	50                   	push   eax
c00192fc:	68 28 b9 02 c0       	push   0xc002b928
c0019301:	57                   	push   edi
c0019302:	e8 b9 75 fe ff       	call   c00008c0 <strcmp>
c0019307:	83 c4 10             	add    esp,0x10
c001930a:	85 c0                	test   eax,eax
c001930c:	75 0f                	jne    c001931d <CPU::detectFeatures()+0x27f>
c001930e:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0019318:	e9 58 01 00 00       	jmp    c0019475 <CPU::detectFeatures()+0x3d7>
c001931d:	50                   	push   eax
c001931e:	50                   	push   eax
c001931f:	68 e7 b8 02 c0       	push   0xc002b8e7
c0019324:	57                   	push   edi
c0019325:	e8 96 75 fe ff       	call   c00008c0 <strcmp>
c001932a:	83 c4 10             	add    esp,0x10
c001932d:	85 c0                	test   eax,eax
c001932f:	75 0f                	jne    c0019340 <CPU::detectFeatures()+0x2a2>
c0019331:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001933b:	e9 35 01 00 00       	jmp    c0019475 <CPU::detectFeatures()+0x3d7>
c0019340:	50                   	push   eax
c0019341:	50                   	push   eax
c0019342:	68 35 b9 02 c0       	push   0xc002b935
c0019347:	57                   	push   edi
c0019348:	e8 73 75 fe ff       	call   c00008c0 <strcmp>
c001934d:	83 c4 10             	add    esp,0x10
c0019350:	85 c0                	test   eax,eax
c0019352:	75 0f                	jne    c0019363 <CPU::detectFeatures()+0x2c5>
c0019354:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001935e:	e9 12 01 00 00       	jmp    c0019475 <CPU::detectFeatures()+0x3d7>
c0019363:	51                   	push   ecx
c0019364:	51                   	push   ecx
c0019365:	68 42 b9 02 c0       	push   0xc002b942
c001936a:	57                   	push   edi
c001936b:	e8 50 75 fe ff       	call   c00008c0 <strcmp>
c0019370:	83 c4 10             	add    esp,0x10
c0019373:	85 c0                	test   eax,eax
c0019375:	75 0f                	jne    c0019386 <CPU::detectFeatures()+0x2e8>
c0019377:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0019381:	e9 ef 00 00 00       	jmp    c0019475 <CPU::detectFeatures()+0x3d7>
c0019386:	52                   	push   edx
c0019387:	52                   	push   edx
c0019388:	68 4f b9 02 c0       	push   0xc002b94f
c001938d:	57                   	push   edi
c001938e:	e8 2d 75 fe ff       	call   c00008c0 <strcmp>
c0019393:	83 c4 10             	add    esp,0x10
c0019396:	85 c0                	test   eax,eax
c0019398:	75 0f                	jne    c00193a9 <CPU::detectFeatures()+0x30b>
c001939a:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00193a4:	e9 cc 00 00 00       	jmp    c0019475 <CPU::detectFeatures()+0x3d7>
c00193a9:	50                   	push   eax
c00193aa:	50                   	push   eax
c00193ab:	68 5c b9 02 c0       	push   0xc002b95c
c00193b0:	57                   	push   edi
c00193b1:	e8 0a 75 fe ff       	call   c00008c0 <strcmp>
c00193b6:	83 c4 10             	add    esp,0x10
c00193b9:	85 c0                	test   eax,eax
c00193bb:	75 0f                	jne    c00193cc <CPU::detectFeatures()+0x32e>
c00193bd:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00193c7:	e9 a9 00 00 00       	jmp    c0019475 <CPU::detectFeatures()+0x3d7>
c00193cc:	50                   	push   eax
c00193cd:	50                   	push   eax
c00193ce:	68 69 b9 02 c0       	push   0xc002b969
c00193d3:	57                   	push   edi
c00193d4:	e8 e7 74 fe ff       	call   c00008c0 <strcmp>
c00193d9:	83 c4 10             	add    esp,0x10
c00193dc:	85 c0                	test   eax,eax
c00193de:	75 0f                	jne    c00193ef <CPU::detectFeatures()+0x351>
c00193e0:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00193ea:	e9 86 00 00 00       	jmp    c0019475 <CPU::detectFeatures()+0x3d7>
c00193ef:	50                   	push   eax
c00193f0:	50                   	push   eax
c00193f1:	68 76 b9 02 c0       	push   0xc002b976
c00193f6:	57                   	push   edi
c00193f7:	e8 c4 74 fe ff       	call   c00008c0 <strcmp>
c00193fc:	83 c4 10             	add    esp,0x10
c00193ff:	85 c0                	test   eax,eax
c0019401:	75 0c                	jne    c001940f <CPU::detectFeatures()+0x371>
c0019403:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001940d:	eb 66                	jmp    c0019475 <CPU::detectFeatures()+0x3d7>
c001940f:	50                   	push   eax
c0019410:	50                   	push   eax
c0019411:	68 83 b9 02 c0       	push   0xc002b983
c0019416:	57                   	push   edi
c0019417:	e8 a4 74 fe ff       	call   c00008c0 <strcmp>
c001941c:	83 c4 10             	add    esp,0x10
c001941f:	85 c0                	test   eax,eax
c0019421:	75 0c                	jne    c001942f <CPU::detectFeatures()+0x391>
c0019423:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001942d:	eb 46                	jmp    c0019475 <CPU::detectFeatures()+0x3d7>
c001942f:	50                   	push   eax
c0019430:	50                   	push   eax
c0019431:	68 90 b9 02 c0       	push   0xc002b990
c0019436:	57                   	push   edi
c0019437:	e8 84 74 fe ff       	call   c00008c0 <strcmp>
c001943c:	83 c4 10             	add    esp,0x10
c001943f:	85 c0                	test   eax,eax
c0019441:	74 e0                	je     c0019423 <CPU::detectFeatures()+0x385>
c0019443:	50                   	push   eax
c0019444:	50                   	push   eax
c0019445:	68 9d b9 02 c0       	push   0xc002b99d
c001944a:	57                   	push   edi
c001944b:	e8 70 74 fe ff       	call   c00008c0 <strcmp>
c0019450:	83 c4 10             	add    esp,0x10
c0019453:	85 c0                	test   eax,eax
c0019455:	74 cc                	je     c0019423 <CPU::detectFeatures()+0x385>
c0019457:	51                   	push   ecx
c0019458:	51                   	push   ecx
c0019459:	68 aa b9 02 c0       	push   0xc002b9aa
c001945e:	57                   	push   edi
c001945f:	e8 5c 74 fe ff       	call   c00008c0 <strcmp>
c0019464:	83 c4 10             	add    esp,0x10
c0019467:	85 c0                	test   eax,eax
c0019469:	74 b8                	je     c0019423 <CPU::detectFeatures()+0x385>
c001946b:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0019475:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001947a:	0f 86 be 00 00 00    	jbe    c001953e <CPU::detectFeatures()+0x4a0>
c0019480:	83 ec 0c             	sub    esp,0xc
c0019483:	68 80 00 00 00       	push   0x80
c0019488:	e8 ab f8 ff ff       	call   c0018d38 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001948d:	83 e0 01             	and    eax,0x1
c0019490:	c1 e0 06             	shl    eax,0x6
c0019493:	88 c2                	mov    dl,al
c0019495:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001949b:	83 e0 bf             	and    eax,0xffffffbf
c001949e:	09 d0                	or     eax,edx
c00194a0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00194a6:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00194ad:	e8 86 f8 ff ff       	call   c0018d38 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00194b2:	83 e0 01             	and    eax,0x1
c00194b5:	c1 e0 04             	shl    eax,0x4
c00194b8:	88 c2                	mov    dl,al
c00194ba:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00194c0:	83 e0 ef             	and    eax,0xffffffef
c00194c3:	09 d0                	or     eax,edx
c00194c5:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00194cb:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00194d2:	e8 61 f8 ff ff       	call   c0018d38 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00194d7:	c1 e0 07             	shl    eax,0x7
c00194da:	88 c2                	mov    dl,al
c00194dc:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00194e2:	83 e0 7f             	and    eax,0x7f
c00194e5:	09 d0                	or     eax,edx
c00194e7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00194ed:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00194f4:	e8 6d f8 ff ff       	call   c0018d66 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00194f9:	83 e0 01             	and    eax,0x1
c00194fc:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019503:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019509:	83 e0 f7             	and    eax,0xfffffff7
c001950c:	09 d0                	or     eax,edx
c001950e:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019514:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001951b:	e8 46 f8 ff ff       	call   c0018d66 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019520:	83 c4 10             	add    esp,0x10
c0019523:	83 e0 01             	and    eax,0x1
c0019526:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001952d:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019533:	83 e0 fb             	and    eax,0xfffffffb
c0019536:	09 d0                	or     eax,edx
c0019538:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001953e:	83 ec 0c             	sub    esp,0xc
c0019541:	56                   	push   esi
c0019542:	55                   	push   ebp
c0019543:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019547:	57                   	push   edi
c0019548:	8d 44 24 28          	lea    eax,[esp+0x28]
c001954c:	50                   	push   eax
c001954d:	6a 01                	push   0x1
c001954f:	e8 04 f7 ff ff       	call   c0018c58 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019554:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019558:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001955e:	88 ca                	mov    dl,cl
c0019560:	83 e0 f0             	and    eax,0xfffffff0
c0019563:	83 e2 0f             	and    edx,0xf
c0019566:	09 d0                	or     eax,edx
c0019568:	88 ca                	mov    dl,cl
c001956a:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019570:	c0 ea 04             	shr    dl,0x4
c0019573:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0019577:	0f b6 c2             	movzx  eax,dl
c001957a:	83 c4 20             	add    esp,0x20
c001957d:	c1 e0 06             	shl    eax,0x6
c0019580:	89 c5                	mov    ebp,eax
c0019582:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019588:	66 25 3f c0          	and    ax,0xc03f
c001958c:	09 e8                	or     eax,ebp
c001958e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019595:	89 c8                	mov    eax,ecx
c0019597:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001959d:	c1 e8 08             	shr    eax,0x8
c00195a0:	83 e2 3f             	and    edx,0x3f
c00195a3:	83 e0 0f             	and    eax,0xf
c00195a6:	89 c5                	mov    ebp,eax
c00195a8:	c1 e5 06             	shl    ebp,0x6
c00195ab:	09 d5                	or     ebp,edx
c00195ad:	89 ea                	mov    edx,ebp
c00195af:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00195b5:	88 c2                	mov    dl,al
c00195b7:	c0 ea 02             	shr    dl,0x2
c00195ba:	89 d5                	mov    ebp,edx
c00195bc:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00195c2:	83 e2 c0             	and    edx,0xffffffc0
c00195c5:	09 d5                	or     ebp,edx
c00195c7:	89 ea                	mov    edx,ebp
c00195c9:	89 cd                	mov    ebp,ecx
c00195cb:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00195d1:	c1 ed 0c             	shr    ebp,0xc
c00195d4:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00195da:	83 e5 03             	and    ebp,0x3
c00195dd:	83 e2 cf             	and    edx,0xffffffcf
c00195e0:	c1 e5 04             	shl    ebp,0x4
c00195e3:	09 d5                	or     ebp,edx
c00195e5:	3c 06                	cmp    al,0x6
c00195e7:	89 ea                	mov    edx,ebp
c00195e9:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00195ef:	74 04                	je     c00195f5 <CPU::detectFeatures()+0x557>
c00195f1:	3c 0f                	cmp    al,0xf
c00195f3:	75 5c                	jne    c0019651 <CPU::detectFeatures()+0x5b3>
c00195f5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00195f9:	89 cd                	mov    ebp,ecx
c00195fb:	c1 ed 10             	shr    ebp,0x10
c00195fe:	c1 e5 04             	shl    ebp,0x4
c0019601:	09 ea                	or     edx,ebp
c0019603:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0019609:	0f b6 d2             	movzx  edx,dl
c001960c:	66 81 e5 3f c0       	and    bp,0xc03f
c0019611:	c1 e2 06             	shl    edx,0x6
c0019614:	09 ea                	or     edx,ebp
c0019616:	3c 0f                	cmp    al,0xf
c0019618:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001961f:	75 30                	jne    c0019651 <CPU::detectFeatures()+0x5b3>
c0019621:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019627:	c1 e9 14             	shr    ecx,0x14
c001962a:	83 e0 3f             	and    eax,0x3f
c001962d:	83 c1 0f             	add    ecx,0xf
c0019630:	88 ca                	mov    dl,cl
c0019632:	c0 e9 02             	shr    cl,0x2
c0019635:	c1 e2 06             	shl    edx,0x6
c0019638:	09 d0                	or     eax,edx
c001963a:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019640:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019646:	83 e0 c0             	and    eax,0xffffffc0
c0019649:	09 c1                	or     ecx,eax
c001964b:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019651:	83 ec 0c             	sub    esp,0xc
c0019654:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001965b:	56                   	push   esi
c001965c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019660:	50                   	push   eax
c0019661:	57                   	push   edi
c0019662:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019666:	55                   	push   ebp
c0019667:	68 00 00 00 80       	push   0x80000000
c001966c:	e8 e7 f5 ff ff       	call   c0018c58 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019671:	83 c4 20             	add    esp,0x20
c0019674:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001967c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019680:	76 1e                	jbe    c00196a0 <CPU::detectFeatures()+0x602>
c0019682:	83 ec 0c             	sub    esp,0xc
c0019685:	56                   	push   esi
c0019686:	50                   	push   eax
c0019687:	57                   	push   edi
c0019688:	55                   	push   ebp
c0019689:	68 01 00 00 80       	push   0x80000001
c001968e:	e8 c5 f5 ff ff       	call   c0018c58 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019693:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001969d:	83 c4 20             	add    esp,0x20
c00196a0:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00196a6:	83 f8 01             	cmp    eax,0x1
c00196a9:	75 6f                	jne    c001971a <CPU::detectFeatures()+0x67c>
c00196ab:	51                   	push   ecx
c00196ac:	51                   	push   ecx
c00196ad:	68 b6 b9 02 c0       	push   0xc002b9b6
c00196b2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00196b6:	56                   	push   esi
c00196b7:	e8 78 71 fe ff       	call   c0000834 <strcpy>
c00196bc:	5f                   	pop    edi
c00196bd:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00196c3:	5d                   	pop    ebp
c00196c4:	66 c1 e8 06          	shr    ax,0x6
c00196c8:	0f b6 c0             	movzx  eax,al
c00196cb:	50                   	push   eax
c00196cc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00196d2:	c1 e8 0e             	shr    eax,0xe
c00196d5:	0f b6 c0             	movzx  eax,al
c00196d8:	50                   	push   eax
c00196d9:	e8 24 f2 ff ff       	call   c0018902 <CPU::lookupIntelName(unsigned char, unsigned char)>
c00196de:	5a                   	pop    edx
c00196df:	59                   	pop    ecx
c00196e0:	50                   	push   eax
c00196e1:	56                   	push   esi
c00196e2:	e8 8d 72 fe ff       	call   c0000974 <strcat>
c00196e7:	5f                   	pop    edi
c00196e8:	5d                   	pop    ebp
c00196e9:	56                   	push   esi
c00196ea:	53                   	push   ebx
c00196eb:	e8 34 ae ff ff       	call   c0014524 <Device::setName(char const*)>
c00196f0:	58                   	pop    eax
c00196f1:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00196f7:	5a                   	pop    edx
c00196f8:	68 bd b9 02 c0       	push   0xc002b9bd
c00196fd:	50                   	push   eax
c00196fe:	e8 bd 71 fe ff       	call   c00008c0 <strcmp>
c0019703:	83 c4 10             	add    esp,0x10
c0019706:	85 c0                	test   eax,eax
c0019708:	0f 85 71 03 00 00    	jne    c0019a7f <CPU::detectFeatures()+0x9e1>
c001970e:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019715:	e9 65 03 00 00       	jmp    c0019a7f <CPU::detectFeatures()+0x9e1>
c001971a:	83 f8 02             	cmp    eax,0x2
c001971d:	0f 85 b5 00 00 00    	jne    c00197d8 <CPU::detectFeatures()+0x73a>
c0019723:	57                   	push   edi
c0019724:	57                   	push   edi
c0019725:	68 cf b9 02 c0       	push   0xc002b9cf
c001972a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001972e:	56                   	push   esi
c001972f:	e8 00 71 fe ff       	call   c0000834 <strcpy>
c0019734:	5d                   	pop    ebp
c0019735:	58                   	pop    eax
c0019736:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001973c:	66 c1 e8 06          	shr    ax,0x6
c0019740:	0f b6 c0             	movzx  eax,al
c0019743:	50                   	push   eax
c0019744:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001974a:	c1 e8 0e             	shr    eax,0xe
c001974d:	0f b6 c0             	movzx  eax,al
c0019750:	50                   	push   eax
c0019751:	e8 18 f0 ff ff       	call   c001876e <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019756:	5a                   	pop    edx
c0019757:	59                   	pop    ecx
c0019758:	50                   	push   eax
c0019759:	56                   	push   esi
c001975a:	e8 15 72 fe ff       	call   c0000974 <strcat>
c001975f:	5f                   	pop    edi
c0019760:	5d                   	pop    ebp
c0019761:	56                   	push   esi
c0019762:	53                   	push   ebx
c0019763:	e8 bc ad ff ff       	call   c0014524 <Device::setName(char const*)>
c0019768:	58                   	pop    eax
c0019769:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001976f:	5a                   	pop    edx
c0019770:	68 d4 b9 02 c0       	push   0xc002b9d4
c0019775:	50                   	push   eax
c0019776:	e8 45 71 fe ff       	call   c00008c0 <strcmp>
c001977b:	83 c4 10             	add    esp,0x10
c001977e:	85 c0                	test   eax,eax
c0019780:	75 20                	jne    c00197a2 <CPU::detectFeatures()+0x704>
c0019782:	8b 15 a8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5a8
c0019788:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001978e:	a8 01                	test   al,0x1
c0019790:	74 10                	je     c00197a2 <CPU::detectFeatures()+0x704>
c0019792:	83 e0 fe             	and    eax,0xfffffffe
c0019795:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001979b:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00197a2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197a8:	c1 e8 0e             	shr    eax,0xe
c00197ab:	3c 05                	cmp    al,0x5
c00197ad:	0f 85 cc 02 00 00    	jne    c0019a7f <CPU::detectFeatures()+0x9e1>
c00197b3:	56                   	push   esi
c00197b4:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00197ba:	83 e0 0f             	and    eax,0xf
c00197bd:	50                   	push   eax
c00197be:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197c4:	66 c1 e8 06          	shr    ax,0x6
c00197c8:	0f b6 c0             	movzx  eax,al
c00197cb:	50                   	push   eax
c00197cc:	6a 05                	push   0x5
c00197ce:	e8 11 f4 ff ff       	call   c0018be4 <CPU::AMD_K6_writeback(int, int, int)>
c00197d3:	e9 1f 02 00 00       	jmp    c00199f7 <CPU::detectFeatures()+0x959>
c00197d8:	8d 50 fd             	lea    edx,[eax-0x3]
c00197db:	83 fa 01             	cmp    edx,0x1
c00197de:	76 09                	jbe    c00197e9 <CPU::detectFeatures()+0x74b>
c00197e0:	83 f8 06             	cmp    eax,0x6
c00197e3:	0f 85 91 01 00 00    	jne    c001997a <CPU::detectFeatures()+0x8dc>
c00197e9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00197ef:	c1 ea 0e             	shr    edx,0xe
c00197f2:	80 fa 05             	cmp    dl,0x5
c00197f5:	75 7b                	jne    c0019872 <CPU::detectFeatures()+0x7d4>
c00197f7:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00197fd:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019802:	66 81 fa 00 01       	cmp    dx,0x100
c0019807:	75 0c                	jne    c0019815 <CPU::detectFeatures()+0x777>
c0019809:	51                   	push   ecx
c001980a:	51                   	push   ecx
c001980b:	68 db b9 02 c0       	push   0xc002b9db
c0019810:	e9 dc 01 00 00       	jmp    c00199f1 <CPU::detectFeatures()+0x953>
c0019815:	66 81 fa 00 02       	cmp    dx,0x200
c001981a:	75 0c                	jne    c0019828 <CPU::detectFeatures()+0x78a>
c001981c:	52                   	push   edx
c001981d:	52                   	push   edx
c001981e:	68 ee b9 02 c0       	push   0xc002b9ee
c0019823:	e9 c9 01 00 00       	jmp    c00199f1 <CPU::detectFeatures()+0x953>
c0019828:	66 81 fa 40 02       	cmp    dx,0x240
c001982d:	75 0c                	jne    c001983b <CPU::detectFeatures()+0x79d>
c001982f:	50                   	push   eax
c0019830:	50                   	push   eax
c0019831:	68 00 ba 02 c0       	push   0xc002ba00
c0019836:	e9 b6 01 00 00       	jmp    c00199f1 <CPU::detectFeatures()+0x953>
c001983b:	83 f8 06             	cmp    eax,0x6
c001983e:	75 0c                	jne    c001984c <CPU::detectFeatures()+0x7ae>
c0019840:	50                   	push   eax
c0019841:	50                   	push   eax
c0019842:	68 12 ba 02 c0       	push   0xc002ba12
c0019847:	e9 a5 01 00 00       	jmp    c00199f1 <CPU::detectFeatures()+0x953>
c001984c:	83 f8 04             	cmp    eax,0x4
c001984f:	75 0c                	jne    c001985d <CPU::detectFeatures()+0x7bf>
c0019851:	50                   	push   eax
c0019852:	50                   	push   eax
c0019853:	68 1e ba 02 c0       	push   0xc002ba1e
c0019858:	e9 94 01 00 00       	jmp    c00199f1 <CPU::detectFeatures()+0x953>
c001985d:	83 f8 03             	cmp    eax,0x3
c0019860:	0f 85 19 02 00 00    	jne    c0019a7f <CPU::detectFeatures()+0x9e1>
c0019866:	50                   	push   eax
c0019867:	50                   	push   eax
c0019868:	68 26 ba 02 c0       	push   0xc002ba26
c001986d:	e9 7f 01 00 00       	jmp    c00199f1 <CPU::detectFeatures()+0x953>
c0019872:	80 fa 06             	cmp    dl,0x6
c0019875:	0f 85 db 00 00 00    	jne    c0019956 <CPU::detectFeatures()+0x8b8>
c001987b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019881:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019886:	66 81 fa 80 01       	cmp    dx,0x180
c001988b:	75 0c                	jne    c0019899 <CPU::detectFeatures()+0x7fb>
c001988d:	50                   	push   eax
c001988e:	50                   	push   eax
c001988f:	68 31 ba 02 c0       	push   0xc002ba31
c0019894:	e9 58 01 00 00       	jmp    c00199f1 <CPU::detectFeatures()+0x953>
c0019899:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001989f:	66 f7 c1 80 ff       	test   cx,0xff80
c00198a4:	75 0c                	jne    c00198b2 <CPU::detectFeatures()+0x814>
c00198a6:	50                   	push   eax
c00198a7:	50                   	push   eax
c00198a8:	68 41 ba 02 c0       	push   0xc002ba41
c00198ad:	e9 3f 01 00 00       	jmp    c00199f1 <CPU::detectFeatures()+0x953>
c00198b2:	66 81 fa 40 02       	cmp    dx,0x240
c00198b7:	75 0c                	jne    c00198c5 <CPU::detectFeatures()+0x827>
c00198b9:	55                   	push   ebp
c00198ba:	55                   	push   ebp
c00198bb:	68 48 ba 02 c0       	push   0xc002ba48
c00198c0:	e9 2c 01 00 00       	jmp    c00199f1 <CPU::detectFeatures()+0x953>
c00198c5:	66 81 fa 80 02       	cmp    dx,0x280
c00198ca:	75 0c                	jne    c00198d8 <CPU::detectFeatures()+0x83a>
c00198cc:	57                   	push   edi
c00198cd:	57                   	push   edi
c00198ce:	68 51 ba 02 c0       	push   0xc002ba51
c00198d3:	e9 19 01 00 00       	jmp    c00199f1 <CPU::detectFeatures()+0x953>
c00198d8:	66 81 fa 40 03       	cmp    dx,0x340
c00198dd:	74 ed                	je     c00198cc <CPU::detectFeatures()+0x82e>
c00198df:	66 81 fa c0 03       	cmp    dx,0x3c0
c00198e4:	75 0c                	jne    c00198f2 <CPU::detectFeatures()+0x854>
c00198e6:	56                   	push   esi
c00198e7:	56                   	push   esi
c00198e8:	68 58 ba 02 c0       	push   0xc002ba58
c00198ed:	e9 ff 00 00 00       	jmp    c00199f1 <CPU::detectFeatures()+0x953>
c00198f2:	83 f8 06             	cmp    eax,0x6
c00198f5:	0f 84 45 ff ff ff    	je     c0019840 <CPU::detectFeatures()+0x7a2>
c00198fb:	83 f8 04             	cmp    eax,0x4
c00198fe:	0f 84 4d ff ff ff    	je     c0019851 <CPU::detectFeatures()+0x7b3>
c0019904:	83 f8 03             	cmp    eax,0x3
c0019907:	0f 85 72 01 00 00    	jne    c0019a7f <CPU::detectFeatures()+0x9e1>
c001990d:	51                   	push   ecx
c001990e:	51                   	push   ecx
c001990f:	68 61 ba 02 c0       	push   0xc002ba61
c0019914:	53                   	push   ebx
c0019915:	e8 0a ac ff ff       	call   c0014524 <Device::setName(char const*)>
c001991a:	b1 c1                	mov    cl,0xc1
c001991c:	88 c8                	mov    al,cl
c001991e:	e6 22                	out    0x22,al
c0019920:	e4 23                	in     al,0x23
c0019922:	88 c2                	mov    dl,al
c0019924:	88 c8                	mov    al,cl
c0019926:	e6 22                	out    0x22,al
c0019928:	88 d0                	mov    al,dl
c001992a:	83 c8 10             	or     eax,0x10
c001992d:	e6 23                	out    0x23,al
c001992f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019936:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019939:	89 d0                	mov    eax,edx
c001993b:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019941:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019945:	40                   	inc    eax
c0019946:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001994c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019951:	e9 a1 00 00 00       	jmp    c00199f7 <CPU::detectFeatures()+0x959>
c0019956:	83 f8 06             	cmp    eax,0x6
c0019959:	0f 84 e1 fe ff ff    	je     c0019840 <CPU::detectFeatures()+0x7a2>
c001995f:	83 f8 04             	cmp    eax,0x4
c0019962:	0f 84 e9 fe ff ff    	je     c0019851 <CPU::detectFeatures()+0x7b3>
c0019968:	83 f8 03             	cmp    eax,0x3
c001996b:	0f 85 0e 01 00 00    	jne    c0019a7f <CPU::detectFeatures()+0x9e1>
c0019971:	52                   	push   edx
c0019972:	52                   	push   edx
c0019973:	68 6c ba 02 c0       	push   0xc002ba6c
c0019978:	eb 77                	jmp    c00199f1 <CPU::detectFeatures()+0x953>
c001997a:	83 f8 07             	cmp    eax,0x7
c001997d:	75 09                	jne    c0019988 <CPU::detectFeatures()+0x8ea>
c001997f:	50                   	push   eax
c0019980:	50                   	push   eax
c0019981:	68 76 ba 02 c0       	push   0xc002ba76
c0019986:	eb 69                	jmp    c00199f1 <CPU::detectFeatures()+0x953>
c0019988:	83 f8 0a             	cmp    eax,0xa
c001998b:	75 09                	jne    c0019996 <CPU::detectFeatures()+0x8f8>
c001998d:	50                   	push   eax
c001998e:	50                   	push   eax
c001998f:	68 81 ba 02 c0       	push   0xc002ba81
c0019994:	eb 5b                	jmp    c00199f1 <CPU::detectFeatures()+0x953>
c0019996:	83 f8 0b             	cmp    eax,0xb
c0019999:	75 09                	jne    c00199a4 <CPU::detectFeatures()+0x906>
c001999b:	50                   	push   eax
c001999c:	50                   	push   eax
c001999d:	68 89 ba 02 c0       	push   0xc002ba89
c00199a2:	eb 4d                	jmp    c00199f1 <CPU::detectFeatures()+0x953>
c00199a4:	83 f8 08             	cmp    eax,0x8
c00199a7:	75 09                	jne    c00199b2 <CPU::detectFeatures()+0x914>
c00199a9:	50                   	push   eax
c00199aa:	50                   	push   eax
c00199ab:	68 92 ba 02 c0       	push   0xc002ba92
c00199b0:	eb 3f                	jmp    c00199f1 <CPU::detectFeatures()+0x953>
c00199b2:	83 f8 09             	cmp    eax,0x9
c00199b5:	75 09                	jne    c00199c0 <CPU::detectFeatures()+0x922>
c00199b7:	50                   	push   eax
c00199b8:	50                   	push   eax
c00199b9:	68 9a ba 02 c0       	push   0xc002ba9a
c00199be:	eb 31                	jmp    c00199f1 <CPU::detectFeatures()+0x953>
c00199c0:	83 f8 05             	cmp    eax,0x5
c00199c3:	75 09                	jne    c00199ce <CPU::detectFeatures()+0x930>
c00199c5:	50                   	push   eax
c00199c6:	50                   	push   eax
c00199c7:	68 a2 ba 02 c0       	push   0xc002baa2
c00199cc:	eb 23                	jmp    c00199f1 <CPU::detectFeatures()+0x953>
c00199ce:	83 f8 0c             	cmp    eax,0xc
c00199d1:	75 09                	jne    c00199dc <CPU::detectFeatures()+0x93e>
c00199d3:	55                   	push   ebp
c00199d4:	55                   	push   ebp
c00199d5:	68 b0 ba 02 c0       	push   0xc002bab0
c00199da:	eb 15                	jmp    c00199f1 <CPU::detectFeatures()+0x953>
c00199dc:	83 f8 0d             	cmp    eax,0xd
c00199df:	75 09                	jne    c00199ea <CPU::detectFeatures()+0x94c>
c00199e1:	57                   	push   edi
c00199e2:	57                   	push   edi
c00199e3:	68 bb ba 02 c0       	push   0xc002babb
c00199e8:	eb 07                	jmp    c00199f1 <CPU::detectFeatures()+0x953>
c00199ea:	56                   	push   esi
c00199eb:	56                   	push   esi
c00199ec:	68 cf ba 02 c0       	push   0xc002bacf
c00199f1:	53                   	push   ebx
c00199f2:	e8 2d ab ff ff       	call   c0014524 <Device::setName(char const*)>
c00199f7:	83 c4 10             	add    esp,0x10
c00199fa:	e9 80 00 00 00       	jmp    c0019a7f <CPU::detectFeatures()+0x9e1>
c00199ff:	51                   	push   ecx
c0019a00:	51                   	push   ecx
c0019a01:	68 1b b9 02 c0       	push   0xc002b91b
c0019a06:	57                   	push   edi
c0019a07:	e8 28 6e fe ff       	call   c0000834 <strcpy>
c0019a0c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019a16:	e8 93 68 fe ff       	call   c00002ae <is486>
c0019a1b:	83 c4 10             	add    esp,0x10
c0019a1e:	85 c0                	test   eax,eax
c0019a20:	74 2b                	je     c0019a4d <CPU::detectFeatures()+0x9af>
c0019a22:	52                   	push   edx
c0019a23:	52                   	push   edx
c0019a24:	68 db ba 02 c0       	push   0xc002badb
c0019a29:	53                   	push   ebx
c0019a2a:	e8 f5 aa ff ff       	call   c0014524 <Device::setName(char const*)>
c0019a2f:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019a36:	0f 20 c0             	mov    eax,cr0
c0019a39:	83 e0 14             	and    eax,0x14
c0019a3c:	83 c4 10             	add    esp,0x10
c0019a3f:	83 f8 04             	cmp    eax,0x4
c0019a42:	75 1f                	jne    c0019a63 <CPU::detectFeatures()+0x9c5>
c0019a44:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019a4b:	eb 32                	jmp    c0019a7f <CPU::detectFeatures()+0x9e1>
c0019a4d:	50                   	push   eax
c0019a4e:	50                   	push   eax
c0019a4f:	68 e6 ba 02 c0       	push   0xc002bae6
c0019a54:	53                   	push   ebx
c0019a55:	e8 ca aa ff ff       	call   c0014524 <Device::setName(char const*)>
c0019a5a:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019a61:	eb d3                	jmp    c0019a36 <CPU::detectFeatures()+0x998>
c0019a63:	e8 21 68 fe ff       	call   c0000289 <hasLegacyFPU>
c0019a68:	83 e0 01             	and    eax,0x1
c0019a6b:	8d 14 00             	lea    edx,[eax+eax*1]
c0019a6e:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019a74:	83 e0 fd             	and    eax,0xfffffffd
c0019a77:	09 d0                	or     eax,edx
c0019a79:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019a7f:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019a86:	83 c4 4c             	add    esp,0x4c
c0019a89:	5b                   	pop    ebx
c0019a8a:	5e                   	pop    esi
c0019a8b:	5f                   	pop    edi
c0019a8c:	5d                   	pop    ebp
c0019a8d:	c3                   	ret    

c0019a8e <CPU::setupSMEP()>:
c0019a8e:	0f 20 e0             	mov    eax,cr4
c0019a91:	0d 00 00 10 00       	or     eax,0x100000
c0019a96:	0f 22 e0             	mov    cr4,eax
c0019a99:	c3                   	ret    

c0019a9a <CPU::setupUMIP()>:
c0019a9a:	0f 20 e0             	mov    eax,cr4
c0019a9d:	80 cc 08             	or     ah,0x8
c0019aa0:	0f 22 e0             	mov    cr4,eax
c0019aa3:	c3                   	ret    

c0019aa4 <CPU::setupTSC()>:
c0019aa4:	0f 20 e0             	mov    eax,cr4
c0019aa7:	83 c8 04             	or     eax,0x4
c0019aaa:	0f 22 e0             	mov    cr4,eax
c0019aad:	c3                   	ret    

c0019aae <CPU::setupLargePages()>:
c0019aae:	0f 20 e0             	mov    eax,cr4
c0019ab1:	83 c8 10             	or     eax,0x10
c0019ab4:	0f 22 e0             	mov    cr4,eax
c0019ab7:	c3                   	ret    

c0019ab8 <CPU::setupPAT()>:
c0019ab8:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c0019abd:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019ac4:	74 2c                	je     c0019af2 <CPU::setupPAT()+0x3a>
c0019ac6:	53                   	push   ebx
c0019ac7:	83 ec 10             	sub    esp,0x10
c0019aca:	68 77 02 00 00       	push   0x277
c0019acf:	50                   	push   eax
c0019ad0:	e8 13 53 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019ad5:	83 e2 f8             	and    edx,0xfffffff8
c0019ad8:	83 ca 01             	or     edx,0x1
c0019adb:	52                   	push   edx
c0019adc:	50                   	push   eax
c0019add:	68 77 02 00 00       	push   0x277
c0019ae2:	ff 35 a8 e5 02 c0    	push   DWORD PTR ds:0xc002e5a8
c0019ae8:	e8 27 53 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019aed:	83 c4 28             	add    esp,0x28
c0019af0:	5b                   	pop    ebx
c0019af1:	c3                   	ret    
c0019af2:	c3                   	ret    
c0019af3:	90                   	nop

c0019af4 <CPU::setupMTRR()>:
c0019af4:	c3                   	ret    
c0019af5:	90                   	nop

c0019af6 <CPU::setupGlobalPages()>:
c0019af6:	0f 20 e0             	mov    eax,cr4
c0019af9:	0c 80                	or     al,0x80
c0019afb:	0f 22 e0             	mov    cr4,eax
c0019afe:	c3                   	ret    
c0019aff:	90                   	nop

c0019b00 <CPU::allowUsermodeDataAccess()>:
c0019b00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b04:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019b0b:	74 03                	je     c0019b10 <CPU::allowUsermodeDataAccess()+0x10>
c0019b0d:	0f 01 cb             	stac   
c0019b10:	c3                   	ret    
c0019b11:	90                   	nop

c0019b12 <CPU::prohibitUsermodeDataAccess()>:
c0019b12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b16:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019b1d:	74 03                	je     c0019b22 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019b1f:	0f 01 ca             	clac   
c0019b22:	c3                   	ret    
c0019b23:	90                   	nop

c0019b24 <CPU::setupSMAP()>:
c0019b24:	0f 20 e0             	mov    eax,cr4
c0019b27:	0d 00 00 20 00       	or     eax,0x200000
c0019b2c:	0f 22 e0             	mov    cr4,eax
c0019b2f:	eb e1                	jmp    c0019b12 <CPU::prohibitUsermodeDataAccess()>
c0019b31:	90                   	nop

c0019b32 <CPU::setupFeatures()>:
c0019b32:	83 ec 0c             	sub    esp,0xc
c0019b35:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b39:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019b40:	74 07                	je     c0019b49 <CPU::setupFeatures()+0x17>
c0019b42:	52                   	push   edx
c0019b43:	e8 46 ff ff ff       	call   c0019a8e <CPU::setupSMEP()>
c0019b48:	58                   	pop    eax
c0019b49:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019b50:	74 07                	je     c0019b59 <CPU::setupFeatures()+0x27>
c0019b52:	52                   	push   edx
c0019b53:	e8 cc ff ff ff       	call   c0019b24 <CPU::setupSMAP()>
c0019b58:	58                   	pop    eax
c0019b59:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019b60:	74 07                	je     c0019b69 <CPU::setupFeatures()+0x37>
c0019b62:	52                   	push   edx
c0019b63:	e8 32 ff ff ff       	call   c0019a9a <CPU::setupUMIP()>
c0019b68:	58                   	pop    eax
c0019b69:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019b70:	74 07                	je     c0019b79 <CPU::setupFeatures()+0x47>
c0019b72:	52                   	push   edx
c0019b73:	e8 2c ff ff ff       	call   c0019aa4 <CPU::setupTSC()>
c0019b78:	58                   	pop    eax
c0019b79:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019b80:	74 07                	je     c0019b89 <CPU::setupFeatures()+0x57>
c0019b82:	52                   	push   edx
c0019b83:	e8 26 ff ff ff       	call   c0019aae <CPU::setupLargePages()>
c0019b88:	59                   	pop    ecx
c0019b89:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019b90:	74 07                	je     c0019b99 <CPU::setupFeatures()+0x67>
c0019b92:	52                   	push   edx
c0019b93:	e8 5e ff ff ff       	call   c0019af6 <CPU::setupGlobalPages()>
c0019b98:	58                   	pop    eax
c0019b99:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019ba0:	74 0c                	je     c0019bae <CPU::setupFeatures()+0x7c>
c0019ba2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019ba6:	83 c4 0c             	add    esp,0xc
c0019ba9:	e9 0a ff ff ff       	jmp    c0019ab8 <CPU::setupPAT()>
c0019bae:	83 c4 0c             	add    esp,0xc
c0019bb1:	c3                   	ret    

c0019bb2 <CPU::open(int, int, void*)>:
c0019bb2:	57                   	push   edi
c0019bb3:	56                   	push   esi
c0019bb4:	53                   	push   ebx
c0019bb5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019bb9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019bbd:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019bc3:	83 ec 0c             	sub    esp,0xc
c0019bc6:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019bcc:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019bd2:	50                   	push   eax
c0019bd3:	e8 fc 54 ff ff       	call   c000f0d4 <GDT::setup()>
c0019bd8:	83 c4 0c             	add    esp,0xc
c0019bdb:	6a 00                	push   0x0
c0019bdd:	68 ef be ad de       	push   0xdeadbeef
c0019be2:	57                   	push   edi
c0019be3:	e8 14 79 ff ff       	call   c00114fc <TSS::setup(unsigned long, unsigned long)>
c0019be8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019beb:	e8 ec 78 ff ff       	call   c00114dc <TSS::flush()>
c0019bf0:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019bf6:	89 04 24             	mov    DWORD PTR [esp],eax
c0019bf9:	e8 32 57 ff ff       	call   c000f330 <IDT::setup()>
c0019bfe:	b8 00 04 00 00       	mov    eax,0x400
c0019c03:	0f 23 f8             	mov    db7,eax
c0019c06:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019c10:	e8 cd 62 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0019c15:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019c1b:	89 30                	mov    DWORD PTR [eax],esi
c0019c1d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019c23:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019c26:	58                   	pop    eax
c0019c27:	5a                   	pop    edx
c0019c28:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c2e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019c32:	e8 03 8a ff ff       	call   c001263a <VAS::setCPUSpecific(unsigned long)>
c0019c37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c3a:	e8 5f f4 ff ff       	call   c001909e <CPU::detectFeatures()>
c0019c3f:	e8 cf bc ff ff       	call   c0015913 <setupInterruptController()>
c0019c44:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019c4a:	a1 c0 e5 02 c0       	mov    eax,ds:0xc002e5c0
c0019c4f:	83 e0 10             	and    eax,0x10
c0019c52:	83 f8 01             	cmp    eax,0x1
c0019c55:	19 c0                	sbb    eax,eax
c0019c57:	83 e0 46             	and    eax,0x46
c0019c5a:	83 c0 1e             	add    eax,0x1e
c0019c5d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c60:	e8 bb d1 ff ff       	call   c0016e20 <setupTimer(int)>
c0019c65:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019c6b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c6e:	e8 bf fe ff ff       	call   c0019b32 <CPU::setupFeatures()>
c0019c73:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c76:	e8 a7 f1 ff ff       	call   c0018e22 <CPU::displayFeatures()>
c0019c7b:	83 c4 10             	add    esp,0x10
c0019c7e:	31 c0                	xor    eax,eax
c0019c80:	5b                   	pop    ebx
c0019c81:	5e                   	pop    esi
c0019c82:	5f                   	pop    edi
c0019c83:	c3                   	ret    

c0019c84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019c84:	57                   	push   edi
c0019c85:	56                   	push   esi
c0019c86:	53                   	push   ebx
c0019c87:	51                   	push   ecx
c0019c88:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019c8c:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019c8f:	0f 02 c0             	lar    eax,ax
c0019c92:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019c95:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019c99:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019c9c:	88 ca                	mov    dl,cl
c0019c9e:	c0 ea 06             	shr    dl,0x6
c0019ca1:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019ca5:	89 ca                	mov    edx,ecx
c0019ca7:	66 c1 ea 03          	shr    dx,0x3
c0019cab:	83 e2 07             	and    edx,0x7
c0019cae:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019cb3:	88 17                	mov    BYTE PTR [edi],dl
c0019cb5:	0f 84 a6 01 00 00    	je     c0019e61 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019cbb:	83 e1 07             	and    ecx,0x7
c0019cbe:	80 f9 04             	cmp    cl,0x4
c0019cc1:	0f 84 98 00 00 00    	je     c0019d5f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019cc7:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019ccc:	0f 95 c0             	setne  al
c0019ccf:	80 f9 05             	cmp    cl,0x5
c0019cd2:	0f 95 c2             	setne  dl
c0019cd5:	08 c2                	or     dl,al
c0019cd7:	74 79                	je     c0019d52 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019cd9:	84 c9                	test   cl,cl
c0019cdb:	75 05                	jne    c0019ce2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019cdd:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019ce0:	eb 3c                	jmp    c0019d1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019ce2:	80 f9 01             	cmp    cl,0x1
c0019ce5:	75 05                	jne    c0019cec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019ce7:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019cea:	eb 32                	jmp    c0019d1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019cec:	80 f9 02             	cmp    cl,0x2
c0019cef:	75 05                	jne    c0019cf6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019cf1:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019cf4:	eb 28                	jmp    c0019d1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019cf6:	31 c0                	xor    eax,eax
c0019cf8:	80 f9 03             	cmp    cl,0x3
c0019cfb:	75 05                	jne    c0019d02 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019cfd:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019d00:	eb 1c                	jmp    c0019d1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d02:	80 f9 05             	cmp    cl,0x5
c0019d05:	75 05                	jne    c0019d0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019d07:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019d0a:	eb 12                	jmp    c0019d1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d0c:	80 f9 06             	cmp    cl,0x6
c0019d0f:	75 05                	jne    c0019d16 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019d11:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019d14:	eb 08                	jmp    c0019d1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d16:	80 f9 07             	cmp    cl,0x7
c0019d19:	75 03                	jne    c0019d1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d1b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019d1e:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019d23:	75 10                	jne    c0019d35 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019d25:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019d29:	b9 03 00 00 00       	mov    ecx,0x3
c0019d2e:	01 d0                	add    eax,edx
c0019d30:	e9 37 01 00 00       	jmp    c0019e6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d35:	b9 02 00 00 00       	mov    ecx,0x2
c0019d3a:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019d3f:	0f 85 27 01 00 00    	jne    c0019e6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d45:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019d48:	b9 06 00 00 00       	mov    ecx,0x6
c0019d4d:	e9 1a 01 00 00       	jmp    c0019e6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d52:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019d55:	b9 06 00 00 00       	mov    ecx,0x6
c0019d5a:	e9 0f 01 00 00       	jmp    c0019e6e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d5f:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019d62:	88 ca                	mov    dl,cl
c0019d64:	c0 ea 06             	shr    dl,0x6
c0019d67:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019d6b:	89 ca                	mov    edx,ecx
c0019d6d:	66 c1 ea 03          	shr    dx,0x3
c0019d71:	83 e2 07             	and    edx,0x7
c0019d74:	80 e1 07             	and    cl,0x7
c0019d77:	75 05                	jne    c0019d7e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019d79:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019d7c:	eb 4c                	jmp    c0019dca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d7e:	80 f9 01             	cmp    cl,0x1
c0019d81:	75 05                	jne    c0019d88 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019d83:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019d86:	eb 42                	jmp    c0019dca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d88:	80 f9 02             	cmp    cl,0x2
c0019d8b:	75 05                	jne    c0019d92 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019d8d:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019d90:	eb 38                	jmp    c0019dca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d92:	80 f9 03             	cmp    cl,0x3
c0019d95:	75 05                	jne    c0019d9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019d97:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019d9a:	eb 2e                	jmp    c0019dca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d9c:	80 f9 04             	cmp    cl,0x4
c0019d9f:	75 12                	jne    c0019db3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019da1:	f6 c4 60             	test   ah,0x60
c0019da4:	75 08                	jne    c0019dae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019da6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019da9:	8d 78 14             	lea    edi,[eax+0x14]
c0019dac:	eb 1c                	jmp    c0019dca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dae:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019db1:	eb 17                	jmp    c0019dca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019db3:	80 f9 05             	cmp    cl,0x5
c0019db6:	75 05                	jne    c0019dbd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019db8:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019dbb:	eb 0d                	jmp    c0019dca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dbd:	80 f9 06             	cmp    cl,0x6
c0019dc0:	75 05                	jne    c0019dc7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019dc2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019dc5:	eb 03                	jmp    c0019dca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dc7:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019dca:	84 d2                	test   dl,dl
c0019dcc:	75 05                	jne    c0019dd3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019dce:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019dd1:	eb 3c                	jmp    c0019e0f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019dd3:	80 fa 01             	cmp    dl,0x1
c0019dd6:	75 05                	jne    c0019ddd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019dd8:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019ddb:	eb 32                	jmp    c0019e0f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ddd:	80 fa 02             	cmp    dl,0x2
c0019de0:	75 05                	jne    c0019de7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019de2:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019de5:	eb 28                	jmp    c0019e0f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019de7:	80 fa 03             	cmp    dl,0x3
c0019dea:	75 05                	jne    c0019df1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019dec:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019def:	eb 1e                	jmp    c0019e0f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019df1:	31 c0                	xor    eax,eax
c0019df3:	80 fa 04             	cmp    dl,0x4
c0019df6:	74 17                	je     c0019e0f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019df8:	80 fa 05             	cmp    dl,0x5
c0019dfb:	75 05                	jne    c0019e02 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019dfd:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019e00:	eb 0d                	jmp    c0019e0f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e02:	80 fa 06             	cmp    dl,0x6
c0019e05:	75 05                	jne    c0019e0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019e07:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019e0a:	eb 03                	jmp    c0019e0f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e0c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019e0f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019e14:	0f 94 c2             	sete   dl
c0019e17:	80 f9 05             	cmp    cl,0x5
c0019e1a:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019e1e:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019e23:	d3 e0                	shl    eax,cl
c0019e25:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019e29:	74 0a                	je     c0019e35 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019e2b:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019e2e:	b9 07 00 00 00       	mov    ecx,0x7
c0019e33:	eb 37                	jmp    c0019e6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e35:	01 f8                	add    eax,edi
c0019e37:	b9 03 00 00 00       	mov    ecx,0x3
c0019e3c:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019e41:	74 2b                	je     c0019e6e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e43:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019e48:	75 0d                	jne    c0019e57 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019e4a:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019e4e:	01 c8                	add    eax,ecx
c0019e50:	b9 04 00 00 00       	mov    ecx,0x4
c0019e55:	eb 17                	jmp    c0019e6e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e57:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019e5a:	b9 07 00 00 00       	mov    ecx,0x7
c0019e5f:	eb 0d                	jmp    c0019e6e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e61:	b9 02 00 00 00       	mov    ecx,0x2
c0019e66:	b2 01                	mov    dl,0x1
c0019e68:	31 c0                	xor    eax,eax
c0019e6a:	eb 02                	jmp    c0019e6e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e6c:	31 d2                	xor    edx,edx
c0019e6e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019e72:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019e74:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019e78:	88 11                	mov    BYTE PTR [ecx],dl
c0019e7a:	5a                   	pop    edx
c0019e7b:	5b                   	pop    ebx
c0019e7c:	5e                   	pop    esi
c0019e7d:	5f                   	pop    edi
c0019e7e:	c3                   	ret    

c0019e7f <Krnl::smpEntry()>:
c0019e7f:	eb fe                	jmp    c0019e7f <Krnl::smpEntry()>

c0019e81 <Krnl::startCPU(int)>:
c0019e81:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c0019e86:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019e8d:	0f 84 36 01 00 00    	je     c0019fc9 <Krnl::startCPU(int)+0x148>
c0019e93:	53                   	push   ebx
c0019e94:	83 ec 08             	sub    esp,0x8
c0019e97:	e8 46 3f 00 00       	call   c001dde2 <lockScheduler()>
c0019e9c:	52                   	push   edx
c0019e9d:	52                   	push   edx
c0019e9e:	6a 1b                	push   0x1b
c0019ea0:	ff 35 a8 e5 02 c0    	push   DWORD PTR ds:0xc002e5a8
c0019ea6:	e8 3d 4f ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019eab:	59                   	pop    ecx
c0019eac:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019eb1:	89 c3                	mov    ebx,eax
c0019eb3:	58                   	pop    eax
c0019eb4:	53                   	push   ebx
c0019eb5:	68 20 bb 02 c0       	push   0xc002bb20
c0019eba:	e8 5d 90 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0019ebf:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019ec9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ecd:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019ed7:	c1 e0 18             	shl    eax,0x18
c0019eda:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019ee0:	83 c4 10             	add    esp,0x10
c0019ee3:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019ee9:	09 c2                	or     edx,eax
c0019eeb:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019ef1:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019ef7:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019efd:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019f03:	80 cd c5             	or     ch,0xc5
c0019f06:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f0c:	f3 90                	pause  
c0019f0e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f10:	0f ba e1 0c          	bt     ecx,0xc
c0019f14:	72 f6                	jb     c0019f0c <Krnl::startCPU(int)+0x8b>
c0019f16:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f1c:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f22:	09 c1                	or     ecx,eax
c0019f24:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019f2a:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f30:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019f36:	80 cd 85             	or     ch,0x85
c0019f39:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f3f:	f3 90                	pause  
c0019f41:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f43:	0f ba e1 0c          	bt     ecx,0xc
c0019f47:	72 f6                	jb     c0019f3f <Krnl::startCPU(int)+0xbe>
c0019f49:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f53:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f59:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f5f:	09 c1                	or     ecx,eax
c0019f61:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019f67:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f6d:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019f73:	81 c9 02 06 00 00    	or     ecx,0x602
c0019f79:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f7f:	f3 90                	pause  
c0019f81:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f83:	0f ba e1 0c          	bt     ecx,0xc
c0019f87:	72 f6                	jb     c0019f7f <Krnl::startCPU(int)+0xfe>
c0019f89:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f93:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f99:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f9f:	09 c8                	or     eax,ecx
c0019fa1:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019fa7:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019fad:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019fb2:	0d 02 06 00 00       	or     eax,0x602
c0019fb7:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019fbd:	f3 90                	pause  
c0019fbf:	8b 02                	mov    eax,DWORD PTR [edx]
c0019fc1:	0f ba e0 0c          	bt     eax,0xc
c0019fc5:	72 f6                	jb     c0019fbd <Krnl::startCPU(int)+0x13c>
c0019fc7:	eb fe                	jmp    c0019fc7 <Krnl::startCPU(int)+0x146>
c0019fc9:	c3                   	ret    

c0019fca <Krnl::startCPUs()>:
c0019fca:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c0019fcf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019fd5:	88 c2                	mov    dl,al
c0019fd7:	83 e2 0a             	and    edx,0xa
c0019fda:	80 fa 0a             	cmp    dl,0xa
c0019fdd:	75 09                	jne    c0019fe8 <Krnl::startCPUs()+0x1e>
c0019fdf:	a8 01                	test   al,0x1
c0019fe1:	74 05                	je     c0019fe8 <Krnl::startCPUs()+0x1e>
c0019fe3:	e9 b3 61 fe ff       	jmp    c000019b <prepareTramp>
c0019fe8:	c3                   	ret    
c0019fe9:	90                   	nop

c0019fea <EnvVarContainer::getEnv(char const*)>:
c0019fea:	57                   	push   edi
c0019feb:	56                   	push   esi
c0019fec:	53                   	push   ebx
c0019fed:	31 db                	xor    ebx,ebx
c0019fef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019ff3:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019ff5:	7e 2b                	jle    c001a022 <EnvVarContainer::getEnv(char const*)+0x38>
c0019ff7:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019ffe:	50                   	push   eax
c0019fff:	50                   	push   eax
c001a000:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a003:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a006:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a00a:	e8 b1 68 fe ff       	call   c00008c0 <strcmp>
c001a00f:	83 c4 10             	add    esp,0x10
c001a012:	85 c0                	test   eax,eax
c001a014:	75 09                	jne    c001a01f <EnvVarContainer::getEnv(char const*)+0x35>
c001a016:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a019:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a01d:	eb 05                	jmp    c001a024 <EnvVarContainer::getEnv(char const*)+0x3a>
c001a01f:	43                   	inc    ebx
c001a020:	eb d1                	jmp    c0019ff3 <EnvVarContainer::getEnv(char const*)+0x9>
c001a022:	31 c0                	xor    eax,eax
c001a024:	5b                   	pop    ebx
c001a025:	5e                   	pop    esi
c001a026:	5f                   	pop    edi
c001a027:	c3                   	ret    

c001a028 <EnvVarContainer::setEnv(char const*, char const*)>:
c001a028:	57                   	push   edi
c001a029:	56                   	push   esi
c001a02a:	53                   	push   ebx
c001a02b:	83 ec 1c             	sub    esp,0x1c
c001a02e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a032:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a036:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a03a:	57                   	push   edi
c001a03b:	e8 54 67 fe ff       	call   c0000794 <strlen>
c001a040:	40                   	inc    eax
c001a041:	89 04 24             	mov    DWORD PTR [esp],eax
c001a044:	e8 f7 57 ff ff       	call   c000f840 <malloc>
c001a049:	89 34 24             	mov    DWORD PTR [esp],esi
c001a04c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a050:	e8 3f 67 fe ff       	call   c0000794 <strlen>
c001a055:	40                   	inc    eax
c001a056:	89 04 24             	mov    DWORD PTR [esp],eax
c001a059:	e8 e2 57 ff ff       	call   c000f840 <malloc>
c001a05e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a061:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a065:	e8 2a 67 fe ff       	call   c0000794 <strlen>
c001a06a:	83 c4 0c             	add    esp,0xc
c001a06d:	40                   	inc    eax
c001a06e:	50                   	push   eax
c001a06f:	6a 00                	push   0x0
c001a071:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a075:	e8 fe 66 fe ff       	call   c0000778 <memset>
c001a07a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a07d:	e8 12 67 fe ff       	call   c0000794 <strlen>
c001a082:	83 c4 0c             	add    esp,0xc
c001a085:	40                   	inc    eax
c001a086:	50                   	push   eax
c001a087:	57                   	push   edi
c001a088:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a08c:	e8 b3 66 fe ff       	call   c0000744 <memcpy>
c001a091:	89 34 24             	mov    DWORD PTR [esp],esi
c001a094:	e8 fb 66 fe ff       	call   c0000794 <strlen>
c001a099:	83 c4 0c             	add    esp,0xc
c001a09c:	40                   	inc    eax
c001a09d:	50                   	push   eax
c001a09e:	6a 00                	push   0x0
c001a0a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a0a4:	e8 cf 66 fe ff       	call   c0000778 <memset>
c001a0a9:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0ac:	e8 e3 66 fe ff       	call   c0000794 <strlen>
c001a0b1:	83 c4 0c             	add    esp,0xc
c001a0b4:	40                   	inc    eax
c001a0b5:	50                   	push   eax
c001a0b6:	56                   	push   esi
c001a0b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a0bb:	e8 84 66 fe ff       	call   c0000744 <memcpy>
c001a0c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a0c2:	40                   	inc    eax
c001a0c3:	89 03                	mov    DWORD PTR [ebx],eax
c001a0c5:	c1 e0 03             	shl    eax,0x3
c001a0c8:	5a                   	pop    edx
c001a0c9:	59                   	pop    ecx
c001a0ca:	50                   	push   eax
c001a0cb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a0ce:	e8 59 57 ff ff       	call   c000f82c <realloc>
c001a0d3:	83 c4 0c             	add    esp,0xc
c001a0d6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a0d9:	6a 08                	push   0x8
c001a0db:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a0df:	52                   	push   edx
c001a0e0:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a0e2:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a0e6:	50                   	push   eax
c001a0e7:	e8 58 66 fe ff       	call   c0000744 <memcpy>
c001a0ec:	83 c4 20             	add    esp,0x20
c001a0ef:	5b                   	pop    ebx
c001a0f0:	5e                   	pop    esi
c001a0f1:	5f                   	pop    edi
c001a0f2:	c3                   	ret    
c001a0f3:	90                   	nop

c001a0f4 <EnvVarContainer::deleteEnv(char const*)>:
c001a0f4:	c3                   	ret    
c001a0f5:	90                   	nop

c001a0f6 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a0f6:	55                   	push   ebp
c001a0f7:	57                   	push   edi
c001a0f8:	56                   	push   esi
c001a0f9:	53                   	push   ebx
c001a0fa:	81 ec 38 01 00 00    	sub    esp,0x138
c001a100:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a107:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a10e:	68 14 01 00 00       	push   0x114
c001a113:	e8 28 57 ff ff       	call   c000f840 <malloc>
c001a118:	83 c4 0c             	add    esp,0xc
c001a11b:	89 c7                	mov    edi,eax
c001a11d:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a120:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a127:	50                   	push   eax
c001a128:	e8 47 93 ff ff       	call   c0013474 <File::File(char const*, Process*)>
c001a12d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a130:	e8 11 96 ff ff       	call   c0013746 <File::exists()>
c001a135:	83 c4 10             	add    esp,0x10
c001a138:	84 c0                	test   al,al
c001a13a:	75 31                	jne    c001a16d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a13c:	51                   	push   ecx
c001a13d:	51                   	push   ecx
c001a13e:	6a 12                	push   0x12
c001a140:	57                   	push   edi
c001a141:	e8 92 93 ff ff       	call   c00134d8 <File::open(FileOpenMode)>
c001a146:	8b 07                	mov    eax,DWORD PTR [edi]
c001a148:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a14b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a14e:	e8 41 66 fe ff       	call   c0000794 <strlen>
c001a153:	5a                   	pop    edx
c001a154:	31 d2                	xor    edx,edx
c001a156:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a15a:	51                   	push   ecx
c001a15b:	55                   	push   ebp
c001a15c:	52                   	push   edx
c001a15d:	50                   	push   eax
c001a15e:	57                   	push   edi
c001a15f:	ff d3                	call   ebx
c001a161:	83 c4 14             	add    esp,0x14
c001a164:	57                   	push   edi
c001a165:	e8 cc 93 ff ff       	call   c0013536 <File::close()>
c001a16a:	83 c4 10             	add    esp,0x10
c001a16d:	31 db                	xor    ebx,ebx
c001a16f:	50                   	push   eax
c001a170:	31 ed                	xor    ebp,ebp
c001a172:	68 00 01 00 00       	push   0x100
c001a177:	6a 00                	push   0x0
c001a179:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a17d:	50                   	push   eax
c001a17e:	e8 f5 65 fe ff       	call   c0000778 <memset>
c001a183:	58                   	pop    eax
c001a184:	5a                   	pop    edx
c001a185:	6a 01                	push   0x1
c001a187:	57                   	push   edi
c001a188:	e8 4b 93 ff ff       	call   c00134d8 <File::open(FileOpenMode)>
c001a18d:	83 c4 10             	add    esp,0x10
c001a190:	83 ec 0c             	sub    esp,0xc
c001a193:	8b 07                	mov    eax,DWORD PTR [edi]
c001a195:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a199:	51                   	push   ecx
c001a19a:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a19e:	52                   	push   edx
c001a19f:	6a 00                	push   0x0
c001a1a1:	6a 01                	push   0x1
c001a1a3:	57                   	push   edi
c001a1a4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a1a7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a1ab:	83 c4 20             	add    esp,0x20
c001a1ae:	3c 0d                	cmp    al,0xd
c001a1b0:	0f 84 12 01 00 00    	je     c001a2c8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a1b6:	85 db                	test   ebx,ebx
c001a1b8:	0f 84 fd 00 00 00    	je     c001a2bb <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a1be:	3c 0a                	cmp    al,0xa
c001a1c0:	74 13                	je     c001a1d5 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a1c2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a1c7:	74 0c                	je     c001a1d5 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a1c9:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a1cf:	0f 8e e6 00 00 00    	jle    c001a2bb <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a1d5:	83 ec 0c             	sub    esp,0xc
c001a1d8:	8d 53 01             	lea    edx,[ebx+0x1]
c001a1db:	29 dd                	sub    ebp,ebx
c001a1dd:	52                   	push   edx
c001a1de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a1e2:	e8 59 56 ff ff       	call   c000f840 <malloc>
c001a1e7:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a1ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a1ee:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a1f1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a1f5:	e8 46 56 ff ff       	call   c000f840 <malloc>
c001a1fa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a1fe:	83 c4 0c             	add    esp,0xc
c001a201:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a205:	52                   	push   edx
c001a206:	6a 00                	push   0x0
c001a208:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a20c:	e8 67 65 fe ff       	call   c0000778 <memset>
c001a211:	83 c4 0c             	add    esp,0xc
c001a214:	53                   	push   ebx
c001a215:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a219:	55                   	push   ebp
c001a21a:	01 eb                	add    ebx,ebp
c001a21c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a220:	e8 1f 65 fe ff       	call   c0000744 <memcpy>
c001a225:	83 c4 0c             	add    esp,0xc
c001a228:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a22c:	51                   	push   ecx
c001a22d:	6a 00                	push   0x0
c001a22f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a233:	e8 40 65 fe ff       	call   c0000778 <memset>
c001a238:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a23b:	e8 54 65 fe ff       	call   c0000794 <strlen>
c001a240:	83 c4 0c             	add    esp,0xc
c001a243:	50                   	push   eax
c001a244:	53                   	push   ebx
c001a245:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a249:	e8 f6 64 fe ff       	call   c0000744 <memcpy>
c001a24e:	5b                   	pop    ebx
c001a24f:	58                   	pop    eax
c001a250:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a254:	68 31 bb 02 c0       	push   0xc002bb31
c001a259:	e8 be 8c ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001a25e:	8b 06                	mov    eax,DWORD PTR [esi]
c001a260:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a263:	40                   	inc    eax
c001a264:	83 c4 10             	add    esp,0x10
c001a267:	89 06                	mov    DWORD PTR [esi],eax
c001a269:	85 d2                	test   edx,edx
c001a26b:	75 0c                	jne    c001a279 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a26d:	83 ec 0c             	sub    esp,0xc
c001a270:	6a 08                	push   0x8
c001a272:	e8 c9 55 ff ff       	call   c000f840 <malloc>
c001a277:	eb 0c                	jmp    c001a285 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a279:	c1 e0 03             	shl    eax,0x3
c001a27c:	51                   	push   ecx
c001a27d:	51                   	push   ecx
c001a27e:	50                   	push   eax
c001a27f:	52                   	push   edx
c001a280:	e8 a7 55 ff ff       	call   c000f82c <realloc>
c001a285:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a288:	83 c4 10             	add    esp,0x10
c001a28b:	31 db                	xor    ebx,ebx
c001a28d:	52                   	push   edx
c001a28e:	6a 08                	push   0x8
c001a290:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a294:	50                   	push   eax
c001a295:	8b 16                	mov    edx,DWORD PTR [esi]
c001a297:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a29a:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a29e:	50                   	push   eax
c001a29f:	e8 a0 64 fe ff       	call   c0000744 <memcpy>
c001a2a4:	83 c4 0c             	add    esp,0xc
c001a2a7:	68 00 01 00 00       	push   0x100
c001a2ac:	6a 00                	push   0x0
c001a2ae:	55                   	push   ebp
c001a2af:	31 ed                	xor    ebp,ebp
c001a2b1:	e8 c2 64 fe ff       	call   c0000778 <memset>
c001a2b6:	83 c4 10             	add    esp,0x10
c001a2b9:	eb 0d                	jmp    c001a2c8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a2bb:	3c 3d                	cmp    al,0x3d
c001a2bd:	74 07                	je     c001a2c6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a2bf:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a2c3:	45                   	inc    ebp
c001a2c4:	eb 02                	jmp    c001a2c8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a2c6:	89 eb                	mov    ebx,ebp
c001a2c8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a2cd:	0f 85 bd fe ff ff    	jne    c001a190 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a2d3:	50                   	push   eax
c001a2d4:	50                   	push   eax
c001a2d5:	ff 36                	push   DWORD PTR [esi]
c001a2d7:	68 3f bb 02 c0       	push   0xc002bb3f
c001a2dc:	e8 3b 8c ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001a2e1:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a2e7:	5b                   	pop    ebx
c001a2e8:	5e                   	pop    esi
c001a2e9:	5f                   	pop    edi
c001a2ea:	5d                   	pop    ebp
c001a2eb:	c3                   	ret    

c001a2ec <EnvVarContainer::__loadSystem()>:
c001a2ec:	83 ec 10             	sub    esp,0x10
c001a2ef:	68 e0 da 02 c0       	push   0xc002dae0
c001a2f4:	68 6a bb 02 c0       	push   0xc002bb6a
c001a2f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2fd:	e8 f4 fd ff ff       	call   c001a0f6 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a302:	83 c4 1c             	add    esp,0x1c
c001a305:	c3                   	ret    

c001a306 <EnvVarContainer::__loadUser()>:
c001a306:	c3                   	ret    
c001a307:	90                   	nop

c001a308 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a308:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a30c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a312:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a316:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a31a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a31d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a321:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a328:	90                   	nop
c001a329:	c3                   	ret    

c001a32a <EnvVarContainer::~EnvVarContainer()>:
c001a32a:	83 ec 0c             	sub    esp,0xc
c001a32d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a331:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a334:	85 c0                	test   eax,eax
c001a336:	74 1d                	je     c001a355 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a33c:	8b 00                	mov    eax,DWORD PTR [eax]
c001a33e:	85 c0                	test   eax,eax
c001a340:	74 13                	je     c001a355 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a346:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a349:	83 ec 0c             	sub    esp,0xc
c001a34c:	50                   	push   eax
c001a34d:	e8 fe 54 ff ff       	call   c000f850 <free>
c001a352:	83 c4 10             	add    esp,0x10
c001a355:	90                   	nop
c001a356:	83 c4 0c             	add    esp,0xc
c001a359:	c3                   	ret    

c001a35a <Krnl::getEnv(Process*, char const*)>:
c001a35a:	53                   	push   ebx
c001a35b:	83 ec 08             	sub    esp,0x8
c001a35e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a362:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a366:	39 05 14 1b 03 c0    	cmp    DWORD PTR ds:0xc0031b14,eax
c001a36c:	74 04                	je     c001a372 <Krnl::getEnv(Process*, char const*)+0x18>
c001a36e:	85 c0                	test   eax,eax
c001a370:	75 0b                	jne    c001a37d <Krnl::getEnv(Process*, char const*)+0x23>
c001a372:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c001a377:	85 c0                	test   eax,eax
c001a379:	75 19                	jne    c001a394 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a37b:	eb 27                	jmp    c001a3a4 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a37d:	52                   	push   edx
c001a37e:	52                   	push   edx
c001a37f:	53                   	push   ebx
c001a380:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a386:	e8 5f fc ff ff       	call   c0019fea <EnvVarContainer::getEnv(char const*)>
c001a38b:	83 c4 10             	add    esp,0x10
c001a38e:	85 c0                	test   eax,eax
c001a390:	75 28                	jne    c001a3ba <Krnl::getEnv(Process*, char const*)+0x60>
c001a392:	eb de                	jmp    c001a372 <Krnl::getEnv(Process*, char const*)+0x18>
c001a394:	52                   	push   edx
c001a395:	52                   	push   edx
c001a396:	53                   	push   ebx
c001a397:	50                   	push   eax
c001a398:	e8 4d fc ff ff       	call   c0019fea <EnvVarContainer::getEnv(char const*)>
c001a39d:	83 c4 10             	add    esp,0x10
c001a3a0:	85 c0                	test   eax,eax
c001a3a2:	75 16                	jne    c001a3ba <Krnl::getEnv(Process*, char const*)+0x60>
c001a3a4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a3a8:	a1 f8 10 03 c0       	mov    eax,ds:0xc00310f8
c001a3ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a3b1:	83 c4 08             	add    esp,0x8
c001a3b4:	5b                   	pop    ebx
c001a3b5:	e9 30 fc ff ff       	jmp    c0019fea <EnvVarContainer::getEnv(char const*)>
c001a3ba:	83 c4 08             	add    esp,0x8
c001a3bd:	5b                   	pop    ebx
c001a3be:	c3                   	ret    

c001a3bf <Krnl::setEnvSystem(char const*, char const*)>:
c001a3bf:	83 ec 10             	sub    esp,0x10
c001a3c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3ca:	ff 35 f8 10 03 c0    	push   DWORD PTR ds:0xc00310f8
c001a3d0:	e8 53 fc ff ff       	call   c001a028 <EnvVarContainer::setEnv(char const*, char const*)>
c001a3d5:	83 c4 1c             	add    esp,0x1c
c001a3d8:	c3                   	ret    

c001a3d9 <Krnl::setEnvUser(char const*, char const*)>:
c001a3d9:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c001a3de:	85 c0                	test   eax,eax
c001a3e0:	74 15                	je     c001a3f7 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a3e2:	83 ec 10             	sub    esp,0x10
c001a3e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3ed:	50                   	push   eax
c001a3ee:	e8 35 fc ff ff       	call   c001a028 <EnvVarContainer::setEnv(char const*, char const*)>
c001a3f3:	83 c4 1c             	add    esp,0x1c
c001a3f6:	c3                   	ret    
c001a3f7:	c3                   	ret    

c001a3f8 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a3f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3fc:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a402:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a406:	e9 1d fc ff ff       	jmp    c001a028 <EnvVarContainer::setEnv(char const*, char const*)>

c001a40b <Krnl::deleteEnvSystem(char const*)>:
c001a40b:	c3                   	ret    

c001a40c <Krnl::deleteEnvUser(char const*)>:
c001a40c:	c3                   	ret    

c001a40d <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a40d:	c3                   	ret    

c001a40e <Krnl::newProcessEnv(Process*)>:
c001a40e:	83 ec 28             	sub    esp,0x28
c001a411:	6a 0c                	push   0xc
c001a413:	e8 28 54 ff ff       	call   c000f840 <malloc>
c001a418:	5a                   	pop    edx
c001a419:	59                   	pop    ecx
c001a41a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a41e:	50                   	push   eax
c001a41f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a423:	e8 e0 fe ff ff       	call   c001a308 <EnvVarContainer::EnvVarContainer(Process*)>
c001a428:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a42c:	83 c4 2c             	add    esp,0x2c
c001a42f:	c3                   	ret    

c001a430 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a430:	56                   	push   esi
c001a431:	53                   	push   ebx
c001a432:	83 ec 10             	sub    esp,0x10
c001a435:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a439:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a43f:	6a 0c                	push   0xc
c001a441:	e8 fa 53 ff ff       	call   c000f840 <malloc>
c001a446:	89 c3                	mov    ebx,eax
c001a448:	58                   	pop    eax
c001a449:	5a                   	pop    edx
c001a44a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a44e:	53                   	push   ebx
c001a44f:	e8 b4 fe ff ff       	call   c001a308 <EnvVarContainer::EnvVarContainer(Process*)>
c001a454:	8b 06                	mov    eax,DWORD PTR [esi]
c001a456:	89 03                	mov    DWORD PTR [ebx],eax
c001a458:	c1 e0 03             	shl    eax,0x3
c001a45b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a45e:	e8 dd 53 ff ff       	call   c000f840 <malloc>
c001a463:	83 c4 0c             	add    esp,0xc
c001a466:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a469:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a46b:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a472:	52                   	push   edx
c001a473:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a476:	50                   	push   eax
c001a477:	e8 c8 62 fe ff       	call   c0000744 <memcpy>
c001a47c:	89 d8                	mov    eax,ebx
c001a47e:	83 c4 14             	add    esp,0x14
c001a481:	5b                   	pop    ebx
c001a482:	5e                   	pop    esi
c001a483:	c3                   	ret    

c001a484 <Krnl::loadSystemEnv()>:
c001a484:	53                   	push   ebx
c001a485:	83 ec 14             	sub    esp,0x14
c001a488:	6a 0c                	push   0xc
c001a48a:	e8 b1 53 ff ff       	call   c000f840 <malloc>
c001a48f:	89 c3                	mov    ebx,eax
c001a491:	58                   	pop    eax
c001a492:	5a                   	pop    edx
c001a493:	ff 35 14 1b 03 c0    	push   DWORD PTR ds:0xc0031b14
c001a499:	53                   	push   ebx
c001a49a:	e8 69 fe ff ff       	call   c001a308 <EnvVarContainer::EnvVarContainer(Process*)>
c001a49f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a4a2:	89 1d f8 10 03 c0    	mov    DWORD PTR ds:0xc00310f8,ebx
c001a4a8:	e8 3f fe ff ff       	call   c001a2ec <EnvVarContainer::__loadSystem()>
c001a4ad:	83 c4 18             	add    esp,0x18
c001a4b0:	5b                   	pop    ebx
c001a4b1:	c3                   	ret    

c001a4b2 <Krnl::loadUserEnv()>:
c001a4b2:	53                   	push   ebx
c001a4b3:	83 ec 14             	sub    esp,0x14
c001a4b6:	6a 0c                	push   0xc
c001a4b8:	e8 83 53 ff ff       	call   c000f840 <malloc>
c001a4bd:	89 c3                	mov    ebx,eax
c001a4bf:	58                   	pop    eax
c001a4c0:	5a                   	pop    edx
c001a4c1:	ff 35 14 1b 03 c0    	push   DWORD PTR ds:0xc0031b14
c001a4c7:	53                   	push   ebx
c001a4c8:	e8 3b fe ff ff       	call   c001a308 <EnvVarContainer::EnvVarContainer(Process*)>
c001a4cd:	89 1d f4 10 03 c0    	mov    DWORD PTR ds:0xc00310f4,ebx
c001a4d3:	83 c4 18             	add    esp,0x18
c001a4d6:	5b                   	pop    ebx
c001a4d7:	c3                   	ret    

c001a4d8 <Krnl::flushEnv()>:
c001a4d8:	c3                   	ret    

c001a4d9 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a4d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a4dd:	8b 15 f4 10 03 c0    	mov    edx,DWORD PTR ds:0xc00310f4
c001a4e3:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a4e9:	a1 f8 10 03 c0       	mov    eax,ds:0xc00310f8
c001a4ee:	8b 00                	mov    eax,DWORD PTR [eax]
c001a4f0:	03 01                	add    eax,DWORD PTR [ecx]
c001a4f2:	85 d2                	test   edx,edx
c001a4f4:	74 02                	je     c001a4f8 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a4f6:	03 02                	add    eax,DWORD PTR [edx]
c001a4f8:	c3                   	ret    

c001a4f9 <Krnl::getProcessEnvPair(Process*, int)>:
c001a4f9:	57                   	push   edi
c001a4fa:	8b 0d f4 10 03 c0    	mov    ecx,DWORD PTR ds:0xc00310f4
c001a500:	56                   	push   esi
c001a501:	85 c9                	test   ecx,ecx
c001a503:	53                   	push   ebx
c001a504:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a508:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a50c:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a512:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a516:	8b 02                	mov    eax,DWORD PTR [edx]
c001a518:	75 47                	jne    c001a561 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a51a:	39 c3                	cmp    ebx,eax
c001a51c:	7c 47                	jl     c001a565 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a51e:	8b 15 f8 10 03 c0    	mov    edx,DWORD PTR ds:0xc00310f8
c001a524:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a526:	01 c1                	add    ecx,eax
c001a528:	39 d9                	cmp    ecx,ebx
c001a52a:	7e 6c                	jle    c001a598 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a52c:	51                   	push   ecx
c001a52d:	89 d9                	mov    ecx,ebx
c001a52f:	29 c1                	sub    ecx,eax
c001a531:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a534:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a538:	53                   	push   ebx
c001a539:	68 8c bb 02 c0       	push   0xc002bb8c
c001a53e:	e8 d9 89 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001a543:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a549:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a54b:	a1 f8 10 03 c0       	mov    eax,ds:0xc00310f8
c001a550:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a553:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a557:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a55a:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a55d:	89 06                	mov    DWORD PTR [esi],eax
c001a55f:	eb 51                	jmp    c001a5b2 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a561:	39 c3                	cmp    ebx,eax
c001a563:	7d 05                	jge    c001a56a <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a565:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a568:	eb 20                	jmp    c001a58a <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a56a:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a56c:	8d 14 07             	lea    edx,[edi+eax*1]
c001a56f:	39 da                	cmp    edx,ebx
c001a571:	7e 04                	jle    c001a577 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a573:	29 c3                	sub    ebx,eax
c001a575:	eb 10                	jmp    c001a587 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a577:	8b 0d f8 10 03 c0    	mov    ecx,DWORD PTR ds:0xc00310f8
c001a57d:	03 11                	add    edx,DWORD PTR [ecx]
c001a57f:	39 da                	cmp    edx,ebx
c001a581:	7e 15                	jle    c001a598 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a583:	29 c3                	sub    ebx,eax
c001a585:	29 fb                	sub    ebx,edi
c001a587:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a58a:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a58e:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a591:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a594:	89 06                	mov    DWORD PTR [esi],eax
c001a596:	eb 1d                	jmp    c001a5b5 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a598:	83 ec 0c             	sub    esp,0xc
c001a59b:	68 a0 bb 02 c0       	push   0xc002bba0
c001a5a0:	e8 18 00 00 00       	call   c001a5bd <Krnl::panic(char const*)>
c001a5a5:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a5ab:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a5b2:	83 c4 10             	add    esp,0x10
c001a5b5:	89 f0                	mov    eax,esi
c001a5b7:	5b                   	pop    ebx
c001a5b8:	5e                   	pop    esi
c001a5b9:	5f                   	pop    edi
c001a5ba:	c2 04 00             	ret    0x4

c001a5bd <Krnl::panic(char const*)>:
c001a5bd:	55                   	push   ebp
c001a5be:	89 e5                	mov    ebp,esp
c001a5c0:	53                   	push   ebx
c001a5c1:	83 ec 0c             	sub    esp,0xc
c001a5c4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a5c7:	fa                   	cli    
c001a5c8:	c6 05 04 11 03 c0 01 	mov    BYTE PTR ds:0xc0031104,0x1
c001a5cf:	53                   	push   ebx
c001a5d0:	c6 05 e4 d4 02 c0 00 	mov    BYTE PTR ds:0xc002d4e4,0x0
c001a5d7:	68 ba bb 02 c0       	push   0xc002bbba
c001a5dc:	e8 3b 89 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001a5e1:	58                   	pop    eax
c001a5e2:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a5e7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5ed:	e8 4b 67 ff ff       	call   c0010d3d <setActiveTerminal(VgaText*)>
c001a5f2:	83 c4 0c             	add    esp,0xc
c001a5f5:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a5fa:	6a 01                	push   0x1
c001a5fc:	6a 0f                	push   0xf
c001a5fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a604:	e8 65 61 ff ff       	call   c001076e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a609:	58                   	pop    eax
c001a60a:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a60f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a615:	e8 c4 69 ff ff       	call   c0010fde <VgaText::clearScreen()>
c001a61a:	58                   	pop    eax
c001a61b:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a620:	5a                   	pop    edx
c001a621:	68 d3 bb 02 c0       	push   0xc002bbd3
c001a626:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a62c:	e8 2b 6b ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a631:	59                   	pop    ecx
c001a632:	58                   	pop    eax
c001a633:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a638:	68 78 bc 02 c0       	push   0xc002bc78
c001a63d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a643:	e8 14 6b ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a648:	58                   	pop    eax
c001a649:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a64e:	5a                   	pop    edx
c001a64f:	68 ef bb 02 c0       	push   0xc002bbef
c001a654:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a65a:	e8 fd 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a65f:	59                   	pop    ecx
c001a660:	58                   	pop    eax
c001a661:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a666:	53                   	push   ebx
c001a667:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a66d:	e8 ea 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a672:	58                   	pop    eax
c001a673:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a678:	5a                   	pop    edx
c001a679:	68 0f bc 02 c0       	push   0xc002bc0f
c001a67e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a684:	e8 d3 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a689:	a1 00 11 03 c0       	mov    eax,ds:0xc0031100
c001a68e:	83 c4 10             	add    esp,0x10
c001a691:	85 c0                	test   eax,eax
c001a693:	74 02                	je     c001a697 <Krnl::panic(char const*)+0xda>
c001a695:	ff d0                	call   eax
c001a697:	83 ec 0c             	sub    esp,0xc
c001a69a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a69d:	e8 47 30 00 00       	call   c001d6e9 <Thr::getDriverNameFromAddress(unsigned long)>
c001a6a2:	83 c4 10             	add    esp,0x10
c001a6a5:	89 c3                	mov    ebx,eax
c001a6a7:	85 c0                	test   eax,eax
c001a6a9:	0f 84 50 02 00 00    	je     c001a8ff <Krnl::panic(char const*)+0x342>
c001a6af:	83 ec 08             	sub    esp,0x8
c001a6b2:	8b 15 14 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b14
c001a6b8:	68 b4 bc 02 c0       	push   0xc002bcb4
c001a6bd:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a6c3:	e8 94 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a6c8:	58                   	pop    eax
c001a6c9:	5a                   	pop    edx
c001a6ca:	8b 15 14 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b14
c001a6d0:	68 ef bb 02 c0       	push   0xc002bbef
c001a6d5:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a6db:	e8 7c 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a6e0:	59                   	pop    ecx
c001a6e1:	58                   	pop    eax
c001a6e2:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a6e7:	53                   	push   ebx
c001a6e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6ee:	e8 69 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a6f3:	83 c4 10             	add    esp,0x10
c001a6f6:	83 ec 08             	sub    esp,0x8
c001a6f9:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a6fe:	68 0e bc 02 c0       	push   0xc002bc0e
c001a703:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a709:	e8 4e 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a70e:	58                   	pop    eax
c001a70f:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a714:	5a                   	pop    edx
c001a715:	68 0c bd 02 c0       	push   0xc002bd0c
c001a71a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a720:	e8 37 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a725:	59                   	pop    ecx
c001a726:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a72b:	5b                   	pop    ebx
c001a72c:	68 4c bd 02 c0       	push   0xc002bd4c
c001a731:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a737:	e8 20 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a73c:	58                   	pop    eax
c001a73d:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a742:	5a                   	pop    edx
c001a743:	68 fa bb 02 c0       	push   0xc002bbfa
c001a748:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a74e:	e8 09 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a753:	59                   	pop    ecx
c001a754:	5b                   	pop    ebx
c001a755:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a758:	68 12 bc 02 c0       	push   0xc002bc12
c001a75d:	e8 ba 87 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001a762:	58                   	pop    eax
c001a763:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a766:	5a                   	pop    edx
c001a767:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a76a:	68 1b bc 02 c0       	push   0xc002bc1b
c001a76f:	e8 a8 87 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001a774:	59                   	pop    ecx
c001a775:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a778:	5b                   	pop    ebx
c001a779:	8b 00                	mov    eax,DWORD PTR [eax]
c001a77b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a77e:	68 24 bc 02 c0       	push   0xc002bc24
c001a783:	e8 94 87 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001a788:	58                   	pop    eax
c001a789:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a78e:	5a                   	pop    edx
c001a78f:	68 90 bd 02 c0       	push   0xc002bd90
c001a794:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a79a:	e8 bd 69 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a79f:	59                   	pop    ecx
c001a7a0:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a7a5:	5b                   	pop    ebx
c001a7a6:	68 2d bc 02 c0       	push   0xc002bc2d
c001a7ab:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7b1:	e8 a6 69 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a7b6:	0f 20 c0             	mov    eax,cr0
c001a7b9:	5a                   	pop    edx
c001a7ba:	59                   	pop    ecx
c001a7bb:	50                   	push   eax
c001a7bc:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a7c1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7c7:	e8 b6 69 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001a7cc:	5b                   	pop    ebx
c001a7cd:	58                   	pop    eax
c001a7ce:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a7d3:	68 37 bc 02 c0       	push   0xc002bc37
c001a7d8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7de:	e8 79 69 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a7e3:	0f 20 d0             	mov    eax,cr2
c001a7e6:	5a                   	pop    edx
c001a7e7:	59                   	pop    ecx
c001a7e8:	50                   	push   eax
c001a7e9:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a7ee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7f4:	e8 89 69 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001a7f9:	5b                   	pop    ebx
c001a7fa:	58                   	pop    eax
c001a7fb:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a800:	68 41 bc 02 c0       	push   0xc002bc41
c001a805:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a80b:	e8 4c 69 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a810:	0f 20 d8             	mov    eax,cr3
c001a813:	5a                   	pop    edx
c001a814:	59                   	pop    ecx
c001a815:	50                   	push   eax
c001a816:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a81b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a821:	e8 5c 69 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001a826:	5b                   	pop    ebx
c001a827:	58                   	pop    eax
c001a828:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a82d:	68 54 bc 02 c0       	push   0xc002bc54
c001a832:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a838:	e8 1f 69 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a83d:	0f 20 e0             	mov    eax,cr4
c001a840:	5a                   	pop    edx
c001a841:	59                   	pop    ecx
c001a842:	50                   	push   eax
c001a843:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a848:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a84e:	e8 2f 69 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001a853:	5b                   	pop    ebx
c001a854:	58                   	pop    eax
c001a855:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a85a:	68 5e bc 02 c0       	push   0xc002bc5e
c001a85f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a865:	e8 f2 68 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a86a:	5a                   	pop    edx
c001a86b:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a870:	59                   	pop    ecx
c001a871:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a877:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a87a:	50                   	push   eax
c001a87b:	e8 02 69 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001a880:	5b                   	pop    ebx
c001a881:	58                   	pop    eax
c001a882:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a887:	68 75 bc 02 c0       	push   0xc002bc75
c001a88c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a892:	e8 c5 68 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a897:	5a                   	pop    edx
c001a898:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a89d:	59                   	pop    ecx
c001a89e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a8a4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a8a7:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a8aa:	50                   	push   eax
c001a8ab:	e8 d2 68 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001a8b0:	5b                   	pop    ebx
c001a8b1:	58                   	pop    eax
c001a8b2:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a8b7:	68 75 bc 02 c0       	push   0xc002bc75
c001a8bc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8c2:	e8 95 68 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a8c7:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a8cc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a8cf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a8d5:	8b 12                	mov    edx,DWORD PTR [edx]
c001a8d7:	59                   	pop    ecx
c001a8d8:	5b                   	pop    ebx
c001a8d9:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a8dc:	50                   	push   eax
c001a8dd:	e8 a0 68 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001a8e2:	83 c4 10             	add    esp,0x10
c001a8e5:	b2 fe                	mov    dl,0xfe
c001a8e7:	e4 60                	in     al,0x60
c001a8e9:	3c 1c                	cmp    al,0x1c
c001a8eb:	74 04                	je     c001a8f1 <Krnl::panic(char const*)+0x334>
c001a8ed:	3c 5a                	cmp    al,0x5a
c001a8ef:	75 f6                	jne    c001a8e7 <Krnl::panic(char const*)+0x32a>
c001a8f1:	e4 64                	in     al,0x64
c001a8f3:	a8 02                	test   al,0x2
c001a8f5:	75 fa                	jne    c001a8f1 <Krnl::panic(char const*)+0x334>
c001a8f7:	88 d0                	mov    al,dl
c001a8f9:	e6 64                	out    0x64,al
c001a8fb:	fa                   	cli    
c001a8fc:	f4                   	hlt    
c001a8fd:	eb e8                	jmp    c001a8e7 <Krnl::panic(char const*)+0x32a>
c001a8ff:	50                   	push   eax
c001a900:	50                   	push   eax
c001a901:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a906:	68 e0 bc 02 c0       	push   0xc002bce0
c001a90b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a911:	e8 46 68 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a916:	58                   	pop    eax
c001a917:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a91c:	5a                   	pop    edx
c001a91d:	68 ef bb 02 c0       	push   0xc002bbef
c001a922:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a928:	e8 2f 68 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a92d:	59                   	pop    ecx
c001a92e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a933:	5b                   	pop    ebx
c001a934:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a937:	83 c0 0c             	add    eax,0xc
c001a93a:	50                   	push   eax
c001a93b:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a940:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a946:	e8 11 68 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a94b:	83 c4 10             	add    esp,0x10
c001a94e:	e9 a3 fd ff ff       	jmp    c001a6f6 <Krnl::panic(char const*)+0x139>

c001a953 <Net::switchEndian16(unsigned short)>:
c001a953:	83 ec 04             	sub    esp,0x4
c001a956:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a95a:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a95e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a962:	c1 f8 08             	sar    eax,0x8
c001a965:	89 c2                	mov    edx,eax
c001a967:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a96b:	c1 e0 08             	shl    eax,0x8
c001a96e:	09 d0                	or     eax,edx
c001a970:	83 c4 04             	add    esp,0x4
c001a973:	c3                   	ret    

c001a974 <Net::switchEndian32(unsigned int)>:
c001a974:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a978:	c1 e8 18             	shr    eax,0x18
c001a97b:	89 c2                	mov    edx,eax
c001a97d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a981:	c1 e0 08             	shl    eax,0x8
c001a984:	25 00 00 ff 00       	and    eax,0xff0000
c001a989:	09 c2                	or     edx,eax
c001a98b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a98f:	c1 e8 08             	shr    eax,0x8
c001a992:	25 00 ff 00 00       	and    eax,0xff00
c001a997:	09 c2                	or     edx,eax
c001a999:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a99d:	c1 e0 18             	shl    eax,0x18
c001a9a0:	09 d0                	or     eax,edx
c001a9a2:	c3                   	ret    

c001a9a3 <Net::crc32Calc(unsigned char*, int)>:
c001a9a3:	83 ec 10             	sub    esp,0x10
c001a9a6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a9ab:	75 07                	jne    c001a9b4 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a9ad:	b8 00 00 00 00       	mov    eax,0x0
c001a9b2:	eb 7c                	jmp    c001aa30 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a9b4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a9b9:	7f 07                	jg     c001a9c2 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a9bb:	b8 00 00 00 00       	mov    eax,0x0
c001a9c0:	eb 6e                	jmp    c001aa30 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a9c2:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a9ca:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a9d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9d6:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a9da:	7d 4e                	jge    c001aa2a <Net::crc32Calc(unsigned char*, int)+0x87>
c001a9dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a9e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a9e4:	01 d0                	add    eax,edx
c001a9e6:	8a 00                	mov    al,BYTE PTR [eax]
c001a9e8:	0f b6 c0             	movzx  eax,al
c001a9eb:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a9ef:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a9f7:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a9fc:	7f 26                	jg     c001aa24 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a9fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa02:	83 e0 01             	and    eax,0x1
c001aa05:	74 0d                	je     c001aa14 <Net::crc32Calc(unsigned char*, int)+0x71>
c001aa07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa0b:	d1 e8                	shr    eax,1
c001aa0d:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001aa12:	eb 06                	jmp    c001aa1a <Net::crc32Calc(unsigned char*, int)+0x77>
c001aa14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa18:	d1 e8                	shr    eax,1
c001aa1a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aa1e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aa22:	eb d3                	jmp    c001a9f7 <Net::crc32Calc(unsigned char*, int)+0x54>
c001aa24:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001aa28:	eb a8                	jmp    c001a9d2 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001aa2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa2e:	f7 d0                	not    eax
c001aa30:	83 c4 10             	add    esp,0x10
c001aa33:	c3                   	ret    

c001aa34 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001aa34:	83 ec 1c             	sub    esp,0x1c
c001aa37:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aa3f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa47:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001aa4c:	7f 14                	jg     c001aa62 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001aa4e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa52:	8d 50 01             	lea    edx,[eax+0x1]
c001aa55:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa59:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001aa5c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aa60:	eb e5                	jmp    c001aa47 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001aa62:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa66:	8d 50 01             	lea    edx,[eax+0x1]
c001aa69:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa6d:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001aa70:	83 ec 04             	sub    esp,0x4
c001aa73:	6a 06                	push   0x6
c001aa75:	8d 44 24 36          	lea    eax,[esp+0x36]
c001aa79:	50                   	push   eax
c001aa7a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aa7e:	e8 c1 5c fe ff       	call   c0000744 <memcpy>
c001aa83:	83 c4 10             	add    esp,0x10
c001aa86:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aa8b:	83 ec 04             	sub    esp,0x4
c001aa8e:	6a 06                	push   0x6
c001aa90:	8d 44 24 30          	lea    eax,[esp+0x30]
c001aa94:	50                   	push   eax
c001aa95:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aa99:	e8 a6 5c fe ff       	call   c0000744 <memcpy>
c001aa9e:	83 c4 10             	add    esp,0x10
c001aaa1:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aaa6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aaaa:	0f b7 c0             	movzx  eax,ax
c001aaad:	c1 f8 08             	sar    eax,0x8
c001aab0:	89 c1                	mov    ecx,eax
c001aab2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aab6:	8d 50 01             	lea    edx,[eax+0x1]
c001aab9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aabd:	88 ca                	mov    dl,cl
c001aabf:	88 10                	mov    BYTE PTR [eax],dl
c001aac1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001aac5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aac9:	8d 48 01             	lea    ecx,[eax+0x1]
c001aacc:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001aad0:	88 10                	mov    BYTE PTR [eax],dl
c001aad2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aad6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aada:	83 ec 04             	sub    esp,0x4
c001aadd:	52                   	push   edx
c001aade:	50                   	push   eax
c001aadf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aae3:	e8 5c 5c fe ff       	call   c0000744 <memcpy>
c001aae8:	83 c4 10             	add    esp,0x10
c001aaeb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aaef:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001aaf3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aaf7:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001aafb:	83 ec 08             	sub    esp,0x8
c001aafe:	50                   	push   eax
c001aaff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ab03:	e8 9b fe ff ff       	call   c001a9a3 <Net::crc32Calc(unsigned char*, int)>
c001ab08:	83 c4 10             	add    esp,0x10
c001ab0b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ab0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab13:	c1 e8 18             	shr    eax,0x18
c001ab16:	89 c1                	mov    ecx,eax
c001ab18:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab1c:	8d 50 01             	lea    edx,[eax+0x1]
c001ab1f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab23:	88 ca                	mov    dl,cl
c001ab25:	88 10                	mov    BYTE PTR [eax],dl
c001ab27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab2b:	c1 e8 10             	shr    eax,0x10
c001ab2e:	89 c1                	mov    ecx,eax
c001ab30:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab34:	8d 50 01             	lea    edx,[eax+0x1]
c001ab37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab3b:	88 ca                	mov    dl,cl
c001ab3d:	88 10                	mov    BYTE PTR [eax],dl
c001ab3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab43:	c1 e8 08             	shr    eax,0x8
c001ab46:	89 c1                	mov    ecx,eax
c001ab48:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab4c:	8d 50 01             	lea    edx,[eax+0x1]
c001ab4f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab53:	88 ca                	mov    dl,cl
c001ab55:	88 10                	mov    BYTE PTR [eax],dl
c001ab57:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab5b:	8d 50 01             	lea    edx,[eax+0x1]
c001ab5e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab62:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ab66:	88 10                	mov    BYTE PTR [eax],dl
c001ab68:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ab6c:	83 c4 1c             	add    esp,0x1c
c001ab6f:	c3                   	ret    

c001ab70 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001ab70:	83 ec 2c             	sub    esp,0x2c
c001ab73:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab77:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ab7b:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001ab80:	83 ec 04             	sub    esp,0x4
c001ab83:	6a 06                	push   0x6
c001ab85:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ab89:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ab8d:	83 c0 0e             	add    eax,0xe
c001ab90:	50                   	push   eax
c001ab91:	e8 ae 5b fe ff       	call   c0000744 <memcpy>
c001ab96:	83 c4 10             	add    esp,0x10
c001ab99:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ab9e:	83 ec 04             	sub    esp,0x4
c001aba1:	6a 06                	push   0x6
c001aba3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aba7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001abab:	83 c0 08             	add    eax,0x8
c001abae:	50                   	push   eax
c001abaf:	e8 90 5b fe ff       	call   c0000744 <memcpy>
c001abb4:	83 c4 10             	add    esp,0x10
c001abb7:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001abbc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abc0:	8d 50 01             	lea    edx,[eax+0x1]
c001abc3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001abc7:	8a 00                	mov    al,BYTE PTR [eax]
c001abc9:	0f b6 c0             	movzx  eax,al
c001abcc:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001abd1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abd5:	8d 50 01             	lea    edx,[eax+0x1]
c001abd8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001abdc:	8a 00                	mov    al,BYTE PTR [eax]
c001abde:	0f b6 c0             	movzx  eax,al
c001abe1:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001abe6:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001abeb:	c1 e0 08             	shl    eax,0x8
c001abee:	89 c2                	mov    edx,eax
c001abf0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001abf4:	09 d0                	or     eax,edx
c001abf6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001abfa:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001abfe:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001ac03:	75 3a                	jne    c001ac3f <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ac05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac09:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac0c:	66 3d dc 05          	cmp    ax,0x5dc
c001ac10:	77 10                	ja     c001ac22 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001ac12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac16:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac19:	0f b7 c0             	movzx  eax,ax
c001ac1c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ac20:	eb 1d                	jmp    c001ac3f <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ac22:	83 ec 0c             	sub    esp,0xc
c001ac25:	68 b8 bd 02 c0       	push   0xc002bdb8
c001ac2a:	e8 ed 82 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001ac2f:	83 c4 10             	add    esp,0x10
c001ac32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac36:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ac3a:	e9 c0 00 00 00       	jmp    c001acff <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001ac3f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ac43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac47:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac49:	83 ec 04             	sub    esp,0x4
c001ac4c:	52                   	push   edx
c001ac4d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac51:	50                   	push   eax
c001ac52:	e8 ed 5a fe ff       	call   c0000744 <memcpy>
c001ac57:	83 c4 10             	add    esp,0x10
c001ac5a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac5e:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001ac62:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac66:	8d 50 01             	lea    edx,[eax+0x1]
c001ac69:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac6d:	8a 00                	mov    al,BYTE PTR [eax]
c001ac6f:	0f b6 c0             	movzx  eax,al
c001ac72:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ac76:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac7a:	8d 50 01             	lea    edx,[eax+0x1]
c001ac7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac81:	8a 00                	mov    al,BYTE PTR [eax]
c001ac83:	0f b6 c0             	movzx  eax,al
c001ac86:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ac8a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac8e:	8d 50 01             	lea    edx,[eax+0x1]
c001ac91:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac95:	8a 00                	mov    al,BYTE PTR [eax]
c001ac97:	0f b6 c0             	movzx  eax,al
c001ac9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac9e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aca2:	8d 50 01             	lea    edx,[eax+0x1]
c001aca5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aca9:	8a 00                	mov    al,BYTE PTR [eax]
c001acab:	0f b6 c0             	movzx  eax,al
c001acae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001acb2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001acb6:	c1 e0 18             	shl    eax,0x18
c001acb9:	89 c2                	mov    edx,eax
c001acbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acbf:	c1 e0 10             	shl    eax,0x10
c001acc2:	09 c2                	or     edx,eax
c001acc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001acc8:	c1 e0 08             	shl    eax,0x8
c001accb:	09 d0                	or     eax,edx
c001accd:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001acd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001acd5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acd9:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001acdd:	83 e8 04             	sub    eax,0x4
c001ace0:	83 ec 08             	sub    esp,0x8
c001ace3:	50                   	push   eax
c001ace4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ace8:	e8 b6 fc ff ff       	call   c001a9a3 <Net::crc32Calc(unsigned char*, int)>
c001aced:	83 c4 10             	add    esp,0x10
c001acf0:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001acf4:	0f 94 c2             	sete   dl
c001acf7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001acfb:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001acfe:	90                   	nop
c001acff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad03:	83 c4 2c             	add    esp,0x2c
c001ad06:	c2 04 00             	ret    0x4

c001ad09 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ad09:	55                   	push   ebp
c001ad0a:	57                   	push   edi
c001ad0b:	56                   	push   esi
c001ad0c:	53                   	push   ebx
c001ad0d:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad13:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ad1a:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ad1c:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ad1f:	80 fb 40             	cmp    bl,0x40
c001ad22:	75 1b                	jne    c001ad3f <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ad24:	8a 16                	mov    dl,BYTE PTR [esi]
c001ad26:	84 d2                	test   dl,dl
c001ad28:	0f 84 f1 00 00 00    	je     c001ae1f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad2e:	8d 46 01             	lea    eax,[esi+0x1]
c001ad31:	80 fa 3a             	cmp    dl,0x3a
c001ad34:	74 04                	je     c001ad3a <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ad36:	89 c6                	mov    esi,eax
c001ad38:	eb ea                	jmp    c001ad24 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ad3a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ad3d:	89 c6                	mov    esi,eax
c001ad3f:	50                   	push   eax
c001ad40:	6a 40                	push   0x40
c001ad42:	6a 00                	push   0x0
c001ad44:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad48:	50                   	push   eax
c001ad49:	e8 2a 5a fe ff       	call   c0000778 <memset>
c001ad4e:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ad55:	31 c0                	xor    eax,eax
c001ad57:	83 c4 10             	add    esp,0x10
c001ad5a:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ad5c:	84 c9                	test   cl,cl
c001ad5e:	0f 84 bb 00 00 00    	je     c001ae1f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad64:	3d c7 00 00 00       	cmp    eax,0xc7
c001ad69:	0f 8f b0 00 00 00    	jg     c001ae1f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad6f:	80 f9 0a             	cmp    cl,0xa
c001ad72:	0f 85 98 00 00 00    	jne    c001ae10 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ad78:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ad7d:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ad81:	a8 df                	test   al,0xdf
c001ad83:	0f 94 c1             	sete   cl
c001ad86:	3c 23                	cmp    al,0x23
c001ad88:	0f 94 c2             	sete   dl
c001ad8b:	08 d1                	or     cl,dl
c001ad8d:	75 4a                	jne    c001add9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad8f:	8d 50 f7             	lea    edx,[eax-0x9]
c001ad92:	80 fa 01             	cmp    dl,0x1
c001ad95:	76 42                	jbe    c001add9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad97:	3c 5b                	cmp    al,0x5b
c001ad99:	75 42                	jne    c001addd <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ad9b:	80 fb 40             	cmp    bl,0x40
c001ad9e:	75 39                	jne    c001add9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ada0:	83 ec 0c             	sub    esp,0xc
c001ada3:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ada7:	52                   	push   edx
c001ada8:	e8 e7 59 fe ff       	call   c0000794 <strlen>
c001adad:	83 c4 10             	add    esp,0x10
c001adb0:	83 f8 3f             	cmp    eax,0x3f
c001adb3:	77 6a                	ja     c001ae1f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adb5:	50                   	push   eax
c001adb6:	50                   	push   eax
c001adb7:	8d 54 24 61          	lea    edx,[esp+0x61]
c001adbb:	52                   	push   edx
c001adbc:	8d 54 24 24          	lea    edx,[esp+0x24]
c001adc0:	52                   	push   edx
c001adc1:	e8 6e 5a fe ff       	call   c0000834 <strcpy>
c001adc6:	58                   	pop    eax
c001adc7:	8d 54 24 24          	lea    edx,[esp+0x24]
c001adcb:	52                   	push   edx
c001adcc:	e8 c3 59 fe ff       	call   c0000794 <strlen>
c001add1:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001add6:	83 c4 10             	add    esp,0x10
c001add9:	31 d2                	xor    edx,edx
c001addb:	eb 3a                	jmp    c001ae17 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001addd:	80 fb 40             	cmp    bl,0x40
c001ade0:	74 06                	je     c001ade8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ade2:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ade6:	eb 20                	jmp    c001ae08 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ade8:	50                   	push   eax
c001ade9:	50                   	push   eax
c001adea:	55                   	push   ebp
c001adeb:	8d 44 24 24          	lea    eax,[esp+0x24]
c001adef:	50                   	push   eax
c001adf0:	e8 cb 5a fe ff       	call   c00008c0 <strcmp>
c001adf5:	83 c4 10             	add    esp,0x10
c001adf8:	85 c0                	test   eax,eax
c001adfa:	75 dd                	jne    c001add9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adfc:	eb e4                	jmp    c001ade2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001adfe:	8d 50 01             	lea    edx,[eax+0x1]
c001ae01:	80 f9 3d             	cmp    cl,0x3d
c001ae04:	74 1d                	je     c001ae23 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001ae06:	89 d0                	mov    eax,edx
c001ae08:	8a 08                	mov    cl,BYTE PTR [eax]
c001ae0a:	84 c9                	test   cl,cl
c001ae0c:	75 f0                	jne    c001adfe <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001ae0e:	eb 0f                	jmp    c001ae1f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae10:	8d 50 01             	lea    edx,[eax+0x1]
c001ae13:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001ae17:	47                   	inc    edi
c001ae18:	89 d0                	mov    eax,edx
c001ae1a:	e9 3b ff ff ff       	jmp    c001ad5a <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001ae1f:	31 c0                	xor    eax,eax
c001ae21:	eb 33                	jmp    c001ae56 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001ae23:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ae27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ae2a:	50                   	push   eax
c001ae2b:	50                   	push   eax
c001ae2c:	8d 44 24 60          	lea    eax,[esp+0x60]
c001ae30:	50                   	push   eax
c001ae31:	56                   	push   esi
c001ae32:	e8 89 5a fe ff       	call   c00008c0 <strcmp>
c001ae37:	83 c4 10             	add    esp,0x10
c001ae3a:	85 c0                	test   eax,eax
c001ae3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ae40:	75 97                	jne    c001add9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae42:	51                   	push   ecx
c001ae43:	51                   	push   ecx
c001ae44:	52                   	push   edx
c001ae45:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ae4c:	e8 e3 59 fe ff       	call   c0000834 <strcpy>
c001ae51:	83 c4 10             	add    esp,0x10
c001ae54:	b0 01                	mov    al,0x1
c001ae56:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ae5c:	5b                   	pop    ebx
c001ae5d:	5e                   	pop    esi
c001ae5e:	5f                   	pop    edi
c001ae5f:	5d                   	pop    ebp
c001ae60:	c3                   	ret    

c001ae61 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001ae61:	57                   	push   edi
c001ae62:	56                   	push   esi
c001ae63:	53                   	push   ebx
c001ae64:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ae6a:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001ae71:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ae78:	53                   	push   ebx
c001ae79:	e8 16 59 fe ff       	call   c0000794 <strlen>
c001ae7e:	89 34 24             	mov    DWORD PTR [esp],esi
c001ae81:	89 c7                	mov    edi,eax
c001ae83:	e8 0c 59 fe ff       	call   c0000794 <strlen>
c001ae88:	83 c4 10             	add    esp,0x10
c001ae8b:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001ae8f:	3d ff 00 00 00       	cmp    eax,0xff
c001ae94:	0f 87 d3 00 00 00    	ja     c001af6d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ae9a:	57                   	push   edi
c001ae9b:	57                   	push   edi
c001ae9c:	56                   	push   esi
c001ae9d:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001aea1:	56                   	push   esi
c001aea2:	e8 8d 59 fe ff       	call   c0000834 <strcpy>
c001aea7:	58                   	pop    eax
c001aea8:	5a                   	pop    edx
c001aea9:	68 81 c3 02 c0       	push   0xc002c381
c001aeae:	56                   	push   esi
c001aeaf:	e8 c0 5a fe ff       	call   c0000974 <strcat>
c001aeb4:	59                   	pop    ecx
c001aeb5:	5f                   	pop    edi
c001aeb6:	53                   	push   ebx
c001aeb7:	56                   	push   esi
c001aeb8:	e8 b7 5a fe ff       	call   c0000974 <strcat>
c001aebd:	58                   	pop    eax
c001aebe:	5a                   	pop    edx
c001aebf:	68 04 be 02 c0       	push   0xc002be04
c001aec4:	56                   	push   esi
c001aec5:	e8 aa 5a fe ff       	call   c0000974 <strcat>
c001aeca:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001aed1:	e8 6a 49 ff ff       	call   c000f840 <malloc>
c001aed6:	83 c4 0c             	add    esp,0xc
c001aed9:	89 c3                	mov    ebx,eax
c001aedb:	ff 35 14 1b 03 c0    	push   DWORD PTR ds:0xc0031b14
c001aee1:	56                   	push   esi
c001aee2:	50                   	push   eax
c001aee3:	e8 8c 85 ff ff       	call   c0013474 <File::File(char const*, Process*)>
c001aee8:	83 c4 10             	add    esp,0x10
c001aeeb:	85 db                	test   ebx,ebx
c001aeed:	74 7e                	je     c001af6d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001aeef:	51                   	push   ecx
c001aef0:	51                   	push   ecx
c001aef1:	6a 01                	push   0x1
c001aef3:	53                   	push   ebx
c001aef4:	e8 df 85 ff ff       	call   c00134d8 <File::open(FileOpenMode)>
c001aef9:	83 c4 10             	add    esp,0x10
c001aefc:	85 c0                	test   eax,eax
c001aefe:	74 08                	je     c001af08 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001af00:	83 ec 0c             	sub    esp,0xc
c001af03:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af05:	53                   	push   ebx
c001af06:	eb 5f                	jmp    c001af67 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001af08:	52                   	push   edx
c001af09:	8d 44 24 17          	lea    eax,[esp+0x17]
c001af0d:	50                   	push   eax
c001af0e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001af12:	50                   	push   eax
c001af13:	53                   	push   ebx
c001af14:	e8 6b 88 ff ff       	call   c0013784 <File::stat(unsigned long long*, bool*)>
c001af19:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af1d:	83 c4 10             	add    esp,0x10
c001af20:	89 c1                	mov    ecx,eax
c001af22:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001af26:	74 31                	je     c001af59 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af28:	83 ec 0c             	sub    esp,0xc
c001af2b:	50                   	push   eax
c001af2c:	e8 0f 49 ff ff       	call   c000f840 <malloc>
c001af31:	89 c6                	mov    esi,eax
c001af33:	58                   	pop    eax
c001af34:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af36:	8d 54 24 20          	lea    edx,[esp+0x20]
c001af3a:	52                   	push   edx
c001af3b:	56                   	push   esi
c001af3c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af40:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af44:	53                   	push   ebx
c001af45:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001af48:	83 c4 20             	add    esp,0x20
c001af4b:	85 c0                	test   eax,eax
c001af4d:	75 0a                	jne    c001af59 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af4f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af53:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001af57:	74 18                	je     c001af71 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001af59:	83 ec 0c             	sub    esp,0xc
c001af5c:	53                   	push   ebx
c001af5d:	e8 d4 85 ff ff       	call   c0013536 <File::close()>
c001af62:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af67:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af6a:	83 c4 10             	add    esp,0x10
c001af6d:	31 c0                	xor    eax,eax
c001af6f:	eb 3b                	jmp    c001afac <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001af71:	83 ec 0c             	sub    esp,0xc
c001af74:	53                   	push   ebx
c001af75:	e8 bc 85 ff ff       	call   c0013536 <File::close()>
c001af7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af7c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af7f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af82:	83 c4 0c             	add    esp,0xc
c001af85:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001af8c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001af93:	56                   	push   esi
c001af94:	e8 70 fd ff ff       	call   c001ad09 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001af99:	89 34 24             	mov    DWORD PTR [esp],esi
c001af9c:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001afa0:	e8 ab 48 ff ff       	call   c000f850 <free>
c001afa5:	83 c4 10             	add    esp,0x10
c001afa8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001afac:	81 c4 20 01 00 00    	add    esp,0x120
c001afb2:	5b                   	pop    ebx
c001afb3:	5e                   	pop    esi
c001afb4:	5f                   	pop    edi
c001afb5:	c3                   	ret    

c001afb6 <Reg::getLine(char*, char*, char*)>:
c001afb6:	57                   	push   edi
c001afb7:	56                   	push   esi
c001afb8:	53                   	push   ebx
c001afb9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001afbd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001afc1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001afc5:	57                   	push   edi
c001afc6:	56                   	push   esi
c001afc7:	53                   	push   ebx
c001afc8:	68 09 be 02 c0       	push   0xc002be09
c001afcd:	e8 8f fe ff ff       	call   c001ae61 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001afd2:	83 c4 10             	add    esp,0x10
c001afd5:	84 c0                	test   al,al
c001afd7:	75 10                	jne    c001afe9 <Reg::getLine(char*, char*, char*)+0x33>
c001afd9:	57                   	push   edi
c001afda:	56                   	push   esi
c001afdb:	53                   	push   ebx
c001afdc:	68 2e be 02 c0       	push   0xc002be2e
c001afe1:	e8 7b fe ff ff       	call   c001ae61 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001afe6:	83 c4 10             	add    esp,0x10
c001afe9:	5b                   	pop    ebx
c001afea:	5e                   	pop    esi
c001afeb:	5f                   	pop    edi
c001afec:	c3                   	ret    

c001afed <Reg::readInt(char*, char*, int*)>:
c001afed:	55                   	push   ebp
c001afee:	57                   	push   edi
c001afef:	56                   	push   esi
c001aff0:	53                   	push   ebx
c001aff1:	81 ec f0 00 00 00    	sub    esp,0xf0
c001aff7:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001affb:	57                   	push   edi
c001affc:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b003:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b00a:	e8 a7 ff ff ff       	call   c001afb6 <Reg::getLine(char*, char*, char*)>
c001b00f:	83 c4 10             	add    esp,0x10
c001b012:	84 c0                	test   al,al
c001b014:	0f 84 b3 00 00 00    	je     c001b0cd <Reg::readInt(char*, char*, int*)+0xe0>
c001b01a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b01e:	80 fa 2b             	cmp    dl,0x2b
c001b021:	74 0c                	je     c001b02f <Reg::readInt(char*, char*, int*)+0x42>
c001b023:	80 fa 2d             	cmp    dl,0x2d
c001b026:	75 0e                	jne    c001b036 <Reg::readInt(char*, char*, int*)+0x49>
c001b028:	ba 01 00 00 00       	mov    edx,0x1
c001b02d:	eb 0b                	jmp    c001b03a <Reg::readInt(char*, char*, int*)+0x4d>
c001b02f:	ba 01 00 00 00       	mov    edx,0x1
c001b034:	eb 02                	jmp    c001b038 <Reg::readInt(char*, char*, int*)+0x4b>
c001b036:	31 d2                	xor    edx,edx
c001b038:	31 c0                	xor    eax,eax
c001b03a:	be 0a 00 00 00       	mov    esi,0xa
c001b03f:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b044:	75 20                	jne    c001b066 <Reg::readInt(char*, char*, int*)+0x79>
c001b046:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b04a:	80 f9 78             	cmp    cl,0x78
c001b04d:	75 0a                	jne    c001b059 <Reg::readInt(char*, char*, int*)+0x6c>
c001b04f:	83 c2 02             	add    edx,0x2
c001b052:	be 10 00 00 00       	mov    esi,0x10
c001b057:	eb 0d                	jmp    c001b066 <Reg::readInt(char*, char*, int*)+0x79>
c001b059:	80 f9 62             	cmp    cl,0x62
c001b05c:	75 08                	jne    c001b066 <Reg::readInt(char*, char*, int*)+0x79>
c001b05e:	83 c2 02             	add    edx,0x2
c001b061:	be 02 00 00 00       	mov    esi,0x2
c001b066:	01 d7                	add    edi,edx
c001b068:	31 d2                	xor    edx,edx
c001b06a:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b06c:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b070:	80 fb 0d             	cmp    bl,0xd
c001b073:	0f 94 c3             	sete   bl
c001b076:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b07b:	0f 94 c1             	sete   cl
c001b07e:	08 cb                	or     bl,cl
c001b080:	75 3a                	jne    c001b0bc <Reg::readInt(char*, char*, int*)+0xcf>
c001b082:	0f af d6             	imul   edx,esi
c001b085:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b08a:	83 fe 10             	cmp    esi,0x10
c001b08d:	75 26                	jne    c001b0b5 <Reg::readInt(char*, char*, int*)+0xc8>
c001b08f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b093:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b096:	89 e9                	mov    ecx,ebp
c001b098:	80 f9 05             	cmp    cl,0x5
c001b09b:	77 06                	ja     c001b0a3 <Reg::readInt(char*, char*, int*)+0xb6>
c001b09d:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b0a1:	eb 16                	jmp    c001b0b9 <Reg::readInt(char*, char*, int*)+0xcc>
c001b0a3:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b0a7:	83 e9 61             	sub    ecx,0x61
c001b0aa:	80 f9 05             	cmp    cl,0x5
c001b0ad:	77 06                	ja     c001b0b5 <Reg::readInt(char*, char*, int*)+0xc8>
c001b0af:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b0b3:	eb 04                	jmp    c001b0b9 <Reg::readInt(char*, char*, int*)+0xcc>
c001b0b5:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b0b9:	47                   	inc    edi
c001b0ba:	eb ae                	jmp    c001b06a <Reg::readInt(char*, char*, int*)+0x7d>
c001b0bc:	84 c0                	test   al,al
c001b0be:	74 02                	je     c001b0c2 <Reg::readInt(char*, char*, int*)+0xd5>
c001b0c0:	f7 da                	neg    edx
c001b0c2:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b0c9:	89 10                	mov    DWORD PTR [eax],edx
c001b0cb:	88 d8                	mov    al,bl
c001b0cd:	81 c4 ec 00 00 00    	add    esp,0xec
c001b0d3:	5b                   	pop    ebx
c001b0d4:	5e                   	pop    esi
c001b0d5:	5f                   	pop    edi
c001b0d6:	5d                   	pop    ebp
c001b0d7:	c3                   	ret    

c001b0d8 <Reg::readString(char*, char*, char*, int)>:
c001b0d8:	57                   	push   edi
c001b0d9:	56                   	push   esi
c001b0da:	53                   	push   ebx
c001b0db:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b0e1:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b0e8:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b0ec:	57                   	push   edi
c001b0ed:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b0f4:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b0fb:	e8 b6 fe ff ff       	call   c001afb6 <Reg::getLine(char*, char*, char*)>
c001b100:	83 c4 10             	add    esp,0x10
c001b103:	89 c6                	mov    esi,eax
c001b105:	84 c0                	test   al,al
c001b107:	74 44                	je     c001b14d <Reg::readString(char*, char*, char*, int)+0x75>
c001b109:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b110:	31 c0                	xor    eax,eax
c001b112:	4a                   	dec    edx
c001b113:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b116:	84 c9                	test   cl,cl
c001b118:	74 0f                	je     c001b129 <Reg::readString(char*, char*, char*, int)+0x51>
c001b11a:	39 c2                	cmp    edx,eax
c001b11c:	7e 0b                	jle    c001b129 <Reg::readString(char*, char*, char*, int)+0x51>
c001b11e:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b121:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b126:	40                   	inc    eax
c001b127:	eb ea                	jmp    c001b113 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b129:	83 ec 0c             	sub    esp,0xc
c001b12c:	53                   	push   ebx
c001b12d:	e8 62 56 fe ff       	call   c0000794 <strlen>
c001b132:	83 c4 10             	add    esp,0x10
c001b135:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b13a:	75 11                	jne    c001b14d <Reg::readString(char*, char*, char*, int)+0x75>
c001b13c:	83 ec 0c             	sub    esp,0xc
c001b13f:	53                   	push   ebx
c001b140:	e8 4f 56 fe ff       	call   c0000794 <strlen>
c001b145:	83 c4 10             	add    esp,0x10
c001b148:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b14d:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b153:	89 f0                	mov    eax,esi
c001b155:	5b                   	pop    ebx
c001b156:	5e                   	pop    esi
c001b157:	5f                   	pop    edi
c001b158:	c3                   	ret    

c001b159 <Reg::readBool(char*, char*, bool*)>:
c001b159:	83 ec 20             	sub    esp,0x20
c001b15c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b160:	50                   	push   eax
c001b161:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b165:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b169:	e8 7f fe ff ff       	call   c001afed <Reg::readInt(char*, char*, int*)>
c001b16e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b173:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b177:	0f 95 02             	setne  BYTE PTR [edx]
c001b17a:	83 c4 2c             	add    esp,0x2c
c001b17d:	c3                   	ret    

c001b17e <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b17e:	53                   	push   ebx
c001b17f:	83 ec 1c             	sub    esp,0x1c
c001b182:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b186:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b18a:	50                   	push   eax
c001b18b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b18f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b193:	e8 c1 ff ff ff       	call   c001b159 <Reg::readBool(char*, char*, bool*)>
c001b198:	83 c4 10             	add    esp,0x10
c001b19b:	84 c0                	test   al,al
c001b19d:	74 04                	je     c001b1a3 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b19f:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b1a3:	88 d8                	mov    al,bl
c001b1a5:	83 c4 18             	add    esp,0x18
c001b1a8:	5b                   	pop    ebx
c001b1a9:	c3                   	ret    

c001b1aa <Reg::readIntWithDefault(char*, char*, int)>:
c001b1aa:	53                   	push   ebx
c001b1ab:	83 ec 1c             	sub    esp,0x1c
c001b1ae:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b1b2:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b1b6:	50                   	push   eax
c001b1b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1bf:	e8 29 fe ff ff       	call   c001afed <Reg::readInt(char*, char*, int*)>
c001b1c4:	83 c4 10             	add    esp,0x10
c001b1c7:	84 c0                	test   al,al
c001b1c9:	74 04                	je     c001b1cf <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b1cb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b1cf:	89 d8                	mov    eax,ebx
c001b1d1:	83 c4 18             	add    esp,0x18
c001b1d4:	5b                   	pop    ebx
c001b1d5:	c3                   	ret    

c001b1d6 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b1d6:	57                   	push   edi
c001b1d7:	56                   	push   esi
c001b1d8:	53                   	push   ebx
c001b1d9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b1dd:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b1e1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b1e5:	56                   	push   esi
c001b1e6:	53                   	push   ebx
c001b1e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b1eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b1ef:	e8 e4 fe ff ff       	call   c001b0d8 <Reg::readString(char*, char*, char*, int)>
c001b1f4:	83 c4 10             	add    esp,0x10
c001b1f7:	84 c0                	test   al,al
c001b1f9:	75 1b                	jne    c001b216 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b1fb:	50                   	push   eax
c001b1fc:	56                   	push   esi
c001b1fd:	4e                   	dec    esi
c001b1fe:	6a 00                	push   0x0
c001b200:	53                   	push   ebx
c001b201:	e8 72 55 fe ff       	call   c0000778 <memset>
c001b206:	83 c4 0c             	add    esp,0xc
c001b209:	56                   	push   esi
c001b20a:	57                   	push   edi
c001b20b:	53                   	push   ebx
c001b20c:	89 fb                	mov    ebx,edi
c001b20e:	e8 31 55 fe ff       	call   c0000744 <memcpy>
c001b213:	83 c4 10             	add    esp,0x10
c001b216:	89 d8                	mov    eax,ebx
c001b218:	5b                   	pop    ebx
c001b219:	5e                   	pop    esi
c001b21a:	5f                   	pop    edi
c001b21b:	c3                   	ret    

c001b21c <Sys::eject(regs*)>:
c001b21c:	83 ec 0c             	sub    esp,0xc
c001b21f:	83 ca ff             	or     edx,0xffffffff
c001b222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b226:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b229:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b22e:	83 e9 41             	sub    ecx,0x41
c001b231:	83 f9 19             	cmp    ecx,0x19
c001b234:	77 18                	ja     c001b24e <Sys::eject(regs*)+0x32>
c001b236:	8b 0c 8d c0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1440]
c001b23d:	85 c9                	test   ecx,ecx
c001b23f:	74 0d                	je     c001b24e <Sys::eject(regs*)+0x32>
c001b241:	83 ec 0c             	sub    esp,0xc
c001b244:	51                   	push   ecx
c001b245:	e8 78 b4 ff ff       	call   c00166c2 <LogicalDisk::eject()>
c001b24a:	83 c4 10             	add    esp,0x10
c001b24d:	99                   	cdq    
c001b24e:	83 c4 0c             	add    esp,0xc
c001b251:	c3                   	ret    

c001b252 <Sys::exit(regs*)>:
c001b252:	83 ec 18             	sub    esp,0x18
c001b255:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b259:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b25c:	e8 c4 35 00 00       	call   c001e825 <terminateTask(int)>
c001b261:	83 c8 ff             	or     eax,0xffffffff
c001b264:	83 c4 1c             	add    esp,0x1c
c001b267:	89 c2                	mov    edx,eax
c001b269:	c3                   	ret    

c001b26a <Sys::getCwd(regs*)>:
c001b26a:	83 ec 10             	sub    esp,0x10
c001b26d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b271:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b274:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b277:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b27c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b27f:	e8 f2 7f ff ff       	call   c0013276 <Fs::getcwd(Process*, char*, int)>
c001b284:	83 c4 1c             	add    esp,0x1c
c001b287:	99                   	cdq    
c001b288:	c3                   	ret    

c001b289 <Sys::getPID(regs*)>:
c001b289:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b28e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b291:	8b 00                	mov    eax,DWORD PTR [eax]
c001b293:	99                   	cdq    
c001b294:	c3                   	ret    

c001b295 <Sys::getRAMData(regs*)>:
c001b295:	8b 0d f4 e5 02 c0    	mov    ecx,DWORD PTR ds:0xc002e5f4
c001b29b:	6b 05 f0 e5 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e5f0,0x64
c001b2a2:	99                   	cdq    
c001b2a3:	f7 f9                	idiv   ecx
c001b2a5:	c1 e0 18             	shl    eax,0x18
c001b2a8:	09 c8                	or     eax,ecx
c001b2aa:	99                   	cdq    
c001b2ab:	c3                   	ret    

c001b2ac <Sys::loadDLL(regs*)>:
c001b2ac:	56                   	push   esi
c001b2ad:	53                   	push   ebx
c001b2ae:	31 d2                	xor    edx,edx
c001b2b0:	51                   	push   ecx
c001b2b1:	b8 01 00 00 00       	mov    eax,0x1
c001b2b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b2ba:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b2be:	0f 84 8c 00 00 00    	je     c001b350 <Sys::loadDLL(regs*)+0xa4>
c001b2c4:	83 ec 0c             	sub    esp,0xc
c001b2c7:	68 14 01 00 00       	push   0x114
c001b2cc:	e8 6f 45 ff ff       	call   c000f840 <malloc>
c001b2d1:	83 c4 0c             	add    esp,0xc
c001b2d4:	89 c3                	mov    ebx,eax
c001b2d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2db:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b2de:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b2e1:	53                   	push   ebx
c001b2e2:	e8 8d 81 ff ff       	call   c0013474 <File::File(char const*, Process*)>
c001b2e7:	83 c4 10             	add    esp,0x10
c001b2ea:	31 d2                	xor    edx,edx
c001b2ec:	b8 02 00 00 00       	mov    eax,0x2
c001b2f1:	85 db                	test   ebx,ebx
c001b2f3:	74 5b                	je     c001b350 <Sys::loadDLL(regs*)+0xa4>
c001b2f5:	83 ec 0c             	sub    esp,0xc
c001b2f8:	53                   	push   ebx
c001b2f9:	e8 48 84 ff ff       	call   c0013746 <File::exists()>
c001b2fe:	83 c4 10             	add    esp,0x10
c001b301:	84 c0                	test   al,al
c001b303:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b305:	75 11                	jne    c001b318 <Sys::loadDLL(regs*)+0x6c>
c001b307:	83 ec 0c             	sub    esp,0xc
c001b30a:	53                   	push   ebx
c001b30b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b30e:	83 c4 10             	add    esp,0x10
c001b311:	b8 03 00 00 00       	mov    eax,0x3
c001b316:	eb 36                	jmp    c001b34e <Sys::loadDLL(regs*)+0xa2>
c001b318:	83 ec 0c             	sub    esp,0xc
c001b31b:	53                   	push   ebx
c001b31c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b31f:	58                   	pop    eax
c001b320:	5a                   	pop    edx
c001b321:	6a 00                	push   0x0
c001b323:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b326:	e8 0f 24 00 00       	call   c001d73a <Thr::loadDLL(char const*, bool)>
c001b32b:	83 c4 10             	add    esp,0x10
c001b32e:	89 c1                	mov    ecx,eax
c001b330:	31 d2                	xor    edx,edx
c001b332:	b8 04 00 00 00       	mov    eax,0x4
c001b337:	85 c9                	test   ecx,ecx
c001b339:	74 15                	je     c001b350 <Sys::loadDLL(regs*)+0xa4>
c001b33b:	53                   	push   ebx
c001b33c:	53                   	push   ebx
c001b33d:	ff 35 a8 e5 02 c0    	push   DWORD PTR ds:0xc002e5a8
c001b343:	51                   	push   ecx
c001b344:	e8 25 26 00 00       	call   c001d96e <Thr::executeDLL(unsigned long, void*)>
c001b349:	83 c4 10             	add    esp,0x10
c001b34c:	31 c0                	xor    eax,eax
c001b34e:	31 d2                	xor    edx,edx
c001b350:	59                   	pop    ecx
c001b351:	5b                   	pop    ebx
c001b352:	5e                   	pop    esi
c001b353:	c3                   	ret    

c001b354 <Sys::read(regs*)>:
c001b354:	57                   	push   edi
c001b355:	56                   	push   esi
c001b356:	53                   	push   ebx
c001b357:	83 ec 10             	sub    esp,0x10
c001b35a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b35e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b361:	83 f8 02             	cmp    eax,0x2
c001b364:	77 10                	ja     c001b376 <Sys::read(regs*)+0x22>
c001b366:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b36b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b36e:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b374:	eb 0e                	jmp    c001b384 <Sys::read(regs*)+0x30>
c001b376:	83 ec 0c             	sub    esp,0xc
c001b379:	50                   	push   eax
c001b37a:	e8 b6 66 ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001b37f:	83 c4 10             	add    esp,0x10
c001b382:	89 c1                	mov    ecx,eax
c001b384:	83 c8 ff             	or     eax,0xffffffff
c001b387:	85 c9                	test   ecx,ecx
c001b389:	89 c2                	mov    edx,eax
c001b38b:	74 28                	je     c001b3b5 <Sys::read(regs*)+0x61>
c001b38d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b395:	31 ff                	xor    edi,edi
c001b397:	83 ec 0c             	sub    esp,0xc
c001b39a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b39c:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b3a0:	52                   	push   edx
c001b3a1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b3a4:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b3a7:	57                   	push   edi
c001b3a8:	56                   	push   esi
c001b3a9:	51                   	push   ecx
c001b3aa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b3ad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b3b1:	83 c4 20             	add    esp,0x20
c001b3b4:	99                   	cdq    
c001b3b5:	83 c4 10             	add    esp,0x10
c001b3b8:	5b                   	pop    ebx
c001b3b9:	5e                   	pop    esi
c001b3ba:	5f                   	pop    edi
c001b3bb:	c3                   	ret    

c001b3bc <Sys::sbrk(regs*)>:
c001b3bc:	56                   	push   esi
c001b3bd:	53                   	push   ebx
c001b3be:	83 ec 0c             	sub    esp,0xc
c001b3c1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b3c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3ca:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3cd:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001b3d3:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c001b3d6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b3d9:	68 49 be 02 c0       	push   0xc002be49
c001b3de:	e8 39 7b ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001b3e3:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b3e6:	83 c4 10             	add    esp,0x10
c001b3e9:	85 c0                	test   eax,eax
c001b3eb:	75 0a                	jne    c001b3f7 <Sys::sbrk(regs*)+0x3b>
c001b3ed:	50                   	push   eax
c001b3ee:	50                   	push   eax
c001b3ef:	53                   	push   ebx
c001b3f0:	68 65 be 02 c0       	push   0xc002be65
c001b3f5:	eb 54                	jmp    c001b44b <Sys::sbrk(regs*)+0x8f>
c001b3f7:	79 0a                	jns    c001b403 <Sys::sbrk(regs*)+0x47>
c001b3f9:	56                   	push   esi
c001b3fa:	56                   	push   esi
c001b3fb:	53                   	push   ebx
c001b3fc:	68 78 be 02 c0       	push   0xc002be78
c001b401:	eb 48                	jmp    c001b44b <Sys::sbrk(regs*)+0x8f>
c001b403:	3d 00 00 00 04       	cmp    eax,0x4000000
c001b408:	76 17                	jbe    c001b421 <Sys::sbrk(regs*)+0x65>
c001b40a:	51                   	push   ecx
c001b40b:	51                   	push   ecx
c001b40c:	53                   	push   ebx
c001b40d:	68 8a be 02 c0       	push   0xc002be8a
c001b412:	e8 05 7b ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001b417:	83 c8 ff             	or     eax,0xffffffff
c001b41a:	83 c4 10             	add    esp,0x10
c001b41d:	89 c2                	mov    edx,eax
c001b41f:	eb 36                	jmp    c001b457 <Sys::sbrk(regs*)+0x9b>
c001b421:	05 ff 0f 00 00       	add    eax,0xfff
c001b426:	56                   	push   esi
c001b427:	c1 e8 0c             	shr    eax,0xc
c001b42a:	68 07 04 00 00       	push   0x407
c001b42f:	50                   	push   eax
c001b430:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b435:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b438:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b43e:	e8 1f 70 ff ff       	call   c0012462 <VAS::allocatePages(int, int)>
c001b443:	58                   	pop    eax
c001b444:	5a                   	pop    edx
c001b445:	53                   	push   ebx
c001b446:	68 a3 be 02 c0       	push   0xc002bea3
c001b44b:	e8 cc 7a ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001b450:	89 d8                	mov    eax,ebx
c001b452:	31 d2                	xor    edx,edx
c001b454:	83 c4 10             	add    esp,0x10
c001b457:	59                   	pop    ecx
c001b458:	5b                   	pop    ebx
c001b459:	5e                   	pop    esi
c001b45a:	c3                   	ret    

c001b45b <Sys::setCwd(regs*)>:
c001b45b:	83 ec 14             	sub    esp,0x14
c001b45e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b462:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b465:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b46a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b46d:	e8 73 83 ff ff       	call   c00137e5 <Fs::setcwd(Process*, char*)>
c001b472:	83 c4 1c             	add    esp,0x1c
c001b475:	99                   	cdq    
c001b476:	c3                   	ret    

c001b477 <Sys::setTime(regs*)>:
c001b477:	55                   	push   ebp
c001b478:	31 d2                	xor    edx,edx
c001b47a:	57                   	push   edi
c001b47b:	bf 18 00 00 00       	mov    edi,0x18
c001b480:	56                   	push   esi
c001b481:	53                   	push   ebx
c001b482:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b487:	83 ec 30             	sub    esp,0x30
c001b48a:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b48e:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b491:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b494:	f7 f3                	div    ebx
c001b496:	89 d6                	mov    esi,edx
c001b498:	31 d2                	xor    edx,edx
c001b49a:	f7 f3                	div    ebx
c001b49c:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b49f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b4a3:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b4a8:	31 d2                	xor    edx,edx
c001b4aa:	f7 f3                	div    ebx
c001b4ac:	31 d2                	xor    edx,edx
c001b4ae:	bb 0c 00 00 00       	mov    ebx,0xc
c001b4b3:	f7 f7                	div    edi
c001b4b5:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b4b8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b4bc:	0f b7 cd             	movzx  ecx,bp
c001b4bf:	56                   	push   esi
c001b4c0:	89 c7                	mov    edi,eax
c001b4c2:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b4c6:	c1 e6 10             	shl    esi,0x10
c001b4c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b4cd:	83 e7 1f             	and    edi,0x1f
c001b4d0:	51                   	push   ecx
c001b4d1:	47                   	inc    edi
c001b4d2:	c1 e8 05             	shr    eax,0x5
c001b4d5:	31 d2                	xor    edx,edx
c001b4d7:	f7 f3                	div    ebx
c001b4d9:	31 db                	xor    ebx,ebx
c001b4db:	52                   	push   edx
c001b4dc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b4e0:	57                   	push   edi
c001b4e1:	68 c9 be 02 c0       	push   0xc002bec9
c001b4e6:	e8 31 7a ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001b4eb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b4ef:	89 f8                	mov    eax,edi
c001b4f1:	31 c9                	xor    ecx,ecx
c001b4f3:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b4f7:	88 c1                	mov    cl,al
c001b4f9:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b4ff:	88 d5                	mov    ch,dl
c001b501:	c1 e0 10             	shl    eax,0x10
c001b504:	0f b7 d1             	movzx  edx,cx
c001b507:	09 c2                	or     edx,eax
c001b509:	89 d8                	mov    eax,ebx
c001b50b:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b510:	09 f0                	or     eax,esi
c001b512:	89 c3                	mov    ebx,eax
c001b514:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b518:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b51c:	83 c4 18             	add    esp,0x18
c001b51f:	53                   	push   ebx
c001b520:	52                   	push   edx
c001b521:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b525:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b529:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b52d:	e8 cd 89 ff ff       	call   c0013eff <datetimeToSeconds(datetime_t)>
c001b532:	83 c4 0c             	add    esp,0xc
c001b535:	52                   	push   edx
c001b536:	50                   	push   eax
c001b537:	56                   	push   esi
c001b538:	e8 49 8b ff ff       	call   c0014086 <secondsToDatetime(unsigned long long)>
c001b53d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b541:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b545:	51                   	push   ecx
c001b546:	89 d6                	mov    esi,edx
c001b548:	51                   	push   ecx
c001b549:	c1 ee 10             	shr    esi,0x10
c001b54c:	89 f3                	mov    ebx,esi
c001b54e:	0f b6 f3             	movzx  esi,bl
c001b551:	56                   	push   esi
c001b552:	0f b6 f6             	movzx  esi,dh
c001b555:	0f b6 d2             	movzx  edx,dl
c001b558:	56                   	push   esi
c001b559:	52                   	push   edx
c001b55a:	89 c2                	mov    edx,eax
c001b55c:	c1 ea 10             	shr    edx,0x10
c001b55f:	52                   	push   edx
c001b560:	0f b6 d4             	movzx  edx,ah
c001b563:	0f b6 c0             	movzx  eax,al
c001b566:	52                   	push   edx
c001b567:	50                   	push   eax
c001b568:	68 e5 be 02 c0       	push   0xc002bee5
c001b56d:	e8 aa 79 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001b572:	83 c4 2c             	add    esp,0x2c
c001b575:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c001b57a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b57e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b582:	53                   	push   ebx
c001b583:	51                   	push   ecx
c001b584:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b58a:	e8 97 8a ff ff       	call   c0014026 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b58f:	83 f0 01             	xor    eax,0x1
c001b592:	31 d2                	xor    edx,edx
c001b594:	0f b6 c0             	movzx  eax,al
c001b597:	83 c4 3c             	add    esp,0x3c
c001b59a:	5b                   	pop    ebx
c001b59b:	5e                   	pop    esi
c001b59c:	5f                   	pop    edi
c001b59d:	5d                   	pop    ebp
c001b59e:	c3                   	ret    

c001b59f <Sys::timezone(regs*)>:
c001b59f:	53                   	push   ebx
c001b5a0:	83 ec 08             	sub    esp,0x8
c001b5a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b5a7:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b5ab:	75 17                	jne    c001b5c4 <Sys::timezone(regs*)+0x25>
c001b5ad:	83 ec 0c             	sub    esp,0xc
c001b5b0:	68 01 bf 02 c0       	push   0xc002bf01
c001b5b5:	e8 62 79 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001b5ba:	83 c8 ff             	or     eax,0xffffffff
c001b5bd:	83 c4 10             	add    esp,0x10
c001b5c0:	89 c2                	mov    edx,eax
c001b5c2:	eb 20                	jmp    c001b5e4 <Sys::timezone(regs*)+0x45>
c001b5c4:	83 ec 0c             	sub    esp,0xc
c001b5c7:	68 39 bf 02 c0       	push   0xc002bf39
c001b5cc:	e8 4b 79 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001b5d1:	58                   	pop    eax
c001b5d2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b5d5:	e8 ae 87 ff ff       	call   c0013d88 <User::loadClockSettings(int)>
c001b5da:	83 c4 10             	add    esp,0x10
c001b5dd:	b8 01 00 00 00       	mov    eax,0x1
c001b5e2:	31 d2                	xor    edx,edx
c001b5e4:	83 c4 08             	add    esp,0x8
c001b5e7:	5b                   	pop    ebx
c001b5e8:	c3                   	ret    

c001b5e9 <Sys::write(regs*)>:
c001b5e9:	57                   	push   edi
c001b5ea:	56                   	push   esi
c001b5eb:	53                   	push   ebx
c001b5ec:	83 ec 10             	sub    esp,0x10
c001b5ef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b5f3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b5f6:	83 f8 02             	cmp    eax,0x2
c001b5f9:	77 10                	ja     c001b60b <Sys::write(regs*)+0x22>
c001b5fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b600:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b603:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b609:	eb 0e                	jmp    c001b619 <Sys::write(regs*)+0x30>
c001b60b:	83 ec 0c             	sub    esp,0xc
c001b60e:	50                   	push   eax
c001b60f:	e8 21 64 ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001b614:	83 c4 10             	add    esp,0x10
c001b617:	89 c1                	mov    ecx,eax
c001b619:	83 c8 ff             	or     eax,0xffffffff
c001b61c:	85 c9                	test   ecx,ecx
c001b61e:	89 c2                	mov    edx,eax
c001b620:	74 28                	je     c001b64a <Sys::write(regs*)+0x61>
c001b622:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b62a:	31 ff                	xor    edi,edi
c001b62c:	83 ec 0c             	sub    esp,0xc
c001b62f:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b631:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b635:	52                   	push   edx
c001b636:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b639:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b63c:	57                   	push   edi
c001b63d:	56                   	push   esi
c001b63e:	51                   	push   ecx
c001b63f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b642:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b646:	83 c4 20             	add    esp,0x20
c001b649:	99                   	cdq    
c001b64a:	83 c4 10             	add    esp,0x10
c001b64d:	5b                   	pop    ebx
c001b64e:	5e                   	pop    esi
c001b64f:	5f                   	pop    edi
c001b650:	c3                   	ret    

c001b651 <Sys::wsbe(regs*)>:
c001b651:	57                   	push   edi
c001b652:	b9 0b 00 00 00       	mov    ecx,0xb
c001b657:	56                   	push   esi
c001b658:	be 78 bf 02 c0       	mov    esi,0xc002bf78
c001b65d:	53                   	push   ebx
c001b65e:	83 ec 30             	sub    esp,0x30
c001b661:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b665:	fc                   	cld    
c001b666:	83 ec 0c             	sub    esp,0xc
c001b669:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b66b:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b66f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b674:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b677:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b67d:	8b 06                	mov    eax,DWORD PTR [esi]
c001b67f:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b682:	57                   	push   edi
c001b683:	e8 0c 51 fe ff       	call   c0000794 <strlen>
c001b688:	5a                   	pop    edx
c001b689:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b68d:	52                   	push   edx
c001b68e:	31 d2                	xor    edx,edx
c001b690:	57                   	push   edi
c001b691:	52                   	push   edx
c001b692:	50                   	push   eax
c001b693:	56                   	push   esi
c001b694:	ff d3                	call   ebx
c001b696:	83 c4 14             	add    esp,0x14
c001b699:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b69d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b6a0:	e8 80 31 00 00       	call   c001e825 <terminateTask(int)>
c001b6a5:	83 c4 40             	add    esp,0x40
c001b6a8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b6ad:	5b                   	pop    ebx
c001b6ae:	31 d2                	xor    edx,edx
c001b6b0:	5e                   	pop    esi
c001b6b1:	5f                   	pop    edi
c001b6b2:	c3                   	ret    

c001b6b3 <Sys::yield(regs*)>:
c001b6b3:	57                   	push   edi
c001b6b4:	56                   	push   esi
c001b6b5:	53                   	push   ebx
c001b6b6:	e8 27 27 00 00       	call   c001dde2 <lockScheduler()>
c001b6bb:	e8 5e 2a 00 00       	call   c001e11e <schedule()>
c001b6c0:	e8 1f 27 00 00       	call   c001dde4 <unlockScheduler()>
c001b6c5:	8b 35 30 ec 02 c0    	mov    esi,DWORD PTR ds:0xc002ec30
c001b6cb:	8b 3d 34 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ec34
c001b6d1:	89 f0                	mov    eax,esi
c001b6d3:	89 fb                	mov    ebx,edi
c001b6d5:	89 f1                	mov    ecx,esi
c001b6d7:	c1 e0 07             	shl    eax,0x7
c001b6da:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b6de:	25 80 30 0f 00       	and    eax,0xf3080
c001b6e3:	c1 eb 17             	shr    ebx,0x17
c001b6e6:	31 c8                	xor    eax,ecx
c001b6e8:	89 da                	mov    edx,ebx
c001b6ea:	5b                   	pop    ebx
c001b6eb:	5e                   	pop    esi
c001b6ec:	5f                   	pop    edi
c001b6ed:	c3                   	ret    

c001b6ee <sysCallSeekDir(regs*)>:
c001b6ee:	31 c0                	xor    eax,eax
c001b6f0:	31 d2                	xor    edx,edx
c001b6f2:	c3                   	ret    

c001b6f3 <sysCallTellDir(regs*)>:
c001b6f3:	31 c0                	xor    eax,eax
c001b6f5:	31 d2                	xor    edx,edx
c001b6f7:	c3                   	ret    

c001b6f8 <sysCallVerify(regs*)>:
c001b6f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b6fc:	31 d2                	xor    edx,edx
c001b6fe:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b701:	c3                   	ret    

c001b702 <sysFormatDisk(regs*)>:
c001b702:	56                   	push   esi
c001b703:	53                   	push   ebx
c001b704:	53                   	push   ebx
c001b705:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b709:	8b 1d 2c e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e72c
c001b70f:	eb 25                	jmp    c001b736 <sysFormatDisk(regs*)+0x34>
c001b711:	83 ec 0c             	sub    esp,0xc
c001b714:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b717:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b719:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b71c:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b71f:	50                   	push   eax
c001b720:	ff 34 85 c0 eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd1440]
c001b727:	53                   	push   ebx
c001b728:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b72b:	83 c4 20             	add    esp,0x20
c001b72e:	83 f8 08             	cmp    eax,0x8
c001b731:	75 12                	jne    c001b745 <sysFormatDisk(regs*)+0x43>
c001b733:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b736:	85 db                	test   ebx,ebx
c001b738:	75 d7                	jne    c001b711 <sysFormatDisk(regs*)+0xf>
c001b73a:	59                   	pop    ecx
c001b73b:	b8 03 00 00 00       	mov    eax,0x3
c001b740:	31 d2                	xor    edx,edx
c001b742:	5b                   	pop    ebx
c001b743:	5e                   	pop    esi
c001b744:	c3                   	ret    
c001b745:	85 c0                	test   eax,eax
c001b747:	74 1b                	je     c001b764 <sysFormatDisk(regs*)+0x62>
c001b749:	83 f8 09             	cmp    eax,0x9
c001b74c:	74 0b                	je     c001b759 <sysFormatDisk(regs*)+0x57>
c001b74e:	59                   	pop    ecx
c001b74f:	b8 02 00 00 00       	mov    eax,0x2
c001b754:	31 d2                	xor    edx,edx
c001b756:	5b                   	pop    ebx
c001b757:	5e                   	pop    esi
c001b758:	c3                   	ret    
c001b759:	59                   	pop    ecx
c001b75a:	b8 01 00 00 00       	mov    eax,0x1
c001b75f:	31 d2                	xor    edx,edx
c001b761:	5b                   	pop    ebx
c001b762:	5e                   	pop    esi
c001b763:	c3                   	ret    
c001b764:	59                   	pop    ecx
c001b765:	31 c0                	xor    eax,eax
c001b767:	31 d2                	xor    edx,edx
c001b769:	5b                   	pop    ebx
c001b76a:	5e                   	pop    esi
c001b76b:	c3                   	ret    

c001b76c <sysSetDiskVolumeLabel(regs*)>:
c001b76c:	56                   	push   esi
c001b76d:	53                   	push   ebx
c001b76e:	53                   	push   ebx
c001b76f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b773:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b776:	83 f8 19             	cmp    eax,0x19
c001b779:	77 29                	ja     c001b7a4 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b77b:	8b 0c 85 c0 eb 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1440]
c001b782:	85 c9                	test   ecx,ecx
c001b784:	74 1e                	je     c001b7a4 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b786:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b789:	85 d2                	test   edx,edx
c001b78b:	74 17                	je     c001b7a4 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b78d:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b793:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b795:	52                   	push   edx
c001b796:	50                   	push   eax
c001b797:	51                   	push   ecx
c001b798:	53                   	push   ebx
c001b799:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b79c:	83 c4 10             	add    esp,0x10
c001b79f:	99                   	cdq    
c001b7a0:	59                   	pop    ecx
c001b7a1:	5b                   	pop    ebx
c001b7a2:	5e                   	pop    esi
c001b7a3:	c3                   	ret    
c001b7a4:	59                   	pop    ecx
c001b7a5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b7aa:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7af:	5b                   	pop    ebx
c001b7b0:	5e                   	pop    esi
c001b7b1:	c3                   	ret    

c001b7b2 <sysGetDiskVolumeLabel(regs*)>:
c001b7b2:	57                   	push   edi
c001b7b3:	56                   	push   esi
c001b7b4:	53                   	push   ebx
c001b7b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7b9:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b7bc:	83 fa 19             	cmp    edx,0x19
c001b7bf:	77 34                	ja     c001b7f5 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7c1:	8b 0c 95 c0 eb 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1440]
c001b7c8:	85 c9                	test   ecx,ecx
c001b7ca:	74 29                	je     c001b7f5 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7cc:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b7cf:	85 db                	test   ebx,ebx
c001b7d1:	74 22                	je     c001b7f5 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7d3:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b7d6:	85 c0                	test   eax,eax
c001b7d8:	74 1b                	je     c001b7f5 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7da:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b7e0:	83 ec 0c             	sub    esp,0xc
c001b7e3:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b7e5:	50                   	push   eax
c001b7e6:	53                   	push   ebx
c001b7e7:	52                   	push   edx
c001b7e8:	51                   	push   ecx
c001b7e9:	56                   	push   esi
c001b7ea:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b7ed:	83 c4 20             	add    esp,0x20
c001b7f0:	99                   	cdq    
c001b7f1:	5b                   	pop    ebx
c001b7f2:	5e                   	pop    esi
c001b7f3:	5f                   	pop    edi
c001b7f4:	c3                   	ret    
c001b7f5:	5b                   	pop    ebx
c001b7f6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b7fb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b800:	5e                   	pop    esi
c001b801:	5f                   	pop    edi
c001b802:	c3                   	ret    

c001b803 <sysShutdown(regs*)>:
c001b803:	83 ec 0c             	sub    esp,0xc
c001b806:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b80a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b80d:	85 c0                	test   eax,eax
c001b80f:	74 18                	je     c001b829 <sysShutdown(regs*)+0x26>
c001b811:	83 f8 01             	cmp    eax,0x1
c001b814:	74 38                	je     c001b84e <sysShutdown(regs*)+0x4b>
c001b816:	83 f8 02             	cmp    eax,0x2
c001b819:	74 24                	je     c001b83f <sysShutdown(regs*)+0x3c>
c001b81b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b820:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b825:	83 c4 0c             	add    esp,0xc
c001b828:	c3                   	ret    
c001b829:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c001b82e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b830:	6a 00                	push   0x0
c001b832:	6a 00                	push   0x0
c001b834:	6a 00                	push   0x0
c001b836:	50                   	push   eax
c001b837:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b83a:	83 c4 10             	add    esp,0x10
c001b83d:	eb dc                	jmp    c001b81b <sysShutdown(regs*)+0x18>
c001b83f:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c001b844:	8b 10                	mov    edx,DWORD PTR [eax]
c001b846:	6a 00                	push   0x0
c001b848:	6a 00                	push   0x0
c001b84a:	6a 01                	push   0x1
c001b84c:	eb e8                	jmp    c001b836 <sysShutdown(regs*)+0x33>
c001b84e:	a1 60 0c 03 c0       	mov    eax,ds:0xc0030c60
c001b853:	85 c0                	test   eax,eax
c001b855:	74 02                	je     c001b859 <sysShutdown(regs*)+0x56>
c001b857:	ff d0                	call   eax
c001b859:	31 c0                	xor    eax,eax
c001b85b:	31 d2                	xor    edx,edx
c001b85d:	83 c4 0c             	add    esp,0xc
c001b860:	c3                   	ret    

c001b861 <sysCallRealpath(regs*)>:
c001b861:	83 ec 0c             	sub    esp,0xc
c001b864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b868:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b86b:	85 d2                	test   edx,edx
c001b86d:	74 07                	je     c001b876 <sysCallRealpath(regs*)+0x15>
c001b86f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b872:	85 c0                	test   eax,eax
c001b874:	75 0b                	jne    c001b881 <sysCallRealpath(regs*)+0x20>
c001b876:	b8 01 00 00 00       	mov    eax,0x1
c001b87b:	31 d2                	xor    edx,edx
c001b87d:	83 c4 0c             	add    esp,0xc
c001b880:	c3                   	ret    
c001b881:	51                   	push   ecx
c001b882:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b888:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b88b:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b891:	51                   	push   ecx
c001b892:	52                   	push   edx
c001b893:	50                   	push   eax
c001b894:	e8 31 7a ff ff       	call   c00132ca <Fs::standardiseFiles(char*, char const*, char const*)>
c001b899:	83 c4 10             	add    esp,0x10
c001b89c:	31 c0                	xor    eax,eax
c001b89e:	31 d2                	xor    edx,edx
c001b8a0:	83 c4 0c             	add    esp,0xc
c001b8a3:	c3                   	ret    

c001b8a4 <sysCallGetArgc(regs*)>:
c001b8a4:	83 ec 14             	sub    esp,0x14
c001b8a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8ac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8af:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b8b5:	68 a4 bf 02 c0       	push   0xc002bfa4
c001b8ba:	e8 5d 76 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001b8bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8c4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8c7:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b8cd:	83 c4 1c             	add    esp,0x1c
c001b8d0:	99                   	cdq    
c001b8d1:	c3                   	ret    

c001b8d2 <sysCallReadDir(regs*)>:
c001b8d2:	53                   	push   ebx
c001b8d3:	83 ec 18             	sub    esp,0x18
c001b8d6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b8da:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b8dd:	83 f8 02             	cmp    eax,0x2
c001b8e0:	76 53                	jbe    c001b935 <sysCallReadDir(regs*)+0x63>
c001b8e2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b8e5:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b8eb:	77 4f                	ja     c001b93c <sysCallReadDir(regs*)+0x6a>
c001b8ed:	83 ec 0c             	sub    esp,0xc
c001b8f0:	50                   	push   eax
c001b8f1:	e8 3f 61 ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001b8f6:	83 c4 10             	add    esp,0x10
c001b8f9:	85 c0                	test   eax,eax
c001b8fb:	74 50                	je     c001b94d <sysCallReadDir(regs*)+0x7b>
c001b8fd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b905:	83 ec 0c             	sub    esp,0xc
c001b908:	8b 10                	mov    edx,DWORD PTR [eax]
c001b90a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b90e:	51                   	push   ecx
c001b90f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b912:	6a 00                	push   0x0
c001b914:	68 10 01 00 00       	push   0x110
c001b919:	50                   	push   eax
c001b91a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b91d:	83 c4 20             	add    esp,0x20
c001b920:	85 c0                	test   eax,eax
c001b922:	74 38                	je     c001b95c <sysCallReadDir(regs*)+0x8a>
c001b924:	83 f8 07             	cmp    eax,0x7
c001b927:	74 0c                	je     c001b935 <sysCallReadDir(regs*)+0x63>
c001b929:	b8 02 00 00 00       	mov    eax,0x2
c001b92e:	31 d2                	xor    edx,edx
c001b930:	83 c4 18             	add    esp,0x18
c001b933:	5b                   	pop    ebx
c001b934:	c3                   	ret    
c001b935:	b8 01 00 00 00       	mov    eax,0x1
c001b93a:	eb f2                	jmp    c001b92e <sysCallReadDir(regs*)+0x5c>
c001b93c:	83 ec 08             	sub    esp,0x8
c001b93f:	52                   	push   edx
c001b940:	68 bc c0 02 c0       	push   0xc002c0bc
c001b945:	e8 d2 75 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001b94a:	83 c4 10             	add    esp,0x10
c001b94d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b952:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b957:	83 c4 18             	add    esp,0x18
c001b95a:	5b                   	pop    ebx
c001b95b:	c3                   	ret    
c001b95c:	31 c0                	xor    eax,eax
c001b95e:	eb ce                	jmp    c001b92e <sysCallReadDir(regs*)+0x5c>

c001b960 <sysCallIsATTY(regs*)>:
c001b960:	83 ec 0c             	sub    esp,0xc
c001b963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b967:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b96a:	83 f8 02             	cmp    eax,0x2
c001b96d:	76 07                	jbe    c001b976 <sysCallIsATTY(regs*)+0x16>
c001b96f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b974:	75 26                	jne    c001b99c <sysCallIsATTY(regs*)+0x3c>
c001b976:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b97b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b97e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b984:	85 c0                	test   eax,eax
c001b986:	74 24                	je     c001b9ac <sysCallIsATTY(regs*)+0x4c>
c001b988:	83 ec 0c             	sub    esp,0xc
c001b98b:	8b 10                	mov    edx,DWORD PTR [eax]
c001b98d:	50                   	push   eax
c001b98e:	ff 12                	call   DWORD PTR [edx]
c001b990:	31 d2                	xor    edx,edx
c001b992:	0f b6 c0             	movzx  eax,al
c001b995:	83 c4 10             	add    esp,0x10
c001b998:	83 c4 0c             	add    esp,0xc
c001b99b:	c3                   	ret    
c001b99c:	83 ec 0c             	sub    esp,0xc
c001b99f:	50                   	push   eax
c001b9a0:	e8 90 60 ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001b9a5:	83 c4 10             	add    esp,0x10
c001b9a8:	85 c0                	test   eax,eax
c001b9aa:	75 dc                	jne    c001b988 <sysCallIsATTY(regs*)+0x28>
c001b9ac:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9b1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9b6:	83 c4 0c             	add    esp,0xc
c001b9b9:	c3                   	ret    

c001b9ba <sysCallSeek(regs*)>:
c001b9ba:	53                   	push   ebx
c001b9bb:	83 ec 08             	sub    esp,0x8
c001b9be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9c2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b9c5:	83 f8 02             	cmp    eax,0x2
c001b9c8:	76 4a                	jbe    c001ba14 <sysCallSeek(regs*)+0x5a>
c001b9ca:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b9cf:	77 32                	ja     c001ba03 <sysCallSeek(regs*)+0x49>
c001b9d1:	83 ec 0c             	sub    esp,0xc
c001b9d4:	50                   	push   eax
c001b9d5:	e8 5b 60 ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001b9da:	83 c4 0c             	add    esp,0xc
c001b9dd:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b9e0:	31 db                	xor    ebx,ebx
c001b9e2:	53                   	push   ebx
c001b9e3:	51                   	push   ecx
c001b9e4:	50                   	push   eax
c001b9e5:	e8 ac 7b ff ff       	call   c0013596 <File::seek(unsigned long long)>
c001b9ea:	83 c4 10             	add    esp,0x10
c001b9ed:	85 c0                	test   eax,eax
c001b9ef:	0f 95 c0             	setne  al
c001b9f2:	31 d2                	xor    edx,edx
c001b9f4:	0f b6 c0             	movzx  eax,al
c001b9f7:	f7 d8                	neg    eax
c001b9f9:	83 d2 00             	adc    edx,0x0
c001b9fc:	83 c4 08             	add    esp,0x8
c001b9ff:	f7 da                	neg    edx
c001ba01:	5b                   	pop    ebx
c001ba02:	c3                   	ret    
c001ba03:	83 ec 08             	sub    esp,0x8
c001ba06:	50                   	push   eax
c001ba07:	68 af bf 02 c0       	push   0xc002bfaf
c001ba0c:	e8 0b 75 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001ba11:	83 c4 10             	add    esp,0x10
c001ba14:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba19:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba1e:	83 c4 08             	add    esp,0x8
c001ba21:	5b                   	pop    ebx
c001ba22:	c3                   	ret    

c001ba23 <sysCallTell(regs*)>:
c001ba23:	53                   	push   ebx
c001ba24:	83 ec 08             	sub    esp,0x8
c001ba27:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba2b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba2e:	83 f8 02             	cmp    eax,0x2
c001ba31:	76 5e                	jbe    c001ba91 <sysCallTell(regs*)+0x6e>
c001ba33:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba38:	77 2d                	ja     c001ba67 <sysCallTell(regs*)+0x44>
c001ba3a:	83 ec 0c             	sub    esp,0xc
c001ba3d:	50                   	push   eax
c001ba3e:	e8 f2 5f ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001ba43:	5a                   	pop    edx
c001ba44:	59                   	pop    ecx
c001ba45:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ba48:	50                   	push   eax
c001ba49:	e8 9e 7b ff ff       	call   c00135ec <File::tell(unsigned long long*)>
c001ba4e:	83 c4 10             	add    esp,0x10
c001ba51:	85 c0                	test   eax,eax
c001ba53:	0f 95 c0             	setne  al
c001ba56:	31 d2                	xor    edx,edx
c001ba58:	0f b6 c0             	movzx  eax,al
c001ba5b:	f7 d8                	neg    eax
c001ba5d:	83 d2 00             	adc    edx,0x0
c001ba60:	83 c4 08             	add    esp,0x8
c001ba63:	f7 da                	neg    edx
c001ba65:	5b                   	pop    ebx
c001ba66:	c3                   	ret    
c001ba67:	83 ec 08             	sub    esp,0x8
c001ba6a:	50                   	push   eax
c001ba6b:	68 c9 bf 02 c0       	push   0xc002bfc9
c001ba70:	e8 a7 74 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001ba75:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ba78:	83 c4 10             	add    esp,0x10
c001ba7b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba81:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba88:	31 d2                	xor    edx,edx
c001ba8a:	31 c0                	xor    eax,eax
c001ba8c:	83 c4 08             	add    esp,0x8
c001ba8f:	5b                   	pop    ebx
c001ba90:	c3                   	ret    
c001ba91:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba96:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba9b:	83 c4 08             	add    esp,0x8
c001ba9e:	5b                   	pop    ebx
c001ba9f:	c3                   	ret    

c001baa0 <sysCallSize(regs*)>:
c001baa0:	53                   	push   ebx
c001baa1:	83 ec 18             	sub    esp,0x18
c001baa4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001baa8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001baab:	83 f8 02             	cmp    eax,0x2
c001baae:	76 64                	jbe    c001bb14 <sysCallSize(regs*)+0x74>
c001bab0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bab5:	77 33                	ja     c001baea <sysCallSize(regs*)+0x4a>
c001bab7:	83 ec 0c             	sub    esp,0xc
c001baba:	50                   	push   eax
c001babb:	e8 75 5f ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001bac0:	83 c4 0c             	add    esp,0xc
c001bac3:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bac7:	52                   	push   edx
c001bac8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bacb:	50                   	push   eax
c001bacc:	e8 b3 7c ff ff       	call   c0013784 <File::stat(unsigned long long*, bool*)>
c001bad1:	83 c4 10             	add    esp,0x10
c001bad4:	85 c0                	test   eax,eax
c001bad6:	0f 95 c0             	setne  al
c001bad9:	31 d2                	xor    edx,edx
c001badb:	0f b6 c0             	movzx  eax,al
c001bade:	f7 d8                	neg    eax
c001bae0:	83 d2 00             	adc    edx,0x0
c001bae3:	83 c4 18             	add    esp,0x18
c001bae6:	f7 da                	neg    edx
c001bae8:	5b                   	pop    ebx
c001bae9:	c3                   	ret    
c001baea:	83 ec 08             	sub    esp,0x8
c001baed:	50                   	push   eax
c001baee:	68 e3 bf 02 c0       	push   0xc002bfe3
c001baf3:	e8 24 74 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001baf8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bafb:	83 c4 10             	add    esp,0x10
c001bafe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb04:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb0b:	31 d2                	xor    edx,edx
c001bb0d:	31 c0                	xor    eax,eax
c001bb0f:	83 c4 18             	add    esp,0x18
c001bb12:	5b                   	pop    ebx
c001bb13:	c3                   	ret    
c001bb14:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb19:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb1e:	83 c4 18             	add    esp,0x18
c001bb21:	5b                   	pop    ebx
c001bb22:	c3                   	ret    

c001bb23 <sysCallSizeFromFilename(regs*)>:
c001bb23:	57                   	push   edi
c001bb24:	56                   	push   esi
c001bb25:	53                   	push   ebx
c001bb26:	83 ec 20             	sub    esp,0x20
c001bb29:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bb2d:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bb30:	83 fb 02             	cmp    ebx,0x2
c001bb33:	0f 86 99 00 00 00    	jbe    c001bbd2 <sysCallSizeFromFilename(regs*)+0xaf>
c001bb39:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bb3f:	77 65                	ja     c001bba6 <sysCallSizeFromFilename(regs*)+0x83>
c001bb41:	83 ec 0c             	sub    esp,0xc
c001bb44:	68 14 01 00 00       	push   0x114
c001bb49:	e8 f2 3c ff ff       	call   c000f840 <malloc>
c001bb4e:	83 c4 0c             	add    esp,0xc
c001bb51:	89 c6                	mov    esi,eax
c001bb53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb58:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb5b:	53                   	push   ebx
c001bb5c:	56                   	push   esi
c001bb5d:	e8 12 79 ff ff       	call   c0013474 <File::File(char const*, Process*)>
c001bb62:	83 c4 0c             	add    esp,0xc
c001bb65:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bb69:	50                   	push   eax
c001bb6a:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bb6d:	56                   	push   esi
c001bb6e:	e8 11 7c ff ff       	call   c0013784 <File::stat(unsigned long long*, bool*)>
c001bb73:	83 c4 10             	add    esp,0x10
c001bb76:	85 f6                	test   esi,esi
c001bb78:	74 14                	je     c001bb8e <sysCallSizeFromFilename(regs*)+0x6b>
c001bb7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb7e:	8b 16                	mov    edx,DWORD PTR [esi]
c001bb80:	83 ec 0c             	sub    esp,0xc
c001bb83:	56                   	push   esi
c001bb84:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bb87:	83 c4 10             	add    esp,0x10
c001bb8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb8e:	85 c0                	test   eax,eax
c001bb90:	0f 95 c0             	setne  al
c001bb93:	31 d2                	xor    edx,edx
c001bb95:	0f b6 c0             	movzx  eax,al
c001bb98:	f7 d8                	neg    eax
c001bb9a:	83 d2 00             	adc    edx,0x0
c001bb9d:	83 c4 20             	add    esp,0x20
c001bba0:	f7 da                	neg    edx
c001bba2:	5b                   	pop    ebx
c001bba3:	5e                   	pop    esi
c001bba4:	5f                   	pop    edi
c001bba5:	c3                   	ret    
c001bba6:	83 ec 08             	sub    esp,0x8
c001bba9:	53                   	push   ebx
c001bbaa:	68 e3 bf 02 c0       	push   0xc002bfe3
c001bbaf:	e8 68 73 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001bbb4:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bbb7:	83 c4 10             	add    esp,0x10
c001bbba:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bbc0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bbc7:	31 d2                	xor    edx,edx
c001bbc9:	83 c4 20             	add    esp,0x20
c001bbcc:	31 c0                	xor    eax,eax
c001bbce:	5b                   	pop    ebx
c001bbcf:	5e                   	pop    esi
c001bbd0:	5f                   	pop    edi
c001bbd1:	c3                   	ret    
c001bbd2:	83 c4 20             	add    esp,0x20
c001bbd5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbda:	5b                   	pop    ebx
c001bbdb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbe0:	5e                   	pop    esi
c001bbe1:	5f                   	pop    edi
c001bbe2:	c3                   	ret    

c001bbe3 <sysCallClose(regs*)>:
c001bbe3:	53                   	push   ebx
c001bbe4:	83 ec 08             	sub    esp,0x8
c001bbe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbeb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bbee:	83 f8 02             	cmp    eax,0x2
c001bbf1:	76 50                	jbe    c001bc43 <sysCallClose(regs*)+0x60>
c001bbf3:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bbf8:	74 58                	je     c001bc52 <sysCallClose(regs*)+0x6f>
c001bbfa:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bbff:	74 60                	je     c001bc61 <sysCallClose(regs*)+0x7e>
c001bc01:	77 2f                	ja     c001bc32 <sysCallClose(regs*)+0x4f>
c001bc03:	83 ec 0c             	sub    esp,0xc
c001bc06:	50                   	push   eax
c001bc07:	e8 29 5e ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001bc0c:	89 c3                	mov    ebx,eax
c001bc0e:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc11:	e8 20 79 ff ff       	call   c0013536 <File::close()>
c001bc16:	83 c4 10             	add    esp,0x10
c001bc19:	85 db                	test   ebx,ebx
c001bc1b:	74 0c                	je     c001bc29 <sysCallClose(regs*)+0x46>
c001bc1d:	83 ec 0c             	sub    esp,0xc
c001bc20:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc22:	53                   	push   ebx
c001bc23:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc26:	83 c4 10             	add    esp,0x10
c001bc29:	31 c0                	xor    eax,eax
c001bc2b:	31 d2                	xor    edx,edx
c001bc2d:	83 c4 08             	add    esp,0x8
c001bc30:	5b                   	pop    ebx
c001bc31:	c3                   	ret    
c001bc32:	83 ec 08             	sub    esp,0x8
c001bc35:	50                   	push   eax
c001bc36:	68 e0 c0 02 c0       	push   0xc002c0e0
c001bc3b:	e8 dc 72 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001bc40:	83 c4 10             	add    esp,0x10
c001bc43:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc48:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc4d:	83 c4 08             	add    esp,0x8
c001bc50:	5b                   	pop    ebx
c001bc51:	c3                   	ret    
c001bc52:	83 ec 0c             	sub    esp,0xc
c001bc55:	68 fe bf 02 c0       	push   0xc002bffe
c001bc5a:	e8 bd 72 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001bc5f:	eb c5                	jmp    c001bc26 <sysCallClose(regs*)+0x43>
c001bc61:	83 ec 0c             	sub    esp,0xc
c001bc64:	68 0c c0 02 c0       	push   0xc002c00c
c001bc69:	eb ef                	jmp    c001bc5a <sysCallClose(regs*)+0x77>

c001bc6b <sysCallOpenDir(regs*)>:
c001bc6b:	56                   	push   esi
c001bc6c:	53                   	push   ebx
c001bc6d:	53                   	push   ebx
c001bc6e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc72:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bc75:	85 f6                	test   esi,esi
c001bc77:	74 59                	je     c001bcd2 <sysCallOpenDir(regs*)+0x67>
c001bc79:	83 ec 0c             	sub    esp,0xc
c001bc7c:	68 14 01 00 00       	push   0x114
c001bc81:	e8 ba 3b ff ff       	call   c000f840 <malloc>
c001bc86:	83 c4 0c             	add    esp,0xc
c001bc89:	89 c6                	mov    esi,eax
c001bc8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc90:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc93:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc96:	56                   	push   esi
c001bc97:	e8 84 7c ff ff       	call   c0013920 <Directory::Directory(char const*, Process*)>
c001bc9c:	83 c4 10             	add    esp,0x10
c001bc9f:	85 f6                	test   esi,esi
c001bca1:	74 2f                	je     c001bcd2 <sysCallOpenDir(regs*)+0x67>
c001bca3:	83 ec 0c             	sub    esp,0xc
c001bca6:	56                   	push   esi
c001bca7:	e8 d8 7c ff ff       	call   c0013984 <Directory::open()>
c001bcac:	83 c4 10             	add    esp,0x10
c001bcaf:	85 c0                	test   eax,eax
c001bcb1:	75 1f                	jne    c001bcd2 <sysCallOpenDir(regs*)+0x67>
c001bcb3:	83 ec 0c             	sub    esp,0xc
c001bcb6:	56                   	push   esi
c001bcb7:	e8 84 5a ff ff       	call   c0011740 <UnixFile::getFileDescriptor()>
c001bcbc:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bcbf:	83 c4 10             	add    esp,0x10
c001bcc2:	89 02                	mov    DWORD PTR [edx],eax
c001bcc4:	c1 f8 1f             	sar    eax,0x1f
c001bcc7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bcca:	31 c0                	xor    eax,eax
c001bccc:	59                   	pop    ecx
c001bccd:	31 d2                	xor    edx,edx
c001bccf:	5b                   	pop    ebx
c001bcd0:	5e                   	pop    esi
c001bcd1:	c3                   	ret    
c001bcd2:	59                   	pop    ecx
c001bcd3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcd8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcdd:	5b                   	pop    ebx
c001bcde:	5e                   	pop    esi
c001bcdf:	c3                   	ret    

c001bce0 <sysCallCloseDir(regs*)>:
c001bce0:	53                   	push   ebx
c001bce1:	83 ec 08             	sub    esp,0x8
c001bce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bce8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bceb:	83 f8 02             	cmp    eax,0x2
c001bcee:	76 47                	jbe    c001bd37 <sysCallCloseDir(regs*)+0x57>
c001bcf0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bcf5:	77 2f                	ja     c001bd26 <sysCallCloseDir(regs*)+0x46>
c001bcf7:	83 ec 0c             	sub    esp,0xc
c001bcfa:	50                   	push   eax
c001bcfb:	e8 35 5d ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001bd00:	89 c3                	mov    ebx,eax
c001bd02:	89 04 24             	mov    DWORD PTR [esp],eax
c001bd05:	e8 d6 7c ff ff       	call   c00139e0 <Directory::close()>
c001bd0a:	83 c4 10             	add    esp,0x10
c001bd0d:	85 db                	test   ebx,ebx
c001bd0f:	74 0c                	je     c001bd1d <sysCallCloseDir(regs*)+0x3d>
c001bd11:	83 ec 0c             	sub    esp,0xc
c001bd14:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd16:	53                   	push   ebx
c001bd17:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd1a:	83 c4 10             	add    esp,0x10
c001bd1d:	31 c0                	xor    eax,eax
c001bd1f:	31 d2                	xor    edx,edx
c001bd21:	83 c4 08             	add    esp,0x8
c001bd24:	5b                   	pop    ebx
c001bd25:	c3                   	ret    
c001bd26:	83 ec 08             	sub    esp,0x8
c001bd29:	50                   	push   eax
c001bd2a:	68 08 c1 02 c0       	push   0xc002c108
c001bd2f:	e8 e8 71 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001bd34:	83 c4 10             	add    esp,0x10
c001bd37:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd3c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd41:	83 c4 08             	add    esp,0x8
c001bd44:	5b                   	pop    ebx
c001bd45:	c3                   	ret    

c001bd46 <sysCallMakeDir(regs*)>:
c001bd46:	56                   	push   esi
c001bd47:	53                   	push   ebx
c001bd48:	83 ec 10             	sub    esp,0x10
c001bd4b:	68 14 01 00 00       	push   0x114
c001bd50:	e8 eb 3a ff ff       	call   c000f840 <malloc>
c001bd55:	83 c4 0c             	add    esp,0xc
c001bd58:	89 c3                	mov    ebx,eax
c001bd5a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd5f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd62:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd66:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bd69:	53                   	push   ebx
c001bd6a:	e8 b1 7b ff ff       	call   c0013920 <Directory::Directory(char const*, Process*)>
c001bd6f:	83 c4 10             	add    esp,0x10
c001bd72:	85 db                	test   ebx,ebx
c001bd74:	74 32                	je     c001bda8 <sysCallMakeDir(regs*)+0x62>
c001bd76:	83 ec 0c             	sub    esp,0xc
c001bd79:	53                   	push   ebx
c001bd7a:	e8 e5 7d ff ff       	call   c0013b64 <Directory::create()>
c001bd7f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd82:	89 c6                	mov    esi,eax
c001bd84:	e8 57 7c ff ff       	call   c00139e0 <Directory::close()>
c001bd89:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd8b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd8e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd91:	83 c4 10             	add    esp,0x10
c001bd94:	31 c0                	xor    eax,eax
c001bd96:	59                   	pop    ecx
c001bd97:	85 f6                	test   esi,esi
c001bd99:	5b                   	pop    ebx
c001bd9a:	0f 95 c0             	setne  al
c001bd9d:	5e                   	pop    esi
c001bd9e:	31 d2                	xor    edx,edx
c001bda0:	f7 d8                	neg    eax
c001bda2:	83 d2 00             	adc    edx,0x0
c001bda5:	f7 da                	neg    edx
c001bda7:	c3                   	ret    
c001bda8:	59                   	pop    ecx
c001bda9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdae:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdb3:	5b                   	pop    ebx
c001bdb4:	5e                   	pop    esi
c001bdb5:	c3                   	ret    

c001bdb6 <sysCallWait(regs*)>:
c001bdb6:	83 ec 10             	sub    esp,0x10
c001bdb9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bdbd:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bdc0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bdc3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bdc6:	e8 ce 24 00 00       	call   c001e299 <waitTask(int, int*, int)>
c001bdcb:	83 c4 1c             	add    esp,0x1c
c001bdce:	99                   	cdq    
c001bdcf:	c3                   	ret    

c001bdd0 <sysCallNotImpl(regs*)>:
c001bdd0:	83 ec 18             	sub    esp,0x18
c001bdd3:	68 1a c0 02 c0       	push   0xc002c01a
c001bdd8:	e8 e0 e7 ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c001bddd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bde2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bde7:	83 c4 1c             	add    esp,0x1c
c001bdea:	c3                   	ret    

c001bdeb <sysPanic(regs*)>:
c001bdeb:	83 ec 18             	sub    esp,0x18
c001bdee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bdf2:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bdf5:	e8 c3 e7 ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c001bdfa:	c7 04 24 34 c0 02 c0 	mov    DWORD PTR [esp],0xc002c034
c001be01:	e8 b7 e7 ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c001be06:	b8 01 00 00 00       	mov    eax,0x1
c001be0b:	31 d2                	xor    edx,edx
c001be0d:	83 c4 1c             	add    esp,0x1c
c001be10:	c3                   	ret    

c001be11 <sysCallRmdir(regs*)>:
c001be11:	56                   	push   esi
c001be12:	53                   	push   ebx
c001be13:	83 ec 20             	sub    esp,0x20
c001be16:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be1a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be1d:	68 14 01 00 00       	push   0x114
c001be22:	e8 19 3a ff ff       	call   c000f840 <malloc>
c001be27:	83 c4 0c             	add    esp,0xc
c001be2a:	89 c3                	mov    ebx,eax
c001be2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be31:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be34:	56                   	push   esi
c001be35:	53                   	push   ebx
c001be36:	e8 39 76 ff ff       	call   c0013474 <File::File(char const*, Process*)>
c001be3b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be3e:	e8 0d 78 ff ff       	call   c0013650 <File::unlink()>
c001be43:	83 c4 10             	add    esp,0x10
c001be46:	85 db                	test   ebx,ebx
c001be48:	74 14                	je     c001be5e <sysCallRmdir(regs*)+0x4d>
c001be4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be4e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001be50:	83 ec 0c             	sub    esp,0xc
c001be53:	53                   	push   ebx
c001be54:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be57:	83 c4 10             	add    esp,0x10
c001be5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be5e:	85 c0                	test   eax,eax
c001be60:	0f 95 c0             	setne  al
c001be63:	31 d2                	xor    edx,edx
c001be65:	0f b6 c0             	movzx  eax,al
c001be68:	f7 d8                	neg    eax
c001be6a:	83 d2 00             	adc    edx,0x0
c001be6d:	83 c4 14             	add    esp,0x14
c001be70:	f7 da                	neg    edx
c001be72:	5b                   	pop    ebx
c001be73:	5e                   	pop    esi
c001be74:	c3                   	ret    

c001be75 <sysCallUnlink(regs*)>:
c001be75:	56                   	push   esi
c001be76:	53                   	push   ebx
c001be77:	83 ec 20             	sub    esp,0x20
c001be7a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be7e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be81:	68 14 01 00 00       	push   0x114
c001be86:	e8 b5 39 ff ff       	call   c000f840 <malloc>
c001be8b:	83 c4 0c             	add    esp,0xc
c001be8e:	89 c3                	mov    ebx,eax
c001be90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be95:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be98:	56                   	push   esi
c001be99:	53                   	push   ebx
c001be9a:	e8 d5 75 ff ff       	call   c0013474 <File::File(char const*, Process*)>
c001be9f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bea2:	e8 a9 77 ff ff       	call   c0013650 <File::unlink()>
c001bea7:	83 c4 10             	add    esp,0x10
c001beaa:	85 db                	test   ebx,ebx
c001beac:	74 14                	je     c001bec2 <sysCallUnlink(regs*)+0x4d>
c001beae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001beb2:	8b 13                	mov    edx,DWORD PTR [ebx]
c001beb4:	83 ec 0c             	sub    esp,0xc
c001beb7:	53                   	push   ebx
c001beb8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bebb:	83 c4 10             	add    esp,0x10
c001bebe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bec2:	85 c0                	test   eax,eax
c001bec4:	0f 95 c0             	setne  al
c001bec7:	31 d2                	xor    edx,edx
c001bec9:	0f b6 c0             	movzx  eax,al
c001becc:	f7 d8                	neg    eax
c001bece:	83 d2 00             	adc    edx,0x0
c001bed1:	83 c4 14             	add    esp,0x14
c001bed4:	f7 da                	neg    edx
c001bed6:	5b                   	pop    ebx
c001bed7:	5e                   	pop    esi
c001bed8:	c3                   	ret    

c001bed9 <sysCallGetArgv(regs*)>:
c001bed9:	83 ec 0c             	sub    esp,0xc
c001bedc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bee0:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bee3:	85 c0                	test   eax,eax
c001bee5:	78 2b                	js     c001bf12 <sysCallGetArgv(regs*)+0x39>
c001bee7:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001beed:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bef0:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bef6:	7d 1a                	jge    c001bf12 <sysCallGetArgv(regs*)+0x39>
c001bef8:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001beff:	85 c0                	test   eax,eax
c001bf01:	74 17                	je     c001bf1a <sysCallGetArgv(regs*)+0x41>
c001bf03:	83 ec 08             	sub    esp,0x8
c001bf06:	50                   	push   eax
c001bf07:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bf0a:	e8 25 49 fe ff       	call   c0000834 <strcpy>
c001bf0f:	83 c4 10             	add    esp,0x10
c001bf12:	31 c0                	xor    eax,eax
c001bf14:	31 d2                	xor    edx,edx
c001bf16:	83 c4 0c             	add    esp,0xc
c001bf19:	c3                   	ret    
c001bf1a:	b8 01 00 00 00       	mov    eax,0x1
c001bf1f:	31 d2                	xor    edx,edx
c001bf21:	83 c4 0c             	add    esp,0xc
c001bf24:	c3                   	ret    

c001bf25 <sysCallTTYName(regs*)>:
c001bf25:	56                   	push   esi
c001bf26:	53                   	push   ebx
c001bf27:	53                   	push   ebx
c001bf28:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf2c:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bf2f:	85 c0                	test   eax,eax
c001bf31:	74 5f                	je     c001bf92 <sysCallTTYName(regs*)+0x6d>
c001bf33:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bf36:	83 f8 02             	cmp    eax,0x2
c001bf39:	77 3e                	ja     c001bf79 <sysCallTTYName(regs*)+0x54>
c001bf3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf40:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bf43:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bf49:	85 db                	test   ebx,ebx
c001bf4b:	74 45                	je     c001bf92 <sysCallTTYName(regs*)+0x6d>
c001bf4d:	83 ec 0c             	sub    esp,0xc
c001bf50:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf52:	53                   	push   ebx
c001bf53:	ff 10                	call   DWORD PTR [eax]
c001bf55:	83 c4 10             	add    esp,0x10
c001bf58:	84 c0                	test   al,al
c001bf5a:	74 41                	je     c001bf9d <sysCallTTYName(regs*)+0x78>
c001bf5c:	83 ec 08             	sub    esp,0x8
c001bf5f:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001bf65:	53                   	push   ebx
c001bf66:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bf69:	e8 c6 48 fe ff       	call   c0000834 <strcpy>
c001bf6e:	83 c4 10             	add    esp,0x10
c001bf71:	31 c0                	xor    eax,eax
c001bf73:	59                   	pop    ecx
c001bf74:	31 d2                	xor    edx,edx
c001bf76:	5b                   	pop    ebx
c001bf77:	5e                   	pop    esi
c001bf78:	c3                   	ret    
c001bf79:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bf7e:	74 bb                	je     c001bf3b <sysCallTTYName(regs*)+0x16>
c001bf80:	83 ec 0c             	sub    esp,0xc
c001bf83:	50                   	push   eax
c001bf84:	e8 ac 5a ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001bf89:	83 c4 10             	add    esp,0x10
c001bf8c:	89 c3                	mov    ebx,eax
c001bf8e:	85 db                	test   ebx,ebx
c001bf90:	75 bb                	jne    c001bf4d <sysCallTTYName(regs*)+0x28>
c001bf92:	59                   	pop    ecx
c001bf93:	b8 01 00 00 00       	mov    eax,0x1
c001bf98:	31 d2                	xor    edx,edx
c001bf9a:	5b                   	pop    ebx
c001bf9b:	5e                   	pop    esi
c001bf9c:	c3                   	ret    
c001bf9d:	59                   	pop    ecx
c001bf9e:	b8 02 00 00 00       	mov    eax,0x2
c001bfa3:	31 d2                	xor    edx,edx
c001bfa5:	5b                   	pop    ebx
c001bfa6:	5e                   	pop    esi
c001bfa7:	c3                   	ret    

c001bfa8 <sysCallUSleep(regs*)>:
c001bfa8:	83 ec 14             	sub    esp,0x14
c001bfab:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bfb0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bfb4:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bfbb:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bfbe:	01 ca                	add    edx,ecx
c001bfc0:	52                   	push   edx
c001bfc1:	50                   	push   eax
c001bfc2:	e8 6b 23 00 00       	call   c001e332 <nanoSleep(unsigned long long)>
c001bfc7:	31 c0                	xor    eax,eax
c001bfc9:	31 d2                	xor    edx,edx
c001bfcb:	83 c4 1c             	add    esp,0x1c
c001bfce:	c3                   	ret    

c001bfcf <sysCallSpawn(regs*)>:
c001bfcf:	56                   	push   esi
c001bfd0:	53                   	push   ebx
c001bfd1:	53                   	push   ebx
c001bfd2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bfd6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001bfd9:	85 f6                	test   esi,esi
c001bfdb:	75 08                	jne    c001bfe5 <sysCallSpawn(regs*)+0x16>
c001bfdd:	59                   	pop    ecx
c001bfde:	31 c0                	xor    eax,eax
c001bfe0:	31 d2                	xor    edx,edx
c001bfe2:	5b                   	pop    ebx
c001bfe3:	5e                   	pop    esi
c001bfe4:	c3                   	ret    
c001bfe5:	83 ec 0c             	sub    esp,0xc
c001bfe8:	68 3f 07 00 00       	push   0x73f
c001bfed:	e8 4e 38 ff ff       	call   c000f840 <malloc>
c001bff2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bff5:	89 c6                	mov    esi,eax
c001bff7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bffc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bfff:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c002:	56                   	push   esi
c001c003:	e8 2a 1a 00 00       	call   c001da32 <Process::Process(char const*, Process*, char**)>
c001c008:	83 c4 20             	add    esp,0x20
c001c00b:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c012:	75 c9                	jne    c001bfdd <sysCallSpawn(regs*)+0xe>
c001c014:	83 ec 0c             	sub    esp,0xc
c001c017:	56                   	push   esi
c001c018:	e8 db 1f 00 00       	call   c001dff8 <Process::createUserThread()>
c001c01d:	8b 06                	mov    eax,DWORD PTR [esi]
c001c01f:	83 c4 10             	add    esp,0x10
c001c022:	99                   	cdq    
c001c023:	59                   	pop    ecx
c001c024:	5b                   	pop    ebx
c001c025:	5e                   	pop    esi
c001c026:	c3                   	ret    

c001c027 <sysCallGetEnv(regs*)>:
c001c027:	55                   	push   ebp
c001c028:	57                   	push   edi
c001c029:	56                   	push   esi
c001c02a:	53                   	push   ebx
c001c02b:	83 ec 28             	sub    esp,0x28
c001c02e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c032:	68 43 c0 02 c0       	push   0xc002c043
c001c037:	e8 e0 6e ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001c03c:	5f                   	pop    edi
c001c03d:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c040:	5d                   	pop    ebp
c001c041:	53                   	push   ebx
c001c042:	68 72 c3 02 c0       	push   0xc002c372
c001c047:	e8 d0 6e ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001c04c:	58                   	pop    eax
c001c04d:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c050:	5a                   	pop    edx
c001c051:	57                   	push   edi
c001c052:	68 4c c0 02 c0       	push   0xc002c04c
c001c057:	e8 c0 6e ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001c05c:	59                   	pop    ecx
c001c05d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c062:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c065:	e8 6f e4 ff ff       	call   c001a4d9 <Krnl::getProcessTotalEnvCount(Process*)>
c001c06a:	5a                   	pop    edx
c001c06b:	89 c5                	mov    ebp,eax
c001c06d:	59                   	pop    ecx
c001c06e:	50                   	push   eax
c001c06f:	68 56 c0 02 c0       	push   0xc002c056
c001c074:	e8 a3 6e ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001c079:	83 c4 10             	add    esp,0x10
c001c07c:	39 ef                	cmp    edi,ebp
c001c07e:	7c 15                	jl     c001c095 <sysCallGetEnv(regs*)+0x6e>
c001c080:	85 db                	test   ebx,ebx
c001c082:	75 0c                	jne    c001c090 <sysCallGetEnv(regs*)+0x69>
c001c084:	83 c4 1c             	add    esp,0x1c
c001c087:	31 c0                	xor    eax,eax
c001c089:	5b                   	pop    ebx
c001c08a:	31 d2                	xor    edx,edx
c001c08c:	5e                   	pop    esi
c001c08d:	5f                   	pop    edi
c001c08e:	5d                   	pop    ebp
c001c08f:	c3                   	ret    
c001c090:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c093:	eb ef                	jmp    c001c084 <sysCallGetEnv(regs*)+0x5d>
c001c095:	83 ec 0c             	sub    esp,0xc
c001c098:	68 62 c0 02 c0       	push   0xc002c062
c001c09d:	e8 7a 6e ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001c0a2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c0a6:	83 c4 0c             	add    esp,0xc
c001c0a9:	57                   	push   edi
c001c0aa:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c0b0:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c0b3:	50                   	push   eax
c001c0b4:	e8 40 e4 ff ff       	call   c001a4f9 <Krnl::getProcessEnvPair(Process*, int)>
c001c0b9:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c0bd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c0c1:	68 f1 c3 02 c0       	push   0xc002c3f1
c001c0c6:	e8 51 6e ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001c0cb:	83 c4 10             	add    esp,0x10
c001c0ce:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c0d1:	85 f6                	test   esi,esi
c001c0d3:	75 47                	jne    c001c11c <sysCallGetEnv(regs*)+0xf5>
c001c0d5:	83 ec 0c             	sub    esp,0xc
c001c0d8:	55                   	push   ebp
c001c0d9:	e8 b6 46 fe ff       	call   c0000794 <strlen>
c001c0de:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c0e1:	89 c3                	mov    ebx,eax
c001c0e3:	e8 ac 46 fe ff       	call   c0000794 <strlen>
c001c0e8:	5a                   	pop    edx
c001c0e9:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c0ed:	59                   	pop    ecx
c001c0ee:	50                   	push   eax
c001c0ef:	68 65 c0 02 c0       	push   0xc002c065
c001c0f4:	e8 23 6e ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001c0f9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c0fc:	e8 93 46 fe ff       	call   c0000794 <strlen>
c001c101:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c104:	89 c3                	mov    ebx,eax
c001c106:	e8 89 46 fe ff       	call   c0000794 <strlen>
c001c10b:	83 c4 10             	add    esp,0x10
c001c10e:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c112:	83 c4 1c             	add    esp,0x1c
c001c115:	31 d2                	xor    edx,edx
c001c117:	5b                   	pop    ebx
c001c118:	5e                   	pop    esi
c001c119:	5f                   	pop    edi
c001c11a:	5d                   	pop    ebp
c001c11b:	c3                   	ret    
c001c11c:	83 ec 0c             	sub    esp,0xc
c001c11f:	68 0b c4 02 c0       	push   0xc002c40b
c001c124:	e8 f3 6d ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001c129:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c12c:	58                   	pop    eax
c001c12d:	5a                   	pop    edx
c001c12e:	55                   	push   ebp
c001c12f:	53                   	push   ebx
c001c130:	e8 ff 46 fe ff       	call   c0000834 <strcpy>
c001c135:	59                   	pop    ecx
c001c136:	5e                   	pop    esi
c001c137:	68 6f c0 02 c0       	push   0xc002c06f
c001c13c:	53                   	push   ebx
c001c13d:	e8 32 48 fe ff       	call   c0000974 <strcat>
c001c142:	5d                   	pop    ebp
c001c143:	58                   	pop    eax
c001c144:	57                   	push   edi
c001c145:	53                   	push   ebx
c001c146:	e8 29 48 fe ff       	call   c0000974 <strcat>
c001c14b:	c7 04 24 25 c4 02 c0 	mov    DWORD PTR [esp],0xc002c425
c001c152:	e8 c5 6d ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001c157:	83 c4 10             	add    esp,0x10
c001c15a:	e9 25 ff ff ff       	jmp    c001c084 <sysCallGetEnv(regs*)+0x5d>

c001c15f <sysAppSettings(regs*)>:
c001c15f:	53                   	push   ebx
c001c160:	83 ec 08             	sub    esp,0x8
c001c163:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c167:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c16a:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c170:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c175:	66 3d c0 09          	cmp    ax,0x9c0
c001c179:	75 2f                	jne    c001c1aa <sysAppSettings(regs*)+0x4b>
c001c17b:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c181:	83 e0 1f             	and    eax,0x1f
c001c184:	3c 01                	cmp    al,0x1
c001c186:	74 2e                	je     c001c1b6 <sysAppSettings(regs*)+0x57>
c001c188:	3c 07                	cmp    al,0x7
c001c18a:	0f 84 bd 00 00 00    	je     c001c24d <sysAppSettings(regs*)+0xee>
c001c190:	84 c0                	test   al,al
c001c192:	0f 84 dc 00 00 00    	je     c001c274 <sysAppSettings(regs*)+0x115>
c001c198:	3c 08                	cmp    al,0x8
c001c19a:	74 6d                	je     c001c209 <sysAppSettings(regs*)+0xaa>
c001c19c:	0f b6 c0             	movzx  eax,al
c001c19f:	83 c4 08             	add    esp,0x8
c001c1a2:	05 e8 03 00 00       	add    eax,0x3e8
c001c1a7:	5b                   	pop    ebx
c001c1a8:	99                   	cdq    
c001c1a9:	c3                   	ret    
c001c1aa:	b8 01 00 00 00       	mov    eax,0x1
c001c1af:	31 d2                	xor    edx,edx
c001c1b1:	83 c4 08             	add    esp,0x8
c001c1b4:	5b                   	pop    ebx
c001c1b5:	c3                   	ret    
c001c1b6:	51                   	push   ecx
c001c1b7:	68 00 01 00 00       	push   0x100
c001c1bc:	6a 00                	push   0x0
c001c1be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1c3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1c6:	83 c0 0c             	add    eax,0xc
c001c1c9:	50                   	push   eax
c001c1ca:	e8 a9 45 fe ff       	call   c0000778 <memset>
c001c1cf:	83 c4 0c             	add    esp,0xc
c001c1d2:	68 ff 00 00 00       	push   0xff
c001c1d7:	53                   	push   ebx
c001c1d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1dd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1e0:	83 c0 0c             	add    eax,0xc
c001c1e3:	50                   	push   eax
c001c1e4:	e8 5b 45 fe ff       	call   c0000744 <memcpy>
c001c1e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1ee:	5b                   	pop    ebx
c001c1ef:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1f2:	5a                   	pop    edx
c001c1f3:	8d 50 0c             	lea    edx,[eax+0xc]
c001c1f6:	52                   	push   edx
c001c1f7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c1fd:	e8 ae 49 ff ff       	call   c0010bb0 <VgaText::setTitle(char*)>
c001c202:	83 c4 10             	add    esp,0x10
c001c205:	31 c0                	xor    eax,eax
c001c207:	eb a6                	jmp    c001c1af <sysAppSettings(regs*)+0x50>
c001c209:	83 ec 08             	sub    esp,0x8
c001c20c:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c212:	83 e0 0f             	and    eax,0xf
c001c215:	50                   	push   eax
c001c216:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c21b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c21e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c224:	e8 77 49 ff ff       	call   c0010ba0 <VgaText::setTitleColour(VgaColour)>
c001c229:	58                   	pop    eax
c001c22a:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c230:	5a                   	pop    edx
c001c231:	c1 e8 04             	shr    eax,0x4
c001c234:	83 e0 0f             	and    eax,0xf
c001c237:	50                   	push   eax
c001c238:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c23d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c240:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c246:	e8 45 49 ff ff       	call   c0010b90 <VgaText::setTitleTextColour(VgaColour)>
c001c24b:	eb b5                	jmp    c001c202 <sysAppSettings(regs*)+0xa3>
c001c24d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c252:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c255:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c25b:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c261:	c0 e8 06             	shr    al,0x6
c001c264:	83 e0 01             	and    eax,0x1
c001c267:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c26d:	31 c0                	xor    eax,eax
c001c26f:	e9 3b ff ff ff       	jmp    c001c1af <sysAppSettings(regs*)+0x50>
c001c274:	b8 02 00 00 00       	mov    eax,0x2
c001c279:	e9 31 ff ff ff       	jmp    c001c1af <sysAppSettings(regs*)+0x50>

c001c27e <sysSetFatAttrib(regs*)>:
c001c27e:	57                   	push   edi
c001c27f:	56                   	push   esi
c001c280:	53                   	push   ebx
c001c281:	83 ec 1c             	sub    esp,0x1c
c001c284:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c288:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c28b:	68 14 01 00 00       	push   0x114
c001c290:	e8 ab 35 ff ff       	call   c000f840 <malloc>
c001c295:	83 c4 0c             	add    esp,0xc
c001c298:	89 c3                	mov    ebx,eax
c001c29a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c29f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c2a2:	57                   	push   edi
c001c2a3:	53                   	push   ebx
c001c2a4:	e8 cb 71 ff ff       	call   c0013474 <File::File(char const*, Process*)>
c001c2a9:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c2ac:	83 c4 0c             	add    esp,0xc
c001c2af:	0f b6 d4             	movzx  edx,ah
c001c2b2:	0f b6 c0             	movzx  eax,al
c001c2b5:	52                   	push   edx
c001c2b6:	50                   	push   eax
c001c2b7:	53                   	push   ebx
c001c2b8:	e8 2d 74 ff ff       	call   c00136ea <File::chfatattr(unsigned char, unsigned char)>
c001c2bd:	83 c4 10             	add    esp,0x10
c001c2c0:	85 db                	test   ebx,ebx
c001c2c2:	74 14                	je     c001c2d8 <sysSetFatAttrib(regs*)+0x5a>
c001c2c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c2c8:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c2ca:	83 ec 0c             	sub    esp,0xc
c001c2cd:	53                   	push   ebx
c001c2ce:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c2d1:	83 c4 10             	add    esp,0x10
c001c2d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c2d8:	85 c0                	test   eax,eax
c001c2da:	0f 95 c0             	setne  al
c001c2dd:	31 d2                	xor    edx,edx
c001c2df:	0f b6 c0             	movzx  eax,al
c001c2e2:	f7 d8                	neg    eax
c001c2e4:	83 d2 00             	adc    edx,0x0
c001c2e7:	83 c4 10             	add    esp,0x10
c001c2ea:	f7 da                	neg    edx
c001c2ec:	5b                   	pop    ebx
c001c2ed:	5e                   	pop    esi
c001c2ee:	5f                   	pop    edi
c001c2ef:	c3                   	ret    

c001c2f0 <sysPipe(regs*)>:
c001c2f0:	57                   	push   edi
c001c2f1:	56                   	push   esi
c001c2f2:	53                   	push   ebx
c001c2f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2f7:	83 ec 0c             	sub    esp,0xc
c001c2fa:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c2fd:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c300:	6a 20                	push   0x20
c001c302:	e8 39 35 ff ff       	call   c000f840 <malloc>
c001c307:	89 c3                	mov    ebx,eax
c001c309:	58                   	pop    eax
c001c30a:	5a                   	pop    edx
c001c30b:	68 00 50 00 00       	push   0x5000
c001c310:	53                   	push   ebx
c001c311:	e8 ca 41 ff ff       	call   c00104e0 <Pipe::Pipe(int)>
c001c316:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c319:	e8 22 54 ff ff       	call   c0011740 <UnixFile::getFileDescriptor()>
c001c31e:	89 07                	mov    DWORD PTR [edi],eax
c001c320:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c323:	e8 18 54 ff ff       	call   c0011740 <UnixFile::getFileDescriptor()>
c001c328:	83 c4 10             	add    esp,0x10
c001c32b:	89 06                	mov    DWORD PTR [esi],eax
c001c32d:	31 d2                	xor    edx,edx
c001c32f:	5b                   	pop    ebx
c001c330:	31 c0                	xor    eax,eax
c001c332:	5e                   	pop    esi
c001c333:	5f                   	pop    edi
c001c334:	c3                   	ret    

c001c335 <sysGetUnixTime(regs*)>:
c001c335:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c001c33a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c340:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c344:	e9 15 7b ff ff       	jmp    c0013e5e <Clock::timeInSecondsLocal()>

c001c349 <string_ends_with(char const*, char const*)>:
c001c349:	57                   	push   edi
c001c34a:	56                   	push   esi
c001c34b:	53                   	push   ebx
c001c34c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c350:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c354:	83 ec 0c             	sub    esp,0xc
c001c357:	53                   	push   ebx
c001c358:	e8 37 44 fe ff       	call   c0000794 <strlen>
c001c35d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c360:	89 c6                	mov    esi,eax
c001c362:	e8 2d 44 fe ff       	call   c0000794 <strlen>
c001c367:	83 c4 10             	add    esp,0x10
c001c36a:	39 c6                	cmp    esi,eax
c001c36c:	7d 06                	jge    c001c374 <string_ends_with(char const*, char const*)+0x2b>
c001c36e:	5b                   	pop    ebx
c001c36f:	31 c0                	xor    eax,eax
c001c371:	5e                   	pop    esi
c001c372:	5f                   	pop    edi
c001c373:	c3                   	ret    
c001c374:	83 ec 08             	sub    esp,0x8
c001c377:	29 c6                	sub    esi,eax
c001c379:	57                   	push   edi
c001c37a:	01 f3                	add    ebx,esi
c001c37c:	53                   	push   ebx
c001c37d:	e8 3e 45 fe ff       	call   c00008c0 <strcmp>
c001c382:	83 c4 10             	add    esp,0x10
c001c385:	85 c0                	test   eax,eax
c001c387:	5b                   	pop    ebx
c001c388:	0f 94 c0             	sete   al
c001c38b:	5e                   	pop    esi
c001c38c:	0f b6 c0             	movzx  eax,al
c001c38f:	5f                   	pop    edi
c001c390:	c3                   	ret    

c001c391 <sysCallOpen(regs*)>:
c001c391:	56                   	push   esi
c001c392:	53                   	push   ebx
c001c393:	81 ec 04 01 00 00    	sub    esp,0x104
c001c399:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c3a0:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c3a3:	85 c9                	test   ecx,ecx
c001c3a5:	0f 84 b3 00 00 00    	je     c001c45e <sysCallOpen(regs*)+0xcd>
c001c3ab:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c3ae:	85 c0                	test   eax,eax
c001c3b0:	0f 84 a8 00 00 00    	je     c001c45e <sysCallOpen(regs*)+0xcd>
c001c3b6:	52                   	push   edx
c001c3b7:	68 71 c0 02 c0       	push   0xc002c071
c001c3bc:	50                   	push   eax
c001c3bd:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c3c1:	56                   	push   esi
c001c3c2:	e8 03 6f ff ff       	call   c00132ca <Fs::standardiseFiles(char*, char const*, char const*)>
c001c3c7:	89 34 24             	mov    DWORD PTR [esp],esi
c001c3ca:	e8 c5 43 fe ff       	call   c0000794 <strlen>
c001c3cf:	83 c4 10             	add    esp,0x10
c001c3d2:	48                   	dec    eax
c001c3d3:	74 1d                	je     c001c3f2 <sysCallOpen(regs*)+0x61>
c001c3d5:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c3d8:	eb 0f                	jmp    c001c3e9 <sysCallOpen(regs*)+0x58>
c001c3da:	80 fa 3a             	cmp    dl,0x3a
c001c3dd:	74 0f                	je     c001c3ee <sysCallOpen(regs*)+0x5d>
c001c3df:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c3e3:	48                   	dec    eax
c001c3e4:	74 0c                	je     c001c3f2 <sysCallOpen(regs*)+0x61>
c001c3e6:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c3e9:	80 fa 2e             	cmp    dl,0x2e
c001c3ec:	75 ec                	jne    c001c3da <sysCallOpen(regs*)+0x49>
c001c3ee:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c3f2:	83 ec 08             	sub    esp,0x8
c001c3f5:	68 75 c0 02 c0       	push   0xc002c075
c001c3fa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c3fd:	e8 47 ff ff ff       	call   c001c349 <string_ends_with(char const*, char const*)>
c001c402:	83 c4 10             	add    esp,0x10
c001c405:	85 c0                	test   eax,eax
c001c407:	75 17                	jne    c001c420 <sysCallOpen(regs*)+0x8f>
c001c409:	83 ec 08             	sub    esp,0x8
c001c40c:	68 96 c0 02 c0       	push   0xc002c096
c001c411:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c414:	e8 30 ff ff ff       	call   c001c349 <string_ends_with(char const*, char const*)>
c001c419:	83 c4 10             	add    esp,0x10
c001c41c:	85 c0                	test   eax,eax
c001c41e:	74 51                	je     c001c471 <sysCallOpen(regs*)+0xe0>
c001c420:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c423:	83 ec 08             	sub    esp,0x8
c001c426:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c42c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c433:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c436:	ff 30                	push   DWORD PTR [eax]
c001c438:	68 7a c0 02 c0       	push   0xc002c07a
c001c43d:	e8 da 6a ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001c442:	c7 04 24 89 c0 02 c0 	mov    DWORD PTR [esp],0xc002c089
c001c449:	e8 ce 6a ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001c44e:	83 c4 10             	add    esp,0x10
c001c451:	81 c4 04 01 00 00    	add    esp,0x104
c001c457:	31 c0                	xor    eax,eax
c001c459:	31 d2                	xor    edx,edx
c001c45b:	5b                   	pop    ebx
c001c45c:	5e                   	pop    esi
c001c45d:	c3                   	ret    
c001c45e:	81 c4 04 01 00 00    	add    esp,0x104
c001c464:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c469:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c46e:	5b                   	pop    ebx
c001c46f:	5e                   	pop    esi
c001c470:	c3                   	ret    
c001c471:	83 ec 08             	sub    esp,0x8
c001c474:	68 76 c0 02 c0       	push   0xc002c076
c001c479:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c47c:	e8 3f 44 fe ff       	call   c00008c0 <strcmp>
c001c481:	83 c4 10             	add    esp,0x10
c001c484:	85 c0                	test   eax,eax
c001c486:	74 98                	je     c001c420 <sysCallOpen(regs*)+0x8f>
c001c488:	83 ec 08             	sub    esp,0x8
c001c48b:	68 75 c0 02 c0       	push   0xc002c075
c001c490:	56                   	push   esi
c001c491:	e8 b3 fe ff ff       	call   c001c349 <string_ends_with(char const*, char const*)>
c001c496:	83 c4 10             	add    esp,0x10
c001c499:	85 c0                	test   eax,eax
c001c49b:	75 83                	jne    c001c420 <sysCallOpen(regs*)+0x8f>
c001c49d:	83 ec 08             	sub    esp,0x8
c001c4a0:	68 9b c0 02 c0       	push   0xc002c09b
c001c4a5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4a8:	e8 9c fe ff ff       	call   c001c349 <string_ends_with(char const*, char const*)>
c001c4ad:	83 c4 10             	add    esp,0x10
c001c4b0:	85 c0                	test   eax,eax
c001c4b2:	0f 85 d9 00 00 00    	jne    c001c591 <sysCallOpen(regs*)+0x200>
c001c4b8:	83 ec 08             	sub    esp,0x8
c001c4bb:	68 a0 c0 02 c0       	push   0xc002c0a0
c001c4c0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4c3:	e8 81 fe ff ff       	call   c001c349 <string_ends_with(char const*, char const*)>
c001c4c8:	83 c4 10             	add    esp,0x10
c001c4cb:	85 c0                	test   eax,eax
c001c4cd:	0f 85 be 00 00 00    	jne    c001c591 <sysCallOpen(regs*)+0x200>
c001c4d3:	83 ec 08             	sub    esp,0x8
c001c4d6:	68 9c c0 02 c0       	push   0xc002c09c
c001c4db:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4de:	e8 dd 43 fe ff       	call   c00008c0 <strcmp>
c001c4e3:	83 c4 10             	add    esp,0x10
c001c4e6:	85 c0                	test   eax,eax
c001c4e8:	0f 84 a3 00 00 00    	je     c001c591 <sysCallOpen(regs*)+0x200>
c001c4ee:	83 ec 08             	sub    esp,0x8
c001c4f1:	68 9b c0 02 c0       	push   0xc002c09b
c001c4f6:	56                   	push   esi
c001c4f7:	e8 4d fe ff ff       	call   c001c349 <string_ends_with(char const*, char const*)>
c001c4fc:	83 c4 10             	add    esp,0x10
c001c4ff:	85 c0                	test   eax,eax
c001c501:	0f 85 8a 00 00 00    	jne    c001c591 <sysCallOpen(regs*)+0x200>
c001c507:	83 ec 0c             	sub    esp,0xc
c001c50a:	68 14 01 00 00       	push   0x114
c001c50f:	e8 2c 33 ff ff       	call   c000f840 <malloc>
c001c514:	83 c4 0c             	add    esp,0xc
c001c517:	89 c6                	mov    esi,eax
c001c519:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c51e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c521:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c524:	56                   	push   esi
c001c525:	e8 4a 6f ff ff       	call   c0013474 <File::File(char const*, Process*)>
c001c52a:	83 c4 10             	add    esp,0x10
c001c52d:	85 f6                	test   esi,esi
c001c52f:	0f 84 29 ff ff ff    	je     c001c45e <sysCallOpen(regs*)+0xcd>
c001c535:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c538:	0f b6 c2             	movzx  eax,dl
c001c53b:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c53e:	89 d0                	mov    eax,edx
c001c540:	83 e0 01             	and    eax,0x1
c001c543:	f6 c2 02             	test   dl,0x2
c001c546:	74 03                	je     c001c54b <sysCallOpen(regs*)+0x1ba>
c001c548:	83 c8 02             	or     eax,0x2
c001c54b:	f6 c2 04             	test   dl,0x4
c001c54e:	74 03                	je     c001c553 <sysCallOpen(regs*)+0x1c2>
c001c550:	83 c8 04             	or     eax,0x4
c001c553:	f6 c2 08             	test   dl,0x8
c001c556:	74 03                	je     c001c55b <sysCallOpen(regs*)+0x1ca>
c001c558:	83 c8 0a             	or     eax,0xa
c001c55b:	83 e2 10             	and    edx,0x10
c001c55e:	74 03                	je     c001c563 <sysCallOpen(regs*)+0x1d2>
c001c560:	83 c8 12             	or     eax,0x12
c001c563:	83 ec 08             	sub    esp,0x8
c001c566:	50                   	push   eax
c001c567:	56                   	push   esi
c001c568:	e8 6b 6f ff ff       	call   c00134d8 <File::open(FileOpenMode)>
c001c56d:	83 c4 10             	add    esp,0x10
c001c570:	85 c0                	test   eax,eax
c001c572:	0f 85 e6 fe ff ff    	jne    c001c45e <sysCallOpen(regs*)+0xcd>
c001c578:	83 ec 0c             	sub    esp,0xc
c001c57b:	56                   	push   esi
c001c57c:	e8 bf 51 ff ff       	call   c0011740 <UnixFile::getFileDescriptor()>
c001c581:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c584:	89 02                	mov    DWORD PTR [edx],eax
c001c586:	c1 f8 1f             	sar    eax,0x1f
c001c589:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c58c:	e9 bd fe ff ff       	jmp    c001c44e <sysCallOpen(regs*)+0xbd>
c001c591:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c594:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c59a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c5a1:	e9 ab fe ff ff       	jmp    c001c451 <sysCallOpen(regs*)+0xc0>

c001c5a6 <Sys::loadSyscalls()>:
c001c5a6:	c7 05 20 11 03 c0 b3 b6 01 c0 	mov    DWORD PTR ds:0xc0031120,0xc001b6b3
c001c5b0:	c7 05 24 11 03 c0 52 b2 01 c0 	mov    DWORD PTR ds:0xc0031124,0xc001b252
c001c5ba:	c7 05 28 11 03 c0 bc b3 01 c0 	mov    DWORD PTR ds:0xc0031128,0xc001b3bc
c001c5c4:	c7 05 2c 11 03 c0 e9 b5 01 c0 	mov    DWORD PTR ds:0xc003112c,0xc001b5e9
c001c5ce:	c7 05 30 11 03 c0 54 b3 01 c0 	mov    DWORD PTR ds:0xc0031130,0xc001b354
c001c5d8:	c7 05 34 11 03 c0 89 b2 01 c0 	mov    DWORD PTR ds:0xc0031134,0xc001b289
c001c5e2:	c7 05 38 11 03 c0 6a b2 01 c0 	mov    DWORD PTR ds:0xc0031138,0xc001b26a
c001c5ec:	c7 05 3c 11 03 c0 5b b4 01 c0 	mov    DWORD PTR ds:0xc003113c,0xc001b45b
c001c5f6:	c7 05 44 11 03 c0 e3 bb 01 c0 	mov    DWORD PTR ds:0xc0031144,0xc001bbe3
c001c600:	c7 05 40 11 03 c0 91 c3 01 c0 	mov    DWORD PTR ds:0xc0031140,0xc001c391
c001c60a:	c7 05 48 11 03 c0 6b bc 01 c0 	mov    DWORD PTR ds:0xc0031148,0xc001bc6b
c001c614:	c7 05 4c 11 03 c0 d2 b8 01 c0 	mov    DWORD PTR ds:0xc003114c,0xc001b8d2
c001c61e:	c7 05 50 11 03 c0 ee b6 01 c0 	mov    DWORD PTR ds:0xc0031150,0xc001b6ee
c001c628:	c7 05 54 11 03 c0 f3 b6 01 c0 	mov    DWORD PTR ds:0xc0031154,0xc001b6f3
c001c632:	c7 05 58 11 03 c0 46 bd 01 c0 	mov    DWORD PTR ds:0xc0031158,0xc001bd46
c001c63c:	c7 05 5c 11 03 c0 e0 bc 01 c0 	mov    DWORD PTR ds:0xc003115c,0xc001bce0
c001c646:	c7 05 60 11 03 c0 ba b9 01 c0 	mov    DWORD PTR ds:0xc0031160,0xc001b9ba
c001c650:	c7 05 64 11 03 c0 23 ba 01 c0 	mov    DWORD PTR ds:0xc0031164,0xc001ba23
c001c65a:	c7 05 68 11 03 c0 a0 ba 01 c0 	mov    DWORD PTR ds:0xc0031168,0xc001baa0
c001c664:	c7 05 6c 11 03 c0 f8 b6 01 c0 	mov    DWORD PTR ds:0xc003116c,0xc001b6f8
c001c66e:	c7 05 70 11 03 c0 b6 bd 01 c0 	mov    DWORD PTR ds:0xc0031170,0xc001bdb6
c001c678:	c7 05 74 11 03 c0 d0 bd 01 c0 	mov    DWORD PTR ds:0xc0031174,0xc001bdd0
c001c682:	c7 05 78 11 03 c0 d0 bd 01 c0 	mov    DWORD PTR ds:0xc0031178,0xc001bdd0
c001c68c:	c7 05 7c 11 03 c0 11 be 01 c0 	mov    DWORD PTR ds:0xc003117c,0xc001be11
c001c696:	c7 05 80 11 03 c0 75 be 01 c0 	mov    DWORD PTR ds:0xc0031180,0xc001be75
c001c6a0:	c7 05 84 11 03 c0 a4 b8 01 c0 	mov    DWORD PTR ds:0xc0031184,0xc001b8a4
c001c6aa:	c7 05 88 11 03 c0 d9 be 01 c0 	mov    DWORD PTR ds:0xc0031188,0xc001bed9
c001c6b4:	c7 05 8c 11 03 c0 61 b8 01 c0 	mov    DWORD PTR ds:0xc003118c,0xc001b861
c001c6be:	c7 05 90 11 03 c0 25 bf 01 c0 	mov    DWORD PTR ds:0xc0031190,0xc001bf25
c001c6c8:	c7 05 94 11 03 c0 60 b9 01 c0 	mov    DWORD PTR ds:0xc0031194,0xc001b960
c001c6d2:	c7 05 98 11 03 c0 a8 bf 01 c0 	mov    DWORD PTR ds:0xc0031198,0xc001bfa8
c001c6dc:	c7 05 9c 11 03 c0 23 bb 01 c0 	mov    DWORD PTR ds:0xc003119c,0xc001bb23
c001c6e6:	c7 05 a0 11 03 c0 cf bf 01 c0 	mov    DWORD PTR ds:0xc00311a0,0xc001bfcf
c001c6f0:	c7 05 a4 11 03 c0 27 c0 01 c0 	mov    DWORD PTR ds:0xc00311a4,0xc001c027
c001c6fa:	c7 05 a8 11 03 c0 5f c1 01 c0 	mov    DWORD PTR ds:0xc00311a8,0xc001c15f
c001c704:	c7 05 ac 11 03 c0 02 b7 01 c0 	mov    DWORD PTR ds:0xc00311ac,0xc001b702
c001c70e:	c7 05 b0 11 03 c0 6c b7 01 c0 	mov    DWORD PTR ds:0xc00311b0,0xc001b76c
c001c718:	c7 05 b4 11 03 c0 b2 b7 01 c0 	mov    DWORD PTR ds:0xc00311b4,0xc001b7b2
c001c722:	c7 05 b8 11 03 c0 7e c2 01 c0 	mov    DWORD PTR ds:0xc00311b8,0xc001c27e
c001c72c:	c7 05 bc 11 03 c0 eb bd 01 c0 	mov    DWORD PTR ds:0xc00311bc,0xc001bdeb
c001c736:	c7 05 c0 11 03 c0 03 b8 01 c0 	mov    DWORD PTR ds:0xc00311c0,0xc001b803
c001c740:	c7 05 c4 11 03 c0 f0 c2 01 c0 	mov    DWORD PTR ds:0xc00311c4,0xc001c2f0
c001c74a:	c7 05 c8 11 03 c0 35 c3 01 c0 	mov    DWORD PTR ds:0xc00311c8,0xc001c335
c001c754:	c7 05 cc 11 03 c0 ac b2 01 c0 	mov    DWORD PTR ds:0xc00311cc,0xc001b2ac
c001c75e:	c7 05 d0 11 03 c0 77 b4 01 c0 	mov    DWORD PTR ds:0xc00311d0,0xc001b477
c001c768:	c7 05 d4 11 03 c0 9f b5 01 c0 	mov    DWORD PTR ds:0xc00311d4,0xc001b59f
c001c772:	c7 05 d8 11 03 c0 1c b2 01 c0 	mov    DWORD PTR ds:0xc00311d8,0xc001b21c
c001c77c:	c7 05 dc 11 03 c0 51 b6 01 c0 	mov    DWORD PTR ds:0xc00311dc,0xc001b651
c001c786:	c7 05 e0 11 03 c0 95 b2 01 c0 	mov    DWORD PTR ds:0xc00311e0,0xc001b295
c001c790:	c3                   	ret    

c001c791 <Sys::systemCall(regs*, void*)>:
c001c791:	53                   	push   ebx
c001c792:	83 ec 08             	sub    esp,0x8
c001c795:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c799:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c79c:	83 f8 7f             	cmp    eax,0x7f
c001c79f:	77 16                	ja     c001c7b7 <Sys::systemCall(regs*, void*)+0x26>
c001c7a1:	8b 14 85 20 11 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffceee0]
c001c7a8:	85 d2                	test   edx,edx
c001c7aa:	74 0b                	je     c001c7b7 <Sys::systemCall(regs*, void*)+0x26>
c001c7ac:	83 ec 0c             	sub    esp,0xc
c001c7af:	53                   	push   ebx
c001c7b0:	ff d2                	call   edx
c001c7b2:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c7b5:	eb 0d                	jmp    c001c7c4 <Sys::systemCall(regs*, void*)+0x33>
c001c7b7:	52                   	push   edx
c001c7b8:	52                   	push   edx
c001c7b9:	50                   	push   eax
c001c7ba:	68 a5 c0 02 c0       	push   0xc002c0a5
c001c7bf:	e8 58 67 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001c7c4:	83 c4 10             	add    esp,0x10
c001c7c7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c7cc:	31 d2                	xor    edx,edx
c001c7ce:	83 c4 08             	add    esp,0x8
c001c7d1:	5b                   	pop    ebx
c001c7d2:	c3                   	ret    

c001c7d3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c7d3:	55                   	push   ebp
c001c7d4:	57                   	push   edi
c001c7d5:	56                   	push   esi
c001c7d6:	53                   	push   ebx
c001c7d7:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c7dd:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c7e4:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c7eb:	85 c0                	test   eax,eax
c001c7ed:	0f 95 c1             	setne  cl
c001c7f0:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c7f8:	0f 94 c2             	sete   dl
c001c7fb:	84 d1                	test   cl,dl
c001c7fd:	74 23                	je     c001c822 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c7ff:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c805:	74 1b                	je     c001c822 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c807:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c80d:	89 da                	mov    edx,ebx
c001c80f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c815:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c81b:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c822:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c829:	05 ff 0f 00 00       	add    eax,0xfff
c001c82e:	83 ec 0c             	sub    esp,0xc
c001c831:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c835:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c83b:	c1 e8 0c             	shr    eax,0xc
c001c83e:	89 ef                	mov    edi,ebp
c001c840:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c844:	c1 ef 0c             	shr    edi,0xc
c001c847:	6a 01                	push   0x1
c001c849:	e8 3d 53 ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c001c84e:	89 c6                	mov    esi,eax
c001c850:	58                   	pop    eax
c001c851:	5a                   	pop    edx
c001c852:	57                   	push   edi
c001c853:	68 2b c1 02 c0       	push   0xc002c12b
c001c858:	e8 bf 66 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001c85d:	59                   	pop    ecx
c001c85e:	58                   	pop    eax
c001c85f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c863:	68 3d c1 02 c0       	push   0xc002c13d
c001c868:	e8 af 66 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001c86d:	83 c4 10             	add    esp,0x10
c001c870:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c876:	0f 86 24 01 00 00    	jbe    c001c9a0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c87c:	c1 e7 0c             	shl    edi,0xc
c001c87f:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c882:	89 df                	mov    edi,ebx
c001c884:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c888:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c88f:	01 dd                	add    ebp,ebx
c001c891:	29 fd                	sub    ebp,edi
c001c893:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c897:	0f 84 01 01 00 00    	je     c001c99e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c89d:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c8a3:	76 05                	jbe    c001c8aa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c8a5:	bd 00 10 00 00       	mov    ebp,0x1000
c001c8aa:	83 ec 0c             	sub    esp,0xc
c001c8ad:	31 d2                	xor    edx,edx
c001c8af:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c8b6:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c8b8:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c8bc:	50                   	push   eax
c001c8bd:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c8c1:	50                   	push   eax
c001c8c2:	52                   	push   edx
c001c8c3:	55                   	push   ebp
c001c8c4:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c8cb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c8ce:	83 c4 20             	add    esp,0x20
c001c8d1:	85 c0                	test   eax,eax
c001c8d3:	74 0a                	je     c001c8df <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c8d5:	53                   	push   ebx
c001c8d6:	53                   	push   ebx
c001c8d7:	50                   	push   eax
c001c8d8:	68 4f c1 02 c0       	push   0xc002c14f
c001c8dd:	eb 0f                	jmp    c001c8ee <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c8df:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c8e3:	74 20                	je     c001c905 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c8e5:	51                   	push   ecx
c001c8e6:	51                   	push   ecx
c001c8e7:	6a 00                	push   0x0
c001c8e9:	68 7a c1 02 c0       	push   0xc002c17a
c001c8ee:	e8 29 66 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001c8f3:	89 34 24             	mov    DWORD PTR [esp],esi
c001c8f6:	e8 00 57 ff ff       	call   c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c001c8fb:	83 c4 10             	add    esp,0x10
c001c8fe:	31 c0                	xor    eax,eax
c001c900:	e9 55 01 00 00       	jmp    c001ca5a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c905:	e8 d8 14 00 00       	call   c001dde2 <lockScheduler()>
c001c90a:	e8 d3 35 ff ff       	call   c000fee2 <Phys::allocatePage()>
c001c90f:	6a 07                	push   0x7
c001c911:	89 c5                	mov    ebp,eax
c001c913:	56                   	push   esi
c001c914:	50                   	push   eax
c001c915:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c91a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c91d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c923:	e8 3a 5a ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c928:	83 c4 0c             	add    esp,0xc
c001c92b:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c932:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c938:	6a 00                	push   0x0
c001c93a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c93f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c942:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c948:	e8 7f 58 ff ff       	call   c00121cc <VAS::mapOtherVASIn(bool, VAS*)>
c001c94d:	58                   	pop    eax
c001c94e:	5a                   	pop    edx
c001c94f:	68 07 0c 00 00       	push   0xc07
c001c954:	57                   	push   edi
c001c955:	81 c7 00 10 00 00    	add    edi,0x1000
c001c95b:	55                   	push   ebp
c001c95c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c963:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c969:	6a 00                	push   0x0
c001c96b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c970:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c973:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c979:	e8 9e 5d ff ff       	call   c001271c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c97e:	83 c4 1c             	add    esp,0x1c
c001c981:	68 00 10 00 00       	push   0x1000
c001c986:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c98a:	50                   	push   eax
c001c98b:	56                   	push   esi
c001c98c:	e8 b3 3d fe ff       	call   c0000744 <memcpy>
c001c991:	e8 4e 14 00 00       	call   c001dde4 <unlockScheduler()>
c001c996:	83 c4 10             	add    esp,0x10
c001c999:	e9 ea fe ff ff       	jmp    c001c888 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001c99e:	89 fb                	mov    ebx,edi
c001c9a0:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c9a8:	0f 86 9e 00 00 00    	jbe    c001ca4c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001c9ae:	e8 2f 14 00 00       	call   c001dde2 <lockScheduler()>
c001c9b3:	51                   	push   ecx
c001c9b4:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c9bb:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9c1:	6a 00                	push   0x0
c001c9c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9c8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9cb:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9d1:	e8 f6 57 ff ff       	call   c00121cc <VAS::mapOtherVASIn(bool, VAS*)>
c001c9d6:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c9da:	c1 e7 0c             	shl    edi,0xc
c001c9dd:	01 df                	add    edi,ebx
c001c9df:	83 c4 10             	add    esp,0x10
c001c9e2:	39 fb                	cmp    ebx,edi
c001c9e4:	74 61                	je     c001ca47 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001c9e6:	e8 f7 34 ff ff       	call   c000fee2 <Phys::allocatePage()>
c001c9eb:	6a 07                	push   0x7
c001c9ed:	89 c5                	mov    ebp,eax
c001c9ef:	56                   	push   esi
c001c9f0:	50                   	push   eax
c001c9f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9f6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9f9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9ff:	e8 5e 59 ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ca04:	58                   	pop    eax
c001ca05:	5a                   	pop    edx
c001ca06:	68 07 0c 00 00       	push   0xc07
c001ca0b:	53                   	push   ebx
c001ca0c:	81 c3 00 10 00 00    	add    ebx,0x1000
c001ca12:	55                   	push   ebp
c001ca13:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ca1a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca20:	6a 00                	push   0x0
c001ca22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca27:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca2a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca30:	e8 e7 5c ff ff       	call   c001271c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ca35:	83 c4 1c             	add    esp,0x1c
c001ca38:	68 00 10 00 00       	push   0x1000
c001ca3d:	6a 00                	push   0x0
c001ca3f:	56                   	push   esi
c001ca40:	e8 33 3d fe ff       	call   c0000778 <memset>
c001ca45:	eb 98                	jmp    c001c9df <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001ca47:	e8 98 13 00 00       	call   c001dde4 <unlockScheduler()>
c001ca4c:	83 ec 0c             	sub    esp,0xc
c001ca4f:	56                   	push   esi
c001ca50:	e8 a6 55 ff ff       	call   c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c001ca55:	83 c4 10             	add    esp,0x10
c001ca58:	b0 01                	mov    al,0x1
c001ca5a:	81 c4 2c 10 00 00    	add    esp,0x102c
c001ca60:	5b                   	pop    ebx
c001ca61:	5e                   	pop    esi
c001ca62:	5f                   	pop    edi
c001ca63:	5d                   	pop    ebp
c001ca64:	c3                   	ret    

c001ca65 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001ca65:	55                   	push   ebp
c001ca66:	57                   	push   edi
c001ca67:	56                   	push   esi
c001ca68:	53                   	push   ebx
c001ca69:	83 ec 48             	sub    esp,0x48
c001ca6c:	68 14 01 00 00       	push   0x114
c001ca71:	e8 ca 2d ff ff       	call   c000f840 <malloc>
c001ca76:	83 c4 0c             	add    esp,0xc
c001ca79:	89 c6                	mov    esi,eax
c001ca7b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001ca7f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001ca83:	50                   	push   eax
c001ca84:	e8 eb 69 ff ff       	call   c0013474 <File::File(char const*, Process*)>
c001ca89:	58                   	pop    eax
c001ca8a:	5a                   	pop    edx
c001ca8b:	6a 01                	push   0x1
c001ca8d:	56                   	push   esi
c001ca8e:	e8 45 6a ff ff       	call   c00134d8 <File::open(FileOpenMode)>
c001ca93:	83 c4 10             	add    esp,0x10
c001ca96:	85 c0                	test   eax,eax
c001ca98:	0f 85 47 01 00 00    	jne    c001cbe5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca9e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001caa6:	83 ec 0c             	sub    esp,0xc
c001caa9:	6a 34                	push   0x34
c001caab:	e8 90 2d ff ff       	call   c000f840 <malloc>
c001cab0:	89 c3                	mov    ebx,eax
c001cab2:	58                   	pop    eax
c001cab3:	8b 06                	mov    eax,DWORD PTR [esi]
c001cab5:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001cab9:	57                   	push   edi
c001caba:	53                   	push   ebx
c001cabb:	6a 00                	push   0x0
c001cabd:	6a 34                	push   0x34
c001cabf:	56                   	push   esi
c001cac0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cac3:	83 c4 20             	add    esp,0x20
c001cac6:	85 c0                	test   eax,eax
c001cac8:	0f 85 17 01 00 00    	jne    c001cbe5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cace:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cad4:	0f 85 0b 01 00 00    	jne    c001cbe5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cada:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cadd:	85 c0                	test   eax,eax
c001cadf:	0f 84 00 01 00 00    	je     c001cbe5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cae5:	31 d2                	xor    edx,edx
c001cae7:	55                   	push   ebp
c001cae8:	52                   	push   edx
c001cae9:	50                   	push   eax
c001caea:	56                   	push   esi
c001caeb:	e8 a6 6a ff ff       	call   c0013596 <File::seek(unsigned long long)>
c001caf0:	83 c4 10             	add    esp,0x10
c001caf3:	85 c0                	test   eax,eax
c001caf5:	0f 85 ea 00 00 00    	jne    c001cbe5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cafb:	83 ec 0c             	sub    esp,0xc
c001cafe:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cb01:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb05:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cb09:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb0d:	0f af c2             	imul   eax,edx
c001cb10:	50                   	push   eax
c001cb11:	e8 2a 2d ff ff       	call   c000f840 <malloc>
c001cb16:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb18:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb1c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb1f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb23:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb27:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb2b:	0f af c2             	imul   eax,edx
c001cb2e:	99                   	cdq    
c001cb2f:	52                   	push   edx
c001cb30:	50                   	push   eax
c001cb31:	56                   	push   esi
c001cb32:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb35:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cb38:	83 c4 20             	add    esp,0x20
c001cb3b:	85 c0                	test   eax,eax
c001cb3d:	0f 84 a2 00 00 00    	je     c001cbe5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb43:	31 d2                	xor    edx,edx
c001cb45:	51                   	push   ecx
c001cb46:	52                   	push   edx
c001cb47:	50                   	push   eax
c001cb48:	56                   	push   esi
c001cb49:	e8 48 6a ff ff       	call   c0013596 <File::seek(unsigned long long)>
c001cb4e:	83 c4 10             	add    esp,0x10
c001cb51:	85 c0                	test   eax,eax
c001cb53:	0f 85 8c 00 00 00    	jne    c001cbe5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb59:	83 ec 0c             	sub    esp,0xc
c001cb5c:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cb60:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cb64:	31 ed                	xor    ebp,ebp
c001cb66:	0f af c2             	imul   eax,edx
c001cb69:	50                   	push   eax
c001cb6a:	e8 d1 2c ff ff       	call   c000f840 <malloc>
c001cb6f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb71:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb75:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb7c:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cb80:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cb84:	0f af c2             	imul   eax,edx
c001cb87:	99                   	cdq    
c001cb88:	52                   	push   edx
c001cb89:	50                   	push   eax
c001cb8a:	56                   	push   esi
c001cb8b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb8e:	83 c4 20             	add    esp,0x20
c001cb91:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cb99:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cb9d:	0f 86 80 00 00 00    	jbe    c001cc23 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cba3:	0f b7 fd             	movzx  edi,bp
c001cba6:	c1 e7 05             	shl    edi,0x5
c001cba9:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cbad:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cbb0:	75 6b                	jne    c001cc1d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cbb2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cbb5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cbb9:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cbbc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cbc0:	52                   	push   edx
c001cbc1:	31 d2                	xor    edx,edx
c001cbc3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cbc6:	52                   	push   edx
c001cbc7:	50                   	push   eax
c001cbc8:	56                   	push   esi
c001cbc9:	e8 c8 69 ff ff       	call   c0013596 <File::seek(unsigned long long)>
c001cbce:	83 c4 10             	add    esp,0x10
c001cbd1:	85 c0                	test   eax,eax
c001cbd3:	74 17                	je     c001cbec <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cbd5:	83 ec 0c             	sub    esp,0xc
c001cbd8:	68 a6 c1 02 c0       	push   0xc002c1a6
c001cbdd:	e8 3a 63 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001cbe2:	83 c4 10             	add    esp,0x10
c001cbe5:	31 c0                	xor    eax,eax
c001cbe7:	e9 87 00 00 00       	jmp    c001cc73 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cbec:	83 ec 0c             	sub    esp,0xc
c001cbef:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cbf2:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cbf5:	50                   	push   eax
c001cbf6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cbfa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cbfe:	56                   	push   esi
c001cbff:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cc03:	e8 cb fb ff ff       	call   c001c7d3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cc08:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cc0c:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cc10:	83 c4 20             	add    esp,0x20
c001cc13:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cc17:	73 04                	jae    c001cc1d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cc1d:	45                   	inc    ebp
c001cc1e:	e9 76 ff ff ff       	jmp    c001cb99 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cc23:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cc27:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc2b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc2f:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cc35:	83 ec 0c             	sub    esp,0xc
c001cc38:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cc3e:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cc43:	05 00 10 00 00       	add    eax,0x1000
c001cc48:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cc4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc4f:	e8 fc 2b ff ff       	call   c000f850 <free>
c001cc54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc57:	e8 f4 2b ff ff       	call   c000f850 <free>
c001cc5c:	58                   	pop    eax
c001cc5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc61:	e8 ea 2b ff ff       	call   c000f850 <free>
c001cc66:	89 34 24             	mov    DWORD PTR [esp],esi
c001cc69:	e8 c8 68 ff ff       	call   c0013536 <File::close()>
c001cc6e:	83 c4 10             	add    esp,0x10
c001cc71:	b0 01                	mov    al,0x1
c001cc73:	83 c4 3c             	add    esp,0x3c
c001cc76:	5b                   	pop    ebx
c001cc77:	5e                   	pop    esi
c001cc78:	5f                   	pop    edi
c001cc79:	5d                   	pop    ebp
c001cc7a:	c3                   	ret    

c001cc7b <Thr::runtimeReferenceHelper()>:
c001cc7b:	83 ec 18             	sub    esp,0x18
c001cc7e:	68 ae c1 02 c0       	push   0xc002c1ae
c001cc83:	e8 94 62 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001cc88:	fa                   	cli    
c001cc89:	83 c4 10             	add    esp,0x10
c001cc8c:	eb fe                	jmp    c001cc8c <Thr::runtimeReferenceHelper()+0x11>

c001cc8e <Thr::getAddressOfKernelSymbol(char const*)>:
c001cc8e:	57                   	push   edi
c001cc8f:	56                   	push   esi
c001cc90:	53                   	push   ebx
c001cc91:	31 db                	xor    ebx,ebx
c001cc93:	39 1d c0 1a 03 c0    	cmp    DWORD PTR ds:0xc0031ac0,ebx
c001cc99:	7e 3c                	jle    c001ccd7 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cc9b:	8b 34 9d 40 1a 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce5c0]
c001cca2:	31 ff                	xor    edi,edi
c001cca4:	39 3c 9d 40 19 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce6c0],edi
c001ccab:	7e 27                	jle    c001ccd4 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001ccad:	50                   	push   eax
c001ccae:	50                   	push   eax
c001ccaf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ccb3:	8b 06                	mov    eax,DWORD PTR [esi]
c001ccb5:	03 04 9d c0 19 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce640]
c001ccbc:	50                   	push   eax
c001ccbd:	e8 fe 3b fe ff       	call   c00008c0 <strcmp>
c001ccc2:	83 c4 10             	add    esp,0x10
c001ccc5:	85 c0                	test   eax,eax
c001ccc7:	75 05                	jne    c001ccce <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001ccc9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cccc:	eb 0b                	jmp    c001ccd9 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001ccce:	83 c6 10             	add    esi,0x10
c001ccd1:	47                   	inc    edi
c001ccd2:	eb d0                	jmp    c001cca4 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001ccd4:	43                   	inc    ebx
c001ccd5:	eb bc                	jmp    c001cc93 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001ccd7:	31 c0                	xor    eax,eax
c001ccd9:	5b                   	pop    ebx
c001ccda:	5e                   	pop    esi
c001ccdb:	5f                   	pop    edi
c001ccdc:	c3                   	ret    

c001ccdd <Thr::loadKernelSymbolTable(char const*)>:
c001ccdd:	55                   	push   ebp
c001ccde:	57                   	push   edi
c001ccdf:	56                   	push   esi
c001cce0:	53                   	push   ebx
c001cce1:	83 ec 68             	sub    esp,0x68
c001cce4:	8b 35 14 1b 03 c0    	mov    esi,DWORD PTR ds:0xc0031b14
c001ccea:	68 14 01 00 00       	push   0x114
c001ccef:	e8 4c 2b ff ff       	call   c000f840 <malloc>
c001ccf4:	83 c4 0c             	add    esp,0xc
c001ccf7:	89 c3                	mov    ebx,eax
c001ccf9:	56                   	push   esi
c001ccfa:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001ccfe:	50                   	push   eax
c001ccff:	e8 70 67 ff ff       	call   c0013474 <File::File(char const*, Process*)>
c001cd04:	5e                   	pop    esi
c001cd05:	5f                   	pop    edi
c001cd06:	6a 01                	push   0x1
c001cd08:	53                   	push   ebx
c001cd09:	e8 ca 67 ff ff       	call   c00134d8 <File::open(FileOpenMode)>
c001cd0e:	83 c4 10             	add    esp,0x10
c001cd11:	85 c0                	test   eax,eax
c001cd13:	74 0a                	je     c001cd1f <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cd15:	83 ec 0c             	sub    esp,0xc
c001cd18:	68 d0 c1 02 c0       	push   0xc002c1d0
c001cd1d:	eb 34                	jmp    c001cd53 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cd1f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cd27:	83 ec 0c             	sub    esp,0xc
c001cd2a:	6a 34                	push   0x34
c001cd2c:	e8 0f 2b ff ff       	call   c000f840 <malloc>
c001cd31:	59                   	pop    ecx
c001cd32:	89 c7                	mov    edi,eax
c001cd34:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cd38:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd3a:	56                   	push   esi
c001cd3b:	57                   	push   edi
c001cd3c:	6a 00                	push   0x0
c001cd3e:	6a 34                	push   0x34
c001cd40:	53                   	push   ebx
c001cd41:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd44:	83 c4 20             	add    esp,0x20
c001cd47:	85 c0                	test   eax,eax
c001cd49:	74 17                	je     c001cd62 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cd4b:	83 ec 0c             	sub    esp,0xc
c001cd4e:	68 e7 c1 02 c0       	push   0xc002c1e7
c001cd53:	e8 65 d8 ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c001cd58:	83 c4 10             	add    esp,0x10
c001cd5b:	31 c0                	xor    eax,eax
c001cd5d:	e9 31 02 00 00       	jmp    c001cf93 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cd62:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cd68:	75 e1                	jne    c001cd4b <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd6a:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cd6d:	85 c0                	test   eax,eax
c001cd6f:	74 da                	je     c001cd4b <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd71:	52                   	push   edx
c001cd72:	31 d2                	xor    edx,edx
c001cd74:	52                   	push   edx
c001cd75:	50                   	push   eax
c001cd76:	53                   	push   ebx
c001cd77:	e8 1a 68 ff ff       	call   c0013596 <File::seek(unsigned long long)>
c001cd7c:	83 c4 10             	add    esp,0x10
c001cd7f:	85 c0                	test   eax,eax
c001cd81:	75 c8                	jne    c001cd4b <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd83:	83 ec 0c             	sub    esp,0xc
c001cd86:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cd8a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd8e:	31 ed                	xor    ebp,ebp
c001cd90:	0f af c2             	imul   eax,edx
c001cd93:	50                   	push   eax
c001cd94:	e8 a7 2a ff ff       	call   c000f840 <malloc>
c001cd99:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cd9b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cd9f:	89 34 24             	mov    DWORD PTR [esp],esi
c001cda2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cda6:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cdaa:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cdae:	0f af c2             	imul   eax,edx
c001cdb1:	99                   	cdq    
c001cdb2:	52                   	push   edx
c001cdb3:	50                   	push   eax
c001cdb4:	53                   	push   ebx
c001cdb5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cdb8:	83 c4 20             	add    esp,0x20
c001cdbb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cdc3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cdcb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cdd3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cddb:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cddf:	0f 86 aa 00 00 00    	jbe    c001ce8f <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cde5:	0f b7 f5             	movzx  esi,bp
c001cde8:	6b f6 28             	imul   esi,esi,0x28
c001cdeb:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cdef:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cdf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cdf6:	50                   	push   eax
c001cdf7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cdfb:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001cdff:	8b 16                	mov    edx,DWORD PTR [esi]
c001ce01:	6b c0 28             	imul   eax,eax,0x28
c001ce04:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001ce08:	89 d0                	mov    eax,edx
c001ce0a:	31 d2                	xor    edx,edx
c001ce0c:	52                   	push   edx
c001ce0d:	50                   	push   eax
c001ce0e:	53                   	push   ebx
c001ce0f:	e8 82 67 ff ff       	call   c0013596 <File::seek(unsigned long long)>
c001ce14:	83 c4 0c             	add    esp,0xc
c001ce17:	6a 20                	push   0x20
c001ce19:	6a 00                	push   0x0
c001ce1b:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce1f:	52                   	push   edx
c001ce20:	e8 53 39 fe ff       	call   c0000778 <memset>
c001ce25:	58                   	pop    eax
c001ce26:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce28:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001ce2c:	51                   	push   ecx
c001ce2d:	8d 54 24 40          	lea    edx,[esp+0x40]
c001ce31:	52                   	push   edx
c001ce32:	6a 00                	push   0x0
c001ce34:	6a 1f                	push   0x1f
c001ce36:	53                   	push   ebx
c001ce37:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce3a:	83 c4 18             	add    esp,0x18
c001ce3d:	68 fe c1 02 c0       	push   0xc002c1fe
c001ce42:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce46:	52                   	push   edx
c001ce47:	e8 74 3a fe ff       	call   c00008c0 <strcmp>
c001ce4c:	83 c4 10             	add    esp,0x10
c001ce4f:	85 c0                	test   eax,eax
c001ce51:	75 0f                	jne    c001ce62 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001ce53:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ce5a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce5e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ce62:	50                   	push   eax
c001ce63:	50                   	push   eax
c001ce64:	68 06 c2 02 c0       	push   0xc002c206
c001ce69:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ce6d:	50                   	push   eax
c001ce6e:	e8 4d 3a fe ff       	call   c00008c0 <strcmp>
c001ce73:	83 c4 10             	add    esp,0x10
c001ce76:	85 c0                	test   eax,eax
c001ce78:	75 0f                	jne    c001ce89 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001ce7a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce7d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ce81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce85:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ce89:	45                   	inc    ebp
c001ce8a:	e9 4c ff ff ff       	jmp    c001cddb <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001ce8f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ce94:	75 10                	jne    c001cea6 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001ce96:	83 ec 0c             	sub    esp,0xc
c001ce99:	68 0e c2 02 c0       	push   0xc002c20e
c001ce9e:	e8 1a d7 ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c001cea3:	83 c4 10             	add    esp,0x10
c001cea6:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001ceab:	75 10                	jne    c001cebd <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cead:	83 ec 0c             	sub    esp,0xc
c001ceb0:	68 0e c2 02 c0       	push   0xc002c20e
c001ceb5:	e8 03 d7 ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c001ceba:	83 c4 10             	add    esp,0x10
c001cebd:	31 d2                	xor    edx,edx
c001cebf:	50                   	push   eax
c001cec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cec4:	52                   	push   edx
c001cec5:	50                   	push   eax
c001cec6:	53                   	push   ebx
c001cec7:	e8 ca 66 ff ff       	call   c0013596 <File::seek(unsigned long long)>
c001cecc:	5a                   	pop    edx
c001cecd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ced1:	e8 6a 29 ff ff       	call   c000f840 <malloc>
c001ced6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ceda:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cede:	31 c9                	xor    ecx,ecx
c001cee0:	5e                   	pop    esi
c001cee1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cee3:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cee7:	55                   	push   ebp
c001cee8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ceec:	51                   	push   ecx
c001ceed:	52                   	push   edx
c001ceee:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cef2:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cef6:	53                   	push   ebx
c001cef7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cefa:	83 c4 14             	add    esp,0x14
c001cefd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cf01:	e8 3a 29 ff ff       	call   c000f840 <malloc>
c001cf06:	89 c6                	mov    esi,eax
c001cf08:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf0a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf0d:	56                   	push   esi
c001cf0e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cf12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cf16:	51                   	push   ecx
c001cf17:	52                   	push   edx
c001cf18:	53                   	push   ebx
c001cf19:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf1c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf20:	8b 15 c0 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031ac0
c001cf26:	83 c4 1c             	add    esp,0x1c
c001cf29:	c1 e8 04             	shr    eax,0x4
c001cf2c:	89 04 95 40 19 03 c0 	mov    DWORD PTR [edx*4-0x3ffce6c0],eax
c001cf33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf37:	31 d2                	xor    edx,edx
c001cf39:	52                   	push   edx
c001cf3a:	50                   	push   eax
c001cf3b:	53                   	push   ebx
c001cf3c:	e8 55 66 ff ff       	call   c0013596 <File::seek(unsigned long long)>
c001cf41:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cf43:	31 d2                	xor    edx,edx
c001cf45:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf48:	56                   	push   esi
c001cf49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cf4d:	52                   	push   edx
c001cf4e:	50                   	push   eax
c001cf4f:	53                   	push   ebx
c001cf50:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf53:	83 c4 14             	add    esp,0x14
c001cf56:	53                   	push   ebx
c001cf57:	e8 da 65 ff ff       	call   c0013536 <File::close()>
c001cf5c:	5d                   	pop    ebp
c001cf5d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf61:	e8 ea 28 ff ff       	call   c000f850 <free>
c001cf66:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf69:	e8 e2 28 ff ff       	call   c000f850 <free>
c001cf6e:	a1 c0 1a 03 c0       	mov    eax,ds:0xc0031ac0
c001cf73:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cf77:	8d 50 01             	lea    edx,[eax+0x1]
c001cf7a:	89 0c 85 40 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5c0],ecx
c001cf81:	89 34 85 c0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce640],esi
c001cf88:	89 15 c0 1a 03 c0    	mov    DWORD PTR ds:0xc0031ac0,edx
c001cf8e:	83 c4 10             	add    esp,0x10
c001cf91:	b0 01                	mov    al,0x1
c001cf93:	83 c4 5c             	add    esp,0x5c
c001cf96:	5b                   	pop    ebx
c001cf97:	5e                   	pop    esi
c001cf98:	5f                   	pop    edi
c001cf99:	5d                   	pop    ebp
c001cf9a:	c3                   	ret    

c001cf9b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cf9b:	55                   	push   ebp
c001cf9c:	57                   	push   edi
c001cf9d:	56                   	push   esi
c001cf9e:	53                   	push   ebx
c001cf9f:	81 ec 68 03 00 00    	sub    esp,0x368
c001cfa5:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cfac:	8b 1d 14 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031b14
c001cfb2:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cfb6:	68 14 01 00 00       	push   0x114
c001cfbb:	e8 80 28 ff ff       	call   c000f840 <malloc>
c001cfc0:	83 c4 0c             	add    esp,0xc
c001cfc3:	89 c5                	mov    ebp,eax
c001cfc5:	53                   	push   ebx
c001cfc6:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cfcd:	50                   	push   eax
c001cfce:	e8 a1 64 ff ff       	call   c0013474 <File::File(char const*, Process*)>
c001cfd3:	5e                   	pop    esi
c001cfd4:	5f                   	pop    edi
c001cfd5:	6a 01                	push   0x1
c001cfd7:	55                   	push   ebp
c001cfd8:	e8 fb 64 ff ff       	call   c00134d8 <File::open(FileOpenMode)>
c001cfdd:	83 c4 10             	add    esp,0x10
c001cfe0:	85 c0                	test   eax,eax
c001cfe2:	0f 85 8d 06 00 00    	jne    c001d675 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cfe8:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cff0:	83 ec 0c             	sub    esp,0xc
c001cff3:	6a 34                	push   0x34
c001cff5:	e8 46 28 ff ff       	call   c000f840 <malloc>
c001cffa:	5b                   	pop    ebx
c001cffb:	89 c7                	mov    edi,eax
c001cffd:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d001:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d004:	53                   	push   ebx
c001d005:	57                   	push   edi
c001d006:	6a 00                	push   0x0
c001d008:	6a 34                	push   0x34
c001d00a:	55                   	push   ebp
c001d00b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d00e:	83 c4 20             	add    esp,0x20
c001d011:	85 c0                	test   eax,eax
c001d013:	0f 85 5c 06 00 00    	jne    c001d675 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d019:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d01f:	0f 85 50 06 00 00    	jne    c001d675 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d025:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d028:	85 c0                	test   eax,eax
c001d02a:	0f 84 45 06 00 00    	je     c001d675 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d030:	31 d2                	xor    edx,edx
c001d032:	51                   	push   ecx
c001d033:	52                   	push   edx
c001d034:	50                   	push   eax
c001d035:	55                   	push   ebp
c001d036:	e8 5b 65 ff ff       	call   c0013596 <File::seek(unsigned long long)>
c001d03b:	83 c4 10             	add    esp,0x10
c001d03e:	85 c0                	test   eax,eax
c001d040:	0f 85 2f 06 00 00    	jne    c001d675 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d046:	83 ec 0c             	sub    esp,0xc
c001d049:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d04c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d050:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d054:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d058:	0f af c2             	imul   eax,edx
c001d05b:	50                   	push   eax
c001d05c:	e8 df 27 ff ff       	call   c000f840 <malloc>
c001d061:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d064:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d068:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d06b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d06f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d073:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d077:	0f af c2             	imul   eax,edx
c001d07a:	99                   	cdq    
c001d07b:	52                   	push   edx
c001d07c:	50                   	push   eax
c001d07d:	55                   	push   ebp
c001d07e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d081:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d084:	83 c4 20             	add    esp,0x20
c001d087:	85 c0                	test   eax,eax
c001d089:	0f 84 e6 05 00 00    	je     c001d675 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d08f:	52                   	push   edx
c001d090:	31 d2                	xor    edx,edx
c001d092:	52                   	push   edx
c001d093:	50                   	push   eax
c001d094:	55                   	push   ebp
c001d095:	e8 fc 64 ff ff       	call   c0013596 <File::seek(unsigned long long)>
c001d09a:	83 c4 10             	add    esp,0x10
c001d09d:	85 c0                	test   eax,eax
c001d09f:	0f 85 d0 05 00 00    	jne    c001d675 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0a5:	83 ec 0c             	sub    esp,0xc
c001d0a8:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d0ac:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d0b0:	31 f6                	xor    esi,esi
c001d0b2:	0f af c2             	imul   eax,edx
c001d0b5:	50                   	push   eax
c001d0b6:	e8 85 27 ff ff       	call   c000f840 <malloc>
c001d0bb:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0be:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d0c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0c5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d0c9:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d0cd:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d0d1:	0f af c2             	imul   eax,edx
c001d0d4:	99                   	cdq    
c001d0d5:	52                   	push   edx
c001d0d6:	50                   	push   eax
c001d0d7:	55                   	push   ebp
c001d0d8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0db:	83 c4 20             	add    esp,0x20
c001d0de:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d0e2:	0f 86 8a 00 00 00    	jbe    c001d172 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d0e8:	0f b7 de             	movzx  ebx,si
c001d0eb:	c1 e3 05             	shl    ebx,0x5
c001d0ee:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d0f2:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d0f5:	75 75                	jne    c001d16c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d0f7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d0fa:	31 d2                	xor    edx,edx
c001d0fc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d100:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d103:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d107:	50                   	push   eax
c001d108:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d10b:	52                   	push   edx
c001d10c:	50                   	push   eax
c001d10d:	55                   	push   ebp
c001d10e:	e8 83 64 ff ff       	call   c0013596 <File::seek(unsigned long long)>
c001d113:	83 c4 10             	add    esp,0x10
c001d116:	85 c0                	test   eax,eax
c001d118:	0f 85 57 05 00 00    	jne    c001d675 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d11e:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d125:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d128:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d12c:	31 d2                	xor    edx,edx
c001d12e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d132:	83 ec 0c             	sub    esp,0xc
c001d135:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d139:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d140:	50                   	push   eax
c001d141:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d145:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d149:	52                   	push   edx
c001d14a:	50                   	push   eax
c001d14b:	55                   	push   ebp
c001d14c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d14f:	83 c4 1c             	add    esp,0x1c
c001d152:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d155:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d158:	50                   	push   eax
c001d159:	6a 00                	push   0x0
c001d15b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d15f:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d163:	50                   	push   eax
c001d164:	e8 0f 36 fe ff       	call   c0000778 <memset>
c001d169:	83 c4 10             	add    esp,0x10
c001d16c:	46                   	inc    esi
c001d16d:	e9 6c ff ff ff       	jmp    c001d0de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d172:	53                   	push   ebx
c001d173:	31 db                	xor    ebx,ebx
c001d175:	68 00 01 00 00       	push   0x100
c001d17a:	6a 00                	push   0x0
c001d17c:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d180:	50                   	push   eax
c001d181:	e8 f2 35 fe ff       	call   c0000778 <memset>
c001d186:	83 c4 0c             	add    esp,0xc
c001d189:	68 00 01 00 00       	push   0x100
c001d18e:	6a 00                	push   0x0
c001d190:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d197:	50                   	push   eax
c001d198:	e8 db 35 fe ff       	call   c0000778 <memset>
c001d19d:	83 c4 10             	add    esp,0x10
c001d1a0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d1a8:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d1b0:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d1b8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d1c0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d1c8:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d1cc:	0f 86 30 01 00 00    	jbe    c001d302 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d1d2:	0f b7 f3             	movzx  esi,bx
c001d1d5:	6b f6 28             	imul   esi,esi,0x28
c001d1d8:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d1dc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d1df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1e3:	52                   	push   edx
c001d1e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d1e8:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d1ec:	8b 06                	mov    eax,DWORD PTR [esi]
c001d1ee:	6b d2 28             	imul   edx,edx,0x28
c001d1f1:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d1f5:	31 d2                	xor    edx,edx
c001d1f7:	52                   	push   edx
c001d1f8:	50                   	push   eax
c001d1f9:	55                   	push   ebp
c001d1fa:	e8 97 63 ff ff       	call   c0013596 <File::seek(unsigned long long)>
c001d1ff:	83 c4 0c             	add    esp,0xc
c001d202:	6a 20                	push   0x20
c001d204:	6a 00                	push   0x0
c001d206:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d20d:	51                   	push   ecx
c001d20e:	e8 65 35 fe ff       	call   c0000778 <memset>
c001d213:	59                   	pop    ecx
c001d214:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d217:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d21b:	52                   	push   edx
c001d21c:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d223:	51                   	push   ecx
c001d224:	6a 00                	push   0x0
c001d226:	6a 1f                	push   0x1f
c001d228:	55                   	push   ebp
c001d229:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d22c:	83 c4 1c             	add    esp,0x1c
c001d22f:	6a 09                	push   0x9
c001d231:	68 28 c2 02 c0       	push   0xc002c228
c001d236:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d23d:	51                   	push   ecx
c001d23e:	e8 fd 33 fe ff       	call   c0000640 <memcmp>
c001d243:	83 c4 10             	add    esp,0x10
c001d246:	85 c0                	test   eax,eax
c001d248:	75 21                	jne    c001d26b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d24a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d24e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d252:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d256:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d25a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d25d:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d264:	89 d0                	mov    eax,edx
c001d266:	40                   	inc    eax
c001d267:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d26b:	50                   	push   eax
c001d26c:	6a 09                	push   0x9
c001d26e:	68 32 c2 02 c0       	push   0xc002c232
c001d273:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d27a:	50                   	push   eax
c001d27b:	e8 c0 33 fe ff       	call   c0000640 <memcmp>
c001d280:	83 c4 10             	add    esp,0x10
c001d283:	85 c0                	test   eax,eax
c001d285:	75 21                	jne    c001d2a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d287:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d28b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d28f:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d293:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d297:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d29a:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d2a1:	89 d0                	mov    eax,edx
c001d2a3:	40                   	inc    eax
c001d2a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d2a8:	50                   	push   eax
c001d2a9:	50                   	push   eax
c001d2aa:	68 fe c1 02 c0       	push   0xc002c1fe
c001d2af:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2b6:	50                   	push   eax
c001d2b7:	e8 04 36 fe ff       	call   c00008c0 <strcmp>
c001d2bc:	83 c4 10             	add    esp,0x10
c001d2bf:	85 c0                	test   eax,eax
c001d2c1:	75 0f                	jne    c001d2d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d2c3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2c6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d2ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d2d2:	50                   	push   eax
c001d2d3:	50                   	push   eax
c001d2d4:	68 06 c2 02 c0       	push   0xc002c206
c001d2d9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2e0:	50                   	push   eax
c001d2e1:	e8 da 35 fe ff       	call   c00008c0 <strcmp>
c001d2e6:	83 c4 10             	add    esp,0x10
c001d2e9:	85 c0                	test   eax,eax
c001d2eb:	75 0f                	jne    c001d2fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d2ed:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2f0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d2f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2f8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d2fc:	43                   	inc    ebx
c001d2fd:	e9 c6 fe ff ff       	jmp    c001d1c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d302:	31 d2                	xor    edx,edx
c001d304:	50                   	push   eax
c001d305:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d309:	52                   	push   edx
c001d30a:	50                   	push   eax
c001d30b:	55                   	push   ebp
c001d30c:	e8 85 62 ff ff       	call   c0013596 <File::seek(unsigned long long)>
c001d311:	58                   	pop    eax
c001d312:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d316:	e8 25 25 ff ff       	call   c000f840 <malloc>
c001d31b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d31e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d322:	31 d2                	xor    edx,edx
c001d324:	58                   	pop    eax
c001d325:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d329:	53                   	push   ebx
c001d32a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d32e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d332:	52                   	push   edx
c001d333:	50                   	push   eax
c001d334:	55                   	push   ebp
c001d335:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d338:	83 c4 14             	add    esp,0x14
c001d33b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d33f:	e8 fc 24 ff ff       	call   c000f840 <malloc>
c001d344:	31 d2                	xor    edx,edx
c001d346:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d34a:	83 c4 0c             	add    esp,0xc
c001d34d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d351:	52                   	push   edx
c001d352:	50                   	push   eax
c001d353:	55                   	push   ebp
c001d354:	e8 3d 62 ff ff       	call   c0013596 <File::seek(unsigned long long)>
c001d359:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d35c:	31 d2                	xor    edx,edx
c001d35e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d361:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d365:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d369:	52                   	push   edx
c001d36a:	50                   	push   eax
c001d36b:	55                   	push   ebp
c001d36c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d36f:	83 c4 20             	add    esp,0x20
c001d372:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d37a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d37e:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d382:	0f 84 f1 02 00 00    	je     c001d679 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d388:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d38f:	31 d2                	xor    edx,edx
c001d391:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d395:	c1 e8 03             	shr    eax,0x3
c001d398:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d39c:	51                   	push   ecx
c001d39d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d3a1:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d3a5:	52                   	push   edx
c001d3a6:	50                   	push   eax
c001d3a7:	55                   	push   ebp
c001d3a8:	e8 e9 61 ff ff       	call   c0013596 <File::seek(unsigned long long)>
c001d3ad:	5b                   	pop    ebx
c001d3ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3b2:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d3b9:	e8 82 24 ff ff       	call   c000f840 <malloc>
c001d3be:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3c1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d3c5:	31 d2                	xor    edx,edx
c001d3c7:	5e                   	pop    esi
c001d3c8:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d3cc:	50                   	push   eax
c001d3cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d3d5:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d3dc:	52                   	push   edx
c001d3dd:	50                   	push   eax
c001d3de:	55                   	push   ebp
c001d3df:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3e2:	83 c4 20             	add    esp,0x20
c001d3e5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d3ed:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d3f1:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d3f5:	0f 8d 62 02 00 00    	jge    c001d65d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d3fb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d3ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d403:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d408:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d40b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d40f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d413:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d417:	89 d8                	mov    eax,ebx
c001d419:	c1 e8 08             	shr    eax,0x8
c001d41c:	89 c6                	mov    esi,eax
c001d41e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d422:	c1 e6 04             	shl    esi,0x4
c001d425:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d429:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d42c:	85 d2                	test   edx,edx
c001d42e:	0f 85 bf 00 00 00    	jne    c001d4f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d434:	83 ec 0c             	sub    esp,0xc
c001d437:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d43b:	03 06                	add    eax,DWORD PTR [esi]
c001d43d:	50                   	push   eax
c001d43e:	e8 4b f8 ff ff       	call   c001cc8e <Thr::getAddressOfKernelSymbol(char const*)>
c001d443:	83 c4 10             	add    esp,0x10
c001d446:	89 c2                	mov    edx,eax
c001d448:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d44d:	85 c0                	test   eax,eax
c001d44f:	0f 85 9e 00 00 00    	jne    c001d4f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d455:	83 ec 0c             	sub    esp,0xc
c001d458:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d45c:	03 06                	add    eax,DWORD PTR [esi]
c001d45e:	50                   	push   eax
c001d45f:	e8 91 10 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d464:	83 c4 10             	add    esp,0x10
c001d467:	89 c2                	mov    edx,eax
c001d469:	85 c0                	test   eax,eax
c001d46b:	0f 85 82 00 00 00    	jne    c001d4f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d471:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d475:	50                   	push   eax
c001d476:	50                   	push   eax
c001d477:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d47b:	03 06                	add    eax,DWORD PTR [esi]
c001d47d:	50                   	push   eax
c001d47e:	68 3c c2 02 c0       	push   0xc002c23c
c001d483:	e8 94 5a ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001d488:	58                   	pop    eax
c001d489:	5a                   	pop    edx
c001d48a:	68 56 c2 02 c0       	push   0xc002c256
c001d48f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d496:	50                   	push   eax
c001d497:	e8 98 33 fe ff       	call   c0000834 <strcpy>
c001d49c:	59                   	pop    ecx
c001d49d:	58                   	pop    eax
c001d49e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4a2:	03 06                	add    eax,DWORD PTR [esi]
c001d4a4:	50                   	push   eax
c001d4a5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4ac:	50                   	push   eax
c001d4ad:	e8 c2 34 fe ff       	call   c0000974 <strcat>
c001d4b2:	58                   	pop    eax
c001d4b3:	5a                   	pop    edx
c001d4b4:	68 ec c2 02 c0       	push   0xc002c2ec
c001d4b9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4c0:	50                   	push   eax
c001d4c1:	e8 ae 34 fe ff       	call   c0000974 <strcat>
c001d4c6:	83 c4 10             	add    esp,0x10
c001d4c9:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d4ce:	0f 84 43 01 00 00    	je     c001d617 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d4d4:	83 ec 0c             	sub    esp,0xc
c001d4d7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4de:	50                   	push   eax
c001d4df:	e8 d9 d0 ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c001d4e4:	83 c4 10             	add    esp,0x10
c001d4e7:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d4eb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d4ef:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d4f3:	80 fb 01             	cmp    bl,0x1
c001d4f6:	75 7d                	jne    c001d575 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d4f8:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d4ff:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d503:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d507:	01 ce                	add    esi,ecx
c001d509:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d50f:	0f 94 c0             	sete   al
c001d512:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d518:	0f 94 c3             	sete   bl
c001d51b:	09 c3                	or     ebx,eax
c001d51d:	8b 06                	mov    eax,DWORD PTR [esi]
c001d51f:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d524:	74 36                	je     c001d55c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d526:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d529:	84 db                	test   bl,bl
c001d52b:	75 0a                	jne    c001d537 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d52d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d531:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d535:	76 37                	jbe    c001d56e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d537:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d53b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d540:	0f 84 d1 00 00 00    	je     c001d617 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d546:	83 ec 0c             	sub    esp,0xc
c001d549:	68 6d c2 02 c0       	push   0xc002c26d
c001d54e:	e8 6a d0 ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c001d553:	83 c4 10             	add    esp,0x10
c001d556:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d55a:	eb 12                	jmp    c001d56e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d55c:	01 c1                	add    ecx,eax
c001d55e:	84 db                	test   bl,bl
c001d560:	75 0c                	jne    c001d56e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d562:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d566:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d56a:	77 02                	ja     c001d56e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d56c:	01 d1                	add    ecx,edx
c001d56e:	89 0e                	mov    DWORD PTR [esi],ecx
c001d570:	e9 df 00 00 00       	jmp    c001d654 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d575:	80 fb 02             	cmp    bl,0x2
c001d578:	75 71                	jne    c001d5eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d57a:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d581:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d585:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d589:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d58f:	74 15                	je     c001d5a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d591:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d597:	74 0d                	je     c001d5a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d599:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d59d:	83 e8 04             	sub    eax,0x4
c001d5a0:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d5a4:	76 1f                	jbe    c001d5c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d5a6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d5aa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5af:	74 66                	je     c001d617 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d5b1:	83 ec 0c             	sub    esp,0xc
c001d5b4:	68 89 c2 02 c0       	push   0xc002c289
c001d5b9:	e8 ff cf ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c001d5be:	83 c4 10             	add    esp,0x10
c001d5c1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d5c5:	8b 06                	mov    eax,DWORD PTR [esi]
c001d5c7:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d5cc:	74 13                	je     c001d5e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d5ce:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d5d2:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d5d9:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d5dd:	01 c8                	add    eax,ecx
c001d5df:	eb 04                	jmp    c001d5e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d5e1:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d5e5:	01 c2                	add    edx,eax
c001d5e7:	89 16                	mov    DWORD PTR [esi],edx
c001d5e9:	eb 69                	jmp    c001d654 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d5eb:	0f b6 db             	movzx  ebx,bl
c001d5ee:	50                   	push   eax
c001d5ef:	50                   	push   eax
c001d5f0:	53                   	push   ebx
c001d5f1:	68 a5 c2 02 c0       	push   0xc002c2a5
c001d5f6:	e8 21 59 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001d5fb:	83 c4 10             	add    esp,0x10
c001d5fe:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d603:	74 12                	je     c001d617 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d605:	83 ec 0c             	sub    esp,0xc
c001d608:	68 b0 c2 02 c0       	push   0xc002c2b0
c001d60d:	e8 ab cf ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c001d612:	83 c4 10             	add    esp,0x10
c001d615:	eb 3d                	jmp    c001d654 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d617:	83 ec 0c             	sub    esp,0xc
c001d61a:	55                   	push   ebp
c001d61b:	e8 16 5f ff ff       	call   c0013536 <File::close()>
c001d620:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d623:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d626:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d629:	59                   	pop    ecx
c001d62a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d62e:	e8 1d 22 ff ff       	call   c000f850 <free>
c001d633:	5b                   	pop    ebx
c001d634:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d638:	e8 13 22 ff ff       	call   c000f850 <free>
c001d63d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d640:	e8 0b 22 ff ff       	call   c000f850 <free>
c001d645:	5e                   	pop    esi
c001d646:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d64a:	e8 01 22 ff ff       	call   c000f850 <free>
c001d64f:	83 c4 10             	add    esp,0x10
c001d652:	eb 21                	jmp    c001d675 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d654:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d658:	e9 90 fd ff ff       	jmp    c001d3ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d65d:	83 ec 0c             	sub    esp,0xc
c001d660:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d664:	e8 e7 21 ff ff       	call   c000f850 <free>
c001d669:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d66d:	83 c4 10             	add    esp,0x10
c001d670:	e9 05 fd ff ff       	jmp    c001d37a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d675:	31 c0                	xor    eax,eax
c001d677:	eb 33                	jmp    c001d6ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d679:	83 ec 0c             	sub    esp,0xc
c001d67c:	55                   	push   ebp
c001d67d:	e8 b4 5e ff ff       	call   c0013536 <File::close()>
c001d682:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d685:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d688:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d68b:	58                   	pop    eax
c001d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d690:	e8 bb 21 ff ff       	call   c000f850 <free>
c001d695:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d698:	e8 b3 21 ff ff       	call   c000f850 <free>
c001d69d:	5a                   	pop    edx
c001d69e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6a2:	e8 a9 21 ff ff       	call   c000f850 <free>
c001d6a7:	83 c4 10             	add    esp,0x10
c001d6aa:	b0 01                	mov    al,0x1
c001d6ac:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d6b2:	5b                   	pop    ebx
c001d6b3:	5e                   	pop    esi
c001d6b4:	5f                   	pop    edi
c001d6b5:	5d                   	pop    ebp
c001d6b6:	c3                   	ret    

c001d6b7 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d6b7:	56                   	push   esi
c001d6b8:	31 d2                	xor    edx,edx
c001d6ba:	53                   	push   ebx
c001d6bb:	8b 1d 20 13 03 c0    	mov    ebx,DWORD PTR ds:0xc0031320
c001d6c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d6c5:	39 d3                	cmp    ebx,edx
c001d6c7:	7e 1b                	jle    c001d6e4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d6c9:	8b 04 95 40 15 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffceac0]
c001d6d0:	39 c8                	cmp    eax,ecx
c001d6d2:	77 0d                	ja     c001d6e1 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d6d4:	8b 34 95 40 13 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcecc0]
c001d6db:	01 c6                	add    esi,eax
c001d6dd:	39 ce                	cmp    esi,ecx
c001d6df:	77 05                	ja     c001d6e6 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d6e1:	42                   	inc    edx
c001d6e2:	eb e1                	jmp    c001d6c5 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d6e4:	31 c0                	xor    eax,eax
c001d6e6:	5b                   	pop    ebx
c001d6e7:	5e                   	pop    esi
c001d6e8:	c3                   	ret    

c001d6e9 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d6e9:	53                   	push   ebx
c001d6ea:	31 c0                	xor    eax,eax
c001d6ec:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d6f0:	8b 1d 20 13 03 c0    	mov    ebx,DWORD PTR ds:0xc0031320
c001d6f6:	39 c3                	cmp    ebx,eax
c001d6f8:	7e 22                	jle    c001d71c <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d6fa:	8b 14 85 40 15 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffceac0]
c001d701:	39 ca                	cmp    edx,ecx
c001d703:	77 14                	ja     c001d719 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d705:	03 14 85 40 13 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcecc0]
c001d70c:	39 ca                	cmp    edx,ecx
c001d70e:	76 09                	jbe    c001d719 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d710:	8b 04 85 40 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce8c0]
c001d717:	eb 05                	jmp    c001d71e <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d719:	40                   	inc    eax
c001d71a:	eb da                	jmp    c001d6f6 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d71c:	31 c0                	xor    eax,eax
c001d71e:	5b                   	pop    ebx
c001d71f:	c3                   	ret    

c001d720 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d720:	53                   	push   ebx
c001d721:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d725:	53                   	push   ebx
c001d726:	e8 8c ff ff ff       	call   c001d6b7 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d72b:	5a                   	pop    edx
c001d72c:	31 d2                	xor    edx,edx
c001d72e:	85 c0                	test   eax,eax
c001d730:	74 04                	je     c001d736 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d732:	89 da                	mov    edx,ebx
c001d734:	29 c2                	sub    edx,eax
c001d736:	89 d0                	mov    eax,edx
c001d738:	5b                   	pop    ebx
c001d739:	c3                   	ret    

c001d73a <Thr::loadDLL(char const*, bool)>:
c001d73a:	55                   	push   ebp
c001d73b:	57                   	push   edi
c001d73c:	56                   	push   esi
c001d73d:	53                   	push   ebx
c001d73e:	81 ec 34 01 00 00    	sub    esp,0x134
c001d744:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d74b:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d752:	56                   	push   esi
c001d753:	68 c8 c2 02 c0       	push   0xc002c2c8
c001d758:	e8 bf 57 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001d75d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d764:	e8 d7 20 ff ff       	call   c000f840 <malloc>
c001d769:	83 c4 0c             	add    esp,0xc
c001d76c:	89 c3                	mov    ebx,eax
c001d76e:	ff 35 14 1b 03 c0    	push   DWORD PTR ds:0xc0031b14
c001d774:	56                   	push   esi
c001d775:	50                   	push   eax
c001d776:	e8 f9 5c ff ff       	call   c0013474 <File::File(char const*, Process*)>
c001d77b:	83 c4 10             	add    esp,0x10
c001d77e:	85 db                	test   ebx,ebx
c001d780:	75 3c                	jne    c001d7be <Thr::loadDLL(char const*, bool)+0x84>
c001d782:	89 e8                	mov    eax,ebp
c001d784:	84 c0                	test   al,al
c001d786:	0f 84 d5 01 00 00    	je     c001d961 <Thr::loadDLL(char const*, bool)+0x227>
c001d78c:	57                   	push   edi
c001d78d:	57                   	push   edi
c001d78e:	68 d9 c2 02 c0       	push   0xc002c2d9
c001d793:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d797:	57                   	push   edi
c001d798:	e8 97 30 fe ff       	call   c0000834 <strcpy>
c001d79d:	58                   	pop    eax
c001d79e:	5a                   	pop    edx
c001d79f:	56                   	push   esi
c001d7a0:	57                   	push   edi
c001d7a1:	e8 ce 31 fe ff       	call   c0000974 <strcat>
c001d7a6:	59                   	pop    ecx
c001d7a7:	58                   	pop    eax
c001d7a8:	68 ec c2 02 c0       	push   0xc002c2ec
c001d7ad:	57                   	push   edi
c001d7ae:	e8 c1 31 fe ff       	call   c0000974 <strcat>
c001d7b3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d7b6:	e8 02 ce ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c001d7bb:	83 c4 10             	add    esp,0x10
c001d7be:	51                   	push   ecx
c001d7bf:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d7c3:	50                   	push   eax
c001d7c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d7c8:	50                   	push   eax
c001d7c9:	53                   	push   ebx
c001d7ca:	e8 b5 5f ff ff       	call   c0013784 <File::stat(unsigned long long*, bool*)>
c001d7cf:	83 c4 10             	add    esp,0x10
c001d7d2:	85 db                	test   ebx,ebx
c001d7d4:	74 0c                	je     c001d7e2 <Thr::loadDLL(char const*, bool)+0xa8>
c001d7d6:	83 ec 0c             	sub    esp,0xc
c001d7d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d7db:	53                   	push   ebx
c001d7dc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d7df:	83 c4 10             	add    esp,0x10
c001d7e2:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d7e7:	75 0a                	jne    c001d7f3 <Thr::loadDLL(char const*, bool)+0xb9>
c001d7e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d7ed:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d7f1:	75 3c                	jne    c001d82f <Thr::loadDLL(char const*, bool)+0xf5>
c001d7f3:	89 e8                	mov    eax,ebp
c001d7f5:	84 c0                	test   al,al
c001d7f7:	0f 84 4c 01 00 00    	je     c001d949 <Thr::loadDLL(char const*, bool)+0x20f>
c001d7fd:	51                   	push   ecx
c001d7fe:	51                   	push   ecx
c001d7ff:	68 d9 c2 02 c0       	push   0xc002c2d9
c001d804:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d808:	53                   	push   ebx
c001d809:	e8 26 30 fe ff       	call   c0000834 <strcpy>
c001d80e:	5f                   	pop    edi
c001d80f:	58                   	pop    eax
c001d810:	56                   	push   esi
c001d811:	53                   	push   ebx
c001d812:	e8 5d 31 fe ff       	call   c0000974 <strcat>
c001d817:	58                   	pop    eax
c001d818:	5a                   	pop    edx
c001d819:	68 ec c2 02 c0       	push   0xc002c2ec
c001d81e:	53                   	push   ebx
c001d81f:	e8 50 31 fe ff       	call   c0000974 <strcat>
c001d824:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d827:	e8 91 cd ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c001d82c:	83 c4 10             	add    esp,0x10
c001d82f:	e8 f2 45 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c001d834:	51                   	push   ecx
c001d835:	6a 03                	push   0x3
c001d837:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d83b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d83f:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d845:	83 d3 00             	adc    ebx,0x0
c001d848:	89 ca                	mov    edx,ecx
c001d84a:	89 d1                	mov    ecx,edx
c001d84c:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d850:	51                   	push   ecx
c001d851:	50                   	push   eax
c001d852:	e8 0b 4c ff ff       	call   c0012462 <VAS::allocatePages(int, int)>
c001d857:	5f                   	pop    edi
c001d858:	89 c3                	mov    ebx,eax
c001d85a:	58                   	pop    eax
c001d85b:	53                   	push   ebx
c001d85c:	68 ee c2 02 c0       	push   0xc002c2ee
c001d861:	e8 b6 56 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001d866:	89 34 24             	mov    DWORD PTR [esp],esi
c001d869:	e8 26 2f fe ff       	call   c0000794 <strlen>
c001d86e:	8b 3d 20 13 03 c0    	mov    edi,DWORD PTR ds:0xc0031320
c001d874:	40                   	inc    eax
c001d875:	89 04 24             	mov    DWORD PTR [esp],eax
c001d878:	e8 c3 1f ff ff       	call   c000f840 <malloc>
c001d87d:	89 04 bd 40 17 03 c0 	mov    DWORD PTR [edi*4-0x3ffce8c0],eax
c001d884:	58                   	pop    eax
c001d885:	a1 20 13 03 c0       	mov    eax,ds:0xc0031320
c001d88a:	5a                   	pop    edx
c001d88b:	56                   	push   esi
c001d88c:	ff 34 85 40 17 03 c0 	push   DWORD PTR [eax*4-0x3ffce8c0]
c001d893:	e8 9c 2f fe ff       	call   c0000834 <strcpy>
c001d898:	a1 20 13 03 c0       	mov    eax,ds:0xc0031320
c001d89d:	8d 50 01             	lea    edx,[eax+0x1]
c001d8a0:	89 1c 85 40 15 03 c0 	mov    DWORD PTR [eax*4-0x3ffceac0],ebx
c001d8a7:	89 15 20 13 03 c0    	mov    DWORD PTR ds:0xc0031320,edx
c001d8ad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d8b1:	83 c4 0c             	add    esp,0xc
c001d8b4:	89 14 85 40 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffcecc0],edx
c001d8bb:	6a 01                	push   0x1
c001d8bd:	53                   	push   ebx
c001d8be:	56                   	push   esi
c001d8bf:	e8 d7 f6 ff ff       	call   c001cf9b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d8c4:	83 c4 10             	add    esp,0x10
c001d8c7:	89 c7                	mov    edi,eax
c001d8c9:	84 c0                	test   al,al
c001d8cb:	0f 85 8c 00 00 00    	jne    c001d95d <Thr::loadDLL(char const*, bool)+0x223>
c001d8d1:	89 e8                	mov    eax,ebp
c001d8d3:	84 c0                	test   al,al
c001d8d5:	74 76                	je     c001d94d <Thr::loadDLL(char const*, bool)+0x213>
c001d8d7:	83 ec 0c             	sub    esp,0xc
c001d8da:	68 fb c2 02 c0       	push   0xc002c2fb
c001d8df:	e8 d9 cc ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c001d8e4:	83 c4 10             	add    esp,0x10
c001d8e7:	eb 64                	jmp    c001d94d <Thr::loadDLL(char const*, bool)+0x213>
c001d8e9:	e8 38 45 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c001d8ee:	89 f5                	mov    ebp,esi
c001d8f0:	c1 e5 0c             	shl    ebp,0xc
c001d8f3:	52                   	push   edx
c001d8f4:	01 dd                	add    ebp,ebx
c001d8f6:	52                   	push   edx
c001d8f7:	55                   	push   ebp
c001d8f8:	50                   	push   eax
c001d8f9:	e8 de 46 ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c001d8fe:	83 c4 10             	add    esp,0x10
c001d901:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d904:	75 0c                	jne    c001d912 <Thr::loadDLL(char const*, bool)+0x1d8>
c001d906:	83 ec 0c             	sub    esp,0xc
c001d909:	55                   	push   ebp
c001d90a:	e8 49 25 ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c001d90f:	83 c4 10             	add    esp,0x10
c001d912:	46                   	inc    esi
c001d913:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d917:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d91b:	05 ff 0f 00 00       	add    eax,0xfff
c001d920:	83 d2 00             	adc    edx,0x0
c001d923:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d927:	c1 ea 0c             	shr    edx,0xc
c001d92a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d92e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d932:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d936:	ba 00 00 00 00       	mov    edx,0x0
c001d93b:	89 d0                	mov    eax,edx
c001d93d:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d941:	72 a6                	jb     c001d8e9 <Thr::loadDLL(char const*, bool)+0x1af>
c001d943:	89 f8                	mov    eax,edi
c001d945:	84 c0                	test   al,al
c001d947:	75 18                	jne    c001d961 <Thr::loadDLL(char const*, bool)+0x227>
c001d949:	31 db                	xor    ebx,ebx
c001d94b:	eb 14                	jmp    c001d961 <Thr::loadDLL(char const*, bool)+0x227>
c001d94d:	83 ec 0c             	sub    esp,0xc
c001d950:	68 1a c3 02 c0       	push   0xc002c31a
c001d955:	e8 63 cc ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c001d95a:	83 c4 10             	add    esp,0x10
c001d95d:	31 f6                	xor    esi,esi
c001d95f:	eb b2                	jmp    c001d913 <Thr::loadDLL(char const*, bool)+0x1d9>
c001d961:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d967:	89 d8                	mov    eax,ebx
c001d969:	5b                   	pop    ebx
c001d96a:	5e                   	pop    esi
c001d96b:	5f                   	pop    edi
c001d96c:	5d                   	pop    ebp
c001d96d:	c3                   	ret    

c001d96e <Thr::executeDLL(unsigned long, void*)>:
c001d96e:	56                   	push   esi
c001d96f:	53                   	push   ebx
c001d970:	52                   	push   edx
c001d971:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d975:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d979:	85 db                	test   ebx,ebx
c001d97b:	75 10                	jne    c001d98d <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d97d:	83 ec 0c             	sub    esp,0xc
c001d980:	68 36 c3 02 c0       	push   0xc002c336
c001d985:	e8 33 cc ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c001d98a:	83 c4 10             	add    esp,0x10
c001d98d:	50                   	push   eax
c001d98e:	50                   	push   eax
c001d98f:	53                   	push   ebx
c001d990:	68 60 c3 02 c0       	push   0xc002c360
c001d995:	e8 82 55 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001d99a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d99e:	89 d8                	mov    eax,ebx
c001d9a0:	83 c4 14             	add    esp,0x14
c001d9a3:	5b                   	pop    ebx
c001d9a4:	5e                   	pop    esi
c001d9a5:	ff e0                	jmp    eax
c001d9a7:	90                   	nop

c001d9a8 <changeTSS>:
c001d9a8:	83 ec 14             	sub    esp,0x14
c001d9ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9b0:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d9b3:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d9b8:	c1 e2 15             	shl    edx,0x15
c001d9bb:	29 d0                	sub    eax,edx
c001d9bd:	50                   	push   eax
c001d9be:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c001d9c3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d9c9:	05 7c 11 00 00       	add    eax,0x117c
c001d9ce:	50                   	push   eax
c001d9cf:	e8 f6 3a ff ff       	call   c00114ca <TSS::setESP(unsigned long)>
c001d9d4:	83 c4 1c             	add    esp,0x1c
c001d9d7:	c3                   	ret    

c001d9d8 <Process::addArgs(char**)>:
c001d9d8:	57                   	push   edi
c001d9d9:	56                   	push   esi
c001d9da:	53                   	push   ebx
c001d9db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d9df:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d9e3:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d9ed:	85 ff                	test   edi,edi
c001d9ef:	74 3d                	je     c001da2e <Process::addArgs(char**)+0x56>
c001d9f1:	8b 07                	mov    eax,DWORD PTR [edi]
c001d9f3:	85 c0                	test   eax,eax
c001d9f5:	74 37                	je     c001da2e <Process::addArgs(char**)+0x56>
c001d9f7:	31 db                	xor    ebx,ebx
c001d9f9:	83 ec 0c             	sub    esp,0xc
c001d9fc:	50                   	push   eax
c001d9fd:	e8 92 2d fe ff       	call   c0000794 <strlen>
c001da02:	40                   	inc    eax
c001da03:	89 04 24             	mov    DWORD PTR [esp],eax
c001da06:	e8 35 1e ff ff       	call   c000f840 <malloc>
c001da0b:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001da12:	5a                   	pop    edx
c001da13:	59                   	pop    ecx
c001da14:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001da17:	43                   	inc    ebx
c001da18:	50                   	push   eax
c001da19:	e8 16 2e fe ff       	call   c0000834 <strcpy>
c001da1e:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001da24:	83 c4 10             	add    esp,0x10
c001da27:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001da2a:	85 c0                	test   eax,eax
c001da2c:	75 cb                	jne    c001d9f9 <Process::addArgs(char**)+0x21>
c001da2e:	5b                   	pop    ebx
c001da2f:	5e                   	pop    esi
c001da30:	5f                   	pop    edi
c001da31:	c3                   	ret    

c001da32 <Process::Process(char const*, Process*, char**)>:
c001da32:	56                   	push   esi
c001da33:	53                   	push   ebx
c001da34:	83 ec 14             	sub    esp,0x14
c001da37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da3b:	05 0c 02 00 00       	add    eax,0x20c
c001da40:	bb 07 00 00 00       	mov    ebx,0x7
c001da45:	89 c6                	mov    esi,eax
c001da47:	85 db                	test   ebx,ebx
c001da49:	78 12                	js     c001da5d <Process::Process(char const*, Process*, char**)+0x2b>
c001da4b:	83 ec 0c             	sub    esp,0xc
c001da4e:	56                   	push   esi
c001da4f:	e8 1e b2 00 00       	call   c0028c72 <ThreadControlBlock::ThreadControlBlock()>
c001da54:	83 c4 10             	add    esp,0x10
c001da57:	83 c6 63             	add    esi,0x63
c001da5a:	4b                   	dec    ebx
c001da5b:	eb ea                	jmp    c001da47 <Process::Process(char const*, Process*, char**)+0x15>
c001da5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da61:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001da68:	83 ec 0c             	sub    esp,0xc
c001da6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da6f:	e8 9a c9 ff ff       	call   c001a40e <Krnl::newProcessEnv(Process*)>
c001da74:	83 c4 10             	add    esp,0x10
c001da77:	89 c2                	mov    edx,eax
c001da79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da7d:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001da83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da87:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001da90:	a1 30 db 02 c0       	mov    eax,ds:0xc002db30
c001da95:	8d 50 01             	lea    edx,[eax+0x1]
c001da98:	89 15 30 db 02 c0    	mov    DWORD PTR ds:0xc002db30,edx
c001da9e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001daa2:	89 02                	mov    DWORD PTR [edx],eax
c001daa4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001daac:	83 ec 0c             	sub    esp,0xc
c001daaf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dab3:	e8 88 1d ff ff       	call   c000f840 <malloc>
c001dab8:	83 c4 10             	add    esp,0x10
c001dabb:	89 c3                	mov    ebx,eax
c001dabd:	83 ec 08             	sub    esp,0x8
c001dac0:	6a 00                	push   0x0
c001dac2:	53                   	push   ebx
c001dac3:	e8 42 4d ff ff       	call   c001280a <VAS::VAS(bool)>
c001dac8:	83 c4 10             	add    esp,0x10
c001dacb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dacf:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dad5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dad9:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dae3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dae7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001daeb:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001daf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daf5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dafb:	85 c0                	test   eax,eax
c001dafd:	74 42                	je     c001db41 <Process::Process(char const*, Process*, char**)+0x10f>
c001daff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db03:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db09:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001db0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db13:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001db19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db1d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db23:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001db29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db2d:	05 0c 01 00 00       	add    eax,0x10c
c001db32:	83 ec 08             	sub    esp,0x8
c001db35:	52                   	push   edx
c001db36:	50                   	push   eax
c001db37:	e8 f8 2c fe ff       	call   c0000834 <strcpy>
c001db3c:	83 c4 10             	add    esp,0x10
c001db3f:	eb 63                	jmp    c001dba4 <Process::Process(char const*, Process*, char**)+0x172>
c001db41:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001db49:	83 ec 0c             	sub    esp,0xc
c001db4c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001db50:	e8 eb 1c ff ff       	call   c000f840 <malloc>
c001db55:	83 c4 10             	add    esp,0x10
c001db58:	89 c3                	mov    ebx,eax
c001db5a:	83 ec 08             	sub    esp,0x8
c001db5d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db61:	53                   	push   ebx
c001db62:	e8 61 36 ff ff       	call   c00111c8 <VgaText::VgaText(char const*)>
c001db67:	83 c4 10             	add    esp,0x10
c001db6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db6e:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001db74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db78:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001db7e:	83 ec 0c             	sub    esp,0xc
c001db81:	50                   	push   eax
c001db82:	e8 34 2a ff ff       	call   c00105bb <addToTerminalCycle(VgaText*)>
c001db87:	83 c4 10             	add    esp,0x10
c001db8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db8e:	05 0c 01 00 00       	add    eax,0x10c
c001db93:	83 ec 08             	sub    esp,0x8
c001db96:	68 7f c3 02 c0       	push   0xc002c37f
c001db9b:	50                   	push   eax
c001db9c:	e8 93 2c fe ff       	call   c0000834 <strcpy>
c001dba1:	83 c4 10             	add    esp,0x10
c001dba4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dba8:	83 c0 0c             	add    eax,0xc
c001dbab:	83 ec 08             	sub    esp,0x8
c001dbae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbb2:	50                   	push   eax
c001dbb3:	e8 7c 2c fe ff       	call   c0000834 <strcpy>
c001dbb8:	83 c4 10             	add    esp,0x10
c001dbbb:	83 ec 08             	sub    esp,0x8
c001dbbe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dbc2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbc6:	e8 0d fe ff ff       	call   c001d9d8 <Process::addArgs(char**)>
c001dbcb:	83 c4 10             	add    esp,0x10
c001dbce:	83 ec 08             	sub    esp,0x8
c001dbd1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbd5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbd9:	e8 87 ee ff ff       	call   c001ca65 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dbde:	83 c4 10             	add    esp,0x10
c001dbe1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dbe5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dbe9:	83 f0 01             	xor    eax,0x1
c001dbec:	88 c2                	mov    dl,al
c001dbee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbf2:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dbf8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dbfd:	83 ec 08             	sub    esp,0x8
c001dc00:	50                   	push   eax
c001dc01:	68 7c c4 02 c0       	push   0xc002c47c
c001dc06:	e8 11 53 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001dc0b:	83 c4 10             	add    esp,0x10
c001dc0e:	90                   	nop
c001dc0f:	83 c4 14             	add    esp,0x14
c001dc12:	5b                   	pop    ebx
c001dc13:	5e                   	pop    esi
c001dc14:	c3                   	ret    
c001dc15:	90                   	nop

c001dc16 <Process::Process(bool, char const*, Process*, char**)>:
c001dc16:	56                   	push   esi
c001dc17:	53                   	push   ebx
c001dc18:	83 ec 24             	sub    esp,0x24
c001dc1b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dc1f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dc23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc27:	05 0c 02 00 00       	add    eax,0x20c
c001dc2c:	bb 07 00 00 00       	mov    ebx,0x7
c001dc31:	89 c6                	mov    esi,eax
c001dc33:	85 db                	test   ebx,ebx
c001dc35:	78 12                	js     c001dc49 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dc37:	83 ec 0c             	sub    esp,0xc
c001dc3a:	56                   	push   esi
c001dc3b:	e8 32 b0 00 00       	call   c0028c72 <ThreadControlBlock::ThreadControlBlock()>
c001dc40:	83 c4 10             	add    esp,0x10
c001dc43:	83 c6 63             	add    esi,0x63
c001dc46:	4b                   	dec    ebx
c001dc47:	eb ea                	jmp    c001dc33 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dc49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc4d:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dc54:	83 ec 0c             	sub    esp,0xc
c001dc57:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc5b:	e8 ae c7 ff ff       	call   c001a40e <Krnl::newProcessEnv(Process*)>
c001dc60:	83 c4 10             	add    esp,0x10
c001dc63:	89 c2                	mov    edx,eax
c001dc65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc69:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dc6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc73:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dc7c:	a1 30 db 02 c0       	mov    eax,ds:0xc002db30
c001dc81:	8d 50 01             	lea    edx,[eax+0x1]
c001dc84:	89 15 30 db 02 c0    	mov    DWORD PTR ds:0xc002db30,edx
c001dc8a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dc8e:	89 02                	mov    DWORD PTR [edx],eax
c001dc90:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001dc98:	83 ec 0c             	sub    esp,0xc
c001dc9b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dc9f:	e8 9c 1b ff ff       	call   c000f840 <malloc>
c001dca4:	83 c4 10             	add    esp,0x10
c001dca7:	89 c3                	mov    ebx,eax
c001dca9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dcae:	83 ec 08             	sub    esp,0x8
c001dcb1:	50                   	push   eax
c001dcb2:	53                   	push   ebx
c001dcb3:	e8 52 4b ff ff       	call   c001280a <VAS::VAS(bool)>
c001dcb8:	83 c4 10             	add    esp,0x10
c001dcbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcbf:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dcc5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcc9:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dcd3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcd7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dcdb:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dce1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dce5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dceb:	85 c0                	test   eax,eax
c001dced:	74 42                	je     c001dd31 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dcef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcf3:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dcf9:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dcff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd03:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dd09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd0d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd13:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dd19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd1d:	05 0c 01 00 00       	add    eax,0x10c
c001dd22:	83 ec 08             	sub    esp,0x8
c001dd25:	52                   	push   edx
c001dd26:	50                   	push   eax
c001dd27:	e8 08 2b fe ff       	call   c0000834 <strcpy>
c001dd2c:	83 c4 10             	add    esp,0x10
c001dd2f:	eb 63                	jmp    c001dd94 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dd31:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001dd39:	83 ec 0c             	sub    esp,0xc
c001dd3c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dd40:	e8 fb 1a ff ff       	call   c000f840 <malloc>
c001dd45:	83 c4 10             	add    esp,0x10
c001dd48:	89 c3                	mov    ebx,eax
c001dd4a:	83 ec 08             	sub    esp,0x8
c001dd4d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dd51:	53                   	push   ebx
c001dd52:	e8 71 34 ff ff       	call   c00111c8 <VgaText::VgaText(char const*)>
c001dd57:	83 c4 10             	add    esp,0x10
c001dd5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd5e:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dd64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd68:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dd6e:	83 ec 0c             	sub    esp,0xc
c001dd71:	50                   	push   eax
c001dd72:	e8 44 28 ff ff       	call   c00105bb <addToTerminalCycle(VgaText*)>
c001dd77:	83 c4 10             	add    esp,0x10
c001dd7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd7e:	05 0c 01 00 00       	add    eax,0x10c
c001dd83:	83 ec 08             	sub    esp,0x8
c001dd86:	68 7f c3 02 c0       	push   0xc002c37f
c001dd8b:	50                   	push   eax
c001dd8c:	e8 a3 2a fe ff       	call   c0000834 <strcpy>
c001dd91:	83 c4 10             	add    esp,0x10
c001dd94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd98:	83 c0 0c             	add    eax,0xc
c001dd9b:	83 ec 08             	sub    esp,0x8
c001dd9e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dda2:	50                   	push   eax
c001dda3:	e8 8c 2a fe ff       	call   c0000834 <strcpy>
c001dda8:	83 c4 10             	add    esp,0x10
c001ddab:	83 ec 08             	sub    esp,0x8
c001ddae:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ddb2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ddb6:	e8 1d fc ff ff       	call   c001d9d8 <Process::addArgs(char**)>
c001ddbb:	83 c4 10             	add    esp,0x10
c001ddbe:	90                   	nop
c001ddbf:	83 c4 24             	add    esp,0x24
c001ddc2:	5b                   	pop    ebx
c001ddc3:	5e                   	pop    esi
c001ddc4:	c3                   	ret    

c001ddc5 <disableIRQs()>:
c001ddc5:	fa                   	cli    
c001ddc6:	ff 05 ec 1a 03 c0    	inc    DWORD PTR ds:0xc0031aec
c001ddcc:	c3                   	ret    

c001ddcd <getIRQNestingLevel()>:
c001ddcd:	a1 ec 1a 03 c0       	mov    eax,ds:0xc0031aec
c001ddd2:	c3                   	ret    

c001ddd3 <enableIRQs()>:
c001ddd3:	a1 ec 1a 03 c0       	mov    eax,ds:0xc0031aec
c001ddd8:	48                   	dec    eax
c001ddd9:	a3 ec 1a 03 c0       	mov    ds:0xc0031aec,eax
c001ddde:	75 01                	jne    c001dde1 <enableIRQs()+0xe>
c001dde0:	fb                   	sti    
c001dde1:	c3                   	ret    

c001dde2 <lockScheduler()>:
c001dde2:	eb e1                	jmp    c001ddc5 <disableIRQs()>

c001dde4 <unlockScheduler()>:
c001dde4:	eb ed                	jmp    c001ddd3 <enableIRQs()>

c001dde6 <userModeEntryPoint(void*)>:
c001dde6:	83 ec 0c             	sub    esp,0xc
c001dde9:	e8 f6 ff ff ff       	call   c001dde4 <unlockScheduler()>
c001ddee:	fb                   	sti    
c001ddef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ddf4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ddf7:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001ddfd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001de01:	83 c4 0c             	add    esp,0xc
c001de04:	e9 21 25 fe ff       	jmp    c000032a <goToUsermode>

c001de09 <lockStuff()>:
c001de09:	e8 b7 ff ff ff       	call   c001ddc5 <disableIRQs()>
c001de0e:	ff 05 e8 1a 03 c0    	inc    DWORD PTR ds:0xc0031ae8
c001de14:	c3                   	ret    

c001de15 <taskStartupFunction>:
c001de15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de1a:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001de1d:	c3                   	ret    

c001de1e <updateTimeUsed()>:
c001de1e:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c001de23:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001de29:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001de30:	74 50                	je     c001de82 <updateTimeUsed()+0x64>
c001de32:	57                   	push   edi
c001de33:	56                   	push   esi
c001de34:	53                   	push   ebx
c001de35:	0f 31                	rdtsc  
c001de37:	89 c1                	mov    ecx,eax
c001de39:	a3 28 1b 03 c0       	mov    ds:0xc0031b28,eax
c001de3e:	2b 0d 18 1b 03 c0    	sub    ecx,DWORD PTR ds:0xc0031b18
c001de44:	89 d3                	mov    ebx,edx
c001de46:	89 0d 20 1b 03 c0    	mov    DWORD PTR ds:0xc0031b20,ecx
c001de4c:	1b 1d 1c 1b 03 c0    	sbb    ebx,DWORD PTR ds:0xc0031b1c
c001de52:	a3 18 1b 03 c0       	mov    ds:0xc0031b18,eax
c001de57:	89 1d 24 1b 03 c0    	mov    DWORD PTR ds:0xc0031b24,ebx
c001de5d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de62:	89 15 2c 1b 03 c0    	mov    DWORD PTR ds:0xc0031b2c,edx
c001de68:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001de6b:	89 15 1c 1b 03 c0    	mov    DWORD PTR ds:0xc0031b1c,edx
c001de71:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001de74:	01 f1                	add    ecx,esi
c001de76:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001de79:	11 fb                	adc    ebx,edi
c001de7b:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001de7e:	5b                   	pop    ebx
c001de7f:	5e                   	pop    esi
c001de80:	5f                   	pop    edi
c001de81:	c3                   	ret    
c001de82:	c3                   	ret    

c001de83 <switchToThread(ThreadControlBlock*)>:
c001de83:	53                   	push   ebx
c001de84:	83 ec 08             	sub    esp,0x8
c001de87:	a1 e8 1a 03 c0       	mov    eax,ds:0xc0031ae8
c001de8c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001de90:	85 c0                	test   eax,eax
c001de92:	75 30                	jne    c001dec4 <switchToThread(ThreadControlBlock*)+0x41>
c001de94:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001de97:	3c ff                	cmp    al,0xff
c001de99:	74 25                	je     c001dec0 <switchToThread(ThreadControlBlock*)+0x3d>
c001de9b:	0f b6 d0             	movzx  edx,al
c001de9e:	b8 84 03 00 00       	mov    eax,0x384
c001dea3:	29 d0                	sub    eax,edx
c001dea5:	c1 e0 10             	shl    eax,0x10
c001dea8:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001deab:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001deae:	e8 6b ff ff ff       	call   c001de1e <updateTimeUsed()>
c001deb3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001deb7:	83 c4 08             	add    esp,0x8
c001deba:	5b                   	pop    ebx
c001debb:	e9 a2 24 fe ff       	jmp    c0000362 <switchToThreadASM>
c001dec0:	31 c0                	xor    eax,eax
c001dec2:	eb e7                	jmp    c001deab <switchToThread(ThreadControlBlock*)+0x28>
c001dec4:	c7 05 e4 1a 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031ae4,0x1
c001dece:	83 c4 08             	add    esp,0x8
c001ded1:	5b                   	pop    ebx
c001ded2:	c3                   	ret    
c001ded3:	90                   	nop

c001ded4 <Semaphore::Semaphore(int)>:
c001ded4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ded8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dedc:	89 10                	mov    DWORD PTR [eax],edx
c001dede:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dee2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001dee9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001deed:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001def4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001def8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001deff:	90                   	nop
c001df00:	c3                   	ret    
c001df01:	90                   	nop

c001df02 <Mutex::Mutex()>:
c001df02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df06:	6a 01                	push   0x1
c001df08:	50                   	push   eax
c001df09:	e8 c6 ff ff ff       	call   c001ded4 <Semaphore::Semaphore(int)>
c001df0e:	83 c4 08             	add    esp,0x8
c001df11:	90                   	nop
c001df12:	c3                   	ret    
c001df13:	90                   	nop

c001df14 <Process::createThread(void (*)(void*), void*, int)>:
c001df14:	55                   	push   ebp
c001df15:	31 c9                	xor    ecx,ecx
c001df17:	57                   	push   edi
c001df18:	56                   	push   esi
c001df19:	53                   	push   ebx
c001df1a:	83 ec 1c             	sub    esp,0x1c
c001df1d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001df21:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001df28:	89 f2                	mov    edx,esi
c001df2a:	0f b7 c2             	movzx  eax,dx
c001df2d:	83 e2 01             	and    edx,0x1
c001df30:	74 14                	je     c001df46 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001df32:	d1 f8                	sar    eax,1
c001df34:	41                   	inc    ecx
c001df35:	89 c2                	mov    edx,eax
c001df37:	83 f9 10             	cmp    ecx,0x10
c001df3a:	75 ee                	jne    c001df2a <Process::createThread(void (*)(void*), void*, int)+0x16>
c001df3c:	83 c4 1c             	add    esp,0x1c
c001df3f:	31 c0                	xor    eax,eax
c001df41:	5b                   	pop    ebx
c001df42:	5e                   	pop    esi
c001df43:	5f                   	pop    edi
c001df44:	5d                   	pop    ebp
c001df45:	c3                   	ret    
c001df46:	83 ec 08             	sub    esp,0x8
c001df49:	b8 01 00 00 00       	mov    eax,0x1
c001df4e:	d3 e0                	shl    eax,cl
c001df50:	09 c6                	or     esi,eax
c001df52:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001df58:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001df5f:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001df62:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001df65:	01 ce                	add    esi,ecx
c001df67:	89 f0                	mov    eax,esi
c001df69:	c1 e0 05             	shl    eax,0x5
c001df6c:	01 c6                	add    esi,eax
c001df6e:	8d 04 33             	lea    eax,[ebx+esi*1]
c001df71:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001df77:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001df7d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001df81:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001df87:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001df8d:	89 ca                	mov    edx,ecx
c001df8f:	f7 da                	neg    edx
c001df91:	c1 e2 15             	shl    edx,0x15
c001df94:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001df9a:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001dfa0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001dfa4:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001dfae:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001dfb4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dfb8:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001dfbe:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001dfc8:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001dfd2:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001dfd9:	50                   	push   eax
c001dfda:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dfde:	68 08 1b 03 c0       	push   0xc0031b08
c001dfe3:	e8 18 ab 00 00       	call   c0028b00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dfe8:	83 c4 10             	add    esp,0x10
c001dfeb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dfef:	83 c4 1c             	add    esp,0x1c
c001dff2:	5b                   	pop    ebx
c001dff3:	5e                   	pop    esi
c001dff4:	5f                   	pop    edi
c001dff5:	5d                   	pop    ebp
c001dff6:	c3                   	ret    
c001dff7:	90                   	nop

c001dff8 <Process::createUserThread()>:
c001dff8:	83 ec 0c             	sub    esp,0xc
c001dffb:	68 80 00 00 00       	push   0x80
c001e000:	6a 00                	push   0x0
c001e002:	68 e6 dd 01 c0       	push   0xc001dde6
c001e007:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e00b:	e8 04 ff ff ff       	call   c001df14 <Process::createThread(void (*)(void*), void*, int)>
c001e010:	83 c4 1c             	add    esp,0x1c
c001e013:	c3                   	ret    

c001e014 <setupMultitasking(void (*)())>:
c001e014:	56                   	push   esi
c001e015:	53                   	push   ebx
c001e016:	53                   	push   ebx
c001e017:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e01b:	eb 10                	jmp    c001e02d <setupMultitasking(void (*)())+0x19>
c001e01d:	83 ec 0c             	sub    esp,0xc
c001e020:	68 08 1b 03 c0       	push   0xc0031b08
c001e025:	e8 28 aa 00 00       	call   c0028a52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e02a:	83 c4 10             	add    esp,0x10
c001e02d:	83 ec 0c             	sub    esp,0xc
c001e030:	68 08 1b 03 c0       	push   0xc0031b08
c001e035:	e8 fc a9 00 00       	call   c0028a36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e03a:	83 c4 10             	add    esp,0x10
c001e03d:	84 c0                	test   al,al
c001e03f:	74 dc                	je     c001e01d <setupMultitasking(void (*)())+0x9>
c001e041:	83 ec 0c             	sub    esp,0xc
c001e044:	68 3f 07 00 00       	push   0x73f
c001e049:	e8 f2 17 ff ff       	call   c000f840 <malloc>
c001e04e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e055:	89 c3                	mov    ebx,eax
c001e057:	6a 00                	push   0x0
c001e059:	68 83 c3 02 c0       	push   0xc002c383
c001e05e:	6a 01                	push   0x1
c001e060:	50                   	push   eax
c001e061:	e8 b0 fb ff ff       	call   c001dc16 <Process::Process(bool, char const*, Process*, char**)>
c001e066:	83 c4 18             	add    esp,0x18
c001e069:	89 1d 14 1b 03 c0    	mov    DWORD PTR ds:0xc0031b14,ebx
c001e06f:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e075:	68 a4 c4 02 c0       	push   0xc002c4a4
c001e07a:	e8 9d 4e ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001e07f:	58                   	pop    eax
c001e080:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e086:	e8 b2 2c ff ff       	call   c0010d3d <setActiveTerminal(VgaText*)>
c001e08b:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e093:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e099:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e09c:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e0a6:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e0ac:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e0b2:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e0bc:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e0c6:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e0d0:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e0d6:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e0dc:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e0e6:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e0ec:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e0f6:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e0fc:	5a                   	pop    edx
c001e0fd:	59                   	pop    ecx
c001e0fe:	68 7f c3 02 c0       	push   0xc002c37f
c001e103:	50                   	push   eax
c001e104:	e8 2b 27 fe ff       	call   c0000834 <strcpy>
c001e109:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e110:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e114:	83 c4 14             	add    esp,0x14
c001e117:	5b                   	pop    ebx
c001e118:	5e                   	pop    esi
c001e119:	e9 36 22 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e11e <schedule()>:
c001e11e:	a1 e8 1a 03 c0       	mov    eax,ds:0xc0031ae8
c001e123:	85 c0                	test   eax,eax
c001e125:	74 0b                	je     c001e132 <schedule()+0x14>
c001e127:	c7 05 e4 1a 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031ae4,0x1
c001e131:	c3                   	ret    
c001e132:	53                   	push   ebx
c001e133:	83 ec 14             	sub    esp,0x14
c001e136:	68 08 1b 03 c0       	push   0xc0031b08
c001e13b:	e8 f6 a8 00 00       	call   c0028a36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e140:	83 c4 10             	add    esp,0x10
c001e143:	84 c0                	test   al,al
c001e145:	75 38                	jne    c001e17f <schedule()+0x61>
c001e147:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e14c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e14f:	4a                   	dec    edx
c001e150:	74 32                	je     c001e184 <schedule()+0x66>
c001e152:	83 ec 0c             	sub    esp,0xc
c001e155:	68 08 1b 03 c0       	push   0xc0031b08
c001e15a:	e8 cf a8 00 00       	call   c0028a2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e15f:	c7 04 24 08 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b08
c001e166:	89 c3                	mov    ebx,eax
c001e168:	e8 e5 a8 00 00       	call   c0028a52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e16d:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e174:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e177:	e8 07 fd ff ff       	call   c001de83 <switchToThread(ThreadControlBlock*)>
c001e17c:	83 c4 10             	add    esp,0x10
c001e17f:	83 c4 08             	add    esp,0x8
c001e182:	5b                   	pop    ebx
c001e183:	c3                   	ret    
c001e184:	83 ec 08             	sub    esp,0x8
c001e187:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e18e:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e194:	68 08 1b 03 c0       	push   0xc0031b08
c001e199:	e8 62 a9 00 00       	call   c0028b00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e19e:	83 c4 10             	add    esp,0x10
c001e1a1:	eb af                	jmp    c001e152 <schedule()+0x34>

c001e1a3 <unlockStuff()>:
c001e1a3:	a1 e8 1a 03 c0       	mov    eax,ds:0xc0031ae8
c001e1a8:	48                   	dec    eax
c001e1a9:	a3 e8 1a 03 c0       	mov    ds:0xc0031ae8,eax
c001e1ae:	75 09                	jne    c001e1b9 <unlockStuff()+0x16>
c001e1b0:	a1 e4 1a 03 c0       	mov    eax,ds:0xc0031ae4
c001e1b5:	85 c0                	test   eax,eax
c001e1b7:	75 05                	jne    c001e1be <unlockStuff()+0x1b>
c001e1b9:	e9 15 fc ff ff       	jmp    c001ddd3 <enableIRQs()>
c001e1be:	83 ec 0c             	sub    esp,0xc
c001e1c1:	c7 05 e4 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031ae4,0x0
c001e1cb:	e8 4e ff ff ff       	call   c001e11e <schedule()>
c001e1d0:	83 c4 0c             	add    esp,0xc
c001e1d3:	e9 fb fb ff ff       	jmp    c001ddd3 <enableIRQs()>

c001e1d8 <Semaphore::tryAcquire()>:
c001e1d8:	83 ec 0c             	sub    esp,0xc
c001e1db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1df:	e8 25 fc ff ff       	call   c001de09 <lockStuff()>
c001e1e4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e1e7:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e1e9:	7c 0b                	jl     c001e1f6 <Semaphore::tryAcquire()+0x1e>
c001e1eb:	e8 b3 ff ff ff       	call   c001e1a3 <unlockStuff()>
c001e1f0:	31 c0                	xor    eax,eax
c001e1f2:	83 c4 0c             	add    esp,0xc
c001e1f5:	c3                   	ret    
c001e1f6:	42                   	inc    edx
c001e1f7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e1fa:	e8 a4 ff ff ff       	call   c001e1a3 <unlockStuff()>
c001e1ff:	b0 01                	mov    al,0x1
c001e201:	83 c4 0c             	add    esp,0xc
c001e204:	c3                   	ret    
c001e205:	90                   	nop

c001e206 <Semaphore::assertLocked(char const*)>:
c001e206:	83 ec 0c             	sub    esp,0xc
c001e209:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e20d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e211:	e8 f3 fb ff ff       	call   c001de09 <lockStuff()>
c001e216:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e218:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e21b:	7c 05                	jl     c001e222 <Semaphore::assertLocked(char const*)+0x1c>
c001e21d:	83 c4 0c             	add    esp,0xc
c001e220:	eb 81                	jmp    c001e1a3 <unlockStuff()>
c001e222:	83 ec 0c             	sub    esp,0xc
c001e225:	52                   	push   edx
c001e226:	e8 92 c3 ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c001e22b:	83 c4 10             	add    esp,0x10
c001e22e:	83 c4 0c             	add    esp,0xc
c001e231:	e9 6d ff ff ff       	jmp    c001e1a3 <unlockStuff()>

c001e236 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e236:	83 ec 0c             	sub    esp,0xc
c001e239:	e8 8f fb ff ff       	call   c001ddcd <getIRQNestingLevel()>
c001e23e:	83 ec 08             	sub    esp,0x8
c001e241:	50                   	push   eax
c001e242:	68 d8 c4 02 c0       	push   0xc002c4d8
c001e247:	e8 d0 4c ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001e24c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e250:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e255:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e258:	e8 c1 fe ff ff       	call   c001e11e <schedule()>
c001e25d:	e8 82 fb ff ff       	call   c001dde4 <unlockScheduler()>
c001e262:	e8 66 fb ff ff       	call   c001ddcd <getIRQNestingLevel()>
c001e267:	5a                   	pop    edx
c001e268:	59                   	pop    ecx
c001e269:	50                   	push   eax
c001e26a:	68 0c c5 02 c0       	push   0xc002c50c
c001e26f:	e8 a8 4c ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001e274:	83 c4 1c             	add    esp,0x1c
c001e277:	c3                   	ret    

c001e278 <blockTask(TaskState)>:
c001e278:	83 ec 0c             	sub    esp,0xc
c001e27b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e27f:	e8 5e fb ff ff       	call   c001dde2 <lockScheduler()>
c001e284:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e289:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e28c:	e8 8d fe ff ff       	call   c001e11e <schedule()>
c001e291:	83 c4 0c             	add    esp,0xc
c001e294:	e9 4b fb ff ff       	jmp    c001dde4 <unlockScheduler()>

c001e299 <waitTask(int, int*, int)>:
c001e299:	83 ec 18             	sub    esp,0x18
c001e29c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e2a5:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e2a8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e2ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2b1:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e2b4:	6a 07                	push   0x7
c001e2b6:	e8 bd ff ff ff       	call   c001e278 <blockTask(TaskState)>
c001e2bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2c0:	83 c4 10             	add    esp,0x10
c001e2c3:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e2c6:	85 d2                	test   edx,edx
c001e2c8:	74 0a                	je     c001e2d4 <waitTask(int, int*, int)+0x3b>
c001e2ca:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e2cd:	89 02                	mov    DWORD PTR [edx],eax
c001e2cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2d4:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e2d7:	83 c4 0c             	add    esp,0xc
c001e2da:	c3                   	ret    

c001e2db <nanoSleepUntil(unsigned long long)>:
c001e2db:	83 ec 0c             	sub    esp,0xc
c001e2de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e2e6:	3b 05 30 ec 02 c0    	cmp    eax,DWORD PTR ds:0xc002ec30
c001e2ec:	89 d1                	mov    ecx,edx
c001e2ee:	1b 0d 34 ec 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ec34
c001e2f4:	73 04                	jae    c001e2fa <nanoSleepUntil(unsigned long long)+0x1f>
c001e2f6:	83 c4 0c             	add    esp,0xc
c001e2f9:	c3                   	ret    
c001e2fa:	e8 0a fb ff ff       	call   c001de09 <lockStuff()>
c001e2ff:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e305:	83 ec 08             	sub    esp,0x8
c001e308:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e30b:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e30e:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e314:	68 fc 1a 03 c0       	push   0xc0031afc
c001e319:	e8 e2 a7 00 00       	call   c0028b00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e31e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e325:	e8 4e ff ff ff       	call   c001e278 <blockTask(TaskState)>
c001e32a:	83 c4 1c             	add    esp,0x1c
c001e32d:	e9 71 fe ff ff       	jmp    c001e1a3 <unlockStuff()>

c001e332 <nanoSleep(unsigned long long)>:
c001e332:	a1 30 ec 02 c0       	mov    eax,ds:0xc002ec30
c001e337:	8b 15 34 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec34
c001e33d:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e341:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e345:	eb 94                	jmp    c001e2db <nanoSleepUntil(unsigned long long)>

c001e347 <sleep(unsigned long long)>:
c001e347:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e34f:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e354:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e358:	01 ca                	add    edx,ecx
c001e35a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e35e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e362:	eb ce                	jmp    c001e332 <nanoSleep(unsigned long long)>

c001e364 <Semaphore::acquire()>:
c001e364:	83 ec 0c             	sub    esp,0xc
c001e367:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e36b:	e8 99 fa ff ff       	call   c001de09 <lockStuff()>
c001e370:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e373:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e375:	7d 0c                	jge    c001e383 <Semaphore::acquire()+0x1f>
c001e377:	42                   	inc    edx
c001e378:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e37b:	83 c4 0c             	add    esp,0xc
c001e37e:	e9 20 fe ff ff       	jmp    c001e1a3 <unlockStuff()>
c001e383:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e389:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e390:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e393:	85 d2                	test   edx,edx
c001e395:	74 2a                	je     c001e3c1 <Semaphore::acquire()+0x5d>
c001e397:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e39a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e3a0:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e3a3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e3a9:	83 ec 0c             	sub    esp,0xc
c001e3ac:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e3af:	6a 05                	push   0x5
c001e3b1:	e8 c2 fe ff ff       	call   c001e278 <blockTask(TaskState)>
c001e3b6:	83 c4 10             	add    esp,0x10
c001e3b9:	83 c4 0c             	add    esp,0xc
c001e3bc:	e9 e2 fd ff ff       	jmp    c001e1a3 <unlockStuff()>
c001e3c1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e3c7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e3ca:	eb d7                	jmp    c001e3a3 <Semaphore::acquire()+0x3f>

c001e3cc <taskReturned>:
c001e3cc:	83 ec 18             	sub    esp,0x18
c001e3cf:	68 40 c5 02 c0       	push   0xc002c540
c001e3d4:	e8 e4 c1 ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c001e3d9:	83 c4 10             	add    esp,0x10
c001e3dc:	83 ec 0c             	sub    esp,0xc
c001e3df:	6a 02                	push   0x2
c001e3e1:	e8 92 fe ff ff       	call   c001e278 <blockTask(TaskState)>
c001e3e6:	e8 f7 f9 ff ff       	call   c001dde2 <lockScheduler()>
c001e3eb:	e8 2e fd ff ff       	call   c001e11e <schedule()>
c001e3f0:	e8 ef f9 ff ff       	call   c001dde4 <unlockScheduler()>
c001e3f5:	83 c4 10             	add    esp,0x10
c001e3f8:	eb e2                	jmp    c001e3dc <taskReturned+0x10>

c001e3fa <unblockTask(ThreadControlBlock*)>:
c001e3fa:	53                   	push   ebx
c001e3fb:	83 ec 08             	sub    esp,0x8
c001e3fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e402:	e8 db f9 ff ff       	call   c001dde2 <lockScheduler()>
c001e407:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e40a:	85 c0                	test   eax,eax
c001e40c:	74 5c                	je     c001e46a <unblockTask(ThreadControlBlock*)+0x70>
c001e40e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e411:	48                   	dec    eax
c001e412:	74 31                	je     c001e445 <unblockTask(ThreadControlBlock*)+0x4b>
c001e414:	83 ec 0c             	sub    esp,0xc
c001e417:	68 08 1b 03 c0       	push   0xc0031b08
c001e41c:	e8 0d a6 00 00       	call   c0028a2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e421:	83 c4 10             	add    esp,0x10
c001e424:	85 c0                	test   eax,eax
c001e426:	75 17                	jne    c001e43f <unblockTask(ThreadControlBlock*)+0x45>
c001e428:	eb 65                	jmp    c001e48f <unblockTask(ThreadControlBlock*)+0x95>
c001e42a:	83 ec 08             	sub    esp,0x8
c001e42d:	50                   	push   eax
c001e42e:	68 08 1b 03 c0       	push   0xc0031b08
c001e433:	e8 d0 a8 00 00       	call   c0028d08 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e438:	83 c4 10             	add    esp,0x10
c001e43b:	85 c0                	test   eax,eax
c001e43d:	74 50                	je     c001e48f <unblockTask(ThreadControlBlock*)+0x95>
c001e43f:	39 c3                	cmp    ebx,eax
c001e441:	75 e7                	jne    c001e42a <unblockTask(ThreadControlBlock*)+0x30>
c001e443:	eb 1c                	jmp    c001e461 <unblockTask(ThreadControlBlock*)+0x67>
c001e445:	83 ec 0c             	sub    esp,0xc
c001e448:	68 30 c6 02 c0       	push   0xc002c630
c001e44d:	e8 ca 4a ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001e452:	c7 04 24 bc c5 02 c0 	mov    DWORD PTR [esp],0xc002c5bc
c001e459:	e8 be 4a ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001e45e:	83 c4 10             	add    esp,0x10
c001e461:	83 c4 08             	add    esp,0x8
c001e464:	5b                   	pop    ebx
c001e465:	e9 7a f9 ff ff       	jmp    c001dde4 <unlockScheduler()>
c001e46a:	83 ec 0c             	sub    esp,0xc
c001e46d:	68 74 c5 02 c0       	push   0xc002c574
c001e472:	e8 a5 4a ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001e477:	c7 04 24 bc c5 02 c0 	mov    DWORD PTR [esp],0xc002c5bc
c001e47e:	e8 99 4a ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001e483:	83 c4 10             	add    esp,0x10
c001e486:	83 c4 08             	add    esp,0x8
c001e489:	5b                   	pop    ebx
c001e48a:	e9 55 f9 ff ff       	jmp    c001dde4 <unlockScheduler()>
c001e48f:	83 ec 08             	sub    esp,0x8
c001e492:	53                   	push   ebx
c001e493:	68 08 1b 03 c0       	push   0xc0031b08
c001e498:	e8 63 a6 00 00       	call   c0028b00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e49d:	83 c4 10             	add    esp,0x10
c001e4a0:	83 c4 08             	add    esp,0x8
c001e4a3:	5b                   	pop    ebx
c001e4a4:	e9 3b f9 ff ff       	jmp    c001dde4 <unlockScheduler()>

c001e4a9 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e4a9:	55                   	push   ebp
c001e4aa:	57                   	push   edi
c001e4ab:	56                   	push   esi
c001e4ac:	53                   	push   ebx
c001e4ad:	83 ec 1c             	sub    esp,0x1c
c001e4b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e4b4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4b7:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e4bd:	85 ff                	test   edi,edi
c001e4bf:	7e 20                	jle    c001e4e1 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e4c1:	31 f6                	xor    esi,esi
c001e4c3:	83 ec 0c             	sub    esp,0xc
c001e4c6:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e4cd:	46                   	inc    esi
c001e4ce:	e8 7d 13 ff ff       	call   c000f850 <free>
c001e4d3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4d6:	83 c4 10             	add    esp,0x10
c001e4d9:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e4df:	7f e2                	jg     c001e4c3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e4e1:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e4eb:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e4f0:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e4f3:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e4f6:	d3 c0                	rol    eax,cl
c001e4f8:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e4ff:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e502:	89 f7                	mov    edi,esi
c001e504:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e50c:	0f 85 74 01 00 00    	jne    c001e686 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e512:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e518:	85 ed                	test   ebp,ebp
c001e51a:	74 1b                	je     c001e537 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e51c:	83 ec 0c             	sub    esp,0xc
c001e51f:	55                   	push   ebp
c001e520:	e8 05 be ff ff       	call   c001a32a <EnvVarContainer::~EnvVarContainer()>
c001e525:	59                   	pop    ecx
c001e526:	5e                   	pop    esi
c001e527:	6a 0c                	push   0xc
c001e529:	55                   	push   ebp
c001e52a:	e8 0d 49 ff ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c001e52f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e532:	83 c4 10             	add    esp,0x10
c001e535:	89 f7                	mov    edi,esi
c001e537:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e53d:	85 c0                	test   eax,eax
c001e53f:	0f 84 aa 00 00 00    	je     c001e5ef <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e545:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e548:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e54c:	31 c9                	xor    ecx,ecx
c001e54e:	eb 10                	jmp    c001e560 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e550:	41                   	inc    ecx
c001e551:	83 f9 10             	cmp    ecx,0x10
c001e554:	0f 84 95 00 00 00    	je     c001e5ef <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e55a:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e560:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e567:	d3 fa                	sar    edx,cl
c001e569:	83 e2 01             	and    edx,0x1
c001e56c:	74 e2                	je     c001e550 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e56e:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e571:	01 ca                	add    edx,ecx
c001e573:	89 d5                	mov    ebp,edx
c001e575:	c1 e5 05             	shl    ebp,0x5
c001e578:	01 ea                	add    edx,ebp
c001e57a:	01 d0                	add    eax,edx
c001e57c:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e582:	83 fd 07             	cmp    ebp,0x7
c001e585:	75 c9                	jne    c001e550 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e587:	05 40 02 00 00       	add    eax,0x240
c001e58c:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e58f:	83 fd ff             	cmp    ebp,0xffffffff
c001e592:	0f 8c 08 01 00 00    	jl     c001e6a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e598:	0f 84 b9 01 00 00    	je     c001e757 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e59e:	85 ed                	test   ebp,ebp
c001e5a0:	0f 84 a0 01 00 00    	je     c001e746 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e5a6:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e5a8:	75 a6                	jne    c001e550 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e5aa:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e5b0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e5b4:	01 d0                	add    eax,edx
c001e5b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e5ba:	83 ec 0c             	sub    esp,0xc
c001e5bd:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e5c3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5c6:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e5cc:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e5d3:	50                   	push   eax
c001e5d4:	e8 21 fe ff ff       	call   c001e3fa <unblockTask(ThreadControlBlock*)>
c001e5d9:	83 c4 10             	add    esp,0x10
c001e5dc:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e5df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e5e3:	89 f7                	mov    edi,esi
c001e5e5:	41                   	inc    ecx
c001e5e6:	83 f9 10             	cmp    ecx,0x10
c001e5e9:	0f 85 6b ff ff ff    	jne    c001e55a <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e5ef:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e5f5:	85 c0                	test   eax,eax
c001e5f7:	74 5d                	je     c001e656 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e5f9:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e5ff:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e605:	74 4f                	je     c001e656 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e607:	83 ec 0c             	sub    esp,0xc
c001e60a:	68 08 1b 03 c0       	push   0xc0031b08
c001e60f:	e8 1a a4 00 00       	call   c0028a2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e614:	c7 04 24 08 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b08
c001e61b:	89 c7                	mov    edi,eax
c001e61d:	e8 14 a4 00 00       	call   c0028a36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e622:	83 c4 10             	add    esp,0x10
c001e625:	84 c0                	test   al,al
c001e627:	0f 84 e4 00 00 00    	je     c001e711 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e62d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e630:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e636:	85 d2                	test   edx,edx
c001e638:	74 0f                	je     c001e649 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e63a:	83 ec 0c             	sub    esp,0xc
c001e63d:	8b 02                	mov    eax,DWORD PTR [edx]
c001e63f:	52                   	push   edx
c001e640:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e643:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e646:	83 c4 10             	add    esp,0x10
c001e649:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e653:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e656:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e65c:	85 db                	test   ebx,ebx
c001e65e:	74 16                	je     c001e676 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e660:	83 ec 0c             	sub    esp,0xc
c001e663:	53                   	push   ebx
c001e664:	e8 8d 3b ff ff       	call   c00121f6 <VAS::~VAS()>
c001e669:	58                   	pop    eax
c001e66a:	5a                   	pop    edx
c001e66b:	6a 10                	push   0x10
c001e66d:	53                   	push   ebx
c001e66e:	e8 c9 47 ff ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c001e673:	83 c4 10             	add    esp,0x10
c001e676:	83 ec 0c             	sub    esp,0xc
c001e679:	68 8a c3 02 c0       	push   0xc002c38a
c001e67e:	e8 99 48 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001e683:	83 c4 10             	add    esp,0x10
c001e686:	83 ec 08             	sub    esp,0x8
c001e689:	68 3f 07 00 00       	push   0x73f
c001e68e:	68 98 c3 02 c0       	push   0xc002c398
c001e693:	e8 84 48 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001e698:	83 c4 2c             	add    esp,0x2c
c001e69b:	5b                   	pop    ebx
c001e69c:	5e                   	pop    esi
c001e69d:	5f                   	pop    edi
c001e69e:	5d                   	pop    ebp
c001e69f:	c3                   	ret    
c001e6a0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e6a4:	83 ec 0c             	sub    esp,0xc
c001e6a7:	68 74 c6 02 c0       	push   0xc002c674
c001e6ac:	e8 0c bf ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c001e6b1:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e6b4:	83 c4 10             	add    esp,0x10
c001e6b7:	89 f7                	mov    edi,esi
c001e6b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e6bd:	e9 8e fe ff ff       	jmp    c001e550 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e6c2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e6c8:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e6ce:	75 1c                	jne    c001e6ec <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e6d0:	83 ec 0c             	sub    esp,0xc
c001e6d3:	68 dc c6 02 c0       	push   0xc002c6dc
c001e6d8:	e8 3f 48 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001e6dd:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e6e4:	e8 8f fb ff ff       	call   c001e278 <blockTask(TaskState)>
c001e6e9:	83 c4 10             	add    esp,0x10
c001e6ec:	83 ec 08             	sub    esp,0x8
c001e6ef:	56                   	push   esi
c001e6f0:	68 08 1b 03 c0       	push   0xc0031b08
c001e6f5:	e8 06 a4 00 00       	call   c0028b00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e6fa:	c7 04 24 08 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b08
c001e701:	e8 28 a3 00 00       	call   c0028a2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e706:	83 c4 10             	add    esp,0x10
c001e709:	39 f8                	cmp    eax,edi
c001e70b:	0f 84 1c ff ff ff    	je     c001e62d <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e711:	83 ec 0c             	sub    esp,0xc
c001e714:	68 08 1b 03 c0       	push   0xc0031b08
c001e719:	e8 10 a3 00 00       	call   c0028a2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e71e:	c7 04 24 08 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b08
c001e725:	89 c6                	mov    esi,eax
c001e727:	e8 26 a3 00 00       	call   c0028a52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e72c:	83 c4 10             	add    esp,0x10
c001e72f:	39 f3                	cmp    ebx,esi
c001e731:	74 b9                	je     c001e6ec <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e733:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e736:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e739:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e73f:	75 ab                	jne    c001e6ec <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e741:	e9 7c ff ff ff       	jmp    c001e6c2 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e746:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e74a:	83 ec 0c             	sub    esp,0xc
c001e74d:	68 a8 c6 02 c0       	push   0xc002c6a8
c001e752:	e9 55 ff ff ff       	jmp    c001e6ac <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e757:	8b 36                	mov    esi,DWORD PTR [esi]
c001e759:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e75d:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e760:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e763:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e769:	01 d7                	add    edi,edx
c001e76b:	89 f8                	mov    eax,edi
c001e76d:	e9 44 fe ff ff       	jmp    c001e5b6 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e772 <cleanerTaskFunction(void*)>:
c001e772:	53                   	push   ebx
c001e773:	83 ec 08             	sub    esp,0x8
c001e776:	e8 69 f6 ff ff       	call   c001dde4 <unlockScheduler()>
c001e77b:	e8 62 f6 ff ff       	call   c001dde2 <lockScheduler()>
c001e780:	80 3d cc 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031acc,0x0
c001e787:	0f 85 8e 00 00 00    	jne    c001e81b <cleanerTaskFunction(void*)+0xa9>
c001e78d:	83 ec 0c             	sub    esp,0xc
c001e790:	6a 02                	push   0x2
c001e792:	e8 9f fa ff ff       	call   c001e236 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e797:	83 c4 10             	add    esp,0x10
c001e79a:	c6 05 cc 1a 03 c0 00 	mov    BYTE PTR ds:0xc0031acc,0x0
c001e7a1:	e8 63 f6 ff ff       	call   c001de09 <lockStuff()>
c001e7a6:	e8 37 f6 ff ff       	call   c001dde2 <lockScheduler()>
c001e7ab:	83 ec 0c             	sub    esp,0xc
c001e7ae:	68 f0 1a 03 c0       	push   0xc0031af0
c001e7b3:	e8 7e a2 00 00       	call   c0028a36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e7b8:	83 c4 10             	add    esp,0x10
c001e7bb:	84 c0                	test   al,al
c001e7bd:	75 40                	jne    c001e7ff <cleanerTaskFunction(void*)+0x8d>
c001e7bf:	83 ec 0c             	sub    esp,0xc
c001e7c2:	68 f0 1a 03 c0       	push   0xc0031af0
c001e7c7:	e8 62 a2 00 00       	call   c0028a2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e7cc:	c7 04 24 f0 1a 03 c0 	mov    DWORD PTR [esp],0xc0031af0
c001e7d3:	89 c3                	mov    ebx,eax
c001e7d5:	e8 78 a2 00 00       	call   c0028a52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e7da:	c7 04 24 ae c3 02 c0 	mov    DWORD PTR [esp],0xc002c3ae
c001e7e1:	e8 36 47 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001e7e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e7e9:	e8 bb fc ff ff       	call   c001e4a9 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e7ee:	c7 04 24 c7 c3 02 c0 	mov    DWORD PTR [esp],0xc002c3c7
c001e7f5:	e8 22 47 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001e7fa:	83 c4 10             	add    esp,0x10
c001e7fd:	eb ac                	jmp    c001e7ab <cleanerTaskFunction(void*)+0x39>
c001e7ff:	e8 e0 f5 ff ff       	call   c001dde4 <unlockScheduler()>
c001e804:	e8 9a f9 ff ff       	call   c001e1a3 <unlockStuff()>
c001e809:	e8 d4 f5 ff ff       	call   c001dde2 <lockScheduler()>
c001e80e:	80 3d cc 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031acc,0x0
c001e815:	0f 84 72 ff ff ff    	je     c001e78d <cleanerTaskFunction(void*)+0x1b>
c001e81b:	e8 c4 f5 ff ff       	call   c001dde4 <unlockScheduler()>
c001e820:	e9 75 ff ff ff       	jmp    c001e79a <cleanerTaskFunction(void*)+0x28>

c001e825 <terminateTask(int)>:
c001e825:	83 ec 14             	sub    esp,0x14
c001e828:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e82d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e830:	83 c0 0c             	add    eax,0xc
c001e833:	50                   	push   eax
c001e834:	68 04 c7 02 c0       	push   0xc002c704
c001e839:	e8 de 46 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001e83e:	e8 c6 f5 ff ff       	call   c001de09 <lockStuff()>
c001e843:	e8 9a f5 ff ff       	call   c001dde2 <lockScheduler()>
c001e848:	c7 04 24 da c3 02 c0 	mov    DWORD PTR [esp],0xc002c3da
c001e84f:	e8 c8 46 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001e854:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e858:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e85d:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e860:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e865:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e868:	5a                   	pop    edx
c001e869:	59                   	pop    ecx
c001e86a:	50                   	push   eax
c001e86b:	68 f0 1a 03 c0       	push   0xc0031af0
c001e870:	e8 8b a2 00 00       	call   c0028b00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e875:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e87a:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e881:	c7 04 24 f4 c3 02 c0 	mov    DWORD PTR [esp],0xc002c3f4
c001e888:	e8 8f 46 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001e88d:	83 c4 10             	add    esp,0x10
c001e890:	a1 c8 1a 03 c0       	mov    eax,ds:0xc0031ac8
c001e895:	85 c0                	test   eax,eax
c001e897:	74 5a                	je     c001e8f3 <terminateTask(int)+0xce>
c001e899:	83 ec 0c             	sub    esp,0xc
c001e89c:	68 0e c4 02 c0       	push   0xc002c40e
c001e8a1:	e8 76 46 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001e8a6:	58                   	pop    eax
c001e8a7:	c6 05 cc 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031acc,0x1
c001e8ae:	ff 35 c8 1a 03 c0    	push   DWORD PTR ds:0xc0031ac8
c001e8b4:	e8 41 fb ff ff       	call   c001e3fa <unblockTask(ThreadControlBlock*)>
c001e8b9:	c7 04 24 28 c4 02 c0 	mov    DWORD PTR [esp],0xc002c428
c001e8c0:	e8 57 46 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001e8c5:	83 c4 10             	add    esp,0x10
c001e8c8:	e8 17 f5 ff ff       	call   c001dde4 <unlockScheduler()>
c001e8cd:	e8 d1 f8 ff ff       	call   c001e1a3 <unlockStuff()>
c001e8d2:	83 ec 0c             	sub    esp,0xc
c001e8d5:	68 60 c4 02 c0       	push   0xc002c460
c001e8da:	e8 3d 46 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001e8df:	83 c4 10             	add    esp,0x10
c001e8e2:	e8 fb f4 ff ff       	call   c001dde2 <lockScheduler()>
c001e8e7:	e8 32 f8 ff ff       	call   c001e11e <schedule()>
c001e8ec:	e8 f3 f4 ff ff       	call   c001dde4 <unlockScheduler()>
c001e8f1:	eb ef                	jmp    c001e8e2 <terminateTask(int)+0xbd>
c001e8f3:	83 ec 0c             	sub    esp,0xc
c001e8f6:	68 42 c4 02 c0       	push   0xc002c442
c001e8fb:	e8 1c 46 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001e900:	83 c4 10             	add    esp,0x10
c001e903:	eb c3                	jmp    c001e8c8 <terminateTask(int)+0xa3>

c001e905 <Thr::terminateFromIRQ(int)>:
c001e905:	83 ec 18             	sub    esp,0x18
c001e908:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e90c:	e8 14 ff ff ff       	call   c001e825 <terminateTask(int)>
c001e911:	90                   	nop

c001e912 <Semaphore::release()>:
c001e912:	83 ec 0c             	sub    esp,0xc
c001e915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e919:	e8 eb f4 ff ff       	call   c001de09 <lockStuff()>
c001e91e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e921:	85 d2                	test   edx,edx
c001e923:	74 1a                	je     c001e93f <Semaphore::release()+0x2d>
c001e925:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e928:	83 ec 0c             	sub    esp,0xc
c001e92b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e92e:	52                   	push   edx
c001e92f:	e8 c6 fa ff ff       	call   c001e3fa <unblockTask(ThreadControlBlock*)>
c001e934:	83 c4 10             	add    esp,0x10
c001e937:	83 c4 0c             	add    esp,0xc
c001e93a:	e9 64 f8 ff ff       	jmp    c001e1a3 <unlockStuff()>
c001e93f:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e942:	83 c4 0c             	add    esp,0xc
c001e945:	e9 59 f8 ff ff       	jmp    c001e1a3 <unlockStuff()>

c001e94a <__static_initialization_and_destruction_0(int, int)>:
c001e94a:	83 ec 0c             	sub    esp,0xc
c001e94d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e952:	0f 85 88 00 00 00    	jne    c001e9e0 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e958:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e960:	75 7e                	jne    c001e9e0 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e962:	83 ec 0c             	sub    esp,0xc
c001e965:	68 08 1b 03 c0       	push   0xc0031b08
c001e96a:	e8 41 a3 00 00       	call   c0028cb0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e96f:	83 c4 10             	add    esp,0x10
c001e972:	83 ec 04             	sub    esp,0x4
c001e975:	68 bc d4 02 c0       	push   0xc002d4bc
c001e97a:	68 08 1b 03 c0       	push   0xc0031b08
c001e97f:	68 70 8c 02 c0       	push   0xc0028c70
c001e984:	e8 2d 44 ff ff       	call   c0012db6 <__cxa_atexit>
c001e989:	83 c4 10             	add    esp,0x10
c001e98c:	83 ec 0c             	sub    esp,0xc
c001e98f:	68 fc 1a 03 c0       	push   0xc0031afc
c001e994:	e8 17 a3 00 00       	call   c0028cb0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e999:	83 c4 10             	add    esp,0x10
c001e99c:	83 ec 04             	sub    esp,0x4
c001e99f:	68 bc d4 02 c0       	push   0xc002d4bc
c001e9a4:	68 fc 1a 03 c0       	push   0xc0031afc
c001e9a9:	68 70 8c 02 c0       	push   0xc0028c70
c001e9ae:	e8 03 44 ff ff       	call   c0012db6 <__cxa_atexit>
c001e9b3:	83 c4 10             	add    esp,0x10
c001e9b6:	83 ec 0c             	sub    esp,0xc
c001e9b9:	68 f0 1a 03 c0       	push   0xc0031af0
c001e9be:	e8 ed a2 00 00       	call   c0028cb0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e9c3:	83 c4 10             	add    esp,0x10
c001e9c6:	83 ec 04             	sub    esp,0x4
c001e9c9:	68 bc d4 02 c0       	push   0xc002d4bc
c001e9ce:	68 f0 1a 03 c0       	push   0xc0031af0
c001e9d3:	68 70 8c 02 c0       	push   0xc0028c70
c001e9d8:	e8 d9 43 ff ff       	call   c0012db6 <__cxa_atexit>
c001e9dd:	83 c4 10             	add    esp,0x10
c001e9e0:	90                   	nop
c001e9e1:	83 c4 0c             	add    esp,0xc
c001e9e4:	c3                   	ret    

c001e9e5 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e9e5:	83 ec 0c             	sub    esp,0xc
c001e9e8:	83 ec 08             	sub    esp,0x8
c001e9eb:	68 ff ff 00 00       	push   0xffff
c001e9f0:	6a 01                	push   0x1
c001e9f2:	e8 53 ff ff ff       	call   c001e94a <__static_initialization_and_destruction_0(int, int)>
c001e9f7:	83 c4 10             	add    esp,0x10
c001e9fa:	83 c4 0c             	add    esp,0xc
c001e9fd:	c3                   	ret    

c001e9fe <Vm::inbv(unsigned short)>:
c001e9fe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ea02:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea07:	75 06                	jne    c001ea0f <Vm::inbv(unsigned short)+0x11>
c001ea09:	a0 4c 1b 03 c0       	mov    al,ds:0xc0031b4c
c001ea0e:	c3                   	ret    
c001ea0f:	ec                   	in     al,dx
c001ea10:	c3                   	ret    

c001ea11 <Vm::outbv(unsigned short, unsigned char)>:
c001ea11:	53                   	push   ebx
c001ea12:	83 ec 08             	sub    esp,0x8
c001ea15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea19:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ea1d:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea22:	75 38                	jne    c001ea5c <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001ea24:	0f b6 c3             	movzx  eax,bl
c001ea27:	51                   	push   ecx
c001ea28:	51                   	push   ecx
c001ea29:	50                   	push   eax
c001ea2a:	68 23 c7 02 c0       	push   0xc002c723
c001ea2f:	e8 e8 44 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001ea34:	8b 15 4c 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b4c
c001ea3a:	83 c4 10             	add    esp,0x10
c001ea3d:	8d 42 01             	lea    eax,[edx+0x1]
c001ea40:	88 9a 60 1b 03 c0    	mov    BYTE PTR [edx-0x3ffce4a0],bl
c001ea46:	a3 4c 1b 03 c0       	mov    ds:0xc0031b4c,eax
c001ea4b:	83 f8 20             	cmp    eax,0x20
c001ea4e:	75 0f                	jne    c001ea5f <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ea50:	c7 05 4c 1b 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0031b4c,0x1f
c001ea5a:	eb 03                	jmp    c001ea5f <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ea5c:	88 d8                	mov    al,bl
c001ea5e:	ee                   	out    dx,al
c001ea5f:	83 c4 08             	add    esp,0x8
c001ea62:	5b                   	pop    ebx
c001ea63:	c3                   	ret    

c001ea64 <Vm::realToLinear(unsigned short, unsigned short)>:
c001ea64:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ea69:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ea6e:	c1 e0 04             	shl    eax,0x4
c001ea71:	01 d0                	add    eax,edx
c001ea73:	c3                   	ret    

c001ea74 <Vm::getSegment(unsigned int)>:
c001ea74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea78:	c1 e8 10             	shr    eax,0x10
c001ea7b:	c3                   	ret    

c001ea7c <Vm::getOffset(unsigned int)>:
c001ea7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea80:	c3                   	ret    

c001ea81 <Vm::mainloop2()>:
c001ea81:	83 ec 0c             	sub    esp,0xc
c001ea84:	e8 59 f3 ff ff       	call   c001dde2 <lockScheduler()>
c001ea89:	83 ec 0c             	sub    esp,0xc
c001ea8c:	c6 05 45 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031b45,0x1
c001ea93:	6a 02                	push   0x2
c001ea95:	e8 9c f7 ff ff       	call   c001e236 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ea9a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea9f:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001eaa3:	52                   	push   edx
c001eaa4:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001eaa8:	52                   	push   edx
c001eaa9:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001eaad:	52                   	push   edx
c001eaae:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001eab2:	50                   	push   eax
c001eab3:	e8 42 18 fe ff       	call   c00002fa <goToVM86>
c001eab8:	83 c4 2c             	add    esp,0x2c
c001eabb:	c3                   	ret    

c001eabc <Vm::mainVm8086Loop(void*)>:
c001eabc:	83 ec 0c             	sub    esp,0xc
c001eabf:	e8 20 f3 ff ff       	call   c001dde4 <unlockScheduler()>
c001eac4:	83 c4 0c             	add    esp,0xc
c001eac7:	eb b8                	jmp    c001ea81 <Vm::mainloop2()>

c001eac9 <Vm::mainloop3(unsigned long)>:
c001eac9:	53                   	push   ebx
c001eaca:	83 ec 08             	sub    esp,0x8
c001eacd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ead1:	e8 0c f3 ff ff       	call   c001dde2 <lockScheduler()>
c001ead6:	83 ec 0c             	sub    esp,0xc
c001ead9:	89 1d 40 1b 03 c0    	mov    DWORD PTR ds:0xc0031b40,ebx
c001eadf:	6a 02                	push   0x2
c001eae1:	c6 05 44 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031b44,0x1
c001eae8:	e8 49 f7 ff ff       	call   c001e236 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eaed:	83 c4 18             	add    esp,0x18
c001eaf0:	5b                   	pop    ebx
c001eaf1:	eb 8e                	jmp    c001ea81 <Vm::mainloop2()>

c001eaf3 <Vm::initialise8086()>:
c001eaf3:	83 ec 0c             	sub    esp,0xc
c001eaf6:	68 80 00 00 00       	push   0x80
c001eafb:	6a 00                	push   0x0
c001eafd:	68 bc ea 01 c0       	push   0xc001eabc
c001eb02:	ff 35 14 1b 03 c0    	push   DWORD PTR ds:0xc0031b14
c001eb08:	e8 07 f4 ff ff       	call   c001df14 <Process::createThread(void (*)(void*), void*, int)>
c001eb0d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001eb14:	a3 48 1b 03 c0       	mov    ds:0xc0031b48,eax
c001eb19:	68 00 01 00 00       	push   0x100
c001eb1e:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001eb23:	6a 00                	push   0x0
c001eb25:	6a 00                	push   0x0
c001eb27:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001eb2d:	e8 24 3b ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001eb32:	83 c4 2c             	add    esp,0x2c
c001eb35:	c3                   	ret    

c001eb36 <Vm::finish8086()>:
c001eb36:	53                   	push   ebx
c001eb37:	83 ec 08             	sub    esp,0x8
c001eb3a:	e8 a3 f2 ff ff       	call   c001dde2 <lockScheduler()>
c001eb3f:	80 3d 44 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031b44,0x0
c001eb46:	75 0c                	jne    c001eb54 <Vm::finish8086()+0x1e>
c001eb48:	e8 d1 f5 ff ff       	call   c001e11e <schedule()>
c001eb4d:	e8 92 f2 ff ff       	call   c001dde4 <unlockScheduler()>
c001eb52:	eb e6                	jmp    c001eb3a <Vm::finish8086()+0x4>
c001eb54:	83 ec 0c             	sub    esp,0xc
c001eb57:	8b 1d 40 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031b40
c001eb5d:	ff 35 48 1b 03 c0    	push   DWORD PTR ds:0xc0031b48
c001eb63:	c6 05 44 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031b44,0x0
c001eb6a:	e8 8b f8 ff ff       	call   c001e3fa <unblockTask(ThreadControlBlock*)>
c001eb6f:	e8 70 f2 ff ff       	call   c001dde4 <unlockScheduler()>
c001eb74:	89 d8                	mov    eax,ebx
c001eb76:	83 c4 18             	add    esp,0x18
c001eb79:	5b                   	pop    ebx
c001eb7a:	c3                   	ret    

c001eb7b <Vm::getOutput8086(unsigned char*)>:
c001eb7b:	83 ec 10             	sub    esp,0x10
c001eb7e:	ff 35 4c 1b 03 c0    	push   DWORD PTR ds:0xc0031b4c
c001eb84:	68 60 1b 03 c0       	push   0xc0031b60
c001eb89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb8d:	e8 b2 1b fe ff       	call   c0000744 <memcpy>
c001eb92:	a1 4c 1b 03 c0       	mov    eax,ds:0xc0031b4c
c001eb97:	c7 05 4c 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031b4c,0x0
c001eba1:	83 c4 1c             	add    esp,0x1c
c001eba4:	c3                   	ret    

c001eba5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001eba5:	55                   	push   ebp
c001eba6:	57                   	push   edi
c001eba7:	56                   	push   esi
c001eba8:	53                   	push   ebx
c001eba9:	83 ec 2c             	sub    esp,0x2c
c001ebac:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ebb0:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ebb4:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ebb8:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ebbc:	e8 21 f2 ff ff       	call   c001dde2 <lockScheduler()>
c001ebc1:	a0 45 1b 03 c0       	mov    al,ds:0xc0031b45
c001ebc6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ebca:	84 c0                	test   al,al
c001ebcc:	75 0c                	jne    c001ebda <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001ebce:	e8 4b f5 ff ff       	call   c001e11e <schedule()>
c001ebd3:	e8 0c f2 ff ff       	call   c001dde4 <unlockScheduler()>
c001ebd8:	eb e2                	jmp    c001ebbc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ebda:	a1 48 1b 03 c0       	mov    eax,ds:0xc0031b48
c001ebdf:	c7 05 4c 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031b4c,0x0
c001ebe9:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001ebed:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001ebf1:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001ebf5:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ebf9:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ebfd:	50                   	push   eax
c001ebfe:	6a 20                	push   0x20
c001ec00:	6a 00                	push   0x0
c001ec02:	68 60 1b 03 c0       	push   0xc0031b60
c001ec07:	e8 6c 1b fe ff       	call   c0000778 <memset>
c001ec0c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ec13:	e8 28 0c ff ff       	call   c000f840 <malloc>
c001ec18:	83 c4 0c             	add    esp,0xc
c001ec1b:	89 c7                	mov    edi,eax
c001ec1d:	ff 35 14 1b 03 c0    	push   DWORD PTR ds:0xc0031b14
c001ec23:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ec27:	50                   	push   eax
c001ec28:	e8 47 48 ff ff       	call   c0013474 <File::File(char const*, Process*)>
c001ec2d:	83 c4 10             	add    esp,0x10
c001ec30:	85 ff                	test   edi,edi
c001ec32:	75 0a                	jne    c001ec3e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ec34:	83 ec 0c             	sub    esp,0xc
c001ec37:	68 3f c7 02 c0       	push   0xc002c73f
c001ec3c:	eb 27                	jmp    c001ec65 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ec3e:	50                   	push   eax
c001ec3f:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ec43:	50                   	push   eax
c001ec44:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ec48:	50                   	push   eax
c001ec49:	57                   	push   edi
c001ec4a:	e8 35 4b ff ff       	call   c0013784 <File::stat(unsigned long long*, bool*)>
c001ec4f:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001ec54:	83 c4 10             	add    esp,0x10
c001ec57:	89 e8                	mov    eax,ebp
c001ec59:	84 c0                	test   al,al
c001ec5b:	74 19                	je     c001ec76 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ec5d:	83 ec 0c             	sub    esp,0xc
c001ec60:	68 53 c7 02 c0       	push   0xc002c753
c001ec65:	e8 53 b9 ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c001ec6a:	31 ed                	xor    ebp,ebp
c001ec6c:	e8 73 f1 ff ff       	call   c001dde4 <unlockScheduler()>
c001ec71:	83 c4 10             	add    esp,0x10
c001ec74:	eb 75                	jmp    c001eceb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ec76:	50                   	push   eax
c001ec77:	50                   	push   eax
c001ec78:	6a 01                	push   0x1
c001ec7a:	57                   	push   edi
c001ec7b:	e8 58 48 ff ff       	call   c00134d8 <File::open(FileOpenMode)>
c001ec80:	83 c4 10             	add    esp,0x10
c001ec83:	85 c0                	test   eax,eax
c001ec85:	74 17                	je     c001ec9e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001ec87:	83 ec 0c             	sub    esp,0xc
c001ec8a:	68 6c c7 02 c0       	push   0xc002c76c
c001ec8f:	e8 29 b9 ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c001ec94:	e8 4b f1 ff ff       	call   c001dde4 <unlockScheduler()>
c001ec99:	83 c4 10             	add    esp,0x10
c001ec9c:	eb 4d                	jmp    c001eceb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ec9e:	0f b7 f6             	movzx  esi,si
c001eca1:	50                   	push   eax
c001eca2:	0f b7 db             	movzx  ebx,bx
c001eca5:	50                   	push   eax
c001eca6:	56                   	push   esi
c001eca7:	53                   	push   ebx
c001eca8:	e8 b7 fd ff ff       	call   c001ea64 <Vm::realToLinear(unsigned short, unsigned short)>
c001ecad:	5a                   	pop    edx
c001ecae:	8b 17                	mov    edx,DWORD PTR [edi]
c001ecb0:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ecb4:	51                   	push   ecx
c001ecb5:	50                   	push   eax
c001ecb6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ecba:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ecbe:	57                   	push   edi
c001ecbf:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ecc2:	83 c4 14             	add    esp,0x14
c001ecc5:	57                   	push   edi
c001ecc6:	e8 6b 48 ff ff       	call   c0013536 <File::close()>
c001eccb:	c6 05 45 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031b45,0x0
c001ecd2:	e8 0d f1 ff ff       	call   c001dde4 <unlockScheduler()>
c001ecd7:	59                   	pop    ecx
c001ecd8:	ff 35 48 1b 03 c0    	push   DWORD PTR ds:0xc0031b48
c001ecde:	e8 17 f7 ff ff       	call   c001e3fa <unblockTask(ThreadControlBlock*)>
c001ece3:	83 c4 10             	add    esp,0x10
c001ece6:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001eceb:	83 c4 2c             	add    esp,0x2c
c001ecee:	89 e8                	mov    eax,ebp
c001ecf0:	5b                   	pop    ebx
c001ecf1:	5e                   	pop    esi
c001ecf2:	5f                   	pop    edi
c001ecf3:	5d                   	pop    ebp
c001ecf4:	c3                   	ret    

c001ecf5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ecf5:	57                   	push   edi
c001ecf6:	56                   	push   esi
c001ecf7:	53                   	push   ebx
c001ecf8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ecfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed00:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ed04:	83 e8 06             	sub    eax,0x6
c001ed07:	0f b7 c0             	movzx  eax,ax
c001ed0a:	50                   	push   eax
c001ed0b:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ed10:	50                   	push   eax
c001ed11:	e8 4e fd ff ff       	call   c001ea64 <Vm::realToLinear(unsigned short, unsigned short)>
c001ed16:	5a                   	pop    edx
c001ed17:	5e                   	pop    esi
c001ed18:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ed1b:	8d 56 fa             	lea    edx,[esi-0x6]
c001ed1e:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ed24:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ed27:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ed2a:	83 c2 02             	add    edx,0x2
c001ed2d:	66 89 10             	mov    WORD PTR [eax],dx
c001ed30:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ed33:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ed37:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ed3a:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ed3e:	89 d6                	mov    esi,edx
c001ed40:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ed46:	66 81 e6 ff fd       	and    si,0xfdff
c001ed4b:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ed4f:	74 07                	je     c001ed58 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ed51:	89 d6                	mov    esi,edx
c001ed53:	66 81 ce 00 02       	or     si,0x200
c001ed58:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ed5c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ed61:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ed65:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ed6d:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ed70:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ed78:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ed7b:	5b                   	pop    ebx
c001ed7c:	5e                   	pop    esi
c001ed7d:	5f                   	pop    edi
c001ed7e:	c3                   	ret    

c001ed7f <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ed7f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed84:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed89:	c1 e0 04             	shl    eax,0x4
c001ed8c:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ed8f:	c3                   	ret    

c001ed90 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ed90:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed95:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed9a:	c1 e0 04             	shl    eax,0x4
c001ed9d:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001eda1:	c3                   	ret    

c001eda2 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001eda2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eda7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edac:	c1 e0 04             	shl    eax,0x4
c001edaf:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001edb2:	c3                   	ret    

c001edb3 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001edb3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edb8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edbd:	c1 e0 04             	shl    eax,0x4
c001edc0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001edc4:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001edc7:	c3                   	ret    

c001edc8 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001edc8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edcd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edd2:	c1 e0 04             	shl    eax,0x4
c001edd5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001edd9:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001eddd:	c3                   	ret    

c001edde <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001edde:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ede3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ede8:	c1 e0 04             	shl    eax,0x4
c001edeb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001edef:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001edf2:	c3                   	ret    

c001edf3 <Vm::faultHandler(regs*)>:
c001edf3:	55                   	push   ebp
c001edf4:	57                   	push   edi
c001edf5:	56                   	push   esi
c001edf6:	53                   	push   ebx
c001edf7:	83 ec 1c             	sub    esp,0x1c
c001edfa:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001edfe:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001ee01:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001ee04:	0f b7 c1             	movzx  eax,cx
c001ee07:	50                   	push   eax
c001ee08:	0f b7 c3             	movzx  eax,bx
c001ee0b:	c1 e3 04             	shl    ebx,0x4
c001ee0e:	50                   	push   eax
c001ee0f:	e8 50 fc ff ff       	call   c001ea64 <Vm::realToLinear(unsigned short, unsigned short)>
c001ee14:	5a                   	pop    edx
c001ee15:	89 c5                	mov    ebp,eax
c001ee17:	5e                   	pop    esi
c001ee18:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001ee1c:	50                   	push   eax
c001ee1d:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ee21:	50                   	push   eax
c001ee22:	e8 3d fc ff ff       	call   c001ea64 <Vm::realToLinear(unsigned short, unsigned short)>
c001ee27:	01 cb                	add    ebx,ecx
c001ee29:	89 c6                	mov    esi,eax
c001ee2b:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001ee2f:	50                   	push   eax
c001ee30:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee34:	50                   	push   eax
c001ee35:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ee39:	50                   	push   eax
c001ee3a:	55                   	push   ebp
c001ee3b:	53                   	push   ebx
c001ee3c:	b3 06                	mov    bl,0x6
c001ee3e:	68 85 c7 02 c0       	push   0xc002c785
c001ee43:	e8 d4 40 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001ee48:	83 c4 20             	add    esp,0x20
c001ee4b:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ee50:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ee55:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ee59:	3c 9d                	cmp    al,0x9d
c001ee5b:	0f 84 d7 02 00 00    	je     c001f138 <Vm::faultHandler(regs*)+0x345>
c001ee61:	0f 87 a3 00 00 00    	ja     c001ef0a <Vm::faultHandler(regs*)+0x117>
c001ee67:	3c 66                	cmp    al,0x66
c001ee69:	0f 84 15 02 00 00    	je     c001f084 <Vm::faultHandler(regs*)+0x291>
c001ee6f:	77 5f                	ja     c001eed0 <Vm::faultHandler(regs*)+0xdd>
c001ee71:	3c 36                	cmp    al,0x36
c001ee73:	0f 84 f1 01 00 00    	je     c001f06a <Vm::faultHandler(regs*)+0x277>
c001ee79:	77 28                	ja     c001eea3 <Vm::faultHandler(regs*)+0xb0>
c001ee7b:	3c 26                	cmp    al,0x26
c001ee7d:	0f 84 99 01 00 00    	je     c001f01c <Vm::faultHandler(regs*)+0x229>
c001ee83:	3c 2e                	cmp    al,0x2e
c001ee85:	0f 85 3b 07 00 00    	jne    c001f5c6 <Vm::faultHandler(regs*)+0x7d3>
c001ee8b:	83 ec 0c             	sub    esp,0xc
c001ee8e:	31 db                	xor    ebx,ebx
c001ee90:	68 9a c7 02 c0       	push   0xc002c79a
c001ee95:	e8 82 40 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001ee9a:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ee9d:	83 c4 10             	add    esp,0x10
c001eea0:	45                   	inc    ebp
c001eea1:	eb b2                	jmp    c001ee55 <Vm::faultHandler(regs*)+0x62>
c001eea3:	3c 64                	cmp    al,0x64
c001eea5:	0f 84 8b 01 00 00    	je     c001f036 <Vm::faultHandler(regs*)+0x243>
c001eeab:	0f 87 9f 01 00 00    	ja     c001f050 <Vm::faultHandler(regs*)+0x25d>
c001eeb1:	3c 3e                	cmp    al,0x3e
c001eeb3:	0f 85 0d 07 00 00    	jne    c001f5c6 <Vm::faultHandler(regs*)+0x7d3>
c001eeb9:	83 ec 0c             	sub    esp,0xc
c001eebc:	b3 01                	mov    bl,0x1
c001eebe:	68 9e c7 02 c0       	push   0xc002c79e
c001eec3:	e8 54 40 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001eec8:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eecb:	83 c4 10             	add    esp,0x10
c001eece:	eb d0                	jmp    c001eea0 <Vm::faultHandler(regs*)+0xad>
c001eed0:	3c 6d                	cmp    al,0x6d
c001eed2:	0f 84 af 03 00 00    	je     c001f287 <Vm::faultHandler(regs*)+0x494>
c001eed8:	77 15                	ja     c001eeef <Vm::faultHandler(regs*)+0xfc>
c001eeda:	3c 67                	cmp    al,0x67
c001eedc:	0f 84 bf 01 00 00    	je     c001f0a1 <Vm::faultHandler(regs*)+0x2ae>
c001eee2:	3c 6c                	cmp    al,0x6c
c001eee4:	0f 84 3f 03 00 00    	je     c001f229 <Vm::faultHandler(regs*)+0x436>
c001eeea:	e9 d7 06 00 00       	jmp    c001f5c6 <Vm::faultHandler(regs*)+0x7d3>
c001eeef:	3c 6f                	cmp    al,0x6f
c001eef1:	0f 84 a4 04 00 00    	je     c001f39b <Vm::faultHandler(regs*)+0x5a8>
c001eef7:	0f 82 11 04 00 00    	jb     c001f30e <Vm::faultHandler(regs*)+0x51b>
c001eefd:	3c 9c                	cmp    al,0x9c
c001eeff:	0f 84 ba 01 00 00    	je     c001f0bf <Vm::faultHandler(regs*)+0x2cc>
c001ef05:	e9 bc 06 00 00       	jmp    c001f5c6 <Vm::faultHandler(regs*)+0x7d3>
c001ef0a:	3c ec                	cmp    al,0xec
c001ef0c:	0f 84 24 06 00 00    	je     c001f536 <Vm::faultHandler(regs*)+0x743>
c001ef12:	0f 87 93 00 00 00    	ja     c001efab <Vm::faultHandler(regs*)+0x1b8>
c001ef18:	3c e4                	cmp    al,0xe4
c001ef1a:	0f 84 5c 05 00 00    	je     c001f47c <Vm::faultHandler(regs*)+0x689>
c001ef20:	77 6a                	ja     c001ef8c <Vm::faultHandler(regs*)+0x199>
c001ef22:	3c cd                	cmp    al,0xcd
c001ef24:	0f 84 7e 02 00 00    	je     c001f1a8 <Vm::faultHandler(regs*)+0x3b5>
c001ef2a:	3c cf                	cmp    al,0xcf
c001ef2c:	0f 85 94 06 00 00    	jne    c001f5c6 <Vm::faultHandler(regs*)+0x7d3>
c001ef32:	83 ec 0c             	sub    esp,0xc
c001ef35:	68 e2 c7 02 c0       	push   0xc002c7e2
c001ef3a:	e8 dd 3f ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001ef3f:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001ef42:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001ef45:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001ef49:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001ef4c:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001ef50:	0d 00 02 02 00       	or     eax,0x20200
c001ef55:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001ef58:	56                   	push   esi
c001ef59:	53                   	push   ebx
c001ef5a:	52                   	push   edx
c001ef5b:	68 e8 c7 02 c0       	push   0xc002c7e8
c001ef60:	e8 b7 3f ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001ef65:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001ef69:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ef6f:	66 c1 e8 09          	shr    ax,0x9
c001ef73:	83 e0 01             	and    eax,0x1
c001ef76:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ef79:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001ef7c:	83 c0 06             	add    eax,0x6
c001ef7f:	25 ff ff 00 00       	and    eax,0xffff
c001ef84:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001ef87:	e9 95 02 00 00       	jmp    c001f221 <Vm::faultHandler(regs*)+0x42e>
c001ef8c:	3c e6                	cmp    al,0xe6
c001ef8e:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001ef92:	0f 84 4e 05 00 00    	je     c001f4e6 <Vm::faultHandler(regs*)+0x6f3>
c001ef98:	0f 82 0a 05 00 00    	jb     c001f4a8 <Vm::faultHandler(regs*)+0x6b5>
c001ef9e:	3c e7                	cmp    al,0xe7
c001efa0:	0f 84 69 05 00 00    	je     c001f50f <Vm::faultHandler(regs*)+0x71c>
c001efa6:	e9 1b 06 00 00       	jmp    c001f5c6 <Vm::faultHandler(regs*)+0x7d3>
c001efab:	3c ef                	cmp    al,0xef
c001efad:	0f 84 e6 05 00 00    	je     c001f599 <Vm::faultHandler(regs*)+0x7a6>
c001efb3:	77 37                	ja     c001efec <Vm::faultHandler(regs*)+0x1f9>
c001efb5:	3c ed                	cmp    al,0xed
c001efb7:	0f 84 a3 05 00 00    	je     c001f560 <Vm::faultHandler(regs*)+0x76d>
c001efbd:	3c ee                	cmp    al,0xee
c001efbf:	0f 85 01 06 00 00    	jne    c001f5c6 <Vm::faultHandler(regs*)+0x7d3>
c001efc5:	52                   	push   edx
c001efc6:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001efc9:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001efcc:	68 83 c8 02 c0       	push   0xc002c883
c001efd1:	e8 46 3f ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001efd6:	59                   	pop    ecx
c001efd7:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001efdb:	5b                   	pop    ebx
c001efdc:	50                   	push   eax
c001efdd:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001efe1:	50                   	push   eax
c001efe2:	e8 2a fa ff ff       	call   c001ea11 <Vm::outbv(unsigned short, unsigned char)>
c001efe7:	e9 a5 05 00 00       	jmp    c001f591 <Vm::faultHandler(regs*)+0x79e>
c001efec:	3c fa                	cmp    al,0xfa
c001efee:	0f 84 f7 01 00 00    	je     c001f1eb <Vm::faultHandler(regs*)+0x3f8>
c001eff4:	3c fb                	cmp    al,0xfb
c001eff6:	0f 84 0a 02 00 00    	je     c001f206 <Vm::faultHandler(regs*)+0x413>
c001effc:	3c f3                	cmp    al,0xf3
c001effe:	0f 85 c2 05 00 00    	jne    c001f5c6 <Vm::faultHandler(regs*)+0x7d3>
c001f004:	83 ec 0c             	sub    esp,0xc
c001f007:	68 bb c7 02 c0       	push   0xc002c7bb
c001f00c:	e8 0b 3f ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001f011:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f014:	83 c4 10             	add    esp,0x10
c001f017:	e9 84 fe ff ff       	jmp    c001eea0 <Vm::faultHandler(regs*)+0xad>
c001f01c:	83 ec 0c             	sub    esp,0xc
c001f01f:	b3 02                	mov    bl,0x2
c001f021:	68 96 c7 02 c0       	push   0xc002c796
c001f026:	e8 f1 3e ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001f02b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f02e:	83 c4 10             	add    esp,0x10
c001f031:	e9 6a fe ff ff       	jmp    c001eea0 <Vm::faultHandler(regs*)+0xad>
c001f036:	83 ec 0c             	sub    esp,0xc
c001f039:	b3 03                	mov    bl,0x3
c001f03b:	68 a2 c7 02 c0       	push   0xc002c7a2
c001f040:	e8 d7 3e ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001f045:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f048:	83 c4 10             	add    esp,0x10
c001f04b:	e9 50 fe ff ff       	jmp    c001eea0 <Vm::faultHandler(regs*)+0xad>
c001f050:	83 ec 0c             	sub    esp,0xc
c001f053:	b3 04                	mov    bl,0x4
c001f055:	68 a6 c7 02 c0       	push   0xc002c7a6
c001f05a:	e8 bd 3e ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001f05f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f062:	83 c4 10             	add    esp,0x10
c001f065:	e9 36 fe ff ff       	jmp    c001eea0 <Vm::faultHandler(regs*)+0xad>
c001f06a:	83 ec 0c             	sub    esp,0xc
c001f06d:	b3 05                	mov    bl,0x5
c001f06f:	68 aa c7 02 c0       	push   0xc002c7aa
c001f074:	e8 a3 3e ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001f079:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f07c:	83 c4 10             	add    esp,0x10
c001f07f:	e9 1c fe ff ff       	jmp    c001eea0 <Vm::faultHandler(regs*)+0xad>
c001f084:	83 ec 0c             	sub    esp,0xc
c001f087:	68 ae c7 02 c0       	push   0xc002c7ae
c001f08c:	e8 8b 3e ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001f091:	83 c4 10             	add    esp,0x10
c001f094:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f097:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f09c:	e9 ff fd ff ff       	jmp    c001eea0 <Vm::faultHandler(regs*)+0xad>
c001f0a1:	50                   	push   eax
c001f0a2:	50                   	push   eax
c001f0a3:	6a 01                	push   0x1
c001f0a5:	68 b3 c7 02 c0       	push   0xc002c7b3
c001f0aa:	e8 6d 3e ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001f0af:	83 c4 10             	add    esp,0x10
c001f0b2:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0b5:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f0ba:	e9 e1 fd ff ff       	jmp    c001eea0 <Vm::faultHandler(regs*)+0xad>
c001f0bf:	83 ec 0c             	sub    esp,0xc
c001f0c2:	68 c1 c7 02 c0       	push   0xc002c7c1
c001f0c7:	e8 50 3e ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001f0cc:	83 c4 10             	add    esp,0x10
c001f0cf:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f0d2:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f0d7:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f0da:	74 2f                	je     c001f10b <Vm::faultHandler(regs*)+0x318>
c001f0dc:	83 ea 04             	sub    edx,0x4
c001f0df:	25 ff 0d 00 00       	and    eax,0xdff
c001f0e4:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f0ea:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f0ed:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f0f0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f0f6:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f0fa:	0f 84 bf 04 00 00    	je     c001f5bf <Vm::faultHandler(regs*)+0x7cc>
c001f100:	80 cc 02             	or     ah,0x2
c001f103:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f106:	e9 b4 04 00 00       	jmp    c001f5bf <Vm::faultHandler(regs*)+0x7cc>
c001f10b:	83 ea 02             	sub    edx,0x2
c001f10e:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f114:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f117:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f11b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f121:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f125:	74 05                	je     c001f12c <Vm::faultHandler(regs*)+0x339>
c001f127:	80 cc 02             	or     ah,0x2
c001f12a:	eb 03                	jmp    c001f12f <Vm::faultHandler(regs*)+0x33c>
c001f12c:	80 e4 fd             	and    ah,0xfd
c001f12f:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f133:	e9 87 04 00 00       	jmp    c001f5bf <Vm::faultHandler(regs*)+0x7cc>
c001f138:	83 ec 0c             	sub    esp,0xc
c001f13b:	68 c8 c7 02 c0       	push   0xc002c7c8
c001f140:	e8 d7 3d ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001f145:	83 c4 10             	add    esp,0x10
c001f148:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f14d:	74 28                	je     c001f177 <Vm::faultHandler(regs*)+0x384>
c001f14f:	8b 06                	mov    eax,DWORD PTR [esi]
c001f151:	25 ff 0d 00 00       	and    eax,0xdff
c001f156:	0d 00 02 02 00       	or     eax,0x20200
c001f15b:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f15e:	8b 06                	mov    eax,DWORD PTR [esi]
c001f160:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f166:	c1 e8 09             	shr    eax,0x9
c001f169:	83 e0 01             	and    eax,0x1
c001f16c:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f16f:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f172:	83 c0 04             	add    eax,0x4
c001f175:	eb 24                	jmp    c001f19b <Vm::faultHandler(regs*)+0x3a8>
c001f177:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f17a:	0d 00 02 02 00       	or     eax,0x20200
c001f17f:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f182:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f185:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f18b:	66 c1 e8 09          	shr    ax,0x9
c001f18f:	83 e0 01             	and    eax,0x1
c001f192:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f195:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f198:	83 c0 02             	add    eax,0x2
c001f19b:	25 ff ff 00 00       	and    eax,0xffff
c001f1a0:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f1a3:	e9 17 04 00 00       	jmp    c001f5bf <Vm::faultHandler(regs*)+0x7cc>
c001f1a8:	53                   	push   ebx
c001f1a9:	53                   	push   ebx
c001f1aa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1ae:	50                   	push   eax
c001f1af:	68 ce c7 02 c0       	push   0xc002c7ce
c001f1b4:	e8 63 3d ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001f1b9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1bd:	83 c4 10             	add    esp,0x10
c001f1c0:	3c ee                	cmp    al,0xee
c001f1c2:	75 10                	jne    c001f1d4 <Vm::faultHandler(regs*)+0x3e1>
c001f1c4:	83 ec 0c             	sub    esp,0xc
c001f1c7:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f1ca:	e8 fa f8 ff ff       	call   c001eac9 <Vm::mainloop3(unsigned long)>
c001f1cf:	e9 c0 03 00 00       	jmp    c001f594 <Vm::faultHandler(regs*)+0x7a1>
c001f1d4:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f1d8:	83 ec 0c             	sub    esp,0xc
c001f1db:	53                   	push   ebx
c001f1dc:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f1e0:	53                   	push   ebx
c001f1e1:	55                   	push   ebp
c001f1e2:	50                   	push   eax
c001f1e3:	57                   	push   edi
c001f1e4:	e8 0c fb ff ff       	call   c001ecf5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f1e9:	eb 36                	jmp    c001f221 <Vm::faultHandler(regs*)+0x42e>
c001f1eb:	83 ec 0c             	sub    esp,0xc
c001f1ee:	68 d8 c7 02 c0       	push   0xc002c7d8
c001f1f3:	e8 24 3d ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001f1f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f1fd:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f201:	e9 8b 03 00 00       	jmp    c001f591 <Vm::faultHandler(regs*)+0x79e>
c001f206:	83 ec 0c             	sub    esp,0xc
c001f209:	68 dd c7 02 c0       	push   0xc002c7dd
c001f20e:	e8 09 3d ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001f213:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f218:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f21c:	e9 70 03 00 00       	jmp    c001f591 <Vm::faultHandler(regs*)+0x79e>
c001f221:	83 c4 20             	add    esp,0x20
c001f224:	e9 99 03 00 00       	jmp    c001f5c2 <Vm::faultHandler(regs*)+0x7cf>
c001f229:	83 ec 0c             	sub    esp,0xc
c001f22c:	68 1b c8 02 c0       	push   0xc002c81b
c001f231:	e8 e6 3c ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001f236:	83 c4 10             	add    esp,0x10
c001f239:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f23c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f241:	74 0d                	je     c001f250 <Vm::faultHandler(regs*)+0x45d>
c001f243:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f24a:	0f 87 9e 01 00 00    	ja     c001f3ee <Vm::faultHandler(regs*)+0x5fb>
c001f250:	83 ec 0c             	sub    esp,0xc
c001f253:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f257:	0f b7 db             	movzx  ebx,bx
c001f25a:	50                   	push   eax
c001f25b:	e8 9e f7 ff ff       	call   c001e9fe <Vm::inbv(unsigned short)>
c001f260:	83 c4 0c             	add    esp,0xc
c001f263:	0f b6 c0             	movzx  eax,al
c001f266:	50                   	push   eax
c001f267:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f26b:	50                   	push   eax
c001f26c:	53                   	push   ebx
c001f26d:	e8 41 fb ff ff       	call   c001edb3 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f272:	83 c4 10             	add    esp,0x10
c001f275:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f278:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f27c:	74 03                	je     c001f281 <Vm::faultHandler(regs*)+0x48e>
c001f27e:	48                   	dec    eax
c001f27f:	eb 01                	jmp    c001f282 <Vm::faultHandler(regs*)+0x48f>
c001f281:	40                   	inc    eax
c001f282:	0f b7 c0             	movzx  eax,ax
c001f285:	eb 7f                	jmp    c001f306 <Vm::faultHandler(regs*)+0x513>
c001f287:	83 ec 0c             	sub    esp,0xc
c001f28a:	68 4d c8 02 c0       	push   0xc002c84d
c001f28f:	e8 88 3c ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001f294:	83 c4 10             	add    esp,0x10
c001f297:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f29a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f29f:	74 0d                	je     c001f2ae <Vm::faultHandler(regs*)+0x4bb>
c001f2a1:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f2a8:	0f 87 40 01 00 00    	ja     c001f3ee <Vm::faultHandler(regs*)+0x5fb>
c001f2ae:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f2b1:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f2b5:	0f b7 db             	movzx  ebx,bx
c001f2b8:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f2bd:	74 20                	je     c001f2df <Vm::faultHandler(regs*)+0x4ec>
c001f2bf:	ed                   	in     eax,dx
c001f2c0:	51                   	push   ecx
c001f2c1:	50                   	push   eax
c001f2c2:	56                   	push   esi
c001f2c3:	53                   	push   ebx
c001f2c4:	e8 15 fb ff ff       	call   c001edde <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f2c9:	83 c4 10             	add    esp,0x10
c001f2cc:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f2cf:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f2d3:	74 05                	je     c001f2da <Vm::faultHandler(regs*)+0x4e7>
c001f2d5:	83 e8 04             	sub    eax,0x4
c001f2d8:	eb 27                	jmp    c001f301 <Vm::faultHandler(regs*)+0x50e>
c001f2da:	83 c0 04             	add    eax,0x4
c001f2dd:	eb 22                	jmp    c001f301 <Vm::faultHandler(regs*)+0x50e>
c001f2df:	66 ed                	in     ax,dx
c001f2e1:	0f b7 c0             	movzx  eax,ax
c001f2e4:	52                   	push   edx
c001f2e5:	50                   	push   eax
c001f2e6:	56                   	push   esi
c001f2e7:	53                   	push   ebx
c001f2e8:	e8 db fa ff ff       	call   c001edc8 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f2ed:	83 c4 10             	add    esp,0x10
c001f2f0:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f2f3:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f2f7:	74 05                	je     c001f2fe <Vm::faultHandler(regs*)+0x50b>
c001f2f9:	83 e8 02             	sub    eax,0x2
c001f2fc:	eb 03                	jmp    c001f301 <Vm::faultHandler(regs*)+0x50e>
c001f2fe:	83 c0 02             	add    eax,0x2
c001f301:	25 ff ff 00 00       	and    eax,0xffff
c001f306:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f309:	e9 b1 02 00 00       	jmp    c001f5bf <Vm::faultHandler(regs*)+0x7cc>
c001f30e:	83 ec 0c             	sub    esp,0xc
c001f311:	4b                   	dec    ebx
c001f312:	68 53 c8 02 c0       	push   0xc002c853
c001f317:	e8 00 3c ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001f31c:	83 c4 10             	add    esp,0x10
c001f31f:	80 fb 05             	cmp    bl,0x5
c001f322:	77 0a                	ja     c001f32e <Vm::faultHandler(regs*)+0x53b>
c001f324:	0f b6 db             	movzx  ebx,bl
c001f327:	ff 24 9d c4 c8 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd373c]
c001f32e:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f332:	eb 1b                	jmp    c001f34f <Vm::faultHandler(regs*)+0x55c>
c001f334:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f338:	eb 15                	jmp    c001f34f <Vm::faultHandler(regs*)+0x55c>
c001f33a:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f33e:	eb 0f                	jmp    c001f34f <Vm::faultHandler(regs*)+0x55c>
c001f340:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f344:	eb 09                	jmp    c001f34f <Vm::faultHandler(regs*)+0x55c>
c001f346:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f349:	eb 04                	jmp    c001f34f <Vm::faultHandler(regs*)+0x55c>
c001f34b:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f34f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f354:	74 0d                	je     c001f363 <Vm::faultHandler(regs*)+0x570>
c001f356:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f35d:	0f 87 8b 00 00 00    	ja     c001f3ee <Vm::faultHandler(regs*)+0x5fb>
c001f363:	53                   	push   ebx
c001f364:	53                   	push   ebx
c001f365:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f369:	52                   	push   edx
c001f36a:	50                   	push   eax
c001f36b:	e8 0f fa ff ff       	call   c001ed7f <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f370:	5e                   	pop    esi
c001f371:	0f b6 c0             	movzx  eax,al
c001f374:	5d                   	pop    ebp
c001f375:	50                   	push   eax
c001f376:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f37a:	50                   	push   eax
c001f37b:	e8 91 f6 ff ff       	call   c001ea11 <Vm::outbv(unsigned short, unsigned char)>
c001f380:	83 c4 10             	add    esp,0x10
c001f383:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f386:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f38a:	74 03                	je     c001f38f <Vm::faultHandler(regs*)+0x59c>
c001f38c:	48                   	dec    eax
c001f38d:	eb 01                	jmp    c001f390 <Vm::faultHandler(regs*)+0x59d>
c001f38f:	40                   	inc    eax
c001f390:	0f b7 c0             	movzx  eax,ax
c001f393:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f396:	e9 24 02 00 00       	jmp    c001f5bf <Vm::faultHandler(regs*)+0x7cc>
c001f39b:	83 ec 0c             	sub    esp,0xc
c001f39e:	4b                   	dec    ebx
c001f39f:	68 53 c8 02 c0       	push   0xc002c853
c001f3a4:	e8 73 3b ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001f3a9:	83 c4 10             	add    esp,0x10
c001f3ac:	80 fb 05             	cmp    bl,0x5
c001f3af:	77 0a                	ja     c001f3bb <Vm::faultHandler(regs*)+0x5c8>
c001f3b1:	0f b6 db             	movzx  ebx,bl
c001f3b4:	ff 24 9d dc c8 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3724]
c001f3bb:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f3bf:	eb 1b                	jmp    c001f3dc <Vm::faultHandler(regs*)+0x5e9>
c001f3c1:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f3c5:	eb 15                	jmp    c001f3dc <Vm::faultHandler(regs*)+0x5e9>
c001f3c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f3cb:	eb 0f                	jmp    c001f3dc <Vm::faultHandler(regs*)+0x5e9>
c001f3cd:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f3d1:	eb 09                	jmp    c001f3dc <Vm::faultHandler(regs*)+0x5e9>
c001f3d3:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f3d6:	eb 04                	jmp    c001f3dc <Vm::faultHandler(regs*)+0x5e9>
c001f3d8:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f3dc:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f3df:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f3e4:	74 39                	je     c001f41f <Vm::faultHandler(regs*)+0x62c>
c001f3e6:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f3ec:	76 31                	jbe    c001f41f <Vm::faultHandler(regs*)+0x62c>
c001f3ee:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f3f2:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f3f6:	51                   	push   ecx
c001f3f7:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f3fb:	51                   	push   ecx
c001f3fc:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f400:	51                   	push   ecx
c001f401:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f405:	51                   	push   ecx
c001f406:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f40a:	52                   	push   edx
c001f40b:	50                   	push   eax
c001f40c:	50                   	push   eax
c001f40d:	68 20 c8 02 c0       	push   0xc002c820
c001f412:	e8 05 3b ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001f417:	83 c4 20             	add    esp,0x20
c001f41a:	e9 fb 01 00 00       	jmp    c001f61a <Vm::faultHandler(regs*)+0x827>
c001f41f:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f422:	0f b7 d3             	movzx  edx,bx
c001f425:	81 e6 00 04 00 00    	and    esi,0x400
c001f42b:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f42e:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f433:	74 1d                	je     c001f452 <Vm::faultHandler(regs*)+0x65f>
c001f435:	51                   	push   ecx
c001f436:	51                   	push   ecx
c001f437:	52                   	push   edx
c001f438:	50                   	push   eax
c001f439:	e8 64 f9 ff ff       	call   c001eda2 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f43e:	83 c4 10             	add    esp,0x10
c001f441:	89 ea                	mov    edx,ebp
c001f443:	ef                   	out    dx,eax
c001f444:	85 f6                	test   esi,esi
c001f446:	74 05                	je     c001f44d <Vm::faultHandler(regs*)+0x65a>
c001f448:	83 eb 04             	sub    ebx,0x4
c001f44b:	eb 21                	jmp    c001f46e <Vm::faultHandler(regs*)+0x67b>
c001f44d:	83 c3 04             	add    ebx,0x4
c001f450:	eb 1c                	jmp    c001f46e <Vm::faultHandler(regs*)+0x67b>
c001f452:	51                   	push   ecx
c001f453:	51                   	push   ecx
c001f454:	52                   	push   edx
c001f455:	50                   	push   eax
c001f456:	e8 35 f9 ff ff       	call   c001ed90 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f45b:	83 c4 10             	add    esp,0x10
c001f45e:	89 ea                	mov    edx,ebp
c001f460:	66 ef                	out    dx,ax
c001f462:	85 f6                	test   esi,esi
c001f464:	74 05                	je     c001f46b <Vm::faultHandler(regs*)+0x678>
c001f466:	83 eb 02             	sub    ebx,0x2
c001f469:	eb 03                	jmp    c001f46e <Vm::faultHandler(regs*)+0x67b>
c001f46b:	83 c3 02             	add    ebx,0x2
c001f46e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f474:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f477:	e9 43 01 00 00       	jmp    c001f5bf <Vm::faultHandler(regs*)+0x7cc>
c001f47c:	53                   	push   ebx
c001f47d:	53                   	push   ebx
c001f47e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f482:	50                   	push   eax
c001f483:	68 59 c8 02 c0       	push   0xc002c859
c001f488:	e8 8f 3a ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001f48d:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f494:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f498:	89 04 24             	mov    DWORD PTR [esp],eax
c001f49b:	e8 5e f5 ff ff       	call   c001e9fe <Vm::inbv(unsigned short)>
c001f4a0:	0f b6 c0             	movzx  eax,al
c001f4a3:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f4a6:	eb 5e                	jmp    c001f506 <Vm::faultHandler(regs*)+0x713>
c001f4a8:	51                   	push   ecx
c001f4a9:	51                   	push   ecx
c001f4aa:	53                   	push   ebx
c001f4ab:	68 5f c8 02 c0       	push   0xc002c85f
c001f4b0:	e8 67 3a ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001f4b5:	83 c4 10             	add    esp,0x10
c001f4b8:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f4bd:	74 07                	je     c001f4c6 <Vm::faultHandler(regs*)+0x6d3>
c001f4bf:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f4c3:	ed                   	in     eax,dx
c001f4c4:	eb 14                	jmp    c001f4da <Vm::faultHandler(regs*)+0x6e7>
c001f4c6:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f4c9:	66 31 db             	xor    bx,bx
c001f4cc:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f4cf:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f4d3:	66 ed                	in     ax,dx
c001f4d5:	0f b7 c0             	movzx  eax,ax
c001f4d8:	09 d8                	or     eax,ebx
c001f4da:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f4dd:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f4e1:	e9 dc 00 00 00       	jmp    c001f5c2 <Vm::faultHandler(regs*)+0x7cf>
c001f4e6:	50                   	push   eax
c001f4e7:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f4ea:	53                   	push   ebx
c001f4eb:	68 65 c8 02 c0       	push   0xc002c865
c001f4f0:	e8 27 3a ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001f4f5:	58                   	pop    eax
c001f4f6:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f4fa:	5a                   	pop    edx
c001f4fb:	50                   	push   eax
c001f4fc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f500:	50                   	push   eax
c001f501:	e8 0b f5 ff ff       	call   c001ea11 <Vm::outbv(unsigned short, unsigned char)>
c001f506:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f50a:	e9 85 00 00 00       	jmp    c001f594 <Vm::faultHandler(regs*)+0x7a1>
c001f50f:	50                   	push   eax
c001f510:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f513:	53                   	push   ebx
c001f514:	68 6e c8 02 c0       	push   0xc002c86e
c001f519:	e8 fe 39 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001f51e:	83 c4 10             	add    esp,0x10
c001f521:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f525:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f52a:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f52d:	74 03                	je     c001f532 <Vm::faultHandler(regs*)+0x73f>
c001f52f:	ef                   	out    dx,eax
c001f530:	eb ab                	jmp    c001f4dd <Vm::faultHandler(regs*)+0x6ea>
c001f532:	66 ef                	out    dx,ax
c001f534:	eb a7                	jmp    c001f4dd <Vm::faultHandler(regs*)+0x6ea>
c001f536:	55                   	push   ebp
c001f537:	55                   	push   ebp
c001f538:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f53b:	68 77 c8 02 c0       	push   0xc002c877
c001f540:	e8 d7 39 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001f545:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f54c:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f550:	89 04 24             	mov    DWORD PTR [esp],eax
c001f553:	e8 a6 f4 ff ff       	call   c001e9fe <Vm::inbv(unsigned short)>
c001f558:	0f b6 c0             	movzx  eax,al
c001f55b:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f55e:	eb 31                	jmp    c001f591 <Vm::faultHandler(regs*)+0x79e>
c001f560:	56                   	push   esi
c001f561:	56                   	push   esi
c001f562:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f565:	68 7d c8 02 c0       	push   0xc002c87d
c001f56a:	e8 ad 39 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001f56f:	83 c4 10             	add    esp,0x10
c001f572:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f575:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f57a:	74 03                	je     c001f57f <Vm::faultHandler(regs*)+0x78c>
c001f57c:	ed                   	in     eax,dx
c001f57d:	eb 0d                	jmp    c001f58c <Vm::faultHandler(regs*)+0x799>
c001f57f:	66 ed                	in     ax,dx
c001f581:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f584:	0f b7 c0             	movzx  eax,ax
c001f587:	66 31 d2             	xor    dx,dx
c001f58a:	09 d0                	or     eax,edx
c001f58c:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f58f:	eb 2e                	jmp    c001f5bf <Vm::faultHandler(regs*)+0x7cc>
c001f591:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f594:	83 c4 10             	add    esp,0x10
c001f597:	eb 29                	jmp    c001f5c2 <Vm::faultHandler(regs*)+0x7cf>
c001f599:	50                   	push   eax
c001f59a:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f59d:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f5a0:	68 8c c8 02 c0       	push   0xc002c88c
c001f5a5:	e8 72 39 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001f5aa:	83 c4 10             	add    esp,0x10
c001f5ad:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f5b0:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f5b5:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f5b8:	74 03                	je     c001f5bd <Vm::faultHandler(regs*)+0x7ca>
c001f5ba:	ef                   	out    dx,eax
c001f5bb:	eb 02                	jmp    c001f5bf <Vm::faultHandler(regs*)+0x7cc>
c001f5bd:	66 ef                	out    dx,ax
c001f5bf:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f5c2:	b0 01                	mov    al,0x1
c001f5c4:	eb 56                	jmp    c001f61c <Vm::faultHandler(regs*)+0x829>
c001f5c6:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f5ca:	51                   	push   ecx
c001f5cb:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f5cf:	51                   	push   ecx
c001f5d0:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f5d4:	51                   	push   ecx
c001f5d5:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f5d9:	51                   	push   ecx
c001f5da:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f5de:	52                   	push   edx
c001f5df:	50                   	push   eax
c001f5e0:	50                   	push   eax
c001f5e1:	68 95 c8 02 c0       	push   0xc002c895
c001f5e6:	e8 31 39 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c001f5eb:	83 c4 20             	add    esp,0x20
c001f5ee:	83 ec 0c             	sub    esp,0xc
c001f5f1:	6a 60                	push   0x60
c001f5f3:	e8 06 f4 ff ff       	call   c001e9fe <Vm::inbv(unsigned short)>
c001f5f8:	83 c4 10             	add    esp,0x10
c001f5fb:	3c 1c                	cmp    al,0x1c
c001f5fd:	74 04                	je     c001f603 <Vm::faultHandler(regs*)+0x810>
c001f5ff:	3c 5a                	cmp    al,0x5a
c001f601:	75 eb                	jne    c001f5ee <Vm::faultHandler(regs*)+0x7fb>
c001f603:	3c 1c                	cmp    al,0x1c
c001f605:	74 04                	je     c001f60b <Vm::faultHandler(regs*)+0x818>
c001f607:	3c 5a                	cmp    al,0x5a
c001f609:	75 0f                	jne    c001f61a <Vm::faultHandler(regs*)+0x827>
c001f60b:	83 ec 0c             	sub    esp,0xc
c001f60e:	6a 60                	push   0x60
c001f610:	e8 e9 f3 ff ff       	call   c001e9fe <Vm::inbv(unsigned short)>
c001f615:	83 c4 10             	add    esp,0x10
c001f618:	eb e9                	jmp    c001f603 <Vm::faultHandler(regs*)+0x810>
c001f61a:	31 c0                	xor    eax,eax
c001f61c:	83 c4 1c             	add    esp,0x1c
c001f61f:	5b                   	pop    ebx
c001f620:	5e                   	pop    esi
c001f621:	5f                   	pop    edi
c001f622:	5d                   	pop    ebp
c001f623:	c3                   	ret    

c001f624 <Vm::fpuInternalTo32(unsigned long long)>:
c001f624:	57                   	push   edi
c001f625:	56                   	push   esi
c001f626:	53                   	push   ebx
c001f627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f62b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f62f:	89 d6                	mov    esi,edx
c001f631:	89 d7                	mov    edi,edx
c001f633:	89 c1                	mov    ecx,eax
c001f635:	c1 ef 14             	shr    edi,0x14
c001f638:	89 d3                	mov    ebx,edx
c001f63a:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f640:	31 d2                	xor    edx,edx
c001f642:	89 f8                	mov    eax,edi
c001f644:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f64a:	bf ff 00 00 00       	mov    edi,0xff
c001f64f:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f654:	83 d2 ff             	adc    edx,0xffffffff
c001f657:	39 c7                	cmp    edi,eax
c001f659:	bf 00 00 00 00       	mov    edi,0x0
c001f65e:	19 d7                	sbb    edi,edx
c001f660:	72 15                	jb     c001f677 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f662:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f666:	c1 e0 17             	shl    eax,0x17
c001f669:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f66f:	09 f1                	or     ecx,esi
c001f671:	09 c1                	or     ecx,eax
c001f673:	89 cf                	mov    edi,ecx
c001f675:	eb 02                	jmp    c001f679 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f677:	31 ff                	xor    edi,edi
c001f679:	89 f8                	mov    eax,edi
c001f67b:	5b                   	pop    ebx
c001f67c:	5e                   	pop    esi
c001f67d:	5f                   	pop    edi
c001f67e:	c3                   	ret    

c001f67f <Vm::fpuInternalTo64(unsigned long long)>:
c001f67f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f683:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f687:	c3                   	ret    

c001f688 <Vm::fpu32ToInternal(unsigned int)>:
c001f688:	57                   	push   edi
c001f689:	31 ff                	xor    edi,edi
c001f68b:	56                   	push   esi
c001f68c:	53                   	push   ebx
c001f68d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f691:	89 cb                	mov    ebx,ecx
c001f693:	89 ce                	mov    esi,ecx
c001f695:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f69b:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f6a1:	c1 e9 17             	shr    ecx,0x17
c001f6a4:	89 f0                	mov    eax,esi
c001f6a6:	0f b6 d1             	movzx  edx,cl
c001f6a9:	81 c2 80 03 00 00    	add    edx,0x380
c001f6af:	89 d1                	mov    ecx,edx
c001f6b1:	89 fa                	mov    edx,edi
c001f6b3:	c1 e1 14             	shl    ecx,0x14
c001f6b6:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f6ba:	c1 e0 1d             	shl    eax,0x1d
c001f6bd:	89 d7                	mov    edi,edx
c001f6bf:	89 c6                	mov    esi,eax
c001f6c1:	89 ca                	mov    edx,ecx
c001f6c3:	89 f0                	mov    eax,esi
c001f6c5:	09 fa                	or     edx,edi
c001f6c7:	09 da                	or     edx,ebx
c001f6c9:	5b                   	pop    ebx
c001f6ca:	5e                   	pop    esi
c001f6cb:	5f                   	pop    edi
c001f6cc:	c3                   	ret    

c001f6cd <Vm::fpu64ToInternal(unsigned long long)>:
c001f6cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f6d5:	c3                   	ret    

c001f6d6 <Vm::fpuFloatToLong(unsigned long long)>:
c001f6d6:	57                   	push   edi
c001f6d7:	31 c0                	xor    eax,eax
c001f6d9:	56                   	push   esi
c001f6da:	31 d2                	xor    edx,edx
c001f6dc:	53                   	push   ebx
c001f6dd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f6e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f6e5:	89 d9                	mov    ecx,ebx
c001f6e7:	c1 e9 14             	shr    ecx,0x14
c001f6ea:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f6f0:	89 cf                	mov    edi,ecx
c001f6f2:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f6f8:	78 33                	js     c001f72d <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f6fa:	89 d9                	mov    ecx,ebx
c001f6fc:	89 f0                	mov    eax,esi
c001f6fe:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f704:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f70a:	89 ca                	mov    edx,ecx
c001f70c:	b9 34 00 00 00       	mov    ecx,0x34
c001f711:	29 f9                	sub    ecx,edi
c001f713:	0f ad d0             	shrd   eax,edx,cl
c001f716:	d3 fa                	sar    edx,cl
c001f718:	f6 c1 20             	test   cl,0x20
c001f71b:	74 05                	je     c001f722 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f71d:	89 d0                	mov    eax,edx
c001f71f:	c1 fa 1f             	sar    edx,0x1f
c001f722:	85 db                	test   ebx,ebx
c001f724:	79 07                	jns    c001f72d <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f726:	f7 d8                	neg    eax
c001f728:	83 d2 00             	adc    edx,0x0
c001f72b:	f7 da                	neg    edx
c001f72d:	5b                   	pop    ebx
c001f72e:	5e                   	pop    esi
c001f72f:	5f                   	pop    edi
c001f730:	c3                   	ret    

c001f731 <Vm::fpuULongToFloat(unsigned long long)>:
c001f731:	57                   	push   edi
c001f732:	31 c9                	xor    ecx,ecx
c001f734:	56                   	push   esi
c001f735:	53                   	push   ebx
c001f736:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f73a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f73e:	0f ba e7 14          	bt     edi,0x14
c001f742:	72 07                	jb     c001f74b <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f744:	01 f6                	add    esi,esi
c001f746:	11 ff                	adc    edi,edi
c001f748:	41                   	inc    ecx
c001f749:	eb f3                	jmp    c001f73e <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f74b:	89 fa                	mov    edx,edi
c001f74d:	89 f0                	mov    eax,esi
c001f74f:	bb 33 04 00 00       	mov    ebx,0x433
c001f754:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f75a:	29 cb                	sub    ebx,ecx
c001f75c:	89 d9                	mov    ecx,ebx
c001f75e:	5b                   	pop    ebx
c001f75f:	c1 e1 14             	shl    ecx,0x14
c001f762:	5e                   	pop    esi
c001f763:	09 ca                	or     edx,ecx
c001f765:	5f                   	pop    edi
c001f766:	c3                   	ret    

c001f767 <Vm::fpuLongToFloat(long long)>:
c001f767:	56                   	push   esi
c001f768:	31 c0                	xor    eax,eax
c001f76a:	53                   	push   ebx
c001f76b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f76f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f773:	39 c8                	cmp    eax,ecx
c001f775:	19 d8                	sbb    eax,ebx
c001f777:	7d 04                	jge    c001f77d <Vm::fpuLongToFloat(long long)+0x16>
c001f779:	31 f6                	xor    esi,esi
c001f77b:	eb 0c                	jmp    c001f789 <Vm::fpuLongToFloat(long long)+0x22>
c001f77d:	f7 d9                	neg    ecx
c001f77f:	be 01 00 00 00       	mov    esi,0x1
c001f784:	83 d3 00             	adc    ebx,0x0
c001f787:	f7 db                	neg    ebx
c001f789:	31 c0                	xor    eax,eax
c001f78b:	0f ba e3 14          	bt     ebx,0x14
c001f78f:	72 07                	jb     c001f798 <Vm::fpuLongToFloat(long long)+0x31>
c001f791:	01 c9                	add    ecx,ecx
c001f793:	11 db                	adc    ebx,ebx
c001f795:	40                   	inc    eax
c001f796:	eb f3                	jmp    c001f78b <Vm::fpuLongToFloat(long long)+0x24>
c001f798:	ba 33 04 00 00       	mov    edx,0x433
c001f79d:	29 c2                	sub    edx,eax
c001f79f:	89 c8                	mov    eax,ecx
c001f7a1:	c1 e2 14             	shl    edx,0x14
c001f7a4:	89 d9                	mov    ecx,ebx
c001f7a6:	89 f3                	mov    ebx,esi
c001f7a8:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f7ae:	09 ca                	or     edx,ecx
c001f7b0:	84 db                	test   bl,bl
c001f7b2:	74 06                	je     c001f7ba <Vm::fpuLongToFloat(long long)+0x53>
c001f7b4:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f7ba:	5b                   	pop    ebx
c001f7bb:	5e                   	pop    esi
c001f7bc:	c3                   	ret    

c001f7bd <Vm::fpuGet0()>:
c001f7bd:	31 c0                	xor    eax,eax
c001f7bf:	31 d2                	xor    edx,edx
c001f7c1:	c3                   	ret    

c001f7c2 <Vm::fpuGet1()>:
c001f7c2:	b8 01 00 00 00       	mov    eax,0x1
c001f7c7:	31 d2                	xor    edx,edx
c001f7c9:	c3                   	ret    

c001f7ca <Vm::fpuGetPi()>:
c001f7ca:	b8 03 00 00 00       	mov    eax,0x3
c001f7cf:	31 d2                	xor    edx,edx
c001f7d1:	c3                   	ret    

c001f7d2 <Vm::fpuGetLog2E()>:
c001f7d2:	83 ec 18             	sub    esp,0x18
c001f7d5:	68 f4 c8 02 c0       	push   0xc002c8f4
c001f7da:	e8 de ad ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c001f7df:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f7e4:	31 d2                	xor    edx,edx
c001f7e6:	83 c4 1c             	add    esp,0x1c
c001f7e9:	c3                   	ret    

c001f7ea <Vm::fpuGetLogE2()>:
c001f7ea:	83 ec 18             	sub    esp,0x18
c001f7ed:	68 00 c9 02 c0       	push   0xc002c900
c001f7f2:	e8 c6 ad ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c001f7f7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f7fc:	31 d2                	xor    edx,edx
c001f7fe:	83 c4 1c             	add    esp,0x1c
c001f801:	c3                   	ret    

c001f802 <Vm::fpuGetLog210()>:
c001f802:	83 ec 18             	sub    esp,0x18
c001f805:	68 0c c9 02 c0       	push   0xc002c90c
c001f80a:	e8 ae ad ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c001f80f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f814:	31 d2                	xor    edx,edx
c001f816:	83 c4 1c             	add    esp,0x1c
c001f819:	c3                   	ret    

c001f81a <Vm::fpuGetLog102()>:
c001f81a:	83 ec 18             	sub    esp,0x18
c001f81d:	68 19 c9 02 c0       	push   0xc002c919
c001f822:	e8 96 ad ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c001f827:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f82c:	31 d2                	xor    edx,edx
c001f82e:	83 c4 1c             	add    esp,0x1c
c001f831:	c3                   	ret    

c001f832 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f832:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f836:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f83a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f83e:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f842:	0f 92 c0             	setb   al
c001f845:	c3                   	ret    

c001f846 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f846:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f84a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f84e:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f852:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f856:	09 c2                	or     edx,eax
c001f858:	0f 94 c0             	sete   al
c001f85b:	c3                   	ret    

c001f85c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f85c:	57                   	push   edi
c001f85d:	56                   	push   esi
c001f85e:	53                   	push   ebx
c001f85f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f863:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f867:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f86b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f86f:	57                   	push   edi
c001f870:	56                   	push   esi
c001f871:	53                   	push   ebx
c001f872:	51                   	push   ecx
c001f873:	e8 ce ff ff ff       	call   c001f846 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f878:	83 c4 10             	add    esp,0x10
c001f87b:	88 c2                	mov    dl,al
c001f87d:	31 c0                	xor    eax,eax
c001f87f:	84 d2                	test   dl,dl
c001f881:	75 0c                	jne    c001f88f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f883:	57                   	push   edi
c001f884:	56                   	push   esi
c001f885:	53                   	push   ebx
c001f886:	51                   	push   ecx
c001f887:	e8 a6 ff ff ff       	call   c001f832 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f88c:	83 c4 10             	add    esp,0x10
c001f88f:	83 e0 01             	and    eax,0x1
c001f892:	5b                   	pop    ebx
c001f893:	88 c1                	mov    cl,al
c001f895:	83 e2 01             	and    edx,0x1
c001f898:	a0 81 1b 03 c0       	mov    al,ds:0xc0031b81
c001f89d:	c1 e2 06             	shl    edx,0x6
c001f8a0:	83 e0 ba             	and    eax,0xffffffba
c001f8a3:	5e                   	pop    esi
c001f8a4:	09 c8                	or     eax,ecx
c001f8a6:	5f                   	pop    edi
c001f8a7:	09 d0                	or     eax,edx
c001f8a9:	a2 81 1b 03 c0       	mov    ds:0xc0031b81,al
c001f8ae:	c3                   	ret    

c001f8af <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f8af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f8b3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f8b7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f8bb:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f8bf:	c3                   	ret    

c001f8c0 <Vm::fpuAbs(unsigned long long)>:
c001f8c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f8c8:	c3                   	ret    

c001f8c9 <Vm::fpuChs(unsigned long long)>:
c001f8c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f8d1:	f7 d8                	neg    eax
c001f8d3:	83 d2 00             	adc    edx,0x0
c001f8d6:	f7 da                	neg    edx
c001f8d8:	c3                   	ret    

c001f8d9 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f8d9:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f8dd:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f8e2:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f8e6:	eb c7                	jmp    c001f8af <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f8e8 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f8e8:	53                   	push   ebx
c001f8e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f8f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f8f5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f8f9:	0f af ca             	imul   ecx,edx
c001f8fc:	0f af d8             	imul   ebx,eax
c001f8ff:	f7 e2                	mul    edx
c001f901:	01 d9                	add    ecx,ebx
c001f903:	5b                   	pop    ebx
c001f904:	01 ca                	add    edx,ecx
c001f906:	c3                   	ret    

c001f907 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f907:	83 ec 0c             	sub    esp,0xc
c001f90a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f90e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f912:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f91a:	e8 9d 70 00 00       	call   c00269bc <__udivdi3>
c001f91f:	83 c4 1c             	add    esp,0x1c
c001f922:	c3                   	ret    

c001f923 <Vm::fpuSquare(unsigned long long)>:
c001f923:	50                   	push   eax
c001f924:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f928:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f92c:	52                   	push   edx
c001f92d:	50                   	push   eax
c001f92e:	52                   	push   edx
c001f92f:	50                   	push   eax
c001f930:	e8 b3 ff ff ff       	call   c001f8e8 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f935:	83 c4 14             	add    esp,0x14
c001f938:	c3                   	ret    

c001f939 <Vm::fpuGetReg(int)>:
c001f939:	83 ec 0c             	sub    esp,0xc
c001f93c:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f941:	76 10                	jbe    c001f953 <Vm::fpuGetReg(int)+0x1a>
c001f943:	83 ec 0c             	sub    esp,0xc
c001f946:	68 26 c9 02 c0       	push   0xc002c926
c001f94b:	e8 6d ac ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c001f950:	83 c4 10             	add    esp,0x10
c001f953:	a0 81 1b 03 c0       	mov    al,ds:0xc0031b81
c001f958:	b9 08 00 00 00       	mov    ecx,0x8
c001f95d:	c0 e8 03             	shr    al,0x3
c001f960:	83 e0 07             	and    eax,0x7
c001f963:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f967:	99                   	cdq    
c001f968:	f7 f9                	idiv   ecx
c001f96a:	8b 04 d5 84 1b 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce47c]
c001f971:	8b 14 d5 88 1b 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce478]
c001f978:	83 c4 0c             	add    esp,0xc
c001f97b:	c3                   	ret    

c001f97c <Vm::fpuSetReg(int, unsigned long long)>:
c001f97c:	57                   	push   edi
c001f97d:	56                   	push   esi
c001f97e:	52                   	push   edx
c001f97f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f983:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f987:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f98c:	76 10                	jbe    c001f99e <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f98e:	83 ec 0c             	sub    esp,0xc
c001f991:	68 39 c9 02 c0       	push   0xc002c939
c001f996:	e8 22 ac ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c001f99b:	83 c4 10             	add    esp,0x10
c001f99e:	a0 81 1b 03 c0       	mov    al,ds:0xc0031b81
c001f9a3:	b9 08 00 00 00       	mov    ecx,0x8
c001f9a8:	c0 e8 03             	shr    al,0x3
c001f9ab:	83 e0 07             	and    eax,0x7
c001f9ae:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f9b2:	99                   	cdq    
c001f9b3:	f7 f9                	idiv   ecx
c001f9b5:	89 34 d5 84 1b 03 c0 	mov    DWORD PTR [edx*8-0x3ffce47c],esi
c001f9bc:	89 3c d5 88 1b 03 c0 	mov    DWORD PTR [edx*8-0x3ffce478],edi
c001f9c3:	58                   	pop    eax
c001f9c4:	5e                   	pop    esi
c001f9c5:	5f                   	pop    edi
c001f9c6:	c3                   	ret    

c001f9c7 <Vm::fpuPush(unsigned long long)>:
c001f9c7:	a0 81 1b 03 c0       	mov    al,ds:0xc0031b81
c001f9cc:	c0 e8 03             	shr    al,0x3
c001f9cf:	83 e0 07             	and    eax,0x7
c001f9d2:	83 c0 07             	add    eax,0x7
c001f9d5:	88 c2                	mov    dl,al
c001f9d7:	83 e0 07             	and    eax,0x7
c001f9da:	83 e2 07             	and    edx,0x7
c001f9dd:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f9e4:	8a 15 81 1b 03 c0    	mov    dl,BYTE PTR ds:0xc0031b81
c001f9ea:	83 e2 c7             	and    edx,0xffffffc7
c001f9ed:	09 ca                	or     edx,ecx
c001f9ef:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f9f3:	88 15 81 1b 03 c0    	mov    BYTE PTR ds:0xc0031b81,dl
c001f9f9:	89 0c c5 88 1b 03 c0 	mov    DWORD PTR [eax*8-0x3ffce478],ecx
c001fa00:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fa04:	89 14 c5 84 1b 03 c0 	mov    DWORD PTR [eax*8-0x3ffce47c],edx
c001fa0b:	a1 c4 1b 03 c0       	mov    eax,ds:0xc0031bc4
c001fa10:	83 f8 08             	cmp    eax,0x8
c001fa13:	75 08                	jne    c001fa1d <Vm::fpuPush(unsigned long long)+0x56>
c001fa15:	80 0d 80 1b 03 c0 40 	or     BYTE PTR ds:0xc0031b80,0x40
c001fa1c:	c3                   	ret    
c001fa1d:	40                   	inc    eax
c001fa1e:	a3 c4 1b 03 c0       	mov    ds:0xc0031bc4,eax
c001fa23:	c3                   	ret    

c001fa24 <Vm::fpuPop()>:
c001fa24:	8a 0d 81 1b 03 c0    	mov    cl,BYTE PTR ds:0xc0031b81
c001fa2a:	53                   	push   ebx
c001fa2b:	c0 e9 03             	shr    cl,0x3
c001fa2e:	8a 1d 81 1b 03 c0    	mov    bl,BYTE PTR ds:0xc0031b81
c001fa34:	83 e1 07             	and    ecx,0x7
c001fa37:	83 e3 c7             	and    ebx,0xffffffc7
c001fa3a:	8b 04 cd 84 1b 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce47c]
c001fa41:	8b 14 cd 88 1b 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce478]
c001fa48:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fa4f:	83 e1 38             	and    ecx,0x38
c001fa52:	09 d9                	or     ecx,ebx
c001fa54:	88 0d 81 1b 03 c0    	mov    BYTE PTR ds:0xc0031b81,cl
c001fa5a:	8b 0d c4 1b 03 c0    	mov    ecx,DWORD PTR ds:0xc0031bc4
c001fa60:	85 c9                	test   ecx,ecx
c001fa62:	74 09                	je     c001fa6d <Vm::fpuPop()+0x49>
c001fa64:	49                   	dec    ecx
c001fa65:	89 0d c4 1b 03 c0    	mov    DWORD PTR ds:0xc0031bc4,ecx
c001fa6b:	eb 07                	jmp    c001fa74 <Vm::fpuPop()+0x50>
c001fa6d:	80 0d 80 1b 03 c0 40 	or     BYTE PTR ds:0xc0031b80,0x40
c001fa74:	5b                   	pop    ebx
c001fa75:	c3                   	ret    

c001fa76 <Vm::x87Handler(regs*)>:
c001fa76:	55                   	push   ebp
c001fa77:	57                   	push   edi
c001fa78:	56                   	push   esi
c001fa79:	53                   	push   ebx
c001fa7a:	83 ec 1c             	sub    esp,0x1c
c001fa7d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fa81:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fa86:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fa89:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fa91:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fa95:	50                   	push   eax
c001fa96:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fa9a:	50                   	push   eax
c001fa9b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fa9f:	50                   	push   eax
c001faa0:	53                   	push   ebx
c001faa1:	e8 de a1 ff ff       	call   c0019c84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001faa6:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001faa9:	83 c4 10             	add    esp,0x10
c001faac:	89 c6                	mov    esi,eax
c001faae:	80 fa d9             	cmp    dl,0xd9
c001fab1:	0f 85 52 01 00 00    	jne    c001fc09 <Vm::x87Handler(regs*)+0x193>
c001fab7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fabb:	8d 50 20             	lea    edx,[eax+0x20]
c001fabe:	80 fa 0e             	cmp    dl,0xe
c001fac1:	0f 87 86 00 00 00    	ja     c001fb4d <Vm::x87Handler(regs*)+0xd7>
c001fac7:	0f b6 d2             	movzx  edx,dl
c001faca:	ff 24 95 4c c9 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd36b4]
c001fad1:	e8 e7 fc ff ff       	call   c001f7bd <Vm::fpuGet0()>
c001fad6:	eb 05                	jmp    c001fadd <Vm::x87Handler(regs*)+0x67>
c001fad8:	e8 e5 fc ff ff       	call   c001f7c2 <Vm::fpuGet1()>
c001fadd:	57                   	push   edi
c001fade:	57                   	push   edi
c001fadf:	52                   	push   edx
c001fae0:	50                   	push   eax
c001fae1:	e8 e1 fe ff ff       	call   c001f9c7 <Vm::fpuPush(unsigned long long)>
c001fae6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001faea:	83 c4 10             	add    esp,0x10
c001faed:	b0 01                	mov    al,0x1
c001faef:	e9 e3 09 00 00       	jmp    c00204d7 <Vm::x87Handler(regs*)+0xa61>
c001faf4:	83 ec 0c             	sub    esp,0xc
c001faf7:	6a 00                	push   0x0
c001faf9:	e8 3b fe ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c001fafe:	59                   	pop    ecx
c001faff:	5e                   	pop    esi
c001fb00:	52                   	push   edx
c001fb01:	50                   	push   eax
c001fb02:	e8 c2 fd ff ff       	call   c001f8c9 <Vm::fpuChs(unsigned long long)>
c001fb07:	eb 13                	jmp    c001fb1c <Vm::x87Handler(regs*)+0xa6>
c001fb09:	83 ec 0c             	sub    esp,0xc
c001fb0c:	6a 00                	push   0x0
c001fb0e:	e8 26 fe ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c001fb13:	5f                   	pop    edi
c001fb14:	5d                   	pop    ebp
c001fb15:	52                   	push   edx
c001fb16:	50                   	push   eax
c001fb17:	e8 a4 fd ff ff       	call   c001f8c0 <Vm::fpuAbs(unsigned long long)>
c001fb1c:	83 c4 0c             	add    esp,0xc
c001fb1f:	52                   	push   edx
c001fb20:	50                   	push   eax
c001fb21:	6a 00                	push   0x0
c001fb23:	e8 54 fe ff ff       	call   c001f97c <Vm::fpuSetReg(int, unsigned long long)>
c001fb28:	eb bc                	jmp    c001fae6 <Vm::x87Handler(regs*)+0x70>
c001fb2a:	e8 d3 fc ff ff       	call   c001f802 <Vm::fpuGetLog210()>
c001fb2f:	eb ac                	jmp    c001fadd <Vm::x87Handler(regs*)+0x67>
c001fb31:	e8 9c fc ff ff       	call   c001f7d2 <Vm::fpuGetLog2E()>
c001fb36:	eb a5                	jmp    c001fadd <Vm::x87Handler(regs*)+0x67>
c001fb38:	e8 8d fc ff ff       	call   c001f7ca <Vm::fpuGetPi()>
c001fb3d:	eb 9e                	jmp    c001fadd <Vm::x87Handler(regs*)+0x67>
c001fb3f:	e8 d6 fc ff ff       	call   c001f81a <Vm::fpuGetLog102()>
c001fb44:	eb 97                	jmp    c001fadd <Vm::x87Handler(regs*)+0x67>
c001fb46:	e8 9f fc ff ff       	call   c001f7ea <Vm::fpuGetLogE2()>
c001fb4b:	eb 90                	jmp    c001fadd <Vm::x87Handler(regs*)+0x67>
c001fb4d:	8d 50 40             	lea    edx,[eax+0x40]
c001fb50:	80 fa 07             	cmp    dl,0x7
c001fb53:	77 15                	ja     c001fb6a <Vm::x87Handler(regs*)+0xf4>
c001fb55:	83 ec 0c             	sub    esp,0xc
c001fb58:	2d c0 00 00 00       	sub    eax,0xc0
c001fb5d:	50                   	push   eax
c001fb5e:	e8 d6 fd ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c001fb63:	59                   	pop    ecx
c001fb64:	5e                   	pop    esi
c001fb65:	e9 75 ff ff ff       	jmp    c001fadf <Vm::x87Handler(regs*)+0x69>
c001fb6a:	8d 50 38             	lea    edx,[eax+0x38]
c001fb6d:	80 fa 07             	cmp    dl,0x7
c001fb70:	77 3c                	ja     c001fbae <Vm::x87Handler(regs*)+0x138>
c001fb72:	83 ec 0c             	sub    esp,0xc
c001fb75:	2d c8 00 00 00       	sub    eax,0xc8
c001fb7a:	50                   	push   eax
c001fb7b:	e8 b9 fd ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c001fb80:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb87:	89 c6                	mov    esi,eax
c001fb89:	89 d7                	mov    edi,edx
c001fb8b:	e8 a9 fd ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c001fb90:	83 c4 0c             	add    esp,0xc
c001fb93:	52                   	push   edx
c001fb94:	50                   	push   eax
c001fb95:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb99:	2d c8 00 00 00       	sub    eax,0xc8
c001fb9e:	50                   	push   eax
c001fb9f:	e8 d8 fd ff ff       	call   c001f97c <Vm::fpuSetReg(int, unsigned long long)>
c001fba4:	83 c4 0c             	add    esp,0xc
c001fba7:	57                   	push   edi
c001fba8:	56                   	push   esi
c001fba9:	e9 73 ff ff ff       	jmp    c001fb21 <Vm::x87Handler(regs*)+0xab>
c001fbae:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fbb2:	84 d2                	test   dl,dl
c001fbb4:	75 0f                	jne    c001fbc5 <Vm::x87Handler(regs*)+0x14f>
c001fbb6:	83 ec 0c             	sub    esp,0xc
c001fbb9:	ff 36                	push   DWORD PTR [esi]
c001fbbb:	e8 c8 fa ff ff       	call   c001f688 <Vm::fpu32ToInternal(unsigned int)>
c001fbc0:	e9 bf 00 00 00       	jmp    c001fc84 <Vm::x87Handler(regs*)+0x20e>
c001fbc5:	80 fa 03             	cmp    dl,0x3
c001fbc8:	75 13                	jne    c001fbdd <Vm::x87Handler(regs*)+0x167>
c001fbca:	e8 55 fe ff ff       	call   c001fa24 <Vm::fpuPop()>
c001fbcf:	55                   	push   ebp
c001fbd0:	55                   	push   ebp
c001fbd1:	52                   	push   edx
c001fbd2:	50                   	push   eax
c001fbd3:	e8 4c fa ff ff       	call   c001f624 <Vm::fpuInternalTo32(unsigned long long)>
c001fbd8:	e9 88 00 00 00       	jmp    c001fc65 <Vm::x87Handler(regs*)+0x1ef>
c001fbdd:	80 fa 05             	cmp    dl,0x5
c001fbe0:	75 0e                	jne    c001fbf0 <Vm::x87Handler(regs*)+0x17a>
c001fbe2:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fbe5:	66 a3 82 1b 03 c0    	mov    ds:0xc0031b82,ax
c001fbeb:	e9 df 00 00 00       	jmp    c001fccf <Vm::x87Handler(regs*)+0x259>
c001fbf0:	31 c0                	xor    eax,eax
c001fbf2:	80 fa 07             	cmp    dl,0x7
c001fbf5:	0f 85 dc 08 00 00    	jne    c00204d7 <Vm::x87Handler(regs*)+0xa61>
c001fbfb:	66 a1 82 1b 03 c0    	mov    ax,ds:0xc0031b82
c001fc01:	66 89 06             	mov    WORD PTR [esi],ax
c001fc04:	e9 c6 00 00 00       	jmp    c001fccf <Vm::x87Handler(regs*)+0x259>
c001fc09:	80 fa d8             	cmp    dl,0xd8
c001fc0c:	0f 84 c9 00 00 00    	je     c001fcdb <Vm::x87Handler(regs*)+0x265>
c001fc12:	80 fa dc             	cmp    dl,0xdc
c001fc15:	0f 84 0d 02 00 00    	je     c001fe28 <Vm::x87Handler(regs*)+0x3b2>
c001fc1b:	80 fa de             	cmp    dl,0xde
c001fc1e:	0f 84 cd 02 00 00    	je     c001fef1 <Vm::x87Handler(regs*)+0x47b>
c001fc24:	80 fa dd             	cmp    dl,0xdd
c001fc27:	0f 84 5f 04 00 00    	je     c002008c <Vm::x87Handler(regs*)+0x616>
c001fc2d:	80 fa da             	cmp    dl,0xda
c001fc30:	0f 84 24 05 00 00    	je     c002015a <Vm::x87Handler(regs*)+0x6e4>
c001fc36:	80 fa df             	cmp    dl,0xdf
c001fc39:	0f 84 68 05 00 00    	je     c00201a7 <Vm::x87Handler(regs*)+0x731>
c001fc3f:	31 c0                	xor    eax,eax
c001fc41:	80 fa db             	cmp    dl,0xdb
c001fc44:	0f 85 8d 08 00 00    	jne    c00204d7 <Vm::x87Handler(regs*)+0xa61>
c001fc4a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc4e:	80 fa 03             	cmp    dl,0x3
c001fc51:	0f 85 70 06 00 00    	jne    c00202c7 <Vm::x87Handler(regs*)+0x851>
c001fc57:	e8 c8 fd ff ff       	call   c001fa24 <Vm::fpuPop()>
c001fc5c:	55                   	push   ebp
c001fc5d:	55                   	push   ebp
c001fc5e:	52                   	push   edx
c001fc5f:	50                   	push   eax
c001fc60:	e8 71 fa ff ff       	call   c001f6d6 <Vm::fpuFloatToLong(unsigned long long)>
c001fc65:	83 c4 10             	add    esp,0x10
c001fc68:	89 06                	mov    DWORD PTR [esi],eax
c001fc6a:	eb 63                	jmp    c001fccf <Vm::x87Handler(regs*)+0x259>
c001fc6c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc70:	84 d2                	test   dl,dl
c001fc72:	0f 85 e6 05 00 00    	jne    c002025e <Vm::x87Handler(regs*)+0x7e8>
c001fc78:	57                   	push   edi
c001fc79:	57                   	push   edi
c001fc7a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc7d:	ff 36                	push   DWORD PTR [esi]
c001fc7f:	e8 49 fa ff ff       	call   c001f6cd <Vm::fpu64ToInternal(unsigned long long)>
c001fc84:	5e                   	pop    esi
c001fc85:	5f                   	pop    edi
c001fc86:	52                   	push   edx
c001fc87:	50                   	push   eax
c001fc88:	e8 3a fd ff ff       	call   c001f9c7 <Vm::fpuPush(unsigned long long)>
c001fc8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fc91:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fc94:	e9 51 fe ff ff       	jmp    c001faea <Vm::x87Handler(regs*)+0x74>
c001fc99:	80 fa 03             	cmp    dl,0x3
c001fc9c:	0f 85 d7 06 00 00    	jne    c0020379 <Vm::x87Handler(regs*)+0x903>
c001fca2:	57                   	push   edi
c001fca3:	57                   	push   edi
c001fca4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fca7:	ff 36                	push   DWORD PTR [esi]
c001fca9:	e8 1f fa ff ff       	call   c001f6cd <Vm::fpu64ToInternal(unsigned long long)>
c001fcae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcb5:	89 c6                	mov    esi,eax
c001fcb7:	89 d7                	mov    edi,edx
c001fcb9:	e8 7b fc ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c001fcbe:	57                   	push   edi
c001fcbf:	56                   	push   esi
c001fcc0:	52                   	push   edx
c001fcc1:	50                   	push   eax
c001fcc2:	e8 95 fb ff ff       	call   c001f85c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fcc7:	83 c4 20             	add    esp,0x20
c001fcca:	e8 55 fd ff ff       	call   c001fa24 <Vm::fpuPop()>
c001fccf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fcd3:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fcd6:	e9 12 fe ff ff       	jmp    c001faed <Vm::x87Handler(regs*)+0x77>
c001fcdb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcdf:	8d 50 40             	lea    edx,[eax+0x40]
c001fce2:	80 fa 07             	cmp    dl,0x7
c001fce5:	77 29                	ja     c001fd10 <Vm::x87Handler(regs*)+0x29a>
c001fce7:	83 ec 0c             	sub    esp,0xc
c001fcea:	2d c0 00 00 00       	sub    eax,0xc0
c001fcef:	50                   	push   eax
c001fcf0:	e8 44 fc ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c001fcf5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcfc:	89 c6                	mov    esi,eax
c001fcfe:	89 d7                	mov    edi,edx
c001fd00:	e8 34 fc ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c001fd05:	57                   	push   edi
c001fd06:	56                   	push   esi
c001fd07:	52                   	push   edx
c001fd08:	50                   	push   eax
c001fd09:	e8 a1 fb ff ff       	call   c001f8af <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fd0e:	eb 2f                	jmp    c001fd3f <Vm::x87Handler(regs*)+0x2c9>
c001fd10:	8d 50 38             	lea    edx,[eax+0x38]
c001fd13:	80 fa 07             	cmp    dl,0x7
c001fd16:	77 2f                	ja     c001fd47 <Vm::x87Handler(regs*)+0x2d1>
c001fd18:	83 ec 0c             	sub    esp,0xc
c001fd1b:	2d c8 00 00 00       	sub    eax,0xc8
c001fd20:	50                   	push   eax
c001fd21:	e8 13 fc ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c001fd26:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd2d:	89 c6                	mov    esi,eax
c001fd2f:	89 d7                	mov    edi,edx
c001fd31:	e8 03 fc ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c001fd36:	57                   	push   edi
c001fd37:	56                   	push   esi
c001fd38:	52                   	push   edx
c001fd39:	50                   	push   eax
c001fd3a:	e8 a9 fb ff ff       	call   c001f8e8 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fd3f:	83 c4 1c             	add    esp,0x1c
c001fd42:	e9 d8 fd ff ff       	jmp    c001fb1f <Vm::x87Handler(regs*)+0xa9>
c001fd47:	8d 50 30             	lea    edx,[eax+0x30]
c001fd4a:	80 fa 07             	cmp    dl,0x7
c001fd4d:	77 0d                	ja     c001fd5c <Vm::x87Handler(regs*)+0x2e6>
c001fd4f:	83 ec 0c             	sub    esp,0xc
c001fd52:	2d d0 00 00 00       	sub    eax,0xd0
c001fd57:	e9 99 03 00 00       	jmp    c00200f5 <Vm::x87Handler(regs*)+0x67f>
c001fd5c:	8d 50 28             	lea    edx,[eax+0x28]
c001fd5f:	80 fa 07             	cmp    dl,0x7
c001fd62:	77 0d                	ja     c001fd71 <Vm::x87Handler(regs*)+0x2fb>
c001fd64:	83 ec 0c             	sub    esp,0xc
c001fd67:	2d d8 00 00 00       	sub    eax,0xd8
c001fd6c:	e9 c0 03 00 00       	jmp    c0020131 <Vm::x87Handler(regs*)+0x6bb>
c001fd71:	8d 50 20             	lea    edx,[eax+0x20]
c001fd74:	80 fa 07             	cmp    dl,0x7
c001fd77:	77 1b                	ja     c001fd94 <Vm::x87Handler(regs*)+0x31e>
c001fd79:	83 ec 0c             	sub    esp,0xc
c001fd7c:	2d e0 00 00 00       	sub    eax,0xe0
c001fd81:	50                   	push   eax
c001fd82:	e8 b2 fb ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c001fd87:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd8e:	89 c6                	mov    esi,eax
c001fd90:	89 d7                	mov    edi,edx
c001fd92:	eb 22                	jmp    c001fdb6 <Vm::x87Handler(regs*)+0x340>
c001fd94:	8d 50 18             	lea    edx,[eax+0x18]
c001fd97:	80 fa 07             	cmp    dl,0x7
c001fd9a:	77 2d                	ja     c001fdc9 <Vm::x87Handler(regs*)+0x353>
c001fd9c:	83 ec 0c             	sub    esp,0xc
c001fd9f:	6a 00                	push   0x0
c001fda1:	e8 93 fb ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c001fda6:	89 c6                	mov    esi,eax
c001fda8:	89 d7                	mov    edi,edx
c001fdaa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdae:	2d e8 00 00 00       	sub    eax,0xe8
c001fdb3:	89 04 24             	mov    DWORD PTR [esp],eax
c001fdb6:	e8 7e fb ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c001fdbb:	57                   	push   edi
c001fdbc:	56                   	push   esi
c001fdbd:	52                   	push   edx
c001fdbe:	50                   	push   eax
c001fdbf:	e8 15 fb ff ff       	call   c001f8d9 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fdc4:	e9 76 ff ff ff       	jmp    c001fd3f <Vm::x87Handler(regs*)+0x2c9>
c001fdc9:	8d 50 10             	lea    edx,[eax+0x10]
c001fdcc:	80 fa 07             	cmp    dl,0x7
c001fdcf:	77 1b                	ja     c001fdec <Vm::x87Handler(regs*)+0x376>
c001fdd1:	83 ec 0c             	sub    esp,0xc
c001fdd4:	2d f0 00 00 00       	sub    eax,0xf0
c001fdd9:	50                   	push   eax
c001fdda:	e8 5a fb ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c001fddf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fde6:	89 c6                	mov    esi,eax
c001fde8:	89 d7                	mov    edi,edx
c001fdea:	eb 22                	jmp    c001fe0e <Vm::x87Handler(regs*)+0x398>
c001fdec:	3c f7                	cmp    al,0xf7
c001fdee:	0f 86 d1 03 00 00    	jbe    c00201c5 <Vm::x87Handler(regs*)+0x74f>
c001fdf4:	83 ec 0c             	sub    esp,0xc
c001fdf7:	6a 00                	push   0x0
c001fdf9:	e8 3b fb ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c001fdfe:	89 c6                	mov    esi,eax
c001fe00:	89 d7                	mov    edi,edx
c001fe02:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe06:	2d f8 00 00 00       	sub    eax,0xf8
c001fe0b:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe0e:	e8 26 fb ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c001fe13:	57                   	push   edi
c001fe14:	56                   	push   esi
c001fe15:	52                   	push   edx
c001fe16:	50                   	push   eax
c001fe17:	e8 eb fa ff ff       	call   c001f907 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fe1c:	83 c4 1c             	add    esp,0x1c
c001fe1f:	52                   	push   edx
c001fe20:	50                   	push   eax
c001fe21:	6a 00                	push   0x0
c001fe23:	e9 51 02 00 00       	jmp    c0020079 <Vm::x87Handler(regs*)+0x603>
c001fe28:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe2c:	8d 50 40             	lea    edx,[eax+0x40]
c001fe2f:	80 fa 07             	cmp    dl,0x7
c001fe32:	77 37                	ja     c001fe6b <Vm::x87Handler(regs*)+0x3f5>
c001fe34:	83 ec 0c             	sub    esp,0xc
c001fe37:	2d c0 00 00 00       	sub    eax,0xc0
c001fe3c:	50                   	push   eax
c001fe3d:	e8 f7 fa ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c001fe42:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe49:	89 c6                	mov    esi,eax
c001fe4b:	89 d7                	mov    edi,edx
c001fe4d:	e8 e7 fa ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c001fe52:	57                   	push   edi
c001fe53:	56                   	push   esi
c001fe54:	52                   	push   edx
c001fe55:	50                   	push   eax
c001fe56:	e8 54 fa ff ff       	call   c001f8af <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fe5b:	83 c4 1c             	add    esp,0x1c
c001fe5e:	52                   	push   edx
c001fe5f:	50                   	push   eax
c001fe60:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe64:	2d c0 00 00 00       	sub    eax,0xc0
c001fe69:	eb 3d                	jmp    c001fea8 <Vm::x87Handler(regs*)+0x432>
c001fe6b:	8d 50 38             	lea    edx,[eax+0x38]
c001fe6e:	80 fa 07             	cmp    dl,0x7
c001fe71:	77 3b                	ja     c001feae <Vm::x87Handler(regs*)+0x438>
c001fe73:	83 ec 0c             	sub    esp,0xc
c001fe76:	2d c8 00 00 00       	sub    eax,0xc8
c001fe7b:	50                   	push   eax
c001fe7c:	e8 b8 fa ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c001fe81:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe88:	89 c6                	mov    esi,eax
c001fe8a:	89 d7                	mov    edi,edx
c001fe8c:	e8 a8 fa ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c001fe91:	57                   	push   edi
c001fe92:	56                   	push   esi
c001fe93:	52                   	push   edx
c001fe94:	50                   	push   eax
c001fe95:	e8 4e fa ff ff       	call   c001f8e8 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fe9a:	83 c4 1c             	add    esp,0x1c
c001fe9d:	52                   	push   edx
c001fe9e:	50                   	push   eax
c001fe9f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fea3:	2d c8 00 00 00       	sub    eax,0xc8
c001fea8:	50                   	push   eax
c001fea9:	e9 75 fc ff ff       	jmp    c001fb23 <Vm::x87Handler(regs*)+0xad>
c001feae:	83 c0 18             	add    eax,0x18
c001feb1:	3c 07                	cmp    al,0x7
c001feb3:	0f 87 3b 04 00 00    	ja     c00202f4 <Vm::x87Handler(regs*)+0x87e>
c001feb9:	83 ec 0c             	sub    esp,0xc
c001febc:	6a 00                	push   0x0
c001febe:	e8 76 fa ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c001fec3:	89 c6                	mov    esi,eax
c001fec5:	89 d7                	mov    edi,edx
c001fec7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fecb:	2d e8 00 00 00       	sub    eax,0xe8
c001fed0:	89 04 24             	mov    DWORD PTR [esp],eax
c001fed3:	e8 61 fa ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c001fed8:	57                   	push   edi
c001fed9:	56                   	push   esi
c001feda:	52                   	push   edx
c001fedb:	50                   	push   eax
c001fedc:	e8 f8 f9 ff ff       	call   c001f8d9 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fee1:	83 c4 1c             	add    esp,0x1c
c001fee4:	52                   	push   edx
c001fee5:	50                   	push   eax
c001fee6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001feea:	2d e8 00 00 00       	sub    eax,0xe8
c001feef:	eb b7                	jmp    c001fea8 <Vm::x87Handler(regs*)+0x432>
c001fef1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fef5:	8d 50 40             	lea    edx,[eax+0x40]
c001fef8:	80 fa 07             	cmp    dl,0x7
c001fefb:	77 3a                	ja     c001ff37 <Vm::x87Handler(regs*)+0x4c1>
c001fefd:	83 ec 0c             	sub    esp,0xc
c001ff00:	2d c0 00 00 00       	sub    eax,0xc0
c001ff05:	50                   	push   eax
c001ff06:	e8 2e fa ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c001ff0b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff12:	89 c6                	mov    esi,eax
c001ff14:	89 d7                	mov    edi,edx
c001ff16:	e8 1e fa ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c001ff1b:	57                   	push   edi
c001ff1c:	56                   	push   esi
c001ff1d:	52                   	push   edx
c001ff1e:	50                   	push   eax
c001ff1f:	e8 8b f9 ff ff       	call   c001f8af <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff24:	83 c4 1c             	add    esp,0x1c
c001ff27:	52                   	push   edx
c001ff28:	50                   	push   eax
c001ff29:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff2d:	2d c0 00 00 00       	sub    eax,0xc0
c001ff32:	e9 9e 01 00 00       	jmp    c00200d5 <Vm::x87Handler(regs*)+0x65f>
c001ff37:	8d 50 20             	lea    edx,[eax+0x20]
c001ff3a:	80 fa 07             	cmp    dl,0x7
c001ff3d:	77 3a                	ja     c001ff79 <Vm::x87Handler(regs*)+0x503>
c001ff3f:	83 ec 0c             	sub    esp,0xc
c001ff42:	2d e0 00 00 00       	sub    eax,0xe0
c001ff47:	50                   	push   eax
c001ff48:	e8 ec f9 ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c001ff4d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff54:	89 c6                	mov    esi,eax
c001ff56:	89 d7                	mov    edi,edx
c001ff58:	e8 dc f9 ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c001ff5d:	57                   	push   edi
c001ff5e:	56                   	push   esi
c001ff5f:	52                   	push   edx
c001ff60:	50                   	push   eax
c001ff61:	e8 73 f9 ff ff       	call   c001f8d9 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff66:	83 c4 1c             	add    esp,0x1c
c001ff69:	52                   	push   edx
c001ff6a:	50                   	push   eax
c001ff6b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff6f:	2d e0 00 00 00       	sub    eax,0xe0
c001ff74:	e9 5c 01 00 00       	jmp    c00200d5 <Vm::x87Handler(regs*)+0x65f>
c001ff79:	8d 50 18             	lea    edx,[eax+0x18]
c001ff7c:	80 fa 07             	cmp    dl,0x7
c001ff7f:	77 3b                	ja     c001ffbc <Vm::x87Handler(regs*)+0x546>
c001ff81:	83 ec 0c             	sub    esp,0xc
c001ff84:	6a 00                	push   0x0
c001ff86:	e8 ae f9 ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c001ff8b:	89 c6                	mov    esi,eax
c001ff8d:	89 d7                	mov    edi,edx
c001ff8f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff93:	2d e8 00 00 00       	sub    eax,0xe8
c001ff98:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff9b:	e8 99 f9 ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c001ffa0:	57                   	push   edi
c001ffa1:	56                   	push   esi
c001ffa2:	52                   	push   edx
c001ffa3:	50                   	push   eax
c001ffa4:	e8 30 f9 ff ff       	call   c001f8d9 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ffa9:	83 c4 1c             	add    esp,0x1c
c001ffac:	52                   	push   edx
c001ffad:	50                   	push   eax
c001ffae:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffb2:	2d e8 00 00 00       	sub    eax,0xe8
c001ffb7:	e9 19 01 00 00       	jmp    c00200d5 <Vm::x87Handler(regs*)+0x65f>
c001ffbc:	8d 50 38             	lea    edx,[eax+0x38]
c001ffbf:	80 fa 07             	cmp    dl,0x7
c001ffc2:	77 37                	ja     c001fffb <Vm::x87Handler(regs*)+0x585>
c001ffc4:	83 ec 0c             	sub    esp,0xc
c001ffc7:	2d c8 00 00 00       	sub    eax,0xc8
c001ffcc:	50                   	push   eax
c001ffcd:	e8 67 f9 ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c001ffd2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffd9:	89 c6                	mov    esi,eax
c001ffdb:	89 d7                	mov    edi,edx
c001ffdd:	e8 57 f9 ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c001ffe2:	57                   	push   edi
c001ffe3:	56                   	push   esi
c001ffe4:	52                   	push   edx
c001ffe5:	50                   	push   eax
c001ffe6:	e8 fd f8 ff ff       	call   c001f8e8 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ffeb:	83 c4 1c             	add    esp,0x1c
c001ffee:	52                   	push   edx
c001ffef:	50                   	push   eax
c001fff0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fff4:	2d c8 00 00 00       	sub    eax,0xc8
c001fff9:	eb 7d                	jmp    c0020078 <Vm::x87Handler(regs*)+0x602>
c001fffb:	3c f7                	cmp    al,0xf7
c001fffd:	76 38                	jbe    c0020037 <Vm::x87Handler(regs*)+0x5c1>
c001ffff:	83 ec 0c             	sub    esp,0xc
c0020002:	6a 00                	push   0x0
c0020004:	e8 30 f9 ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c0020009:	89 c6                	mov    esi,eax
c002000b:	89 d7                	mov    edi,edx
c002000d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020011:	2d f8 00 00 00       	sub    eax,0xf8
c0020016:	89 04 24             	mov    DWORD PTR [esp],eax
c0020019:	e8 1b f9 ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c002001e:	57                   	push   edi
c002001f:	56                   	push   esi
c0020020:	52                   	push   edx
c0020021:	50                   	push   eax
c0020022:	e8 e0 f8 ff ff       	call   c001f907 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020027:	83 c4 1c             	add    esp,0x1c
c002002a:	52                   	push   edx
c002002b:	50                   	push   eax
c002002c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020030:	2d f8 00 00 00       	sub    eax,0xf8
c0020035:	eb 41                	jmp    c0020078 <Vm::x87Handler(regs*)+0x602>
c0020037:	8d 50 10             	lea    edx,[eax+0x10]
c002003a:	80 fa 07             	cmp    dl,0x7
c002003d:	0f 87 5a 01 00 00    	ja     c002019d <Vm::x87Handler(regs*)+0x727>
c0020043:	83 ec 0c             	sub    esp,0xc
c0020046:	2d f0 00 00 00       	sub    eax,0xf0
c002004b:	50                   	push   eax
c002004c:	e8 e8 f8 ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c0020051:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020058:	89 c6                	mov    esi,eax
c002005a:	89 d7                	mov    edi,edx
c002005c:	e8 d8 f8 ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c0020061:	57                   	push   edi
c0020062:	56                   	push   esi
c0020063:	52                   	push   edx
c0020064:	50                   	push   eax
c0020065:	e8 9d f8 ff ff       	call   c001f907 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002006a:	83 c4 1c             	add    esp,0x1c
c002006d:	52                   	push   edx
c002006e:	50                   	push   eax
c002006f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020073:	2d f0 00 00 00       	sub    eax,0xf0
c0020078:	50                   	push   eax
c0020079:	e8 fe f8 ff ff       	call   c001f97c <Vm::fpuSetReg(int, unsigned long long)>
c002007e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020082:	e8 9d f9 ff ff       	call   c001fa24 <Vm::fpuPop()>
c0020087:	e9 5e fa ff ff       	jmp    c001faea <Vm::x87Handler(regs*)+0x74>
c002008c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020090:	8d 50 30             	lea    edx,[eax+0x30]
c0020093:	80 fa 07             	cmp    dl,0x7
c0020096:	77 1d                	ja     c00200b5 <Vm::x87Handler(regs*)+0x63f>
c0020098:	83 ec 0c             	sub    esp,0xc
c002009b:	6a 00                	push   0x0
c002009d:	e8 97 f8 ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c00200a2:	83 c4 0c             	add    esp,0xc
c00200a5:	52                   	push   edx
c00200a6:	50                   	push   eax
c00200a7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200ab:	2d d0 00 00 00       	sub    eax,0xd0
c00200b0:	e9 f3 fd ff ff       	jmp    c001fea8 <Vm::x87Handler(regs*)+0x432>
c00200b5:	8d 50 28             	lea    edx,[eax+0x28]
c00200b8:	80 fa 07             	cmp    dl,0x7
c00200bb:	77 28                	ja     c00200e5 <Vm::x87Handler(regs*)+0x66f>
c00200bd:	83 ec 0c             	sub    esp,0xc
c00200c0:	6a 00                	push   0x0
c00200c2:	e8 72 f8 ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c00200c7:	83 c4 0c             	add    esp,0xc
c00200ca:	52                   	push   edx
c00200cb:	50                   	push   eax
c00200cc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200d0:	2d d8 00 00 00       	sub    eax,0xd8
c00200d5:	50                   	push   eax
c00200d6:	e8 a1 f8 ff ff       	call   c001f97c <Vm::fpuSetReg(int, unsigned long long)>
c00200db:	e8 44 f9 ff ff       	call   c001fa24 <Vm::fpuPop()>
c00200e0:	e9 01 fa ff ff       	jmp    c001fae6 <Vm::x87Handler(regs*)+0x70>
c00200e5:	8d 50 20             	lea    edx,[eax+0x20]
c00200e8:	80 fa 07             	cmp    dl,0x7
c00200eb:	77 30                	ja     c002011d <Vm::x87Handler(regs*)+0x6a7>
c00200ed:	83 ec 0c             	sub    esp,0xc
c00200f0:	2d e0 00 00 00       	sub    eax,0xe0
c00200f5:	50                   	push   eax
c00200f6:	e8 3e f8 ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c00200fb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020102:	89 c6                	mov    esi,eax
c0020104:	89 d7                	mov    edi,edx
c0020106:	e8 2e f8 ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c002010b:	57                   	push   edi
c002010c:	56                   	push   esi
c002010d:	52                   	push   edx
c002010e:	50                   	push   eax
c002010f:	e8 48 f7 ff ff       	call   c001f85c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020114:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020118:	e9 54 02 00 00       	jmp    c0020371 <Vm::x87Handler(regs*)+0x8fb>
c002011d:	8d 50 18             	lea    edx,[eax+0x18]
c0020120:	80 fa 07             	cmp    dl,0x7
c0020123:	0f 87 43 fb ff ff    	ja     c001fc6c <Vm::x87Handler(regs*)+0x1f6>
c0020129:	83 ec 0c             	sub    esp,0xc
c002012c:	2d e8 00 00 00       	sub    eax,0xe8
c0020131:	50                   	push   eax
c0020132:	e8 02 f8 ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c0020137:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002013e:	89 c6                	mov    esi,eax
c0020140:	89 d7                	mov    edi,edx
c0020142:	e8 f2 f7 ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c0020147:	57                   	push   edi
c0020148:	56                   	push   esi
c0020149:	52                   	push   edx
c002014a:	50                   	push   eax
c002014b:	e8 0c f7 ff ff       	call   c001f85c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020150:	83 c4 20             	add    esp,0x20
c0020153:	e8 cc f8 ff ff       	call   c001fa24 <Vm::fpuPop()>
c0020158:	eb 62                	jmp    c00201bc <Vm::x87Handler(regs*)+0x746>
c002015a:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c002015e:	0f 85 0f 01 00 00    	jne    c0020273 <Vm::x87Handler(regs*)+0x7fd>
c0020164:	83 ec 0c             	sub    esp,0xc
c0020167:	6a 01                	push   0x1
c0020169:	e8 cb f7 ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c002016e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020175:	89 c6                	mov    esi,eax
c0020177:	89 d7                	mov    edi,edx
c0020179:	e8 bb f7 ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c002017e:	57                   	push   edi
c002017f:	56                   	push   esi
c0020180:	52                   	push   edx
c0020181:	50                   	push   eax
c0020182:	e8 d5 f6 ff ff       	call   c001f85c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020187:	83 c4 20             	add    esp,0x20
c002018a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002018e:	e8 91 f8 ff ff       	call   c001fa24 <Vm::fpuPop()>
c0020193:	e8 8c f8 ff ff       	call   c001fa24 <Vm::fpuPop()>
c0020198:	e9 50 f9 ff ff       	jmp    c001faed <Vm::x87Handler(regs*)+0x77>
c002019d:	3c d9                	cmp    al,0xd9
c002019f:	0f 85 b5 02 00 00    	jne    c002045a <Vm::x87Handler(regs*)+0x9e4>
c00201a5:	eb bd                	jmp    c0020164 <Vm::x87Handler(regs*)+0x6ee>
c00201a7:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c00201ab:	0f 85 ea 02 00 00    	jne    c002049b <Vm::x87Handler(regs*)+0xa25>
c00201b1:	0f b7 05 80 1b 03 c0 	movzx  eax,WORD PTR ds:0xc0031b80
c00201b8:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c00201bc:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00201c0:	e9 28 f9 ff ff       	jmp    c001faed <Vm::x87Handler(regs*)+0x77>
c00201c5:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00201c9:	84 d2                	test   dl,dl
c00201cb:	75 0f                	jne    c00201dc <Vm::x87Handler(regs*)+0x766>
c00201cd:	83 ec 0c             	sub    esp,0xc
c00201d0:	ff 36                	push   DWORD PTR [esi]
c00201d2:	e8 b1 f4 ff ff       	call   c001f688 <Vm::fpu32ToInternal(unsigned int)>
c00201d7:	e9 2c 01 00 00       	jmp    c0020308 <Vm::x87Handler(regs*)+0x892>
c00201dc:	80 fa 01             	cmp    dl,0x1
c00201df:	75 0f                	jne    c00201f0 <Vm::x87Handler(regs*)+0x77a>
c00201e1:	83 ec 0c             	sub    esp,0xc
c00201e4:	ff 36                	push   DWORD PTR [esi]
c00201e6:	e8 9d f4 ff ff       	call   c001f688 <Vm::fpu32ToInternal(unsigned int)>
c00201eb:	e9 81 02 00 00       	jmp    c0020471 <Vm::x87Handler(regs*)+0x9fb>
c00201f0:	80 fa 04             	cmp    dl,0x4
c00201f3:	75 0f                	jne    c0020204 <Vm::x87Handler(regs*)+0x78e>
c00201f5:	83 ec 0c             	sub    esp,0xc
c00201f8:	ff 36                	push   DWORD PTR [esi]
c00201fa:	e8 89 f4 ff ff       	call   c001f688 <Vm::fpu32ToInternal(unsigned int)>
c00201ff:	e9 86 01 00 00       	jmp    c002038a <Vm::x87Handler(regs*)+0x914>
c0020204:	80 fa 05             	cmp    dl,0x5
c0020207:	75 1b                	jne    c0020224 <Vm::x87Handler(regs*)+0x7ae>
c0020209:	83 ec 0c             	sub    esp,0xc
c002020c:	6a 00                	push   0x0
c002020e:	e8 26 f7 ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c0020213:	89 c7                	mov    edi,eax
c0020215:	89 d5                	mov    ebp,edx
c0020217:	58                   	pop    eax
c0020218:	ff 36                	push   DWORD PTR [esi]
c002021a:	e8 69 f4 ff ff       	call   c001f688 <Vm::fpu32ToInternal(unsigned int)>
c002021f:	e9 a3 01 00 00       	jmp    c00203c7 <Vm::x87Handler(regs*)+0x951>
c0020224:	80 fa 06             	cmp    dl,0x6
c0020227:	75 0f                	jne    c0020238 <Vm::x87Handler(regs*)+0x7c2>
c0020229:	83 ec 0c             	sub    esp,0xc
c002022c:	ff 36                	push   DWORD PTR [esi]
c002022e:	e8 55 f4 ff ff       	call   c001f688 <Vm::fpu32ToInternal(unsigned int)>
c0020233:	e9 ae 01 00 00       	jmp    c00203e6 <Vm::x87Handler(regs*)+0x970>
c0020238:	31 c0                	xor    eax,eax
c002023a:	80 fa 07             	cmp    dl,0x7
c002023d:	0f 85 94 02 00 00    	jne    c00204d7 <Vm::x87Handler(regs*)+0xa61>
c0020243:	83 ec 0c             	sub    esp,0xc
c0020246:	6a 00                	push   0x0
c0020248:	e8 ec f6 ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c002024d:	89 c7                	mov    edi,eax
c002024f:	89 d5                	mov    ebp,edx
c0020251:	58                   	pop    eax
c0020252:	ff 36                	push   DWORD PTR [esi]
c0020254:	e8 2f f4 ff ff       	call   c001f688 <Vm::fpu32ToInternal(unsigned int)>
c0020259:	e9 cb 01 00 00       	jmp    c0020429 <Vm::x87Handler(regs*)+0x9b3>
c002025e:	80 fa 03             	cmp    dl,0x3
c0020261:	0f 85 d3 01 00 00    	jne    c002043a <Vm::x87Handler(regs*)+0x9c4>
c0020267:	e8 b8 f7 ff ff       	call   c001fa24 <Vm::fpuPop()>
c002026c:	51                   	push   ecx
c002026d:	51                   	push   ecx
c002026e:	e9 de 01 00 00       	jmp    c0020451 <Vm::x87Handler(regs*)+0x9db>
c0020273:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020277:	80 fa 01             	cmp    dl,0x1
c002027a:	75 09                	jne    c0020285 <Vm::x87Handler(regs*)+0x80f>
c002027c:	57                   	push   edi
c002027d:	57                   	push   edi
c002027e:	8b 06                	mov    eax,DWORD PTR [esi]
c0020280:	e9 e3 01 00 00       	jmp    c0020468 <Vm::x87Handler(regs*)+0x9f2>
c0020285:	80 fa 04             	cmp    dl,0x4
c0020288:	75 12                	jne    c002029c <Vm::x87Handler(regs*)+0x826>
c002028a:	31 d2                	xor    edx,edx
c002028c:	51                   	push   ecx
c002028d:	51                   	push   ecx
c002028e:	8b 06                	mov    eax,DWORD PTR [esi]
c0020290:	52                   	push   edx
c0020291:	50                   	push   eax
c0020292:	e8 d0 f4 ff ff       	call   c001f767 <Vm::fpuLongToFloat(long long)>
c0020297:	e9 ee 00 00 00       	jmp    c002038a <Vm::x87Handler(regs*)+0x914>
c002029c:	31 c0                	xor    eax,eax
c002029e:	80 fa 07             	cmp    dl,0x7
c00202a1:	0f 85 30 02 00 00    	jne    c00204d7 <Vm::x87Handler(regs*)+0xa61>
c00202a7:	83 ec 0c             	sub    esp,0xc
c00202aa:	6a 00                	push   0x0
c00202ac:	e8 88 f6 ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c00202b1:	89 c7                	mov    edi,eax
c00202b3:	89 d5                	mov    ebp,edx
c00202b5:	58                   	pop    eax
c00202b6:	8b 06                	mov    eax,DWORD PTR [esi]
c00202b8:	5a                   	pop    edx
c00202b9:	31 d2                	xor    edx,edx
c00202bb:	52                   	push   edx
c00202bc:	50                   	push   eax
c00202bd:	e8 a5 f4 ff ff       	call   c001f767 <Vm::fpuLongToFloat(long long)>
c00202c2:	e9 62 01 00 00       	jmp    c0020429 <Vm::x87Handler(regs*)+0x9b3>
c00202c7:	84 d2                	test   dl,dl
c00202c9:	75 0d                	jne    c00202d8 <Vm::x87Handler(regs*)+0x862>
c00202cb:	31 d2                	xor    edx,edx
c00202cd:	55                   	push   ebp
c00202ce:	55                   	push   ebp
c00202cf:	8b 06                	mov    eax,DWORD PTR [esi]
c00202d1:	52                   	push   edx
c00202d2:	50                   	push   eax
c00202d3:	e9 d3 01 00 00       	jmp    c00204ab <Vm::x87Handler(regs*)+0xa35>
c00202d8:	31 c0                	xor    eax,eax
c00202da:	80 fa 02             	cmp    dl,0x2
c00202dd:	0f 85 f4 01 00 00    	jne    c00204d7 <Vm::x87Handler(regs*)+0xa61>
c00202e3:	83 ec 0c             	sub    esp,0xc
c00202e6:	6a 00                	push   0x0
c00202e8:	e8 4c f6 ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c00202ed:	59                   	pop    ecx
c00202ee:	5f                   	pop    edi
c00202ef:	e9 6a f9 ff ff       	jmp    c001fc5e <Vm::x87Handler(regs*)+0x1e8>
c00202f4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202f8:	84 d2                	test   dl,dl
c00202fa:	75 2a                	jne    c0020326 <Vm::x87Handler(regs*)+0x8b0>
c00202fc:	50                   	push   eax
c00202fd:	50                   	push   eax
c00202fe:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020301:	ff 36                	push   DWORD PTR [esi]
c0020303:	e8 c5 f3 ff ff       	call   c001f6cd <Vm::fpu64ToInternal(unsigned long long)>
c0020308:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002030f:	89 c6                	mov    esi,eax
c0020311:	89 d7                	mov    edi,edx
c0020313:	e8 21 f6 ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c0020318:	57                   	push   edi
c0020319:	56                   	push   esi
c002031a:	52                   	push   edx
c002031b:	50                   	push   eax
c002031c:	e8 8e f5 ff ff       	call   c001f8af <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020321:	e9 64 01 00 00       	jmp    c002048a <Vm::x87Handler(regs*)+0xa14>
c0020326:	80 fa 01             	cmp    dl,0x1
c0020329:	75 11                	jne    c002033c <Vm::x87Handler(regs*)+0x8c6>
c002032b:	50                   	push   eax
c002032c:	50                   	push   eax
c002032d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020330:	ff 36                	push   DWORD PTR [esi]
c0020332:	e8 96 f3 ff ff       	call   c001f6cd <Vm::fpu64ToInternal(unsigned long long)>
c0020337:	e9 35 01 00 00       	jmp    c0020471 <Vm::x87Handler(regs*)+0x9fb>
c002033c:	80 fa 02             	cmp    dl,0x2
c002033f:	0f 85 54 f9 ff ff    	jne    c001fc99 <Vm::x87Handler(regs*)+0x223>
c0020345:	55                   	push   ebp
c0020346:	55                   	push   ebp
c0020347:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002034a:	ff 36                	push   DWORD PTR [esi]
c002034c:	e8 7c f3 ff ff       	call   c001f6cd <Vm::fpu64ToInternal(unsigned long long)>
c0020351:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020358:	89 c6                	mov    esi,eax
c002035a:	89 d7                	mov    edi,edx
c002035c:	e8 d8 f5 ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c0020361:	57                   	push   edi
c0020362:	56                   	push   esi
c0020363:	52                   	push   edx
c0020364:	50                   	push   eax
c0020365:	e8 f2 f4 ff ff       	call   c001f85c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002036a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002036e:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020371:	83 c4 20             	add    esp,0x20
c0020374:	e9 74 f7 ff ff       	jmp    c001faed <Vm::x87Handler(regs*)+0x77>
c0020379:	80 fa 04             	cmp    dl,0x4
c002037c:	75 2a                	jne    c00203a8 <Vm::x87Handler(regs*)+0x932>
c002037e:	51                   	push   ecx
c002037f:	51                   	push   ecx
c0020380:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020383:	ff 36                	push   DWORD PTR [esi]
c0020385:	e8 43 f3 ff ff       	call   c001f6cd <Vm::fpu64ToInternal(unsigned long long)>
c002038a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020391:	89 c6                	mov    esi,eax
c0020393:	89 d7                	mov    edi,edx
c0020395:	e8 9f f5 ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c002039a:	57                   	push   edi
c002039b:	56                   	push   esi
c002039c:	52                   	push   edx
c002039d:	50                   	push   eax
c002039e:	e8 36 f5 ff ff       	call   c001f8d9 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00203a3:	e9 e2 00 00 00       	jmp    c002048a <Vm::x87Handler(regs*)+0xa14>
c00203a8:	80 fa 05             	cmp    dl,0x5
c00203ab:	75 28                	jne    c00203d5 <Vm::x87Handler(regs*)+0x95f>
c00203ad:	83 ec 0c             	sub    esp,0xc
c00203b0:	6a 00                	push   0x0
c00203b2:	e8 82 f5 ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c00203b7:	89 c7                	mov    edi,eax
c00203b9:	89 d5                	mov    ebp,edx
c00203bb:	58                   	pop    eax
c00203bc:	5a                   	pop    edx
c00203bd:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203c0:	ff 36                	push   DWORD PTR [esi]
c00203c2:	e8 06 f3 ff ff       	call   c001f6cd <Vm::fpu64ToInternal(unsigned long long)>
c00203c7:	83 c4 10             	add    esp,0x10
c00203ca:	55                   	push   ebp
c00203cb:	57                   	push   edi
c00203cc:	52                   	push   edx
c00203cd:	50                   	push   eax
c00203ce:	e8 06 f5 ff ff       	call   c001f8d9 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00203d3:	eb 60                	jmp    c0020435 <Vm::x87Handler(regs*)+0x9bf>
c00203d5:	80 fa 06             	cmp    dl,0x6
c00203d8:	75 2a                	jne    c0020404 <Vm::x87Handler(regs*)+0x98e>
c00203da:	51                   	push   ecx
c00203db:	51                   	push   ecx
c00203dc:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203df:	ff 36                	push   DWORD PTR [esi]
c00203e1:	e8 e7 f2 ff ff       	call   c001f6cd <Vm::fpu64ToInternal(unsigned long long)>
c00203e6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203ed:	89 c6                	mov    esi,eax
c00203ef:	89 d7                	mov    edi,edx
c00203f1:	e8 43 f5 ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c00203f6:	57                   	push   edi
c00203f7:	56                   	push   esi
c00203f8:	52                   	push   edx
c00203f9:	50                   	push   eax
c00203fa:	e8 08 f5 ff ff       	call   c001f907 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00203ff:	e9 86 00 00 00       	jmp    c002048a <Vm::x87Handler(regs*)+0xa14>
c0020404:	31 c0                	xor    eax,eax
c0020406:	80 fa 07             	cmp    dl,0x7
c0020409:	0f 85 c8 00 00 00    	jne    c00204d7 <Vm::x87Handler(regs*)+0xa61>
c002040f:	83 ec 0c             	sub    esp,0xc
c0020412:	6a 00                	push   0x0
c0020414:	e8 20 f5 ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c0020419:	89 c7                	mov    edi,eax
c002041b:	89 d5                	mov    ebp,edx
c002041d:	58                   	pop    eax
c002041e:	5a                   	pop    edx
c002041f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020422:	ff 36                	push   DWORD PTR [esi]
c0020424:	e8 a4 f2 ff ff       	call   c001f6cd <Vm::fpu64ToInternal(unsigned long long)>
c0020429:	83 c4 10             	add    esp,0x10
c002042c:	55                   	push   ebp
c002042d:	57                   	push   edi
c002042e:	52                   	push   edx
c002042f:	50                   	push   eax
c0020430:	e8 d2 f4 ff ff       	call   c001f907 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020435:	83 c4 0c             	add    esp,0xc
c0020438:	eb 53                	jmp    c002048d <Vm::x87Handler(regs*)+0xa17>
c002043a:	31 c0                	xor    eax,eax
c002043c:	80 fa 02             	cmp    dl,0x2
c002043f:	0f 85 92 00 00 00    	jne    c00204d7 <Vm::x87Handler(regs*)+0xa61>
c0020445:	83 ec 0c             	sub    esp,0xc
c0020448:	6a 00                	push   0x0
c002044a:	e8 ea f4 ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c002044f:	59                   	pop    ecx
c0020450:	5f                   	pop    edi
c0020451:	52                   	push   edx
c0020452:	50                   	push   eax
c0020453:	e8 27 f2 ff ff       	call   c001f67f <Vm::fpuInternalTo64(unsigned long long)>
c0020458:	eb 70                	jmp    c00204ca <Vm::x87Handler(regs*)+0xa54>
c002045a:	31 c0                	xor    eax,eax
c002045c:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020461:	75 74                	jne    c00204d7 <Vm::x87Handler(regs*)+0xa61>
c0020463:	50                   	push   eax
c0020464:	50                   	push   eax
c0020465:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020468:	31 d2                	xor    edx,edx
c002046a:	52                   	push   edx
c002046b:	50                   	push   eax
c002046c:	e8 f6 f2 ff ff       	call   c001f767 <Vm::fpuLongToFloat(long long)>
c0020471:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020478:	89 c6                	mov    esi,eax
c002047a:	89 d7                	mov    edi,edx
c002047c:	e8 b8 f4 ff ff       	call   c001f939 <Vm::fpuGetReg(int)>
c0020481:	57                   	push   edi
c0020482:	56                   	push   esi
c0020483:	52                   	push   edx
c0020484:	50                   	push   eax
c0020485:	e8 5e f4 ff ff       	call   c001f8e8 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002048a:	83 c4 1c             	add    esp,0x1c
c002048d:	52                   	push   edx
c002048e:	50                   	push   eax
c002048f:	6a 00                	push   0x0
c0020491:	e8 e6 f4 ff ff       	call   c001f97c <Vm::fpuSetReg(int, unsigned long long)>
c0020496:	e9 f2 f7 ff ff       	jmp    c001fc8d <Vm::x87Handler(regs*)+0x217>
c002049b:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002049f:	80 fa 05             	cmp    dl,0x5
c00204a2:	75 11                	jne    c00204b5 <Vm::x87Handler(regs*)+0xa3f>
c00204a4:	55                   	push   ebp
c00204a5:	55                   	push   ebp
c00204a6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204a9:	ff 36                	push   DWORD PTR [esi]
c00204ab:	e8 81 f2 ff ff       	call   c001f731 <Vm::fpuULongToFloat(unsigned long long)>
c00204b0:	e9 cf f7 ff ff       	jmp    c001fc84 <Vm::x87Handler(regs*)+0x20e>
c00204b5:	31 c0                	xor    eax,eax
c00204b7:	80 fa 07             	cmp    dl,0x7
c00204ba:	75 1b                	jne    c00204d7 <Vm::x87Handler(regs*)+0xa61>
c00204bc:	e8 63 f5 ff ff       	call   c001fa24 <Vm::fpuPop()>
c00204c1:	51                   	push   ecx
c00204c2:	51                   	push   ecx
c00204c3:	52                   	push   edx
c00204c4:	50                   	push   eax
c00204c5:	e8 0c f2 ff ff       	call   c001f6d6 <Vm::fpuFloatToLong(unsigned long long)>
c00204ca:	83 c4 10             	add    esp,0x10
c00204cd:	89 06                	mov    DWORD PTR [esi],eax
c00204cf:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00204d2:	e9 f8 f7 ff ff       	jmp    c001fccf <Vm::x87Handler(regs*)+0x259>
c00204d7:	83 c4 1c             	add    esp,0x1c
c00204da:	5b                   	pop    ebx
c00204db:	5e                   	pop    esi
c00204dc:	5f                   	pop    edi
c00204dd:	5d                   	pop    ebp
c00204de:	c3                   	ret    

c00204df <__static_initialization_and_destruction_0(int, int)>:
c00204df:	83 ec 0c             	sub    esp,0xc
c00204e2:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00204e7:	75 1a                	jne    c0020503 <__static_initialization_and_destruction_0(int, int)+0x24>
c00204e9:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00204f1:	75 10                	jne    c0020503 <__static_initialization_and_destruction_0(int, int)+0x24>
c00204f3:	83 ec 0c             	sub    esp,0xc
c00204f6:	68 80 1b 03 c0       	push   0xc0031b80
c00204fb:	e8 10 88 00 00       	call   c0028d10 <Vm::_FPUState::_FPUState()>
c0020500:	83 c4 10             	add    esp,0x10
c0020503:	90                   	nop
c0020504:	83 c4 0c             	add    esp,0xc
c0020507:	c3                   	ret    

c0020508 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020508:	83 ec 0c             	sub    esp,0xc
c002050b:	83 ec 08             	sub    esp,0x8
c002050e:	68 ff ff 00 00       	push   0xffff
c0020513:	6a 01                	push   0x1
c0020515:	e8 c5 ff ff ff       	call   c00204df <__static_initialization_and_destruction_0(int, int)>
c002051a:	83 c4 10             	add    esp,0x10
c002051d:	83 c4 0c             	add    esp,0xc
c0020520:	c3                   	ret    
c0020521:	90                   	nop

c0020522 <FAT::getName()>:
c0020522:	b8 88 c9 02 c0       	mov    eax,0xc002c988
c0020527:	c3                   	ret    

c0020528 <FAT::tell(void*, unsigned long long*)>:
c0020528:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002052d:	75 06                	jne    c0020535 <FAT::tell(void*, unsigned long long*)+0xd>
c002052f:	b8 04 00 00 00       	mov    eax,0x4
c0020534:	c3                   	ret    
c0020535:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002053a:	75 06                	jne    c0020542 <FAT::tell(void*, unsigned long long*)+0x1a>
c002053c:	b8 04 00 00 00       	mov    eax,0x4
c0020541:	c3                   	ret    
c0020542:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020546:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020549:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c002054c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020550:	89 01                	mov    DWORD PTR [ecx],eax
c0020552:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020555:	b8 00 00 00 00       	mov    eax,0x0
c002055a:	c3                   	ret    
c002055b:	90                   	nop

c002055c <FAT::stat(void*, unsigned long long*)>:
c002055c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020561:	75 06                	jne    c0020569 <FAT::stat(void*, unsigned long long*)+0xd>
c0020563:	b8 04 00 00 00       	mov    eax,0x4
c0020568:	c3                   	ret    
c0020569:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002056e:	75 06                	jne    c0020576 <FAT::stat(void*, unsigned long long*)+0x1a>
c0020570:	b8 04 00 00 00       	mov    eax,0x4
c0020575:	c3                   	ret    
c0020576:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002057a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c002057d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020580:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020584:	89 01                	mov    DWORD PTR [ecx],eax
c0020586:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020589:	b8 00 00 00 00       	mov    eax,0x0
c002058e:	c3                   	ret    
c002058f:	90                   	nop

c0020590 <FAT::~FAT()>:
c0020590:	83 ec 0c             	sub    esp,0xc
c0020593:	ba 0c ca 02 c0       	mov    edx,0xc002ca0c
c0020598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002059c:	89 10                	mov    DWORD PTR [eax],edx
c002059e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205a2:	83 ec 0c             	sub    esp,0xc
c00205a5:	50                   	push   eax
c00205a6:	e8 99 2c ff ff       	call   c0013244 <Filesystem::~Filesystem()>
c00205ab:	83 c4 10             	add    esp,0x10
c00205ae:	90                   	nop
c00205af:	83 c4 0c             	add    esp,0xc
c00205b2:	c3                   	ret    
c00205b3:	90                   	nop

c00205b4 <FAT::~FAT()>:
c00205b4:	83 ec 0c             	sub    esp,0xc
c00205b7:	83 ec 0c             	sub    esp,0xc
c00205ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205be:	e8 cd ff ff ff       	call   c0020590 <FAT::~FAT()>
c00205c3:	83 c4 10             	add    esp,0x10
c00205c6:	83 ec 08             	sub    esp,0x8
c00205c9:	6a 08                	push   0x8
c00205cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205cf:	e8 68 28 ff ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c00205d4:	83 c4 10             	add    esp,0x10
c00205d7:	83 c4 0c             	add    esp,0xc
c00205da:	c3                   	ret    
c00205db:	90                   	nop

c00205dc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00205dc:	83 ec 1c             	sub    esp,0x1c
c00205df:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00205e6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00205eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00205ef:	8b 04 85 00 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce400]
c00205f6:	83 f8 ff             	cmp    eax,0xffffffff
c00205f9:	75 34                	jne    c002062f <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c00205fb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00205ff:	88 c2                	mov    dl,al
c0020601:	a1 e0 1b 03 c0       	mov    eax,ds:0xc0031be0
c0020606:	01 d0                	add    eax,edx
c0020608:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002060c:	8b 15 e0 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031be0
c0020612:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020616:	89 14 85 00 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce400],edx
c002061d:	a1 e0 1b 03 c0       	mov    eax,ds:0xc0031be0
c0020622:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020626:	89 14 85 80 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce380],edx
c002062d:	eb 17                	jmp    c0020646 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c002062f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020633:	88 c2                	mov    dl,al
c0020635:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020639:	8b 04 85 00 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce400]
c0020640:	01 d0                	add    eax,edx
c0020642:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020646:	83 ec 04             	sub    esp,0x4
c0020649:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002064d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020651:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020655:	50                   	push   eax
c0020656:	e8 dd 66 fe ff       	call   c0006d38 <f_getlabel>
c002065b:	83 c4 10             	add    esp,0x10
c002065e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020662:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020667:	75 07                	jne    c0020670 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020669:	b8 00 00 00 00       	mov    eax,0x0
c002066e:	eb 05                	jmp    c0020675 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020670:	b8 01 00 00 00       	mov    eax,0x1
c0020675:	83 c4 1c             	add    esp,0x1c
c0020678:	c3                   	ret    
c0020679:	90                   	nop

c002067a <FAT::setlabel(LogicalDisk*, int, char*)>:
c002067a:	57                   	push   edi
c002067b:	83 ec 58             	sub    esp,0x58
c002067e:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020686:	8d 54 24 10          	lea    edx,[esp+0x10]
c002068a:	b9 0f 00 00 00       	mov    ecx,0xf
c002068f:	b8 00 00 00 00       	mov    eax,0x0
c0020694:	fc                   	cld    
c0020695:	89 d7                	mov    edi,edx
c0020697:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020699:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002069d:	8b 04 85 00 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce400]
c00206a4:	83 f8 ff             	cmp    eax,0xffffffff
c00206a7:	75 34                	jne    c00206dd <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c00206a9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00206ad:	88 c2                	mov    dl,al
c00206af:	a1 e0 1b 03 c0       	mov    eax,ds:0xc0031be0
c00206b4:	01 d0                	add    eax,edx
c00206b6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00206ba:	8b 15 e0 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031be0
c00206c0:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00206c4:	89 14 85 00 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce400],edx
c00206cb:	a1 e0 1b 03 c0       	mov    eax,ds:0xc0031be0
c00206d0:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00206d4:	89 14 85 80 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce380],edx
c00206db:	eb 17                	jmp    c00206f4 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c00206dd:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00206e1:	88 c2                	mov    dl,al
c00206e3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00206e7:	8b 04 85 00 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce400]
c00206ee:	01 d0                	add    eax,edx
c00206f0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00206f4:	83 ec 08             	sub    esp,0x8
c00206f7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00206fb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00206ff:	50                   	push   eax
c0020700:	e8 6f 02 fe ff       	call   c0000974 <strcat>
c0020705:	83 c4 10             	add    esp,0x10
c0020708:	83 ec 0c             	sub    esp,0xc
c002070b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002070f:	50                   	push   eax
c0020710:	e8 11 68 fe ff       	call   c0006f26 <f_setlabel>
c0020715:	83 c4 10             	add    esp,0x10
c0020718:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002071c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020721:	75 07                	jne    c002072a <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020723:	b8 00 00 00 00       	mov    eax,0x0
c0020728:	eb 05                	jmp    c002072f <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c002072a:	b8 01 00 00 00       	mov    eax,0x1
c002072f:	83 c4 58             	add    esp,0x58
c0020732:	5f                   	pop    edi
c0020733:	c3                   	ret    

c0020734 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020734:	83 ec 2c             	sub    esp,0x2c
c0020737:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002073f:	83 ec 08             	sub    esp,0x8
c0020742:	68 ac c9 02 c0       	push   0xc002c9ac
c0020747:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002074b:	e8 70 01 fe ff       	call   c00008c0 <strcmp>
c0020750:	83 c4 10             	add    esp,0x10
c0020753:	85 c0                	test   eax,eax
c0020755:	0f 94 c0             	sete   al
c0020758:	84 c0                	test   al,al
c002075a:	74 0d                	je     c0020769 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c002075c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020764:	e9 a6 00 00 00       	jmp    c002080f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020769:	83 ec 08             	sub    esp,0x8
c002076c:	68 9e c9 02 c0       	push   0xc002c99e
c0020771:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020775:	e8 46 01 fe ff       	call   c00008c0 <strcmp>
c002077a:	83 c4 10             	add    esp,0x10
c002077d:	85 c0                	test   eax,eax
c002077f:	0f 94 c0             	sete   al
c0020782:	84 c0                	test   al,al
c0020784:	74 0a                	je     c0020790 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020786:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002078e:	eb 7f                	jmp    c002080f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020790:	83 ec 08             	sub    esp,0x8
c0020793:	68 a4 c9 02 c0       	push   0xc002c9a4
c0020798:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002079c:	e8 1f 01 fe ff       	call   c00008c0 <strcmp>
c00207a1:	83 c4 10             	add    esp,0x10
c00207a4:	85 c0                	test   eax,eax
c00207a6:	0f 94 c0             	sete   al
c00207a9:	84 c0                	test   al,al
c00207ab:	74 0a                	je     c00207b7 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00207ad:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00207b5:	eb 58                	jmp    c002080f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207b7:	83 ec 08             	sub    esp,0x8
c00207ba:	68 6c 94 02 c0       	push   0xc002946c
c00207bf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207c3:	e8 f8 00 fe ff       	call   c00008c0 <strcmp>
c00207c8:	83 c4 10             	add    esp,0x10
c00207cb:	85 c0                	test   eax,eax
c00207cd:	0f 94 c0             	sete   al
c00207d0:	84 c0                	test   al,al
c00207d2:	74 0a                	je     c00207de <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00207d4:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00207dc:	eb 31                	jmp    c002080f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207de:	83 ec 08             	sub    esp,0x8
c00207e1:	68 aa c9 02 c0       	push   0xc002c9aa
c00207e6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207ea:	e8 d1 00 fe ff       	call   c00008c0 <strcmp>
c00207ef:	83 c4 10             	add    esp,0x10
c00207f2:	85 c0                	test   eax,eax
c00207f4:	0f 94 c0             	sete   al
c00207f7:	84 c0                	test   al,al
c00207f9:	74 0a                	je     c0020805 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00207fb:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020803:	eb 0a                	jmp    c002080f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020805:	b8 08 00 00 00       	mov    eax,0x8
c002080a:	e9 04 01 00 00       	jmp    c0020913 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002080f:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020816:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c002081b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002081f:	8b 04 85 00 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce400]
c0020826:	83 f8 ff             	cmp    eax,0xffffffff
c0020829:	75 34                	jne    c002085f <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c002082b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002082f:	88 c2                	mov    dl,al
c0020831:	a1 e0 1b 03 c0       	mov    eax,ds:0xc0031be0
c0020836:	01 d0                	add    eax,edx
c0020838:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002083c:	8b 15 e0 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031be0
c0020842:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020846:	89 14 85 00 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce400],edx
c002084d:	a1 e0 1b 03 c0       	mov    eax,ds:0xc0031be0
c0020852:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020856:	89 14 85 80 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce380],edx
c002085d:	eb 17                	jmp    c0020876 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c002085f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020863:	88 c2                	mov    dl,al
c0020865:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020869:	8b 04 85 00 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce400]
c0020870:	01 d0                	add    eax,edx
c0020872:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020876:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002087a:	88 04 24             	mov    BYTE PTR [esp],al
c002087d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020881:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020885:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002088d:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020892:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002089a:	83 ec 0c             	sub    esp,0xc
c002089d:	68 00 20 00 00       	push   0x2000
c00208a2:	e8 99 ef fe ff       	call   c000f840 <malloc>
c00208a7:	83 c4 10             	add    esp,0x10
c00208aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00208ae:	68 00 20 00 00       	push   0x2000
c00208b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00208b7:	8d 44 24 08          	lea    eax,[esp+0x8]
c00208bb:	50                   	push   eax
c00208bc:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00208c0:	50                   	push   eax
c00208c1:	e8 ab 6a fe ff       	call   c0007371 <f_mkfs>
c00208c6:	83 c4 10             	add    esp,0x10
c00208c9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00208cd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00208d2:	75 07                	jne    c00208db <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00208d4:	b8 00 00 00 00       	mov    eax,0x0
c00208d9:	eb 38                	jmp    c0020913 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00208db:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00208e0:	75 17                	jne    c00208f9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c00208e2:	83 ec 0c             	sub    esp,0xc
c00208e5:	68 dc c9 02 c0       	push   0xc002c9dc
c00208ea:	e8 2d 26 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c00208ef:	83 c4 10             	add    esp,0x10
c00208f2:	b8 09 00 00 00       	mov    eax,0x9
c00208f7:	eb 1a                	jmp    c0020913 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00208f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00208fd:	83 ec 08             	sub    esp,0x8
c0020900:	50                   	push   eax
c0020901:	68 b0 c9 02 c0       	push   0xc002c9b0
c0020906:	e8 11 26 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c002090b:	83 c4 10             	add    esp,0x10
c002090e:	b8 01 00 00 00       	mov    eax,0x1
c0020913:	83 c4 2c             	add    esp,0x2c
c0020916:	c3                   	ret    
c0020917:	90                   	nop

c0020918 <FAT::tryMount(LogicalDisk*, int)>:
c0020918:	81 ec 6c 03 00 00    	sub    esp,0x36c
c002091e:	a1 e0 1b 03 c0       	mov    eax,ds:0xc0031be0
c0020923:	83 f8 14             	cmp    eax,0x14
c0020926:	75 17                	jne    c002093f <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020928:	83 ec 0c             	sub    esp,0xc
c002092b:	68 c2 c9 02 c0       	push   0xc002c9c2
c0020930:	e8 88 9c ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c0020935:	83 c4 10             	add    esp,0x10
c0020938:	b0 00                	mov    al,0x0
c002093a:	e9 d7 01 00 00       	jmp    c0020b16 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002093f:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020946:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002094c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020952:	3d 00 02 00 00       	cmp    eax,0x200
c0020957:	74 07                	je     c0020960 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020959:	b0 00                	mov    al,0x0
c002095b:	e9 b6 01 00 00       	jmp    c0020b16 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020960:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020968:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c002096f:	8b 04 85 00 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce400]
c0020976:	83 f8 ff             	cmp    eax,0xffffffff
c0020979:	74 07                	je     c0020982 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c002097b:	b0 01                	mov    al,0x1
c002097d:	e9 94 01 00 00       	jmp    c0020b16 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020982:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c002098c:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020994:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c002099b:	88 c2                	mov    dl,al
c002099d:	a1 e0 1b 03 c0       	mov    eax,ds:0xc0031be0
c00209a2:	01 d0                	add    eax,edx
c00209a4:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00209ab:	8b 15 e0 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031be0
c00209b1:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00209b8:	89 14 85 00 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce400],edx
c00209bf:	a1 e0 1b 03 c0       	mov    eax,ds:0xc0031be0
c00209c4:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00209cb:	89 14 85 80 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce380],edx
c00209d2:	83 ec 0c             	sub    esp,0xc
c00209d5:	68 54 02 00 00       	push   0x254
c00209da:	e8 61 ee fe ff       	call   c000f840 <malloc>
c00209df:	83 c4 10             	add    esp,0x10
c00209e2:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00209e9:	83 ec 04             	sub    esp,0x4
c00209ec:	6a 00                	push   0x0
c00209ee:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00209f5:	50                   	push   eax
c00209f6:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00209fd:	e8 2d 45 fe ff       	call   c0004f2f <f_mount>
c0020a02:	83 c4 10             	add    esp,0x10
c0020a05:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020a0c:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020a14:	74 19                	je     c0020a2f <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020a16:	83 ec 0c             	sub    esp,0xc
c0020a19:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a20:	e8 3b ee fe ff       	call   c000f860 <rfree>
c0020a25:	83 c4 10             	add    esp,0x10
c0020a28:	b0 00                	mov    al,0x0
c0020a2a:	e9 e7 00 00 00       	jmp    c0020b16 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a2f:	83 ec 04             	sub    esp,0x4
c0020a32:	68 00 01 00 00       	push   0x100
c0020a37:	6a 00                	push   0x0
c0020a39:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a40:	50                   	push   eax
c0020a41:	e8 32 fd fd ff       	call   c0000778 <memset>
c0020a46:	83 c4 10             	add    esp,0x10
c0020a49:	83 ec 08             	sub    esp,0x8
c0020a4c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020a53:	50                   	push   eax
c0020a54:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a5b:	50                   	push   eax
c0020a5c:	e8 13 ff fd ff       	call   c0000974 <strcat>
c0020a61:	83 c4 10             	add    esp,0x10
c0020a64:	83 ec 08             	sub    esp,0x8
c0020a67:	68 d0 c9 02 c0       	push   0xc002c9d0
c0020a6c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a73:	50                   	push   eax
c0020a74:	e8 fb fe fd ff       	call   c0000974 <strcat>
c0020a79:	83 c4 10             	add    esp,0x10
c0020a7c:	83 ec 04             	sub    esp,0x4
c0020a7f:	6a 01                	push   0x1
c0020a81:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020a88:	50                   	push   eax
c0020a89:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020a8d:	50                   	push   eax
c0020a8e:	e8 fe 44 fe ff       	call   c0004f91 <f_open>
c0020a93:	83 c4 10             	add    esp,0x10
c0020a96:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020a9d:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020aa4:	85 c0                	test   eax,eax
c0020aa6:	74 0a                	je     c0020ab2 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020aa8:	78 2d                	js     c0020ad7 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020aaa:	83 e8 04             	sub    eax,0x4
c0020aad:	83 f8 01             	cmp    eax,0x1
c0020ab0:	77 25                	ja     c0020ad7 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020ab2:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020aba:	83 ec 0c             	sub    esp,0xc
c0020abd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020ac1:	50                   	push   eax
c0020ac2:	e8 1c 50 fe ff       	call   c0005ae3 <f_close>
c0020ac7:	83 c4 10             	add    esp,0x10
c0020aca:	90                   	nop
c0020acb:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020ad3:	74 3a                	je     c0020b0f <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020ad5:	eb 2d                	jmp    c0020b04 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020ad7:	83 ec 0c             	sub    esp,0xc
c0020ada:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020ae1:	e8 7a ed fe ff       	call   c000f860 <rfree>
c0020ae6:	83 c4 10             	add    esp,0x10
c0020ae9:	83 ec 04             	sub    esp,0x4
c0020aec:	6a 00                	push   0x0
c0020aee:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020af5:	50                   	push   eax
c0020af6:	6a 00                	push   0x0
c0020af8:	e8 32 44 fe ff       	call   c0004f2f <f_mount>
c0020afd:	83 c4 10             	add    esp,0x10
c0020b00:	b0 00                	mov    al,0x0
c0020b02:	eb 12                	jmp    c0020b16 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b04:	a1 e0 1b 03 c0       	mov    eax,ds:0xc0031be0
c0020b09:	40                   	inc    eax
c0020b0a:	a3 e0 1b 03 c0       	mov    ds:0xc0031be0,eax
c0020b0f:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020b16:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020b1c:	c3                   	ret    
c0020b1d:	90                   	nop

c0020b1e <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020b1e:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020b24:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020b2c:	74 0a                	je     c0020b38 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020b2e:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020b36:	75 0a                	jne    c0020b42 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020b38:	b8 04 00 00 00       	mov    eax,0x4
c0020b3d:	e9 db 00 00 00       	jmp    c0020c1d <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020b42:	83 ec 08             	sub    esp,0x8
c0020b45:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020b4c:	50                   	push   eax
c0020b4d:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020b54:	e8 94 55 fe ff       	call   c00060ed <f_readdir>
c0020b59:	83 c4 10             	add    esp,0x10
c0020b5c:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020b63:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020b69:	83 ec 0c             	sub    esp,0xc
c0020b6c:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020b73:	83 c0 1a             	add    eax,0x1a
c0020b76:	50                   	push   eax
c0020b77:	e8 18 fc fd ff       	call   c0000794 <strlen>
c0020b7c:	83 c4 10             	add    esp,0x10
c0020b7f:	ba 00 00 00 00       	mov    edx,0x0
c0020b84:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020b88:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020b8c:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020b93:	0f b6 c0             	movzx  eax,al
c0020b96:	83 e0 10             	and    eax,0x10
c0020b99:	74 07                	je     c0020ba2 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020b9b:	b8 02 00 00 00       	mov    eax,0x2
c0020ba0:	eb 05                	jmp    c0020ba7 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020ba2:	b8 01 00 00 00       	mov    eax,0x1
c0020ba7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020bab:	83 ec 08             	sub    esp,0x8
c0020bae:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020bb5:	83 c0 1a             	add    eax,0x1a
c0020bb8:	50                   	push   eax
c0020bb9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020bbd:	83 c0 10             	add    eax,0x10
c0020bc0:	50                   	push   eax
c0020bc1:	e8 6e fc fd ff       	call   c0000834 <strcpy>
c0020bc6:	83 c4 10             	add    esp,0x10
c0020bc9:	83 ec 04             	sub    esp,0x4
c0020bcc:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020bd3:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020bd7:	50                   	push   eax
c0020bd8:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020bdf:	e8 60 fb fd ff       	call   c0000744 <memcpy>
c0020be4:	83 c4 10             	add    esp,0x10
c0020be7:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020bee:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020bf4:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020bfb:	84 c0                	test   al,al
c0020bfd:	75 07                	jne    c0020c06 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020bff:	b8 07 00 00 00       	mov    eax,0x7
c0020c04:	eb 17                	jmp    c0020c1d <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020c06:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020c0d:	85 c0                	test   eax,eax
c0020c0f:	75 07                	jne    c0020c18 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020c11:	b8 00 00 00 00       	mov    eax,0x0
c0020c16:	eb 05                	jmp    c0020c1d <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020c18:	b8 01 00 00 00       	mov    eax,0x1
c0020c1d:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020c23:	c3                   	ret    

c0020c24 <FAT::read(void*, unsigned long, void*, int*)>:
c0020c24:	83 ec 1c             	sub    esp,0x1c
c0020c27:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c2c:	74 07                	je     c0020c35 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020c2e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c33:	75 07                	jne    c0020c3c <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020c35:	b8 04 00 00 00       	mov    eax,0x4
c0020c3a:	eb 3d                	jmp    c0020c79 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c3c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c40:	50                   	push   eax
c0020c41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c45:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c49:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c4d:	e8 7b 47 fe ff       	call   c00053cd <f_read>
c0020c52:	83 c4 10             	add    esp,0x10
c0020c55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c5d:	89 c2                	mov    edx,eax
c0020c5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020c63:	89 10                	mov    DWORD PTR [eax],edx
c0020c65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c69:	85 c0                	test   eax,eax
c0020c6b:	75 07                	jne    c0020c74 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020c6d:	b8 00 00 00 00       	mov    eax,0x0
c0020c72:	eb 05                	jmp    c0020c79 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c74:	b8 01 00 00 00       	mov    eax,0x1
c0020c79:	83 c4 1c             	add    esp,0x1c
c0020c7c:	c3                   	ret    
c0020c7d:	90                   	nop

c0020c7e <FAT::write(void*, unsigned long, void*, int*)>:
c0020c7e:	83 ec 1c             	sub    esp,0x1c
c0020c81:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c86:	74 07                	je     c0020c8f <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020c88:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c8d:	75 07                	jne    c0020c96 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020c8f:	b8 04 00 00 00       	mov    eax,0x4
c0020c94:	eb 3d                	jmp    c0020cd3 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020c96:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c9a:	50                   	push   eax
c0020c9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c9f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020ca3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ca7:	e8 a1 49 fe ff       	call   c000564d <f_write>
c0020cac:	83 c4 10             	add    esp,0x10
c0020caf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cb3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020cb7:	89 c2                	mov    edx,eax
c0020cb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020cbd:	89 10                	mov    DWORD PTR [eax],edx
c0020cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020cc3:	85 c0                	test   eax,eax
c0020cc5:	75 07                	jne    c0020cce <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020cc7:	b8 00 00 00 00       	mov    eax,0x0
c0020ccc:	eb 05                	jmp    c0020cd3 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020cce:	b8 01 00 00 00       	mov    eax,0x1
c0020cd3:	83 c4 1c             	add    esp,0x1c
c0020cd6:	c3                   	ret    
c0020cd7:	90                   	nop

c0020cd8 <FAT::close(void*)>:
c0020cd8:	83 ec 1c             	sub    esp,0x1c
c0020cdb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020ce0:	75 07                	jne    c0020ce9 <FAT::close(void*)+0x11>
c0020ce2:	b8 04 00 00 00       	mov    eax,0x4
c0020ce7:	eb 36                	jmp    c0020d1f <FAT::close(void*)+0x47>
c0020ce9:	83 ec 0c             	sub    esp,0xc
c0020cec:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cf0:	e8 ee 4d fe ff       	call   c0005ae3 <f_close>
c0020cf5:	83 c4 10             	add    esp,0x10
c0020cf8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cfc:	83 ec 0c             	sub    esp,0xc
c0020cff:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d03:	e8 48 eb fe ff       	call   c000f850 <free>
c0020d08:	83 c4 10             	add    esp,0x10
c0020d0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d0f:	85 c0                	test   eax,eax
c0020d11:	75 07                	jne    c0020d1a <FAT::close(void*)+0x42>
c0020d13:	b8 00 00 00 00       	mov    eax,0x0
c0020d18:	eb 05                	jmp    c0020d1f <FAT::close(void*)+0x47>
c0020d1a:	b8 01 00 00 00       	mov    eax,0x1
c0020d1f:	83 c4 1c             	add    esp,0x1c
c0020d22:	c3                   	ret    
c0020d23:	90                   	nop

c0020d24 <FAT::closeDir(void*)>:
c0020d24:	83 ec 1c             	sub    esp,0x1c
c0020d27:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d2c:	75 07                	jne    c0020d35 <FAT::closeDir(void*)+0x11>
c0020d2e:	b8 04 00 00 00       	mov    eax,0x4
c0020d33:	eb 36                	jmp    c0020d6b <FAT::closeDir(void*)+0x47>
c0020d35:	83 ec 0c             	sub    esp,0xc
c0020d38:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d3c:	e8 8a 53 fe ff       	call   c00060cb <f_closedir>
c0020d41:	83 c4 10             	add    esp,0x10
c0020d44:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d48:	83 ec 0c             	sub    esp,0xc
c0020d4b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d4f:	e8 fc ea fe ff       	call   c000f850 <free>
c0020d54:	83 c4 10             	add    esp,0x10
c0020d57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d5b:	85 c0                	test   eax,eax
c0020d5d:	75 07                	jne    c0020d66 <FAT::closeDir(void*)+0x42>
c0020d5f:	b8 00 00 00 00       	mov    eax,0x0
c0020d64:	eb 05                	jmp    c0020d6b <FAT::closeDir(void*)+0x47>
c0020d66:	b8 01 00 00 00       	mov    eax,0x1
c0020d6b:	83 c4 1c             	add    esp,0x1c
c0020d6e:	c3                   	ret    
c0020d6f:	90                   	nop

c0020d70 <FAT::seek(void*, unsigned long long)>:
c0020d70:	83 ec 2c             	sub    esp,0x2c
c0020d73:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020d7b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020d7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d83:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020d88:	75 07                	jne    c0020d91 <FAT::seek(void*, unsigned long long)+0x21>
c0020d8a:	b8 04 00 00 00       	mov    eax,0x4
c0020d8f:	eb 2f                	jmp    c0020dc0 <FAT::seek(void*, unsigned long long)+0x50>
c0020d91:	83 ec 04             	sub    esp,0x4
c0020d94:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020d98:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020d9c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020da0:	e8 6d 4d fe ff       	call   c0005b12 <f_lseek>
c0020da5:	83 c4 10             	add    esp,0x10
c0020da8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020dac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020db0:	85 c0                	test   eax,eax
c0020db2:	75 07                	jne    c0020dbb <FAT::seek(void*, unsigned long long)+0x4b>
c0020db4:	b8 00 00 00 00       	mov    eax,0x0
c0020db9:	eb 05                	jmp    c0020dc0 <FAT::seek(void*, unsigned long long)+0x50>
c0020dbb:	b8 01 00 00 00       	mov    eax,0x1
c0020dc0:	83 c4 2c             	add    esp,0x2c
c0020dc3:	c3                   	ret    

c0020dc4 <fatWrapperReadDisk>:
c0020dc4:	83 ec 1c             	sub    esp,0x1c
c0020dc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020dcb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020dcf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020dd3:	89 04 24             	mov    DWORD PTR [esp],eax
c0020dd6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020dda:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020dde:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020de3:	8b 04 85 c0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1440]
c0020dea:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020dee:	83 ec 0c             	sub    esp,0xc
c0020df1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020df5:	52                   	push   edx
c0020df6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020dfa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020dfe:	50                   	push   eax
c0020dff:	e8 28 59 ff ff       	call   c001672c <LogicalDisk::read(unsigned long long, int, void*)>
c0020e04:	83 c4 20             	add    esp,0x20
c0020e07:	83 c4 1c             	add    esp,0x1c
c0020e0a:	c3                   	ret    

c0020e0b <fatWrapperWriteDisk>:
c0020e0b:	83 ec 1c             	sub    esp,0x1c
c0020e0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e12:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e16:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e1a:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e1d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e21:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e25:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e2a:	8b 04 85 c0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1440]
c0020e31:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e35:	83 ec 0c             	sub    esp,0xc
c0020e38:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e3c:	52                   	push   edx
c0020e3d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e45:	50                   	push   eax
c0020e46:	e8 4d 59 ff ff       	call   c0016798 <LogicalDisk::write(unsigned long long, int, void*)>
c0020e4b:	83 c4 20             	add    esp,0x20
c0020e4e:	83 c4 1c             	add    esp,0x1c
c0020e51:	c3                   	ret    

c0020e52 <fatWrapperIoctl>:
c0020e52:	53                   	push   ebx
c0020e53:	83 ec 28             	sub    esp,0x28
c0020e56:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e5a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020e5e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020e62:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020e66:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020e6b:	75 31                	jne    c0020e9e <fatWrapperIoctl+0x4c>
c0020e6d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e71:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020e75:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e7a:	8b 04 85 c0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1440]
c0020e81:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020e87:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020e8d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020e91:	66 89 02             	mov    WORD PTR [edx],ax
c0020e94:	b8 00 00 00 00       	mov    eax,0x0
c0020e99:	e9 b2 00 00 00       	jmp    c0020f50 <fatWrapperIoctl+0xfe>
c0020e9e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020ea3:	75 6a                	jne    c0020f0f <fatWrapperIoctl+0xbd>
c0020ea5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020ea9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020ead:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020eb2:	8b 04 85 c0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1440]
c0020eb9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020ebf:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020ec5:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020ecb:	89 c8                	mov    eax,ecx
c0020ecd:	89 da                	mov    edx,ebx
c0020ecf:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020ed3:	c1 e0 0a             	shl    eax,0xa
c0020ed6:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020edb:	8b 0c 8d c0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1440]
c0020ee2:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020ee8:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020eee:	89 cb                	mov    ebx,ecx
c0020ef0:	c1 fb 1f             	sar    ebx,0x1f
c0020ef3:	53                   	push   ebx
c0020ef4:	51                   	push   ecx
c0020ef5:	52                   	push   edx
c0020ef6:	50                   	push   eax
c0020ef7:	e8 c0 5a 00 00       	call   c00269bc <__udivdi3>
c0020efc:	83 c4 10             	add    esp,0x10
c0020eff:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020f03:	89 01                	mov    DWORD PTR [ecx],eax
c0020f05:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020f08:	b8 00 00 00 00       	mov    eax,0x0
c0020f0d:	eb 41                	jmp    c0020f50 <fatWrapperIoctl+0xfe>
c0020f0f:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020f14:	75 07                	jne    c0020f1d <fatWrapperIoctl+0xcb>
c0020f16:	b8 00 00 00 00       	mov    eax,0x0
c0020f1b:	eb 33                	jmp    c0020f50 <fatWrapperIoctl+0xfe>
c0020f1d:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020f22:	75 19                	jne    c0020f3d <fatWrapperIoctl+0xeb>
c0020f24:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f28:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020f2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f30:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020f36:	b8 00 00 00 00       	mov    eax,0x0
c0020f3b:	eb 13                	jmp    c0020f50 <fatWrapperIoctl+0xfe>
c0020f3d:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020f42:	75 07                	jne    c0020f4b <fatWrapperIoctl+0xf9>
c0020f44:	b8 00 00 00 00       	mov    eax,0x0
c0020f49:	eb 05                	jmp    c0020f50 <fatWrapperIoctl+0xfe>
c0020f4b:	b8 04 00 00 00       	mov    eax,0x4
c0020f50:	83 c4 28             	add    esp,0x28
c0020f53:	5b                   	pop    ebx
c0020f54:	c3                   	ret    
c0020f55:	90                   	nop

c0020f56 <FAT::FAT()>:
c0020f56:	83 ec 1c             	sub    esp,0x1c
c0020f59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f5d:	83 ec 0c             	sub    esp,0xc
c0020f60:	50                   	push   eax
c0020f61:	e8 ba 22 ff ff       	call   c0013220 <Filesystem::Filesystem()>
c0020f66:	83 c4 10             	add    esp,0x10
c0020f69:	ba 0c ca 02 c0       	mov    edx,0xc002ca0c
c0020f6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f72:	89 10                	mov    DWORD PTR [eax],edx
c0020f74:	c7 05 e0 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031be0,0x0
c0020f7e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020f86:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020f8b:	7f 15                	jg     c0020fa2 <FAT::FAT()+0x4c>
c0020f8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f91:	c7 04 85 00 1c 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce400],0xffffffff
c0020f9c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020fa0:	eb e4                	jmp    c0020f86 <FAT::FAT()+0x30>
c0020fa2:	90                   	nop
c0020fa3:	83 c4 1c             	add    esp,0x1c
c0020fa6:	c3                   	ret    
c0020fa7:	90                   	nop

c0020fa8 <FAT::fixFilepath(char*)>:
c0020fa8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fac:	8a 00                	mov    al,BYTE PTR [eax]
c0020fae:	3c 40                	cmp    al,0x40
c0020fb0:	7e 2c                	jle    c0020fde <FAT::fixFilepath(char*)+0x36>
c0020fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fb6:	8a 00                	mov    al,BYTE PTR [eax]
c0020fb8:	83 e8 41             	sub    eax,0x41
c0020fbb:	88 c2                	mov    dl,al
c0020fbd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fc1:	88 10                	mov    BYTE PTR [eax],dl
c0020fc3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fc7:	8a 00                	mov    al,BYTE PTR [eax]
c0020fc9:	0f be c0             	movsx  eax,al
c0020fcc:	8b 04 85 00 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce400]
c0020fd3:	83 c0 30             	add    eax,0x30
c0020fd6:	88 c2                	mov    dl,al
c0020fd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fdc:	88 10                	mov    BYTE PTR [eax],dl
c0020fde:	90                   	nop
c0020fdf:	c3                   	ret    

c0020fe0 <FAT::open(char const*, void**, FileOpenMode)>:
c0020fe0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020fe6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020fee:	74 0a                	je     c0020ffa <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020ff0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020ff8:	75 0a                	jne    c0021004 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020ffa:	b8 04 00 00 00       	mov    eax,0x4
c0020fff:	e9 fd 00 00 00       	jmp    c0021101 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021004:	83 ec 08             	sub    esp,0x8
c0021007:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002100e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021012:	50                   	push   eax
c0021013:	e8 1c f8 fd ff       	call   c0000834 <strcpy>
c0021018:	83 c4 10             	add    esp,0x10
c002101b:	83 ec 08             	sub    esp,0x8
c002101e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021022:	50                   	push   eax
c0021023:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002102a:	e8 79 ff ff ff       	call   c0020fa8 <FAT::fixFilepath(char*)>
c002102f:	83 c4 10             	add    esp,0x10
c0021032:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c002103a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021041:	83 e0 01             	and    eax,0x1
c0021044:	74 08                	je     c002104e <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0021046:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c002104e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021055:	83 e0 04             	and    eax,0x4
c0021058:	74 10                	je     c002106a <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c002105a:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0021062:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002106a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021071:	83 e0 02             	and    eax,0x2
c0021074:	74 08                	je     c002107e <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0021076:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002107e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021085:	83 e0 08             	and    eax,0x8
c0021088:	74 08                	je     c0021092 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c002108a:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0021092:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021099:	83 e0 10             	and    eax,0x10
c002109c:	74 08                	je     c00210a6 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c002109e:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00210a6:	83 ec 0c             	sub    esp,0xc
c00210a9:	68 50 02 00 00       	push   0x250
c00210ae:	e8 8d e7 fe ff       	call   c000f840 <malloc>
c00210b3:	83 c4 10             	add    esp,0x10
c00210b6:	89 c2                	mov    edx,eax
c00210b8:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00210bf:	89 10                	mov    DWORD PTR [eax],edx
c00210c1:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00210c9:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00210d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00210d2:	83 ec 04             	sub    esp,0x4
c00210d5:	52                   	push   edx
c00210d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00210da:	52                   	push   edx
c00210db:	50                   	push   eax
c00210dc:	e8 b0 3e fe ff       	call   c0004f91 <f_open>
c00210e1:	83 c4 10             	add    esp,0x10
c00210e4:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00210eb:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00210f3:	74 07                	je     c00210fc <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00210f5:	b8 01 00 00 00       	mov    eax,0x1
c00210fa:	eb 05                	jmp    c0021101 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00210fc:	b8 00 00 00 00       	mov    eax,0x0
c0021101:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021107:	c3                   	ret    

c0021108 <FAT::openDir(char const*, void**)>:
c0021108:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002110e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021116:	74 0a                	je     c0021122 <FAT::openDir(char const*, void**)+0x1a>
c0021118:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021120:	75 07                	jne    c0021129 <FAT::openDir(char const*, void**)+0x21>
c0021122:	b8 04 00 00 00       	mov    eax,0x4
c0021127:	eb 7d                	jmp    c00211a6 <FAT::openDir(char const*, void**)+0x9e>
c0021129:	83 ec 08             	sub    esp,0x8
c002112c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021133:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021137:	50                   	push   eax
c0021138:	e8 f7 f6 fd ff       	call   c0000834 <strcpy>
c002113d:	83 c4 10             	add    esp,0x10
c0021140:	83 ec 08             	sub    esp,0x8
c0021143:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021147:	50                   	push   eax
c0021148:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002114f:	e8 54 fe ff ff       	call   c0020fa8 <FAT::fixFilepath(char*)>
c0021154:	83 c4 10             	add    esp,0x10
c0021157:	83 ec 0c             	sub    esp,0xc
c002115a:	6a 4c                	push   0x4c
c002115c:	e8 df e6 fe ff       	call   c000f840 <malloc>
c0021161:	83 c4 10             	add    esp,0x10
c0021164:	89 c2                	mov    edx,eax
c0021166:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002116d:	89 10                	mov    DWORD PTR [eax],edx
c002116f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021176:	8b 00                	mov    eax,DWORD PTR [eax]
c0021178:	83 ec 08             	sub    esp,0x8
c002117b:	8d 54 24 14          	lea    edx,[esp+0x14]
c002117f:	52                   	push   edx
c0021180:	50                   	push   eax
c0021181:	e8 43 4e fe ff       	call   c0005fc9 <f_opendir>
c0021186:	83 c4 10             	add    esp,0x10
c0021189:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021190:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0021198:	74 07                	je     c00211a1 <FAT::openDir(char const*, void**)+0x99>
c002119a:	b8 01 00 00 00       	mov    eax,0x1
c002119f:	eb 05                	jmp    c00211a6 <FAT::openDir(char const*, void**)+0x9e>
c00211a1:	b8 00 00 00 00       	mov    eax,0x0
c00211a6:	81 c4 1c 01 00 00    	add    esp,0x11c
c00211ac:	c3                   	ret    
c00211ad:	90                   	nop

c00211ae <FAT::stat(char const*, unsigned long long*, bool*)>:
c00211ae:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00211b4:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00211bc:	75 0a                	jne    c00211c8 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00211be:	b8 04 00 00 00       	mov    eax,0x4
c00211c3:	e9 c9 00 00 00       	jmp    c0021291 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211c8:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00211d0:	75 0a                	jne    c00211dc <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00211d2:	b8 04 00 00 00       	mov    eax,0x4
c00211d7:	e9 b5 00 00 00       	jmp    c0021291 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211dc:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00211e4:	75 0a                	jne    c00211f0 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00211e6:	b8 04 00 00 00       	mov    eax,0x4
c00211eb:	e9 a1 00 00 00       	jmp    c0021291 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211f0:	83 ec 08             	sub    esp,0x8
c00211f3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00211fa:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021201:	50                   	push   eax
c0021202:	e8 2d f6 fd ff       	call   c0000834 <strcpy>
c0021207:	83 c4 10             	add    esp,0x10
c002120a:	83 ec 08             	sub    esp,0x8
c002120d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0021214:	50                   	push   eax
c0021215:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002121c:	e8 87 fd ff ff       	call   c0020fa8 <FAT::fixFilepath(char*)>
c0021221:	83 c4 10             	add    esp,0x10
c0021224:	83 ec 08             	sub    esp,0x8
c0021227:	8d 44 24 08          	lea    eax,[esp+0x8]
c002122b:	50                   	push   eax
c002122c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021233:	50                   	push   eax
c0021234:	e8 4f 4f fe ff       	call   c0006188 <f_stat>
c0021239:	83 c4 10             	add    esp,0x10
c002123c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021243:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002124a:	85 c0                	test   eax,eax
c002124c:	74 07                	je     c0021255 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c002124e:	83 f8 04             	cmp    eax,0x4
c0021251:	74 32                	je     c0021285 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021253:	eb 37                	jmp    c002128c <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021255:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021259:	0f b6 c0             	movzx  eax,al
c002125c:	83 e0 10             	and    eax,0x10
c002125f:	0f 95 c2             	setne  dl
c0021262:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021269:	88 10                	mov    BYTE PTR [eax],dl
c002126b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002126e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021272:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021279:	89 01                	mov    DWORD PTR [ecx],eax
c002127b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002127e:	b8 00 00 00 00       	mov    eax,0x0
c0021283:	eb 0c                	jmp    c0021291 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021285:	b8 02 00 00 00       	mov    eax,0x2
c002128a:	eb 05                	jmp    c0021291 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002128c:	b8 01 00 00 00       	mov    eax,0x1
c0021291:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021297:	c3                   	ret    

c0021298 <FAT::unlink(char const*)>:
c0021298:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002129e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00212a6:	75 07                	jne    c00212af <FAT::unlink(char const*)+0x17>
c00212a8:	b8 04 00 00 00       	mov    eax,0x4
c00212ad:	eb 5c                	jmp    c002130b <FAT::unlink(char const*)+0x73>
c00212af:	83 ec 08             	sub    esp,0x8
c00212b2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00212b9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00212bd:	50                   	push   eax
c00212be:	e8 71 f5 fd ff       	call   c0000834 <strcpy>
c00212c3:	83 c4 10             	add    esp,0x10
c00212c6:	83 ec 08             	sub    esp,0x8
c00212c9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00212cd:	50                   	push   eax
c00212ce:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00212d5:	e8 ce fc ff ff       	call   c0020fa8 <FAT::fixFilepath(char*)>
c00212da:	83 c4 10             	add    esp,0x10
c00212dd:	83 ec 0c             	sub    esp,0xc
c00212e0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00212e4:	50                   	push   eax
c00212e5:	e8 f0 51 fe ff       	call   c00064da <f_unlink>
c00212ea:	83 c4 10             	add    esp,0x10
c00212ed:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00212f4:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00212fb:	85 c0                	test   eax,eax
c00212fd:	75 07                	jne    c0021306 <FAT::unlink(char const*)+0x6e>
c00212ff:	b8 00 00 00 00       	mov    eax,0x0
c0021304:	eb 05                	jmp    c002130b <FAT::unlink(char const*)+0x73>
c0021306:	b8 01 00 00 00       	mov    eax,0x1
c002130b:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021311:	c3                   	ret    

c0021312 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021312:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021318:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c002131f:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021326:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002132a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002132e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021336:	75 0a                	jne    c0021342 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021338:	b8 04 00 00 00       	mov    eax,0x4
c002133d:	e9 1c 01 00 00       	jmp    c002145e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021342:	83 ec 08             	sub    esp,0x8
c0021345:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002134c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021350:	50                   	push   eax
c0021351:	e8 de f4 fd ff       	call   c0000834 <strcpy>
c0021356:	83 c4 10             	add    esp,0x10
c0021359:	83 ec 08             	sub    esp,0x8
c002135c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021360:	50                   	push   eax
c0021361:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021368:	e8 3b fc ff ff       	call   c0020fa8 <FAT::fixFilepath(char*)>
c002136d:	83 c4 10             	add    esp,0x10
c0021370:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021378:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021380:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021385:	83 e0 01             	and    eax,0x1
c0021388:	74 08                	je     c0021392 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c002138a:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021392:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021397:	83 e0 02             	and    eax,0x2
c002139a:	74 08                	je     c00213a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c002139c:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00213a4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213a9:	83 e0 04             	and    eax,0x4
c00213ac:	74 08                	je     c00213b6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c00213ae:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00213b6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213bb:	83 e0 08             	and    eax,0x8
c00213be:	74 08                	je     c00213c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c00213c0:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00213c8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213cd:	83 e0 01             	and    eax,0x1
c00213d0:	74 08                	je     c00213da <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c00213d2:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00213da:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213df:	83 e0 02             	and    eax,0x2
c00213e2:	74 08                	je     c00213ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c00213e4:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00213ec:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213f1:	83 e0 04             	and    eax,0x4
c00213f4:	74 08                	je     c00213fe <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00213f6:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00213fe:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021403:	83 e0 08             	and    eax,0x8
c0021406:	74 08                	je     c0021410 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021408:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021410:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021417:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c002141e:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021426:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c002142e:	83 ec 04             	sub    esp,0x4
c0021431:	52                   	push   edx
c0021432:	50                   	push   eax
c0021433:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021437:	50                   	push   eax
c0021438:	e8 3f 57 fe ff       	call   c0006b7c <f_chmod>
c002143d:	83 c4 10             	add    esp,0x10
c0021440:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021447:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c002144e:	85 c0                	test   eax,eax
c0021450:	75 07                	jne    c0021459 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021452:	b8 00 00 00 00       	mov    eax,0x0
c0021457:	eb 05                	jmp    c002145e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021459:	b8 01 00 00 00       	mov    eax,0x1
c002145e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021464:	c3                   	ret    
c0021465:	90                   	nop

c0021466 <FAT::rename(char const*, char const*)>:
c0021466:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002146c:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021474:	74 0a                	je     c0021480 <FAT::rename(char const*, char const*)+0x1a>
c0021476:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c002147e:	75 0a                	jne    c002148a <FAT::rename(char const*, char const*)+0x24>
c0021480:	b8 04 00 00 00       	mov    eax,0x4
c0021485:	e9 98 00 00 00       	jmp    c0021522 <FAT::rename(char const*, char const*)+0xbc>
c002148a:	83 ec 08             	sub    esp,0x8
c002148d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021494:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002149b:	50                   	push   eax
c002149c:	e8 93 f3 fd ff       	call   c0000834 <strcpy>
c00214a1:	83 c4 10             	add    esp,0x10
c00214a4:	83 ec 08             	sub    esp,0x8
c00214a7:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00214ae:	50                   	push   eax
c00214af:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214b6:	e8 ed fa ff ff       	call   c0020fa8 <FAT::fixFilepath(char*)>
c00214bb:	83 c4 10             	add    esp,0x10
c00214be:	83 ec 08             	sub    esp,0x8
c00214c1:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00214c8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00214cc:	50                   	push   eax
c00214cd:	e8 62 f3 fd ff       	call   c0000834 <strcpy>
c00214d2:	83 c4 10             	add    esp,0x10
c00214d5:	83 ec 08             	sub    esp,0x8
c00214d8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00214dc:	50                   	push   eax
c00214dd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214e4:	e8 bf fa ff ff       	call   c0020fa8 <FAT::fixFilepath(char*)>
c00214e9:	83 c4 10             	add    esp,0x10
c00214ec:	83 ec 08             	sub    esp,0x8
c00214ef:	8d 44 24 14          	lea    eax,[esp+0x14]
c00214f3:	50                   	push   eax
c00214f4:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00214fb:	50                   	push   eax
c00214fc:	e8 88 53 fe ff       	call   c0006889 <f_rename>
c0021501:	83 c4 10             	add    esp,0x10
c0021504:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c002150b:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021512:	85 c0                	test   eax,eax
c0021514:	75 07                	jne    c002151d <FAT::rename(char const*, char const*)+0xb7>
c0021516:	b8 00 00 00 00       	mov    eax,0x0
c002151b:	eb 05                	jmp    c0021522 <FAT::rename(char const*, char const*)+0xbc>
c002151d:	b8 01 00 00 00       	mov    eax,0x1
c0021522:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021528:	c3                   	ret    
c0021529:	90                   	nop

c002152a <FAT::mkdir(char const*)>:
c002152a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021530:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021538:	75 07                	jne    c0021541 <FAT::mkdir(char const*)+0x17>
c002153a:	b8 04 00 00 00       	mov    eax,0x4
c002153f:	eb 5c                	jmp    c002159d <FAT::mkdir(char const*)+0x73>
c0021541:	83 ec 08             	sub    esp,0x8
c0021544:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002154b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002154f:	50                   	push   eax
c0021550:	e8 df f2 fd ff       	call   c0000834 <strcpy>
c0021555:	83 c4 10             	add    esp,0x10
c0021558:	83 ec 08             	sub    esp,0x8
c002155b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002155f:	50                   	push   eax
c0021560:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021567:	e8 3c fa ff ff       	call   c0020fa8 <FAT::fixFilepath(char*)>
c002156c:	83 c4 10             	add    esp,0x10
c002156f:	83 ec 0c             	sub    esp,0xc
c0021572:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021576:	50                   	push   eax
c0021577:	e8 e1 50 fe ff       	call   c000665d <f_mkdir>
c002157c:	83 c4 10             	add    esp,0x10
c002157f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021586:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002158d:	85 c0                	test   eax,eax
c002158f:	75 07                	jne    c0021598 <FAT::mkdir(char const*)+0x6e>
c0021591:	b8 00 00 00 00       	mov    eax,0x0
c0021596:	eb 05                	jmp    c002159d <FAT::mkdir(char const*)+0x73>
c0021598:	b8 01 00 00 00       	mov    eax,0x1
c002159d:	81 c4 1c 01 00 00    	add    esp,0x11c
c00215a3:	c3                   	ret    

c00215a4 <FAT::exists(char const*)>:
c00215a4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00215aa:	83 ec 08             	sub    esp,0x8
c00215ad:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00215b4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00215b8:	50                   	push   eax
c00215b9:	e8 76 f2 fd ff       	call   c0000834 <strcpy>
c00215be:	83 c4 10             	add    esp,0x10
c00215c1:	83 ec 08             	sub    esp,0x8
c00215c4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00215c8:	50                   	push   eax
c00215c9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00215d0:	e8 d3 f9 ff ff       	call   c0020fa8 <FAT::fixFilepath(char*)>
c00215d5:	83 c4 10             	add    esp,0x10
c00215d8:	83 ec 08             	sub    esp,0x8
c00215db:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c00215e2:	50                   	push   eax
c00215e3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00215e7:	50                   	push   eax
c00215e8:	e8 9b 4b fe ff       	call   c0006188 <f_stat>
c00215ed:	83 c4 10             	add    esp,0x10
c00215f0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00215f7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00215fe:	85 c0                	test   eax,eax
c0021600:	75 04                	jne    c0021606 <FAT::exists(char const*)+0x62>
c0021602:	b0 01                	mov    al,0x1
c0021604:	eb 02                	jmp    c0021608 <FAT::exists(char const*)+0x64>
c0021606:	b0 00                	mov    al,0x0
c0021608:	81 c4 2c 02 00 00    	add    esp,0x22c
c002160e:	c3                   	ret    
c002160f:	90                   	nop

c0021610 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021610:	b8 08 00 00 00       	mov    eax,0x8
c0021615:	c3                   	ret    

c0021616 <ISO9660::seek(void*, unsigned long long)>:
c0021616:	53                   	push   ebx
c0021617:	b8 04 00 00 00       	mov    eax,0x4
c002161c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021620:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021624:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021628:	85 d2                	test   edx,edx
c002162a:	74 17                	je     c0021643 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002162c:	89 c8                	mov    eax,ecx
c002162e:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021631:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021634:	b8 01 00 00 00       	mov    eax,0x1
c0021639:	73 08                	jae    c0021643 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002163b:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c002163e:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021641:	31 c0                	xor    eax,eax
c0021643:	5b                   	pop    ebx
c0021644:	c3                   	ret    
c0021645:	90                   	nop

c0021646 <ISO9660::tell(void*, unsigned long long*)>:
c0021646:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002164a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002164e:	85 d2                	test   edx,edx
c0021650:	74 12                	je     c0021664 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021652:	85 c0                	test   eax,eax
c0021654:	74 0e                	je     c0021664 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021656:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021659:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c002165c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002165f:	89 10                	mov    DWORD PTR [eax],edx
c0021661:	31 c0                	xor    eax,eax
c0021663:	c3                   	ret    
c0021664:	b8 04 00 00 00       	mov    eax,0x4
c0021669:	c3                   	ret    

c002166a <ISO9660::getName()>:
c002166a:	b8 68 ca 02 c0       	mov    eax,0xc002ca68
c002166f:	c3                   	ret    

c0021670 <ISO9660::stat(void*, unsigned long long*)>:
c0021670:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021674:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021678:	85 d2                	test   edx,edx
c002167a:	74 12                	je     c002168e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002167c:	85 c0                	test   eax,eax
c002167e:	74 0e                	je     c002168e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021680:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021683:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021686:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021689:	89 10                	mov    DWORD PTR [eax],edx
c002168b:	31 c0                	xor    eax,eax
c002168d:	c3                   	ret    
c002168e:	b8 04 00 00 00       	mov    eax,0x4
c0021693:	c3                   	ret    

c0021694 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021694:	b8 01 00 00 00       	mov    eax,0x1
c0021699:	c3                   	ret    

c002169a <ISO9660::unlink(char const*)>:
c002169a:	b8 01 00 00 00       	mov    eax,0x1
c002169f:	c3                   	ret    

c00216a0 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00216a0:	b8 01 00 00 00       	mov    eax,0x1
c00216a5:	c3                   	ret    

c00216a6 <ISO9660::rename(char const*, char const*)>:
c00216a6:	b8 01 00 00 00       	mov    eax,0x1
c00216ab:	c3                   	ret    

c00216ac <ISO9660::mkdir(char const*)>:
c00216ac:	b8 01 00 00 00       	mov    eax,0x1
c00216b1:	c3                   	ret    

c00216b2 <ISO9660::close(void*)>:
c00216b2:	83 ec 0c             	sub    esp,0xc
c00216b5:	b8 04 00 00 00       	mov    eax,0x4
c00216ba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216be:	85 d2                	test   edx,edx
c00216c0:	74 0e                	je     c00216d0 <ISO9660::close(void*)+0x1e>
c00216c2:	83 ec 0c             	sub    esp,0xc
c00216c5:	52                   	push   edx
c00216c6:	e8 85 e1 fe ff       	call   c000f850 <free>
c00216cb:	83 c4 10             	add    esp,0x10
c00216ce:	31 c0                	xor    eax,eax
c00216d0:	83 c4 0c             	add    esp,0xc
c00216d3:	c3                   	ret    

c00216d4 <ISO9660::closeDir(void*)>:
c00216d4:	83 ec 0c             	sub    esp,0xc
c00216d7:	b8 04 00 00 00       	mov    eax,0x4
c00216dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216e0:	85 d2                	test   edx,edx
c00216e2:	74 0e                	je     c00216f2 <ISO9660::closeDir(void*)+0x1e>
c00216e4:	83 ec 0c             	sub    esp,0xc
c00216e7:	52                   	push   edx
c00216e8:	e8 63 e1 fe ff       	call   c000f850 <free>
c00216ed:	83 c4 10             	add    esp,0x10
c00216f0:	31 c0                	xor    eax,eax
c00216f2:	83 c4 0c             	add    esp,0xc
c00216f5:	c3                   	ret    

c00216f6 <ISO9660::~ISO9660()>:
c00216f6:	83 ec 0c             	sub    esp,0xc
c00216f9:	ba cc ca 02 c0       	mov    edx,0xc002cacc
c00216fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021702:	89 10                	mov    DWORD PTR [eax],edx
c0021704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021708:	83 ec 0c             	sub    esp,0xc
c002170b:	50                   	push   eax
c002170c:	e8 33 1b ff ff       	call   c0013244 <Filesystem::~Filesystem()>
c0021711:	83 c4 10             	add    esp,0x10
c0021714:	90                   	nop
c0021715:	83 c4 0c             	add    esp,0xc
c0021718:	c3                   	ret    
c0021719:	90                   	nop

c002171a <ISO9660::~ISO9660()>:
c002171a:	83 ec 0c             	sub    esp,0xc
c002171d:	83 ec 0c             	sub    esp,0xc
c0021720:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021724:	e8 cd ff ff ff       	call   c00216f6 <ISO9660::~ISO9660()>
c0021729:	83 c4 10             	add    esp,0x10
c002172c:	83 ec 08             	sub    esp,0x8
c002172f:	6a 08                	push   0x8
c0021731:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021735:	e8 02 17 ff ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c002173a:	83 c4 10             	add    esp,0x10
c002173d:	83 c4 0c             	add    esp,0xc
c0021740:	c3                   	ret    

c0021741 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021741:	55                   	push   ebp
c0021742:	31 c9                	xor    ecx,ecx
c0021744:	57                   	push   edi
c0021745:	56                   	push   esi
c0021746:	53                   	push   ebx
c0021747:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c002174b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002174f:	89 eb                	mov    ebx,ebp
c0021751:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021755:	39 ce                	cmp    esi,ecx
c0021757:	7e 17                	jle    c0021770 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021759:	31 d2                	xor    edx,edx
c002175b:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c002175f:	7d 13                	jge    c0021774 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021761:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021765:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021768:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c002176b:	75 0d                	jne    c002177a <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c002176d:	42                   	inc    edx
c002176e:	eb eb                	jmp    c002175b <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021770:	31 c0                	xor    eax,eax
c0021772:	eb 0a                	jmp    c002177e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021774:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021778:	eb 04                	jmp    c002177e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002177a:	41                   	inc    ecx
c002177b:	43                   	inc    ebx
c002177c:	eb d7                	jmp    c0021755 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c002177e:	5b                   	pop    ebx
c002177f:	5e                   	pop    esi
c0021780:	5f                   	pop    edi
c0021781:	5d                   	pop    ebp
c0021782:	c3                   	ret    

c0021783 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021783:	56                   	push   esi
c0021784:	53                   	push   ebx
c0021785:	52                   	push   edx
c0021786:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002178a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002178e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021792:	39 0d e0 1c 03 c0    	cmp    DWORD PTR ds:0xc0031ce0,ecx
c0021798:	75 08                	jne    c00217a2 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c002179a:	38 05 34 db 02 c0    	cmp    BYTE PTR ds:0xc002db34,al
c00217a0:	74 2b                	je     c00217cd <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c00217a2:	83 ec 0c             	sub    esp,0xc
c00217a5:	a2 34 db 02 c0       	mov    ds:0xc002db34,al
c00217aa:	68 00 1d 03 c0       	push   0xc0031d00
c00217af:	0f be c0             	movsx  eax,al
c00217b2:	6a 01                	push   0x1
c00217b4:	89 0d e0 1c 03 c0    	mov    DWORD PTR ds:0xc0031ce0,ecx
c00217ba:	31 db                	xor    ebx,ebx
c00217bc:	53                   	push   ebx
c00217bd:	51                   	push   ecx
c00217be:	ff 34 85 bc ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1544]
c00217c5:	e8 62 4f ff ff       	call   c001672c <LogicalDisk::read(unsigned long long, int, void*)>
c00217ca:	83 c4 20             	add    esp,0x20
c00217cd:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c00217d5:	c7 44 24 14 00 1d 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031d00
c00217dd:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00217e1:	58                   	pop    eax
c00217e2:	5b                   	pop    ebx
c00217e3:	5e                   	pop    esi
c00217e4:	e9 5b ef fd ff       	jmp    c0000744 <memcpy>
c00217e9:	90                   	nop

c00217ea <ISO9660::tryMount(LogicalDisk*, int)>:
c00217ea:	81 ec 10 08 00 00    	sub    esp,0x810
c00217f0:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00217f7:	83 c0 41             	add    eax,0x41
c00217fa:	0f be c0             	movsx  eax,al
c00217fd:	50                   	push   eax
c00217fe:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021802:	50                   	push   eax
c0021803:	6a 10                	push   0x10
c0021805:	e8 79 ff ff ff       	call   c0021783 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002180a:	83 c4 10             	add    esp,0x10
c002180d:	31 c0                	xor    eax,eax
c002180f:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021814:	75 1d                	jne    c0021833 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021816:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c002181b:	75 16                	jne    c0021833 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002181d:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021822:	75 0f                	jne    c0021833 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021824:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021829:	75 08                	jne    c0021833 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002182b:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021830:	0f 94 c0             	sete   al
c0021833:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021839:	c3                   	ret    

c002183a <ISO9660::read(void*, unsigned long, void*, int*)>:
c002183a:	55                   	push   ebp
c002183b:	57                   	push   edi
c002183c:	56                   	push   esi
c002183d:	53                   	push   ebx
c002183e:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021844:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c002184b:	85 ed                	test   ebp,ebp
c002184d:	0f 84 d6 01 00 00    	je     c0021a29 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021853:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c002185b:	0f 84 c8 01 00 00    	je     c0021a29 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021861:	b8 01 00 00 00       	mov    eax,0x1
c0021866:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c002186a:	0f 85 be 01 00 00    	jne    c0021a2e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021870:	31 d2                	xor    edx,edx
c0021872:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021879:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002187c:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c002187f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021883:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0021886:	89 04 24             	mov    DWORD PTR [esp],eax
c0021889:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002188d:	01 f0                	add    eax,esi
c002188f:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0021892:	11 fa                	adc    edx,edi
c0021894:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021898:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c002189c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00218a0:	19 d1                	sbb    ecx,edx
c00218a2:	72 0a                	jb     c00218ae <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c00218a4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00218a8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00218ac:	eb 13                	jmp    c00218c1 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00218ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00218b6:	29 f0                	sub    eax,esi
c00218b8:	19 fa                	sbb    edx,edi
c00218ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00218bd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00218c1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00218c4:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00218c7:	0f a4 c2 0b          	shld   edx,eax,0xb
c00218cb:	51                   	push   ecx
c00218cc:	c1 e0 0b             	shl    eax,0xb
c00218cf:	01 c6                	add    esi,eax
c00218d1:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00218d5:	11 d7                	adc    edi,edx
c00218d7:	50                   	push   eax
c00218d8:	89 fa                	mov    edx,edi
c00218da:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00218de:	89 f0                	mov    eax,esi
c00218e0:	53                   	push   ebx
c00218e1:	0f ac d0 0b          	shrd   eax,edx,0xb
c00218e5:	50                   	push   eax
c00218e6:	e8 98 fe ff ff       	call   c0021783 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00218eb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00218ef:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00218f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00218f6:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00218fc:	83 c4 10             	add    esp,0x10
c00218ff:	b8 00 08 00 00       	mov    eax,0x800
c0021904:	29 d0                	sub    eax,edx
c0021906:	39 c1                	cmp    ecx,eax
c0021908:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c002190c:	83 d9 00             	sbb    ecx,0x0
c002190f:	7d 1c                	jge    c002192d <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0021911:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021916:	75 12                	jne    c002192a <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c0021918:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002191f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021925:	e9 fb 00 00 00       	jmp    c0021a25 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c002192a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002192d:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0021930:	31 d2                	xor    edx,edx
c0021932:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021936:	39 c2                	cmp    edx,eax
c0021938:	7d 14                	jge    c002194e <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c002193a:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021941:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021945:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021948:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c002194b:	42                   	inc    edx
c002194c:	eb e8                	jmp    c0021936 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c002194e:	89 c3                	mov    ebx,eax
c0021950:	85 c0                	test   eax,eax
c0021952:	79 02                	jns    c0021956 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0021954:	31 db                	xor    ebx,ebx
c0021956:	99                   	cdq    
c0021957:	01 c3                	add    ebx,eax
c0021959:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021960:	01 c6                	add    esi,eax
c0021962:	11 d7                	adc    edi,edx
c0021964:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021968:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002196c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c002196f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021973:	29 c6                	sub    esi,eax
c0021975:	19 d7                	sbb    edi,edx
c0021977:	89 34 24             	mov    DWORD PTR [esp],esi
c002197a:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c002197e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021983:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021986:	b8 00 00 00 00       	mov    eax,0x0
c002198b:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c002198f:	7d 3e                	jge    c00219cf <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021991:	52                   	push   edx
c0021992:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021996:	50                   	push   eax
c0021997:	53                   	push   ebx
c0021998:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002199c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00219a0:	0f ac d0 0b          	shrd   eax,edx,0xb
c00219a4:	50                   	push   eax
c00219a5:	e8 d9 fd ff ff       	call   c0021783 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219aa:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00219b2:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00219b7:	81 c3 00 08 00 00    	add    ebx,0x800
c00219bd:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00219c5:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00219ca:	83 c4 10             	add    esp,0x10
c00219cd:	eb af                	jmp    c002197e <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c00219cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00219d3:	0b 04 24             	or     eax,DWORD PTR [esp]
c00219d6:	74 32                	je     c0021a0a <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c00219d8:	50                   	push   eax
c00219d9:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00219dd:	50                   	push   eax
c00219de:	8d 44 24 28          	lea    eax,[esp+0x28]
c00219e2:	50                   	push   eax
c00219e3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00219e7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00219eb:	0f ac fe 0b          	shrd   esi,edi,0xb
c00219ef:	56                   	push   esi
c00219f0:	e8 8e fd ff ff       	call   c0021783 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219f5:	83 c4 0c             	add    esp,0xc
c00219f8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00219fc:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021a00:	50                   	push   eax
c0021a01:	53                   	push   ebx
c0021a02:	e8 3d ed fd ff       	call   c0000744 <memcpy>
c0021a07:	83 c4 10             	add    esp,0x10
c0021a0a:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021a11:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021a15:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021a19:	89 38                	mov    DWORD PTR [eax],edi
c0021a1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a1f:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021a22:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021a25:	31 c0                	xor    eax,eax
c0021a27:	eb 05                	jmp    c0021a2e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021a29:	b8 04 00 00 00       	mov    eax,0x4
c0021a2e:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021a34:	5b                   	pop    ebx
c0021a35:	5e                   	pop    esi
c0021a36:	5f                   	pop    edi
c0021a37:	5d                   	pop    ebp
c0021a38:	c3                   	ret    
c0021a39:	90                   	nop

c0021a3a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021a3a:	55                   	push   ebp
c0021a3b:	57                   	push   edi
c0021a3c:	56                   	push   esi
c0021a3d:	53                   	push   ebx
c0021a3e:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021a44:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021a4b:	85 f6                	test   esi,esi
c0021a4d:	0f 84 64 02 00 00    	je     c0021cb7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a53:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021a5b:	0f 84 56 02 00 00    	je     c0021cb7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a61:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021a64:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021a67:	75 0a                	jne    c0021a73 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021a69:	b8 07 00 00 00       	mov    eax,0x7
c0021a6e:	e9 49 02 00 00       	jmp    c0021cbc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021a73:	50                   	push   eax
c0021a74:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021a78:	50                   	push   eax
c0021a79:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021a80:	53                   	push   ebx
c0021a81:	8b 06                	mov    eax,DWORD PTR [esi]
c0021a83:	c1 e0 0b             	shl    eax,0xb
c0021a86:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021a89:	c1 e8 0b             	shr    eax,0xb
c0021a8c:	50                   	push   eax
c0021a8d:	e8 f1 fc ff ff       	call   c0021783 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a92:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021a95:	83 c4 10             	add    esp,0x10
c0021a98:	89 c1                	mov    ecx,eax
c0021a9a:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021a9d:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021aa3:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021aa6:	84 db                	test   bl,bl
c0021aa8:	0f 85 90 00 00 00    	jne    c0021b3e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021aae:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021ab4:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021aba:	29 c7                	sub    edi,eax
c0021abc:	89 fb                	mov    ebx,edi
c0021abe:	c1 fb 1f             	sar    ebx,0x1f
c0021ac1:	01 f8                	add    eax,edi
c0021ac3:	11 da                	adc    edx,ebx
c0021ac5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021ac9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021acd:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021ad0:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021ad3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021ad6:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021ad9:	89 04 24             	mov    DWORD PTR [esp],eax
c0021adc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021ae0:	89 d8                	mov    eax,ebx
c0021ae2:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021ae5:	ba 00 00 00 00       	mov    edx,0x0
c0021aea:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021aee:	b8 00 00 00 00       	mov    eax,0x0
c0021af3:	73 0b                	jae    c0021b00 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021af5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021af8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021afc:	29 f8                	sub    eax,edi
c0021afe:	19 da                	sbb    edx,ebx
c0021b00:	89 d3                	mov    ebx,edx
c0021b02:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021b05:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021b08:	09 c3                	or     ebx,eax
c0021b0a:	0f 84 59 ff ff ff    	je     c0021a69 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021b10:	55                   	push   ebp
c0021b11:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021b15:	50                   	push   eax
c0021b16:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021b1d:	53                   	push   ebx
c0021b1e:	8b 06                	mov    eax,DWORD PTR [esi]
c0021b20:	c1 e0 0b             	shl    eax,0xb
c0021b23:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021b27:	c1 e8 0b             	shr    eax,0xb
c0021b2a:	50                   	push   eax
c0021b2b:	e8 53 fc ff ff       	call   c0021783 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b30:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021b33:	83 c4 10             	add    esp,0x10
c0021b36:	25 ff 07 00 00       	and    eax,0x7ff
c0021b3b:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021b3e:	57                   	push   edi
c0021b3f:	6a 28                	push   0x28
c0021b41:	6a 00                	push   0x0
c0021b43:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021b47:	50                   	push   eax
c0021b48:	e8 2b ec fd ff       	call   c0000778 <memset>
c0021b4d:	31 d2                	xor    edx,edx
c0021b4f:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021b52:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021b58:	89 f8                	mov    eax,edi
c0021b5a:	83 c0 21             	add    eax,0x21
c0021b5d:	83 d2 00             	adc    edx,0x0
c0021b60:	89 c7                	mov    edi,eax
c0021b62:	89 d5                	mov    ebp,edx
c0021b64:	83 c4 10             	add    esp,0x10
c0021b67:	31 c9                	xor    ecx,ecx
c0021b69:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021b70:	83 f9 28             	cmp    ecx,0x28
c0021b73:	88 04 24             	mov    BYTE PTR [esp],al
c0021b76:	0f 94 c2             	sete   dl
c0021b79:	88 d0                	mov    al,dl
c0021b7b:	ba ff 07 00 00       	mov    edx,0x7ff
c0021b80:	39 fa                	cmp    edx,edi
c0021b82:	ba 00 00 00 00       	mov    edx,0x0
c0021b87:	19 ea                	sbb    edx,ebp
c0021b89:	0f 92 c2             	setb   dl
c0021b8c:	09 c2                	or     edx,eax
c0021b8e:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021b92:	0f 94 c0             	sete   al
c0021b95:	08 d0                	or     al,dl
c0021b97:	75 16                	jne    c0021baf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021b99:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021b9d:	74 10                	je     c0021baf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021b9f:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021ba2:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021ba6:	41                   	inc    ecx
c0021ba7:	83 c7 01             	add    edi,0x1
c0021baa:	83 d5 00             	adc    ebp,0x0
c0021bad:	eb ba                	jmp    c0021b69 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021baf:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021bb6:	83 ec 0c             	sub    esp,0xc
c0021bb9:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021bbd:	57                   	push   edi
c0021bbe:	e8 d1 eb fd ff       	call   c0000794 <strlen>
c0021bc3:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021bcb:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021bcf:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021bd6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021bd9:	5a                   	pop    edx
c0021bda:	25 ff 07 00 00       	and    eax,0x7ff
c0021bdf:	01 c8                	add    eax,ecx
c0021be1:	59                   	pop    ecx
c0021be2:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021be8:	83 e0 02             	and    eax,0x2
c0021beb:	3c 01                	cmp    al,0x1
c0021bed:	19 c0                	sbb    eax,eax
c0021bef:	83 c0 02             	add    eax,0x2
c0021bf2:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021bf6:	57                   	push   edi
c0021bf7:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021bfb:	50                   	push   eax
c0021bfc:	e8 33 ec fd ff       	call   c0000834 <strcpy>
c0021c01:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021c05:	83 c4 10             	add    esp,0x10
c0021c08:	84 c0                	test   al,al
c0021c0a:	75 21                	jne    c0021c2d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021c0c:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021c14:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c1c:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c24:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021c2b:	eb 28                	jmp    c0021c55 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021c2d:	fe c8                	dec    al
c0021c2f:	75 24                	jne    c0021c55 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021c31:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021c39:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c41:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c49:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021c50:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021c55:	0f b6 fb             	movzx  edi,bl
c0021c58:	31 db                	xor    ebx,ebx
c0021c5a:	50                   	push   eax
c0021c5b:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021c62:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021c66:	50                   	push   eax
c0021c67:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021c6e:	e8 d1 ea fd ff       	call   c0000744 <memcpy>
c0021c73:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021c7a:	89 f9                	mov    ecx,edi
c0021c7c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021c82:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021c85:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021c88:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021c8b:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021c8e:	83 c4 10             	add    esp,0x10
c0021c91:	39 c7                	cmp    edi,eax
c0021c93:	89 df                	mov    edi,ebx
c0021c95:	19 d7                	sbb    edi,edx
c0021c97:	72 10                	jb     c0021ca9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021c99:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021ca0:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021ca7:	eb 0a                	jmp    c0021cb3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021ca9:	29 c8                	sub    eax,ecx
c0021cab:	19 da                	sbb    edx,ebx
c0021cad:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021cb0:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021cb3:	31 c0                	xor    eax,eax
c0021cb5:	eb 05                	jmp    c0021cbc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021cb7:	b8 04 00 00 00       	mov    eax,0x4
c0021cbc:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021cc2:	5b                   	pop    ebx
c0021cc3:	5e                   	pop    esi
c0021cc4:	5f                   	pop    edi
c0021cc5:	5d                   	pop    ebp
c0021cc6:	c3                   	ret    

c0021cc7 <readRoot(unsigned int*, unsigned int*, char)>:
c0021cc7:	81 ec 40 08 00 00    	sub    esp,0x840
c0021ccd:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021cd5:	50                   	push   eax
c0021cd6:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021cda:	50                   	push   eax
c0021cdb:	6a 10                	push   0x10
c0021cdd:	e8 a1 fa ff ff       	call   c0021783 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ce2:	83 c4 0c             	add    esp,0xc
c0021ce5:	6a 22                	push   0x22
c0021ce7:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021cee:	50                   	push   eax
c0021cef:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021cf3:	50                   	push   eax
c0021cf4:	e8 4b ea fd ff       	call   c0000744 <memcpy>
c0021cf9:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021d00:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021d04:	89 10                	mov    DWORD PTR [eax],edx
c0021d06:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021d0d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021d11:	89 10                	mov    DWORD PTR [eax],edx
c0021d13:	b0 01                	mov    al,0x1
c0021d15:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021d1b:	c3                   	ret    

c0021d1c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021d1c:	55                   	push   ebp
c0021d1d:	57                   	push   edi
c0021d1e:	56                   	push   esi
c0021d1f:	53                   	push   ebx
c0021d20:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021d26:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021d2d:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021d34:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021d38:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021d3c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021d40:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021d44:	75 03                	jne    c0021d49 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d46:	83 c3 02             	add    ebx,0x2
c0021d49:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021d4c:	75 03                	jne    c0021d51 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021d4e:	43                   	inc    ebx
c0021d4f:	eb f8                	jmp    c0021d49 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d51:	51                   	push   ecx
c0021d52:	68 00 01 00 00       	push   0x100
c0021d57:	6a 00                	push   0x0
c0021d59:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021d5d:	50                   	push   eax
c0021d5e:	e8 15 ea fd ff       	call   c0000778 <memset>
c0021d63:	83 c4 10             	add    esp,0x10
c0021d66:	31 d2                	xor    edx,edx
c0021d68:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021d6b:	84 c0                	test   al,al
c0021d6d:	74 21                	je     c0021d90 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021d6f:	3c 2f                	cmp    al,0x2f
c0021d71:	75 0b                	jne    c0021d7e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021d73:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021d77:	bd 01 00 00 00       	mov    ebp,0x1
c0021d7c:	eb 14                	jmp    c0021d92 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021d7e:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021d81:	80 f9 19             	cmp    cl,0x19
c0021d84:	77 03                	ja     c0021d89 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021d86:	83 e8 20             	sub    eax,0x20
c0021d89:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021d8d:	42                   	inc    edx
c0021d8e:	eb d8                	jmp    c0021d68 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021d90:	31 ed                	xor    ebp,ebp
c0021d92:	83 ec 0c             	sub    esp,0xc
c0021d95:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021d9c:	e8 9f da fe ff       	call   c000f840 <malloc>
c0021da1:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021da8:	89 c6                	mov    esi,eax
c0021daa:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021db0:	c1 ef 0b             	shr    edi,0xb
c0021db3:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021dba:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021dbe:	83 c4 10             	add    esp,0x10
c0021dc1:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021dc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021dca:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021dd1:	74 28                	je     c0021dfb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021dd3:	52                   	push   edx
c0021dd4:	57                   	push   edi
c0021dd5:	50                   	push   eax
c0021dd6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021dda:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021de1:	e8 9d f9 ff ff       	call   c0021783 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021de6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021dea:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021df1:	05 00 08 00 00       	add    eax,0x800
c0021df6:	83 c4 10             	add    esp,0x10
c0021df9:	eb cb                	jmp    c0021dc6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021dfb:	83 ec 0c             	sub    esp,0xc
c0021dfe:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021e02:	57                   	push   edi
c0021e03:	e8 8c e9 fd ff       	call   c0000794 <strlen>
c0021e08:	50                   	push   eax
c0021e09:	57                   	push   edi
c0021e0a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021e11:	56                   	push   esi
c0021e12:	e8 2a f9 ff ff       	call   c0021741 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021e17:	83 c4 20             	add    esp,0x20
c0021e1a:	85 c0                	test   eax,eax
c0021e1c:	75 13                	jne    c0021e31 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021e1e:	83 ec 0c             	sub    esp,0xc
c0021e21:	56                   	push   esi
c0021e22:	e8 29 da fe ff       	call   c000f850 <free>
c0021e27:	83 c4 10             	add    esp,0x10
c0021e2a:	31 c0                	xor    eax,eax
c0021e2c:	e9 b3 00 00 00       	jmp    c0021ee4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021e31:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021e35:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021e39:	c1 e7 08             	shl    edi,0x8
c0021e3c:	c1 e2 10             	shl    edx,0x10
c0021e3f:	09 d7                	or     edi,edx
c0021e41:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021e45:	09 d7                	or     edi,edx
c0021e47:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021e4b:	c1 e2 18             	shl    edx,0x18
c0021e4e:	09 d7                	or     edi,edx
c0021e50:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021e54:	89 d1                	mov    ecx,edx
c0021e56:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021e5a:	c1 e1 08             	shl    ecx,0x8
c0021e5d:	c1 e2 10             	shl    edx,0x10
c0021e60:	09 ca                	or     edx,ecx
c0021e62:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021e66:	09 ca                	or     edx,ecx
c0021e68:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021e6c:	c1 e1 18             	shl    ecx,0x18
c0021e6f:	09 ca                	or     edx,ecx
c0021e71:	89 e9                	mov    ecx,ebp
c0021e73:	84 c9                	test   cl,cl
c0021e75:	74 3c                	je     c0021eb3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021e77:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021e7b:	83 ec 0c             	sub    esp,0xc
c0021e7e:	56                   	push   esi
c0021e7f:	e8 cc d9 fe ff       	call   c000f850 <free>
c0021e84:	83 c4 0c             	add    esp,0xc
c0021e87:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e8e:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021e93:	50                   	push   eax
c0021e94:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e9b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021ea2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021ea6:	52                   	push   edx
c0021ea7:	57                   	push   edi
c0021ea8:	53                   	push   ebx
c0021ea9:	e8 6e fe ff ff       	call   c0021d1c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021eae:	83 c4 20             	add    esp,0x20
c0021eb1:	eb 31                	jmp    c0021ee4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021eb3:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021eb6:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021ebd:	d0 e8                	shr    al,1
c0021ebf:	89 3b                	mov    DWORD PTR [ebx],edi
c0021ec1:	83 e0 01             	and    eax,0x1
c0021ec4:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021ecb:	83 ec 0c             	sub    esp,0xc
c0021ece:	89 13                	mov    DWORD PTR [ebx],edx
c0021ed0:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021ed7:	89 03                	mov    DWORD PTR [ebx],eax
c0021ed9:	56                   	push   esi
c0021eda:	e8 71 d9 fe ff       	call   c000f850 <free>
c0021edf:	83 c4 10             	add    esp,0x10
c0021ee2:	b0 01                	mov    al,0x1
c0021ee4:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021eea:	5b                   	pop    ebx
c0021eeb:	5e                   	pop    esi
c0021eec:	5f                   	pop    edi
c0021eed:	5d                   	pop    ebp
c0021eee:	c3                   	ret    

c0021eef <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021eef:	55                   	push   ebp
c0021ef0:	57                   	push   edi
c0021ef1:	56                   	push   esi
c0021ef2:	53                   	push   ebx
c0021ef3:	83 ec 20             	sub    esp,0x20
c0021ef6:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021efa:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021efe:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021f02:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f0a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021f12:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021f17:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021f1d:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021f23:	57                   	push   edi
c0021f24:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f28:	50                   	push   eax
c0021f29:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f2d:	50                   	push   eax
c0021f2e:	e8 94 fd ff ff       	call   c0021cc7 <readRoot(unsigned int*, unsigned int*, char)>
c0021f33:	5a                   	pop    edx
c0021f34:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021f38:	e8 57 e8 fd ff       	call   c0000794 <strlen>
c0021f3d:	83 c4 10             	add    esp,0x10
c0021f40:	83 f8 03             	cmp    eax,0x3
c0021f43:	77 17                	ja     c0021f5c <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021f45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f49:	89 03                	mov    DWORD PTR [ebx],eax
c0021f4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f4f:	89 06                	mov    DWORD PTR [esi],eax
c0021f51:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021f58:	b0 01                	mov    al,0x1
c0021f5a:	eb 19                	jmp    c0021f75 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021f5c:	50                   	push   eax
c0021f5d:	55                   	push   ebp
c0021f5e:	57                   	push   edi
c0021f5f:	56                   	push   esi
c0021f60:	53                   	push   ebx
c0021f61:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f65:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f69:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f6d:	e8 aa fd ff ff       	call   c0021d1c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021f72:	83 c4 20             	add    esp,0x20
c0021f75:	83 c4 1c             	add    esp,0x1c
c0021f78:	5b                   	pop    ebx
c0021f79:	5e                   	pop    esi
c0021f7a:	5f                   	pop    edi
c0021f7b:	5d                   	pop    ebp
c0021f7c:	c3                   	ret    
c0021f7d:	90                   	nop

c0021f7e <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021f7e:	57                   	push   edi
c0021f7f:	56                   	push   esi
c0021f80:	53                   	push   ebx
c0021f81:	83 ec 10             	sub    esp,0x10
c0021f84:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021f88:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021f8c:	85 ff                	test   edi,edi
c0021f8e:	0f 84 9d 00 00 00    	je     c0022031 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021f94:	85 f6                	test   esi,esi
c0021f96:	0f 84 95 00 00 00    	je     c0022031 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021f9c:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021fa1:	74 17                	je     c0021fba <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021fa3:	83 ec 0c             	sub    esp,0xc
c0021fa6:	68 83 ca 02 c0       	push   0xc002ca83
c0021fab:	e8 6c 0f ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0021fb0:	83 c4 10             	add    esp,0x10
c0021fb3:	b8 03 00 00 00       	mov    eax,0x3
c0021fb8:	eb 7c                	jmp    c0022036 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021fba:	83 ec 0c             	sub    esp,0xc
c0021fbd:	6a 1c                	push   0x1c
c0021fbf:	e8 7c d8 fe ff       	call   c000f840 <malloc>
c0021fc4:	89 07                	mov    DWORD PTR [edi],eax
c0021fc6:	89 c3                	mov    ebx,eax
c0021fc8:	58                   	pop    eax
c0021fc9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021fcd:	50                   	push   eax
c0021fce:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021fd1:	50                   	push   eax
c0021fd2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021fd6:	50                   	push   eax
c0021fd7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021fdb:	50                   	push   eax
c0021fdc:	56                   	push   esi
c0021fdd:	e8 0d ff ff ff       	call   c0021eef <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021fe2:	83 c4 20             	add    esp,0x20
c0021fe5:	84 c0                	test   al,al
c0021fe7:	74 07                	je     c0021ff0 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0021fe9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021fee:	74 0b                	je     c0021ffb <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0021ff0:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021ff4:	b8 01 00 00 00       	mov    eax,0x1
c0021ff9:	eb 3b                	jmp    c0022036 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021ffb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fff:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022003:	89 03                	mov    DWORD PTR [ebx],eax
c0022005:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002200c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022010:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022017:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002201e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022021:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022028:	8a 06                	mov    al,BYTE PTR [esi]
c002202a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002202d:	31 c0                	xor    eax,eax
c002202f:	eb 05                	jmp    c0022036 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022031:	b8 04 00 00 00       	mov    eax,0x4
c0022036:	83 c4 10             	add    esp,0x10
c0022039:	5b                   	pop    ebx
c002203a:	5e                   	pop    esi
c002203b:	5f                   	pop    edi
c002203c:	c3                   	ret    
c002203d:	90                   	nop

c002203e <ISO9660::exists(char const*)>:
c002203e:	83 ec 28             	sub    esp,0x28
c0022041:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022045:	8d 54 24 18          	lea    edx,[esp+0x18]
c0022049:	52                   	push   edx
c002204a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c002204d:	52                   	push   edx
c002204e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022052:	52                   	push   edx
c0022053:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022057:	52                   	push   edx
c0022058:	50                   	push   eax
c0022059:	e8 91 fe ff ff       	call   c0021eef <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002205e:	83 c4 3c             	add    esp,0x3c
c0022061:	c3                   	ret    

c0022062 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022062:	56                   	push   esi
c0022063:	53                   	push   ebx
c0022064:	83 ec 14             	sub    esp,0x14
c0022067:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002206b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002206f:	85 db                	test   ebx,ebx
c0022071:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022075:	0f 94 c2             	sete   dl
c0022078:	85 f6                	test   esi,esi
c002207a:	0f 94 c0             	sete   al
c002207d:	08 c2                	or     dl,al
c002207f:	75 68                	jne    c00220e9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022081:	85 c9                	test   ecx,ecx
c0022083:	74 64                	je     c00220e9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022085:	83 ec 0c             	sub    esp,0xc
c0022088:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002208b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002208f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022095:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002209c:	50                   	push   eax
c002209d:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00220a0:	50                   	push   eax
c00220a1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220a5:	50                   	push   eax
c00220a6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220aa:	50                   	push   eax
c00220ab:	51                   	push   ecx
c00220ac:	e8 3e fe ff ff       	call   c0021eef <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00220b1:	83 c4 20             	add    esp,0x20
c00220b4:	ba 01 00 00 00       	mov    edx,0x1
c00220b9:	84 c0                	test   al,al
c00220bb:	74 31                	je     c00220ee <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00220c1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220c8:	89 03                	mov    DWORD PTR [ebx],eax
c00220ca:	ba 00 00 00 00       	mov    edx,0x0
c00220cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00220d3:	85 c0                	test   eax,eax
c00220d5:	0f 95 06             	setne  BYTE PTR [esi]
c00220d8:	74 14                	je     c00220ee <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220da:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00220e0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220e7:	eb 05                	jmp    c00220ee <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220e9:	ba 04 00 00 00       	mov    edx,0x4
c00220ee:	83 c4 14             	add    esp,0x14
c00220f1:	89 d0                	mov    eax,edx
c00220f3:	5b                   	pop    ebx
c00220f4:	5e                   	pop    esi
c00220f5:	c3                   	ret    

c00220f6 <ISO9660::openDir(char const*, void**)>:
c00220f6:	57                   	push   edi
c00220f7:	56                   	push   esi
c00220f8:	53                   	push   ebx
c00220f9:	83 ec 10             	sub    esp,0x10
c00220fc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022100:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022104:	85 ff                	test   edi,edi
c0022106:	0f 84 95 00 00 00    	je     c00221a1 <ISO9660::openDir(char const*, void**)+0xab>
c002210c:	85 f6                	test   esi,esi
c002210e:	0f 84 8d 00 00 00    	je     c00221a1 <ISO9660::openDir(char const*, void**)+0xab>
c0022114:	83 ec 0c             	sub    esp,0xc
c0022117:	6a 1c                	push   0x1c
c0022119:	e8 22 d7 fe ff       	call   c000f840 <malloc>
c002211e:	89 07                	mov    DWORD PTR [edi],eax
c0022120:	89 c3                	mov    ebx,eax
c0022122:	59                   	pop    ecx
c0022123:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022127:	50                   	push   eax
c0022128:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002212b:	50                   	push   eax
c002212c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022130:	50                   	push   eax
c0022131:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022135:	50                   	push   eax
c0022136:	56                   	push   esi
c0022137:	e8 b3 fd ff ff       	call   c0021eef <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002213c:	83 c4 20             	add    esp,0x20
c002213f:	84 c0                	test   al,al
c0022141:	74 07                	je     c002214a <ISO9660::openDir(char const*, void**)+0x54>
c0022143:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022148:	75 21                	jne    c002216b <ISO9660::openDir(char const*, void**)+0x75>
c002214a:	0f b6 c0             	movzx  eax,al
c002214d:	52                   	push   edx
c002214e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022152:	50                   	push   eax
c0022153:	68 a9 ca 02 c0       	push   0xc002caa9
c0022158:	e8 bf 0d ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c002215d:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022161:	83 c4 10             	add    esp,0x10
c0022164:	b8 01 00 00 00       	mov    eax,0x1
c0022169:	eb 3b                	jmp    c00221a6 <ISO9660::openDir(char const*, void**)+0xb0>
c002216b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002216f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022173:	89 03                	mov    DWORD PTR [ebx],eax
c0022175:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002217c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022180:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022187:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002218e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022191:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022198:	8a 06                	mov    al,BYTE PTR [esi]
c002219a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002219d:	31 c0                	xor    eax,eax
c002219f:	eb 05                	jmp    c00221a6 <ISO9660::openDir(char const*, void**)+0xb0>
c00221a1:	b8 04 00 00 00       	mov    eax,0x4
c00221a6:	83 c4 10             	add    esp,0x10
c00221a9:	5b                   	pop    ebx
c00221aa:	5e                   	pop    esi
c00221ab:	5f                   	pop    edi
c00221ac:	c3                   	ret    
c00221ad:	90                   	nop

c00221ae <ISO9660::ISO9660()>:
c00221ae:	83 ec 0c             	sub    esp,0xc
c00221b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221b5:	83 ec 0c             	sub    esp,0xc
c00221b8:	50                   	push   eax
c00221b9:	e8 62 10 ff ff       	call   c0013220 <Filesystem::Filesystem()>
c00221be:	83 c4 10             	add    esp,0x10
c00221c1:	ba cc ca 02 c0       	mov    edx,0xc002cacc
c00221c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221ca:	89 10                	mov    DWORD PTR [eax],edx
c00221cc:	90                   	nop
c00221cd:	83 c4 0c             	add    esp,0xc
c00221d0:	c3                   	ret    
c00221d1:	90                   	nop

c00221d2 <SoundChannel::~SoundChannel()>:
c00221d2:	83 ec 0c             	sub    esp,0xc
c00221d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221d9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00221dc:	83 ec 0c             	sub    esp,0xc
c00221df:	50                   	push   eax
c00221e0:	e8 6b d6 fe ff       	call   c000f850 <free>
c00221e5:	83 c4 10             	add    esp,0x10
c00221e8:	90                   	nop
c00221e9:	83 c4 0c             	add    esp,0xc
c00221ec:	c3                   	ret    
c00221ed:	90                   	nop

c00221ee <SoundChannel::setSpeed(float)>:
c00221ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00221f6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00221f9:	c3                   	ret    

c00221fa <SoundChannel::getSpeed()>:
c00221fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221fe:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0022201:	c3                   	ret    

c0022202 <SoundChannel::setVolume(int)>:
c0022202:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022206:	83 f8 64             	cmp    eax,0x64
c0022209:	7e 05                	jle    c0022210 <SoundChannel::setVolume(int)+0xe>
c002220b:	b8 64 00 00 00       	mov    eax,0x64
c0022210:	85 c0                	test   eax,eax
c0022212:	79 02                	jns    c0022216 <SoundChannel::setVolume(int)+0x14>
c0022214:	31 c0                	xor    eax,eax
c0022216:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002221a:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c002221d:	c3                   	ret    

c002221e <SoundChannel::getVolume()>:
c002221e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022222:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0022225:	c3                   	ret    

c0022226 <SoundChannel::pause()>:
c0022226:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002222a:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c002222e:	c3                   	ret    
c002222f:	90                   	nop

c0022230 <SoundChannel::SoundChannel(int, int, int, int)>:
c0022230:	83 ec 1c             	sub    esp,0x1c
c0022233:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022237:	e8 ea ff ff ff       	call   c0022226 <SoundChannel::pause()>
c002223c:	83 c4 04             	add    esp,0x4
c002223f:	6a 50                	push   0x50
c0022241:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022245:	e8 b8 ff ff ff       	call   c0022202 <SoundChannel::setVolume(int)>
c002224a:	83 c4 08             	add    esp,0x8
c002224d:	a1 44 cb 02 c0       	mov    eax,ds:0xc002cb44
c0022252:	50                   	push   eax
c0022253:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022257:	e8 92 ff ff ff       	call   c00221ee <SoundChannel::setSpeed(float)>
c002225c:	83 c4 08             	add    esp,0x8
c002225f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022263:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022267:	89 10                	mov    DWORD PTR [eax],edx
c0022269:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002226d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022271:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022274:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022278:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002227c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002227f:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022284:	75 23                	jne    c00222a9 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0022286:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002228a:	8b 10                	mov    edx,DWORD PTR [eax]
c002228c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022290:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022293:	0f af c2             	imul   eax,edx
c0022296:	85 c0                	test   eax,eax
c0022298:	79 03                	jns    c002229d <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c002229a:	83 c0 03             	add    eax,0x3
c002229d:	c1 f8 02             	sar    eax,0x2
c00222a0:	05 a0 0f 00 00       	add    eax,0xfa0
c00222a5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00222a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222ad:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00222b1:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00222b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222b8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00222bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222c3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00222ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222ce:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00222d1:	c1 e0 02             	shl    eax,0x2
c00222d4:	83 ec 0c             	sub    esp,0xc
c00222d7:	50                   	push   eax
c00222d8:	e8 63 d5 fe ff       	call   c000f840 <malloc>
c00222dd:	83 c4 10             	add    esp,0x10
c00222e0:	89 c2                	mov    edx,eax
c00222e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222e6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00222e9:	83 ec 04             	sub    esp,0x4
c00222ec:	8d 44 24 08          	lea    eax,[esp+0x8]
c00222f0:	50                   	push   eax
c00222f1:	6a 01                	push   0x1
c00222f3:	6a 04                	push   0x4
c00222f5:	e8 a5 68 fe ff       	call   c0008b9f <src_new>
c00222fa:	83 c4 10             	add    esp,0x10
c00222fd:	89 c2                	mov    edx,eax
c00222ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022303:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022306:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002230a:	85 c0                	test   eax,eax
c002230c:	74 10                	je     c002231e <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c002230e:	83 ec 0c             	sub    esp,0xc
c0022311:	68 28 cb 02 c0       	push   0xc002cb28
c0022316:	e8 a2 82 ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c002231b:	83 c4 10             	add    esp,0x10
c002231e:	a0 00 29 03 c0       	mov    al,ds:0xc0032900
c0022323:	83 f0 01             	xor    eax,0x1
c0022326:	84 c0                	test   al,al
c0022328:	74 57                	je     c0022381 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c002232a:	a1 48 cb 02 c0       	mov    eax,ds:0xc002cb48
c002232f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022333:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002233b:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022343:	7f 35                	jg     c002237a <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0022345:	83 ec 0c             	sub    esp,0xc
c0022348:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002234c:	e8 96 4f 00 00       	call   c00272e7 <__floatsisf>
c0022351:	83 c4 10             	add    esp,0x10
c0022354:	8b 15 48 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb48
c002235a:	83 ec 08             	sub    esp,0x8
c002235d:	52                   	push   edx
c002235e:	50                   	push   eax
c002235f:	e8 95 4b 00 00       	call   c0026ef9 <__mulsf3>
c0022364:	83 c4 10             	add    esp,0x10
c0022367:	89 c2                	mov    edx,eax
c0022369:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002236d:	89 14 85 00 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb00],edx
c0022374:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022378:	eb c1                	jmp    c002233b <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c002237a:	c6 05 00 29 03 c0 01 	mov    BYTE PTR ds:0xc0032900,0x1
c0022381:	90                   	nop
c0022382:	83 c4 1c             	add    esp,0x1c
c0022385:	c3                   	ret    

c0022386 <SoundChannel::play()>:
c0022386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002238a:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c002238e:	c3                   	ret    
c002238f:	90                   	nop

c0022390 <SoundChannel::paused()>:
c0022390:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022394:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022397:	c3                   	ret    

c0022398 <SoundChannel::getSampleRate()>:
c0022398:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002239c:	8b 00                	mov    eax,DWORD PTR [eax]
c002239e:	c3                   	ret    
c002239f:	90                   	nop

c00223a0 <SoundChannel::getBits()>:
c00223a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00223a7:	c3                   	ret    

c00223a8 <SoundChannel::getBufferUsed()>:
c00223a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223ac:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00223af:	c3                   	ret    

c00223b0 <SoundChannel::getBufferSize()>:
c00223b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223b4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00223b7:	c3                   	ret    

c00223b8 <SoundChannel::unbuffer(float*, int, int)>:
c00223b8:	56                   	push   esi
c00223b9:	53                   	push   ebx
c00223ba:	83 ec 40             	sub    esp,0x40
c00223bd:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00223c1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00223c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00223c8:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00223cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00223cf:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00223d3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00223d7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00223db:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00223df:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00223e3:	e8 ff 4e 00 00       	call   c00272e7 <__floatsisf>
c00223e8:	5a                   	pop    edx
c00223e9:	89 c6                	mov    esi,eax
c00223eb:	ff 33                	push   DWORD PTR [ebx]
c00223ed:	e8 f5 4e 00 00       	call   c00272e7 <__floatsisf>
c00223f2:	59                   	pop    ecx
c00223f3:	5a                   	pop    edx
c00223f4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00223f7:	50                   	push   eax
c00223f8:	e8 fc 4a 00 00       	call   c0026ef9 <__mulsf3>
c00223fd:	59                   	pop    ecx
c00223fe:	5a                   	pop    edx
c00223ff:	50                   	push   eax
c0022400:	56                   	push   esi
c0022401:	e8 b6 4c 00 00       	call   c00270bc <__divsf3>
c0022406:	89 04 24             	mov    DWORD PTR [esp],eax
c0022409:	e8 a9 61 00 00       	call   c00285b7 <__extendsfdf2>
c002240e:	59                   	pop    ecx
c002240f:	5e                   	pop    esi
c0022410:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022414:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022418:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022420:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022424:	50                   	push   eax
c0022425:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022428:	e8 67 63 fe ff       	call   c0008794 <src_process>
c002242d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022431:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022434:	83 c4 0c             	add    esp,0xc
c0022437:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002243a:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c002243d:	29 d0                	sub    eax,edx
c002243f:	c1 e0 02             	shl    eax,0x2
c0022442:	50                   	push   eax
c0022443:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022446:	50                   	push   eax
c0022447:	51                   	push   ecx
c0022448:	e8 2f e2 fd ff       	call   c000067c <memmove>
c002244d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022451:	83 c4 44             	add    esp,0x44
c0022454:	5b                   	pop    ebx
c0022455:	5e                   	pop    esi
c0022456:	c3                   	ret    
c0022457:	90                   	nop

c0022458 <SoundChannel::buffer8(unsigned char*, int)>:
c0022458:	55                   	push   ebp
c0022459:	57                   	push   edi
c002245a:	56                   	push   esi
c002245b:	53                   	push   ebx
c002245c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022460:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022464:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022467:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002246b:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c002246e:	74 7a                	je     c00224ea <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022470:	85 ff                	test   edi,edi
c0022472:	7e 76                	jle    c00224ea <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022474:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022478:	8d 70 01             	lea    esi,[eax+0x1]
c002247b:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002247e:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022481:	8b 1c 9d 00 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdb00]
c0022488:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002248b:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002248e:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022491:	74 5e                	je     c00224f1 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022493:	83 ff 01             	cmp    edi,0x1
c0022496:	74 4b                	je     c00224e3 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022498:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c002249c:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002249f:	8d 70 01             	lea    esi,[eax+0x1]
c00224a2:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224a5:	8b 1c 9d 00 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdb00]
c00224ac:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00224af:	b8 02 00 00 00       	mov    eax,0x2
c00224b4:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00224b7:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00224ba:	75 23                	jne    c00224df <SoundChannel::buffer8(unsigned char*, int)+0x87>
c00224bc:	eb 27                	jmp    c00224e5 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00224be:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c00224c3:	8d 71 01             	lea    esi,[ecx+0x1]
c00224c6:	40                   	inc    eax
c00224c7:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224ca:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00224cd:	8b 1c 9d 00 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdb00]
c00224d4:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c00224d7:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00224da:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00224dd:	74 06                	je     c00224e5 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00224df:	39 c7                	cmp    edi,eax
c00224e1:	75 db                	jne    c00224be <SoundChannel::buffer8(unsigned char*, int)+0x66>
c00224e3:	89 f8                	mov    eax,edi
c00224e5:	5b                   	pop    ebx
c00224e6:	5e                   	pop    esi
c00224e7:	5f                   	pop    edi
c00224e8:	5d                   	pop    ebp
c00224e9:	c3                   	ret    
c00224ea:	5b                   	pop    ebx
c00224eb:	31 c0                	xor    eax,eax
c00224ed:	5e                   	pop    esi
c00224ee:	5f                   	pop    edi
c00224ef:	5d                   	pop    ebp
c00224f0:	c3                   	ret    
c00224f1:	b8 01 00 00 00       	mov    eax,0x1
c00224f6:	eb ed                	jmp    c00224e5 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00224f8 <SoundDevice::SoundDevice(char const*)>:
c00224f8:	83 ec 1c             	sub    esp,0x1c
c00224fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224ff:	83 ec 08             	sub    esp,0x8
c0022502:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022506:	50                   	push   eax
c0022507:	e8 26 20 ff ff       	call   c0014532 <Device::Device(char const*)>
c002250c:	83 c4 10             	add    esp,0x10
c002250f:	ba 54 cb 02 c0       	mov    edx,0xc002cb54
c0022514:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022518:	89 10                	mov    DWORD PTR [eax],edx
c002251a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002251e:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022528:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002252c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022536:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002253e:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022543:	7f 19                	jg     c002255e <SoundDevice::SoundDevice(char const*)+0x66>
c0022545:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022549:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002254d:	83 c2 54             	add    edx,0x54
c0022550:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022558:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002255c:	eb e0                	jmp    c002253e <SoundDevice::SoundDevice(char const*)+0x46>
c002255e:	90                   	nop
c002255f:	83 c4 1c             	add    esp,0x1c
c0022562:	c3                   	ret    
c0022563:	90                   	nop

c0022564 <SoundDevice::~SoundDevice()>:
c0022564:	53                   	push   ebx
c0022565:	83 ec 18             	sub    esp,0x18
c0022568:	ba 54 cb 02 c0       	mov    edx,0xc002cb54
c002256d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022571:	89 10                	mov    DWORD PTR [eax],edx
c0022573:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002257b:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022580:	7f 46                	jg     c00225c8 <SoundDevice::~SoundDevice()+0x64>
c0022582:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022586:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002258a:	83 c2 54             	add    edx,0x54
c002258d:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022591:	85 c0                	test   eax,eax
c0022593:	74 2d                	je     c00225c2 <SoundDevice::~SoundDevice()+0x5e>
c0022595:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022599:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002259d:	83 c2 54             	add    edx,0x54
c00225a0:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c00225a4:	85 db                	test   ebx,ebx
c00225a6:	74 1a                	je     c00225c2 <SoundDevice::~SoundDevice()+0x5e>
c00225a8:	83 ec 0c             	sub    esp,0xc
c00225ab:	53                   	push   ebx
c00225ac:	e8 21 fc ff ff       	call   c00221d2 <SoundChannel::~SoundChannel()>
c00225b1:	83 c4 10             	add    esp,0x10
c00225b4:	83 ec 08             	sub    esp,0x8
c00225b7:	6a 2c                	push   0x2c
c00225b9:	53                   	push   ebx
c00225ba:	e8 7d 08 ff ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c00225bf:	83 c4 10             	add    esp,0x10
c00225c2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00225c6:	eb b3                	jmp    c002257b <SoundDevice::~SoundDevice()+0x17>
c00225c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225cc:	83 ec 0c             	sub    esp,0xc
c00225cf:	50                   	push   eax
c00225d0:	e8 3f 1c ff ff       	call   c0014214 <Device::~Device()>
c00225d5:	83 c4 10             	add    esp,0x10
c00225d8:	90                   	nop
c00225d9:	83 c4 18             	add    esp,0x18
c00225dc:	5b                   	pop    ebx
c00225dd:	c3                   	ret    

c00225de <SoundDevice::~SoundDevice()>:
c00225de:	83 ec 0c             	sub    esp,0xc
c00225e1:	83 ec 0c             	sub    esp,0xc
c00225e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225e8:	e8 77 ff ff ff       	call   c0022564 <SoundDevice::~SoundDevice()>
c00225ed:	83 c4 10             	add    esp,0x10
c00225f0:	83 ec 08             	sub    esp,0x8
c00225f3:	68 e4 01 00 00       	push   0x1e4
c00225f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225fc:	e8 3b 08 ff ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c0022601:	83 c4 10             	add    esp,0x10
c0022604:	83 c4 0c             	add    esp,0xc
c0022607:	c3                   	ret    

c0022608 <SoundDevice::getFreeChannelNum()>:
c0022608:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002260c:	31 c0                	xor    eax,eax
c002260e:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022616:	74 09                	je     c0022621 <SoundDevice::getFreeChannelNum()+0x19>
c0022618:	40                   	inc    eax
c0022619:	83 f8 20             	cmp    eax,0x20
c002261c:	75 f0                	jne    c002260e <SoundDevice::getFreeChannelNum()+0x6>
c002261e:	83 c8 ff             	or     eax,0xffffffff
c0022621:	c3                   	ret    

c0022622 <SoundDevice::addChannel(SoundChannel*)>:
c0022622:	56                   	push   esi
c0022623:	53                   	push   ebx
c0022624:	51                   	push   ecx
c0022625:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022629:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002262d:	53                   	push   ebx
c002262e:	e8 d5 ff ff ff       	call   c0022608 <SoundDevice::getFreeChannelNum()>
c0022633:	5a                   	pop    edx
c0022634:	83 f8 ff             	cmp    eax,0xffffffff
c0022637:	74 51                	je     c002268a <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022639:	85 f6                	test   esi,esi
c002263b:	74 4d                	je     c002268a <SoundDevice::addChannel(SoundChannel*)+0x68>
c002263d:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022644:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c002264b:	75 30                	jne    c002267d <SoundDevice::addChannel(SoundChannel*)+0x5b>
c002264d:	83 ec 0c             	sub    esp,0xc
c0022650:	56                   	push   esi
c0022651:	e8 42 fd ff ff       	call   c0022398 <SoundChannel::getSampleRate()>
c0022656:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c002265c:	89 34 24             	mov    DWORD PTR [esp],esi
c002265f:	e8 3c fd ff ff       	call   c00223a0 <SoundChannel::getBits()>
c0022664:	83 c4 0c             	add    esp,0xc
c0022667:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c002266d:	8b 13                	mov    edx,DWORD PTR [ebx]
c002266f:	50                   	push   eax
c0022670:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022676:	53                   	push   ebx
c0022677:	ff 52 28             	call   DWORD PTR [edx+0x28]
c002267a:	83 c4 10             	add    esp,0x10
c002267d:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022683:	b8 01 00 00 00       	mov    eax,0x1
c0022688:	eb 03                	jmp    c002268d <SoundDevice::addChannel(SoundChannel*)+0x6b>
c002268a:	83 c8 ff             	or     eax,0xffffffff
c002268d:	5a                   	pop    edx
c002268e:	5b                   	pop    ebx
c002268f:	5e                   	pop    esi
c0022690:	c3                   	ret    
c0022691:	90                   	nop

c0022692 <SoundDevice::removeChannel(int)>:
c0022692:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022696:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002269a:	83 fa 1f             	cmp    edx,0x1f
c002269d:	77 23                	ja     c00226c2 <SoundDevice::removeChannel(int)+0x30>
c002269f:	8d 14 90             	lea    edx,[eax+edx*4]
c00226a2:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00226a9:	74 17                	je     c00226c2 <SoundDevice::removeChannel(int)+0x30>
c00226ab:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00226b5:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00226bb:	75 05                	jne    c00226c2 <SoundDevice::removeChannel(int)+0x30>
c00226bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00226bf:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c00226c2:	c3                   	ret    
c00226c3:	90                   	nop

c00226c4 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00226c4:	57                   	push   edi
c00226c5:	56                   	push   esi
c00226c6:	53                   	push   ebx
c00226c7:	31 db                	xor    ebx,ebx
c00226c9:	83 ec 10             	sub    esp,0x10
c00226cc:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00226d0:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00226d4:	0f 8d cb 00 00 00    	jge    c00227a5 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00226da:	83 ec 0c             	sub    esp,0xc
c00226dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00226e1:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00226e4:	e8 ce 5e 00 00       	call   c00285b7 <__extendsfdf2>
c00226e9:	83 c4 10             	add    esp,0x10
c00226ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00226f0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00226f4:	68 00 00 f0 3f       	push   0x3ff00000
c00226f9:	6a 00                	push   0x0
c00226fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022703:	e8 3b 4e 00 00       	call   c0027543 <__adddf3>
c0022708:	83 c4 10             	add    esp,0x10
c002270b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002270f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022713:	68 00 00 e0 3f       	push   0x3fe00000
c0022718:	6a 00                	push   0x0
c002271a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002271e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022722:	e8 99 54 00 00       	call   c0027bc0 <__muldf3>
c0022727:	83 c4 10             	add    esp,0x10
c002272a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002272e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022732:	68 00 00 60 40       	push   0x40600000
c0022737:	6a 00                	push   0x0
c0022739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002273d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022741:	e8 7a 54 00 00       	call   c0027bc0 <__muldf3>
c0022746:	59                   	pop    ecx
c0022747:	5f                   	pop    edi
c0022748:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002274c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022750:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022754:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022758:	e8 36 5d 00 00       	call   c0028493 <__truncdfsf2>
c002275d:	5a                   	pop    edx
c002275e:	89 c7                	mov    edi,eax
c0022760:	59                   	pop    ecx
c0022761:	68 00 00 fe 42       	push   0x42fe0000
c0022766:	50                   	push   eax
c0022767:	e8 d1 4d 00 00       	call   c002753d <__gesf2>
c002276c:	83 c4 10             	add    esp,0x10
c002276f:	85 c0                	test   eax,eax
c0022771:	78 06                	js     c0022779 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022773:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022777:	eb 26                	jmp    c002279f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022779:	50                   	push   eax
c002277a:	50                   	push   eax
c002277b:	6a 00                	push   0x0
c002277d:	57                   	push   edi
c002277e:	e8 be 4d 00 00       	call   c0027541 <__lesf2>
c0022783:	83 c4 10             	add    esp,0x10
c0022786:	85 c0                	test   eax,eax
c0022788:	7f 06                	jg     c0022790 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c002278a:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c002278e:	eb 0f                	jmp    c002279f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022790:	83 ec 0c             	sub    esp,0xc
c0022793:	57                   	push   edi
c0022794:	e8 b3 5e 00 00       	call   c002864c <lrintf>
c0022799:	83 c4 10             	add    esp,0x10
c002279c:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c002279f:	43                   	inc    ebx
c00227a0:	e9 2b ff ff ff       	jmp    c00226d0 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00227a5:	83 c4 10             	add    esp,0x10
c00227a8:	5b                   	pop    ebx
c00227a9:	5e                   	pop    esi
c00227aa:	5f                   	pop    edi
c00227ab:	c3                   	ret    

c00227ac <SoundDevice::getAudio(int, float*, float*)>:
c00227ac:	55                   	push   ebp
c00227ad:	57                   	push   edi
c00227ae:	56                   	push   esi
c00227af:	53                   	push   ebx
c00227b0:	31 db                	xor    ebx,ebx
c00227b2:	83 ec 20             	sub    esp,0x20
c00227b5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00227b9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00227bd:	c1 e0 02             	shl    eax,0x2
c00227c0:	50                   	push   eax
c00227c1:	6a 00                	push   0x0
c00227c3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00227c7:	e8 ac df fd ff       	call   c0000778 <memset>
c00227cc:	83 c4 10             	add    esp,0x10
c00227cf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00227d3:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c00227da:	85 c0                	test   eax,eax
c00227dc:	0f 84 d7 00 00 00    	je     c00228b9 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00227e2:	83 ec 0c             	sub    esp,0xc
c00227e5:	50                   	push   eax
c00227e6:	e8 a5 fb ff ff       	call   c0022390 <SoundChannel::paused()>
c00227eb:	83 c4 10             	add    esp,0x10
c00227ee:	84 c0                	test   al,al
c00227f0:	0f 85 c3 00 00 00    	jne    c00228b9 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00227f6:	83 ec 0c             	sub    esp,0xc
c00227f9:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022800:	e8 19 fa ff ff       	call   c002221e <SoundChannel::getVolume()>
c0022805:	83 c4 10             	add    esp,0x10
c0022808:	85 c0                	test   eax,eax
c002280a:	0f 84 a9 00 00 00    	je     c00228b9 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022810:	83 ec 0c             	sub    esp,0xc
c0022813:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002281a:	e8 ff f9 ff ff       	call   c002221e <SoundChannel::getVolume()>
c002281f:	83 ec 0c             	sub    esp,0xc
c0022822:	50                   	push   eax
c0022823:	e8 bf 4a 00 00       	call   c00272e7 <__floatsisf>
c0022828:	59                   	pop    ecx
c0022829:	5d                   	pop    ebp
c002282a:	31 ed                	xor    ebp,ebp
c002282c:	68 00 00 c8 42       	push   0x42c80000
c0022831:	50                   	push   eax
c0022832:	e8 85 48 00 00       	call   c00270bc <__divsf3>
c0022837:	83 c4 10             	add    esp,0x10
c002283a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002283e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022842:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0022848:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002284c:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022853:	e8 60 fb ff ff       	call   c00223b8 <SoundChannel::unbuffer(float*, int, int)>
c0022858:	83 c4 20             	add    esp,0x20
c002285b:	89 c1                	mov    ecx,eax
c002285d:	39 cd                	cmp    ebp,ecx
c002285f:	7d 52                	jge    c00228b3 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0022861:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022865:	50                   	push   eax
c0022866:	50                   	push   eax
c0022867:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002286b:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002286e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022872:	e8 82 46 00 00       	call   c0026ef9 <__mulsf3>
c0022877:	5a                   	pop    edx
c0022878:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002287c:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0022882:	e8 60 4a 00 00       	call   c00272e7 <__floatsisf>
c0022887:	59                   	pop    ecx
c0022888:	5a                   	pop    edx
c0022889:	50                   	push   eax
c002288a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002288e:	e8 29 48 00 00       	call   c00270bc <__divsf3>
c0022893:	59                   	pop    ecx
c0022894:	5a                   	pop    edx
c0022895:	50                   	push   eax
c0022896:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002289a:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002289d:	e8 34 43 00 00       	call   c0026bd6 <__addsf3>
c00228a2:	83 c4 10             	add    esp,0x10
c00228a5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00228a9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00228ad:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c00228b0:	45                   	inc    ebp
c00228b1:	eb aa                	jmp    c002285d <SoundDevice::getAudio(int, float*, float*)+0xb1>
c00228b3:	39 cf                	cmp    edi,ecx
c00228b5:	7e 02                	jle    c00228b9 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00228b7:	89 cf                	mov    edi,ecx
c00228b9:	43                   	inc    ebx
c00228ba:	83 fb 20             	cmp    ebx,0x20
c00228bd:	0f 85 10 ff ff ff    	jne    c00227d3 <SoundDevice::getAudio(int, float*, float*)+0x27>
c00228c3:	83 c4 1c             	add    esp,0x1c
c00228c6:	89 f8                	mov    eax,edi
c00228c8:	5b                   	pop    ebx
c00228c9:	5e                   	pop    esi
c00228ca:	5f                   	pop    edi
c00228cb:	5d                   	pop    ebp
c00228cc:	c3                   	ret    
c00228cd:	90                   	nop

c00228ce <PCI::open(int, int, void*)>:
c00228ce:	83 ec 18             	sub    esp,0x18
c00228d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00228d5:	8b 10                	mov    edx,DWORD PTR [eax]
c00228d7:	50                   	push   eax
c00228d8:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00228db:	31 c0                	xor    eax,eax
c00228dd:	83 c4 1c             	add    esp,0x1c
c00228e0:	c3                   	ret    
c00228e1:	90                   	nop

c00228e2 <PCI::close(int, int, void*)>:
c00228e2:	31 c0                	xor    eax,eax
c00228e4:	c3                   	ret    
c00228e5:	90                   	nop

c00228e6 <PCI::PCI()>:
c00228e6:	83 ec 0c             	sub    esp,0xc
c00228e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228ed:	83 ec 08             	sub    esp,0x8
c00228f0:	68 84 cb 02 c0       	push   0xc002cb84
c00228f5:	50                   	push   eax
c00228f6:	e8 bb 12 ff ff       	call   c0013bb6 <Bus::Bus(char const*)>
c00228fb:	83 c4 10             	add    esp,0x10
c00228fe:	ba f0 cb 02 c0       	mov    edx,0xc002cbf0
c0022903:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022907:	89 10                	mov    DWORD PTR [eax],edx
c0022909:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002290d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022913:	0f b6 d0             	movzx  edx,al
c0022916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002291a:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022921:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022925:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002292b:	0f b6 d0             	movzx  edx,al
c002292e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022932:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022937:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002293b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022941:	8d 50 01             	lea    edx,[eax+0x1]
c0022944:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022948:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002294e:	0f b6 d0             	movzx  edx,al
c0022951:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022955:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022959:	83 c9 c0             	or     ecx,0xffffffc0
c002295c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022960:	90                   	nop
c0022961:	83 c4 0c             	add    esp,0xc
c0022964:	c3                   	ret    
c0022965:	90                   	nop

c0022966 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022966:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002296a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002296f:	89 ca                	mov    edx,ecx
c0022971:	c1 e0 10             	shl    eax,0x10
c0022974:	81 e2 fc 00 00 00    	and    edx,0xfc
c002297a:	09 d0                	or     eax,edx
c002297c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0022981:	c1 e2 08             	shl    edx,0x8
c0022984:	09 d0                	or     eax,edx
c0022986:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c002298b:	c1 e2 0b             	shl    edx,0xb
c002298e:	09 d0                	or     eax,edx
c0022990:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022995:	0d 00 00 00 80       	or     eax,0x80000000
c002299a:	ef                   	out    dx,eax
c002299b:	ba fc 0c 00 00       	mov    edx,0xcfc
c00229a0:	ed                   	in     eax,dx
c00229a1:	83 e1 02             	and    ecx,0x2
c00229a4:	0f b6 c9             	movzx  ecx,cl
c00229a7:	c1 e1 03             	shl    ecx,0x3
c00229aa:	d3 e8                	shr    eax,cl
c00229ac:	c3                   	ret    
c00229ad:	90                   	nop

c00229ae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00229ae:	6a 00                	push   0x0
c00229b0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229b5:	50                   	push   eax
c00229b6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229bb:	50                   	push   eax
c00229bc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229c1:	50                   	push   eax
c00229c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229c6:	e8 9b ff ff ff       	call   c0022966 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229cb:	83 c4 14             	add    esp,0x14
c00229ce:	c3                   	ret    
c00229cf:	90                   	nop

c00229d0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00229d0:	6a 0e                	push   0xe
c00229d2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229d7:	50                   	push   eax
c00229d8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229dd:	50                   	push   eax
c00229de:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229e3:	50                   	push   eax
c00229e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229e8:	e8 79 ff ff ff       	call   c0022966 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229ed:	83 c4 14             	add    esp,0x14
c00229f0:	0f b6 c0             	movzx  eax,al
c00229f3:	c3                   	ret    

c00229f4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00229f4:	55                   	push   ebp
c00229f5:	57                   	push   edi
c00229f6:	56                   	push   esi
c00229f7:	53                   	push   ebx
c00229f8:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00229fd:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0022a02:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0022a07:	6a 0a                	push   0xa
c0022a09:	56                   	push   esi
c0022a0a:	55                   	push   ebp
c0022a0b:	57                   	push   edi
c0022a0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022a10:	e8 51 ff ff ff       	call   c0022966 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a15:	6a 0a                	push   0xa
c0022a17:	89 c3                	mov    ebx,eax
c0022a19:	56                   	push   esi
c0022a1a:	0f b6 db             	movzx  ebx,bl
c0022a1d:	55                   	push   ebp
c0022a1e:	57                   	push   edi
c0022a1f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022a23:	e8 3e ff ff ff       	call   c0022966 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a28:	83 c4 28             	add    esp,0x28
c0022a2b:	25 00 ff 00 00       	and    eax,0xff00
c0022a30:	09 d8                	or     eax,ebx
c0022a32:	5b                   	pop    ebx
c0022a33:	5e                   	pop    esi
c0022a34:	5f                   	pop    edi
c0022a35:	5d                   	pop    ebp
c0022a36:	c3                   	ret    
c0022a37:	90                   	nop

c0022a38 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022a38:	6a 08                	push   0x8
c0022a3a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a3f:	50                   	push   eax
c0022a40:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a45:	50                   	push   eax
c0022a46:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a4b:	50                   	push   eax
c0022a4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a50:	e8 11 ff ff ff       	call   c0022966 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a55:	83 c4 14             	add    esp,0x14
c0022a58:	0f b6 c4             	movzx  eax,ah
c0022a5b:	c3                   	ret    

c0022a5c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022a5c:	6a 08                	push   0x8
c0022a5e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a63:	50                   	push   eax
c0022a64:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a69:	50                   	push   eax
c0022a6a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a6f:	50                   	push   eax
c0022a70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a74:	e8 ed fe ff ff       	call   c0022966 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a79:	83 c4 14             	add    esp,0x14
c0022a7c:	c3                   	ret    
c0022a7d:	90                   	nop

c0022a7e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022a7e:	6a 3c                	push   0x3c
c0022a80:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a85:	50                   	push   eax
c0022a86:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a8b:	50                   	push   eax
c0022a8c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a91:	50                   	push   eax
c0022a92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a96:	e8 cb fe ff ff       	call   c0022966 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a9b:	83 c4 14             	add    esp,0x14
c0022a9e:	c3                   	ret    
c0022a9f:	90                   	nop

c0022aa0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022aa0:	6a 18                	push   0x18
c0022aa2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022aa7:	50                   	push   eax
c0022aa8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022aad:	50                   	push   eax
c0022aae:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ab3:	50                   	push   eax
c0022ab4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ab8:	e8 a9 fe ff ff       	call   c0022966 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022abd:	83 c4 14             	add    esp,0x14
c0022ac0:	0f b6 c4             	movzx  eax,ah
c0022ac3:	c3                   	ret    

c0022ac4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022ac4:	55                   	push   ebp
c0022ac5:	57                   	push   edi
c0022ac6:	56                   	push   esi
c0022ac7:	53                   	push   ebx
c0022ac8:	50                   	push   eax
c0022ac9:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022acd:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022ad2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022ad7:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022adc:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022ae3:	8d 43 12             	lea    eax,[ebx+0x12]
c0022ae6:	83 c3 10             	add    ebx,0x10
c0022ae9:	0f b6 c0             	movzx  eax,al
c0022aec:	0f b6 db             	movzx  ebx,bl
c0022aef:	50                   	push   eax
c0022af0:	51                   	push   ecx
c0022af1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022af5:	57                   	push   edi
c0022af6:	55                   	push   ebp
c0022af7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022afb:	e8 66 fe ff ff       	call   c0022966 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b00:	53                   	push   ebx
c0022b01:	89 c6                	mov    esi,eax
c0022b03:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022b07:	c1 e6 10             	shl    esi,0x10
c0022b0a:	51                   	push   ecx
c0022b0b:	57                   	push   edi
c0022b0c:	55                   	push   ebp
c0022b0d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022b11:	e8 50 fe ff ff       	call   c0022966 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b16:	83 c4 2c             	add    esp,0x2c
c0022b19:	0f b7 c0             	movzx  eax,ax
c0022b1c:	5b                   	pop    ebx
c0022b1d:	09 f0                	or     eax,esi
c0022b1f:	5e                   	pop    esi
c0022b20:	5f                   	pop    edi
c0022b21:	5d                   	pop    ebp
c0022b22:	c3                   	ret    
c0022b23:	90                   	nop

c0022b24 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022b24:	53                   	push   ebx
c0022b25:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b2a:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022b2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022b33:	c1 e1 10             	shl    ecx,0x10
c0022b36:	25 fc 00 00 00       	and    eax,0xfc
c0022b3b:	09 c1                	or     ecx,eax
c0022b3d:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b42:	c1 e0 08             	shl    eax,0x8
c0022b45:	09 c1                	or     ecx,eax
c0022b47:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022b4c:	c1 e0 0b             	shl    eax,0xb
c0022b4f:	09 c1                	or     ecx,eax
c0022b51:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022b57:	89 c8                	mov    eax,ecx
c0022b59:	ef                   	out    dx,eax
c0022b5a:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b5f:	ed                   	in     eax,dx
c0022b60:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022b65:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022b6a:	74 0a                	je     c0022b76 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022b6c:	0f b7 d8             	movzx  ebx,ax
c0022b6f:	89 d0                	mov    eax,edx
c0022b71:	c1 e0 10             	shl    eax,0x10
c0022b74:	eb 05                	jmp    c0022b7b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022b76:	66 31 c0             	xor    ax,ax
c0022b79:	89 d3                	mov    ebx,edx
c0022b7b:	09 c3                	or     ebx,eax
c0022b7d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b82:	89 c8                	mov    eax,ecx
c0022b84:	ef                   	out    dx,eax
c0022b85:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b8a:	89 d8                	mov    eax,ebx
c0022b8c:	ef                   	out    dx,eax
c0022b8d:	5b                   	pop    ebx
c0022b8e:	c3                   	ret    
c0022b8f:	90                   	nop

c0022b90 <PCI::checkBus(unsigned char)>:
c0022b90:	56                   	push   esi
c0022b91:	53                   	push   ebx
c0022b92:	31 db                	xor    ebx,ebx
c0022b94:	51                   	push   ecx
c0022b95:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022b9a:	52                   	push   edx
c0022b9b:	53                   	push   ebx
c0022b9c:	43                   	inc    ebx
c0022b9d:	56                   	push   esi
c0022b9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022ba2:	e8 2b 03 00 00       	call   c0022ed2 <PCI::checkDevice(unsigned char, unsigned char)>
c0022ba7:	83 c4 10             	add    esp,0x10
c0022baa:	83 fb 20             	cmp    ebx,0x20
c0022bad:	75 eb                	jne    c0022b9a <PCI::checkBus(unsigned char)+0xa>
c0022baf:	58                   	pop    eax
c0022bb0:	5b                   	pop    ebx
c0022bb1:	5e                   	pop    esi
c0022bb2:	c3                   	ret    
c0022bb3:	90                   	nop

c0022bb4 <PCI::foundDevice(PCIDeviceInfo)>:
c0022bb4:	55                   	push   ebp
c0022bb5:	57                   	push   edi
c0022bb6:	56                   	push   esi
c0022bb7:	53                   	push   ebx
c0022bb8:	83 ec 1c             	sub    esp,0x1c
c0022bbb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022bbf:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022bc5:	0f 84 52 01 00 00    	je     c0022d1d <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022bcb:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022bcf:	66 81 f9 06 04       	cmp    cx,0x406
c0022bd4:	75 2c                	jne    c0022c02 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022bd6:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022bdb:	50                   	push   eax
c0022bdc:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022be1:	50                   	push   eax
c0022be2:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022be7:	50                   	push   eax
c0022be8:	56                   	push   esi
c0022be9:	e8 b2 fe ff ff       	call   c0022aa0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022bee:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022bf2:	0f b6 c0             	movzx  eax,al
c0022bf5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022bf9:	83 c4 2c             	add    esp,0x2c
c0022bfc:	5b                   	pop    ebx
c0022bfd:	5e                   	pop    esi
c0022bfe:	5f                   	pop    edi
c0022bff:	5d                   	pop    ebp
c0022c00:	eb 8e                	jmp    c0022b90 <PCI::checkBus(unsigned char)>
c0022c02:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022c06:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022c0c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022c10:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022c14:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022c18:	88 d3                	mov    bl,dl
c0022c1a:	85 c0                	test   eax,eax
c0022c1c:	74 33                	je     c0022c51 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022c1e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022c21:	85 d2                	test   edx,edx
c0022c23:	74 28                	je     c0022c4d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c25:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022c2b:	31 ef                	xor    edi,ebp
c0022c2d:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022c33:	75 18                	jne    c0022c4d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c35:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022c39:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022c3f:	75 0c                	jne    c0022c4d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c41:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022c47:	0f 84 d0 00 00 00    	je     c0022d1d <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022c4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c4f:	eb c9                	jmp    c0022c1a <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022c51:	66 81 f9 01 06       	cmp    cx,0x601
c0022c56:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022c5a:	75 19                	jne    c0022c75 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022c5c:	83 ec 0c             	sub    esp,0xc
c0022c5f:	68 64 01 00 00       	push   0x164
c0022c64:	e8 d7 cb fe ff       	call   c000f840 <malloc>
c0022c69:	89 c5                	mov    ebp,eax
c0022c6b:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c6e:	e8 95 0f 00 00       	call   c0023c08 <SATABus::SATABus()>
c0022c73:	eb 1e                	jmp    c0022c93 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022c75:	66 81 f9 01 01       	cmp    cx,0x101
c0022c7a:	75 60                	jne    c0022cdc <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022c7c:	83 ec 0c             	sub    esp,0xc
c0022c7f:	68 70 02 00 00       	push   0x270
c0022c84:	e8 b7 cb fe ff       	call   c000f840 <malloc>
c0022c89:	89 c5                	mov    ebp,eax
c0022c8b:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c8e:	e8 03 03 00 00       	call   c0022f96 <IDE::IDE()>
c0022c93:	58                   	pop    eax
c0022c94:	5a                   	pop    edx
c0022c95:	55                   	push   ebp
c0022c96:	56                   	push   esi
c0022c97:	e8 a6 16 ff ff       	call   c0014342 <Device::addChild(Device*)>
c0022c9c:	83 ec 1c             	sub    esp,0x1c
c0022c9f:	b9 09 00 00 00       	mov    ecx,0x9
c0022ca4:	fc                   	cld    
c0022ca5:	89 e7                	mov    edi,esp
c0022ca7:	89 de                	mov    esi,ebx
c0022ca9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022cab:	55                   	push   ebp
c0022cac:	e8 9b 15 ff ff       	call   c001424c <Device::preOpenPCI(PCIDeviceInfo)>
c0022cb1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022cb4:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022cb8:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022cc0:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022cc8:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022cd0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022cd3:	83 c4 4c             	add    esp,0x4c
c0022cd6:	5b                   	pop    ebx
c0022cd7:	5e                   	pop    esi
c0022cd8:	5f                   	pop    edi
c0022cd9:	5d                   	pop    ebp
c0022cda:	ff e0                	jmp    eax
c0022cdc:	83 ec 0c             	sub    esp,0xc
c0022cdf:	68 58 01 00 00       	push   0x158
c0022ce4:	e8 57 cb fe ff       	call   c000f840 <malloc>
c0022ce9:	89 c5                	mov    ebp,eax
c0022ceb:	58                   	pop    eax
c0022cec:	5a                   	pop    edx
c0022ced:	68 8c cb 02 c0       	push   0xc002cb8c
c0022cf2:	55                   	push   ebp
c0022cf3:	e8 40 19 ff ff       	call   c0014638 <DriverlessDevice::DriverlessDevice(char const*)>
c0022cf8:	59                   	pop    ecx
c0022cf9:	5f                   	pop    edi
c0022cfa:	55                   	push   ebp
c0022cfb:	56                   	push   esi
c0022cfc:	e8 41 16 ff ff       	call   c0014342 <Device::addChild(Device*)>
c0022d01:	b9 09 00 00 00       	mov    ecx,0x9
c0022d06:	fc                   	cld    
c0022d07:	89 df                	mov    edi,ebx
c0022d09:	89 de                	mov    esi,ebx
c0022d0b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d0d:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022d11:	83 c4 2c             	add    esp,0x2c
c0022d14:	5b                   	pop    ebx
c0022d15:	5e                   	pop    esi
c0022d16:	5f                   	pop    edi
c0022d17:	5d                   	pop    ebp
c0022d18:	e9 2f 15 ff ff       	jmp    c001424c <Device::preOpenPCI(PCIDeviceInfo)>
c0022d1d:	83 c4 1c             	add    esp,0x1c
c0022d20:	5b                   	pop    ebx
c0022d21:	5e                   	pop    esi
c0022d22:	5f                   	pop    edi
c0022d23:	5d                   	pop    ebp
c0022d24:	c3                   	ret    
c0022d25:	90                   	nop

c0022d26 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022d26:	55                   	push   ebp
c0022d27:	57                   	push   edi
c0022d28:	56                   	push   esi
c0022d29:	53                   	push   ebx
c0022d2a:	83 ec 5c             	sub    esp,0x5c
c0022d2d:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022d31:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022d35:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022d39:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022d3e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022d42:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022d46:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022d4b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022d4f:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022d54:	6a 0c                	push   0xc
c0022d56:	55                   	push   ebp
c0022d57:	53                   	push   ebx
c0022d58:	57                   	push   edi
c0022d59:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022d60:	e8 01 fc ff ff       	call   c0022966 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d65:	55                   	push   ebp
c0022d66:	53                   	push   ebx
c0022d67:	57                   	push   edi
c0022d68:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022d6f:	e8 80 fc ff ff       	call   c00229f4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022d74:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022d79:	83 c4 24             	add    esp,0x24
c0022d7c:	55                   	push   ebp
c0022d7d:	53                   	push   ebx
c0022d7e:	57                   	push   edi
c0022d7f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022d83:	e8 f6 fc ff ff       	call   c0022a7e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022d88:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022d8c:	6a 3c                	push   0x3c
c0022d8e:	55                   	push   ebp
c0022d8f:	53                   	push   ebx
c0022d90:	57                   	push   edi
c0022d91:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022d98:	e8 c9 fb ff ff       	call   c0022966 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d9d:	0f b6 c4             	movzx  eax,ah
c0022da0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022da4:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022da8:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022dac:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c0022db1:	83 c4 24             	add    esp,0x24
c0022db4:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022dba:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022dc1:	74 6c                	je     c0022e2f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022dc3:	31 f6                	xor    esi,esi
c0022dc5:	8b 15 a8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5a8
c0022dcb:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022dd1:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022dd7:	7e 56                	jle    c0022e2f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022dd9:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022ddc:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022de3:	39 cb                	cmp    ebx,ecx
c0022de5:	75 45                	jne    c0022e2c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022de7:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022dee:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022df2:	75 38                	jne    c0022e2c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022df4:	83 ec 0c             	sub    esp,0xc
c0022df7:	68 a6 cb 02 c0       	push   0xc002cba6
c0022dfc:	e8 1b 01 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0022e01:	8b 15 a8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5a8
c0022e07:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022e0d:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022e15:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022e19:	52                   	push   edx
c0022e1a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022e1e:	53                   	push   ebx
c0022e1f:	68 cb cb 02 c0       	push   0xc002cbcb
c0022e24:	e8 f3 00 ff ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0022e29:	83 c4 20             	add    esp,0x20
c0022e2c:	46                   	inc    esi
c0022e2d:	eb 96                	jmp    c0022dc5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022e2f:	31 d2                	xor    edx,edx
c0022e31:	83 ec 0c             	sub    esp,0xc
c0022e34:	55                   	push   ebp
c0022e35:	53                   	push   ebx
c0022e36:	57                   	push   edi
c0022e37:	52                   	push   edx
c0022e38:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022e3c:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022e43:	e8 7c fc ff ff       	call   c0022ac4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e48:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022e4c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022e50:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022e54:	42                   	inc    edx
c0022e55:	83 c4 20             	add    esp,0x20
c0022e58:	83 fa 06             	cmp    edx,0x6
c0022e5b:	75 d4                	jne    c0022e31 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022e5d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022e61:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022e65:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022e69:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022e6d:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022e71:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022e75:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022e7a:	86 e0                	xchg   al,ah
c0022e7c:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022e81:	55                   	push   ebp
c0022e82:	53                   	push   ebx
c0022e83:	57                   	push   edi
c0022e84:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022e88:	e8 ab fb ff ff       	call   c0022a38 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022e8d:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022e91:	55                   	push   ebp
c0022e92:	53                   	push   ebx
c0022e93:	57                   	push   edi
c0022e94:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022e9b:	e8 0e fb ff ff       	call   c00229ae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022ea0:	83 ec 0c             	sub    esp,0xc
c0022ea3:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022ea8:	b9 09 00 00 00       	mov    ecx,0x9
c0022ead:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022eb1:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022eb5:	fc                   	cld    
c0022eb6:	89 e7                	mov    edi,esp
c0022eb8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022eba:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022ec1:	e8 ee fc ff ff       	call   c0022bb4 <PCI::foundDevice(PCIDeviceInfo)>
c0022ec6:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022ecc:	5b                   	pop    ebx
c0022ecd:	5e                   	pop    esi
c0022ece:	5f                   	pop    edi
c0022ecf:	5d                   	pop    ebp
c0022ed0:	c3                   	ret    
c0022ed1:	90                   	nop

c0022ed2 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022ed2:	55                   	push   ebp
c0022ed3:	57                   	push   edi
c0022ed4:	56                   	push   esi
c0022ed5:	53                   	push   ebx
c0022ed6:	83 ec 0c             	sub    esp,0xc
c0022ed9:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022edd:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022ee2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022ee7:	6a 00                	push   0x0
c0022ee9:	56                   	push   esi
c0022eea:	57                   	push   edi
c0022eeb:	55                   	push   ebp
c0022eec:	e8 bd fa ff ff       	call   c00229ae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022ef1:	6a 00                	push   0x0
c0022ef3:	56                   	push   esi
c0022ef4:	57                   	push   edi
c0022ef5:	55                   	push   ebp
c0022ef6:	e8 2b fe ff ff       	call   c0022d26 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022efb:	83 c4 20             	add    esp,0x20
c0022efe:	6a 00                	push   0x0
c0022f00:	56                   	push   esi
c0022f01:	57                   	push   edi
c0022f02:	55                   	push   ebp
c0022f03:	e8 c8 fa ff ff       	call   c00229d0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f08:	83 c4 10             	add    esp,0x10
c0022f0b:	84 c0                	test   al,al
c0022f0d:	79 27                	jns    c0022f36 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022f0f:	bb 01 00 00 00       	mov    ebx,0x1
c0022f14:	53                   	push   ebx
c0022f15:	56                   	push   esi
c0022f16:	57                   	push   edi
c0022f17:	55                   	push   ebp
c0022f18:	e8 91 fa ff ff       	call   c00229ae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f1d:	83 c4 10             	add    esp,0x10
c0022f20:	66 40                	inc    ax
c0022f22:	74 0c                	je     c0022f30 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022f24:	53                   	push   ebx
c0022f25:	56                   	push   esi
c0022f26:	57                   	push   edi
c0022f27:	55                   	push   ebp
c0022f28:	e8 f9 fd ff ff       	call   c0022d26 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022f2d:	83 c4 10             	add    esp,0x10
c0022f30:	43                   	inc    ebx
c0022f31:	83 fb 08             	cmp    ebx,0x8
c0022f34:	75 de                	jne    c0022f14 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022f36:	83 c4 0c             	add    esp,0xc
c0022f39:	5b                   	pop    ebx
c0022f3a:	5e                   	pop    esi
c0022f3b:	5f                   	pop    edi
c0022f3c:	5d                   	pop    ebp
c0022f3d:	c3                   	ret    

c0022f3e <PCI::detect()>:
c0022f3e:	56                   	push   esi
c0022f3f:	53                   	push   ebx
c0022f40:	53                   	push   ebx
c0022f41:	31 db                	xor    ebx,ebx
c0022f43:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022f47:	6a 00                	push   0x0
c0022f49:	6a 00                	push   0x0
c0022f4b:	6a 00                	push   0x0
c0022f4d:	56                   	push   esi
c0022f4e:	e8 7d fa ff ff       	call   c00229d0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f53:	83 c4 10             	add    esp,0x10
c0022f56:	a8 80                	test   al,0x80
c0022f58:	75 21                	jne    c0022f7b <PCI::detect()+0x3d>
c0022f5a:	51                   	push   ecx
c0022f5b:	51                   	push   ecx
c0022f5c:	6a 00                	push   0x0
c0022f5e:	56                   	push   esi
c0022f5f:	e8 2c fc ff ff       	call   c0022b90 <PCI::checkBus(unsigned char)>
c0022f64:	83 c4 10             	add    esp,0x10
c0022f67:	eb 24                	jmp    c0022f8d <PCI::detect()+0x4f>
c0022f69:	52                   	push   edx
c0022f6a:	52                   	push   edx
c0022f6b:	53                   	push   ebx
c0022f6c:	43                   	inc    ebx
c0022f6d:	56                   	push   esi
c0022f6e:	e8 1d fc ff ff       	call   c0022b90 <PCI::checkBus(unsigned char)>
c0022f73:	83 c4 10             	add    esp,0x10
c0022f76:	83 fb 08             	cmp    ebx,0x8
c0022f79:	74 12                	je     c0022f8d <PCI::detect()+0x4f>
c0022f7b:	53                   	push   ebx
c0022f7c:	6a 00                	push   0x0
c0022f7e:	6a 00                	push   0x0
c0022f80:	56                   	push   esi
c0022f81:	e8 28 fa ff ff       	call   c00229ae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f86:	83 c4 10             	add    esp,0x10
c0022f89:	66 40                	inc    ax
c0022f8b:	74 dc                	je     c0022f69 <PCI::detect()+0x2b>
c0022f8d:	58                   	pop    eax
c0022f8e:	5b                   	pop    ebx
c0022f8f:	5e                   	pop    esi
c0022f90:	c3                   	ret    
c0022f91:	90                   	nop

c0022f92 <IDE::close(int, int, void*)>:
c0022f92:	83 c8 ff             	or     eax,0xffffffff
c0022f95:	c3                   	ret    

c0022f96 <IDE::IDE()>:
c0022f96:	83 ec 0c             	sub    esp,0xc
c0022f99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f9d:	83 ec 08             	sub    esp,0x8
c0022fa0:	68 14 cc 02 c0       	push   0xc002cc14
c0022fa5:	50                   	push   eax
c0022fa6:	e8 23 17 ff ff       	call   c00146ce <HardDiskController::HardDiskController(char const*)>
c0022fab:	83 c4 10             	add    esp,0x10
c0022fae:	ba 54 ce 02 c0       	mov    edx,0xc002ce54
c0022fb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fb7:	89 10                	mov    DWORD PTR [eax],edx
c0022fb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fbd:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022fc4:	90                   	nop
c0022fc5:	83 c4 0c             	add    esp,0xc
c0022fc8:	c3                   	ret    
c0022fc9:	90                   	nop

c0022fca <IDE::prepareInterrupt(unsigned char)>:
c0022fca:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022fcf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022fd3:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022fdb:	c3                   	ret    

c0022fdc <selectDrive(unsigned char, unsigned char)>:
c0022fdc:	c3                   	ret    
c0022fdd:	90                   	nop

c0022fde <IDE::getBase(unsigned char)>:
c0022fde:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022fe3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fe7:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022fef:	c3                   	ret    

c0022ff0 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022ff0:	55                   	push   ebp
c0022ff1:	57                   	push   edi
c0022ff2:	56                   	push   esi
c0022ff3:	53                   	push   ebx
c0022ff4:	83 ec 1c             	sub    esp,0x1c
c0022ff7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022ffb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022fff:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0023002:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023006:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002300a:	80 f9 03             	cmp    cl,0x3
c002300d:	77 51                	ja     c0023060 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c002300f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023013:	0f b6 f2             	movzx  esi,dl
c0023016:	0f b6 db             	movzx  ebx,bl
c0023019:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002301c:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023020:	83 ca 80             	or     edx,0xffffff80
c0023023:	0f b6 d2             	movzx  edx,dl
c0023026:	52                   	push   edx
c0023027:	6a 0c                	push   0xc
c0023029:	56                   	push   esi
c002302a:	57                   	push   edi
c002302b:	e8 c0 ff ff ff       	call   c0022ff0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023030:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0023035:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023039:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002303d:	ee                   	out    dx,al
c002303e:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023043:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0023047:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c002304b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002304f:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023057:	83 c4 2c             	add    esp,0x2c
c002305a:	5b                   	pop    ebx
c002305b:	5e                   	pop    esi
c002305c:	5f                   	pop    edi
c002305d:	5d                   	pop    ebp
c002305e:	eb 90                	jmp    c0022ff0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023060:	80 fb 07             	cmp    bl,0x7
c0023063:	77 12                	ja     c0023077 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023065:	0f b6 d2             	movzx  edx,dl
c0023068:	0f b6 db             	movzx  ebx,bl
c002306b:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023073:	89 da                	mov    edx,ebx
c0023075:	eb 2f                	jmp    c00230a6 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023077:	80 fb 0d             	cmp    bl,0xd
c002307a:	77 13                	ja     c002308f <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c002307c:	0f b6 d2             	movzx  edx,dl
c002307f:	0f b6 db             	movzx  ebx,bl
c0023082:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023089:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002308d:	eb 17                	jmp    c00230a6 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002308f:	80 fb 15             	cmp    bl,0x15
c0023092:	77 13                	ja     c00230a7 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023094:	0f b6 d2             	movzx  edx,dl
c0023097:	0f b6 db             	movzx  ebx,bl
c002309a:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00230a2:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00230a6:	ee                   	out    dx,al
c00230a7:	83 c4 1c             	add    esp,0x1c
c00230aa:	5b                   	pop    ebx
c00230ab:	5e                   	pop    esi
c00230ac:	5f                   	pop    edi
c00230ad:	5d                   	pop    ebp
c00230ae:	c3                   	ret    
c00230af:	90                   	nop

c00230b0 <IDE::read(unsigned char, unsigned char)>:
c00230b0:	55                   	push   ebp
c00230b1:	57                   	push   edi
c00230b2:	56                   	push   esi
c00230b3:	53                   	push   ebx
c00230b4:	83 ec 1c             	sub    esp,0x1c
c00230b7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00230bb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00230bf:	8d 43 f8             	lea    eax,[ebx-0x8]
c00230c2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00230c6:	3c 03                	cmp    al,0x3
c00230c8:	77 43                	ja     c002310d <IDE::read(unsigned char, unsigned char)+0x5d>
c00230ca:	0f b6 f2             	movzx  esi,dl
c00230cd:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00230d0:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00230d4:	83 c8 80             	or     eax,0xffffff80
c00230d7:	0f b6 c0             	movzx  eax,al
c00230da:	50                   	push   eax
c00230db:	6a 0c                	push   0xc
c00230dd:	56                   	push   esi
c00230de:	57                   	push   edi
c00230df:	e8 0c ff ff ff       	call   c0022ff0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230e4:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00230e9:	0f b6 c3             	movzx  eax,bl
c00230ec:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00230f0:	ec                   	in     al,dx
c00230f1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00230f5:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00230fa:	52                   	push   edx
c00230fb:	6a 0c                	push   0xc
c00230fd:	56                   	push   esi
c00230fe:	57                   	push   edi
c00230ff:	e8 ec fe ff ff       	call   c0022ff0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023104:	83 c4 20             	add    esp,0x20
c0023107:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002310b:	eb 49                	jmp    c0023156 <IDE::read(unsigned char, unsigned char)+0xa6>
c002310d:	80 fb 07             	cmp    bl,0x7
c0023110:	77 12                	ja     c0023124 <IDE::read(unsigned char, unsigned char)+0x74>
c0023112:	0f b6 d2             	movzx  edx,dl
c0023115:	0f b6 c3             	movzx  eax,bl
c0023118:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023120:	89 c2                	mov    edx,eax
c0023122:	eb 31                	jmp    c0023155 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023124:	80 fb 0d             	cmp    bl,0xd
c0023127:	77 13                	ja     c002313c <IDE::read(unsigned char, unsigned char)+0x8c>
c0023129:	0f b6 d2             	movzx  edx,dl
c002312c:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023133:	0f b6 d3             	movzx  edx,bl
c0023136:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002313a:	eb 19                	jmp    c0023155 <IDE::read(unsigned char, unsigned char)+0xa5>
c002313c:	31 c0                	xor    eax,eax
c002313e:	80 fb 15             	cmp    bl,0x15
c0023141:	77 13                	ja     c0023156 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023143:	0f b6 d2             	movzx  edx,dl
c0023146:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c002314e:	0f b6 d3             	movzx  edx,bl
c0023151:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023155:	ec                   	in     al,dx
c0023156:	83 c4 1c             	add    esp,0x1c
c0023159:	5b                   	pop    ebx
c002315a:	5e                   	pop    esi
c002315b:	5f                   	pop    edi
c002315c:	5d                   	pop    ebp
c002315d:	c3                   	ret    

c002315e <IDE::waitInterrupt(unsigned char)>:
c002315e:	55                   	push   ebp
c002315f:	57                   	push   edi
c0023160:	56                   	push   esi
c0023161:	53                   	push   ebx
c0023162:	31 db                	xor    ebx,ebx
c0023164:	83 ec 0c             	sub    esp,0xc
c0023167:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002316b:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023170:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023178:	89 e8                	mov    eax,ebp
c002317a:	84 c0                	test   al,al
c002317c:	75 34                	jne    c00231b2 <IDE::waitInterrupt(unsigned char)+0x54>
c002317e:	52                   	push   edx
c002317f:	6a 0c                	push   0xc
c0023181:	56                   	push   esi
c0023182:	57                   	push   edi
c0023183:	e8 28 ff ff ff       	call   c00230b0 <IDE::read(unsigned char, unsigned char)>
c0023188:	83 c4 10             	add    esp,0x10
c002318b:	a8 01                	test   al,0x1
c002318d:	75 2b                	jne    c00231ba <IDE::waitInterrupt(unsigned char)+0x5c>
c002318f:	f6 c3 04             	test   bl,0x4
c0023192:	75 16                	jne    c00231aa <IDE::waitInterrupt(unsigned char)+0x4c>
c0023194:	83 fb 32             	cmp    ebx,0x32
c0023197:	7e 11                	jle    c00231aa <IDE::waitInterrupt(unsigned char)+0x4c>
c0023199:	50                   	push   eax
c002319a:	50                   	push   eax
c002319b:	6a 00                	push   0x0
c002319d:	68 80 96 98 00       	push   0x989680
c00231a2:	e8 8b b1 ff ff       	call   c001e332 <nanoSleep(unsigned long long)>
c00231a7:	83 c4 10             	add    esp,0x10
c00231aa:	83 fb 3c             	cmp    ebx,0x3c
c00231ad:	74 0b                	je     c00231ba <IDE::waitInterrupt(unsigned char)+0x5c>
c00231af:	43                   	inc    ebx
c00231b0:	eb be                	jmp    c0023170 <IDE::waitInterrupt(unsigned char)+0x12>
c00231b2:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00231ba:	83 c4 0c             	add    esp,0xc
c00231bd:	89 e8                	mov    eax,ebp
c00231bf:	5b                   	pop    ebx
c00231c0:	5e                   	pop    esi
c00231c1:	5f                   	pop    edi
c00231c2:	5d                   	pop    ebp
c00231c3:	c3                   	ret    

c00231c4 <ideChannel0IRQHandler(regs*, void*)>:
c00231c4:	83 ec 10             	sub    esp,0x10
c00231c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00231cb:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00231d2:	6a 07                	push   0x7
c00231d4:	6a 00                	push   0x0
c00231d6:	50                   	push   eax
c00231d7:	e8 d4 fe ff ff       	call   c00230b0 <IDE::read(unsigned char, unsigned char)>
c00231dc:	83 c4 1c             	add    esp,0x1c
c00231df:	c3                   	ret    

c00231e0 <ideChannel1IRQHandler(regs*, void*)>:
c00231e0:	83 ec 10             	sub    esp,0x10
c00231e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00231e7:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00231ee:	6a 07                	push   0x7
c00231f0:	6a 01                	push   0x1
c00231f2:	50                   	push   eax
c00231f3:	e8 b8 fe ff ff       	call   c00230b0 <IDE::read(unsigned char, unsigned char)>
c00231f8:	83 c4 1c             	add    esp,0x1c
c00231fb:	c3                   	ret    

c00231fc <IDE::enableIRQs(unsigned char, bool)>:
c00231fc:	57                   	push   edi
c00231fd:	56                   	push   esi
c00231fe:	be 04 00 00 00       	mov    esi,0x4
c0023203:	53                   	push   ebx
c0023204:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023209:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002320d:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023212:	0f 94 c0             	sete   al
c0023215:	d1 e0                	shl    eax,1
c0023217:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c002321e:	0f b6 c0             	movzx  eax,al
c0023221:	50                   	push   eax
c0023222:	6a 0c                	push   0xc
c0023224:	57                   	push   edi
c0023225:	53                   	push   ebx
c0023226:	e8 c5 fd ff ff       	call   c0022ff0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002322b:	83 c4 10             	add    esp,0x10
c002322e:	50                   	push   eax
c002322f:	6a 0c                	push   0xc
c0023231:	57                   	push   edi
c0023232:	53                   	push   ebx
c0023233:	e8 78 fe ff ff       	call   c00230b0 <IDE::read(unsigned char, unsigned char)>
c0023238:	83 c4 10             	add    esp,0x10
c002323b:	4e                   	dec    esi
c002323c:	75 f0                	jne    c002322e <IDE::enableIRQs(unsigned char, bool)+0x32>
c002323e:	5b                   	pop    ebx
c002323f:	5e                   	pop    esi
c0023240:	5f                   	pop    edi
c0023241:	c3                   	ret    

c0023242 <IDE::open(int, int, void*)>:
c0023242:	55                   	push   ebp
c0023243:	57                   	push   edi
c0023244:	56                   	push   esi
c0023245:	53                   	push   ebx
c0023246:	83 ec 1c             	sub    esp,0x1c
c0023249:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002324d:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023256:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002325f:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023266:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002326d:	0f 85 b0 02 00 00    	jne    c0023523 <IDE::open(int, int, void*)+0x2e1>
c0023273:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023279:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c002327d:	83 e0 7f             	and    eax,0x7f
c0023280:	3c 05                	cmp    al,0x5
c0023282:	74 04                	je     c0023288 <IDE::open(int, int, void*)+0x46>
c0023284:	3c 0f                	cmp    al,0xf
c0023286:	75 32                	jne    c00232ba <IDE::open(int, int, void*)+0x78>
c0023288:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002328e:	83 e0 fc             	and    eax,0xfffffffc
c0023291:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023298:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002329e:	83 e0 fc             	and    eax,0xfffffffc
c00232a1:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00232a8:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00232ae:	83 e0 fc             	and    eax,0xfffffffc
c00232b1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00232b8:	eb 14                	jmp    c00232ce <IDE::open(int, int, void*)+0x8c>
c00232ba:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00232c4:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00232ce:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00232d5:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00232dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00232e0:	89 c6                	mov    esi,eax
c00232e2:	bf f8 0c 00 00       	mov    edi,0xcf8
c00232e7:	c1 e6 10             	shl    esi,0x10
c00232ea:	89 e8                	mov    eax,ebp
c00232ec:	89 fa                	mov    edx,edi
c00232ee:	c1 e0 0b             	shl    eax,0xb
c00232f1:	09 f0                	or     eax,esi
c00232f3:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00232fa:	c1 e6 08             	shl    esi,0x8
c00232fd:	09 c6                	or     esi,eax
c00232ff:	89 f0                	mov    eax,esi
c0023301:	0d 08 00 00 80       	or     eax,0x80000008
c0023306:	ef                   	out    dx,eax
c0023307:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002330c:	89 ca                	mov    edx,ecx
c002330e:	ed                   	in     eax,dx
c002330f:	c1 e8 10             	shr    eax,0x10
c0023312:	3d ff ff 00 00       	cmp    eax,0xffff
c0023317:	0f 84 f5 00 00 00    	je     c0023412 <IDE::open(int, int, void*)+0x1d0>
c002331d:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023323:	89 fa                	mov    edx,edi
c0023325:	89 f0                	mov    eax,esi
c0023327:	ef                   	out    dx,eax
c0023328:	b0 fe                	mov    al,0xfe
c002332a:	89 ca                	mov    edx,ecx
c002332c:	ee                   	out    dx,al
c002332d:	89 f0                	mov    eax,esi
c002332f:	89 fa                	mov    edx,edi
c0023331:	ef                   	out    dx,eax
c0023332:	89 ca                	mov    edx,ecx
c0023334:	ed                   	in     eax,dx
c0023335:	3c fe                	cmp    al,0xfe
c0023337:	0f 85 a9 00 00 00    	jne    c00233e6 <IDE::open(int, int, void*)+0x1a4>
c002333d:	8b 15 a8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5a8
c0023343:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c002334a:	74 33                	je     c002337f <IDE::open(int, int, void*)+0x13d>
c002334c:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023352:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023356:	40                   	inc    eax
c0023357:	83 ec 0c             	sub    esp,0xc
c002335a:	0f b6 c0             	movzx  eax,al
c002335d:	50                   	push   eax
c002335e:	55                   	push   ebp
c002335f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023363:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023369:	51                   	push   ecx
c002336a:	e8 a7 4e ff ff       	call   c0018216 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002336f:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023374:	83 c4 1c             	add    esp,0x1c
c0023377:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002337d:	eb 0a                	jmp    c0023389 <IDE::open(int, int, void*)+0x147>
c002337f:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023389:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023390:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023397:	c1 e1 10             	shl    ecx,0x10
c002339a:	c1 e0 08             	shl    eax,0x8
c002339d:	bf f8 0c 00 00       	mov    edi,0xcf8
c00233a2:	09 c1                	or     ecx,eax
c00233a4:	89 fa                	mov    edx,edi
c00233a6:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00233ad:	c1 e0 0b             	shl    eax,0xb
c00233b0:	09 c1                	or     ecx,eax
c00233b2:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00233b8:	89 c8                	mov    eax,ecx
c00233ba:	ef                   	out    dx,eax
c00233bb:	be fc 0c 00 00       	mov    esi,0xcfc
c00233c0:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00233c6:	89 f2                	mov    edx,esi
c00233c8:	ee                   	out    dx,al
c00233c9:	89 c8                	mov    eax,ecx
c00233cb:	89 fa                	mov    edx,edi
c00233cd:	ef                   	out    dx,eax
c00233ce:	89 f2                	mov    edx,esi
c00233d0:	ed                   	in     eax,dx
c00233d1:	0f b6 c0             	movzx  eax,al
c00233d4:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00233da:	74 46                	je     c0023422 <IDE::open(int, int, void*)+0x1e0>
c00233dc:	83 ec 0c             	sub    esp,0xc
c00233df:	68 2c cc 02 c0       	push   0xc002cc2c
c00233e4:	eb 34                	jmp    c002341a <IDE::open(int, int, void*)+0x1d8>
c00233e6:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00233ef:	75 17                	jne    c0023408 <IDE::open(int, int, void*)+0x1c6>
c00233f1:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00233f6:	74 07                	je     c00233ff <IDE::open(int, int, void*)+0x1bd>
c00233f8:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00233fd:	75 09                	jne    c0023408 <IDE::open(int, int, void*)+0x1c6>
c00233ff:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023406:	eb 1a                	jmp    c0023422 <IDE::open(int, int, void*)+0x1e0>
c0023408:	83 ec 0c             	sub    esp,0xc
c002340b:	68 34 cc 02 c0       	push   0xc002cc34
c0023410:	eb 08                	jmp    c002341a <IDE::open(int, int, void*)+0x1d8>
c0023412:	83 ec 0c             	sub    esp,0xc
c0023415:	68 65 cc 02 c0       	push   0xc002cc65
c002341a:	e8 9e 71 ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c002341f:	83 c4 10             	add    esp,0x10
c0023422:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023429:	79 1a                	jns    c0023445 <IDE::open(int, int, void*)+0x203>
c002342b:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023431:	83 e0 fc             	and    eax,0xfffffffc
c0023434:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002343b:	83 c0 08             	add    eax,0x8
c002343e:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023445:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002344b:	89 c2                	mov    edx,eax
c002344d:	83 e2 0f             	and    edx,0xf
c0023450:	66 83 fa 08          	cmp    dx,0x8
c0023454:	75 0a                	jne    c0023460 <IDE::open(int, int, void*)+0x21e>
c0023456:	83 e8 02             	sub    eax,0x2
c0023459:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023460:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023466:	89 c2                	mov    edx,eax
c0023468:	83 e2 0f             	and    edx,0xf
c002346b:	66 83 fa 08          	cmp    dx,0x8
c002346f:	75 0a                	jne    c002347b <IDE::open(int, int, void*)+0x239>
c0023471:	83 e8 02             	sub    eax,0x2
c0023474:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002347b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023482:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023489:	89 d0                	mov    eax,edx
c002348b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002348e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023492:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023496:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023499:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002349e:	0f b6 c9             	movzx  ecx,cl
c00234a1:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00234a8:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00234ab:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00234af:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00234b3:	8d 50 02             	lea    edx,[eax+0x2]
c00234b6:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00234bb:	0f b6 d2             	movzx  edx,dl
c00234be:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00234c4:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00234c7:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00234cb:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00234cf:	8d 48 03             	lea    ecx,[eax+0x3]
c00234d2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00234d7:	0f b6 c9             	movzx  ecx,cl
c00234da:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00234e0:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00234e3:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00234e7:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00234eb:	8d 50 04             	lea    edx,[eax+0x4]
c00234ee:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00234f4:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00234f9:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023500:	66 85 f6             	test   si,si
c0023503:	74 3e                	je     c0023543 <IDE::open(int, int, void*)+0x301>
c0023505:	0f b6 d2             	movzx  edx,dl
c0023508:	83 c0 05             	add    eax,0x5
c002350b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002350e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023512:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023516:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002351c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023521:	eb 20                	jmp    c0023543 <IDE::open(int, int, void*)+0x301>
c0023523:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002352d:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023537:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002353e:	e9 02 ff ff ff       	jmp    c0023445 <IDE::open(int, int, void*)+0x203>
c0023543:	52                   	push   edx
c0023544:	52                   	push   edx
c0023545:	6a 00                	push   0x0
c0023547:	53                   	push   ebx
c0023548:	e8 7d fa ff ff       	call   c0022fca <IDE::prepareInterrupt(unsigned char)>
c002354d:	59                   	pop    ecx
c002354e:	5e                   	pop    esi
c002354f:	6a 01                	push   0x1
c0023551:	53                   	push   ebx
c0023552:	e8 73 fa ff ff       	call   c0022fca <IDE::prepareInterrupt(unsigned char)>
c0023557:	83 c4 0c             	add    esp,0xc
c002355a:	6a 00                	push   0x0
c002355c:	6a 00                	push   0x0
c002355e:	53                   	push   ebx
c002355f:	e8 98 fc ff ff       	call   c00231fc <IDE::enableIRQs(unsigned char, bool)>
c0023564:	83 c4 0c             	add    esp,0xc
c0023567:	6a 00                	push   0x0
c0023569:	6a 01                	push   0x1
c002356b:	53                   	push   ebx
c002356c:	e8 8b fc ff ff       	call   c00231fc <IDE::enableIRQs(unsigned char, bool)>
c0023571:	83 c4 10             	add    esp,0x10
c0023574:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002357b:	74 40                	je     c00235bd <IDE::open(int, int, void*)+0x37b>
c002357d:	83 ec 0c             	sub    esp,0xc
c0023580:	68 8f cc 02 c0       	push   0xc002cc8f
c0023585:	e8 92 f9 fe ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c002358a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002358d:	6a 01                	push   0x1
c002358f:	68 c4 31 02 c0       	push   0xc00231c4
c0023594:	6a 0e                	push   0xe
c0023596:	53                   	push   ebx
c0023597:	e8 2a 0d ff ff       	call   c00142c6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002359c:	83 c4 14             	add    esp,0x14
c002359f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00235a5:	53                   	push   ebx
c00235a6:	6a 01                	push   0x1
c00235a8:	68 e0 31 02 c0       	push   0xc00231e0
c00235ad:	6a 0f                	push   0xf
c00235af:	53                   	push   ebx
c00235b0:	e8 11 0d ff ff       	call   c00142c6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235b5:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00235bb:	eb 4a                	jmp    c0023607 <IDE::open(int, int, void*)+0x3c5>
c00235bd:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00235c7:	50                   	push   eax
c00235c8:	6a 0f                	push   0xf
c00235ca:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00235d0:	68 ab cc 02 c0       	push   0xc002ccab
c00235d5:	e8 42 f9 fe ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c00235da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00235dd:	6a 00                	push   0x0
c00235df:	68 c4 31 02 c0       	push   0xc00231c4
c00235e4:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00235ea:	53                   	push   ebx
c00235eb:	e8 d6 0c ff ff       	call   c00142c6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235f0:	83 c4 14             	add    esp,0x14
c00235f3:	53                   	push   ebx
c00235f4:	6a 00                	push   0x0
c00235f6:	68 e0 31 02 c0       	push   0xc00231e0
c00235fb:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023601:	53                   	push   ebx
c0023602:	e8 bf 0c ff ff       	call   c00142c6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023607:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023609:	83 c4 20             	add    esp,0x20
c002360c:	83 ec 0c             	sub    esp,0xc
c002360f:	53                   	push   ebx
c0023610:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023613:	83 c4 0c             	add    esp,0xc
c0023616:	6a 07                	push   0x7
c0023618:	6a 00                	push   0x0
c002361a:	53                   	push   ebx
c002361b:	e8 90 fa ff ff       	call   c00230b0 <IDE::read(unsigned char, unsigned char)>
c0023620:	83 c4 0c             	add    esp,0xc
c0023623:	6a 07                	push   0x7
c0023625:	6a 01                	push   0x1
c0023627:	53                   	push   ebx
c0023628:	e8 83 fa ff ff       	call   c00230b0 <IDE::read(unsigned char, unsigned char)>
c002362d:	83 c4 0c             	add    esp,0xc
c0023630:	6a 01                	push   0x1
c0023632:	6a 00                	push   0x0
c0023634:	53                   	push   ebx
c0023635:	e8 c2 fb ff ff       	call   c00231fc <IDE::enableIRQs(unsigned char, bool)>
c002363a:	83 c4 0c             	add    esp,0xc
c002363d:	6a 01                	push   0x1
c002363f:	6a 01                	push   0x1
c0023641:	53                   	push   ebx
c0023642:	e8 b5 fb ff ff       	call   c00231fc <IDE::enableIRQs(unsigned char, bool)>
c0023647:	83 c4 2c             	add    esp,0x2c
c002364a:	31 c0                	xor    eax,eax
c002364c:	5b                   	pop    ebx
c002364d:	5e                   	pop    esi
c002364e:	5f                   	pop    edi
c002364f:	5d                   	pop    ebp
c0023650:	c3                   	ret    
c0023651:	90                   	nop

c0023652 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023652:	55                   	push   ebp
c0023653:	57                   	push   edi
c0023654:	56                   	push   esi
c0023655:	53                   	push   ebx
c0023656:	83 ec 1c             	sub    esp,0x1c
c0023659:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002365d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023661:	8d 50 f8             	lea    edx,[eax-0x8]
c0023664:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023668:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002366c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023670:	80 fa 03             	cmp    dl,0x3
c0023673:	77 5d                	ja     c00236d2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023675:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023679:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002367d:	0f b6 db             	movzx  ebx,bl
c0023680:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023683:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023687:	83 ca 80             	or     edx,0xffffff80
c002368a:	0f b6 d2             	movzx  edx,dl
c002368d:	52                   	push   edx
c002368e:	6a 0c                	push   0xc
c0023690:	53                   	push   ebx
c0023691:	56                   	push   esi
c0023692:	e8 59 f9 ff ff       	call   c0022ff0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023697:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c002369c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00236a0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00236a4:	0f b6 c0             	movzx  eax,al
c00236a7:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00236ab:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00236ad:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00236b2:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00236b6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00236ba:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00236be:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00236c6:	83 c4 2c             	add    esp,0x2c
c00236c9:	5b                   	pop    ebx
c00236ca:	5e                   	pop    esi
c00236cb:	5f                   	pop    edi
c00236cc:	5d                   	pop    ebp
c00236cd:	e9 1e f9 ff ff       	jmp    c0022ff0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236d2:	3c 07                	cmp    al,0x7
c00236d4:	77 10                	ja     c00236e6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00236d6:	0f b6 db             	movzx  ebx,bl
c00236d9:	0f b6 d0             	movzx  edx,al
c00236dc:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00236e4:	eb 2d                	jmp    c0023713 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00236e6:	3c 0d                	cmp    al,0xd
c00236e8:	77 13                	ja     c00236fd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00236ea:	0f b6 db             	movzx  ebx,bl
c00236ed:	0f b6 c0             	movzx  eax,al
c00236f0:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00236f7:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00236fb:	eb 16                	jmp    c0023713 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00236fd:	3c 15                	cmp    al,0x15
c00236ff:	77 14                	ja     c0023715 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023701:	0f b6 db             	movzx  ebx,bl
c0023704:	0f b6 c0             	movzx  eax,al
c0023707:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c002370f:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023713:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023715:	83 c4 1c             	add    esp,0x1c
c0023718:	5b                   	pop    ebx
c0023719:	5e                   	pop    esi
c002371a:	5f                   	pop    edi
c002371b:	5d                   	pop    ebp
c002371c:	c3                   	ret    
c002371d:	90                   	nop

c002371e <IDE::detect()>:
c002371e:	55                   	push   ebp
c002371f:	57                   	push   edi
c0023720:	56                   	push   esi
c0023721:	53                   	push   ebx
c0023722:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023728:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002372f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023736:	0f 85 be 02 00 00    	jne    c00239fa <IDE::detect()+0x2dc>
c002373c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023743:	31 f6                	xor    esi,esi
c0023745:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002374d:	31 ed                	xor    ebp,ebp
c002374f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023753:	c1 e0 06             	shl    eax,0x6
c0023756:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002375e:	89 e8                	mov    eax,ebp
c0023760:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023764:	c1 e0 04             	shl    eax,0x4
c0023767:	83 c8 a0             	or     eax,0xffffffa0
c002376a:	0f b6 c0             	movzx  eax,al
c002376d:	50                   	push   eax
c002376e:	6a 06                	push   0x6
c0023770:	56                   	push   esi
c0023771:	53                   	push   ebx
c0023772:	e8 79 f8 ff ff       	call   c0022ff0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023777:	83 c4 0c             	add    esp,0xc
c002377a:	6a 0c                	push   0xc
c002377c:	56                   	push   esi
c002377d:	53                   	push   ebx
c002377e:	e8 2d f9 ff ff       	call   c00230b0 <IDE::read(unsigned char, unsigned char)>
c0023783:	83 c4 0c             	add    esp,0xc
c0023786:	6a 0c                	push   0xc
c0023788:	56                   	push   esi
c0023789:	53                   	push   ebx
c002378a:	e8 21 f9 ff ff       	call   c00230b0 <IDE::read(unsigned char, unsigned char)>
c002378f:	83 c4 0c             	add    esp,0xc
c0023792:	6a 0c                	push   0xc
c0023794:	56                   	push   esi
c0023795:	53                   	push   ebx
c0023796:	e8 15 f9 ff ff       	call   c00230b0 <IDE::read(unsigned char, unsigned char)>
c002379b:	83 c4 0c             	add    esp,0xc
c002379e:	6a 0c                	push   0xc
c00237a0:	56                   	push   esi
c00237a1:	53                   	push   ebx
c00237a2:	e8 09 f9 ff ff       	call   c00230b0 <IDE::read(unsigned char, unsigned char)>
c00237a7:	68 ec 00 00 00       	push   0xec
c00237ac:	6a 07                	push   0x7
c00237ae:	56                   	push   esi
c00237af:	53                   	push   ebx
c00237b0:	e8 3b f8 ff ff       	call   c0022ff0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237b5:	83 c4 1c             	add    esp,0x1c
c00237b8:	6a 0c                	push   0xc
c00237ba:	56                   	push   esi
c00237bb:	53                   	push   ebx
c00237bc:	e8 ef f8 ff ff       	call   c00230b0 <IDE::read(unsigned char, unsigned char)>
c00237c1:	83 c4 0c             	add    esp,0xc
c00237c4:	6a 0c                	push   0xc
c00237c6:	56                   	push   esi
c00237c7:	53                   	push   ebx
c00237c8:	e8 e3 f8 ff ff       	call   c00230b0 <IDE::read(unsigned char, unsigned char)>
c00237cd:	83 c4 0c             	add    esp,0xc
c00237d0:	6a 0c                	push   0xc
c00237d2:	56                   	push   esi
c00237d3:	53                   	push   ebx
c00237d4:	e8 d7 f8 ff ff       	call   c00230b0 <IDE::read(unsigned char, unsigned char)>
c00237d9:	83 c4 0c             	add    esp,0xc
c00237dc:	6a 0c                	push   0xc
c00237de:	56                   	push   esi
c00237df:	53                   	push   ebx
c00237e0:	e8 cb f8 ff ff       	call   c00230b0 <IDE::read(unsigned char, unsigned char)>
c00237e5:	83 c4 0c             	add    esp,0xc
c00237e8:	6a 0c                	push   0xc
c00237ea:	56                   	push   esi
c00237eb:	53                   	push   ebx
c00237ec:	e8 bf f8 ff ff       	call   c00230b0 <IDE::read(unsigned char, unsigned char)>
c00237f1:	83 c4 10             	add    esp,0x10
c00237f4:	84 c0                	test   al,al
c00237f6:	0f 84 8b 01 00 00    	je     c0023987 <IDE::detect()+0x269>
c00237fc:	31 ff                	xor    edi,edi
c00237fe:	50                   	push   eax
c00237ff:	6a 0c                	push   0xc
c0023801:	56                   	push   esi
c0023802:	53                   	push   ebx
c0023803:	e8 a8 f8 ff ff       	call   c00230b0 <IDE::read(unsigned char, unsigned char)>
c0023808:	83 c4 10             	add    esp,0x10
c002380b:	a8 01                	test   al,0x1
c002380d:	0f 85 8e 01 00 00    	jne    c00239a1 <IDE::detect()+0x283>
c0023813:	84 c0                	test   al,al
c0023815:	78 04                	js     c002381b <IDE::detect()+0xfd>
c0023817:	a8 08                	test   al,0x8
c0023819:	75 27                	jne    c0023842 <IDE::detect()+0x124>
c002381b:	47                   	inc    edi
c002381c:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023822:	7e da                	jle    c00237fe <IDE::detect()+0xe0>
c0023824:	50                   	push   eax
c0023825:	50                   	push   eax
c0023826:	6a 00                	push   0x0
c0023828:	68 40 4b 4c 00       	push   0x4c4b40
c002382d:	e8 00 ab ff ff       	call   c001e332 <nanoSleep(unsigned long long)>
c0023832:	83 c4 10             	add    esp,0x10
c0023835:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002383b:	75 c1                	jne    c00237fe <IDE::detect()+0xe0>
c002383d:	e9 5f 01 00 00       	jmp    c00239a1 <IDE::detect()+0x283>
c0023842:	31 c9                	xor    ecx,ecx
c0023844:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023848:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002384c:	83 ec 0c             	sub    esp,0xc
c002384f:	68 80 00 00 00       	push   0x80
c0023854:	57                   	push   edi
c0023855:	6a 00                	push   0x0
c0023857:	56                   	push   esi
c0023858:	53                   	push   ebx
c0023859:	e8 f4 fd ff ff       	call   c0023652 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002385e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023863:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023867:	89 d1                	mov    ecx,edx
c0023869:	c1 e0 06             	shl    eax,0x6
c002386c:	01 d8                	add    eax,ebx
c002386e:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023875:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002387c:	89 f2                	mov    edx,esi
c002387e:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023884:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023888:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002388e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023892:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023899:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00238a1:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00238a8:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00238b0:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00238b6:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00238bd:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00238c3:	8d 54 24 58          	lea    edx,[esp+0x58]
c00238c7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00238cb:	83 c4 20             	add    esp,0x20
c00238ce:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00238d1:	83 c0 02             	add    eax,0x2
c00238d4:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00238da:	83 c7 02             	add    edi,0x2
c00238dd:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00238e0:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00238e6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00238ea:	75 e2                	jne    c00238ce <IDE::detect()+0x1b0>
c00238ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00238f0:	c1 e0 06             	shl    eax,0x6
c00238f3:	01 d8                	add    eax,ebx
c00238f5:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00238fb:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023902:	66 c1 ea 09          	shr    dx,0x9
c0023906:	83 e2 01             	and    edx,0x1
c0023909:	84 c9                	test   cl,cl
c002390b:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023911:	75 2f                	jne    c0023942 <IDE::detect()+0x224>
c0023913:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0023919:	85 c0                	test   eax,eax
c002391b:	74 66                	je     c0023983 <IDE::detect()+0x265>
c002391d:	50                   	push   eax
c002391e:	55                   	push   ebp
c002391f:	56                   	push   esi
c0023920:	68 c7 cc 02 c0       	push   0xc002ccc7
c0023925:	e8 f2 f5 fe ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c002392a:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023931:	e8 0a bf fe ff       	call   c000f840 <malloc>
c0023936:	89 c7                	mov    edi,eax
c0023938:	89 04 24             	mov    DWORD PTR [esp],eax
c002393b:	e8 78 06 00 00       	call   c0023fb8 <ATA::ATA()>
c0023940:	eb 28                	jmp    c002396a <IDE::detect()+0x24c>
c0023942:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0023948:	55                   	push   ebp
c0023949:	56                   	push   esi
c002394a:	68 f6 cc 02 c0       	push   0xc002ccf6
c002394f:	e8 c8 f5 fe ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0023954:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002395b:	e8 e0 be fe ff       	call   c000f840 <malloc>
c0023960:	89 c7                	mov    edi,eax
c0023962:	89 04 24             	mov    DWORD PTR [esp],eax
c0023965:	e8 8e 0c 00 00       	call   c00245f8 <ATAPI::ATAPI()>
c002396a:	5a                   	pop    edx
c002396b:	59                   	pop    ecx
c002396c:	57                   	push   edi
c002396d:	53                   	push   ebx
c002396e:	e8 cf 09 ff ff       	call   c0014342 <Device::addChild(Device*)>
c0023973:	8b 07                	mov    eax,DWORD PTR [edi]
c0023975:	53                   	push   ebx
c0023976:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002397a:	6a 00                	push   0x0
c002397c:	57                   	push   edi
c002397d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023980:	83 c4 20             	add    esp,0x20
c0023983:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0023987:	4d                   	dec    ebp
c0023988:	74 0a                	je     c0023994 <IDE::detect()+0x276>
c002398a:	bd 01 00 00 00       	mov    ebp,0x1
c002398f:	e9 bb fd ff ff       	jmp    c002374f <IDE::detect()+0x31>
c0023994:	4e                   	dec    esi
c0023995:	74 63                	je     c00239fa <IDE::detect()+0x2dc>
c0023997:	be 01 00 00 00       	mov    esi,0x1
c002399c:	e9 ac fd ff ff       	jmp    c002374d <IDE::detect()+0x2f>
c00239a1:	50                   	push   eax
c00239a2:	6a 04                	push   0x4
c00239a4:	56                   	push   esi
c00239a5:	53                   	push   ebx
c00239a6:	e8 05 f7 ff ff       	call   c00230b0 <IDE::read(unsigned char, unsigned char)>
c00239ab:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00239af:	83 c4 0c             	add    esp,0xc
c00239b2:	6a 05                	push   0x5
c00239b4:	56                   	push   esi
c00239b5:	53                   	push   ebx
c00239b6:	e8 f5 f6 ff ff       	call   c00230b0 <IDE::read(unsigned char, unsigned char)>
c00239bb:	83 c4 10             	add    esp,0x10
c00239be:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00239c2:	80 fa 14             	cmp    dl,0x14
c00239c5:	75 04                	jne    c00239cb <IDE::detect()+0x2ad>
c00239c7:	3c eb                	cmp    al,0xeb
c00239c9:	eb 07                	jmp    c00239d2 <IDE::detect()+0x2b4>
c00239cb:	3c 96                	cmp    al,0x96
c00239cd:	75 b8                	jne    c0023987 <IDE::detect()+0x269>
c00239cf:	80 fa 69             	cmp    dl,0x69
c00239d2:	75 b3                	jne    c0023987 <IDE::detect()+0x269>
c00239d4:	68 a1 00 00 00       	push   0xa1
c00239d9:	6a 07                	push   0x7
c00239db:	56                   	push   esi
c00239dc:	53                   	push   ebx
c00239dd:	e8 0e f6 ff ff       	call   c0022ff0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239e2:	5f                   	pop    edi
c00239e3:	58                   	pop    eax
c00239e4:	6a 00                	push   0x0
c00239e6:	68 40 42 0f 00       	push   0xf4240
c00239eb:	e8 42 a9 ff ff       	call   c001e332 <nanoSleep(unsigned long long)>
c00239f0:	83 c4 10             	add    esp,0x10
c00239f3:	b1 01                	mov    cl,0x1
c00239f5:	e9 4a fe ff ff       	jmp    c0023844 <IDE::detect()+0x126>
c00239fa:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023a00:	5b                   	pop    ebx
c0023a01:	5e                   	pop    esi
c0023a02:	5f                   	pop    edi
c0023a03:	5d                   	pop    ebp
c0023a04:	c3                   	ret    
c0023a05:	90                   	nop

c0023a06 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023a06:	55                   	push   ebp
c0023a07:	57                   	push   edi
c0023a08:	56                   	push   esi
c0023a09:	53                   	push   ebx
c0023a0a:	83 ec 1c             	sub    esp,0x1c
c0023a0d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023a11:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023a15:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023a19:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023a1d:	88 c3                	mov    bl,al
c0023a1f:	84 c0                	test   al,al
c0023a21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023a25:	0f 84 67 01 00 00    	je     c0023b92 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023a2b:	83 ec 0c             	sub    esp,0xc
c0023a2e:	68 27 cd 02 c0       	push   0xc002cd27
c0023a33:	e8 e4 f4 fe ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0023a38:	83 c4 10             	add    esp,0x10
c0023a3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023a3f:	3c 01                	cmp    al,0x1
c0023a41:	75 17                	jne    c0023a5a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023a43:	83 ec 0c             	sub    esp,0xc
c0023a46:	b3 13                	mov    bl,0x13
c0023a48:	68 33 cd 02 c0       	push   0xc002cd33
c0023a4d:	e8 ca f4 fe ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0023a52:	83 c4 10             	add    esp,0x10
c0023a55:	e9 25 01 00 00       	jmp    c0023b7f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a5a:	3c 02                	cmp    al,0x2
c0023a5c:	0f 85 ef 00 00 00    	jne    c0023b51 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023a62:	d1 e6                	shl    esi,1
c0023a64:	09 ee                	or     esi,ebp
c0023a66:	52                   	push   edx
c0023a67:	89 f0                	mov    eax,esi
c0023a69:	6a 01                	push   0x1
c0023a6b:	0f b6 f0             	movzx  esi,al
c0023a6e:	c1 e6 06             	shl    esi,0x6
c0023a71:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023a79:	50                   	push   eax
c0023a7a:	57                   	push   edi
c0023a7b:	e8 30 f6 ff ff       	call   c00230b0 <IDE::read(unsigned char, unsigned char)>
c0023a80:	83 c4 10             	add    esp,0x10
c0023a83:	89 c6                	mov    esi,eax
c0023a85:	a8 01                	test   al,0x1
c0023a87:	74 12                	je     c0023a9b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023a89:	83 ec 0c             	sub    esp,0xc
c0023a8c:	b3 07                	mov    bl,0x7
c0023a8e:	68 48 cd 02 c0       	push   0xc002cd48
c0023a93:	e8 84 f4 fe ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0023a98:	83 c4 10             	add    esp,0x10
c0023a9b:	f7 c6 02 00 00 00    	test   esi,0x2
c0023aa1:	74 12                	je     c0023ab5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023aa3:	83 ec 0c             	sub    esp,0xc
c0023aa6:	b3 03                	mov    bl,0x3
c0023aa8:	68 66 cd 02 c0       	push   0xc002cd66
c0023aad:	e8 6a f4 fe ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0023ab2:	83 c4 10             	add    esp,0x10
c0023ab5:	f7 c6 04 00 00 00    	test   esi,0x4
c0023abb:	74 12                	je     c0023acf <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023abd:	83 ec 0c             	sub    esp,0xc
c0023ac0:	b3 14                	mov    bl,0x14
c0023ac2:	68 86 cd 02 c0       	push   0xc002cd86
c0023ac7:	e8 50 f4 fe ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0023acc:	83 c4 10             	add    esp,0x10
c0023acf:	f7 c6 08 00 00 00    	test   esi,0x8
c0023ad5:	74 12                	je     c0023ae9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023ad7:	83 ec 0c             	sub    esp,0xc
c0023ada:	b3 03                	mov    bl,0x3
c0023adc:	68 66 cd 02 c0       	push   0xc002cd66
c0023ae1:	e8 36 f4 fe ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0023ae6:	83 c4 10             	add    esp,0x10
c0023ae9:	f7 c6 10 00 00 00    	test   esi,0x10
c0023aef:	74 12                	je     c0023b03 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023af1:	83 ec 0c             	sub    esp,0xc
c0023af4:	b3 15                	mov    bl,0x15
c0023af6:	68 9e cd 02 c0       	push   0xc002cd9e
c0023afb:	e8 1c f4 fe ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0023b00:	83 c4 10             	add    esp,0x10
c0023b03:	f7 c6 20 00 00 00    	test   esi,0x20
c0023b09:	74 12                	je     c0023b1d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023b0b:	83 ec 0c             	sub    esp,0xc
c0023b0e:	b3 03                	mov    bl,0x3
c0023b10:	68 66 cd 02 c0       	push   0xc002cd66
c0023b15:	e8 02 f4 fe ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0023b1a:	83 c4 10             	add    esp,0x10
c0023b1d:	f7 c6 40 00 00 00    	test   esi,0x40
c0023b23:	74 12                	je     c0023b37 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023b25:	83 ec 0c             	sub    esp,0xc
c0023b28:	b3 16                	mov    bl,0x16
c0023b2a:	68 b8 cd 02 c0       	push   0xc002cdb8
c0023b2f:	e8 e8 f3 fe ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0023b34:	83 c4 10             	add    esp,0x10
c0023b37:	89 f0                	mov    eax,esi
c0023b39:	84 c0                	test   al,al
c0023b3b:	79 42                	jns    c0023b7f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b3d:	83 ec 0c             	sub    esp,0xc
c0023b40:	b3 0d                	mov    bl,0xd
c0023b42:	68 d9 cd 02 c0       	push   0xc002cdd9
c0023b47:	e8 d0 f3 fe ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0023b4c:	83 c4 10             	add    esp,0x10
c0023b4f:	eb 2e                	jmp    c0023b7f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b51:	3c 03                	cmp    al,0x3
c0023b53:	75 14                	jne    c0023b69 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023b55:	83 ec 0c             	sub    esp,0xc
c0023b58:	b3 17                	mov    bl,0x17
c0023b5a:	68 ed cd 02 c0       	push   0xc002cded
c0023b5f:	e8 b8 f3 fe ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0023b64:	83 c4 10             	add    esp,0x10
c0023b67:	eb 16                	jmp    c0023b7f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b69:	3c 04                	cmp    al,0x4
c0023b6b:	75 12                	jne    c0023b7f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b6d:	83 ec 0c             	sub    esp,0xc
c0023b70:	b3 08                	mov    bl,0x8
c0023b72:	68 03 ce 02 c0       	push   0xc002ce03
c0023b77:	e8 a0 f3 fe ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0023b7c:	83 c4 10             	add    esp,0x10
c0023b7f:	50                   	push   eax
c0023b80:	50                   	push   eax
c0023b81:	0f b6 c3             	movzx  eax,bl
c0023b84:	50                   	push   eax
c0023b85:	68 1b ce 02 c0       	push   0xc002ce1b
c0023b8a:	e8 8d f3 fe ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0023b8f:	83 c4 10             	add    esp,0x10
c0023b92:	83 c4 1c             	add    esp,0x1c
c0023b95:	88 d8                	mov    al,bl
c0023b97:	5b                   	pop    ebx
c0023b98:	5e                   	pop    esi
c0023b99:	5f                   	pop    edi
c0023b9a:	5d                   	pop    ebp
c0023b9b:	c3                   	ret    

c0023b9c <IDE::polling(unsigned char, unsigned int)>:
c0023b9c:	57                   	push   edi
c0023b9d:	56                   	push   esi
c0023b9e:	53                   	push   ebx
c0023b9f:	bb 04 00 00 00       	mov    ebx,0x4
c0023ba4:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023ba8:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023bad:	52                   	push   edx
c0023bae:	6a 0c                	push   0xc
c0023bb0:	56                   	push   esi
c0023bb1:	57                   	push   edi
c0023bb2:	e8 f9 f4 ff ff       	call   c00230b0 <IDE::read(unsigned char, unsigned char)>
c0023bb7:	83 c4 10             	add    esp,0x10
c0023bba:	4b                   	dec    ebx
c0023bbb:	75 f0                	jne    c0023bad <IDE::polling(unsigned char, unsigned int)+0x11>
c0023bbd:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023bc2:	50                   	push   eax
c0023bc3:	6a 0c                	push   0xc
c0023bc5:	56                   	push   esi
c0023bc6:	57                   	push   edi
c0023bc7:	e8 e4 f4 ff ff       	call   c00230b0 <IDE::read(unsigned char, unsigned char)>
c0023bcc:	83 c4 10             	add    esp,0x10
c0023bcf:	a8 01                	test   al,0x1
c0023bd1:	74 12                	je     c0023be5 <IDE::polling(unsigned char, unsigned int)+0x49>
c0023bd3:	83 ec 0c             	sub    esp,0xc
c0023bd6:	68 35 ce 02 c0       	push   0xc002ce35
c0023bdb:	e8 3c f3 fe ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0023be0:	83 c4 10             	add    esp,0x10
c0023be3:	eb 17                	jmp    c0023bfc <IDE::polling(unsigned char, unsigned int)+0x60>
c0023be5:	a8 20                	test   al,0x20
c0023be7:	75 0f                	jne    c0023bf8 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023be9:	4b                   	dec    ebx
c0023bea:	74 10                	je     c0023bfc <IDE::polling(unsigned char, unsigned int)+0x60>
c0023bec:	84 c0                	test   al,al
c0023bee:	78 d2                	js     c0023bc2 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023bf0:	a8 08                	test   al,0x8
c0023bf2:	74 ce                	je     c0023bc2 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023bf4:	31 c0                	xor    eax,eax
c0023bf6:	eb 06                	jmp    c0023bfe <IDE::polling(unsigned char, unsigned int)+0x62>
c0023bf8:	b0 01                	mov    al,0x1
c0023bfa:	eb 02                	jmp    c0023bfe <IDE::polling(unsigned char, unsigned int)+0x62>
c0023bfc:	b0 02                	mov    al,0x2
c0023bfe:	5b                   	pop    ebx
c0023bff:	5e                   	pop    esi
c0023c00:	5f                   	pop    edi
c0023c01:	c3                   	ret    

c0023c02 <SATABus::close(int, int, void*)>:
c0023c02:	31 c0                	xor    eax,eax
c0023c04:	c3                   	ret    
c0023c05:	90                   	nop

c0023c06 <SATABus::detect()>:
c0023c06:	c3                   	ret    
c0023c07:	90                   	nop

c0023c08 <SATABus::SATABus()>:
c0023c08:	83 ec 0c             	sub    esp,0xc
c0023c0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c0f:	83 ec 08             	sub    esp,0x8
c0023c12:	68 78 ce 02 c0       	push   0xc002ce78
c0023c17:	50                   	push   eax
c0023c18:	e8 b1 0a ff ff       	call   c00146ce <HardDiskController::HardDiskController(char const*)>
c0023c1d:	83 c4 10             	add    esp,0x10
c0023c20:	ba 34 cf 02 c0       	mov    edx,0xc002cf34
c0023c25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c29:	89 10                	mov    DWORD PTR [eax],edx
c0023c2b:	83 ec 0c             	sub    esp,0xc
c0023c2e:	6a 50                	push   0x50
c0023c30:	e8 dc c3 fe ff       	call   c0010011 <Phys::allocateContiguousPages(int)>
c0023c35:	83 c4 10             	add    esp,0x10
c0023c38:	89 c2                	mov    edx,eax
c0023c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c3e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023c44:	83 ec 0c             	sub    esp,0xc
c0023c47:	6a 50                	push   0x50
c0023c49:	e8 3d df fe ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0023c4e:	83 c4 10             	add    esp,0x10
c0023c51:	89 c2                	mov    edx,eax
c0023c53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c57:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023c5d:	e8 c4 e1 fe ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0023c62:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023c66:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023c6c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023c70:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023c76:	83 ec 0c             	sub    esp,0xc
c0023c79:	6a 03                	push   0x3
c0023c7b:	6a 50                	push   0x50
c0023c7d:	51                   	push   ecx
c0023c7e:	52                   	push   edx
c0023c7f:	50                   	push   eax
c0023c80:	e8 d1 e9 fe ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023c85:	83 c4 20             	add    esp,0x20
c0023c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c8c:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c96:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023c9c:	83 ec 04             	sub    esp,0x4
c0023c9f:	52                   	push   edx
c0023ca0:	50                   	push   eax
c0023ca1:	68 9c ce 02 c0       	push   0xc002ce9c
c0023ca6:	e8 71 f2 fe ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0023cab:	83 c4 10             	add    esp,0x10
c0023cae:	90                   	nop
c0023caf:	83 c4 0c             	add    esp,0xc
c0023cb2:	c3                   	ret    
c0023cb3:	90                   	nop

c0023cb4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023cb4:	83 ec 0c             	sub    esp,0xc
c0023cb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023cbb:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023cbe:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023cc1:	09 c2                	or     edx,eax
c0023cc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cc7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023ccd:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023ccf:	31 c0                	xor    eax,eax
c0023cd1:	c1 e9 08             	shr    ecx,0x8
c0023cd4:	83 e1 0f             	and    ecx,0xf
c0023cd7:	39 c8                	cmp    eax,ecx
c0023cd9:	74 0a                	je     c0023ce5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023cdb:	f6 c2 01             	test   dl,0x1
c0023cde:	74 18                	je     c0023cf8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023ce0:	d1 ea                	shr    edx,1
c0023ce2:	40                   	inc    eax
c0023ce3:	eb f2                	jmp    c0023cd7 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023ce5:	83 ec 0c             	sub    esp,0xc
c0023ce8:	68 c0 ce 02 c0       	push   0xc002cec0
c0023ced:	e8 cb 68 ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c0023cf2:	83 c4 10             	add    esp,0x10
c0023cf5:	83 c8 ff             	or     eax,0xffffffff
c0023cf8:	83 c4 0c             	add    esp,0xc
c0023cfb:	c3                   	ret    

c0023cfc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023cfc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023d00:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023d03:	89 c2                	mov    edx,eax
c0023d05:	c1 ea 08             	shr    edx,0x8
c0023d08:	83 e2 0f             	and    edx,0xf
c0023d0b:	fe ca                	dec    dl
c0023d0d:	75 31                	jne    c0023d40 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d0f:	83 e0 0f             	and    eax,0xf
c0023d12:	3c 03                	cmp    al,0x3
c0023d14:	75 2a                	jne    c0023d40 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d16:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023d19:	b8 02 00 00 00       	mov    eax,0x2
c0023d1e:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023d24:	74 1c                	je     c0023d42 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023d26:	b8 04 00 00 00       	mov    eax,0x4
c0023d2b:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023d31:	74 0f                	je     c0023d42 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023d33:	31 c0                	xor    eax,eax
c0023d35:	83 fa 03             	cmp    edx,0x3
c0023d38:	0f 94 c0             	sete   al
c0023d3b:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023d3f:	c3                   	ret    
c0023d40:	31 c0                	xor    eax,eax
c0023d42:	c3                   	ret    
c0023d43:	90                   	nop

c0023d44 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023d44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023d48:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d4b:	0f ba e2 0f          	bt     edx,0xf
c0023d4f:	72 f7                	jb     c0023d48 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023d51:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d54:	83 ca 10             	or     edx,0x10
c0023d57:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d5a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d5d:	83 ca 01             	or     edx,0x1
c0023d60:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d63:	c3                   	ret    

c0023d64 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023d64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023d68:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d6b:	83 e2 fe             	and    edx,0xfffffffe
c0023d6e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d71:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d74:	83 e2 ef             	and    edx,0xffffffef
c0023d77:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d7a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d7d:	0f ba e2 0e          	bt     edx,0xe
c0023d81:	72 f7                	jb     c0023d7a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023d83:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d86:	0f ba e2 0f          	bt     edx,0xf
c0023d8a:	72 ee                	jb     c0023d7a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023d8c:	c3                   	ret    
c0023d8d:	90                   	nop

c0023d8e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023d8e:	55                   	push   ebp
c0023d8f:	57                   	push   edi
c0023d90:	56                   	push   esi
c0023d91:	53                   	push   ebx
c0023d92:	83 ec 1c             	sub    esp,0x1c
c0023d95:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023d99:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023d9d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023da1:	53                   	push   ebx
c0023da2:	89 fd                	mov    ebp,edi
c0023da4:	56                   	push   esi
c0023da5:	c1 e5 0a             	shl    ebp,0xa
c0023da8:	e8 b7 ff ff ff       	call   c0023d64 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023dad:	83 ec 0c             	sub    esp,0xc
c0023db0:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023db6:	01 e8                	add    eax,ebp
c0023db8:	89 03                	mov    DWORD PTR [ebx],eax
c0023dba:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023dbc:	68 00 04 00 00       	push   0x400
c0023dc1:	6a 00                	push   0x0
c0023dc3:	50                   	push   eax
c0023dc4:	e8 af c9 fd ff       	call   c0000778 <memset>
c0023dc9:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023dcf:	89 fa                	mov    edx,edi
c0023dd1:	01 e8                	add    eax,ebp
c0023dd3:	c1 e7 0d             	shl    edi,0xd
c0023dd6:	89 03                	mov    DWORD PTR [ebx],eax
c0023dd8:	c1 e2 08             	shl    edx,0x8
c0023ddb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023de2:	81 c2 00 80 00 00    	add    edx,0x8000
c0023de8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023dec:	89 d0                	mov    eax,edx
c0023dee:	83 c4 1c             	add    esp,0x1c
c0023df1:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023df7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023dfa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023dfd:	68 00 01 00 00       	push   0x100
c0023e02:	6a 00                	push   0x0
c0023e04:	50                   	push   eax
c0023e05:	e8 6e c9 fd ff       	call   c0000778 <memset>
c0023e0a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023e0e:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023e14:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023e1a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023e1e:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023e21:	83 c4 10             	add    esp,0x10
c0023e24:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023e2b:	31 ff                	xor    edi,edi
c0023e2d:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023e33:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023e39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023e3d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023e43:	83 c5 20             	add    ebp,0x20
c0023e46:	01 f8                	add    eax,edi
c0023e48:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023e4b:	52                   	push   edx
c0023e4c:	68 00 01 00 00       	push   0x100
c0023e51:	6a 00                	push   0x0
c0023e53:	50                   	push   eax
c0023e54:	e8 1f c9 fd ff       	call   c0000778 <memset>
c0023e59:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023e5d:	83 c4 10             	add    esp,0x10
c0023e60:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023e66:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023e6d:	01 f8                	add    eax,edi
c0023e6f:	81 c7 00 01 00 00    	add    edi,0x100
c0023e75:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023e78:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023e7e:	75 b3                	jne    c0023e33 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023e80:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023e84:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023e88:	83 c4 1c             	add    esp,0x1c
c0023e8b:	5b                   	pop    ebx
c0023e8c:	5e                   	pop    esi
c0023e8d:	5f                   	pop    edi
c0023e8e:	5d                   	pop    ebp
c0023e8f:	e9 b0 fe ff ff       	jmp    c0023d44 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023e94 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023e94:	55                   	push   ebp
c0023e95:	57                   	push   edi
c0023e96:	56                   	push   esi
c0023e97:	53                   	push   ebx
c0023e98:	31 db                	xor    ebx,ebx
c0023e9a:	83 ec 0c             	sub    esp,0xc
c0023e9d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023ea1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023ea5:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023ea8:	f7 c7 01 00 00 00    	test   edi,0x1
c0023eae:	0f 84 aa 00 00 00    	je     c0023f5e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023eb4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023eb8:	89 d8                	mov    eax,ebx
c0023eba:	c1 e0 07             	shl    eax,0x7
c0023ebd:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023ec4:	55                   	push   ebp
c0023ec5:	56                   	push   esi
c0023ec6:	e8 31 fe ff ff       	call   c0023cfc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023ecb:	5a                   	pop    edx
c0023ecc:	83 f8 01             	cmp    eax,0x1
c0023ecf:	59                   	pop    ecx
c0023ed0:	75 30                	jne    c0023f02 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023ed2:	50                   	push   eax
c0023ed3:	50                   	push   eax
c0023ed4:	53                   	push   ebx
c0023ed5:	68 e5 ce 02 c0       	push   0xc002cee5
c0023eda:	e8 3d f0 fe ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0023edf:	83 c4 0c             	add    esp,0xc
c0023ee2:	53                   	push   ebx
c0023ee3:	55                   	push   ebp
c0023ee4:	56                   	push   esi
c0023ee5:	e8 a4 fe ff ff       	call   c0023d8e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023eea:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023ef1:	e8 4a b9 fe ff       	call   c000f840 <malloc>
c0023ef6:	89 c5                	mov    ebp,eax
c0023ef8:	89 04 24             	mov    DWORD PTR [esp],eax
c0023efb:	e8 60 0d 00 00       	call   c0024c60 <SATA::SATA()>
c0023f00:	eb 33                	jmp    c0023f35 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023f02:	83 f8 04             	cmp    eax,0x4
c0023f05:	75 47                	jne    c0023f4e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023f07:	50                   	push   eax
c0023f08:	50                   	push   eax
c0023f09:	53                   	push   ebx
c0023f0a:	68 fc ce 02 c0       	push   0xc002cefc
c0023f0f:	e8 08 f0 fe ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0023f14:	83 c4 0c             	add    esp,0xc
c0023f17:	53                   	push   ebx
c0023f18:	55                   	push   ebp
c0023f19:	56                   	push   esi
c0023f1a:	e8 6f fe ff ff       	call   c0023d8e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023f1f:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023f26:	e8 15 b9 fe ff       	call   c000f840 <malloc>
c0023f2b:	89 c5                	mov    ebp,eax
c0023f2d:	89 04 24             	mov    DWORD PTR [esp],eax
c0023f30:	e8 d7 10 00 00       	call   c002500c <SATAPI::SATAPI()>
c0023f35:	5a                   	pop    edx
c0023f36:	59                   	pop    ecx
c0023f37:	55                   	push   ebp
c0023f38:	56                   	push   esi
c0023f39:	e8 04 04 ff ff       	call   c0014342 <Device::addChild(Device*)>
c0023f3e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023f41:	56                   	push   esi
c0023f42:	6a 00                	push   0x0
c0023f44:	53                   	push   ebx
c0023f45:	55                   	push   ebp
c0023f46:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023f49:	83 c4 20             	add    esp,0x20
c0023f4c:	eb 10                	jmp    c0023f5e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023f4e:	50                   	push   eax
c0023f4f:	50                   	push   eax
c0023f50:	53                   	push   ebx
c0023f51:	68 15 cf 02 c0       	push   0xc002cf15
c0023f56:	e8 c1 ef fe ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0023f5b:	83 c4 10             	add    esp,0x10
c0023f5e:	d1 ef                	shr    edi,1
c0023f60:	43                   	inc    ebx
c0023f61:	83 fb 20             	cmp    ebx,0x20
c0023f64:	0f 85 3e ff ff ff    	jne    c0023ea8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023f6a:	83 c4 0c             	add    esp,0xc
c0023f6d:	5b                   	pop    ebx
c0023f6e:	5e                   	pop    esi
c0023f6f:	5f                   	pop    edi
c0023f70:	5d                   	pop    ebp
c0023f71:	c3                   	ret    

c0023f72 <SATABus::open(int, int, void*)>:
c0023f72:	83 ec 14             	sub    esp,0x14
c0023f75:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023f79:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023f7f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023f85:	52                   	push   edx
c0023f86:	50                   	push   eax
c0023f87:	e8 08 ff ff ff       	call   c0023e94 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023f8c:	31 c0                	xor    eax,eax
c0023f8e:	83 c4 1c             	add    esp,0x1c
c0023f91:	c3                   	ret    

c0023f92 <ATA::close(int, int, void*)>:
c0023f92:	83 ec 0c             	sub    esp,0xc
c0023f95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f99:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023f9f:	85 c0                	test   eax,eax
c0023fa1:	74 0c                	je     c0023faf <ATA::close(int, int, void*)+0x1d>
c0023fa3:	83 ec 0c             	sub    esp,0xc
c0023fa6:	8b 10                	mov    edx,DWORD PTR [eax]
c0023fa8:	50                   	push   eax
c0023fa9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023fac:	83 c4 10             	add    esp,0x10
c0023faf:	31 c0                	xor    eax,eax
c0023fb1:	83 c4 0c             	add    esp,0xc
c0023fb4:	c3                   	ret    
c0023fb5:	90                   	nop

c0023fb6 <ATA::powerSaving(PowerSavingLevel)>:
c0023fb6:	c3                   	ret    
c0023fb7:	90                   	nop

c0023fb8 <ATA::ATA()>:
c0023fb8:	83 ec 0c             	sub    esp,0xc
c0023fbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fbf:	83 ec 04             	sub    esp,0x4
c0023fc2:	68 00 02 00 00       	push   0x200
c0023fc7:	68 fd cf 02 c0       	push   0xc002cffd
c0023fcc:	50                   	push   eax
c0023fcd:	e8 94 07 ff ff       	call   c0014766 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023fd2:	83 c4 10             	add    esp,0x10
c0023fd5:	ba 80 cf 02 c0       	mov    edx,0xc002cf80
c0023fda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fde:	89 10                	mov    DWORD PTR [eax],edx
c0023fe0:	90                   	nop
c0023fe1:	83 c4 0c             	add    esp,0xc
c0023fe4:	c3                   	ret    
c0023fe5:	90                   	nop

c0023fe6 <ATA::flush(bool)>:
c0023fe6:	53                   	push   ebx
c0023fe7:	83 ec 08             	sub    esp,0x8
c0023fea:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023fef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023ff3:	19 c0                	sbb    eax,eax
c0023ff5:	83 e0 fd             	and    eax,0xfffffffd
c0023ff8:	05 ea 00 00 00       	add    eax,0xea
c0023ffd:	50                   	push   eax
c0023ffe:	6a 07                	push   0x7
c0024000:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024007:	50                   	push   eax
c0024008:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002400e:	e8 dd ef ff ff       	call   c0022ff0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024013:	83 c4 0c             	add    esp,0xc
c0024016:	6a 00                	push   0x0
c0024018:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002401f:	50                   	push   eax
c0024020:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024026:	e8 71 fb ff ff       	call   c0023b9c <IDE::polling(unsigned char, unsigned int)>
c002402b:	83 c4 18             	add    esp,0x18
c002402e:	5b                   	pop    ebx
c002402f:	c3                   	ret    

c0024030 <ATA::readyForCommand()>:
c0024030:	56                   	push   esi
c0024031:	53                   	push   ebx
c0024032:	31 db                	xor    ebx,ebx
c0024034:	50                   	push   eax
c0024035:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024039:	50                   	push   eax
c002403a:	6a 0c                	push   0xc
c002403c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024043:	50                   	push   eax
c0024044:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002404a:	e8 61 f0 ff ff       	call   c00230b0 <IDE::read(unsigned char, unsigned char)>
c002404f:	83 c4 10             	add    esp,0x10
c0024052:	a8 88                	test   al,0x88
c0024054:	74 23                	je     c0024079 <ATA::readyForCommand()+0x49>
c0024056:	43                   	inc    ebx
c0024057:	83 fb 63             	cmp    ebx,0x63
c002405a:	7e dd                	jle    c0024039 <ATA::readyForCommand()+0x9>
c002405c:	51                   	push   ecx
c002405d:	51                   	push   ecx
c002405e:	6a 00                	push   0x0
c0024060:	68 40 42 0f 00       	push   0xf4240
c0024065:	e8 c8 a2 ff ff       	call   c001e332 <nanoSleep(unsigned long long)>
c002406a:	83 c4 10             	add    esp,0x10
c002406d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024073:	75 c4                	jne    c0024039 <ATA::readyForCommand()+0x9>
c0024075:	31 c0                	xor    eax,eax
c0024077:	eb 02                	jmp    c002407b <ATA::readyForCommand()+0x4b>
c0024079:	b0 01                	mov    al,0x1
c002407b:	5a                   	pop    edx
c002407c:	5b                   	pop    ebx
c002407d:	5e                   	pop    esi
c002407e:	c3                   	ret    
c002407f:	90                   	nop

c0024080 <ATA::access(unsigned long long, int, void*, bool)>:
c0024080:	55                   	push   ebp
c0024081:	57                   	push   edi
c0024082:	56                   	push   esi
c0024083:	53                   	push   ebx
c0024084:	83 ec 2c             	sub    esp,0x2c
c0024087:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002408b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002408f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024093:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024097:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002409b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002409f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00240a3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00240a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00240ad:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00240b3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00240b7:	c1 e0 06             	shl    eax,0x6
c00240ba:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00240c2:	74 5d                	je     c0024121 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00240c4:	89 fa                	mov    edx,edi
c00240c6:	89 f0                	mov    eax,esi
c00240c8:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00240cc:	c1 ea 1c             	shr    edx,0x1c
c00240cf:	89 d1                	mov    ecx,edx
c00240d1:	09 c1                	or     ecx,eax
c00240d3:	74 25                	je     c00240fa <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00240d5:	31 ed                	xor    ebp,ebp
c00240d7:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00240de:	89 fa                	mov    edx,edi
c00240e0:	89 f0                	mov    eax,esi
c00240e2:	0f ad d0             	shrd   eax,edx,cl
c00240e5:	d3 ea                	shr    edx,cl
c00240e7:	f6 c1 20             	test   cl,0x20
c00240ea:	74 02                	je     c00240ee <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00240ec:	89 d0                	mov    eax,edx
c00240ee:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00240f2:	45                   	inc    ebp
c00240f3:	83 fd 06             	cmp    ebp,0x6
c00240f6:	75 df                	jne    c00240d7 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00240f8:	eb 76                	jmp    c0024170 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00240fa:	89 f0                	mov    eax,esi
c00240fc:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024101:	89 fa                	mov    edx,edi
c0024103:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002410a:	0f ac d0 10          	shrd   eax,edx,0x10
c002410e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024113:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024117:	c1 ee 18             	shr    esi,0x18
c002411a:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c002411f:	eb 56                	jmp    c0024177 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024121:	6a 00                	push   0x0
c0024123:	6a 3f                	push   0x3f
c0024125:	57                   	push   edi
c0024126:	56                   	push   esi
c0024127:	e8 90 29 00 00       	call   c0026abc <__umoddi3>
c002412c:	83 c4 10             	add    esp,0x10
c002412f:	40                   	inc    eax
c0024130:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024134:	6a 00                	push   0x0
c0024136:	68 f0 03 00 00       	push   0x3f0
c002413b:	57                   	push   edi
c002413c:	56                   	push   esi
c002413d:	e8 7a 28 00 00       	call   c00269bc <__udivdi3>
c0024142:	83 c4 10             	add    esp,0x10
c0024145:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002414a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024151:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024156:	6a 00                	push   0x0
c0024158:	6a 3f                	push   0x3f
c002415a:	57                   	push   edi
c002415b:	56                   	push   esi
c002415c:	e8 5b 28 00 00       	call   c00269bc <__udivdi3>
c0024161:	83 c4 10             	add    esp,0x10
c0024164:	89 c6                	mov    esi,eax
c0024166:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002416b:	83 e6 0f             	and    esi,0xf
c002416e:	eb 07                	jmp    c0024177 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024170:	31 f6                	xor    esi,esi
c0024172:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024177:	bf 01 00 00 00       	mov    edi,0x1
c002417c:	50                   	push   eax
c002417d:	6a 00                	push   0x0
c002417f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024186:	50                   	push   eax
c0024187:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002418b:	e8 6c f0 ff ff       	call   c00231fc <IDE::enableIRQs(unsigned char, bool)>
c0024190:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024193:	e8 98 fe ff ff       	call   c0024030 <ATA::readyForCommand()>
c0024198:	83 c4 10             	add    esp,0x10
c002419b:	84 c0                	test   al,al
c002419d:	0f 84 5a 02 00 00    	je     c00243fd <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00241a3:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00241a9:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00241af:	c1 e0 04             	shl    eax,0x4
c00241b2:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00241b9:	09 c6                	or     esi,eax
c00241bb:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00241c0:	75 05                	jne    c00241c7 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c00241c2:	83 ce a0             	or     esi,0xffffffa0
c00241c5:	eb 03                	jmp    c00241ca <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00241c7:	83 ce e0             	or     esi,0xffffffe0
c00241ca:	89 f0                	mov    eax,esi
c00241cc:	0f b6 f0             	movzx  esi,al
c00241cf:	56                   	push   esi
c00241d0:	6a 06                	push   0x6
c00241d2:	51                   	push   ecx
c00241d3:	52                   	push   edx
c00241d4:	e8 17 ee ff ff       	call   c0022ff0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241d9:	83 c4 10             	add    esp,0x10
c00241dc:	6a 00                	push   0x0
c00241de:	6a 01                	push   0x1
c00241e0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241e7:	50                   	push   eax
c00241e8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241ee:	e8 fd ed ff ff       	call   c0022ff0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241f3:	83 c4 10             	add    esp,0x10
c00241f6:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00241fb:	75 6e                	jne    c002426b <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c00241fd:	6a 00                	push   0x0
c00241ff:	6a 08                	push   0x8
c0024201:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024208:	50                   	push   eax
c0024209:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002420f:	e8 dc ed ff ff       	call   c0022ff0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024214:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024219:	50                   	push   eax
c002421a:	6a 09                	push   0x9
c002421c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024223:	50                   	push   eax
c0024224:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002422a:	e8 c1 ed ff ff       	call   c0022ff0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002422f:	83 c4 20             	add    esp,0x20
c0024232:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024237:	50                   	push   eax
c0024238:	6a 0a                	push   0xa
c002423a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024241:	50                   	push   eax
c0024242:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024248:	e8 a3 ed ff ff       	call   c0022ff0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002424d:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024252:	50                   	push   eax
c0024253:	6a 0b                	push   0xb
c0024255:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002425c:	50                   	push   eax
c002425d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024263:	e8 88 ed ff ff       	call   c0022ff0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024268:	83 c4 20             	add    esp,0x20
c002426b:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024270:	50                   	push   eax
c0024271:	6a 02                	push   0x2
c0024273:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002427a:	50                   	push   eax
c002427b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024281:	e8 6a ed ff ff       	call   c0022ff0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024286:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002428b:	50                   	push   eax
c002428c:	6a 03                	push   0x3
c002428e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024295:	50                   	push   eax
c0024296:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002429c:	e8 4f ed ff ff       	call   c0022ff0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242a1:	83 c4 20             	add    esp,0x20
c00242a4:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00242a9:	50                   	push   eax
c00242aa:	6a 04                	push   0x4
c00242ac:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242b3:	50                   	push   eax
c00242b4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242ba:	e8 31 ed ff ff       	call   c0022ff0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242bf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00242c4:	50                   	push   eax
c00242c5:	6a 05                	push   0x5
c00242c7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242ce:	50                   	push   eax
c00242cf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242d5:	e8 16 ed ff ff       	call   c0022ff0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242da:	83 c4 20             	add    esp,0x20
c00242dd:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00242e2:	0f 94 c0             	sete   al
c00242e5:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00242ea:	74 09                	je     c00242f5 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00242ec:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00242f3:	eb 07                	jmp    c00242fc <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00242f5:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00242fc:	0f b6 c0             	movzx  eax,al
c00242ff:	50                   	push   eax
c0024300:	6a 07                	push   0x7
c0024302:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024309:	50                   	push   eax
c002430a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024310:	e8 db ec ff ff       	call   c0022ff0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024315:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024319:	83 c4 10             	add    esp,0x10
c002431c:	85 f6                	test   esi,esi
c002431e:	0f 84 ba 00 00 00    	je     c00243de <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024324:	50                   	push   eax
c0024325:	6a 01                	push   0x1
c0024327:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002432e:	50                   	push   eax
c002432f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024335:	e8 62 f8 ff ff       	call   c0023b9c <IDE::polling(unsigned char, unsigned int)>
c002433a:	83 c4 10             	add    esp,0x10
c002433d:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024343:	84 c0                	test   al,al
c0024345:	74 2c                	je     c0024373 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024347:	0f b6 f8             	movzx  edi,al
c002434a:	0f b6 d2             	movzx  edx,dl
c002434d:	57                   	push   edi
c002434e:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024355:	50                   	push   eax
c0024356:	52                   	push   edx
c0024357:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002435d:	e8 a4 f6 ff ff       	call   c0023a06 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024362:	c7 04 24 58 cf 02 c0 	mov    DWORD PTR [esp],0xc002cf58
c0024369:	e8 ae eb fe ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c002436e:	e9 87 00 00 00       	jmp    c00243fa <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024373:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024378:	74 33                	je     c00243ad <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c002437a:	31 ed                	xor    ebp,ebp
c002437c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024380:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024384:	50                   	push   eax
c0024385:	50                   	push   eax
c0024386:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002438d:	50                   	push   eax
c002438e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024394:	e8 45 ec ff ff       	call   c0022fde <IDE::getBase(unsigned char)>
c0024399:	89 c2                	mov    edx,eax
c002439b:	89 f8                	mov    eax,edi
c002439d:	66 ef                	out    dx,ax
c002439f:	45                   	inc    ebp
c00243a0:	83 c4 10             	add    esp,0x10
c00243a3:	81 fd 00 01 00 00    	cmp    ebp,0x100
c00243a9:	75 d1                	jne    c002437c <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c00243ab:	eb 23                	jmp    c00243d0 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c00243ad:	0f b6 d2             	movzx  edx,dl
c00243b0:	51                   	push   ecx
c00243b1:	51                   	push   ecx
c00243b2:	52                   	push   edx
c00243b3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243b9:	e8 20 ec ff ff       	call   c0022fde <IDE::getBase(unsigned char)>
c00243be:	b9 00 01 00 00       	mov    ecx,0x100
c00243c3:	89 c2                	mov    edx,eax
c00243c5:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00243c9:	fc                   	cld    
c00243ca:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00243cd:	83 c4 10             	add    esp,0x10
c00243d0:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00243d8:	4e                   	dec    esi
c00243d9:	e9 3e ff ff ff       	jmp    c002431c <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c00243de:	31 ff                	xor    edi,edi
c00243e0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00243e5:	74 16                	je     c00243fd <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00243e7:	50                   	push   eax
c00243e8:	50                   	push   eax
c00243e9:	31 c0                	xor    eax,eax
c00243eb:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00243f0:	0f 94 c0             	sete   al
c00243f3:	50                   	push   eax
c00243f4:	53                   	push   ebx
c00243f5:	e8 ec fb ff ff       	call   c0023fe6 <ATA::flush(bool)>
c00243fa:	83 c4 10             	add    esp,0x10
c00243fd:	83 c4 2c             	add    esp,0x2c
c0024400:	89 f8                	mov    eax,edi
c0024402:	5b                   	pop    ebx
c0024403:	5e                   	pop    esi
c0024404:	5f                   	pop    edi
c0024405:	5d                   	pop    ebp
c0024406:	c3                   	ret    
c0024407:	90                   	nop

c0024408 <ATA::read(unsigned long long, int, void*)>:
c0024408:	57                   	push   edi
c0024409:	b8 04 00 00 00       	mov    eax,0x4
c002440e:	56                   	push   esi
c002440f:	53                   	push   ebx
c0024410:	83 ec 10             	sub    esp,0x10
c0024413:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024417:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002441b:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002441e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024422:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024426:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002442c:	77 3b                	ja     c0024469 <ATA::read(unsigned long long, int, void*)+0x61>
c002442e:	b8 06 00 00 00       	mov    eax,0x6
c0024433:	85 d2                	test   edx,edx
c0024435:	74 32                	je     c0024469 <ATA::read(unsigned long long, int, void*)+0x61>
c0024437:	50                   	push   eax
c0024438:	50                   	push   eax
c0024439:	6a 00                	push   0x0
c002443b:	52                   	push   edx
c002443c:	53                   	push   ebx
c002443d:	57                   	push   edi
c002443e:	56                   	push   esi
c002443f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024443:	e8 38 fc ff ff       	call   c0024080 <ATA::access(unsigned long long, int, void*, bool)>
c0024448:	83 c4 20             	add    esp,0x20
c002444b:	85 c0                	test   eax,eax
c002444d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024451:	75 11                	jne    c0024464 <ATA::read(unsigned long long, int, void*)+0x5c>
c0024453:	01 1d 08 29 03 c0    	add    DWORD PTR ds:0xc0032908,ebx
c0024459:	e8 82 c5 fe ff       	call   c00109e0 <VgaText::updateDiskUsage()>
c002445e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024462:	eb 05                	jmp    c0024469 <ATA::read(unsigned long long, int, void*)+0x61>
c0024464:	b8 01 00 00 00       	mov    eax,0x1
c0024469:	83 c4 10             	add    esp,0x10
c002446c:	5b                   	pop    ebx
c002446d:	5e                   	pop    esi
c002446e:	5f                   	pop    edi
c002446f:	c3                   	ret    

c0024470 <ATA::write(unsigned long long, int, void*)>:
c0024470:	57                   	push   edi
c0024471:	b8 04 00 00 00       	mov    eax,0x4
c0024476:	56                   	push   esi
c0024477:	53                   	push   ebx
c0024478:	83 ec 10             	sub    esp,0x10
c002447b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002447f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024483:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024486:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002448a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002448e:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024494:	77 3b                	ja     c00244d1 <ATA::write(unsigned long long, int, void*)+0x61>
c0024496:	b8 06 00 00 00       	mov    eax,0x6
c002449b:	85 d2                	test   edx,edx
c002449d:	74 32                	je     c00244d1 <ATA::write(unsigned long long, int, void*)+0x61>
c002449f:	50                   	push   eax
c00244a0:	50                   	push   eax
c00244a1:	6a 01                	push   0x1
c00244a3:	52                   	push   edx
c00244a4:	53                   	push   ebx
c00244a5:	57                   	push   edi
c00244a6:	56                   	push   esi
c00244a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00244ab:	e8 d0 fb ff ff       	call   c0024080 <ATA::access(unsigned long long, int, void*, bool)>
c00244b0:	83 c4 20             	add    esp,0x20
c00244b3:	85 c0                	test   eax,eax
c00244b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00244b9:	75 11                	jne    c00244cc <ATA::write(unsigned long long, int, void*)+0x5c>
c00244bb:	01 1d 04 29 03 c0    	add    DWORD PTR ds:0xc0032904,ebx
c00244c1:	e8 1a c5 fe ff       	call   c00109e0 <VgaText::updateDiskUsage()>
c00244c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00244ca:	eb 05                	jmp    c00244d1 <ATA::write(unsigned long long, int, void*)+0x61>
c00244cc:	b8 01 00 00 00       	mov    eax,0x1
c00244d1:	83 c4 10             	add    esp,0x10
c00244d4:	5b                   	pop    ebx
c00244d5:	5e                   	pop    esi
c00244d6:	5f                   	pop    edi
c00244d7:	c3                   	ret    

c00244d8 <ATA::detectCHS()>:
c00244d8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00244dc:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00244e2:	c1 e0 06             	shl    eax,0x6
c00244e5:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00244eb:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00244f5:	c7 44 24 04 63 cf 02 c0 	mov    DWORD PTR [esp+0x4],0xc002cf63
c00244fd:	e9 bb 60 ff ff       	jmp    c001a5bd <Krnl::panic(char const*)>

c0024502 <ATA::open(int, int, void*)>:
c0024502:	53                   	push   ebx
c0024503:	83 ec 08             	sub    esp,0x8
c0024506:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002450a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002450e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024512:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024518:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002451e:	c1 e0 06             	shl    eax,0x6
c0024521:	01 d0                	add    eax,edx
c0024523:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002452a:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024530:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024537:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024541:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024547:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002454e:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024555:	75 0c                	jne    c0024563 <ATA::open(int, int, void*)+0x61>
c0024557:	83 ec 0c             	sub    esp,0xc
c002455a:	53                   	push   ebx
c002455b:	e8 78 ff ff ff       	call   c00244d8 <ATA::detectCHS()>
c0024560:	83 c4 10             	add    esp,0x10
c0024563:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024569:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002456f:	c1 e0 06             	shl    eax,0x6
c0024572:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024579:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024583:	d1 e8                	shr    eax,1
c0024585:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002458b:	6a 04                	push   0x4
c002458d:	6a 0c                	push   0xc
c002458f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024596:	50                   	push   eax
c0024597:	52                   	push   edx
c0024598:	e8 53 ea ff ff       	call   c0022ff0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002459d:	90                   	nop
c002459e:	90                   	nop
c002459f:	6a 00                	push   0x0
c00245a1:	6a 0c                	push   0xc
c00245a3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245aa:	50                   	push   eax
c00245ab:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00245b1:	e8 3a ea ff ff       	call   c0022ff0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245b6:	83 c4 14             	add    esp,0x14
c00245b9:	53                   	push   ebx
c00245ba:	e8 0f 02 ff ff       	call   c00147ce <PhysicalDisk::startCache()>
c00245bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00245c2:	e8 7d 23 ff ff       	call   c0016944 <createPartitionsForDisk(PhysicalDisk*)>
c00245c7:	31 c0                	xor    eax,eax
c00245c9:	83 c4 18             	add    esp,0x18
c00245cc:	5b                   	pop    ebx
c00245cd:	c3                   	ret    

c00245ce <ATAPI::write(unsigned long long, int, void*)>:
c00245ce:	b8 03 00 00 00       	mov    eax,0x3
c00245d3:	c3                   	ret    

c00245d4 <ATAPI::close(int, int, void*)>:
c00245d4:	83 ec 0c             	sub    esp,0xc
c00245d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245db:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00245e1:	85 c0                	test   eax,eax
c00245e3:	74 0c                	je     c00245f1 <ATAPI::close(int, int, void*)+0x1d>
c00245e5:	83 ec 0c             	sub    esp,0xc
c00245e8:	8b 10                	mov    edx,DWORD PTR [eax]
c00245ea:	50                   	push   eax
c00245eb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00245ee:	83 c4 10             	add    esp,0x10
c00245f1:	31 c0                	xor    eax,eax
c00245f3:	83 c4 0c             	add    esp,0xc
c00245f6:	c3                   	ret    
c00245f7:	90                   	nop

c00245f8 <ATAPI::ATAPI()>:
c00245f8:	83 ec 0c             	sub    esp,0xc
c00245fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245ff:	83 ec 04             	sub    esp,0x4
c0024602:	68 00 08 00 00       	push   0x800
c0024607:	68 9d d0 02 c0       	push   0xc002d09d
c002460c:	50                   	push   eax
c002460d:	e8 54 01 ff ff       	call   c0014766 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024612:	83 c4 10             	add    esp,0x10
c0024615:	ba b8 cf 02 c0       	mov    edx,0xc002cfb8
c002461a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002461e:	89 10                	mov    DWORD PTR [eax],edx
c0024620:	90                   	nop
c0024621:	83 c4 0c             	add    esp,0xc
c0024624:	c3                   	ret    
c0024625:	90                   	nop

c0024626 <ATAPI::readyForCommand()>:
c0024626:	56                   	push   esi
c0024627:	53                   	push   ebx
c0024628:	31 db                	xor    ebx,ebx
c002462a:	50                   	push   eax
c002462b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002462f:	50                   	push   eax
c0024630:	6a 0c                	push   0xc
c0024632:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024639:	50                   	push   eax
c002463a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024640:	e8 6b ea ff ff       	call   c00230b0 <IDE::read(unsigned char, unsigned char)>
c0024645:	83 c4 10             	add    esp,0x10
c0024648:	a8 88                	test   al,0x88
c002464a:	74 23                	je     c002466f <ATAPI::readyForCommand()+0x49>
c002464c:	43                   	inc    ebx
c002464d:	83 fb 63             	cmp    ebx,0x63
c0024650:	7e dd                	jle    c002462f <ATAPI::readyForCommand()+0x9>
c0024652:	51                   	push   ecx
c0024653:	51                   	push   ecx
c0024654:	6a 00                	push   0x0
c0024656:	68 40 42 0f 00       	push   0xf4240
c002465b:	e8 d2 9c ff ff       	call   c001e332 <nanoSleep(unsigned long long)>
c0024660:	83 c4 10             	add    esp,0x10
c0024663:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024669:	75 c4                	jne    c002462f <ATAPI::readyForCommand()+0x9>
c002466b:	31 c0                	xor    eax,eax
c002466d:	eb 02                	jmp    c0024671 <ATAPI::readyForCommand()+0x4b>
c002466f:	b0 01                	mov    al,0x1
c0024671:	5a                   	pop    edx
c0024672:	5b                   	pop    ebx
c0024673:	5e                   	pop    esi
c0024674:	c3                   	ret    
c0024675:	90                   	nop

c0024676 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024676:	55                   	push   ebp
c0024677:	57                   	push   edi
c0024678:	56                   	push   esi
c0024679:	53                   	push   ebx
c002467a:	83 ec 20             	sub    esp,0x20
c002467d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024681:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024685:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024689:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002468d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024691:	6a 01                	push   0x1
c0024693:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002469a:	50                   	push   eax
c002469b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246a1:	e8 56 eb ff ff       	call   c00231fc <IDE::enableIRQs(unsigned char, bool)>
c00246a6:	5e                   	pop    esi
c00246a7:	58                   	pop    eax
c00246a8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246af:	50                   	push   eax
c00246b0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246b6:	e8 0f e9 ff ff       	call   c0022fca <IDE::prepareInterrupt(unsigned char)>
c00246bb:	89 3c 24             	mov    DWORD PTR [esp],edi
c00246be:	e8 63 ff ff ff       	call   c0024626 <ATAPI::readyForCommand()>
c00246c3:	83 c4 10             	add    esp,0x10
c00246c6:	84 c0                	test   al,al
c00246c8:	75 0a                	jne    c00246d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00246ca:	bb 01 00 00 00       	mov    ebx,0x1
c00246cf:	e9 57 02 00 00       	jmp    c002492b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00246d4:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00246da:	c1 e0 04             	shl    eax,0x4
c00246dd:	0f b6 c0             	movzx  eax,al
c00246e0:	50                   	push   eax
c00246e1:	6a 06                	push   0x6
c00246e3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246ea:	50                   	push   eax
c00246eb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246f1:	e8 fa e8 ff ff       	call   c0022ff0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246f6:	6a 00                	push   0x0
c00246f8:	6a 01                	push   0x1
c00246fa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024701:	50                   	push   eax
c0024702:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024708:	e8 e3 e8 ff ff       	call   c0022ff0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002470d:	83 c4 20             	add    esp,0x20
c0024710:	0f b6 c3             	movzx  eax,bl
c0024713:	0f b6 df             	movzx  ebx,bh
c0024716:	50                   	push   eax
c0024717:	6a 04                	push   0x4
c0024719:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024720:	50                   	push   eax
c0024721:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024727:	e8 c4 e8 ff ff       	call   c0022ff0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002472c:	53                   	push   ebx
c002472d:	6a 05                	push   0x5
c002472f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024736:	50                   	push   eax
c0024737:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002473d:	e8 ae e8 ff ff       	call   c0022ff0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024742:	83 c4 20             	add    esp,0x20
c0024745:	68 a0 00 00 00       	push   0xa0
c002474a:	6a 07                	push   0x7
c002474c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024753:	50                   	push   eax
c0024754:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002475a:	e8 91 e8 ff ff       	call   c0022ff0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002475f:	83 c4 0c             	add    esp,0xc
c0024762:	6a 01                	push   0x1
c0024764:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002476b:	50                   	push   eax
c002476c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024772:	e8 25 f4 ff ff       	call   c0023b9c <IDE::polling(unsigned char, unsigned int)>
c0024777:	83 c4 10             	add    esp,0x10
c002477a:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024780:	84 c0                	test   al,al
c0024782:	74 23                	je     c00247a7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024784:	0f b6 d8             	movzx  ebx,al
c0024787:	0f b6 d2             	movzx  edx,dl
c002478a:	53                   	push   ebx
c002478b:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024792:	50                   	push   eax
c0024793:	52                   	push   edx
c0024794:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002479a:	e8 67 f2 ff ff       	call   c0023a06 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002479f:	83 c4 10             	add    esp,0x10
c00247a2:	e9 84 01 00 00       	jmp    c002492b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00247a7:	0f b6 d2             	movzx  edx,dl
c00247aa:	53                   	push   ebx
c00247ab:	53                   	push   ebx
c00247ac:	52                   	push   edx
c00247ad:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247b3:	e8 26 e8 ff ff       	call   c0022fde <IDE::getBase(unsigned char)>
c00247b8:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00247bc:	b9 06 00 00 00       	mov    ecx,0x6
c00247c1:	89 c2                	mov    edx,eax
c00247c3:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00247c6:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00247ca:	83 c4 10             	add    esp,0x10
c00247cd:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00247d3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00247da:	85 db                	test   ebx,ebx
c00247dc:	0f 84 ec 00 00 00    	je     c00248ce <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00247e2:	51                   	push   ecx
c00247e3:	51                   	push   ecx
c00247e4:	52                   	push   edx
c00247e5:	50                   	push   eax
c00247e6:	e8 73 e9 ff ff       	call   c002315e <IDE::waitInterrupt(unsigned char)>
c00247eb:	83 c4 10             	add    esp,0x10
c00247ee:	84 c0                	test   al,al
c00247f0:	0f 84 d4 fe ff ff    	je     c00246ca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00247f6:	56                   	push   esi
c00247f7:	56                   	push   esi
c00247f8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247ff:	50                   	push   eax
c0024800:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024806:	e8 bf e7 ff ff       	call   c0022fca <IDE::prepareInterrupt(unsigned char)>
c002480b:	83 c4 0c             	add    esp,0xc
c002480e:	6a 04                	push   0x4
c0024810:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024817:	50                   	push   eax
c0024818:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002481e:	e8 8d e8 ff ff       	call   c00230b0 <IDE::read(unsigned char, unsigned char)>
c0024823:	83 c4 0c             	add    esp,0xc
c0024826:	89 c6                	mov    esi,eax
c0024828:	6a 05                	push   0x5
c002482a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024831:	50                   	push   eax
c0024832:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024838:	e8 73 e8 ff ff       	call   c00230b0 <IDE::read(unsigned char, unsigned char)>
c002483d:	89 f1                	mov    ecx,esi
c002483f:	0f b6 c0             	movzx  eax,al
c0024842:	0f b6 f1             	movzx  esi,cl
c0024845:	c1 e0 08             	shl    eax,0x8
c0024848:	09 c6                	or     esi,eax
c002484a:	d1 fe                	sar    esi,1
c002484c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024850:	83 c4 10             	add    esp,0x10
c0024853:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024858:	74 41                	je     c002489b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c002485a:	31 c9                	xor    ecx,ecx
c002485c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024862:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024869:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002486d:	75 0a                	jne    c0024879 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c002486f:	01 c9                	add    ecx,ecx
c0024871:	01 cd                	add    ebp,ecx
c0024873:	4b                   	dec    ebx
c0024874:	e9 54 ff ff ff       	jmp    c00247cd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024879:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002487e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024882:	51                   	push   ecx
c0024883:	51                   	push   ecx
c0024884:	52                   	push   edx
c0024885:	50                   	push   eax
c0024886:	e8 53 e7 ff ff       	call   c0022fde <IDE::getBase(unsigned char)>
c002488b:	89 c2                	mov    edx,eax
c002488d:	89 f0                	mov    eax,esi
c002488f:	66 ef                	out    dx,ax
c0024891:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024895:	83 c4 10             	add    esp,0x10
c0024898:	41                   	inc    ecx
c0024899:	eb c1                	jmp    c002485c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c002489b:	31 f6                	xor    esi,esi
c002489d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00248a3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00248aa:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00248ae:	75 06                	jne    c00248b6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00248b0:	01 f6                	add    esi,esi
c00248b2:	01 f5                	add    ebp,esi
c00248b4:	eb bd                	jmp    c0024873 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00248b6:	51                   	push   ecx
c00248b7:	51                   	push   ecx
c00248b8:	52                   	push   edx
c00248b9:	50                   	push   eax
c00248ba:	e8 1f e7 ff ff       	call   c0022fde <IDE::getBase(unsigned char)>
c00248bf:	89 c2                	mov    edx,eax
c00248c1:	66 ed                	in     ax,dx
c00248c3:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00248c8:	83 c4 10             	add    esp,0x10
c00248cb:	46                   	inc    esi
c00248cc:	eb cf                	jmp    c002489d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00248ce:	51                   	push   ecx
c00248cf:	51                   	push   ecx
c00248d0:	52                   	push   edx
c00248d1:	50                   	push   eax
c00248d2:	e8 87 e8 ff ff       	call   c002315e <IDE::waitInterrupt(unsigned char)>
c00248d7:	83 c4 10             	add    esp,0x10
c00248da:	84 c0                	test   al,al
c00248dc:	0f 84 e8 fd ff ff    	je     c00246ca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00248e2:	bb a0 86 01 00       	mov    ebx,0x186a0
c00248e7:	52                   	push   edx
c00248e8:	52                   	push   edx
c00248e9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248f0:	50                   	push   eax
c00248f1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248f7:	e8 ce e6 ff ff       	call   c0022fca <IDE::prepareInterrupt(unsigned char)>
c00248fc:	83 c4 10             	add    esp,0x10
c00248ff:	50                   	push   eax
c0024900:	50                   	push   eax
c0024901:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024908:	50                   	push   eax
c0024909:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002490f:	e8 ca e6 ff ff       	call   c0022fde <IDE::getBase(unsigned char)>
c0024914:	8d 50 07             	lea    edx,[eax+0x7]
c0024917:	ec                   	in     al,dx
c0024918:	83 c4 10             	add    esp,0x10
c002491b:	a8 88                	test   al,0x88
c002491d:	74 0a                	je     c0024929 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002491f:	4b                   	dec    ebx
c0024920:	75 dd                	jne    c00248ff <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024922:	bb 02 00 00 00       	mov    ebx,0x2
c0024927:	eb 02                	jmp    c002492b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024929:	31 db                	xor    ebx,ebx
c002492b:	83 c4 1c             	add    esp,0x1c
c002492e:	89 d8                	mov    eax,ebx
c0024930:	5b                   	pop    ebx
c0024931:	5e                   	pop    esi
c0024932:	5f                   	pop    edi
c0024933:	5d                   	pop    ebp
c0024934:	c3                   	ret    
c0024935:	90                   	nop

c0024936 <ATAPI::diskRemoved()>:
c0024936:	83 ec 18             	sub    esp,0x18
c0024939:	68 a9 d0 02 c0       	push   0xc002d0a9
c002493e:	e8 d9 e5 fe ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0024943:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024947:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c002494e:	83 c4 1c             	add    esp,0x1c
c0024951:	c3                   	ret    

c0024952 <ATAPI::eject()>:
c0024952:	57                   	push   edi
c0024953:	b9 03 00 00 00       	mov    ecx,0x3
c0024958:	53                   	push   ebx
c0024959:	83 ec 14             	sub    esp,0x14
c002495c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024960:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024964:	fc                   	cld    
c0024965:	31 c0                	xor    eax,eax
c0024967:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024969:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002496e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024973:	50                   	push   eax
c0024974:	50                   	push   eax
c0024975:	6a 00                	push   0x0
c0024977:	6a 00                	push   0x0
c0024979:	6a 00                	push   0x0
c002497b:	6a 02                	push   0x2
c002497d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024981:	50                   	push   eax
c0024982:	53                   	push   ebx
c0024983:	e8 ee fc ff ff       	call   c0024676 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024988:	83 c4 14             	add    esp,0x14
c002498b:	53                   	push   ebx
c002498c:	e8 a5 ff ff ff       	call   c0024936 <ATAPI::diskRemoved()>
c0024991:	83 c4 24             	add    esp,0x24
c0024994:	31 c0                	xor    eax,eax
c0024996:	5b                   	pop    ebx
c0024997:	5f                   	pop    edi
c0024998:	c3                   	ret    
c0024999:	90                   	nop

c002499a <ATAPI::diskInserted()>:
c002499a:	53                   	push   ebx
c002499b:	83 ec 14             	sub    esp,0x14
c002499e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00249a2:	68 c0 d0 02 c0       	push   0xc002d0c0
c00249a7:	e8 70 e5 fe ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c00249ac:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00249b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00249b6:	e8 13 fe fe ff       	call   c00147ce <PhysicalDisk::startCache()>
c00249bb:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00249bf:	83 c4 18             	add    esp,0x18
c00249c2:	5b                   	pop    ebx
c00249c3:	e9 7c 1f ff ff       	jmp    c0016944 <createPartitionsForDisk(PhysicalDisk*)>

c00249c8 <ATAPI::detectMedia()>:
c00249c8:	56                   	push   esi
c00249c9:	53                   	push   ebx
c00249ca:	83 ec 28             	sub    esp,0x28
c00249cd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00249d1:	6a 0c                	push   0xc
c00249d3:	6a 00                	push   0x0
c00249d5:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00249d9:	56                   	push   esi
c00249da:	e8 99 bd fd ff       	call   c0000778 <memset>
c00249df:	58                   	pop    eax
c00249e0:	5a                   	pop    edx
c00249e1:	6a 00                	push   0x0
c00249e3:	6a 00                	push   0x0
c00249e5:	6a 00                	push   0x0
c00249e7:	6a 00                	push   0x0
c00249e9:	56                   	push   esi
c00249ea:	53                   	push   ebx
c00249eb:	e8 86 fc ff ff       	call   c0024676 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00249f0:	83 c4 1c             	add    esp,0x1c
c00249f3:	6a 0c                	push   0xc
c00249f5:	6a 00                	push   0x0
c00249f7:	56                   	push   esi
c00249f8:	e8 7b bd fd ff       	call   c0000778 <memset>
c00249fd:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024a02:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024a07:	59                   	pop    ecx
c0024a08:	58                   	pop    eax
c0024a09:	6a 01                	push   0x1
c0024a0b:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024a0f:	50                   	push   eax
c0024a10:	6a 00                	push   0x0
c0024a12:	6a 12                	push   0x12
c0024a14:	56                   	push   esi
c0024a15:	53                   	push   ebx
c0024a16:	e8 5b fc ff ff       	call   c0024676 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a1b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024a1f:	83 c4 20             	add    esp,0x20
c0024a22:	83 e0 7f             	and    eax,0x7f
c0024a25:	3c 70                	cmp    al,0x70
c0024a27:	74 15                	je     c0024a3e <ATAPI::detectMedia()+0x76>
c0024a29:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a30:	75 0c                	jne    c0024a3e <ATAPI::detectMedia()+0x76>
c0024a32:	83 ec 0c             	sub    esp,0xc
c0024a35:	53                   	push   ebx
c0024a36:	e8 5f ff ff ff       	call   c002499a <ATAPI::diskInserted()>
c0024a3b:	83 c4 10             	add    esp,0x10
c0024a3e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024a42:	83 e0 0f             	and    eax,0xf
c0024a45:	3c 02                	cmp    al,0x2
c0024a47:	75 1b                	jne    c0024a64 <ATAPI::detectMedia()+0x9c>
c0024a49:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024a4e:	75 2d                	jne    c0024a7d <ATAPI::detectMedia()+0xb5>
c0024a50:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a57:	74 24                	je     c0024a7d <ATAPI::detectMedia()+0xb5>
c0024a59:	83 ec 0c             	sub    esp,0xc
c0024a5c:	53                   	push   ebx
c0024a5d:	e8 d4 fe ff ff       	call   c0024936 <ATAPI::diskRemoved()>
c0024a62:	eb 16                	jmp    c0024a7a <ATAPI::detectMedia()+0xb2>
c0024a64:	84 c0                	test   al,al
c0024a66:	75 15                	jne    c0024a7d <ATAPI::detectMedia()+0xb5>
c0024a68:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a6f:	75 0c                	jne    c0024a7d <ATAPI::detectMedia()+0xb5>
c0024a71:	83 ec 0c             	sub    esp,0xc
c0024a74:	53                   	push   ebx
c0024a75:	e8 20 ff ff ff       	call   c002499a <ATAPI::diskInserted()>
c0024a7a:	83 c4 10             	add    esp,0x10
c0024a7d:	83 c4 24             	add    esp,0x24
c0024a80:	5b                   	pop    ebx
c0024a81:	5e                   	pop    esi
c0024a82:	c3                   	ret    
c0024a83:	90                   	nop

c0024a84 <ATAPI::open(int, int, void*)>:
c0024a84:	53                   	push   ebx
c0024a85:	83 ec 08             	sub    esp,0x8
c0024a88:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024a8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024a90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024a94:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024a9a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024aa0:	c1 e0 06             	shl    eax,0x6
c0024aa3:	01 d0                	add    eax,edx
c0024aa5:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024aac:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024ab2:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024ab9:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024ac3:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024ac9:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024ad0:	6a 04                	push   0x4
c0024ad2:	6a 0c                	push   0xc
c0024ad4:	51                   	push   ecx
c0024ad5:	52                   	push   edx
c0024ad6:	e8 15 e5 ff ff       	call   c0022ff0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024adb:	90                   	nop
c0024adc:	90                   	nop
c0024add:	6a 00                	push   0x0
c0024adf:	6a 0c                	push   0xc
c0024ae1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ae8:	50                   	push   eax
c0024ae9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024aef:	e8 fc e4 ff ff       	call   c0022ff0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024af4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024afb:	83 c4 14             	add    esp,0x14
c0024afe:	53                   	push   ebx
c0024aff:	e8 c4 fe ff ff       	call   c00249c8 <ATAPI::detectMedia()>
c0024b04:	31 c0                	xor    eax,eax
c0024b06:	83 c4 18             	add    esp,0x18
c0024b09:	5b                   	pop    ebx
c0024b0a:	c3                   	ret    
c0024b0b:	90                   	nop

c0024b0c <ATAPI::read(unsigned long long, int, void*)>:
c0024b0c:	55                   	push   ebp
c0024b0d:	57                   	push   edi
c0024b0e:	56                   	push   esi
c0024b0f:	53                   	push   ebx
c0024b10:	83 ec 1c             	sub    esp,0x1c
c0024b13:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024b17:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024b1b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024b1f:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024b26:	74 41                	je     c0024b69 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024b28:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024b2c:	b9 03 00 00 00       	mov    ecx,0x3
c0024b31:	fc                   	cld    
c0024b32:	31 c0                	xor    eax,eax
c0024b34:	86 fb                	xchg   bl,bh
c0024b36:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024b38:	c1 c3 10             	rol    ebx,0x10
c0024b3b:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024b40:	89 e8                	mov    eax,ebp
c0024b42:	86 fb                	xchg   bl,bh
c0024b44:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024b48:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024b4c:	50                   	push   eax
c0024b4d:	50                   	push   eax
c0024b4e:	55                   	push   ebp
c0024b4f:	c1 e5 0b             	shl    ebp,0xb
c0024b52:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024b56:	6a 00                	push   0x0
c0024b58:	55                   	push   ebp
c0024b59:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024b5d:	50                   	push   eax
c0024b5e:	56                   	push   esi
c0024b5f:	e8 12 fb ff ff       	call   c0024676 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024b64:	83 c4 20             	add    esp,0x20
c0024b67:	eb 1a                	jmp    c0024b83 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024b69:	83 ec 0c             	sub    esp,0xc
c0024b6c:	56                   	push   esi
c0024b6d:	e8 56 fe ff ff       	call   c00249c8 <ATAPI::detectMedia()>
c0024b72:	83 c4 10             	add    esp,0x10
c0024b75:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024b7c:	75 aa                	jne    c0024b28 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024b7e:	b8 02 00 00 00       	mov    eax,0x2
c0024b83:	83 c4 1c             	add    esp,0x1c
c0024b86:	5b                   	pop    ebx
c0024b87:	5e                   	pop    esi
c0024b88:	5f                   	pop    edi
c0024b89:	5d                   	pop    ebp
c0024b8a:	c3                   	ret    
c0024b8b:	90                   	nop

c0024b8c <SATA::close(int, int, void*)>:
c0024b8c:	83 ec 0c             	sub    esp,0xc
c0024b8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b93:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024b99:	85 c0                	test   eax,eax
c0024b9b:	74 0c                	je     c0024ba9 <SATA::close(int, int, void*)+0x1d>
c0024b9d:	83 ec 0c             	sub    esp,0xc
c0024ba0:	8b 10                	mov    edx,DWORD PTR [eax]
c0024ba2:	50                   	push   eax
c0024ba3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024ba6:	83 c4 10             	add    esp,0x10
c0024ba9:	31 c0                	xor    eax,eax
c0024bab:	83 c4 0c             	add    esp,0xc
c0024bae:	c3                   	ret    
c0024baf:	90                   	nop

c0024bb0 <SATA::powerSaving(PowerSavingLevel)>:
c0024bb0:	c3                   	ret    
c0024bb1:	90                   	nop

c0024bb2 <SATA::open(int, int, void*)>:
c0024bb2:	56                   	push   esi
c0024bb3:	53                   	push   ebx
c0024bb4:	50                   	push   eax
c0024bb5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024bb9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024bbd:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024bc7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024bcd:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024bd7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024bdb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024be5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024beb:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024bf2:	e8 eb b2 fe ff       	call   c000fee2 <Phys::allocatePage()>
c0024bf7:	89 c6                	mov    esi,eax
c0024bf9:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024bff:	81 c6 00 10 00 00    	add    esi,0x1000
c0024c05:	e8 d8 b2 fe ff       	call   c000fee2 <Phys::allocatePage()>
c0024c0a:	39 c6                	cmp    esi,eax
c0024c0c:	74 10                	je     c0024c1e <SATA::open(int, int, void*)+0x6c>
c0024c0e:	83 ec 0c             	sub    esp,0xc
c0024c11:	68 e8 cf 02 c0       	push   0xc002cfe8
c0024c16:	e8 a2 59 ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c0024c1b:	83 c4 10             	add    esp,0x10
c0024c1e:	83 ec 0c             	sub    esp,0xc
c0024c21:	6a 02                	push   0x2
c0024c23:	e8 63 cf fe ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0024c28:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024c2e:	e8 f3 d1 fe ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0024c33:	6a 03                	push   0x3
c0024c35:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024c3b:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024c41:	50                   	push   eax
c0024c42:	e8 1b d7 fe ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024c47:	83 c4 14             	add    esp,0x14
c0024c4a:	53                   	push   ebx
c0024c4b:	e8 7e fb fe ff       	call   c00147ce <PhysicalDisk::startCache()>
c0024c50:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024c53:	e8 ec 1c ff ff       	call   c0016944 <createPartitionsForDisk(PhysicalDisk*)>
c0024c58:	83 c4 14             	add    esp,0x14
c0024c5b:	31 c0                	xor    eax,eax
c0024c5d:	5b                   	pop    ebx
c0024c5e:	5e                   	pop    esi
c0024c5f:	c3                   	ret    

c0024c60 <SATA::SATA()>:
c0024c60:	83 ec 0c             	sub    esp,0xc
c0024c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c67:	83 ec 04             	sub    esp,0x4
c0024c6a:	68 00 02 00 00       	push   0x200
c0024c6f:	68 fc cf 02 c0       	push   0xc002cffc
c0024c74:	50                   	push   eax
c0024c75:	e8 ec fa fe ff       	call   c0014766 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024c7a:	83 c4 10             	add    esp,0x10
c0024c7d:	ba 6c d0 02 c0       	mov    edx,0xc002d06c
c0024c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c86:	89 10                	mov    DWORD PTR [eax],edx
c0024c88:	90                   	nop
c0024c89:	83 c4 0c             	add    esp,0xc
c0024c8c:	c3                   	ret    
c0024c8d:	90                   	nop

c0024c8e <SATA::access(unsigned long long, int, void*, bool)>:
c0024c8e:	55                   	push   ebp
c0024c8f:	57                   	push   edi
c0024c90:	56                   	push   esi
c0024c91:	53                   	push   ebx
c0024c92:	83 ec 2c             	sub    esp,0x2c
c0024c95:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024c99:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024c9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024ca1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024ca5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024ca9:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024cae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024cb2:	7e 10                	jle    c0024cc4 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024cb4:	83 ec 0c             	sub    esp,0xc
c0024cb7:	68 0c d0 02 c0       	push   0xc002d00c
c0024cbc:	e8 fc 58 ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c0024cc1:	83 c4 10             	add    esp,0x10
c0024cc4:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024cca:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024cd0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024cd6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024cda:	89 f0                	mov    eax,esi
c0024cdc:	c1 e0 07             	shl    eax,0x7
c0024cdf:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024ce3:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024ced:	53                   	push   ebx
c0024cee:	8d 46 02             	lea    eax,[esi+0x2]
c0024cf1:	53                   	push   ebx
c0024cf2:	c1 e0 07             	shl    eax,0x7
c0024cf5:	bb 01 00 00 00       	mov    ebx,0x1
c0024cfa:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024cfe:	50                   	push   eax
c0024cff:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024d05:	e8 aa ef ff ff       	call   c0023cb4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024d0a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024d0e:	83 c4 10             	add    esp,0x10
c0024d11:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024d16:	0f 84 ce 01 00 00    	je     c0024eea <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024d1c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024d20:	c1 e0 09             	shl    eax,0x9
c0024d23:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024d28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024d2c:	74 17                	je     c0024d45 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024d2e:	51                   	push   ecx
c0024d2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024d33:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024d37:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024d3d:	e8 02 ba fd ff       	call   c0000744 <memcpy>
c0024d42:	83 c4 10             	add    esp,0x10
c0024d45:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d4b:	8d 46 02             	lea    eax,[esi+0x2]
c0024d4e:	c1 e0 07             	shl    eax,0x7
c0024d51:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024d55:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d57:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024d5d:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024d63:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024d67:	c1 e1 05             	shl    ecx,0x5
c0024d6a:	01 c8                	add    eax,ecx
c0024d6c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024d70:	8a 18                	mov    bl,BYTE PTR [eax]
c0024d72:	83 e1 01             	and    ecx,0x1
c0024d75:	83 e3 bf             	and    ebx,0xffffffbf
c0024d78:	c1 e1 06             	shl    ecx,0x6
c0024d7b:	09 d9                	or     ecx,ebx
c0024d7d:	88 08                	mov    BYTE PTR [eax],cl
c0024d7f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024d81:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024d87:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024d8d:	89 08                	mov    DWORD PTR [eax],ecx
c0024d8f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d95:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024d9b:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024da1:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024da4:	52                   	push   edx
c0024da5:	68 90 00 00 00       	push   0x90
c0024daa:	6a 00                	push   0x0
c0024dac:	53                   	push   ebx
c0024dad:	e8 c6 b9 fd ff       	call   c0000778 <memset>
c0024db2:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024db8:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024dbc:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024dc2:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024dc6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024dca:	83 c4 10             	add    esp,0x10
c0024dcd:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024dd0:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024dd6:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024ddc:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024de1:	09 c8                	or     eax,ecx
c0024de3:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024de9:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024dec:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024df3:	66 25 00 7f          	and    ax,0x7f00
c0024df7:	66 0d 27 80          	or     ax,0x8027
c0024dfb:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024e00:	66 89 03             	mov    WORD PTR [ebx],ax
c0024e03:	19 c0                	sbb    eax,eax
c0024e05:	83 e0 f0             	and    eax,0xfffffff0
c0024e08:	83 c0 35             	add    eax,0x35
c0024e0b:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024e0e:	89 f8                	mov    eax,edi
c0024e10:	c1 e8 10             	shr    eax,0x10
c0024e13:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024e16:	89 f8                	mov    eax,edi
c0024e18:	c1 e8 18             	shr    eax,0x18
c0024e1b:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024e1e:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024e22:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024e25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024e29:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024e2c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024e30:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024e34:	89 f3                	mov    ebx,esi
c0024e36:	31 c0                	xor    eax,eax
c0024e38:	c1 e3 07             	shl    ebx,0x7
c0024e3b:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024e3f:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024e45:	80 e1 88             	and    cl,0x88
c0024e48:	74 0a                	je     c0024e54 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024e4a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e4f:	74 0a                	je     c0024e5b <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024e51:	40                   	inc    eax
c0024e52:	eb eb                	jmp    c0024e3f <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024e54:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e59:	75 0a                	jne    c0024e65 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024e5b:	83 ec 0c             	sub    esp,0xc
c0024e5e:	68 45 d0 02 c0       	push   0xc002d045
c0024e63:	eb 56                	jmp    c0024ebb <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024e65:	b8 01 00 00 00       	mov    eax,0x1
c0024e6a:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024e6e:	c1 e6 07             	shl    esi,0x7
c0024e71:	d3 e0                	shl    eax,cl
c0024e73:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024e77:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024e7d:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024e83:	85 c8                	test   eax,ecx
c0024e85:	74 20                	je     c0024ea7 <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024e87:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024e8d:	0f ba e1 1e          	bt     ecx,0x1e
c0024e91:	73 ea                	jae    c0024e7d <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024e93:	83 ec 0c             	sub    esp,0xc
c0024e96:	31 db                	xor    ebx,ebx
c0024e98:	68 53 d0 02 c0       	push   0xc002d053
c0024e9d:	e8 1b 57 ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c0024ea2:	83 c4 10             	add    esp,0x10
c0024ea5:	eb 43                	jmp    c0024eea <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024ea7:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024ead:	0f ba e0 1e          	bt     eax,0x1e
c0024eb1:	73 17                	jae    c0024eca <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024eb3:	83 ec 0c             	sub    esp,0xc
c0024eb6:	68 53 d0 02 c0       	push   0xc002d053
c0024ebb:	e8 fd 56 ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c0024ec0:	bb 01 00 00 00       	mov    ebx,0x1
c0024ec5:	83 c4 10             	add    esp,0x10
c0024ec8:	eb 20                	jmp    c0024eea <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024eca:	31 db                	xor    ebx,ebx
c0024ecc:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024ed1:	75 17                	jne    c0024eea <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024ed3:	50                   	push   eax
c0024ed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024ed8:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024ede:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024ee2:	e8 5d b8 fd ff       	call   c0000744 <memcpy>
c0024ee7:	83 c4 10             	add    esp,0x10
c0024eea:	83 c4 2c             	add    esp,0x2c
c0024eed:	89 d8                	mov    eax,ebx
c0024eef:	5b                   	pop    ebx
c0024ef0:	5e                   	pop    esi
c0024ef1:	5f                   	pop    edi
c0024ef2:	5d                   	pop    ebp
c0024ef3:	c3                   	ret    

c0024ef4 <SATA::read(unsigned long long, int, void*)>:
c0024ef4:	57                   	push   edi
c0024ef5:	b8 04 00 00 00       	mov    eax,0x4
c0024efa:	56                   	push   esi
c0024efb:	53                   	push   ebx
c0024efc:	83 ec 10             	sub    esp,0x10
c0024eff:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024f03:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024f07:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024f0a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024f0e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024f12:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024f18:	77 3b                	ja     c0024f55 <SATA::read(unsigned long long, int, void*)+0x61>
c0024f1a:	b8 06 00 00 00       	mov    eax,0x6
c0024f1f:	85 d2                	test   edx,edx
c0024f21:	74 32                	je     c0024f55 <SATA::read(unsigned long long, int, void*)+0x61>
c0024f23:	50                   	push   eax
c0024f24:	50                   	push   eax
c0024f25:	6a 00                	push   0x0
c0024f27:	52                   	push   edx
c0024f28:	53                   	push   ebx
c0024f29:	57                   	push   edi
c0024f2a:	56                   	push   esi
c0024f2b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024f2f:	e8 5a fd ff ff       	call   c0024c8e <SATA::access(unsigned long long, int, void*, bool)>
c0024f34:	83 c4 20             	add    esp,0x20
c0024f37:	85 c0                	test   eax,eax
c0024f39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024f3d:	75 11                	jne    c0024f50 <SATA::read(unsigned long long, int, void*)+0x5c>
c0024f3f:	01 1d 08 29 03 c0    	add    DWORD PTR ds:0xc0032908,ebx
c0024f45:	e8 96 ba fe ff       	call   c00109e0 <VgaText::updateDiskUsage()>
c0024f4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f4e:	eb 05                	jmp    c0024f55 <SATA::read(unsigned long long, int, void*)+0x61>
c0024f50:	b8 01 00 00 00       	mov    eax,0x1
c0024f55:	83 c4 10             	add    esp,0x10
c0024f58:	5b                   	pop    ebx
c0024f59:	5e                   	pop    esi
c0024f5a:	5f                   	pop    edi
c0024f5b:	c3                   	ret    

c0024f5c <SATA::write(unsigned long long, int, void*)>:
c0024f5c:	55                   	push   ebp
c0024f5d:	b8 04 00 00 00       	mov    eax,0x4
c0024f62:	57                   	push   edi
c0024f63:	56                   	push   esi
c0024f64:	53                   	push   ebx
c0024f65:	83 ec 1c             	sub    esp,0x1c
c0024f68:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024f6c:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0024f70:	8d 75 ff             	lea    esi,[ebp-0x1]
c0024f73:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024f77:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024f7b:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024f81:	77 56                	ja     c0024fd9 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024f83:	b8 06 00 00 00       	mov    eax,0x6
c0024f88:	85 ff                	test   edi,edi
c0024f8a:	74 4d                	je     c0024fd9 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024f8c:	89 ee                	mov    esi,ebp
c0024f8e:	c1 e6 09             	shl    esi,0x9
c0024f91:	01 fe                	add    esi,edi
c0024f93:	89 c8                	mov    eax,ecx
c0024f95:	89 da                	mov    edx,ebx
c0024f97:	83 c0 01             	add    eax,0x1
c0024f9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024f9e:	83 d2 00             	adc    edx,0x0
c0024fa1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024fa5:	50                   	push   eax
c0024fa6:	50                   	push   eax
c0024fa7:	6a 01                	push   0x1
c0024fa9:	57                   	push   edi
c0024faa:	81 c7 00 02 00 00    	add    edi,0x200
c0024fb0:	6a 01                	push   0x1
c0024fb2:	53                   	push   ebx
c0024fb3:	51                   	push   ecx
c0024fb4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024fb8:	e8 d1 fc ff ff       	call   c0024c8e <SATA::access(unsigned long long, int, void*, bool)>
c0024fbd:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024fc1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024fc5:	83 c4 20             	add    esp,0x20
c0024fc8:	39 f7                	cmp    edi,esi
c0024fca:	75 c7                	jne    c0024f93 <SATA::write(unsigned long long, int, void*)+0x37>
c0024fcc:	01 2d 04 29 03 c0    	add    DWORD PTR ds:0xc0032904,ebp
c0024fd2:	e8 09 ba fe ff       	call   c00109e0 <VgaText::updateDiskUsage()>
c0024fd7:	31 c0                	xor    eax,eax
c0024fd9:	83 c4 1c             	add    esp,0x1c
c0024fdc:	5b                   	pop    ebx
c0024fdd:	5e                   	pop    esi
c0024fde:	5f                   	pop    edi
c0024fdf:	5d                   	pop    ebp
c0024fe0:	c3                   	ret    
c0024fe1:	90                   	nop

c0024fe2 <SATAPI::write(unsigned long long, int, void*)>:
c0024fe2:	b8 03 00 00 00       	mov    eax,0x3
c0024fe7:	c3                   	ret    

c0024fe8 <SATAPI::close(int, int, void*)>:
c0024fe8:	83 ec 0c             	sub    esp,0xc
c0024feb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fef:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024ff5:	85 c0                	test   eax,eax
c0024ff7:	74 0c                	je     c0025005 <SATAPI::close(int, int, void*)+0x1d>
c0024ff9:	83 ec 0c             	sub    esp,0xc
c0024ffc:	8b 10                	mov    edx,DWORD PTR [eax]
c0024ffe:	50                   	push   eax
c0024fff:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025002:	83 c4 10             	add    esp,0x10
c0025005:	31 c0                	xor    eax,eax
c0025007:	83 c4 0c             	add    esp,0xc
c002500a:	c3                   	ret    
c002500b:	90                   	nop

c002500c <SATAPI::SATAPI()>:
c002500c:	83 ec 0c             	sub    esp,0xc
c002500f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025013:	83 ec 04             	sub    esp,0x4
c0025016:	68 00 08 00 00       	push   0x800
c002501b:	68 9c d0 02 c0       	push   0xc002d09c
c0025020:	50                   	push   eax
c0025021:	e8 40 f7 fe ff       	call   c0014766 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025026:	83 c4 10             	add    esp,0x10
c0025029:	ba 48 d1 02 c0       	mov    edx,0xc002d148
c002502e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025032:	89 10                	mov    DWORD PTR [eax],edx
c0025034:	90                   	nop
c0025035:	83 c4 0c             	add    esp,0xc
c0025038:	c3                   	ret    
c0025039:	90                   	nop

c002503a <SATAPI::diskRemoved()>:
c002503a:	83 ec 18             	sub    esp,0x18
c002503d:	68 a8 d0 02 c0       	push   0xc002d0a8
c0025042:	e8 d5 de fe ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0025047:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002504b:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025052:	83 c4 1c             	add    esp,0x1c
c0025055:	c3                   	ret    

c0025056 <SATAPI::diskInserted()>:
c0025056:	53                   	push   ebx
c0025057:	83 ec 14             	sub    esp,0x14
c002505a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002505e:	68 bf d0 02 c0       	push   0xc002d0bf
c0025063:	e8 b4 de fe ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0025068:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c002506f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025072:	e8 57 f7 fe ff       	call   c00147ce <PhysicalDisk::startCache()>
c0025077:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002507b:	83 c4 18             	add    esp,0x18
c002507e:	5b                   	pop    ebx
c002507f:	e9 c0 18 ff ff       	jmp    c0016944 <createPartitionsForDisk(PhysicalDisk*)>

c0025084 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025084:	55                   	push   ebp
c0025085:	57                   	push   edi
c0025086:	56                   	push   esi
c0025087:	53                   	push   ebx
c0025088:	83 ec 24             	sub    esp,0x24
c002508b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002508f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025093:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c0025099:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002509d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00250a1:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c00250a7:	8d 5f 02             	lea    ebx,[edi+0x2]
c00250aa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00250b0:	c1 e3 07             	shl    ebx,0x7
c00250b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00250b7:	89 f8                	mov    eax,edi
c00250b9:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00250bd:	c1 e0 07             	shl    eax,0x7
c00250c0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00250c4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00250c8:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00250d2:	53                   	push   ebx
c00250d3:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c00250d9:	e8 d6 eb ff ff       	call   c0023cb4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00250de:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00250e2:	83 c4 10             	add    esp,0x10
c00250e5:	b8 01 00 00 00       	mov    eax,0x1
c00250ea:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00250ef:	0f 84 8a 01 00 00    	je     c002527f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00250f5:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00250fb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00250fd:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025103:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025109:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c002510d:	c1 e1 05             	shl    ecx,0x5
c0025110:	01 c8                	add    eax,ecx
c0025112:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025114:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002511a:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025120:	89 08                	mov    DWORD PTR [eax],ecx
c0025122:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0025128:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002512e:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025134:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025137:	52                   	push   edx
c0025138:	68 90 00 00 00       	push   0x90
c002513d:	6a 00                	push   0x0
c002513f:	53                   	push   ebx
c0025140:	e8 33 b6 fd ff       	call   c0000778 <memset>
c0025145:	83 c4 0c             	add    esp,0xc
c0025148:	8d 43 40             	lea    eax,[ebx+0x40]
c002514b:	6a 0c                	push   0xc
c002514d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025151:	50                   	push   eax
c0025152:	e8 ed b5 fd ff       	call   c0000744 <memcpy>
c0025157:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c002515d:	89 ea                	mov    edx,ebp
c002515f:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025165:	c1 ea 18             	shr    edx,0x18
c0025168:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002516c:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c002516f:	8d 48 ff             	lea    ecx,[eax-0x1]
c0025172:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025176:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002517c:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0025182:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025187:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c002518b:	09 c8                	or     eax,ecx
c002518d:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025191:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025197:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002519a:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00251a1:	66 25 00 7f          	and    ax,0x7f00
c00251a5:	66 0d 27 80          	or     ax,0x8027
c00251a9:	66 89 03             	mov    WORD PTR [ebx],ax
c00251ac:	89 e8                	mov    eax,ebp
c00251ae:	c1 e8 10             	shr    eax,0x10
c00251b1:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00251b4:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00251b8:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00251bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00251bf:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00251c2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00251c6:	83 c4 10             	add    esp,0x10
c00251c9:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00251cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00251d1:	31 c0                	xor    eax,eax
c00251d3:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c00251d9:	80 e1 88             	and    cl,0x88
c00251dc:	74 0a                	je     c00251e8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c00251de:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00251e3:	74 0a                	je     c00251ef <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00251e5:	40                   	inc    eax
c00251e6:	eb eb                	jmp    c00251d3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c00251e8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00251ed:	75 0f                	jne    c00251fe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c00251ef:	83 ec 0c             	sub    esp,0xc
c00251f2:	68 45 d0 02 c0       	push   0xc002d045
c00251f7:	e8 c1 53 ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c00251fc:	eb 3a                	jmp    c0025238 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c00251fe:	b8 01 00 00 00       	mov    eax,0x1
c0025203:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0025207:	c1 e7 07             	shl    edi,0x7
c002520a:	d3 e0                	shl    eax,cl
c002520c:	03 3c 24             	add    edi,DWORD PTR [esp]
c002520f:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c0025215:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c002521b:	85 d0                	test   eax,edx
c002521d:	74 23                	je     c0025242 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c002521f:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c0025225:	0f ba e2 1e          	bt     edx,0x1e
c0025229:	73 ea                	jae    c0025215 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c002522b:	83 ec 0c             	sub    esp,0xc
c002522e:	68 d7 d0 02 c0       	push   0xc002d0d7
c0025233:	e8 e4 dc fe ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0025238:	83 c4 10             	add    esp,0x10
c002523b:	b8 01 00 00 00       	mov    eax,0x1
c0025240:	eb 3d                	jmp    c002527f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025242:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0025248:	0f ba e0 1e          	bt     eax,0x1e
c002524c:	73 0a                	jae    c0025258 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c002524e:	83 ec 0c             	sub    esp,0xc
c0025251:	68 ea d0 02 c0       	push   0xc002d0ea
c0025256:	eb db                	jmp    c0025233 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c0025258:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c002525d:	74 1e                	je     c002527d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c002525f:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0025264:	74 17                	je     c002527d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025266:	50                   	push   eax
c0025267:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002526b:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0025271:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0025275:	e8 ca b4 fd ff       	call   c0000744 <memcpy>
c002527a:	83 c4 10             	add    esp,0x10
c002527d:	31 c0                	xor    eax,eax
c002527f:	83 c4 1c             	add    esp,0x1c
c0025282:	5b                   	pop    ebx
c0025283:	5e                   	pop    esi
c0025284:	5f                   	pop    edi
c0025285:	5d                   	pop    ebp
c0025286:	c3                   	ret    
c0025287:	90                   	nop

c0025288 <SATAPI::eject()>:
c0025288:	57                   	push   edi
c0025289:	b9 03 00 00 00       	mov    ecx,0x3
c002528e:	53                   	push   ebx
c002528f:	83 ec 14             	sub    esp,0x14
c0025292:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025296:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002529a:	fc                   	cld    
c002529b:	31 c0                	xor    eax,eax
c002529d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002529f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00252a4:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00252a9:	50                   	push   eax
c00252aa:	6a 00                	push   0x0
c00252ac:	6a 00                	push   0x0
c00252ae:	6a 00                	push   0x0
c00252b0:	6a 00                	push   0x0
c00252b2:	6a 02                	push   0x2
c00252b4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00252b8:	50                   	push   eax
c00252b9:	53                   	push   ebx
c00252ba:	e8 c5 fd ff ff       	call   c0025084 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00252bf:	83 c4 14             	add    esp,0x14
c00252c2:	53                   	push   ebx
c00252c3:	e8 72 fd ff ff       	call   c002503a <SATAPI::diskRemoved()>
c00252c8:	83 c4 24             	add    esp,0x24
c00252cb:	31 c0                	xor    eax,eax
c00252cd:	5b                   	pop    ebx
c00252ce:	5f                   	pop    edi
c00252cf:	c3                   	ret    

c00252d0 <SATAPI::detectMedia()>:
c00252d0:	56                   	push   esi
c00252d1:	53                   	push   ebx
c00252d2:	83 ec 28             	sub    esp,0x28
c00252d5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00252d9:	6a 0c                	push   0xc
c00252db:	6a 00                	push   0x0
c00252dd:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00252e1:	56                   	push   esi
c00252e2:	e8 91 b4 fd ff       	call   c0000778 <memset>
c00252e7:	83 c4 0c             	add    esp,0xc
c00252ea:	6a 00                	push   0x0
c00252ec:	6a 00                	push   0x0
c00252ee:	6a 00                	push   0x0
c00252f0:	6a 00                	push   0x0
c00252f2:	6a 00                	push   0x0
c00252f4:	56                   	push   esi
c00252f5:	53                   	push   ebx
c00252f6:	e8 89 fd ff ff       	call   c0025084 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00252fb:	83 c4 1c             	add    esp,0x1c
c00252fe:	6a 0c                	push   0xc
c0025300:	6a 00                	push   0x0
c0025302:	56                   	push   esi
c0025303:	e8 70 b4 fd ff       	call   c0000778 <memset>
c0025308:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002530d:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025312:	83 c4 0c             	add    esp,0xc
c0025315:	6a 01                	push   0x1
c0025317:	8d 44 24 16          	lea    eax,[esp+0x16]
c002531b:	50                   	push   eax
c002531c:	6a 00                	push   0x0
c002531e:	6a 00                	push   0x0
c0025320:	6a 12                	push   0x12
c0025322:	56                   	push   esi
c0025323:	53                   	push   ebx
c0025324:	e8 5b fd ff ff       	call   c0025084 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025329:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002532d:	83 c4 20             	add    esp,0x20
c0025330:	83 e0 7f             	and    eax,0x7f
c0025333:	3c 70                	cmp    al,0x70
c0025335:	74 15                	je     c002534c <SATAPI::detectMedia()+0x7c>
c0025337:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002533e:	75 0c                	jne    c002534c <SATAPI::detectMedia()+0x7c>
c0025340:	83 ec 0c             	sub    esp,0xc
c0025343:	53                   	push   ebx
c0025344:	e8 0d fd ff ff       	call   c0025056 <SATAPI::diskInserted()>
c0025349:	83 c4 10             	add    esp,0x10
c002534c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025350:	83 e0 0f             	and    eax,0xf
c0025353:	3c 02                	cmp    al,0x2
c0025355:	75 1b                	jne    c0025372 <SATAPI::detectMedia()+0xa2>
c0025357:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002535c:	75 2d                	jne    c002538b <SATAPI::detectMedia()+0xbb>
c002535e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025365:	74 24                	je     c002538b <SATAPI::detectMedia()+0xbb>
c0025367:	83 ec 0c             	sub    esp,0xc
c002536a:	53                   	push   ebx
c002536b:	e8 ca fc ff ff       	call   c002503a <SATAPI::diskRemoved()>
c0025370:	eb 16                	jmp    c0025388 <SATAPI::detectMedia()+0xb8>
c0025372:	84 c0                	test   al,al
c0025374:	75 15                	jne    c002538b <SATAPI::detectMedia()+0xbb>
c0025376:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002537d:	75 0c                	jne    c002538b <SATAPI::detectMedia()+0xbb>
c002537f:	83 ec 0c             	sub    esp,0xc
c0025382:	53                   	push   ebx
c0025383:	e8 ce fc ff ff       	call   c0025056 <SATAPI::diskInserted()>
c0025388:	83 c4 10             	add    esp,0x10
c002538b:	83 c4 24             	add    esp,0x24
c002538e:	5b                   	pop    ebx
c002538f:	5e                   	pop    esi
c0025390:	c3                   	ret    
c0025391:	90                   	nop

c0025392 <SATAPI::open(int, int, void*)>:
c0025392:	56                   	push   esi
c0025393:	53                   	push   ebx
c0025394:	50                   	push   eax
c0025395:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025399:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002539d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00253a7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00253ad:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00253b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253bb:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00253c5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00253cb:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00253d2:	e8 0b ab fe ff       	call   c000fee2 <Phys::allocatePage()>
c00253d7:	89 c6                	mov    esi,eax
c00253d9:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00253df:	81 c6 00 10 00 00    	add    esi,0x1000
c00253e5:	e8 f8 aa fe ff       	call   c000fee2 <Phys::allocatePage()>
c00253ea:	39 c6                	cmp    esi,eax
c00253ec:	74 10                	je     c00253fe <SATAPI::open(int, int, void*)+0x6c>
c00253ee:	83 ec 0c             	sub    esp,0xc
c00253f1:	68 ff d0 02 c0       	push   0xc002d0ff
c00253f6:	e8 c2 51 ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c00253fb:	83 c4 10             	add    esp,0x10
c00253fe:	83 ec 0c             	sub    esp,0xc
c0025401:	6a 02                	push   0x2
c0025403:	e8 83 c7 fe ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0025408:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002540e:	e8 13 ca fe ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0025413:	6a 03                	push   0x3
c0025415:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002541b:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025421:	50                   	push   eax
c0025422:	e8 3b cf fe ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025427:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002542e:	83 c4 14             	add    esp,0x14
c0025431:	53                   	push   ebx
c0025432:	e8 99 fe ff ff       	call   c00252d0 <SATAPI::detectMedia()>
c0025437:	83 c4 14             	add    esp,0x14
c002543a:	31 c0                	xor    eax,eax
c002543c:	5b                   	pop    ebx
c002543d:	5e                   	pop    esi
c002543e:	c3                   	ret    
c002543f:	90                   	nop

c0025440 <SATAPI::read(unsigned long long, int, void*)>:
c0025440:	55                   	push   ebp
c0025441:	57                   	push   edi
c0025442:	56                   	push   esi
c0025443:	53                   	push   ebx
c0025444:	83 ec 1c             	sub    esp,0x1c
c0025447:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002544b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002544f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025453:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002545a:	74 19                	je     c0025475 <SATAPI::read(unsigned long long, int, void*)+0x35>
c002545c:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025461:	7e 2e                	jle    c0025491 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025463:	83 ec 0c             	sub    esp,0xc
c0025466:	68 15 d1 02 c0       	push   0xc002d115
c002546b:	e8 4d 51 ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c0025470:	83 c4 10             	add    esp,0x10
c0025473:	eb 1c                	jmp    c0025491 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025475:	83 ec 0c             	sub    esp,0xc
c0025478:	55                   	push   ebp
c0025479:	e8 52 fe ff ff       	call   c00252d0 <SATAPI::detectMedia()>
c002547e:	83 c4 10             	add    esp,0x10
c0025481:	b8 02 00 00 00       	mov    eax,0x2
c0025486:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002548d:	75 cd                	jne    c002545c <SATAPI::read(unsigned long long, int, void*)+0x1c>
c002548f:	eb 49                	jmp    c00254da <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025491:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025495:	b9 03 00 00 00       	mov    ecx,0x3
c002549a:	fc                   	cld    
c002549b:	31 c0                	xor    eax,eax
c002549d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002549f:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00254a4:	89 d8                	mov    eax,ebx
c00254a6:	86 e0                	xchg   al,ah
c00254a8:	c1 c0 10             	rol    eax,0x10
c00254ab:	86 e0                	xchg   al,ah
c00254ad:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00254b1:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00254b5:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00254b9:	50                   	push   eax
c00254ba:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00254be:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00254c2:	56                   	push   esi
c00254c3:	53                   	push   ebx
c00254c4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00254c8:	c1 e0 0b             	shl    eax,0xb
c00254cb:	50                   	push   eax
c00254cc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00254d0:	50                   	push   eax
c00254d1:	55                   	push   ebp
c00254d2:	e8 ad fb ff ff       	call   c0025084 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00254d7:	83 c4 20             	add    esp,0x20
c00254da:	83 c4 1c             	add    esp,0x1c
c00254dd:	5b                   	pop    ebx
c00254de:	5e                   	pop    esi
c00254df:	5f                   	pop    edi
c00254e0:	5d                   	pop    ebp
c00254e1:	c3                   	ret    

c00254e2 <AVX::open(int, int, void*)>:
c00254e2:	83 ec 0c             	sub    esp,0xc
c00254e5:	e8 3e 11 00 00       	call   c0026628 <avxInit>
c00254ea:	b8 00 00 00 00       	mov    eax,0x0
c00254ef:	83 c4 0c             	add    esp,0xc
c00254f2:	c3                   	ret    
c00254f3:	90                   	nop

c00254f4 <AVX::close(int, int, void*)>:
c00254f4:	83 ec 0c             	sub    esp,0xc
c00254f7:	e8 2d 11 00 00       	call   c0026629 <avxClose>
c00254fc:	b8 00 00 00 00       	mov    eax,0x0
c0025501:	83 c4 0c             	add    esp,0xc
c0025504:	c3                   	ret    
c0025505:	90                   	nop

c0025506 <AVX::available()>:
c0025506:	83 ec 0c             	sub    esp,0xc
c0025509:	e8 12 11 00 00       	call   c0026620 <avxDetect>
c002550e:	85 c0                	test   eax,eax
c0025510:	0f 95 c0             	setne  al
c0025513:	83 c4 0c             	add    esp,0xc
c0025516:	c3                   	ret    
c0025517:	90                   	nop

c0025518 <AVX::save(void*)>:
c0025518:	83 ec 0c             	sub    esp,0xc
c002551b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002551f:	83 ec 0c             	sub    esp,0xc
c0025522:	50                   	push   eax
c0025523:	e8 fe 10 00 00       	call   c0026626 <avxSave>
c0025528:	83 c4 10             	add    esp,0x10
c002552b:	90                   	nop
c002552c:	83 c4 0c             	add    esp,0xc
c002552f:	c3                   	ret    

c0025530 <AVX::load(void*)>:
c0025530:	83 ec 0c             	sub    esp,0xc
c0025533:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025537:	83 ec 0c             	sub    esp,0xc
c002553a:	50                   	push   eax
c002553b:	e8 e7 10 00 00       	call   c0026627 <avxLoad>
c0025540:	83 c4 10             	add    esp,0x10
c0025543:	90                   	nop
c0025544:	83 c4 0c             	add    esp,0xc
c0025547:	c3                   	ret    

c0025548 <AVX::AVX()>:
c0025548:	83 ec 0c             	sub    esp,0xc
c002554b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002554f:	83 ec 08             	sub    esp,0x8
c0025552:	68 78 d1 02 c0       	push   0xc002d178
c0025557:	50                   	push   eax
c0025558:	e8 e7 f2 fe ff       	call   c0014844 <FPU::FPU(char const*)>
c002555d:	83 c4 10             	add    esp,0x10
c0025560:	ba 88 d1 02 c0       	mov    edx,0xc002d188
c0025565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025569:	89 10                	mov    DWORD PTR [eax],edx
c002556b:	90                   	nop
c002556c:	83 c4 0c             	add    esp,0xc
c002556f:	c3                   	ret    

c0025570 <MMX::available()>:
c0025570:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c0025575:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002557b:	83 e0 20             	and    eax,0x20
c002557e:	84 c0                	test   al,al
c0025580:	0f 95 c0             	setne  al
c0025583:	c3                   	ret    

c0025584 <MMX::open(int, int, void*)>:
c0025584:	83 ec 0c             	sub    esp,0xc
c0025587:	e8 20 11 00 00       	call   c00266ac <x87Init>
c002558c:	b8 00 00 00 00       	mov    eax,0x0
c0025591:	83 c4 0c             	add    esp,0xc
c0025594:	c3                   	ret    
c0025595:	90                   	nop

c0025596 <MMX::close(int, int, void*)>:
c0025596:	83 ec 0c             	sub    esp,0xc
c0025599:	e8 28 11 00 00       	call   c00266c6 <x87Close>
c002559e:	b8 00 00 00 00       	mov    eax,0x0
c00255a3:	83 c4 0c             	add    esp,0xc
c00255a6:	c3                   	ret    
c00255a7:	90                   	nop

c00255a8 <MMX::save(void*)>:
c00255a8:	83 ec 0c             	sub    esp,0xc
c00255ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255af:	83 ec 0c             	sub    esp,0xc
c00255b2:	50                   	push   eax
c00255b3:	e8 e9 10 00 00       	call   c00266a1 <x87Save>
c00255b8:	83 c4 10             	add    esp,0x10
c00255bb:	90                   	nop
c00255bc:	83 c4 0c             	add    esp,0xc
c00255bf:	c3                   	ret    

c00255c0 <MMX::load(void*)>:
c00255c0:	83 ec 0c             	sub    esp,0xc
c00255c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255c7:	83 ec 0c             	sub    esp,0xc
c00255ca:	50                   	push   eax
c00255cb:	e8 d7 10 00 00       	call   c00266a7 <x87Load>
c00255d0:	83 c4 10             	add    esp,0x10
c00255d3:	90                   	nop
c00255d4:	83 c4 0c             	add    esp,0xc
c00255d7:	c3                   	ret    

c00255d8 <MMX::MMX()>:
c00255d8:	83 ec 0c             	sub    esp,0xc
c00255db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255df:	83 ec 08             	sub    esp,0x8
c00255e2:	68 b8 d1 02 c0       	push   0xc002d1b8
c00255e7:	50                   	push   eax
c00255e8:	e8 57 f2 fe ff       	call   c0014844 <FPU::FPU(char const*)>
c00255ed:	83 c4 10             	add    esp,0x10
c00255f0:	ba c8 d1 02 c0       	mov    edx,0xc002d1c8
c00255f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255f9:	89 10                	mov    DWORD PTR [eax],edx
c00255fb:	90                   	nop
c00255fc:	83 c4 0c             	add    esp,0xc
c00255ff:	c3                   	ret    

c0025600 <SSE::open(int, int, void*)>:
c0025600:	83 ec 0c             	sub    esp,0xc
c0025603:	e8 5c 10 00 00       	call   c0026664 <sseInit>
c0025608:	b8 00 00 00 00       	mov    eax,0x0
c002560d:	83 c4 0c             	add    esp,0xc
c0025610:	c3                   	ret    
c0025611:	90                   	nop

c0025612 <SSE::close(int, int, void*)>:
c0025612:	83 ec 0c             	sub    esp,0xc
c0025615:	e8 5a 10 00 00       	call   c0026674 <sseClose>
c002561a:	b8 00 00 00 00       	mov    eax,0x0
c002561f:	83 c4 0c             	add    esp,0xc
c0025622:	c3                   	ret    
c0025623:	90                   	nop

c0025624 <SSE::available()>:
c0025624:	83 ec 1c             	sub    esp,0x1c
c0025627:	e8 14 10 00 00       	call   c0026640 <absolutelyNoChanceInHell>
c002562c:	85 c0                	test   eax,eax
c002562e:	0f 95 c0             	setne  al
c0025631:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025635:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025639:	83 c4 1c             	add    esp,0x1c
c002563c:	c3                   	ret    
c002563d:	90                   	nop

c002563e <SSE::save(void*)>:
c002563e:	83 ec 0c             	sub    esp,0xc
c0025641:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025645:	83 ec 0c             	sub    esp,0xc
c0025648:	50                   	push   eax
c0025649:	e8 0a 10 00 00       	call   c0026658 <sseSave>
c002564e:	83 c4 10             	add    esp,0x10
c0025651:	90                   	nop
c0025652:	83 c4 0c             	add    esp,0xc
c0025655:	c3                   	ret    

c0025656 <SSE::load(void*)>:
c0025656:	83 ec 0c             	sub    esp,0xc
c0025659:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002565d:	83 ec 0c             	sub    esp,0xc
c0025660:	50                   	push   eax
c0025661:	e8 f8 0f 00 00       	call   c002665e <sseLoad>
c0025666:	83 c4 10             	add    esp,0x10
c0025669:	90                   	nop
c002566a:	83 c4 0c             	add    esp,0xc
c002566d:	c3                   	ret    

c002566e <SSE::SSE()>:
c002566e:	83 ec 0c             	sub    esp,0xc
c0025671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025675:	83 ec 08             	sub    esp,0x8
c0025678:	68 f8 d1 02 c0       	push   0xc002d1f8
c002567d:	50                   	push   eax
c002567e:	e8 c1 f1 fe ff       	call   c0014844 <FPU::FPU(char const*)>
c0025683:	83 c4 10             	add    esp,0x10
c0025686:	ba 08 d2 02 c0       	mov    edx,0xc002d208
c002568b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002568f:	89 10                	mov    DWORD PTR [eax],edx
c0025691:	90                   	nop
c0025692:	83 c4 0c             	add    esp,0xc
c0025695:	c3                   	ret    

c0025696 <x87::open(int, int, void*)>:
c0025696:	83 ec 0c             	sub    esp,0xc
c0025699:	e8 0e 10 00 00       	call   c00266ac <x87Init>
c002569e:	b8 00 00 00 00       	mov    eax,0x0
c00256a3:	83 c4 0c             	add    esp,0xc
c00256a6:	c3                   	ret    
c00256a7:	90                   	nop

c00256a8 <x87::close(int, int, void*)>:
c00256a8:	83 ec 0c             	sub    esp,0xc
c00256ab:	e8 16 10 00 00       	call   c00266c6 <x87Close>
c00256b0:	b8 00 00 00 00       	mov    eax,0x0
c00256b5:	83 c4 0c             	add    esp,0xc
c00256b8:	c3                   	ret    
c00256b9:	90                   	nop

c00256ba <x87::available()>:
c00256ba:	83 ec 0c             	sub    esp,0xc
c00256bd:	e8 c4 0f 00 00       	call   c0026686 <x87Detect>
c00256c2:	85 c0                	test   eax,eax
c00256c4:	0f 95 c0             	setne  al
c00256c7:	83 c4 0c             	add    esp,0xc
c00256ca:	c3                   	ret    
c00256cb:	90                   	nop

c00256cc <x87::save(void*)>:
c00256cc:	83 ec 0c             	sub    esp,0xc
c00256cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256d3:	83 ec 0c             	sub    esp,0xc
c00256d6:	50                   	push   eax
c00256d7:	e8 c5 0f 00 00       	call   c00266a1 <x87Save>
c00256dc:	83 c4 10             	add    esp,0x10
c00256df:	90                   	nop
c00256e0:	83 c4 0c             	add    esp,0xc
c00256e3:	c3                   	ret    

c00256e4 <x87::load(void*)>:
c00256e4:	83 ec 0c             	sub    esp,0xc
c00256e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256eb:	83 ec 0c             	sub    esp,0xc
c00256ee:	50                   	push   eax
c00256ef:	e8 b3 0f 00 00       	call   c00266a7 <x87Load>
c00256f4:	83 c4 10             	add    esp,0x10
c00256f7:	90                   	nop
c00256f8:	83 c4 0c             	add    esp,0xc
c00256fb:	c3                   	ret    

c00256fc <x87::x87()>:
c00256fc:	83 ec 0c             	sub    esp,0xc
c00256ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025703:	83 ec 08             	sub    esp,0x8
c0025706:	68 38 d2 02 c0       	push   0xc002d238
c002570b:	50                   	push   eax
c002570c:	e8 33 f1 fe ff       	call   c0014844 <FPU::FPU(char const*)>
c0025711:	83 c4 10             	add    esp,0x10
c0025714:	ba 48 d2 02 c0       	mov    edx,0xc002d248
c0025719:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002571d:	89 10                	mov    DWORD PTR [eax],edx
c002571f:	90                   	nop
c0025720:	83 c4 0c             	add    esp,0xc
c0025723:	c3                   	ret    

c0025724 <APIC::disable()>:
c0025724:	90                   	nop
c0025725:	c3                   	ret    

c0025726 <APIC::close(int, int, void*)>:
c0025726:	55                   	push   ebp
c0025727:	89 e5                	mov    ebp,esp
c0025729:	83 ec 08             	sub    esp,0x8
c002572c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002572f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025731:	83 c0 3c             	add    eax,0x3c
c0025734:	8b 00                	mov    eax,DWORD PTR [eax]
c0025736:	83 ec 0c             	sub    esp,0xc
c0025739:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002573c:	ff d0                	call   eax
c002573e:	83 c4 10             	add    esp,0x10
c0025741:	b8 00 00 00 00       	mov    eax,0x0
c0025746:	c9                   	leave  
c0025747:	c3                   	ret    

c0025748 <IOAPIC::close(int, int, void*)>:
c0025748:	b8 00 00 00 00       	mov    eax,0x0
c002574d:	c3                   	ret    

c002574e <APIC::io_wait()>:
c002574e:	eb 00                	jmp    c0025750 <APIC::io_wait()+0x2>
c0025750:	eb 00                	jmp    c0025752 <APIC::io_wait()+0x4>
c0025752:	90                   	nop
c0025753:	c3                   	ret    

c0025754 <APIC::getBase()>:
c0025754:	55                   	push   ebp
c0025755:	89 e5                	mov    ebp,esp
c0025757:	83 ec 18             	sub    esp,0x18
c002575a:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c002575f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025765:	83 e0 08             	and    eax,0x8
c0025768:	84 c0                	test   al,al
c002576a:	75 07                	jne    c0025773 <APIC::getBase()+0x1f>
c002576c:	b8 00 00 00 00       	mov    eax,0x0
c0025771:	eb 21                	jmp    c0025794 <APIC::getBase()+0x40>
c0025773:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c0025778:	83 ec 08             	sub    esp,0x8
c002577b:	6a 1b                	push   0x1b
c002577d:	50                   	push   eax
c002577e:	e8 65 96 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0025783:	83 c4 10             	add    esp,0x10
c0025786:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025789:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002578c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002578f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025794:	c9                   	leave  
c0025795:	c3                   	ret    

c0025796 <APIC::eoi(unsigned char)>:
c0025796:	55                   	push   ebp
c0025797:	89 e5                	mov    ebp,esp
c0025799:	83 ec 28             	sub    esp,0x28
c002579c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002579f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00257a2:	83 ec 0c             	sub    esp,0xc
c00257a5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257a8:	e8 a7 ff ff ff       	call   c0025754 <APIC::getBase()>
c00257ad:	83 c4 10             	add    esp,0x10
c00257b0:	05 b0 00 00 00       	add    eax,0xb0
c00257b5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00257b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00257bb:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00257c1:	90                   	nop
c00257c2:	c9                   	leave  
c00257c3:	c3                   	ret    

c00257c4 <APIC::open(int, int, void*)>:
c00257c4:	55                   	push   ebp
c00257c5:	89 e5                	mov    ebp,esp
c00257c7:	57                   	push   edi
c00257c8:	56                   	push   esi
c00257c9:	53                   	push   ebx
c00257ca:	83 ec 2c             	sub    esp,0x2c
c00257cd:	83 ec 0c             	sub    esp,0xc
c00257d0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257d3:	e8 7c ff ff ff       	call   c0025754 <APIC::getBase()>
c00257d8:	83 c4 10             	add    esp,0x10
c00257db:	89 c2                	mov    edx,eax
c00257dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257e0:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00257e6:	0f b6 f8             	movzx  edi,al
c00257e9:	89 d0                	mov    eax,edx
c00257eb:	ba 00 00 00 00       	mov    edx,0x0
c00257f0:	89 c1                	mov    ecx,eax
c00257f2:	80 e5 ff             	and    ch,0xff
c00257f5:	89 cb                	mov    ebx,ecx
c00257f7:	0f b6 f2             	movzx  esi,dl
c00257fa:	89 d8                	mov    eax,ebx
c00257fc:	89 f2                	mov    edx,esi
c00257fe:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025801:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025804:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025808:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002580c:	83 e0 00             	and    eax,0x0
c002580f:	09 d0                	or     eax,edx
c0025811:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025815:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025818:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002581e:	8d 50 01             	lea    edx,[eax+0x1]
c0025821:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025824:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002582a:	0f b6 d0             	movzx  edx,al
c002582d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025830:	83 c2 08             	add    edx,0x8
c0025833:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025837:	0f b6 c9             	movzx  ecx,cl
c002583a:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025840:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025844:	83 ec 0c             	sub    esp,0xc
c0025847:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002584a:	e8 05 ff ff ff       	call   c0025754 <APIC::getBase()>
c002584f:	83 c4 10             	add    esp,0x10
c0025852:	05 f0 00 00 00       	add    eax,0xf0
c0025857:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002585a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002585d:	8b 00                	mov    eax,DWORD PTR [eax]
c002585f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025862:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025869:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025870:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025873:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025876:	89 10                	mov    DWORD PTR [eax],edx
c0025878:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c002587f:	a1 90 0e 03 c0       	mov    eax,ds:0xc0030e90
c0025884:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025887:	7d 7c                	jge    c0025905 <APIC::open(int, int, void*)+0x141>
c0025889:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002588c:	8b 04 85 a0 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf160]
c0025893:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025896:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025899:	8b 04 85 a0 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf160]
c00258a0:	c1 e8 08             	shr    eax,0x8
c00258a3:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00258a7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00258aa:	8b 04 85 a0 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf160]
c00258b1:	c1 e8 18             	shr    eax,0x18
c00258b4:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00258b7:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00258bb:	75 40                	jne    c00258fd <APIC::open(int, int, void*)+0x139>
c00258bd:	83 ec 0c             	sub    esp,0xc
c00258c0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258c3:	e8 8c fe ff ff       	call   c0025754 <APIC::getBase()>
c00258c8:	83 c4 10             	add    esp,0x10
c00258cb:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00258cf:	75 07                	jne    c00258d8 <APIC::open(int, int, void*)+0x114>
c00258d1:	ba 60 03 00 00       	mov    edx,0x360
c00258d6:	eb 05                	jmp    c00258dd <APIC::open(int, int, void*)+0x119>
c00258d8:	ba 50 03 00 00       	mov    edx,0x350
c00258dd:	01 d0                	add    eax,edx
c00258df:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00258e2:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00258e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00258e7:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00258ea:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00258f1:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00258f5:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00258f8:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00258fb:	89 10                	mov    DWORD PTR [eax],edx
c00258fd:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025900:	e9 7a ff ff ff       	jmp    c002587f <APIC::open(int, int, void*)+0xbb>
c0025905:	b8 00 00 00 00       	mov    eax,0x0
c002590a:	8d 65 f4             	lea    esp,[ebp-0xc]
c002590d:	5b                   	pop    ebx
c002590e:	5e                   	pop    esi
c002590f:	5f                   	pop    edi
c0025910:	5d                   	pop    ebp
c0025911:	c3                   	ret    

c0025912 <IOAPIC::IOAPIC()>:
c0025912:	83 ec 0c             	sub    esp,0xc
c0025915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025919:	83 ec 08             	sub    esp,0x8
c002591c:	68 78 d2 02 c0       	push   0xc002d278
c0025921:	50                   	push   eax
c0025922:	e8 0b ec fe ff       	call   c0014532 <Device::Device(char const*)>
c0025927:	83 c4 10             	add    esp,0x10
c002592a:	ba a0 d3 02 c0       	mov    edx,0xc002d3a0
c002592f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025933:	89 10                	mov    DWORD PTR [eax],edx
c0025935:	90                   	nop
c0025936:	83 c4 0c             	add    esp,0xc
c0025939:	c3                   	ret    

c002593a <APIC::APIC()>:
c002593a:	53                   	push   ebx
c002593b:	83 ec 18             	sub    esp,0x18
c002593e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025942:	83 ec 08             	sub    esp,0x8
c0025945:	68 80 d2 02 c0       	push   0xc002d280
c002594a:	50                   	push   eax
c002594b:	e8 4e f3 fe ff       	call   c0014c9e <InterruptController::InterruptController(char const*)>
c0025950:	83 c4 10             	add    esp,0x10
c0025953:	ba 58 d3 02 c0       	mov    edx,0xc002d358
c0025958:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002595c:	89 10                	mov    DWORD PTR [eax],edx
c002595e:	a0 60 29 03 c0       	mov    al,ds:0xc0032960
c0025963:	83 f0 01             	xor    eax,0x1
c0025966:	84 c0                	test   al,al
c0025968:	0f 84 a1 00 00 00    	je     c0025a0f <APIC::APIC()+0xd5>
c002596e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025973:	a0 40 0f 03 c0       	mov    al,ds:0xc0030f40
c0025978:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c002597c:	0f 83 86 00 00 00    	jae    c0025a08 <APIC::APIC()+0xce>
c0025982:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c002598a:	83 ec 0c             	sub    esp,0xc
c002598d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025991:	e8 aa 9e fe ff       	call   c000f840 <malloc>
c0025996:	83 c4 10             	add    esp,0x10
c0025999:	89 c3                	mov    ebx,eax
c002599b:	83 ec 0c             	sub    esp,0xc
c002599e:	53                   	push   ebx
c002599f:	e8 6e ff ff ff       	call   c0025912 <IOAPIC::IOAPIC()>
c00259a4:	83 c4 10             	add    esp,0x10
c00259a7:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00259ab:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00259b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00259b4:	89 14 85 40 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd6c0],edx
c00259bb:	a1 20 29 03 c0       	mov    eax,ds:0xc0032920
c00259c0:	40                   	inc    eax
c00259c1:	a3 20 29 03 c0       	mov    ds:0xc0032920,eax
c00259c6:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c00259cb:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00259d1:	83 ec 08             	sub    esp,0x8
c00259d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00259d8:	50                   	push   eax
c00259d9:	e8 64 e9 fe ff       	call   c0014342 <Device::addChild(Device*)>
c00259de:	83 c4 10             	add    esp,0x10
c00259e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00259e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00259e7:	83 c0 08             	add    eax,0x8
c00259ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00259ec:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00259f1:	6a 00                	push   0x0
c00259f3:	6a 00                	push   0x0
c00259f5:	52                   	push   edx
c00259f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00259fa:	ff d0                	call   eax
c00259fc:	83 c4 10             	add    esp,0x10
c00259ff:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025a03:	e9 6b ff ff ff       	jmp    c0025973 <APIC::APIC()+0x39>
c0025a08:	c6 05 60 29 03 c0 01 	mov    BYTE PTR ds:0xc0032960,0x1
c0025a0f:	90                   	nop
c0025a10:	83 c4 18             	add    esp,0x18
c0025a13:	5b                   	pop    ebx
c0025a14:	c3                   	ret    
c0025a15:	90                   	nop

c0025a16 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025a16:	55                   	push   ebp
c0025a17:	89 e5                	mov    ebp,esp
c0025a19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a1c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025a22:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025a25:	72 1d                	jb     c0025a44 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025a27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a2a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025a30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a33:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025a39:	01 d0                	add    eax,edx
c0025a3b:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025a3e:	73 04                	jae    c0025a44 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025a40:	b0 01                	mov    al,0x1
c0025a42:	eb 02                	jmp    c0025a46 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025a44:	b0 00                	mov    al,0x0
c0025a46:	5d                   	pop    ebp
c0025a47:	c3                   	ret    

c0025a48 <IOAPIC::read(int)>:
c0025a48:	55                   	push   ebp
c0025a49:	89 e5                	mov    ebp,esp
c0025a4b:	83 ec 10             	sub    esp,0x10
c0025a4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a51:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025a57:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025a5a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a5d:	0f b6 d0             	movzx  edx,al
c0025a60:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a63:	89 10                	mov    DWORD PTR [eax],edx
c0025a65:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a68:	83 c0 10             	add    eax,0x10
c0025a6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a6d:	c9                   	leave  
c0025a6e:	c3                   	ret    
c0025a6f:	90                   	nop

c0025a70 <IOAPIC::open(int, int, void*)>:
c0025a70:	55                   	push   ebp
c0025a71:	89 e5                	mov    ebp,esp
c0025a73:	57                   	push   edi
c0025a74:	56                   	push   esi
c0025a75:	53                   	push   ebx
c0025a76:	83 ec 0c             	sub    esp,0xc
c0025a79:	83 ec 0c             	sub    esp,0xc
c0025a7c:	68 ab d2 02 c0       	push   0xc002d2ab
c0025a81:	e8 96 d4 fe ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0025a86:	83 c4 10             	add    esp,0x10
c0025a89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a8c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a8f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025a95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a98:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025a9e:	8b 14 85 80 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf080]
c0025aa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aa8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025aae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ab1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025ab7:	8b 14 85 00 10 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf000]
c0025abe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ac1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025ac7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aca:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025ad0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ad3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025ad9:	0f b6 f8             	movzx  edi,al
c0025adc:	89 d0                	mov    eax,edx
c0025ade:	ba 00 00 00 00       	mov    edx,0x0
c0025ae3:	89 c1                	mov    ecx,eax
c0025ae5:	80 e5 ff             	and    ch,0xff
c0025ae8:	89 cb                	mov    ebx,ecx
c0025aea:	0f b6 f2             	movzx  esi,dl
c0025aed:	89 d8                	mov    eax,ebx
c0025aef:	89 f2                	mov    edx,esi
c0025af1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025af4:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025af7:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025afb:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025aff:	83 e0 00             	and    eax,0x0
c0025b02:	09 d0                	or     eax,edx
c0025b04:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025b08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b0b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b11:	8d 50 01             	lea    edx,[eax+0x1]
c0025b14:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025b17:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025b1d:	0f b6 d0             	movzx  edx,al
c0025b20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b23:	83 c2 08             	add    edx,0x8
c0025b26:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025b2a:	0f b6 c9             	movzx  ecx,cl
c0025b2d:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025b33:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025b37:	83 ec 08             	sub    esp,0x8
c0025b3a:	6a 01                	push   0x1
c0025b3c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b3f:	e8 04 ff ff ff       	call   c0025a48 <IOAPIC::read(int)>
c0025b44:	83 c4 10             	add    esp,0x10
c0025b47:	c1 f8 10             	sar    eax,0x10
c0025b4a:	0f b6 c0             	movzx  eax,al
c0025b4d:	8d 50 01             	lea    edx,[eax+0x1]
c0025b50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b53:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025b59:	b8 00 00 00 00       	mov    eax,0x0
c0025b5e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025b61:	5b                   	pop    ebx
c0025b62:	5e                   	pop    esi
c0025b63:	5f                   	pop    edi
c0025b64:	5d                   	pop    ebp
c0025b65:	c3                   	ret    

c0025b66 <IOAPIC::write(int, int)>:
c0025b66:	55                   	push   ebp
c0025b67:	89 e5                	mov    ebp,esp
c0025b69:	83 ec 10             	sub    esp,0x10
c0025b6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b6f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025b75:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025b78:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b7b:	0f b6 d0             	movzx  edx,al
c0025b7e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b81:	89 10                	mov    DWORD PTR [eax],edx
c0025b83:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b86:	8d 50 10             	lea    edx,[eax+0x10]
c0025b89:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025b8c:	89 02                	mov    DWORD PTR [edx],eax
c0025b8e:	90                   	nop
c0025b8f:	c9                   	leave  
c0025b90:	c3                   	ret    
c0025b91:	90                   	nop

c0025b92 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025b92:	55                   	push   ebp
c0025b93:	89 e5                	mov    ebp,esp
c0025b95:	53                   	push   ebx
c0025b96:	83 ec 2c             	sub    esp,0x2c
c0025b99:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b9c:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025b9f:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025ba2:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025ba5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025ba8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025bab:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025bae:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025bb1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025bb4:	88 d8                	mov    al,bl
c0025bb6:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025bb9:	88 c8                	mov    al,cl
c0025bbb:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025bbe:	88 d0                	mov    al,dl
c0025bc0:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025bc3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025bc7:	83 c0 08             	add    eax,0x8
c0025bca:	01 c0                	add    eax,eax
c0025bcc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025bcf:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025bd3:	83 c0 08             	add    eax,0x8
c0025bd6:	01 c0                	add    eax,eax
c0025bd8:	40                   	inc    eax
c0025bd9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025bdc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025bdf:	50                   	push   eax
c0025be0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025be3:	e8 60 fe ff ff       	call   c0025a48 <IOAPIC::read(int)>
c0025be8:	83 c4 08             	add    esp,0x8
c0025beb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025bee:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025bf5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025bf8:	c1 e0 18             	shl    eax,0x18
c0025bfb:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025bfe:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025c01:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025c04:	52                   	push   edx
c0025c05:	50                   	push   eax
c0025c06:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c09:	e8 58 ff ff ff       	call   c0025b66 <IOAPIC::write(int, int)>
c0025c0e:	83 c4 0c             	add    esp,0xc
c0025c11:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c14:	50                   	push   eax
c0025c15:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c18:	e8 2b fe ff ff       	call   c0025a48 <IOAPIC::read(int)>
c0025c1d:	83 c4 08             	add    esp,0x8
c0025c20:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025c23:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025c2a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025c31:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025c38:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025c3c:	74 09                	je     c0025c47 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025c3e:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025c45:	eb 07                	jmp    c0025c4e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025c47:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025c4e:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025c52:	74 09                	je     c0025c5d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025c54:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025c5b:	eb 07                	jmp    c0025c64 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025c5d:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025c64:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025c6b:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025c6f:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025c72:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025c75:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c78:	52                   	push   edx
c0025c79:	50                   	push   eax
c0025c7a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c7d:	e8 e4 fe ff ff       	call   c0025b66 <IOAPIC::write(int, int)>
c0025c82:	83 c4 0c             	add    esp,0xc
c0025c85:	90                   	nop
c0025c86:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025c89:	c9                   	leave  
c0025c8a:	c3                   	ret    
c0025c8b:	90                   	nop

c0025c8c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025c8c:	55                   	push   ebp
c0025c8d:	89 e5                	mov    ebp,esp
c0025c8f:	57                   	push   edi
c0025c90:	56                   	push   esi
c0025c91:	53                   	push   ebx
c0025c92:	83 ec 2c             	sub    esp,0x2c
c0025c95:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025c98:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025c9b:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025c9f:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025ca3:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025ca7:	74 5a                	je     c0025d03 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025ca9:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025cad:	7f 44                	jg     c0025cf3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025caf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cb2:	05 00 d8 02 c0       	add    eax,0xc002d800
c0025cb7:	8a 00                	mov    al,BYTE PTR [eax]
c0025cb9:	0f b6 c0             	movzx  eax,al
c0025cbc:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025cbf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cc2:	66 8b 84 00 20 0f 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf0e0]
c0025cca:	0f b7 c0             	movzx  eax,ax
c0025ccd:	83 e0 02             	and    eax,0x2
c0025cd0:	85 c0                	test   eax,eax
c0025cd2:	74 04                	je     c0025cd8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025cd4:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025cd8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cdb:	66 8b 84 00 20 0f 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf0e0]
c0025ce3:	0f b7 c0             	movzx  eax,ax
c0025ce6:	83 e0 08             	and    eax,0x8
c0025ce9:	85 c0                	test   eax,eax
c0025ceb:	74 16                	je     c0025d03 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025ced:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025cf1:	eb 10                	jmp    c0025d03 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025cf3:	83 ec 0c             	sub    esp,0xc
c0025cf6:	68 bc d2 02 c0       	push   0xc002d2bc
c0025cfb:	e8 bd 48 ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c0025d00:	83 c4 10             	add    esp,0x10
c0025d03:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025d07:	a1 20 29 03 c0       	mov    eax,ds:0xc0032920
c0025d0c:	83 ec 08             	sub    esp,0x8
c0025d0f:	50                   	push   eax
c0025d10:	68 f4 d2 02 c0       	push   0xc002d2f4
c0025d15:	e8 02 d2 fe ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0025d1a:	83 c4 10             	add    esp,0x10
c0025d1d:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025d24:	a1 20 29 03 c0       	mov    eax,ds:0xc0032920
c0025d29:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025d2c:	7d 67                	jge    c0025d95 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025d2e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025d31:	8b 04 85 40 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd6c0]
c0025d38:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d3b:	83 ec 08             	sub    esp,0x8
c0025d3e:	52                   	push   edx
c0025d3f:	50                   	push   eax
c0025d40:	e8 d1 fc ff ff       	call   c0025a16 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025d45:	83 c4 10             	add    esp,0x10
c0025d48:	84 c0                	test   al,al
c0025d4a:	74 44                	je     c0025d90 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025d4c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025d4f:	8b 1c 85 40 29 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd6c0]
c0025d56:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025d5a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025d5d:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025d61:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d64:	83 c0 20             	add    eax,0x20
c0025d67:	0f b6 f0             	movzx  esi,al
c0025d6a:	b8 00 00 00 00       	mov    eax,0x0
c0025d6f:	99                   	cdq    
c0025d70:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025d73:	0f b6 c9             	movzx  ecx,cl
c0025d76:	83 ec 04             	sub    esp,0x4
c0025d79:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025d7c:	57                   	push   edi
c0025d7d:	56                   	push   esi
c0025d7e:	52                   	push   edx
c0025d7f:	50                   	push   eax
c0025d80:	51                   	push   ecx
c0025d81:	53                   	push   ebx
c0025d82:	e8 0b fe ff ff       	call   c0025b92 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025d87:	83 c4 20             	add    esp,0x20
c0025d8a:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025d8e:	eb 05                	jmp    c0025d95 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025d90:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025d93:	eb 8f                	jmp    c0025d24 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025d95:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025d98:	83 f0 01             	xor    eax,0x1
c0025d9b:	84 c0                	test   al,al
c0025d9d:	74 10                	je     c0025daf <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025d9f:	83 ec 0c             	sub    esp,0xc
c0025da2:	68 0b d3 02 c0       	push   0xc002d30b
c0025da7:	e8 11 48 ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c0025dac:	83 c4 10             	add    esp,0x10
c0025daf:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025db3:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025dba:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025dbe:	7f 65                	jg     c0025e25 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025dc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025dc3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025dc6:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025dcd:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025dd0:	01 ca                	add    edx,ecx
c0025dd2:	83 c2 54             	add    edx,0x54
c0025dd5:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025dd9:	85 c0                	test   eax,eax
c0025ddb:	75 43                	jne    c0025e20 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025ddd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025de0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025de3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025dea:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025ded:	01 ca                	add    edx,ecx
c0025def:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025df2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025df5:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025df9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025dfc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025dff:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e06:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e09:	01 ca                	add    edx,ecx
c0025e0b:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025e11:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025e14:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025e18:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e1b:	83 e8 20             	sub    eax,0x20
c0025e1e:	eb 1a                	jmp    c0025e3a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025e20:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025e23:	eb 95                	jmp    c0025dba <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025e25:	83 ec 0c             	sub    esp,0xc
c0025e28:	68 18 d3 02 c0       	push   0xc002d318
c0025e2d:	e8 8b 47 ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c0025e32:	83 c4 10             	add    esp,0x10
c0025e35:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025e3a:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025e3d:	5b                   	pop    ebx
c0025e3e:	5e                   	pop    esi
c0025e3f:	5f                   	pop    edi
c0025e40:	5d                   	pop    ebp
c0025e41:	c3                   	ret    

c0025e42 <PIC::disable()>:
c0025e42:	55                   	push   ebp
c0025e43:	89 e5                	mov    ebp,esp
c0025e45:	83 ec 10             	sub    esp,0x10
c0025e48:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025e4e:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025e52:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025e55:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025e59:	ee                   	out    dx,al
c0025e5a:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025e60:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025e64:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025e67:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025e6b:	ee                   	out    dx,al
c0025e6c:	90                   	nop
c0025e6d:	c9                   	leave  
c0025e6e:	c3                   	ret    
c0025e6f:	90                   	nop

c0025e70 <PIC::close(int, int, void*)>:
c0025e70:	55                   	push   ebp
c0025e71:	89 e5                	mov    ebp,esp
c0025e73:	83 ec 08             	sub    esp,0x8
c0025e76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e79:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e7b:	83 c0 3c             	add    eax,0x3c
c0025e7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e80:	83 ec 0c             	sub    esp,0xc
c0025e83:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e86:	ff d0                	call   eax
c0025e88:	83 c4 10             	add    esp,0x10
c0025e8b:	b8 00 00 00 00       	mov    eax,0x0
c0025e90:	c9                   	leave  
c0025e91:	c3                   	ret    

c0025e92 <PIC::PIC()>:
c0025e92:	83 ec 0c             	sub    esp,0xc
c0025e95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e99:	83 ec 08             	sub    esp,0x8
c0025e9c:	68 c4 d3 02 c0       	push   0xc002d3c4
c0025ea1:	50                   	push   eax
c0025ea2:	e8 f7 ed fe ff       	call   c0014c9e <InterruptController::InterruptController(char const*)>
c0025ea7:	83 c4 10             	add    esp,0x10
c0025eaa:	ba f0 d3 02 c0       	mov    edx,0xc002d3f0
c0025eaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eb3:	89 10                	mov    DWORD PTR [eax],edx
c0025eb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eb9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ebf:	0f b6 d0             	movzx  edx,al
c0025ec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ec6:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025ecd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ed1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ed7:	0f b6 d0             	movzx  edx,al
c0025eda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ede:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025ee3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ee7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025eed:	8d 50 01             	lea    edx,[eax+0x1]
c0025ef0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025ef4:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025efa:	0f b6 d0             	movzx  edx,al
c0025efd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f01:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025f05:	83 e1 3f             	and    ecx,0x3f
c0025f08:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025f0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f10:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f16:	0f b6 d0             	movzx  edx,al
c0025f19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f1d:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025f24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f28:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f2e:	0f b6 d0             	movzx  edx,al
c0025f31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f35:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025f3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f3e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f44:	8d 50 01             	lea    edx,[eax+0x1]
c0025f47:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f4b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025f51:	0f b6 d0             	movzx  edx,al
c0025f54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f58:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025f5c:	83 e1 3f             	and    ecx,0x3f
c0025f5f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025f63:	90                   	nop
c0025f64:	83 c4 0c             	add    esp,0xc
c0025f67:	c3                   	ret    

c0025f68 <PIC::ioWait()>:
c0025f68:	eb 00                	jmp    c0025f6a <PIC::ioWait()+0x2>
c0025f6a:	eb 00                	jmp    c0025f6c <PIC::ioWait()+0x4>
c0025f6c:	90                   	nop
c0025f6d:	c3                   	ret    

c0025f6e <PIC::getIRQReg(int)>:
c0025f6e:	55                   	push   ebp
c0025f6f:	89 e5                	mov    ebp,esp
c0025f71:	83 ec 10             	sub    esp,0x10
c0025f74:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f77:	0f b6 c0             	movzx  eax,al
c0025f7a:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025f80:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025f83:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025f86:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025f8a:	ee                   	out    dx,al
c0025f8b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f8e:	0f b6 c0             	movzx  eax,al
c0025f91:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025f97:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025f9a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025f9d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025fa1:	ee                   	out    dx,al
c0025fa2:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025fa8:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025fac:	89 c2                	mov    edx,eax
c0025fae:	ec                   	in     al,dx
c0025faf:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025fb2:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025fb5:	0f b6 c0             	movzx  eax,al
c0025fb8:	c1 e0 08             	shl    eax,0x8
c0025fbb:	89 c1                	mov    ecx,eax
c0025fbd:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025fc3:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025fc7:	89 c2                	mov    edx,eax
c0025fc9:	ec                   	in     al,dx
c0025fca:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025fcd:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025fd0:	0f b6 c0             	movzx  eax,al
c0025fd3:	09 c8                	or     eax,ecx
c0025fd5:	c9                   	leave  
c0025fd6:	c3                   	ret    
c0025fd7:	90                   	nop

c0025fd8 <PIC::eoi(unsigned char)>:
c0025fd8:	55                   	push   ebp
c0025fd9:	89 e5                	mov    ebp,esp
c0025fdb:	83 ec 14             	sub    esp,0x14
c0025fde:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fe1:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025fe4:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025fe8:	75 1e                	jne    c0026008 <PIC::eoi(unsigned char)+0x30>
c0025fea:	6a 0b                	push   0xb
c0025fec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fef:	e8 7a ff ff ff       	call   c0025f6e <PIC::getIRQReg(int)>
c0025ff4:	83 c4 08             	add    esp,0x8
c0025ff7:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025ffb:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025fff:	25 80 00 00 00       	and    eax,0x80
c0026004:	85 c0                	test   eax,eax
c0026006:	74 5f                	je     c0026067 <PIC::eoi(unsigned char)+0x8f>
c0026008:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c002600c:	75 2d                	jne    c002603b <PIC::eoi(unsigned char)+0x63>
c002600e:	6a 0b                	push   0xb
c0026010:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026013:	e8 56 ff ff ff       	call   c0025f6e <PIC::getIRQReg(int)>
c0026018:	83 c4 08             	add    esp,0x8
c002601b:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c002601f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026022:	66 85 c0             	test   ax,ax
c0026025:	78 14                	js     c002603b <PIC::eoi(unsigned char)+0x63>
c0026027:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c002602d:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026031:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026034:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026038:	ee                   	out    dx,al
c0026039:	eb 2d                	jmp    c0026068 <PIC::eoi(unsigned char)+0x90>
c002603b:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002603f:	76 12                	jbe    c0026053 <PIC::eoi(unsigned char)+0x7b>
c0026041:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026047:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c002604b:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002604e:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026052:	ee                   	out    dx,al
c0026053:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026059:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c002605d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026060:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026064:	ee                   	out    dx,al
c0026065:	eb 01                	jmp    c0026068 <PIC::eoi(unsigned char)+0x90>
c0026067:	90                   	nop
c0026068:	c9                   	leave  
c0026069:	c3                   	ret    

c002606a <PIC::remap()>:
c002606a:	55                   	push   ebp
c002606b:	89 e5                	mov    ebp,esp
c002606d:	83 ec 48             	sub    esp,0x48
c0026070:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026077:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c002607e:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026084:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026087:	89 c2                	mov    edx,eax
c0026089:	ec                   	in     al,dx
c002608a:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c002608d:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026090:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026093:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026099:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c002609c:	89 c2                	mov    edx,eax
c002609e:	ec                   	in     al,dx
c002609f:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c00260a2:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c00260a5:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00260a8:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00260ae:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00260b2:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00260b5:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00260b8:	ee                   	out    dx,al
c00260b9:	83 ec 0c             	sub    esp,0xc
c00260bc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260bf:	e8 a4 fe ff ff       	call   c0025f68 <PIC::ioWait()>
c00260c4:	83 c4 10             	add    esp,0x10
c00260c7:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00260cd:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00260d1:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00260d4:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00260d7:	ee                   	out    dx,al
c00260d8:	83 ec 0c             	sub    esp,0xc
c00260db:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260de:	e8 85 fe ff ff       	call   c0025f68 <PIC::ioWait()>
c00260e3:	83 c4 10             	add    esp,0x10
c00260e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00260e9:	0f b6 c0             	movzx  eax,al
c00260ec:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00260f2:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00260f5:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00260f8:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00260fb:	ee                   	out    dx,al
c00260fc:	83 ec 0c             	sub    esp,0xc
c00260ff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026102:	e8 61 fe ff ff       	call   c0025f68 <PIC::ioWait()>
c0026107:	83 c4 10             	add    esp,0x10
c002610a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002610d:	0f b6 c0             	movzx  eax,al
c0026110:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026116:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026119:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c002611c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002611f:	ee                   	out    dx,al
c0026120:	83 ec 0c             	sub    esp,0xc
c0026123:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026126:	e8 3d fe ff ff       	call   c0025f68 <PIC::ioWait()>
c002612b:	83 c4 10             	add    esp,0x10
c002612e:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026134:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026138:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c002613b:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c002613e:	ee                   	out    dx,al
c002613f:	83 ec 0c             	sub    esp,0xc
c0026142:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026145:	e8 1e fe ff ff       	call   c0025f68 <PIC::ioWait()>
c002614a:	83 c4 10             	add    esp,0x10
c002614d:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026153:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026157:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c002615a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002615d:	ee                   	out    dx,al
c002615e:	83 ec 0c             	sub    esp,0xc
c0026161:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026164:	e8 ff fd ff ff       	call   c0025f68 <PIC::ioWait()>
c0026169:	83 c4 10             	add    esp,0x10
c002616c:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026172:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026176:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026179:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002617c:	ee                   	out    dx,al
c002617d:	83 ec 0c             	sub    esp,0xc
c0026180:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026183:	e8 e0 fd ff ff       	call   c0025f68 <PIC::ioWait()>
c0026188:	83 c4 10             	add    esp,0x10
c002618b:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026191:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026195:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026198:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002619b:	ee                   	out    dx,al
c002619c:	83 ec 0c             	sub    esp,0xc
c002619f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261a2:	e8 c1 fd ff ff       	call   c0025f68 <PIC::ioWait()>
c00261a7:	83 c4 10             	add    esp,0x10
c00261aa:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00261ae:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00261b4:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00261b7:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00261ba:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00261bd:	ee                   	out    dx,al
c00261be:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00261c2:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00261c8:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00261cb:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00261ce:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00261d1:	ee                   	out    dx,al
c00261d2:	90                   	nop
c00261d3:	c9                   	leave  
c00261d4:	c3                   	ret    
c00261d5:	90                   	nop

c00261d6 <PIC::open(int, int, void*)>:
c00261d6:	55                   	push   ebp
c00261d7:	89 e5                	mov    ebp,esp
c00261d9:	83 ec 18             	sub    esp,0x18
c00261dc:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00261e2:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00261e6:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00261e9:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00261ed:	ee                   	out    dx,al
c00261ee:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00261f4:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00261f8:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00261fb:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00261ff:	ee                   	out    dx,al
c0026200:	83 ec 0c             	sub    esp,0xc
c0026203:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026206:	e8 5f fe ff ff       	call   c002606a <PIC::remap()>
c002620b:	83 c4 10             	add    esp,0x10
c002620e:	b8 00 00 00 00       	mov    eax,0x0
c0026213:	c9                   	leave  
c0026214:	c3                   	ret    
c0026215:	90                   	nop

c0026216 <APICTimer::close(int, int, void*)>:
c0026216:	b8 00 00 00 00       	mov    eax,0x0
c002621b:	c3                   	ret    

c002621c <apicTimerHandler(regs*, void*)>:
c002621c:	83 ec 0c             	sub    esp,0xc
c002621f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026223:	8b 00                	mov    eax,DWORD PTR [eax]
c0026225:	99                   	cdq    
c0026226:	52                   	push   edx
c0026227:	50                   	push   eax
c0026228:	6a 00                	push   0x0
c002622a:	68 00 ca 9a 3b       	push   0x3b9aca00
c002622f:	e8 88 07 00 00       	call   c00269bc <__udivdi3>
c0026234:	83 c4 10             	add    esp,0x10
c0026237:	83 ec 08             	sub    esp,0x8
c002623a:	52                   	push   edx
c002623b:	50                   	push   eax
c002623c:	e8 a8 0a ff ff       	call   c0016ce9 <timerHandler(unsigned long long)>
c0026241:	83 c4 10             	add    esp,0x10
c0026244:	90                   	nop
c0026245:	83 c4 0c             	add    esp,0xc
c0026248:	c3                   	ret    
c0026249:	90                   	nop

c002624a <APICTimer::write(int)>:
c002624a:	53                   	push   ebx
c002624b:	83 ec 28             	sub    esp,0x28
c002624e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026252:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026256:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002625c:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c0026261:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026267:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002626d:	83 ec 0c             	sub    esp,0xc
c0026270:	50                   	push   eax
c0026271:	e8 de f4 ff ff       	call   c0025754 <APIC::getBase()>
c0026276:	83 c4 10             	add    esp,0x10
c0026279:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002627d:	a1 30 ec 02 c0       	mov    eax,ds:0xc002ec30
c0026282:	8b 15 34 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec34
c0026288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002628c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026290:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026294:	05 e0 03 00 00       	add    eax,0x3e0
c0026299:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002629f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262a3:	05 80 03 00 00       	add    eax,0x380
c00262a8:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00262ae:	fb                   	sti    
c00262af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00262b7:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c00262bc:	83 d2 00             	adc    edx,0x0
c00262bf:	89 c1                	mov    ecx,eax
c00262c1:	89 d3                	mov    ebx,edx
c00262c3:	a1 30 ec 02 c0       	mov    eax,ds:0xc002ec30
c00262c8:	8b 15 34 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec34
c00262ce:	39 c8                	cmp    eax,ecx
c00262d0:	89 d0                	mov    eax,edx
c00262d2:	19 d8                	sbb    eax,ebx
c00262d4:	73 02                	jae    c00262d8 <APICTimer::write(int)+0x8e>
c00262d6:	eb d7                	jmp    c00262af <APICTimer::write(int)+0x65>
c00262d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262dc:	05 20 03 00 00       	add    eax,0x320
c00262e1:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00262e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262eb:	05 90 03 00 00       	add    eax,0x390
c00262f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00262f2:	f7 d0                	not    eax
c00262f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00262f8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00262fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026300:	ba 00 00 00 00       	mov    edx,0x0
c0026305:	f7 f3                	div    ebx
c0026307:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002630b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002630f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026315:	0d 00 00 02 00       	or     eax,0x20000
c002631a:	89 c2                	mov    edx,eax
c002631c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026320:	05 20 03 00 00       	add    eax,0x320
c0026325:	89 10                	mov    DWORD PTR [eax],edx
c0026327:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002632b:	05 e0 03 00 00       	add    eax,0x3e0
c0026330:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026336:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002633a:	05 80 03 00 00       	add    eax,0x380
c002633f:	89 c2                	mov    edx,eax
c0026341:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026345:	89 02                	mov    DWORD PTR [edx],eax
c0026347:	90                   	nop
c0026348:	83 c4 28             	add    esp,0x28
c002634b:	5b                   	pop    ebx
c002634c:	c3                   	ret    
c002634d:	90                   	nop

c002634e <APICTimer::open(int, int, void*)>:
c002634e:	57                   	push   edi
c002634f:	56                   	push   esi
c0026350:	53                   	push   ebx
c0026351:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026355:	8b 00                	mov    eax,DWORD PTR [eax]
c0026357:	83 c0 24             	add    eax,0x24
c002635a:	8b 00                	mov    eax,DWORD PTR [eax]
c002635c:	83 ec 08             	sub    esp,0x8
c002635f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026363:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026367:	ff d0                	call   eax
c0026369:	83 c4 10             	add    esp,0x10
c002636c:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c0026371:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026377:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002637d:	83 ec 0c             	sub    esp,0xc
c0026380:	50                   	push   eax
c0026381:	e8 ce f3 ff ff       	call   c0025754 <APIC::getBase()>
c0026386:	83 c4 10             	add    esp,0x10
c0026389:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c002638f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026393:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026399:	0f b6 f8             	movzx  edi,al
c002639c:	89 d0                	mov    eax,edx
c002639e:	ba 00 00 00 00       	mov    edx,0x0
c00263a3:	89 c1                	mov    ecx,eax
c00263a5:	80 e5 ff             	and    ch,0xff
c00263a8:	89 cb                	mov    ebx,ecx
c00263aa:	0f b6 f2             	movzx  esi,dl
c00263ad:	89 d8                	mov    eax,ebx
c00263af:	89 f2                	mov    edx,esi
c00263b1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00263b5:	8d 5f 08             	lea    ebx,[edi+0x8]
c00263b8:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00263bc:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00263c0:	83 e0 00             	and    eax,0x0
c00263c3:	09 d0                	or     eax,edx
c00263c5:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00263c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263cd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00263d3:	8d 50 01             	lea    edx,[eax+0x1]
c00263d6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00263da:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00263e0:	0f b6 d0             	movzx  edx,al
c00263e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263e7:	83 c2 08             	add    edx,0x8
c00263ea:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00263ee:	0f b6 c9             	movzx  ecx,cl
c00263f1:	81 c9 00 00 01 00    	or     ecx,0x10000
c00263f7:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00263fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263ff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026403:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026409:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002640d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026411:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026417:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002641b:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026421:	83 ec 0c             	sub    esp,0xc
c0026424:	51                   	push   ecx
c0026425:	6a 01                	push   0x1
c0026427:	68 1c 62 02 c0       	push   0xc002621c
c002642c:	52                   	push   edx
c002642d:	50                   	push   eax
c002642e:	e8 93 de fe ff       	call   c00142c6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026433:	83 c4 20             	add    esp,0x20
c0026436:	89 c2                	mov    edx,eax
c0026438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002643c:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026442:	b8 00 00 00 00       	mov    eax,0x0
c0026447:	5b                   	pop    ebx
c0026448:	5e                   	pop    esi
c0026449:	5f                   	pop    edi
c002644a:	c3                   	ret    
c002644b:	90                   	nop

c002644c <APICTimer::APICTimer()>:
c002644c:	83 ec 0c             	sub    esp,0xc
c002644f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026453:	83 ec 08             	sub    esp,0x8
c0026456:	68 30 d4 02 c0       	push   0xc002d430
c002645b:	50                   	push   eax
c002645c:	e8 f9 07 ff ff       	call   c0016c5a <Timer::Timer(char const*)>
c0026461:	83 c4 10             	add    esp,0x10
c0026464:	ba 44 d4 02 c0       	mov    edx,0xc002d444
c0026469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002646d:	89 10                	mov    DWORD PTR [eax],edx
c002646f:	90                   	nop
c0026470:	83 c4 0c             	add    esp,0xc
c0026473:	c3                   	ret    

c0026474 <PIT::write(int)>:
c0026474:	83 ec 10             	sub    esp,0x10
c0026477:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002647b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002647f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026485:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026489:	a3 64 29 03 c0       	mov    ds:0xc0032964,eax
c002648e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026493:	99                   	cdq    
c0026494:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026498:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002649c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00264a3:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00264a8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00264ac:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00264b1:	ee                   	out    dx,al
c00264b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00264b6:	0f b6 c0             	movzx  eax,al
c00264b9:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00264c0:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00264c4:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00264c8:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00264cd:	ee                   	out    dx,al
c00264ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00264d2:	c1 f8 08             	sar    eax,0x8
c00264d5:	0f b6 c0             	movzx  eax,al
c00264d8:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00264df:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00264e3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00264e7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00264ec:	ee                   	out    dx,al
c00264ed:	90                   	nop
c00264ee:	83 c4 10             	add    esp,0x10
c00264f1:	c3                   	ret    

c00264f2 <pitHandler(regs*, void*)>:
c00264f2:	83 ec 0c             	sub    esp,0xc
c00264f5:	a1 64 29 03 c0       	mov    eax,ds:0xc0032964
c00264fa:	99                   	cdq    
c00264fb:	52                   	push   edx
c00264fc:	50                   	push   eax
c00264fd:	6a 00                	push   0x0
c00264ff:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026504:	e8 b3 04 00 00       	call   c00269bc <__udivdi3>
c0026509:	83 c4 10             	add    esp,0x10
c002650c:	83 ec 08             	sub    esp,0x8
c002650f:	52                   	push   edx
c0026510:	50                   	push   eax
c0026511:	e8 d3 07 ff ff       	call   c0016ce9 <timerHandler(unsigned long long)>
c0026516:	83 c4 10             	add    esp,0x10
c0026519:	90                   	nop
c002651a:	83 c4 0c             	add    esp,0xc
c002651d:	c3                   	ret    

c002651e <PIT::open(int, int, void*)>:
c002651e:	83 ec 0c             	sub    esp,0xc
c0026521:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026525:	8b 00                	mov    eax,DWORD PTR [eax]
c0026527:	83 c0 24             	add    eax,0x24
c002652a:	8b 00                	mov    eax,DWORD PTR [eax]
c002652c:	83 ec 08             	sub    esp,0x8
c002652f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026533:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026537:	ff d0                	call   eax
c0026539:	83 c4 10             	add    esp,0x10
c002653c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026540:	83 ec 0c             	sub    esp,0xc
c0026543:	6a 00                	push   0x0
c0026545:	6a 01                	push   0x1
c0026547:	68 f2 64 02 c0       	push   0xc00264f2
c002654c:	6a 00                	push   0x0
c002654e:	50                   	push   eax
c002654f:	e8 72 dd fe ff       	call   c00142c6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026554:	83 c4 20             	add    esp,0x20
c0026557:	89 c2                	mov    edx,eax
c0026559:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002655d:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026563:	b8 00 00 00 00       	mov    eax,0x0
c0026568:	83 c4 0c             	add    esp,0xc
c002656b:	c3                   	ret    

c002656c <PIT::close(int, int, void*)>:
c002656c:	83 ec 0c             	sub    esp,0xc
c002656f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026573:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002657d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026581:	6a 01                	push   0x1
c0026583:	68 f2 64 02 c0       	push   0xc00264f2
c0026588:	6a 00                	push   0x0
c002658a:	50                   	push   eax
c002658b:	e8 74 dd fe ff       	call   c0014304 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026590:	83 c4 10             	add    esp,0x10
c0026593:	b8 00 00 00 00       	mov    eax,0x0
c0026598:	83 c4 0c             	add    esp,0xc
c002659b:	c3                   	ret    

c002659c <PIT::PIT()>:
c002659c:	83 ec 0c             	sub    esp,0xc
c002659f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265a3:	83 ec 08             	sub    esp,0x8
c00265a6:	68 6c d4 02 c0       	push   0xc002d46c
c00265ab:	50                   	push   eax
c00265ac:	e8 a9 06 ff ff       	call   c0016c5a <Timer::Timer(char const*)>
c00265b1:	83 c4 10             	add    esp,0x10
c00265b4:	ba 94 d4 02 c0       	mov    edx,0xc002d494
c00265b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265bd:	89 10                	mov    DWORD PTR [eax],edx
c00265bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265c3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00265c9:	0f b6 d0             	movzx  edx,al
c00265cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265d0:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00265d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265db:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00265e1:	0f b6 d0             	movzx  edx,al
c00265e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265e8:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00265ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265f1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00265f7:	8d 50 01             	lea    edx,[eax+0x1]
c00265fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00265fe:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026604:	0f b6 d0             	movzx  edx,al
c0026607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002660b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002660f:	83 e1 3f             	and    ecx,0x3f
c0026612:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026616:	90                   	nop
c0026617:	83 c4 0c             	add    esp,0xc
c002661a:	c3                   	ret    
c002661b:	66 90                	xchg   ax,ax
c002661d:	66 90                	xchg   ax,ax
c002661f:	90                   	nop

c0026620 <avxDetect>:
c0026620:	b8 00 00 00 00       	mov    eax,0x0
c0026625:	c3                   	ret    

c0026626 <avxSave>:
c0026626:	c3                   	ret    

c0026627 <avxLoad>:
c0026627:	c3                   	ret    

c0026628 <avxInit>:
c0026628:	c3                   	ret    

c0026629 <avxClose>:
c0026629:	c3                   	ret    

c002662a <wouldSheSayYes>:
c002662a:	c3                   	ret    
c002662b:	49                   	dec    ecx
c002662c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026630:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026634:	75 20                	jne    c0026656 <sseDetect.noSSE+0x1>
c0026636:	4e                   	dec    esi
c0026637:	79 61                	jns    c002669a <x87Detect+0x14>
c0026639:	68 2e 2e 2e 00       	push   0x2e2e2e
c002663e:	66 90                	xchg   ax,ax

c0026640 <absolutelyNoChanceInHell>:
c0026640:	b8 01 00 00 00       	mov    eax,0x1
c0026645:	0f a2                	cpuid  
c0026647:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002664d:	74 06                	je     c0026655 <sseDetect.noSSE>
c002664f:	b8 01 00 00 00       	mov    eax,0x1
c0026654:	c3                   	ret    

c0026655 <sseDetect.noSSE>:
c0026655:	31 c0                	xor    eax,eax
c0026657:	c3                   	ret    

c0026658 <sseSave>:
c0026658:	0f ae 44 24 08       	fxsave [esp+0x8]
c002665d:	c3                   	ret    

c002665e <sseLoad>:
c002665e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0026663:	c3                   	ret    

c0026664 <sseInit>:
c0026664:	e8 43 00 00 00       	call   c00266ac <x87Init>
c0026669:	0f 20 e0             	mov    eax,cr4
c002666c:	66 0d 00 06          	or     ax,0x600
c0026670:	0f 22 e0             	mov    cr4,eax
c0026673:	c3                   	ret    

c0026674 <sseClose>:
c0026674:	c3                   	ret    
c0026675:	66 90                	xchg   ax,ax
c0026677:	66 90                	xchg   ax,ax
c0026679:	66 90                	xchg   ax,ax
c002667b:	66 90                	xchg   ax,ax
c002667d:	66 90                	xchg   ax,ax
c002667f:	90                   	nop

c0026680 <value_37F>:
c0026680:	7f 03                	jg     c0026685 <value_37A+0x1>

c0026682 <value_37E>:
c0026682:	7e 03                	jle    c0026687 <x87Detect+0x1>

c0026684 <value_37A>:
c0026684:	7a 03                	jp     c0026689 <x87Detect+0x3>

c0026686 <x87Detect>:
c0026686:	b8 01 00 00 00       	mov    eax,0x1
c002668b:	0f a2                	cpuid  
c002668d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026693:	74 06                	je     c002669b <x87Detect.nox87>
c0026695:	b8 01 00 00 00       	mov    eax,0x1
c002669a:	c3                   	ret    

c002669b <x87Detect.nox87>:
c002669b:	b8 00 00 00 00       	mov    eax,0x0
c00266a0:	c3                   	ret    

c00266a1 <x87Save>:
c00266a1:	9b dd 74 24 08       	fsave  [esp+0x8]
c00266a6:	c3                   	ret    

c00266a7 <x87Load>:
c00266a7:	dd 64 24 08          	frstor [esp+0x8]
c00266ab:	c3                   	ret    

c00266ac <x87Init>:
c00266ac:	9b db e3             	finit  
c00266af:	0f 20 c0             	mov    eax,cr0
c00266b2:	66 25 fb ff          	and    ax,0xfffb
c00266b6:	66 0d 22 00          	or     ax,0x22
c00266ba:	0f 22 c0             	mov    cr0,eax
c00266bd:	0f 06                	clts   
c00266bf:	d9 2d 84 66 02 c0    	fldcw  WORD PTR ds:0xc0026684
c00266c5:	c3                   	ret    

c00266c6 <x87Close>:
c00266c6:	c3                   	ret    
c00266c7:	90                   	nop

c00266c8 <__do_global_ctors_aux>:
c00266c8:	a1 0c 92 02 c0       	mov    eax,ds:0xc002920c
c00266cd:	83 f8 ff             	cmp    eax,0xffffffff
c00266d0:	74 1a                	je     c00266ec <__do_global_ctors_aux+0x24>
c00266d2:	55                   	push   ebp
c00266d3:	89 e5                	mov    ebp,esp
c00266d5:	53                   	push   ebx
c00266d6:	52                   	push   edx
c00266d7:	bb 0c 92 02 c0       	mov    ebx,0xc002920c
c00266dc:	ff d0                	call   eax
c00266de:	83 eb 04             	sub    ebx,0x4
c00266e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00266e3:	83 f8 ff             	cmp    eax,0xffffffff
c00266e6:	75 f4                	jne    c00266dc <__do_global_ctors_aux+0x14>
c00266e8:	58                   	pop    eax
c00266e9:	5b                   	pop    ebx
c00266ea:	5d                   	pop    ebp
c00266eb:	c3                   	ret    
c00266ec:	c3                   	ret    
c00266ed:	66 90                	xchg   ax,ax
c00266ef:	90                   	nop

c00266f0 <__divdi3>:
c00266f0:	55                   	push   ebp
c00266f1:	57                   	push   edi
c00266f2:	56                   	push   esi
c00266f3:	53                   	push   ebx
c00266f4:	83 ec 1c             	sub    esp,0x1c
c00266f7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00266fb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00266ff:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026702:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026706:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002670a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002670e:	85 db                	test   ebx,ebx
c0026710:	0f 88 8e 00 00 00    	js     c00267a4 <__divdi3+0xb4>
c0026716:	89 dd                	mov    ebp,ebx
c0026718:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026720:	89 d3                	mov    ebx,edx
c0026722:	85 d2                	test   edx,edx
c0026724:	79 0d                	jns    c0026733 <__divdi3+0x43>
c0026726:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002672a:	f7 d8                	neg    eax
c002672c:	83 d2 00             	adc    edx,0x0
c002672f:	f7 da                	neg    edx
c0026731:	89 d3                	mov    ebx,edx
c0026733:	89 c7                	mov    edi,eax
c0026735:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026738:	85 db                	test   ebx,ebx
c002673a:	75 48                	jne    c0026784 <__divdi3+0x94>
c002673c:	39 ef                	cmp    edi,ebp
c002673e:	76 24                	jbe    c0026764 <__divdi3+0x74>
c0026740:	89 ea                	mov    edx,ebp
c0026742:	f7 f7                	div    edi
c0026744:	89 c1                	mov    ecx,eax
c0026746:	31 f6                	xor    esi,esi
c0026748:	89 c8                	mov    eax,ecx
c002674a:	89 f2                	mov    edx,esi
c002674c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026750:	85 c9                	test   ecx,ecx
c0026752:	74 07                	je     c002675b <__divdi3+0x6b>
c0026754:	f7 d8                	neg    eax
c0026756:	83 d2 00             	adc    edx,0x0
c0026759:	f7 da                	neg    edx
c002675b:	83 c4 1c             	add    esp,0x1c
c002675e:	5b                   	pop    ebx
c002675f:	5e                   	pop    esi
c0026760:	5f                   	pop    edi
c0026761:	5d                   	pop    ebp
c0026762:	c3                   	ret    
c0026763:	90                   	nop
c0026764:	85 ff                	test   edi,edi
c0026766:	75 0b                	jne    c0026773 <__divdi3+0x83>
c0026768:	b8 01 00 00 00       	mov    eax,0x1
c002676d:	31 d2                	xor    edx,edx
c002676f:	f7 f3                	div    ebx
c0026771:	89 c7                	mov    edi,eax
c0026773:	31 d2                	xor    edx,edx
c0026775:	89 e8                	mov    eax,ebp
c0026777:	f7 f7                	div    edi
c0026779:	89 c6                	mov    esi,eax
c002677b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002677e:	f7 f7                	div    edi
c0026780:	89 c1                	mov    ecx,eax
c0026782:	eb c4                	jmp    c0026748 <__divdi3+0x58>
c0026784:	39 eb                	cmp    ebx,ebp
c0026786:	77 3c                	ja     c00267c4 <__divdi3+0xd4>
c0026788:	0f bd f3             	bsr    esi,ebx
c002678b:	83 f6 1f             	xor    esi,0x1f
c002678e:	75 40                	jne    c00267d0 <__divdi3+0xe0>
c0026790:	39 eb                	cmp    ebx,ebp
c0026792:	72 09                	jb     c002679d <__divdi3+0xad>
c0026794:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026797:	0f 87 97 00 00 00    	ja     c0026834 <__divdi3+0x144>
c002679d:	b9 01 00 00 00       	mov    ecx,0x1
c00267a2:	eb a4                	jmp    c0026748 <__divdi3+0x58>
c00267a4:	f7 d9                	neg    ecx
c00267a6:	83 d3 00             	adc    ebx,0x0
c00267a9:	f7 db                	neg    ebx
c00267ab:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00267ae:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00267b2:	89 dd                	mov    ebp,ebx
c00267b4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00267bc:	e9 5f ff ff ff       	jmp    c0026720 <__divdi3+0x30>
c00267c1:	8d 76 00             	lea    esi,[esi+0x0]
c00267c4:	31 f6                	xor    esi,esi
c00267c6:	31 c9                	xor    ecx,ecx
c00267c8:	e9 7b ff ff ff       	jmp    c0026748 <__divdi3+0x58>
c00267cd:	8d 76 00             	lea    esi,[esi+0x0]
c00267d0:	b8 20 00 00 00       	mov    eax,0x20
c00267d5:	29 f0                	sub    eax,esi
c00267d7:	89 f1                	mov    ecx,esi
c00267d9:	d3 e3                	shl    ebx,cl
c00267db:	89 fa                	mov    edx,edi
c00267dd:	88 c1                	mov    cl,al
c00267df:	d3 ea                	shr    edx,cl
c00267e1:	09 da                	or     edx,ebx
c00267e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00267e7:	89 f1                	mov    ecx,esi
c00267e9:	d3 e7                	shl    edi,cl
c00267eb:	89 eb                	mov    ebx,ebp
c00267ed:	88 c1                	mov    cl,al
c00267ef:	d3 eb                	shr    ebx,cl
c00267f1:	89 f1                	mov    ecx,esi
c00267f3:	d3 e5                	shl    ebp,cl
c00267f5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00267f8:	88 c1                	mov    cl,al
c00267fa:	d3 ea                	shr    edx,cl
c00267fc:	09 d5                	or     ebp,edx
c00267fe:	89 e8                	mov    eax,ebp
c0026800:	89 da                	mov    edx,ebx
c0026802:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026806:	89 d3                	mov    ebx,edx
c0026808:	89 c5                	mov    ebp,eax
c002680a:	f7 e7                	mul    edi
c002680c:	39 d3                	cmp    ebx,edx
c002680e:	72 18                	jb     c0026828 <__divdi3+0x138>
c0026810:	74 0a                	je     c002681c <__divdi3+0x12c>
c0026812:	89 e9                	mov    ecx,ebp
c0026814:	31 f6                	xor    esi,esi
c0026816:	e9 2d ff ff ff       	jmp    c0026748 <__divdi3+0x58>
c002681b:	90                   	nop
c002681c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002681f:	89 f1                	mov    ecx,esi
c0026821:	d3 e7                	shl    edi,cl
c0026823:	39 c7                	cmp    edi,eax
c0026825:	73 eb                	jae    c0026812 <__divdi3+0x122>
c0026827:	90                   	nop
c0026828:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002682b:	31 f6                	xor    esi,esi
c002682d:	e9 16 ff ff ff       	jmp    c0026748 <__divdi3+0x58>
c0026832:	66 90                	xchg   ax,ax
c0026834:	31 c9                	xor    ecx,ecx
c0026836:	e9 0d ff ff ff       	jmp    c0026748 <__divdi3+0x58>
c002683b:	90                   	nop

c002683c <__moddi3>:
c002683c:	55                   	push   ebp
c002683d:	57                   	push   edi
c002683e:	56                   	push   esi
c002683f:	53                   	push   ebx
c0026840:	83 ec 2c             	sub    esp,0x2c
c0026843:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026847:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002684b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002684f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026853:	85 db                	test   ebx,ebx
c0026855:	0f 88 85 00 00 00    	js     c00268e0 <__moddi3+0xa4>
c002685b:	89 de                	mov    esi,ebx
c002685d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026865:	89 d7                	mov    edi,edx
c0026867:	85 d2                	test   edx,edx
c0026869:	79 09                	jns    c0026874 <__moddi3+0x38>
c002686b:	f7 d8                	neg    eax
c002686d:	83 d2 00             	adc    edx,0x0
c0026870:	f7 da                	neg    edx
c0026872:	89 d7                	mov    edi,edx
c0026874:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026878:	89 cd                	mov    ebp,ecx
c002687a:	85 ff                	test   edi,edi
c002687c:	75 52                	jne    c00268d0 <__moddi3+0x94>
c002687e:	89 c3                	mov    ebx,eax
c0026880:	39 f0                	cmp    eax,esi
c0026882:	76 24                	jbe    c00268a8 <__moddi3+0x6c>
c0026884:	89 c8                	mov    eax,ecx
c0026886:	89 f2                	mov    edx,esi
c0026888:	f7 f3                	div    ebx
c002688a:	89 d6                	mov    esi,edx
c002688c:	89 f0                	mov    eax,esi
c002688e:	31 d2                	xor    edx,edx
c0026890:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026894:	85 c9                	test   ecx,ecx
c0026896:	74 07                	je     c002689f <__moddi3+0x63>
c0026898:	f7 d8                	neg    eax
c002689a:	83 d2 00             	adc    edx,0x0
c002689d:	f7 da                	neg    edx
c002689f:	83 c4 2c             	add    esp,0x2c
c00268a2:	5b                   	pop    ebx
c00268a3:	5e                   	pop    esi
c00268a4:	5f                   	pop    edi
c00268a5:	5d                   	pop    ebp
c00268a6:	c3                   	ret    
c00268a7:	90                   	nop
c00268a8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00268ac:	85 db                	test   ebx,ebx
c00268ae:	75 0d                	jne    c00268bd <__moddi3+0x81>
c00268b0:	b8 01 00 00 00       	mov    eax,0x1
c00268b5:	31 d2                	xor    edx,edx
c00268b7:	f7 f7                	div    edi
c00268b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00268bd:	89 f0                	mov    eax,esi
c00268bf:	31 d2                	xor    edx,edx
c00268c1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00268c5:	f7 f7                	div    edi
c00268c7:	89 e8                	mov    eax,ebp
c00268c9:	f7 f7                	div    edi
c00268cb:	89 d6                	mov    esi,edx
c00268cd:	eb bd                	jmp    c002688c <__moddi3+0x50>
c00268cf:	90                   	nop
c00268d0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00268d4:	39 f7                	cmp    edi,esi
c00268d6:	76 20                	jbe    c00268f8 <__moddi3+0xbc>
c00268d8:	89 c8                	mov    eax,ecx
c00268da:	89 f2                	mov    edx,esi
c00268dc:	eb b2                	jmp    c0026890 <__moddi3+0x54>
c00268de:	66 90                	xchg   ax,ax
c00268e0:	f7 d9                	neg    ecx
c00268e2:	83 d3 00             	adc    ebx,0x0
c00268e5:	f7 db                	neg    ebx
c00268e7:	89 de                	mov    esi,ebx
c00268e9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00268f1:	e9 6f ff ff ff       	jmp    c0026865 <__moddi3+0x29>
c00268f6:	66 90                	xchg   ax,ax
c00268f8:	0f bd c7             	bsr    eax,edi
c00268fb:	83 f0 1f             	xor    eax,0x1f
c00268fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026902:	75 24                	jne    c0026928 <__moddi3+0xec>
c0026904:	39 f7                	cmp    edi,esi
c0026906:	72 06                	jb     c002690e <__moddi3+0xd2>
c0026908:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002690c:	77 0c                	ja     c002691a <__moddi3+0xde>
c002690e:	89 e9                	mov    ecx,ebp
c0026910:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026914:	19 fe                	sbb    esi,edi
c0026916:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002691a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002691e:	89 f2                	mov    edx,esi
c0026920:	e9 6b ff ff ff       	jmp    c0026890 <__moddi3+0x54>
c0026925:	8d 76 00             	lea    esi,[esi+0x0]
c0026928:	b8 20 00 00 00       	mov    eax,0x20
c002692d:	89 c2                	mov    edx,eax
c002692f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026933:	29 da                	sub    edx,ebx
c0026935:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026939:	88 d9                	mov    cl,bl
c002693b:	d3 e7                	shl    edi,cl
c002693d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026941:	88 d1                	mov    cl,dl
c0026943:	d3 e8                	shr    eax,cl
c0026945:	09 c7                	or     edi,eax
c0026947:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002694b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002694f:	89 d8                	mov    eax,ebx
c0026951:	88 d9                	mov    cl,bl
c0026953:	d3 e7                	shl    edi,cl
c0026955:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026959:	89 f3                	mov    ebx,esi
c002695b:	88 d1                	mov    cl,dl
c002695d:	d3 eb                	shr    ebx,cl
c002695f:	89 c7                	mov    edi,eax
c0026961:	88 c1                	mov    cl,al
c0026963:	d3 e6                	shl    esi,cl
c0026965:	89 e8                	mov    eax,ebp
c0026967:	88 d1                	mov    cl,dl
c0026969:	d3 e8                	shr    eax,cl
c002696b:	09 f0                	or     eax,esi
c002696d:	89 f9                	mov    ecx,edi
c002696f:	d3 e5                	shl    ebp,cl
c0026971:	89 da                	mov    edx,ebx
c0026973:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026977:	89 d3                	mov    ebx,edx
c0026979:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002697d:	89 c6                	mov    esi,eax
c002697f:	89 d1                	mov    ecx,edx
c0026981:	39 d3                	cmp    ebx,edx
c0026983:	72 27                	jb     c00269ac <__moddi3+0x170>
c0026985:	74 21                	je     c00269a8 <__moddi3+0x16c>
c0026987:	29 f5                	sub    ebp,esi
c0026989:	19 cb                	sbb    ebx,ecx
c002698b:	89 de                	mov    esi,ebx
c002698d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026991:	d3 e6                	shl    esi,cl
c0026993:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026997:	89 f9                	mov    ecx,edi
c0026999:	d3 ed                	shr    ebp,cl
c002699b:	09 ee                	or     esi,ebp
c002699d:	89 f0                	mov    eax,esi
c002699f:	d3 eb                	shr    ebx,cl
c00269a1:	89 da                	mov    edx,ebx
c00269a3:	e9 e8 fe ff ff       	jmp    c0026890 <__moddi3+0x54>
c00269a8:	39 c5                	cmp    ebp,eax
c00269aa:	73 db                	jae    c0026987 <__moddi3+0x14b>
c00269ac:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00269b0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00269b4:	89 d1                	mov    ecx,edx
c00269b6:	89 c6                	mov    esi,eax
c00269b8:	eb cd                	jmp    c0026987 <__moddi3+0x14b>
c00269ba:	66 90                	xchg   ax,ax

c00269bc <__udivdi3>:
c00269bc:	55                   	push   ebp
c00269bd:	57                   	push   edi
c00269be:	56                   	push   esi
c00269bf:	53                   	push   ebx
c00269c0:	83 ec 1c             	sub    esp,0x1c
c00269c3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00269c7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00269cb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00269cf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00269d3:	85 d2                	test   edx,edx
c00269d5:	75 41                	jne    c0026a18 <__udivdi3+0x5c>
c00269d7:	39 f7                	cmp    edi,esi
c00269d9:	76 15                	jbe    c00269f0 <__udivdi3+0x34>
c00269db:	89 e8                	mov    eax,ebp
c00269dd:	89 f2                	mov    edx,esi
c00269df:	f7 f7                	div    edi
c00269e1:	31 db                	xor    ebx,ebx
c00269e3:	89 da                	mov    edx,ebx
c00269e5:	83 c4 1c             	add    esp,0x1c
c00269e8:	5b                   	pop    ebx
c00269e9:	5e                   	pop    esi
c00269ea:	5f                   	pop    edi
c00269eb:	5d                   	pop    ebp
c00269ec:	c3                   	ret    
c00269ed:	8d 76 00             	lea    esi,[esi+0x0]
c00269f0:	89 f9                	mov    ecx,edi
c00269f2:	85 ff                	test   edi,edi
c00269f4:	75 0b                	jne    c0026a01 <__udivdi3+0x45>
c00269f6:	b8 01 00 00 00       	mov    eax,0x1
c00269fb:	31 d2                	xor    edx,edx
c00269fd:	f7 f7                	div    edi
c00269ff:	89 c1                	mov    ecx,eax
c0026a01:	31 d2                	xor    edx,edx
c0026a03:	89 f0                	mov    eax,esi
c0026a05:	f7 f1                	div    ecx
c0026a07:	89 c3                	mov    ebx,eax
c0026a09:	89 e8                	mov    eax,ebp
c0026a0b:	f7 f1                	div    ecx
c0026a0d:	89 da                	mov    edx,ebx
c0026a0f:	83 c4 1c             	add    esp,0x1c
c0026a12:	5b                   	pop    ebx
c0026a13:	5e                   	pop    esi
c0026a14:	5f                   	pop    edi
c0026a15:	5d                   	pop    ebp
c0026a16:	c3                   	ret    
c0026a17:	90                   	nop
c0026a18:	39 f2                	cmp    edx,esi
c0026a1a:	77 1c                	ja     c0026a38 <__udivdi3+0x7c>
c0026a1c:	0f bd da             	bsr    ebx,edx
c0026a1f:	83 f3 1f             	xor    ebx,0x1f
c0026a22:	75 24                	jne    c0026a48 <__udivdi3+0x8c>
c0026a24:	39 f2                	cmp    edx,esi
c0026a26:	72 08                	jb     c0026a30 <__udivdi3+0x74>
c0026a28:	39 ef                	cmp    edi,ebp
c0026a2a:	0f 87 84 00 00 00    	ja     c0026ab4 <__udivdi3+0xf8>
c0026a30:	b8 01 00 00 00       	mov    eax,0x1
c0026a35:	eb ac                	jmp    c00269e3 <__udivdi3+0x27>
c0026a37:	90                   	nop
c0026a38:	31 db                	xor    ebx,ebx
c0026a3a:	31 c0                	xor    eax,eax
c0026a3c:	89 da                	mov    edx,ebx
c0026a3e:	83 c4 1c             	add    esp,0x1c
c0026a41:	5b                   	pop    ebx
c0026a42:	5e                   	pop    esi
c0026a43:	5f                   	pop    edi
c0026a44:	5d                   	pop    ebp
c0026a45:	c3                   	ret    
c0026a46:	66 90                	xchg   ax,ax
c0026a48:	b8 20 00 00 00       	mov    eax,0x20
c0026a4d:	29 d8                	sub    eax,ebx
c0026a4f:	88 d9                	mov    cl,bl
c0026a51:	d3 e2                	shl    edx,cl
c0026a53:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026a57:	89 fa                	mov    edx,edi
c0026a59:	88 c1                	mov    cl,al
c0026a5b:	d3 ea                	shr    edx,cl
c0026a5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026a61:	09 d1                	or     ecx,edx
c0026a63:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026a67:	88 d9                	mov    cl,bl
c0026a69:	d3 e7                	shl    edi,cl
c0026a6b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026a6f:	89 f7                	mov    edi,esi
c0026a71:	88 c1                	mov    cl,al
c0026a73:	d3 ef                	shr    edi,cl
c0026a75:	88 d9                	mov    cl,bl
c0026a77:	d3 e6                	shl    esi,cl
c0026a79:	89 ea                	mov    edx,ebp
c0026a7b:	88 c1                	mov    cl,al
c0026a7d:	d3 ea                	shr    edx,cl
c0026a7f:	09 d6                	or     esi,edx
c0026a81:	89 f0                	mov    eax,esi
c0026a83:	89 fa                	mov    edx,edi
c0026a85:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026a89:	89 d7                	mov    edi,edx
c0026a8b:	89 c6                	mov    esi,eax
c0026a8d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026a91:	39 d7                	cmp    edi,edx
c0026a93:	72 13                	jb     c0026aa8 <__udivdi3+0xec>
c0026a95:	74 09                	je     c0026aa0 <__udivdi3+0xe4>
c0026a97:	89 f0                	mov    eax,esi
c0026a99:	31 db                	xor    ebx,ebx
c0026a9b:	e9 43 ff ff ff       	jmp    c00269e3 <__udivdi3+0x27>
c0026aa0:	88 d9                	mov    cl,bl
c0026aa2:	d3 e5                	shl    ebp,cl
c0026aa4:	39 c5                	cmp    ebp,eax
c0026aa6:	73 ef                	jae    c0026a97 <__udivdi3+0xdb>
c0026aa8:	8d 46 ff             	lea    eax,[esi-0x1]
c0026aab:	31 db                	xor    ebx,ebx
c0026aad:	e9 31 ff ff ff       	jmp    c00269e3 <__udivdi3+0x27>
c0026ab2:	66 90                	xchg   ax,ax
c0026ab4:	31 c0                	xor    eax,eax
c0026ab6:	e9 28 ff ff ff       	jmp    c00269e3 <__udivdi3+0x27>
c0026abb:	90                   	nop

c0026abc <__umoddi3>:
c0026abc:	55                   	push   ebp
c0026abd:	57                   	push   edi
c0026abe:	56                   	push   esi
c0026abf:	53                   	push   ebx
c0026ac0:	83 ec 1c             	sub    esp,0x1c
c0026ac3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026ac7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026acb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026acf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026ad3:	89 da                	mov    edx,ebx
c0026ad5:	85 c0                	test   eax,eax
c0026ad7:	75 37                	jne    c0026b10 <__umoddi3+0x54>
c0026ad9:	39 df                	cmp    edi,ebx
c0026adb:	76 13                	jbe    c0026af0 <__umoddi3+0x34>
c0026add:	89 f0                	mov    eax,esi
c0026adf:	f7 f7                	div    edi
c0026ae1:	89 d0                	mov    eax,edx
c0026ae3:	31 d2                	xor    edx,edx
c0026ae5:	83 c4 1c             	add    esp,0x1c
c0026ae8:	5b                   	pop    ebx
c0026ae9:	5e                   	pop    esi
c0026aea:	5f                   	pop    edi
c0026aeb:	5d                   	pop    ebp
c0026aec:	c3                   	ret    
c0026aed:	8d 76 00             	lea    esi,[esi+0x0]
c0026af0:	89 fd                	mov    ebp,edi
c0026af2:	85 ff                	test   edi,edi
c0026af4:	75 0b                	jne    c0026b01 <__umoddi3+0x45>
c0026af6:	b8 01 00 00 00       	mov    eax,0x1
c0026afb:	31 d2                	xor    edx,edx
c0026afd:	f7 f7                	div    edi
c0026aff:	89 c5                	mov    ebp,eax
c0026b01:	89 d8                	mov    eax,ebx
c0026b03:	31 d2                	xor    edx,edx
c0026b05:	f7 f5                	div    ebp
c0026b07:	89 f0                	mov    eax,esi
c0026b09:	f7 f5                	div    ebp
c0026b0b:	89 d0                	mov    eax,edx
c0026b0d:	eb d4                	jmp    c0026ae3 <__umoddi3+0x27>
c0026b0f:	90                   	nop
c0026b10:	89 f1                	mov    ecx,esi
c0026b12:	39 d8                	cmp    eax,ebx
c0026b14:	76 0a                	jbe    c0026b20 <__umoddi3+0x64>
c0026b16:	89 f0                	mov    eax,esi
c0026b18:	83 c4 1c             	add    esp,0x1c
c0026b1b:	5b                   	pop    ebx
c0026b1c:	5e                   	pop    esi
c0026b1d:	5f                   	pop    edi
c0026b1e:	5d                   	pop    ebp
c0026b1f:	c3                   	ret    
c0026b20:	0f bd e8             	bsr    ebp,eax
c0026b23:	83 f5 1f             	xor    ebp,0x1f
c0026b26:	75 1c                	jne    c0026b44 <__umoddi3+0x88>
c0026b28:	39 d8                	cmp    eax,ebx
c0026b2a:	72 04                	jb     c0026b30 <__umoddi3+0x74>
c0026b2c:	39 f7                	cmp    edi,esi
c0026b2e:	77 08                	ja     c0026b38 <__umoddi3+0x7c>
c0026b30:	89 da                	mov    edx,ebx
c0026b32:	29 fe                	sub    esi,edi
c0026b34:	19 c2                	sbb    edx,eax
c0026b36:	89 f1                	mov    ecx,esi
c0026b38:	89 c8                	mov    eax,ecx
c0026b3a:	83 c4 1c             	add    esp,0x1c
c0026b3d:	5b                   	pop    ebx
c0026b3e:	5e                   	pop    esi
c0026b3f:	5f                   	pop    edi
c0026b40:	5d                   	pop    ebp
c0026b41:	c3                   	ret    
c0026b42:	66 90                	xchg   ax,ax
c0026b44:	ba 20 00 00 00       	mov    edx,0x20
c0026b49:	29 ea                	sub    edx,ebp
c0026b4b:	89 e9                	mov    ecx,ebp
c0026b4d:	d3 e0                	shl    eax,cl
c0026b4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026b53:	89 f8                	mov    eax,edi
c0026b55:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026b59:	88 d1                	mov    cl,dl
c0026b5b:	d3 e8                	shr    eax,cl
c0026b5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026b61:	09 c1                	or     ecx,eax
c0026b63:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026b67:	89 e9                	mov    ecx,ebp
c0026b69:	d3 e7                	shl    edi,cl
c0026b6b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026b6f:	89 d8                	mov    eax,ebx
c0026b71:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026b75:	88 d1                	mov    cl,dl
c0026b77:	d3 e8                	shr    eax,cl
c0026b79:	89 c7                	mov    edi,eax
c0026b7b:	89 e9                	mov    ecx,ebp
c0026b7d:	d3 e3                	shl    ebx,cl
c0026b7f:	89 f0                	mov    eax,esi
c0026b81:	88 d1                	mov    cl,dl
c0026b83:	d3 e8                	shr    eax,cl
c0026b85:	09 d8                	or     eax,ebx
c0026b87:	89 e9                	mov    ecx,ebp
c0026b89:	d3 e6                	shl    esi,cl
c0026b8b:	89 f3                	mov    ebx,esi
c0026b8d:	89 fa                	mov    edx,edi
c0026b8f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026b93:	89 d1                	mov    ecx,edx
c0026b95:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026b99:	89 c6                	mov    esi,eax
c0026b9b:	89 d7                	mov    edi,edx
c0026b9d:	39 d1                	cmp    ecx,edx
c0026b9f:	72 27                	jb     c0026bc8 <__umoddi3+0x10c>
c0026ba1:	74 21                	je     c0026bc4 <__umoddi3+0x108>
c0026ba3:	89 ca                	mov    edx,ecx
c0026ba5:	29 f3                	sub    ebx,esi
c0026ba7:	19 fa                	sbb    edx,edi
c0026ba9:	89 d0                	mov    eax,edx
c0026bab:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026baf:	d3 e0                	shl    eax,cl
c0026bb1:	89 e9                	mov    ecx,ebp
c0026bb3:	d3 eb                	shr    ebx,cl
c0026bb5:	09 d8                	or     eax,ebx
c0026bb7:	d3 ea                	shr    edx,cl
c0026bb9:	83 c4 1c             	add    esp,0x1c
c0026bbc:	5b                   	pop    ebx
c0026bbd:	5e                   	pop    esi
c0026bbe:	5f                   	pop    edi
c0026bbf:	5d                   	pop    ebp
c0026bc0:	c3                   	ret    
c0026bc1:	8d 76 00             	lea    esi,[esi+0x0]
c0026bc4:	39 c3                	cmp    ebx,eax
c0026bc6:	73 db                	jae    c0026ba3 <__umoddi3+0xe7>
c0026bc8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026bcc:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026bd0:	89 d7                	mov    edi,edx
c0026bd2:	89 c6                	mov    esi,eax
c0026bd4:	eb cd                	jmp    c0026ba3 <__umoddi3+0xe7>

c0026bd6 <__addsf3>:
c0026bd6:	55                   	push   ebp
c0026bd7:	89 e5                	mov    ebp,esp
c0026bd9:	57                   	push   edi
c0026bda:	56                   	push   esi
c0026bdb:	53                   	push   ebx
c0026bdc:	83 ec 08             	sub    esp,0x8
c0026bdf:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026be2:	89 fa                	mov    edx,edi
c0026be4:	89 f8                	mov    eax,edi
c0026be6:	c1 f8 17             	sar    eax,0x17
c0026be9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026bec:	c1 e2 08             	shl    edx,0x8
c0026bef:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026bf5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026bf8:	89 de                	mov    esi,ebx
c0026bfa:	c1 fe 17             	sar    esi,0x17
c0026bfd:	c1 e3 08             	shl    ebx,0x8
c0026c00:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026c06:	31 f0                	xor    eax,esi
c0026c08:	0f 88 3b 01 00 00    	js     c0026d49 <__addsf3+0x173>
c0026c0e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026c11:	29 f1                	sub    ecx,esi
c0026c13:	85 c9                	test   ecx,ecx
c0026c15:	7e 54                	jle    c0026c6b <__addsf3+0x95>
c0026c17:	89 f0                	mov    eax,esi
c0026c19:	84 c0                	test   al,al
c0026c1b:	75 10                	jne    c0026c2d <__addsf3+0x57>
c0026c1d:	85 db                	test   ebx,ebx
c0026c1f:	0f 84 aa 02 00 00    	je     c0026ecf <__addsf3+0x2f9>
c0026c25:	49                   	dec    ecx
c0026c26:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c29:	74 38                	je     c0026c63 <__addsf3+0x8d>
c0026c2b:	eb 13                	jmp    c0026c40 <__addsf3+0x6a>
c0026c2d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026c30:	f7 d0                	not    eax
c0026c32:	84 c0                	test   al,al
c0026c34:	0f 84 95 02 00 00    	je     c0026ecf <__addsf3+0x2f9>
c0026c3a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026c40:	83 f9 1f             	cmp    ecx,0x1f
c0026c43:	0f 8f 86 02 00 00    	jg     c0026ecf <__addsf3+0x2f9>
c0026c49:	89 de                	mov    esi,ebx
c0026c4b:	d3 ee                	shr    esi,cl
c0026c4d:	b8 20 00 00 00       	mov    eax,0x20
c0026c52:	29 c8                	sub    eax,ecx
c0026c54:	89 c1                	mov    ecx,eax
c0026c56:	d3 e3                	shl    ebx,cl
c0026c58:	31 c0                	xor    eax,eax
c0026c5a:	85 db                	test   ebx,ebx
c0026c5c:	0f 95 c0             	setne  al
c0026c5f:	09 f0                	or     eax,esi
c0026c61:	01 d0                	add    eax,edx
c0026c63:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026c66:	e9 b6 00 00 00       	jmp    c0026d21 <__addsf3+0x14b>
c0026c6b:	74 5c                	je     c0026cc9 <__addsf3+0xf3>
c0026c6d:	89 f1                	mov    ecx,esi
c0026c6f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026c72:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c75:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026c79:	75 14                	jne    c0026c8f <__addsf3+0xb9>
c0026c7b:	85 d2                	test   edx,edx
c0026c7d:	0f 84 4c 02 00 00    	je     c0026ecf <__addsf3+0x2f9>
c0026c83:	49                   	dec    ecx
c0026c84:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c87:	0f 84 94 00 00 00    	je     c0026d21 <__addsf3+0x14b>
c0026c8d:	eb 12                	jmp    c0026ca1 <__addsf3+0xcb>
c0026c8f:	89 f0                	mov    eax,esi
c0026c91:	f7 d0                	not    eax
c0026c93:	84 c0                	test   al,al
c0026c95:	0f 84 34 02 00 00    	je     c0026ecf <__addsf3+0x2f9>
c0026c9b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026ca1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026ca4:	83 f9 1f             	cmp    ecx,0x1f
c0026ca7:	0f 8f 22 02 00 00    	jg     c0026ecf <__addsf3+0x2f9>
c0026cad:	89 d7                	mov    edi,edx
c0026caf:	d3 ef                	shr    edi,cl
c0026cb1:	b8 20 00 00 00       	mov    eax,0x20
c0026cb6:	29 c8                	sub    eax,ecx
c0026cb8:	89 c1                	mov    ecx,eax
c0026cba:	d3 e2                	shl    edx,cl
c0026cbc:	31 c0                	xor    eax,eax
c0026cbe:	85 d2                	test   edx,edx
c0026cc0:	0f 95 c0             	setne  al
c0026cc3:	09 f8                	or     eax,edi
c0026cc5:	01 d8                	add    eax,ebx
c0026cc7:	eb 58                	jmp    c0026d21 <__addsf3+0x14b>
c0026cc9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026ccc:	8d 70 01             	lea    esi,[eax+0x1]
c0026ccf:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026cd5:	75 32                	jne    c0026d09 <__addsf3+0x133>
c0026cd7:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026cdb:	75 1f                	jne    c0026cfc <__addsf3+0x126>
c0026cdd:	85 d2                	test   edx,edx
c0026cdf:	0f 84 e0 01 00 00    	je     c0026ec5 <__addsf3+0x2ef>
c0026ce5:	85 db                	test   ebx,ebx
c0026ce7:	0f 84 e2 01 00 00    	je     c0026ecf <__addsf3+0x2f9>
c0026ced:	89 d0                	mov    eax,edx
c0026cef:	01 d8                	add    eax,ebx
c0026cf1:	0f 89 a9 01 00 00    	jns    c0026ea0 <__addsf3+0x2ca>
c0026cf7:	e9 9d 01 00 00       	jmp    c0026e99 <__addsf3+0x2c3>
c0026cfc:	85 d2                	test   edx,edx
c0026cfe:	0f 85 cb 01 00 00    	jne    c0026ecf <__addsf3+0x2f9>
c0026d04:	e9 bc 01 00 00       	jmp    c0026ec5 <__addsf3+0x2ef>
c0026d09:	31 c0                	xor    eax,eax
c0026d0b:	89 f1                	mov    ecx,esi
c0026d0d:	f7 d1                	not    ecx
c0026d0f:	84 c9                	test   cl,cl
c0026d11:	0f 84 90 01 00 00    	je     c0026ea7 <__addsf3+0x2d1>
c0026d17:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d1a:	d1 e8                	shr    eax,1
c0026d1c:	e9 86 01 00 00       	jmp    c0026ea7 <__addsf3+0x2d1>
c0026d21:	85 c0                	test   eax,eax
c0026d23:	0f 89 7e 01 00 00    	jns    c0026ea7 <__addsf3+0x2d1>
c0026d29:	46                   	inc    esi
c0026d2a:	89 f2                	mov    edx,esi
c0026d2c:	f7 d2                	not    edx
c0026d2e:	84 d2                	test   dl,dl
c0026d30:	0f 84 6f 01 00 00    	je     c0026ea5 <__addsf3+0x2cf>
c0026d36:	89 c2                	mov    edx,eax
c0026d38:	83 e2 01             	and    edx,0x1
c0026d3b:	d1 e8                	shr    eax,1
c0026d3d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026d42:	09 d0                	or     eax,edx
c0026d44:	e9 5e 01 00 00       	jmp    c0026ea7 <__addsf3+0x2d1>
c0026d49:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026d4d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026d50:	89 f0                	mov    eax,esi
c0026d52:	0f b6 c0             	movzx  eax,al
c0026d55:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026d58:	29 c1                	sub    ecx,eax
c0026d5a:	85 c9                	test   ecx,ecx
c0026d5c:	7e 55                	jle    c0026db3 <__addsf3+0x1dd>
c0026d5e:	85 c0                	test   eax,eax
c0026d60:	75 11                	jne    c0026d73 <__addsf3+0x19d>
c0026d62:	85 db                	test   ebx,ebx
c0026d64:	0f 84 65 01 00 00    	je     c0026ecf <__addsf3+0x2f9>
c0026d6a:	49                   	dec    ecx
c0026d6b:	75 19                	jne    c0026d86 <__addsf3+0x1b0>
c0026d6d:	89 d0                	mov    eax,edx
c0026d6f:	29 d8                	sub    eax,ebx
c0026d71:	eb 38                	jmp    c0026dab <__addsf3+0x1d5>
c0026d73:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d76:	f7 d0                	not    eax
c0026d78:	84 c0                	test   al,al
c0026d7a:	0f 84 4f 01 00 00    	je     c0026ecf <__addsf3+0x2f9>
c0026d80:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026d86:	83 f9 1f             	cmp    ecx,0x1f
c0026d89:	0f 8f 40 01 00 00    	jg     c0026ecf <__addsf3+0x2f9>
c0026d8f:	89 de                	mov    esi,ebx
c0026d91:	d3 ee                	shr    esi,cl
c0026d93:	b8 20 00 00 00       	mov    eax,0x20
c0026d98:	29 c8                	sub    eax,ecx
c0026d9a:	89 c1                	mov    ecx,eax
c0026d9c:	d3 e3                	shl    ebx,cl
c0026d9e:	31 c0                	xor    eax,eax
c0026da0:	85 db                	test   ebx,ebx
c0026da2:	0f 95 c0             	setne  al
c0026da5:	09 f0                	or     eax,esi
c0026da7:	29 c2                	sub    edx,eax
c0026da9:	89 d0                	mov    eax,edx
c0026dab:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026dae:	e9 af 00 00 00       	jmp    c0026e62 <__addsf3+0x28c>
c0026db3:	74 5c                	je     c0026e11 <__addsf3+0x23b>
c0026db5:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026db8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026dbb:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026dbf:	75 14                	jne    c0026dd5 <__addsf3+0x1ff>
c0026dc1:	85 d2                	test   edx,edx
c0026dc3:	0f 84 06 01 00 00    	je     c0026ecf <__addsf3+0x2f9>
c0026dc9:	48                   	dec    eax
c0026dca:	75 1b                	jne    c0026de7 <__addsf3+0x211>
c0026dcc:	89 d8                	mov    eax,ebx
c0026dce:	29 d0                	sub    eax,edx
c0026dd0:	e9 8d 00 00 00       	jmp    c0026e62 <__addsf3+0x28c>
c0026dd5:	89 f1                	mov    ecx,esi
c0026dd7:	f7 d1                	not    ecx
c0026dd9:	84 c9                	test   cl,cl
c0026ddb:	0f 84 ee 00 00 00    	je     c0026ecf <__addsf3+0x2f9>
c0026de1:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026de7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026dea:	83 f8 1f             	cmp    eax,0x1f
c0026ded:	0f 8f dc 00 00 00    	jg     c0026ecf <__addsf3+0x2f9>
c0026df3:	89 d7                	mov    edi,edx
c0026df5:	88 c1                	mov    cl,al
c0026df7:	d3 ef                	shr    edi,cl
c0026df9:	b9 20 00 00 00       	mov    ecx,0x20
c0026dfe:	29 c1                	sub    ecx,eax
c0026e00:	d3 e2                	shl    edx,cl
c0026e02:	31 c0                	xor    eax,eax
c0026e04:	85 d2                	test   edx,edx
c0026e06:	0f 95 c0             	setne  al
c0026e09:	09 f8                	or     eax,edi
c0026e0b:	29 c3                	sub    ebx,eax
c0026e0d:	89 d8                	mov    eax,ebx
c0026e0f:	eb 51                	jmp    c0026e62 <__addsf3+0x28c>
c0026e11:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026e14:	40                   	inc    eax
c0026e15:	a8 fe                	test   al,0xfe
c0026e17:	75 3d                	jne    c0026e56 <__addsf3+0x280>
c0026e19:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026e1d:	0f 85 a7 00 00 00    	jne    c0026eca <__addsf3+0x2f4>
c0026e23:	85 d2                	test   edx,edx
c0026e25:	75 12                	jne    c0026e39 <__addsf3+0x263>
c0026e27:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e2a:	85 db                	test   ebx,ebx
c0026e2c:	0f 85 9d 00 00 00    	jne    c0026ecf <__addsf3+0x2f9>
c0026e32:	31 ff                	xor    edi,edi
c0026e34:	e9 96 00 00 00       	jmp    c0026ecf <__addsf3+0x2f9>
c0026e39:	85 db                	test   ebx,ebx
c0026e3b:	0f 84 8e 00 00 00    	je     c0026ecf <__addsf3+0x2f9>
c0026e41:	89 d0                	mov    eax,edx
c0026e43:	29 d8                	sub    eax,ebx
c0026e45:	79 06                	jns    c0026e4d <__addsf3+0x277>
c0026e47:	89 d8                	mov    eax,ebx
c0026e49:	29 d0                	sub    eax,edx
c0026e4b:	eb 5a                	jmp    c0026ea7 <__addsf3+0x2d1>
c0026e4d:	bf 00 00 00 00       	mov    edi,0x0
c0026e52:	74 7b                	je     c0026ecf <__addsf3+0x2f9>
c0026e54:	eb 4a                	jmp    c0026ea0 <__addsf3+0x2ca>
c0026e56:	89 d0                	mov    eax,edx
c0026e58:	29 d8                	sub    eax,ebx
c0026e5a:	79 12                	jns    c0026e6e <__addsf3+0x298>
c0026e5c:	89 d8                	mov    eax,ebx
c0026e5e:	29 d0                	sub    eax,edx
c0026e60:	eb 09                	jmp    c0026e6b <__addsf3+0x295>
c0026e62:	85 c0                	test   eax,eax
c0026e64:	79 41                	jns    c0026ea7 <__addsf3+0x2d1>
c0026e66:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026e6b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026e6e:	31 f6                	xor    esi,esi
c0026e70:	85 c0                	test   eax,eax
c0026e72:	74 33                	je     c0026ea7 <__addsf3+0x2d1>
c0026e74:	0f bd c8             	bsr    ecx,eax
c0026e77:	83 f1 1f             	xor    ecx,0x1f
c0026e7a:	d3 e0                	shl    eax,cl
c0026e7c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026e80:	39 ca                	cmp    edx,ecx
c0026e82:	7f 10                	jg     c0026e94 <__addsf3+0x2be>
c0026e84:	29 d1                	sub    ecx,edx
c0026e86:	41                   	inc    ecx
c0026e87:	d3 e8                	shr    eax,cl
c0026e89:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e8c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026e92:	eb 13                	jmp    c0026ea7 <__addsf3+0x2d1>
c0026e94:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e97:	29 ce                	sub    esi,ecx
c0026e99:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026e9e:	eb 07                	jmp    c0026ea7 <__addsf3+0x2d1>
c0026ea0:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ea3:	eb 02                	jmp    c0026ea7 <__addsf3+0x2d1>
c0026ea5:	31 c0                	xor    eax,eax
c0026ea7:	89 c2                	mov    edx,eax
c0026ea9:	c1 ea 08             	shr    edx,0x8
c0026eac:	a8 7f                	test   al,0x7f
c0026eae:	0f 95 c1             	setne  cl
c0026eb1:	09 d1                	or     ecx,edx
c0026eb3:	83 e1 01             	and    ecx,0x1
c0026eb6:	c1 e8 07             	shr    eax,0x7
c0026eb9:	21 c8                	and    eax,ecx
c0026ebb:	c1 e6 17             	shl    esi,0x17
c0026ebe:	09 d6                	or     esi,edx
c0026ec0:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026ec3:	eb 0a                	jmp    c0026ecf <__addsf3+0x2f9>
c0026ec5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026ec8:	eb 05                	jmp    c0026ecf <__addsf3+0x2f9>
c0026eca:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026ecf:	89 f8                	mov    eax,edi
c0026ed1:	5a                   	pop    edx
c0026ed2:	59                   	pop    ecx
c0026ed3:	5b                   	pop    ebx
c0026ed4:	5e                   	pop    esi
c0026ed5:	5f                   	pop    edi
c0026ed6:	5d                   	pop    ebp
c0026ed7:	c3                   	ret    

c0026ed8 <__subsf3>:
c0026ed8:	55                   	push   ebp
c0026ed9:	89 e5                	mov    ebp,esp
c0026edb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026ede:	05 00 00 00 80       	add    eax,0x80000000
c0026ee3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026ee6:	5d                   	pop    ebp
c0026ee7:	e9 ea fc ff ff       	jmp    c0026bd6 <__addsf3>

c0026eec <__negsf2>:
c0026eec:	55                   	push   ebp
c0026eed:	89 e5                	mov    ebp,esp
c0026eef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026ef2:	05 00 00 00 80       	add    eax,0x80000000
c0026ef7:	5d                   	pop    ebp
c0026ef8:	c3                   	ret    

c0026ef9 <__mulsf3>:
c0026ef9:	55                   	push   ebp
c0026efa:	89 e5                	mov    ebp,esp
c0026efc:	57                   	push   edi
c0026efd:	56                   	push   esi
c0026efe:	53                   	push   ebx
c0026eff:	83 ec 1c             	sub    esp,0x1c
c0026f02:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026f05:	89 f0                	mov    eax,esi
c0026f07:	89 f1                	mov    ecx,esi
c0026f09:	c1 f9 17             	sar    ecx,0x17
c0026f0c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026f0f:	c1 e0 08             	shl    eax,0x8
c0026f12:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026f17:	89 c1                	mov    ecx,eax
c0026f19:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f1c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026f1f:	89 c7                	mov    edi,eax
c0026f21:	c1 ff 17             	sar    edi,0x17
c0026f24:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026f28:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026f2b:	89 f8                	mov    eax,edi
c0026f2d:	0f b6 c0             	movzx  eax,al
c0026f30:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026f33:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026f37:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026f3a:	42                   	inc    edx
c0026f3b:	80 e2 fe             	and    dl,0xfe
c0026f3e:	75 7b                	jne    c0026fbb <__mulsf3+0xc2>
c0026f40:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026f44:	74 54                	je     c0026f9a <__mulsf3+0xa1>
c0026f46:	85 c9                	test   ecx,ecx
c0026f48:	0f 85 64 01 00 00    	jne    c00270b2 <__mulsf3+0x1b9>
c0026f4e:	8d 57 01             	lea    edx,[edi+0x1]
c0026f51:	80 e2 fe             	and    dl,0xfe
c0026f54:	75 1f                	jne    c0026f75 <__mulsf3+0x7c>
c0026f56:	85 c0                	test   eax,eax
c0026f58:	b8 00 00 00 00       	mov    eax,0x0
c0026f5d:	74 29                	je     c0026f88 <__mulsf3+0x8f>
c0026f5f:	53                   	push   ebx
c0026f60:	53                   	push   ebx
c0026f61:	50                   	push   eax
c0026f62:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f65:	e8 96 05 00 00       	call   c0027500 <__nesf2>
c0026f6a:	83 c4 10             	add    esp,0x10
c0026f6d:	85 c0                	test   eax,eax
c0026f6f:	0f 85 3a 01 00 00    	jne    c00270af <__mulsf3+0x1b6>
c0026f75:	85 ff                	test   edi,edi
c0026f77:	0f 89 35 01 00 00    	jns    c00270b2 <__mulsf3+0x1b9>
c0026f7d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026f83:	e9 2a 01 00 00       	jmp    c00270b2 <__mulsf3+0x1b9>
c0026f88:	51                   	push   ecx
c0026f89:	51                   	push   ecx
c0026f8a:	50                   	push   eax
c0026f8b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f8e:	e8 6d 05 00 00       	call   c0027500 <__nesf2>
c0026f93:	83 c4 10             	add    esp,0x10
c0026f96:	85 c0                	test   eax,eax
c0026f98:	eb 15                	jmp    c0026faf <__mulsf3+0xb6>
c0026f9a:	85 c9                	test   ecx,ecx
c0026f9c:	74 0b                	je     c0026fa9 <__mulsf3+0xb0>
c0026f9e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026fa1:	01 c9                	add    ecx,ecx
c0026fa3:	78 16                	js     c0026fbb <__mulsf3+0xc2>
c0026fa5:	89 d3                	mov    ebx,edx
c0026fa7:	eb f5                	jmp    c0026f9e <__mulsf3+0xa5>
c0026fa9:	89 f8                	mov    eax,edi
c0026fab:	f7 d0                	not    eax
c0026fad:	84 c0                	test   al,al
c0026faf:	75 c4                	jne    c0026f75 <__mulsf3+0x7c>
c0026fb1:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026fb6:	e9 f7 00 00 00       	jmp    c00270b2 <__mulsf3+0x1b9>
c0026fbb:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026fbe:	c1 e6 08             	shl    esi,0x8
c0026fc1:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026fc7:	8d 57 01             	lea    edx,[edi+0x1]
c0026fca:	80 e2 fe             	and    dl,0xfe
c0026fcd:	75 63                	jne    c0027032 <__mulsf3+0x139>
c0026fcf:	85 c0                	test   eax,eax
c0026fd1:	74 2f                	je     c0027002 <__mulsf3+0x109>
c0026fd3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026fd7:	0f 89 d2 00 00 00    	jns    c00270af <__mulsf3+0x1b6>
c0026fdd:	52                   	push   edx
c0026fde:	52                   	push   edx
c0026fdf:	6a 00                	push   0x0
c0026fe1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fe4:	e8 dc 04 00 00       	call   c00274c5 <__eqsf2>
c0026fe9:	83 c4 10             	add    esp,0x10
c0026fec:	85 c0                	test   eax,eax
c0026fee:	0f 85 bb 00 00 00    	jne    c00270af <__mulsf3+0x1b6>
c0026ff4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026ff7:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026ffd:	e9 b0 00 00 00       	jmp    c00270b2 <__mulsf3+0x1b9>
c0027002:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027005:	50                   	push   eax
c0027006:	50                   	push   eax
c0027007:	6a 00                	push   0x0
c0027009:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002700c:	e8 b4 04 00 00       	call   c00274c5 <__eqsf2>
c0027011:	83 c4 10             	add    esp,0x10
c0027014:	85 c0                	test   eax,eax
c0027016:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027019:	75 0c                	jne    c0027027 <__mulsf3+0x12e>
c002701b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002701f:	0f 89 8a 00 00 00    	jns    c00270af <__mulsf3+0x1b6>
c0027025:	eb cd                	jmp    c0026ff4 <__mulsf3+0xfb>
c0027027:	8d 43 ff             	lea    eax,[ebx-0x1]
c002702a:	01 f6                	add    esi,esi
c002702c:	78 04                	js     c0027032 <__mulsf3+0x139>
c002702e:	89 c3                	mov    ebx,eax
c0027030:	eb f5                	jmp    c0027027 <__mulsf3+0x12e>
c0027032:	89 c8                	mov    eax,ecx
c0027034:	0d 00 00 00 80       	or     eax,0x80000000
c0027039:	81 ce 00 00 00 80    	or     esi,0x80000000
c002703f:	f7 e6                	mul    esi
c0027041:	85 c0                	test   eax,eax
c0027043:	0f 95 c0             	setne  al
c0027046:	0f b6 c0             	movzx  eax,al
c0027049:	09 c2                	or     edx,eax
c002704b:	78 03                	js     c0027050 <__mulsf3+0x157>
c002704d:	01 d2                	add    edx,edx
c002704f:	4b                   	dec    ebx
c0027050:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0027056:	7f 22                	jg     c002707a <__mulsf3+0x181>
c0027058:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002705e:	85 db                	test   ebx,ebx
c0027060:	7f 23                	jg     c0027085 <__mulsf3+0x18c>
c0027062:	83 fb e9             	cmp    ebx,0xffffffe9
c0027065:	7c 1a                	jl     c0027081 <__mulsf3+0x188>
c0027067:	81 ca 00 00 00 80    	or     edx,0x80000000
c002706d:	b9 01 00 00 00       	mov    ecx,0x1
c0027072:	29 d9                	sub    ecx,ebx
c0027074:	d3 ea                	shr    edx,cl
c0027076:	31 db                	xor    ebx,ebx
c0027078:	eb 0b                	jmp    c0027085 <__mulsf3+0x18c>
c002707a:	bb ff 00 00 00       	mov    ebx,0xff
c002707f:	eb 02                	jmp    c0027083 <__mulsf3+0x18a>
c0027081:	31 db                	xor    ebx,ebx
c0027083:	31 d2                	xor    edx,edx
c0027085:	89 d0                	mov    eax,edx
c0027087:	c1 e8 08             	shr    eax,0x8
c002708a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c002708d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027093:	09 fb                	or     ebx,edi
c0027095:	c1 e3 17             	shl    ebx,0x17
c0027098:	09 c3                	or     ebx,eax
c002709a:	f6 c2 7f             	test   dl,0x7f
c002709d:	0f 95 c1             	setne  cl
c00270a0:	09 c8                	or     eax,ecx
c00270a2:	83 e0 01             	and    eax,0x1
c00270a5:	c1 ea 07             	shr    edx,0x7
c00270a8:	21 c2                	and    edx,eax
c00270aa:	8d 34 13             	lea    esi,[ebx+edx*1]
c00270ad:	eb 03                	jmp    c00270b2 <__mulsf3+0x1b9>
c00270af:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00270b2:	89 f0                	mov    eax,esi
c00270b4:	8d 65 f4             	lea    esp,[ebp-0xc]
c00270b7:	5b                   	pop    ebx
c00270b8:	5e                   	pop    esi
c00270b9:	5f                   	pop    edi
c00270ba:	5d                   	pop    ebp
c00270bb:	c3                   	ret    

c00270bc <__divsf3>:
c00270bc:	55                   	push   ebp
c00270bd:	89 e5                	mov    ebp,esp
c00270bf:	57                   	push   edi
c00270c0:	56                   	push   esi
c00270c1:	53                   	push   ebx
c00270c2:	83 ec 1c             	sub    esp,0x1c
c00270c5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00270c8:	89 d8                	mov    eax,ebx
c00270ca:	89 d9                	mov    ecx,ebx
c00270cc:	c1 f9 17             	sar    ecx,0x17
c00270cf:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00270d2:	c1 e0 08             	shl    eax,0x8
c00270d5:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00270da:	89 c1                	mov    ecx,eax
c00270dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00270df:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00270e2:	89 c7                	mov    edi,eax
c00270e4:	c1 ff 17             	sar    edi,0x17
c00270e7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00270eb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00270ee:	89 f8                	mov    eax,edi
c00270f0:	0f b6 c0             	movzx  eax,al
c00270f3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00270f6:	29 c6                	sub    esi,eax
c00270f8:	83 c6 7f             	add    esi,0x7f
c00270fb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00270fe:	42                   	inc    edx
c00270ff:	80 e2 fe             	and    dl,0xfe
c0027102:	0f 85 9c 00 00 00    	jne    c00271a4 <__divsf3+0xe8>
c0027108:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002710c:	74 33                	je     c0027141 <__divsf3+0x85>
c002710e:	85 c9                	test   ecx,ecx
c0027110:	0f 85 c7 01 00 00    	jne    c00272dd <__divsf3+0x221>
c0027116:	8d 57 01             	lea    edx,[edi+0x1]
c0027119:	80 e2 fe             	and    dl,0xfe
c002711c:	75 2f                	jne    c002714d <__divsf3+0x91>
c002711e:	85 c0                	test   eax,eax
c0027120:	74 2b                	je     c002714d <__divsf3+0x91>
c0027122:	51                   	push   ecx
c0027123:	51                   	push   ecx
c0027124:	6a 00                	push   0x0
c0027126:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027129:	e8 d2 03 00 00       	call   c0027500 <__nesf2>
c002712e:	83 c4 10             	add    esp,0x10
c0027131:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027134:	85 c0                	test   eax,eax
c0027136:	0f 85 a1 01 00 00    	jne    c00272dd <__divsf3+0x221>
c002713c:	e9 92 01 00 00       	jmp    c00272d3 <__divsf3+0x217>
c0027141:	85 c9                	test   ecx,ecx
c0027143:	75 1b                	jne    c0027160 <__divsf3+0xa4>
c0027145:	8d 57 01             	lea    edx,[edi+0x1]
c0027148:	80 e2 fe             	and    dl,0xfe
c002714b:	74 1e                	je     c002716b <__divsf3+0xaf>
c002714d:	85 ff                	test   edi,edi
c002714f:	0f 89 88 01 00 00    	jns    c00272dd <__divsf3+0x221>
c0027155:	81 c3 00 00 00 80    	add    ebx,0x80000000
c002715b:	e9 7d 01 00 00       	jmp    c00272dd <__divsf3+0x221>
c0027160:	8d 56 ff             	lea    edx,[esi-0x1]
c0027163:	01 c9                	add    ecx,ecx
c0027165:	78 3d                	js     c00271a4 <__divsf3+0xe8>
c0027167:	89 d6                	mov    esi,edx
c0027169:	eb f5                	jmp    c0027160 <__divsf3+0xa4>
c002716b:	85 c0                	test   eax,eax
c002716d:	b8 00 00 00 00       	mov    eax,0x0
c0027172:	74 18                	je     c002718c <__divsf3+0xd0>
c0027174:	52                   	push   edx
c0027175:	52                   	push   edx
c0027176:	50                   	push   eax
c0027177:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002717a:	e8 81 03 00 00       	call   c0027500 <__nesf2>
c002717f:	83 c4 10             	add    esp,0x10
c0027182:	85 c0                	test   eax,eax
c0027184:	0f 85 50 01 00 00    	jne    c00272da <__divsf3+0x21e>
c002718a:	eb c1                	jmp    c002714d <__divsf3+0x91>
c002718c:	56                   	push   esi
c002718d:	56                   	push   esi
c002718e:	50                   	push   eax
c002718f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027192:	e8 69 03 00 00       	call   c0027500 <__nesf2>
c0027197:	83 c4 10             	add    esp,0x10
c002719a:	85 c0                	test   eax,eax
c002719c:	0f 84 31 01 00 00    	je     c00272d3 <__divsf3+0x217>
c00271a2:	eb a9                	jmp    c002714d <__divsf3+0x91>
c00271a4:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c00271a7:	c1 e3 08             	shl    ebx,0x8
c00271aa:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00271b0:	8d 57 01             	lea    edx,[edi+0x1]
c00271b3:	80 e2 fe             	and    dl,0xfe
c00271b6:	75 71                	jne    c0027229 <__divsf3+0x16d>
c00271b8:	85 c0                	test   eax,eax
c00271ba:	ba 00 00 00 00       	mov    edx,0x0
c00271bf:	74 2f                	je     c00271f0 <__divsf3+0x134>
c00271c1:	51                   	push   ecx
c00271c2:	51                   	push   ecx
c00271c3:	52                   	push   edx
c00271c4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271c7:	e8 f9 02 00 00       	call   c00274c5 <__eqsf2>
c00271cc:	83 c4 10             	add    esp,0x10
c00271cf:	85 c0                	test   eax,eax
c00271d1:	0f 85 03 01 00 00    	jne    c00272da <__divsf3+0x21e>
c00271d7:	31 d2                	xor    edx,edx
c00271d9:	89 d3                	mov    ebx,edx
c00271db:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00271de:	31 f8                	xor    eax,edi
c00271e0:	0f 89 f7 00 00 00    	jns    c00272dd <__divsf3+0x221>
c00271e6:	bb 00 00 00 80       	mov    ebx,0x80000000
c00271eb:	e9 ed 00 00 00       	jmp    c00272dd <__divsf3+0x221>
c00271f0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00271f3:	50                   	push   eax
c00271f4:	50                   	push   eax
c00271f5:	52                   	push   edx
c00271f6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271f9:	e8 c7 02 00 00       	call   c00274c5 <__eqsf2>
c00271fe:	83 c4 10             	add    esp,0x10
c0027201:	85 c0                	test   eax,eax
c0027203:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027206:	75 16                	jne    c002721e <__divsf3+0x162>
c0027208:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002720b:	31 fb                	xor    ebx,edi
c002720d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027213:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027219:	e9 bf 00 00 00       	jmp    c00272dd <__divsf3+0x221>
c002721e:	8d 46 01             	lea    eax,[esi+0x1]
c0027221:	01 db                	add    ebx,ebx
c0027223:	78 04                	js     c0027229 <__divsf3+0x16d>
c0027225:	89 c6                	mov    esi,eax
c0027227:	eb f5                	jmp    c002721e <__divsf3+0x162>
c0027229:	89 c8                	mov    eax,ecx
c002722b:	0d 00 00 00 80       	or     eax,0x80000000
c0027230:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027236:	31 d2                	xor    edx,edx
c0027238:	39 d8                	cmp    eax,ebx
c002723a:	72 07                	jb     c0027243 <__divsf3+0x187>
c002723c:	29 d8                	sub    eax,ebx
c002723e:	ba 01 00 00 00       	mov    edx,0x1
c0027243:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c002724a:	01 d2                	add    edx,edx
c002724c:	89 c1                	mov    ecx,eax
c002724e:	01 c0                	add    eax,eax
c0027250:	85 c9                	test   ecx,ecx
c0027252:	78 04                	js     c0027258 <__divsf3+0x19c>
c0027254:	39 c3                	cmp    ebx,eax
c0027256:	77 05                	ja     c002725d <__divsf3+0x1a1>
c0027258:	29 d8                	sub    eax,ebx
c002725a:	83 ca 01             	or     edx,0x1
c002725d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027260:	75 e8                	jne    c002724a <__divsf3+0x18e>
c0027262:	85 c0                	test   eax,eax
c0027264:	0f 95 c0             	setne  al
c0027267:	0f b6 c0             	movzx  eax,al
c002726a:	c1 e2 06             	shl    edx,0x6
c002726d:	09 c2                	or     edx,eax
c002726f:	78 03                	js     c0027274 <__divsf3+0x1b8>
c0027271:	01 d2                	add    edx,edx
c0027273:	4e                   	dec    esi
c0027274:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002727a:	7f 22                	jg     c002729e <__divsf3+0x1e2>
c002727c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027282:	85 f6                	test   esi,esi
c0027284:	7f 23                	jg     c00272a9 <__divsf3+0x1ed>
c0027286:	83 fe e9             	cmp    esi,0xffffffe9
c0027289:	7c 1a                	jl     c00272a5 <__divsf3+0x1e9>
c002728b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027291:	b9 01 00 00 00       	mov    ecx,0x1
c0027296:	29 f1                	sub    ecx,esi
c0027298:	d3 ea                	shr    edx,cl
c002729a:	31 f6                	xor    esi,esi
c002729c:	eb 0b                	jmp    c00272a9 <__divsf3+0x1ed>
c002729e:	be ff 00 00 00       	mov    esi,0xff
c00272a3:	eb 02                	jmp    c00272a7 <__divsf3+0x1eb>
c00272a5:	31 f6                	xor    esi,esi
c00272a7:	31 d2                	xor    edx,edx
c00272a9:	89 d0                	mov    eax,edx
c00272ab:	c1 e8 08             	shr    eax,0x8
c00272ae:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00272b1:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00272b7:	09 fe                	or     esi,edi
c00272b9:	c1 e6 17             	shl    esi,0x17
c00272bc:	09 c6                	or     esi,eax
c00272be:	f6 c2 7f             	test   dl,0x7f
c00272c1:	0f 95 c1             	setne  cl
c00272c4:	09 c8                	or     eax,ecx
c00272c6:	83 e0 01             	and    eax,0x1
c00272c9:	c1 ea 07             	shr    edx,0x7
c00272cc:	21 c2                	and    edx,eax
c00272ce:	8d 1c 16             	lea    ebx,[esi+edx*1]
c00272d1:	eb 0a                	jmp    c00272dd <__divsf3+0x221>
c00272d3:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c00272d8:	eb 03                	jmp    c00272dd <__divsf3+0x221>
c00272da:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00272dd:	89 d8                	mov    eax,ebx
c00272df:	8d 65 f4             	lea    esp,[ebp-0xc]
c00272e2:	5b                   	pop    ebx
c00272e3:	5e                   	pop    esi
c00272e4:	5f                   	pop    edi
c00272e5:	5d                   	pop    ebp
c00272e6:	c3                   	ret    

c00272e7 <__floatsisf>:
c00272e7:	55                   	push   ebp
c00272e8:	89 e5                	mov    ebp,esp
c00272ea:	53                   	push   ebx
c00272eb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00272ee:	85 d2                	test   edx,edx
c00272f0:	7e 2b                	jle    c002731d <__floatsisf+0x36>
c00272f2:	0f bd ca             	bsr    ecx,edx
c00272f5:	83 f1 1f             	xor    ecx,0x1f
c00272f8:	d3 e2                	shl    edx,cl
c00272fa:	89 d0                	mov    eax,edx
c00272fc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027301:	89 c3                	mov    ebx,eax
c0027303:	c1 eb 08             	shr    ebx,0x8
c0027306:	80 e2 7f             	and    dl,0x7f
c0027309:	0f 95 c2             	setne  dl
c002730c:	09 da                	or     edx,ebx
c002730e:	83 e2 01             	and    edx,0x1
c0027311:	c1 e8 07             	shr    eax,0x7
c0027314:	21 c2                	and    edx,eax
c0027316:	b8 9e 00 00 00       	mov    eax,0x9e
c002731b:	eb 32                	jmp    c002734f <__floatsisf+0x68>
c002731d:	b8 00 00 00 00       	mov    eax,0x0
c0027322:	74 34                	je     c0027358 <__floatsisf+0x71>
c0027324:	f7 da                	neg    edx
c0027326:	0f bd ca             	bsr    ecx,edx
c0027329:	83 f1 1f             	xor    ecx,0x1f
c002732c:	d3 e2                	shl    edx,cl
c002732e:	89 d0                	mov    eax,edx
c0027330:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027335:	89 c3                	mov    ebx,eax
c0027337:	c1 eb 08             	shr    ebx,0x8
c002733a:	80 e2 7f             	and    dl,0x7f
c002733d:	0f 95 c2             	setne  dl
c0027340:	09 da                	or     edx,ebx
c0027342:	83 e2 01             	and    edx,0x1
c0027345:	c1 e8 07             	shr    eax,0x7
c0027348:	21 c2                	and    edx,eax
c002734a:	b8 9e 01 00 00       	mov    eax,0x19e
c002734f:	29 c8                	sub    eax,ecx
c0027351:	c1 e0 17             	shl    eax,0x17
c0027354:	09 d8                	or     eax,ebx
c0027356:	01 d0                	add    eax,edx
c0027358:	5b                   	pop    ebx
c0027359:	5d                   	pop    ebp
c002735a:	c3                   	ret    

c002735b <__floatunsisf>:
c002735b:	55                   	push   ebp
c002735c:	89 e5                	mov    ebp,esp
c002735e:	53                   	push   ebx
c002735f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027362:	31 c0                	xor    eax,eax
c0027364:	85 d2                	test   edx,edx
c0027366:	74 32                	je     c002739a <__floatunsisf+0x3f>
c0027368:	0f bd ca             	bsr    ecx,edx
c002736b:	83 f1 1f             	xor    ecx,0x1f
c002736e:	d3 e2                	shl    edx,cl
c0027370:	89 d0                	mov    eax,edx
c0027372:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027377:	89 c3                	mov    ebx,eax
c0027379:	c1 eb 08             	shr    ebx,0x8
c002737c:	80 e2 7f             	and    dl,0x7f
c002737f:	0f 95 c2             	setne  dl
c0027382:	09 da                	or     edx,ebx
c0027384:	83 e2 01             	and    edx,0x1
c0027387:	c1 e8 07             	shr    eax,0x7
c002738a:	21 c2                	and    edx,eax
c002738c:	b8 9e 00 00 00       	mov    eax,0x9e
c0027391:	29 c8                	sub    eax,ecx
c0027393:	c1 e0 17             	shl    eax,0x17
c0027396:	09 d8                	or     eax,ebx
c0027398:	01 d0                	add    eax,edx
c002739a:	5b                   	pop    ebx
c002739b:	5d                   	pop    ebp
c002739c:	c3                   	ret    

c002739d <__fixsfsi>:
c002739d:	55                   	push   ebp
c002739e:	89 e5                	mov    ebp,esp
c00273a0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273a3:	89 d1                	mov    ecx,edx
c00273a5:	c1 e1 08             	shl    ecx,0x8
c00273a8:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c00273ae:	c1 fa 17             	sar    edx,0x17
c00273b1:	78 1c                	js     c00273cf <__fixsfsi+0x32>
c00273b3:	83 ea 7f             	sub    edx,0x7f
c00273b6:	31 c0                	xor    eax,eax
c00273b8:	83 fa 1e             	cmp    edx,0x1e
c00273bb:	77 40                	ja     c00273fd <__fixsfsi+0x60>
c00273bd:	89 c8                	mov    eax,ecx
c00273bf:	0d 00 00 00 80       	or     eax,0x80000000
c00273c4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00273c9:	29 d1                	sub    ecx,edx
c00273cb:	d3 e8                	shr    eax,cl
c00273cd:	eb 2e                	jmp    c00273fd <__fixsfsi+0x60>
c00273cf:	31 c0                	xor    eax,eax
c00273d1:	81 c2 81 00 00 00    	add    edx,0x81
c00273d7:	78 24                	js     c00273fd <__fixsfsi+0x60>
c00273d9:	83 fa 1e             	cmp    edx,0x1e
c00273dc:	7e 09                	jle    c00273e7 <__fixsfsi+0x4a>
c00273de:	83 fa 1f             	cmp    edx,0x1f
c00273e1:	75 18                	jne    c00273fb <__fixsfsi+0x5e>
c00273e3:	85 c9                	test   ecx,ecx
c00273e5:	75 14                	jne    c00273fb <__fixsfsi+0x5e>
c00273e7:	89 c8                	mov    eax,ecx
c00273e9:	0d 00 00 00 80       	or     eax,0x80000000
c00273ee:	b9 1f 00 00 00       	mov    ecx,0x1f
c00273f3:	29 d1                	sub    ecx,edx
c00273f5:	d3 e8                	shr    eax,cl
c00273f7:	f7 d8                	neg    eax
c00273f9:	eb 02                	jmp    c00273fd <__fixsfsi+0x60>
c00273fb:	31 c0                	xor    eax,eax
c00273fd:	5d                   	pop    ebp
c00273fe:	c3                   	ret    

c00273ff <__fixunssfsi>:
c00273ff:	55                   	push   ebp
c0027400:	89 e5                	mov    ebp,esp
c0027402:	53                   	push   ebx
c0027403:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027406:	89 d3                	mov    ebx,edx
c0027408:	c1 fb 17             	sar    ebx,0x17
c002740b:	83 eb 7f             	sub    ebx,0x7f
c002740e:	31 c0                	xor    eax,eax
c0027410:	83 fb 1f             	cmp    ebx,0x1f
c0027413:	77 18                	ja     c002742d <__fixunssfsi+0x2e>
c0027415:	89 d0                	mov    eax,edx
c0027417:	c1 e0 08             	shl    eax,0x8
c002741a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002741f:	0d 00 00 00 80       	or     eax,0x80000000
c0027424:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027429:	29 d9                	sub    ecx,ebx
c002742b:	d3 e8                	shr    eax,cl
c002742d:	5b                   	pop    ebx
c002742e:	5d                   	pop    ebp
c002742f:	c3                   	ret    

c0027430 <__cmpsf2>:
c0027430:	55                   	push   ebp
c0027431:	89 e5                	mov    ebp,esp
c0027433:	57                   	push   edi
c0027434:	56                   	push   esi
c0027435:	53                   	push   ebx
c0027436:	83 ec 24             	sub    esp,0x24
c0027439:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002743c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002743f:	e8 4f 10 00 00       	call   c0028493 <__truncdfsf2>
c0027444:	5a                   	pop    edx
c0027445:	59                   	pop    ecx
c0027446:	89 c3                	mov    ebx,eax
c0027448:	c1 e8 17             	shr    eax,0x17
c002744b:	0f b6 f0             	movzx  esi,al
c002744e:	89 d8                	mov    eax,ebx
c0027450:	c1 e8 1f             	shr    eax,0x1f
c0027453:	31 c6                	xor    esi,eax
c0027455:	c1 e3 08             	shl    ebx,0x8
c0027458:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002745b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002745e:	e8 30 10 00 00       	call   c0028493 <__truncdfsf2>
c0027463:	83 c4 10             	add    esp,0x10
c0027466:	89 c1                	mov    ecx,eax
c0027468:	c1 e9 17             	shr    ecx,0x17
c002746b:	0f b6 c9             	movzx  ecx,cl
c002746e:	89 c7                	mov    edi,eax
c0027470:	c1 ef 1f             	shr    edi,0x1f
c0027473:	89 ca                	mov    edx,ecx
c0027475:	31 fa                	xor    edx,edi
c0027477:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002747a:	c1 e0 08             	shl    eax,0x8
c002747d:	89 c2                	mov    edx,eax
c002747f:	89 d8                	mov    eax,ebx
c0027481:	09 d0                	or     eax,edx
c0027483:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027488:	09 f0                	or     eax,esi
c002748a:	75 08                	jne    c0027494 <__cmpsf2+0x64>
c002748c:	31 c0                	xor    eax,eax
c002748e:	39 f9                	cmp    ecx,edi
c0027490:	75 0c                	jne    c002749e <__cmpsf2+0x6e>
c0027492:	eb 29                	jmp    c00274bd <__cmpsf2+0x8d>
c0027494:	b8 01 00 00 00       	mov    eax,0x1
c0027499:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002749c:	7f 1f                	jg     c00274bd <__cmpsf2+0x8d>
c002749e:	83 c8 ff             	or     eax,0xffffffff
c00274a1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00274a4:	7c 17                	jl     c00274bd <__cmpsf2+0x8d>
c00274a6:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00274ac:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00274b2:	b8 01 00 00 00       	mov    eax,0x1
c00274b7:	39 d3                	cmp    ebx,edx
c00274b9:	77 02                	ja     c00274bd <__cmpsf2+0x8d>
c00274bb:	19 c0                	sbb    eax,eax
c00274bd:	8d 65 f4             	lea    esp,[ebp-0xc]
c00274c0:	5b                   	pop    ebx
c00274c1:	5e                   	pop    esi
c00274c2:	5f                   	pop    edi
c00274c3:	5d                   	pop    ebp
c00274c4:	c3                   	ret    

c00274c5 <__eqsf2>:
c00274c5:	55                   	push   ebp
c00274c6:	89 e5                	mov    ebp,esp
c00274c8:	83 ec 24             	sub    esp,0x24
c00274cb:	6a 01                	push   0x1
c00274cd:	83 ec 0c             	sub    esp,0xc
c00274d0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00274d3:	e8 df 10 00 00       	call   c00285b7 <__extendsfdf2>
c00274d8:	83 c4 10             	add    esp,0x10
c00274db:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00274de:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00274e1:	52                   	push   edx
c00274e2:	50                   	push   eax
c00274e3:	50                   	push   eax
c00274e4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00274e7:	e8 cb 10 00 00       	call   c00285b7 <__extendsfdf2>
c00274ec:	59                   	pop    ecx
c00274ed:	59                   	pop    ecx
c00274ee:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00274f1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00274f4:	52                   	push   edx
c00274f5:	50                   	push   eax
c00274f6:	e8 35 ff ff ff       	call   c0027430 <__cmpsf2>
c00274fb:	83 c4 20             	add    esp,0x20
c00274fe:	c9                   	leave  
c00274ff:	c3                   	ret    

c0027500 <__nesf2>:
c0027500:	eb c3                	jmp    c00274c5 <__eqsf2>

c0027502 <__gtsf2>:
c0027502:	55                   	push   ebp
c0027503:	89 e5                	mov    ebp,esp
c0027505:	83 ec 24             	sub    esp,0x24
c0027508:	6a ff                	push   0xffffffff
c002750a:	83 ec 0c             	sub    esp,0xc
c002750d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027510:	e8 a2 10 00 00       	call   c00285b7 <__extendsfdf2>
c0027515:	83 c4 10             	add    esp,0x10
c0027518:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002751b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002751e:	52                   	push   edx
c002751f:	50                   	push   eax
c0027520:	50                   	push   eax
c0027521:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027524:	e8 8e 10 00 00       	call   c00285b7 <__extendsfdf2>
c0027529:	59                   	pop    ecx
c002752a:	59                   	pop    ecx
c002752b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002752e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027531:	52                   	push   edx
c0027532:	50                   	push   eax
c0027533:	e8 f8 fe ff ff       	call   c0027430 <__cmpsf2>
c0027538:	83 c4 20             	add    esp,0x20
c002753b:	c9                   	leave  
c002753c:	c3                   	ret    

c002753d <__gesf2>:
c002753d:	eb c3                	jmp    c0027502 <__gtsf2>

c002753f <__ltsf2>:
c002753f:	eb 84                	jmp    c00274c5 <__eqsf2>

c0027541 <__lesf2>:
c0027541:	eb 82                	jmp    c00274c5 <__eqsf2>

c0027543 <__adddf3>:
c0027543:	55                   	push   ebp
c0027544:	89 e5                	mov    ebp,esp
c0027546:	57                   	push   edi
c0027547:	56                   	push   esi
c0027548:	53                   	push   ebx
c0027549:	83 ec 24             	sub    esp,0x24
c002754c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002754f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027552:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027555:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027558:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002755b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002755e:	89 c8                	mov    eax,ecx
c0027560:	89 ce                	mov    esi,ecx
c0027562:	c1 fe 14             	sar    esi,0x14
c0027565:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027568:	89 fb                	mov    ebx,edi
c002756a:	89 fa                	mov    edx,edi
c002756c:	c1 e2 0b             	shl    edx,0xb
c002756f:	c1 e0 0b             	shl    eax,0xb
c0027572:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027577:	c1 eb 15             	shr    ebx,0x15
c002757a:	09 d8                	or     eax,ebx
c002757c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002757f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027582:	c1 fe 14             	sar    esi,0x14
c0027585:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027588:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002758b:	89 f3                	mov    ebx,esi
c002758d:	c1 e3 0b             	shl    ebx,0xb
c0027590:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027593:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027596:	c1 e3 0b             	shl    ebx,0xb
c0027599:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002759f:	c1 ee 15             	shr    esi,0x15
c00275a2:	09 f3                	or     ebx,esi
c00275a4:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00275a7:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00275aa:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00275ad:	0f 88 5f 02 00 00    	js     c0027812 <__adddf3+0x2cf>
c00275b3:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00275b6:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00275b9:	85 db                	test   ebx,ebx
c00275bb:	0f 8e c7 00 00 00    	jle    c0027688 <__adddf3+0x145>
c00275c1:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00275c8:	75 1a                	jne    c00275e4 <__adddf3+0xa1>
c00275ca:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00275cd:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00275d0:	0f 84 b2 05 00 00    	je     c0027b88 <__adddf3+0x645>
c00275d6:	4b                   	dec    ebx
c00275d7:	75 23                	jne    c00275fc <__adddf3+0xb9>
c00275d9:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00275dc:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00275df:	e9 99 00 00 00       	jmp    c002767d <__adddf3+0x13a>
c00275e4:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00275e7:	f7 d6                	not    esi
c00275e9:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00275ef:	0f 84 93 05 00 00    	je     c0027b88 <__adddf3+0x645>
c00275f5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00275fc:	83 fb 1f             	cmp    ebx,0x1f
c00275ff:	7e 42                	jle    c0027643 <__adddf3+0x100>
c0027601:	83 fb 3f             	cmp    ebx,0x3f
c0027604:	0f 8f 7e 05 00 00    	jg     c0027b88 <__adddf3+0x645>
c002760a:	83 e3 1f             	and    ebx,0x1f
c002760d:	89 d9                	mov    ecx,ebx
c002760f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027612:	d3 ef                	shr    edi,cl
c0027614:	31 db                	xor    ebx,ebx
c0027616:	85 c9                	test   ecx,ecx
c0027618:	74 15                	je     c002762f <__adddf3+0xec>
c002761a:	be 20 00 00 00       	mov    esi,0x20
c002761f:	29 ce                	sub    esi,ecx
c0027621:	89 f1                	mov    ecx,esi
c0027623:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027626:	d3 e6                	shl    esi,cl
c0027628:	31 db                	xor    ebx,ebx
c002762a:	85 f6                	test   esi,esi
c002762c:	0f 95 c3             	setne  bl
c002762f:	31 c9                	xor    ecx,ecx
c0027631:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027635:	0f 95 c1             	setne  cl
c0027638:	09 cf                	or     edi,ecx
c002763a:	09 fb                	or     ebx,edi
c002763c:	01 da                	add    edx,ebx
c002763e:	83 d0 00             	adc    eax,0x0
c0027641:	eb 3a                	jmp    c002767d <__adddf3+0x13a>
c0027643:	bf 20 00 00 00       	mov    edi,0x20
c0027648:	29 df                	sub    edi,ebx
c002764a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002764d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027650:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027653:	d3 e6                	shl    esi,cl
c0027655:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027658:	88 d9                	mov    cl,bl
c002765a:	d3 ef                	shr    edi,cl
c002765c:	09 fe                	or     esi,edi
c002765e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027661:	88 d9                	mov    cl,bl
c0027663:	d3 ef                	shr    edi,cl
c0027665:	89 fb                	mov    ebx,edi
c0027667:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002766a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002766d:	d3 e7                	shl    edi,cl
c002766f:	85 ff                	test   edi,edi
c0027671:	0f 95 c1             	setne  cl
c0027674:	0f b6 c9             	movzx  ecx,cl
c0027677:	09 ce                	or     esi,ecx
c0027679:	01 f2                	add    edx,esi
c002767b:	11 d8                	adc    eax,ebx
c002767d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027680:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027683:	e9 52 01 00 00       	jmp    c00277da <__adddf3+0x297>
c0027688:	0f 84 d5 00 00 00    	je     c0027763 <__adddf3+0x220>
c002768e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027691:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027694:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027697:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002769a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00276a1:	75 20                	jne    c00276c3 <__adddf3+0x180>
c00276a3:	89 d6                	mov    esi,edx
c00276a5:	09 c6                	or     esi,eax
c00276a7:	0f 84 db 04 00 00    	je     c0027b88 <__adddf3+0x645>
c00276ad:	4b                   	dec    ebx
c00276ae:	75 29                	jne    c00276d9 <__adddf3+0x196>
c00276b0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276b3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00276b6:	01 d1                	add    ecx,edx
c00276b8:	11 c6                	adc    esi,eax
c00276ba:	89 f0                	mov    eax,esi
c00276bc:	89 ca                	mov    edx,ecx
c00276be:	e9 17 01 00 00       	jmp    c00277da <__adddf3+0x297>
c00276c3:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00276c6:	f7 d6                	not    esi
c00276c8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00276ce:	0f 84 b4 04 00 00    	je     c0027b88 <__adddf3+0x645>
c00276d4:	0d 00 00 00 80       	or     eax,0x80000000
c00276d9:	83 fb 1f             	cmp    ebx,0x1f
c00276dc:	7e 48                	jle    c0027726 <__adddf3+0x1e3>
c00276de:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00276e1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00276e4:	83 fb 3f             	cmp    ebx,0x3f
c00276e7:	0f 8f 9b 04 00 00    	jg     c0027b88 <__adddf3+0x645>
c00276ed:	83 e3 1f             	and    ebx,0x1f
c00276f0:	89 d9                	mov    ecx,ebx
c00276f2:	89 c7                	mov    edi,eax
c00276f4:	d3 ef                	shr    edi,cl
c00276f6:	31 db                	xor    ebx,ebx
c00276f8:	85 c9                	test   ecx,ecx
c00276fa:	74 12                	je     c002770e <__adddf3+0x1cb>
c00276fc:	be 20 00 00 00       	mov    esi,0x20
c0027701:	29 ce                	sub    esi,ecx
c0027703:	89 f1                	mov    ecx,esi
c0027705:	d3 e0                	shl    eax,cl
c0027707:	31 db                	xor    ebx,ebx
c0027709:	85 c0                	test   eax,eax
c002770b:	0f 95 c3             	setne  bl
c002770e:	31 c0                	xor    eax,eax
c0027710:	85 d2                	test   edx,edx
c0027712:	0f 95 c0             	setne  al
c0027715:	09 c7                	or     edi,eax
c0027717:	09 fb                	or     ebx,edi
c0027719:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002771c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002771f:	01 da                	add    edx,ebx
c0027721:	83 d6 00             	adc    esi,0x0
c0027724:	eb 39                	jmp    c002775f <__adddf3+0x21c>
c0027726:	be 20 00 00 00       	mov    esi,0x20
c002772b:	29 de                	sub    esi,ebx
c002772d:	89 c7                	mov    edi,eax
c002772f:	89 f1                	mov    ecx,esi
c0027731:	d3 e7                	shl    edi,cl
c0027733:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027736:	89 d7                	mov    edi,edx
c0027738:	88 d9                	mov    cl,bl
c002773a:	d3 ef                	shr    edi,cl
c002773c:	89 f9                	mov    ecx,edi
c002773e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027741:	09 cf                	or     edi,ecx
c0027743:	88 d9                	mov    cl,bl
c0027745:	d3 e8                	shr    eax,cl
c0027747:	89 f1                	mov    ecx,esi
c0027749:	d3 e2                	shl    edx,cl
c002774b:	85 d2                	test   edx,edx
c002774d:	0f 95 c2             	setne  dl
c0027750:	0f b6 d2             	movzx  edx,dl
c0027753:	09 d7                	or     edi,edx
c0027755:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027758:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002775b:	01 fa                	add    edx,edi
c002775d:	11 c6                	adc    esi,eax
c002775f:	89 f0                	mov    eax,esi
c0027761:	eb 77                	jmp    c00277da <__adddf3+0x297>
c0027763:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027766:	46                   	inc    esi
c0027767:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002776a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027770:	75 41                	jne    c00277b3 <__adddf3+0x270>
c0027772:	89 d3                	mov    ebx,edx
c0027774:	09 c3                	or     ebx,eax
c0027776:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002777d:	75 27                	jne    c00277a6 <__adddf3+0x263>
c002777f:	85 db                	test   ebx,ebx
c0027781:	0f 84 fb 03 00 00    	je     c0027b82 <__adddf3+0x63f>
c0027787:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002778a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002778d:	0f 84 f5 03 00 00    	je     c0027b88 <__adddf3+0x645>
c0027793:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027796:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027799:	85 c0                	test   eax,eax
c002779b:	0f 89 91 03 00 00    	jns    c0027b32 <__adddf3+0x5ef>
c00277a1:	e9 85 03 00 00       	jmp    c0027b2b <__adddf3+0x5e8>
c00277a6:	85 db                	test   ebx,ebx
c00277a8:	0f 85 da 03 00 00    	jne    c0027b88 <__adddf3+0x645>
c00277ae:	e9 cf 03 00 00       	jmp    c0027b82 <__adddf3+0x63f>
c00277b3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00277b6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00277b9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00277bc:	f7 d1                	not    ecx
c00277be:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00277c4:	0f 84 70 03 00 00    	je     c0027b3a <__adddf3+0x5f7>
c00277ca:	d1 ea                	shr    edx,1
c00277cc:	89 c1                	mov    ecx,eax
c00277ce:	c1 e1 1f             	shl    ecx,0x1f
c00277d1:	09 ca                	or     edx,ecx
c00277d3:	d1 e8                	shr    eax,1
c00277d5:	e9 6f 03 00 00       	jmp    c0027b49 <__adddf3+0x606>
c00277da:	85 c0                	test   eax,eax
c00277dc:	0f 89 67 03 00 00    	jns    c0027b49 <__adddf3+0x606>
c00277e2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00277e5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00277e8:	f7 d1                	not    ecx
c00277ea:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00277f0:	0f 84 44 03 00 00    	je     c0027b3a <__adddf3+0x5f7>
c00277f6:	89 d1                	mov    ecx,edx
c00277f8:	d1 e9                	shr    ecx,1
c00277fa:	83 e2 01             	and    edx,0x1
c00277fd:	09 ca                	or     edx,ecx
c00277ff:	89 c1                	mov    ecx,eax
c0027801:	c1 e1 1f             	shl    ecx,0x1f
c0027804:	09 ca                	or     edx,ecx
c0027806:	d1 e8                	shr    eax,1
c0027808:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002780d:	e9 37 03 00 00       	jmp    c0027b49 <__adddf3+0x606>
c0027812:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027815:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002781b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002781e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027821:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027827:	29 de                	sub    esi,ebx
c0027829:	85 f6                	test   esi,esi
c002782b:	0f 8e bd 00 00 00    	jle    c00278ee <__adddf3+0x3ab>
c0027831:	85 db                	test   ebx,ebx
c0027833:	75 17                	jne    c002784c <__adddf3+0x309>
c0027835:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027838:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002783b:	0f 84 47 03 00 00    	je     c0027b88 <__adddf3+0x645>
c0027841:	4e                   	dec    esi
c0027842:	75 20                	jne    c0027864 <__adddf3+0x321>
c0027844:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027847:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002784a:	eb 5b                	jmp    c00278a7 <__adddf3+0x364>
c002784c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002784f:	f7 d3                	not    ebx
c0027851:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027857:	0f 84 2b 03 00 00    	je     c0027b88 <__adddf3+0x645>
c002785d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027864:	83 fe 1f             	cmp    esi,0x1f
c0027867:	7e 49                	jle    c00278b2 <__adddf3+0x36f>
c0027869:	83 fe 3f             	cmp    esi,0x3f
c002786c:	0f 8f 16 03 00 00    	jg     c0027b88 <__adddf3+0x645>
c0027872:	83 e6 1f             	and    esi,0x1f
c0027875:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027878:	89 f1                	mov    ecx,esi
c002787a:	d3 ef                	shr    edi,cl
c002787c:	31 db                	xor    ebx,ebx
c002787e:	85 f6                	test   esi,esi
c0027880:	74 13                	je     c0027895 <__adddf3+0x352>
c0027882:	b9 20 00 00 00       	mov    ecx,0x20
c0027887:	29 f1                	sub    ecx,esi
c0027889:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002788c:	d3 e6                	shl    esi,cl
c002788e:	31 db                	xor    ebx,ebx
c0027890:	85 f6                	test   esi,esi
c0027892:	0f 95 c3             	setne  bl
c0027895:	31 c9                	xor    ecx,ecx
c0027897:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002789b:	0f 95 c1             	setne  cl
c002789e:	09 cf                	or     edi,ecx
c00278a0:	09 fb                	or     ebx,edi
c00278a2:	29 da                	sub    edx,ebx
c00278a4:	83 d8 00             	sbb    eax,0x0
c00278a7:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00278aa:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00278ad:	e9 aa 01 00 00       	jmp    c0027a5c <__adddf3+0x519>
c00278b2:	bf 20 00 00 00       	mov    edi,0x20
c00278b7:	29 f7                	sub    edi,esi
c00278b9:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00278bc:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00278bf:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00278c2:	d3 e3                	shl    ebx,cl
c00278c4:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00278c7:	89 f1                	mov    ecx,esi
c00278c9:	d3 ef                	shr    edi,cl
c00278cb:	09 fb                	or     ebx,edi
c00278cd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00278d0:	89 f1                	mov    ecx,esi
c00278d2:	d3 ef                	shr    edi,cl
c00278d4:	89 fe                	mov    esi,edi
c00278d6:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00278d9:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00278dc:	d3 e7                	shl    edi,cl
c00278de:	85 ff                	test   edi,edi
c00278e0:	0f 95 c1             	setne  cl
c00278e3:	0f b6 c9             	movzx  ecx,cl
c00278e6:	09 cb                	or     ebx,ecx
c00278e8:	29 da                	sub    edx,ebx
c00278ea:	19 f0                	sbb    eax,esi
c00278ec:	eb b9                	jmp    c00278a7 <__adddf3+0x364>
c00278ee:	0f 84 cd 00 00 00    	je     c00279c1 <__adddf3+0x47e>
c00278f4:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00278f7:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00278fa:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00278fd:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027901:	75 1b                	jne    c002791e <__adddf3+0x3db>
c0027903:	89 d6                	mov    esi,edx
c0027905:	09 c6                	or     esi,eax
c0027907:	0f 84 7b 02 00 00    	je     c0027b88 <__adddf3+0x645>
c002790d:	4b                   	dec    ebx
c002790e:	75 24                	jne    c0027934 <__adddf3+0x3f1>
c0027910:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027913:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027916:	29 d1                	sub    ecx,edx
c0027918:	19 c6                	sbb    esi,eax
c002791a:	89 ca                	mov    edx,ecx
c002791c:	eb 61                	jmp    c002797f <__adddf3+0x43c>
c002791e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027921:	f7 d6                	not    esi
c0027923:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027929:	0f 84 59 02 00 00    	je     c0027b88 <__adddf3+0x645>
c002792f:	0d 00 00 00 80       	or     eax,0x80000000
c0027934:	83 fb 1f             	cmp    ebx,0x1f
c0027937:	7e 4d                	jle    c0027986 <__adddf3+0x443>
c0027939:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002793c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002793f:	83 fb 3f             	cmp    ebx,0x3f
c0027942:	0f 8f 40 02 00 00    	jg     c0027b88 <__adddf3+0x645>
c0027948:	83 e3 1f             	and    ebx,0x1f
c002794b:	89 d9                	mov    ecx,ebx
c002794d:	89 c7                	mov    edi,eax
c002794f:	d3 ef                	shr    edi,cl
c0027951:	31 db                	xor    ebx,ebx
c0027953:	85 c9                	test   ecx,ecx
c0027955:	74 12                	je     c0027969 <__adddf3+0x426>
c0027957:	be 20 00 00 00       	mov    esi,0x20
c002795c:	29 ce                	sub    esi,ecx
c002795e:	89 f1                	mov    ecx,esi
c0027960:	d3 e0                	shl    eax,cl
c0027962:	31 db                	xor    ebx,ebx
c0027964:	85 c0                	test   eax,eax
c0027966:	0f 95 c3             	setne  bl
c0027969:	31 c0                	xor    eax,eax
c002796b:	85 d2                	test   edx,edx
c002796d:	0f 95 c0             	setne  al
c0027970:	09 c7                	or     edi,eax
c0027972:	09 fb                	or     ebx,edi
c0027974:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027977:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002797a:	29 da                	sub    edx,ebx
c002797c:	83 de 00             	sbb    esi,0x0
c002797f:	89 f0                	mov    eax,esi
c0027981:	e9 d6 00 00 00       	jmp    c0027a5c <__adddf3+0x519>
c0027986:	be 20 00 00 00       	mov    esi,0x20
c002798b:	29 de                	sub    esi,ebx
c002798d:	89 c7                	mov    edi,eax
c002798f:	89 f1                	mov    ecx,esi
c0027991:	d3 e7                	shl    edi,cl
c0027993:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027996:	89 d7                	mov    edi,edx
c0027998:	88 d9                	mov    cl,bl
c002799a:	d3 ef                	shr    edi,cl
c002799c:	89 f9                	mov    ecx,edi
c002799e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00279a1:	09 cf                	or     edi,ecx
c00279a3:	88 d9                	mov    cl,bl
c00279a5:	d3 e8                	shr    eax,cl
c00279a7:	89 f1                	mov    ecx,esi
c00279a9:	d3 e2                	shl    edx,cl
c00279ab:	85 d2                	test   edx,edx
c00279ad:	0f 95 c2             	setne  dl
c00279b0:	0f b6 d2             	movzx  edx,dl
c00279b3:	09 d7                	or     edi,edx
c00279b5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279b8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00279bb:	29 fa                	sub    edx,edi
c00279bd:	19 c6                	sbb    esi,eax
c00279bf:	eb be                	jmp    c002797f <__adddf3+0x43c>
c00279c1:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00279c4:	8d 5e 01             	lea    ebx,[esi+0x1]
c00279c7:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00279cd:	75 6a                	jne    c0027a39 <__adddf3+0x4f6>
c00279cf:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00279d3:	75 58                	jne    c0027a2d <__adddf3+0x4ea>
c00279d5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00279d8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00279db:	89 d6                	mov    esi,edx
c00279dd:	09 c6                	or     esi,eax
c00279df:	75 17                	jne    c00279f8 <__adddf3+0x4b5>
c00279e1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00279e4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00279e7:	85 db                	test   ebx,ebx
c00279e9:	0f 85 99 01 00 00    	jne    c0027b88 <__adddf3+0x645>
c00279ef:	31 ff                	xor    edi,edi
c00279f1:	31 c9                	xor    ecx,ecx
c00279f3:	e9 90 01 00 00       	jmp    c0027b88 <__adddf3+0x645>
c00279f8:	85 db                	test   ebx,ebx
c00279fa:	0f 84 88 01 00 00    	je     c0027b88 <__adddf3+0x645>
c0027a00:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027a03:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027a06:	85 c0                	test   eax,eax
c0027a08:	79 10                	jns    c0027a1a <__adddf3+0x4d7>
c0027a0a:	31 c9                	xor    ecx,ecx
c0027a0c:	f7 da                	neg    edx
c0027a0e:	0f 95 c1             	setne  cl
c0027a11:	01 c8                	add    eax,ecx
c0027a13:	f7 d8                	neg    eax
c0027a15:	e9 2f 01 00 00       	jmp    c0027b49 <__adddf3+0x606>
c0027a1a:	31 ff                	xor    edi,edi
c0027a1c:	31 c9                	xor    ecx,ecx
c0027a1e:	89 c3                	mov    ebx,eax
c0027a20:	09 d3                	or     ebx,edx
c0027a22:	0f 84 60 01 00 00    	je     c0027b88 <__adddf3+0x645>
c0027a28:	e9 05 01 00 00       	jmp    c0027b32 <__adddf3+0x5ef>
c0027a2d:	31 ff                	xor    edi,edi
c0027a2f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027a34:	e9 4f 01 00 00       	jmp    c0027b88 <__adddf3+0x645>
c0027a39:	89 c1                	mov    ecx,eax
c0027a3b:	89 d0                	mov    eax,edx
c0027a3d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027a40:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027a43:	89 ca                	mov    edx,ecx
c0027a45:	85 c9                	test   ecx,ecx
c0027a47:	79 2c                	jns    c0027a75 <__adddf3+0x532>
c0027a49:	31 c9                	xor    ecx,ecx
c0027a4b:	f7 d8                	neg    eax
c0027a4d:	0f 95 c1             	setne  cl
c0027a50:	01 ca                	add    edx,ecx
c0027a52:	f7 da                	neg    edx
c0027a54:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027a57:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027a5a:	eb 19                	jmp    c0027a75 <__adddf3+0x532>
c0027a5c:	85 c0                	test   eax,eax
c0027a5e:	0f 89 e5 00 00 00    	jns    c0027b49 <__adddf3+0x606>
c0027a64:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027a69:	89 c1                	mov    ecx,eax
c0027a6b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027a6e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027a71:	89 d0                	mov    eax,edx
c0027a73:	89 ca                	mov    edx,ecx
c0027a75:	85 d2                	test   edx,edx
c0027a77:	74 59                	je     c0027ad2 <__adddf3+0x58f>
c0027a79:	0f bd da             	bsr    ebx,edx
c0027a7c:	83 f3 1f             	xor    ebx,0x1f
c0027a7f:	88 d9                	mov    cl,bl
c0027a81:	d3 e2                	shl    edx,cl
c0027a83:	bf 20 00 00 00       	mov    edi,0x20
c0027a88:	89 f9                	mov    ecx,edi
c0027a8a:	29 d9                	sub    ecx,ebx
c0027a8c:	89 c6                	mov    esi,eax
c0027a8e:	d3 ee                	shr    esi,cl
c0027a90:	09 d6                	or     esi,edx
c0027a92:	88 d9                	mov    cl,bl
c0027a94:	d3 e0                	shl    eax,cl
c0027a96:	89 c2                	mov    edx,eax
c0027a98:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a9b:	25 ff 07 00 00       	and    eax,0x7ff
c0027aa0:	39 d8                	cmp    eax,ebx
c0027aa2:	7f 22                	jg     c0027ac6 <__adddf3+0x583>
c0027aa4:	29 c3                	sub    ebx,eax
c0027aa6:	43                   	inc    ebx
c0027aa7:	88 d9                	mov    cl,bl
c0027aa9:	d3 ea                	shr    edx,cl
c0027aab:	29 df                	sub    edi,ebx
c0027aad:	89 f9                	mov    ecx,edi
c0027aaf:	89 f0                	mov    eax,esi
c0027ab1:	d3 e0                	shl    eax,cl
c0027ab3:	09 c2                	or     edx,eax
c0027ab5:	89 f0                	mov    eax,esi
c0027ab7:	88 d9                	mov    cl,bl
c0027ab9:	d3 e8                	shr    eax,cl
c0027abb:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027abe:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027ac4:	eb 6f                	jmp    c0027b35 <__adddf3+0x5f2>
c0027ac6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ac9:	29 d8                	sub    eax,ebx
c0027acb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027ace:	89 f0                	mov    eax,esi
c0027ad0:	eb 59                	jmp    c0027b2b <__adddf3+0x5e8>
c0027ad2:	85 c0                	test   eax,eax
c0027ad4:	74 6a                	je     c0027b40 <__adddf3+0x5fd>
c0027ad6:	0f bd c8             	bsr    ecx,eax
c0027ad9:	83 f1 1f             	xor    ecx,0x1f
c0027adc:	d3 e0                	shl    eax,cl
c0027ade:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027ae1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027ae7:	83 c1 20             	add    ecx,0x20
c0027aea:	39 cb                	cmp    ebx,ecx
c0027aec:	7f 35                	jg     c0027b23 <__adddf3+0x5e0>
c0027aee:	29 d9                	sub    ecx,ebx
c0027af0:	8d 71 01             	lea    esi,[ecx+0x1]
c0027af3:	83 fe 1f             	cmp    esi,0x1f
c0027af6:	7e 09                	jle    c0027b01 <__adddf3+0x5be>
c0027af8:	83 e9 1f             	sub    ecx,0x1f
c0027afb:	d3 e8                	shr    eax,cl
c0027afd:	89 c3                	mov    ebx,eax
c0027aff:	eb 11                	jmp    c0027b12 <__adddf3+0x5cf>
c0027b01:	b9 20 00 00 00       	mov    ecx,0x20
c0027b06:	29 f1                	sub    ecx,esi
c0027b08:	89 c3                	mov    ebx,eax
c0027b0a:	d3 e3                	shl    ebx,cl
c0027b0c:	89 f1                	mov    ecx,esi
c0027b0e:	d3 e8                	shr    eax,cl
c0027b10:	89 c2                	mov    edx,eax
c0027b12:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b15:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027b1a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b1d:	89 d0                	mov    eax,edx
c0027b1f:	89 da                	mov    edx,ebx
c0027b21:	eb 26                	jmp    c0027b49 <__adddf3+0x606>
c0027b23:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b26:	29 cf                	sub    edi,ecx
c0027b28:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b2b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b30:	eb 17                	jmp    c0027b49 <__adddf3+0x606>
c0027b32:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b35:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b38:	eb 0f                	jmp    c0027b49 <__adddf3+0x606>
c0027b3a:	31 d2                	xor    edx,edx
c0027b3c:	31 c0                	xor    eax,eax
c0027b3e:	eb 09                	jmp    c0027b49 <__adddf3+0x606>
c0027b40:	89 c2                	mov    edx,eax
c0027b42:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027b49:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b4c:	c1 e1 14             	shl    ecx,0x14
c0027b4f:	89 c3                	mov    ebx,eax
c0027b51:	c1 eb 0b             	shr    ebx,0xb
c0027b54:	09 d9                	or     ecx,ebx
c0027b56:	89 d3                	mov    ebx,edx
c0027b58:	c1 eb 0b             	shr    ebx,0xb
c0027b5b:	c1 e0 15             	shl    eax,0x15
c0027b5e:	09 d8                	or     eax,ebx
c0027b60:	89 c7                	mov    edi,eax
c0027b62:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027b68:	0f 95 c0             	setne  al
c0027b6b:	89 c6                	mov    esi,eax
c0027b6d:	09 f3                	or     ebx,esi
c0027b6f:	83 e3 01             	and    ebx,0x1
c0027b72:	c1 ea 0a             	shr    edx,0xa
c0027b75:	21 da                	and    edx,ebx
c0027b77:	89 f8                	mov    eax,edi
c0027b79:	01 d0                	add    eax,edx
c0027b7b:	83 d1 00             	adc    ecx,0x0
c0027b7e:	89 c7                	mov    edi,eax
c0027b80:	eb 06                	jmp    c0027b88 <__adddf3+0x645>
c0027b82:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027b85:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027b88:	89 f8                	mov    eax,edi
c0027b8a:	89 ca                	mov    edx,ecx
c0027b8c:	83 c4 24             	add    esp,0x24
c0027b8f:	5b                   	pop    ebx
c0027b90:	5e                   	pop    esi
c0027b91:	5f                   	pop    edi
c0027b92:	5d                   	pop    ebp
c0027b93:	c3                   	ret    

c0027b94 <__subdf3>:
c0027b94:	55                   	push   ebp
c0027b95:	89 e5                	mov    ebp,esp
c0027b97:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027b9a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027b9d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027ba3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027ba6:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027ba9:	5d                   	pop    ebp
c0027baa:	e9 94 f9 ff ff       	jmp    c0027543 <__adddf3>

c0027baf <__negdf2>:
c0027baf:	55                   	push   ebp
c0027bb0:	89 e5                	mov    ebp,esp
c0027bb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027bb5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027bb8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027bbe:	5d                   	pop    ebp
c0027bbf:	c3                   	ret    

c0027bc0 <__muldf3>:
c0027bc0:	55                   	push   ebp
c0027bc1:	89 e5                	mov    ebp,esp
c0027bc3:	57                   	push   edi
c0027bc4:	56                   	push   esi
c0027bc5:	53                   	push   ebx
c0027bc6:	83 ec 24             	sub    esp,0x24
c0027bc9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027bcc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027bcf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027bd2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027bd5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027bd8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027bdb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027bde:	89 c8                	mov    eax,ecx
c0027be0:	c1 f8 14             	sar    eax,0x14
c0027be3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027be6:	89 f8                	mov    eax,edi
c0027be8:	89 fb                	mov    ebx,edi
c0027bea:	c1 e3 0b             	shl    ebx,0xb
c0027bed:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027bf0:	c1 e1 0b             	shl    ecx,0xb
c0027bf3:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027bf9:	c1 e8 15             	shr    eax,0x15
c0027bfc:	09 c1                	or     ecx,eax
c0027bfe:	89 d6                	mov    esi,edx
c0027c00:	89 d0                	mov    eax,edx
c0027c02:	c1 f8 14             	sar    eax,0x14
c0027c05:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027c08:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027c0b:	89 c3                	mov    ebx,eax
c0027c0d:	c1 e3 0b             	shl    ebx,0xb
c0027c10:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027c13:	c1 e6 0b             	shl    esi,0xb
c0027c16:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027c1c:	c1 e8 15             	shr    eax,0x15
c0027c1f:	09 c6                	or     esi,eax
c0027c21:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c24:	25 ff 07 00 00       	and    eax,0x7ff
c0027c29:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027c2c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c2f:	25 ff 07 00 00       	and    eax,0x7ff
c0027c34:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027c37:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027c3a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027c3d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027c44:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c47:	40                   	inc    eax
c0027c48:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c4d:	0f 85 8d 00 00 00    	jne    c0027ce0 <__muldf3+0x120>
c0027c53:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c56:	09 c8                	or     eax,ecx
c0027c58:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027c5c:	74 44                	je     c0027ca2 <__muldf3+0xe2>
c0027c5e:	85 c0                	test   eax,eax
c0027c60:	0f 85 31 02 00 00    	jne    c0027e97 <__muldf3+0x2d7>
c0027c66:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c69:	40                   	inc    eax
c0027c6a:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c6f:	75 13                	jne    c0027c84 <__muldf3+0xc4>
c0027c71:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027c74:	09 f1                	or     ecx,esi
c0027c76:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027c7a:	74 22                	je     c0027c9e <__muldf3+0xde>
c0027c7c:	85 c9                	test   ecx,ecx
c0027c7e:	0f 85 0d 02 00 00    	jne    c0027e91 <__muldf3+0x2d1>
c0027c84:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027c88:	0f 89 09 02 00 00    	jns    c0027e97 <__muldf3+0x2d7>
c0027c8e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027c91:	05 00 00 00 80       	add    eax,0x80000000
c0027c96:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c99:	e9 f9 01 00 00       	jmp    c0027e97 <__muldf3+0x2d7>
c0027c9e:	85 c9                	test   ecx,ecx
c0027ca0:	eb 2e                	jmp    c0027cd0 <__muldf3+0x110>
c0027ca2:	85 c0                	test   eax,eax
c0027ca4:	74 20                	je     c0027cc6 <__muldf3+0x106>
c0027ca6:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027ca9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027cac:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027caf:	c1 ef 1f             	shr    edi,0x1f
c0027cb2:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027cb5:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027cb8:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027cbb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027cbe:	09 f9                	or     ecx,edi
c0027cc0:	78 1e                	js     c0027ce0 <__muldf3+0x120>
c0027cc2:	89 c3                	mov    ebx,eax
c0027cc4:	eb e0                	jmp    c0027ca6 <__muldf3+0xe6>
c0027cc6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027cc9:	f7 d0                	not    eax
c0027ccb:	a9 ff 07 00 00       	test   eax,0x7ff
c0027cd0:	75 b2                	jne    c0027c84 <__muldf3+0xc4>
c0027cd2:	31 ff                	xor    edi,edi
c0027cd4:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027cdb:	e9 b7 01 00 00       	jmp    c0027e97 <__muldf3+0x2d7>
c0027ce0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ce3:	40                   	inc    eax
c0027ce4:	a9 fe 07 00 00       	test   eax,0x7fe
c0027ce9:	75 57                	jne    c0027d42 <__muldf3+0x182>
c0027ceb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027cee:	09 f0                	or     eax,esi
c0027cf0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027cf4:	74 23                	je     c0027d19 <__muldf3+0x159>
c0027cf6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027cfa:	0f 89 91 01 00 00    	jns    c0027e91 <__muldf3+0x2d1>
c0027d00:	85 c0                	test   eax,eax
c0027d02:	0f 85 89 01 00 00    	jne    c0027e91 <__muldf3+0x2d1>
c0027d08:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027d0b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027d11:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d14:	e9 7e 01 00 00       	jmp    c0027e97 <__muldf3+0x2d7>
c0027d19:	85 c0                	test   eax,eax
c0027d1b:	75 0c                	jne    c0027d29 <__muldf3+0x169>
c0027d1d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027d21:	0f 89 6a 01 00 00    	jns    c0027e91 <__muldf3+0x2d1>
c0027d27:	eb df                	jmp    c0027d08 <__muldf3+0x148>
c0027d29:	01 f6                	add    esi,esi
c0027d2b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027d2e:	c1 ea 1f             	shr    edx,0x1f
c0027d31:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027d34:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027d37:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027d3a:	09 d6                	or     esi,edx
c0027d3c:	78 04                	js     c0027d42 <__muldf3+0x182>
c0027d3e:	89 c3                	mov    ebx,eax
c0027d40:	eb e7                	jmp    c0027d29 <__muldf3+0x169>
c0027d42:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027d48:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027d4e:	89 c8                	mov    eax,ecx
c0027d50:	f7 e6                	mul    esi
c0027d52:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027d55:	89 c7                	mov    edi,eax
c0027d57:	89 c8                	mov    eax,ecx
c0027d59:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027d5c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027d5f:	89 c1                	mov    ecx,eax
c0027d61:	89 f0                	mov    eax,esi
c0027d63:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027d66:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027d69:	89 c6                	mov    esi,eax
c0027d6b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d6e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027d71:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027d74:	31 c0                	xor    eax,eax
c0027d76:	01 f1                	add    ecx,esi
c0027d78:	0f 92 c0             	setb   al
c0027d7b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027d7e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027d81:	83 d6 00             	adc    esi,0x0
c0027d84:	01 c7                	add    edi,eax
c0027d86:	83 d6 00             	adc    esi,0x0
c0027d89:	01 ca                	add    edx,ecx
c0027d8b:	0f 92 c1             	setb   cl
c0027d8e:	0f b6 c9             	movzx  ecx,cl
c0027d91:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027d94:	83 d6 00             	adc    esi,0x0
c0027d97:	01 cf                	add    edi,ecx
c0027d99:	83 d6 00             	adc    esi,0x0
c0027d9c:	31 c9                	xor    ecx,ecx
c0027d9e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027da1:	0f 95 c1             	setne  cl
c0027da4:	09 cf                	or     edi,ecx
c0027da6:	85 f6                	test   esi,esi
c0027da8:	78 0c                	js     c0027db6 <__muldf3+0x1f6>
c0027daa:	01 f6                	add    esi,esi
c0027dac:	89 f8                	mov    eax,edi
c0027dae:	c1 e8 1f             	shr    eax,0x1f
c0027db1:	09 c6                	or     esi,eax
c0027db3:	01 ff                	add    edi,edi
c0027db5:	4b                   	dec    ebx
c0027db6:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027dbc:	0f 8f 85 00 00 00    	jg     c0027e47 <__muldf3+0x287>
c0027dc2:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027dc8:	85 db                	test   ebx,ebx
c0027dca:	0f 8f 84 00 00 00    	jg     c0027e54 <__muldf3+0x294>
c0027dd0:	83 fb cc             	cmp    ebx,0xffffffcc
c0027dd3:	7c 79                	jl     c0027e4e <__muldf3+0x28e>
c0027dd5:	ba 01 00 00 00       	mov    edx,0x1
c0027dda:	29 da                	sub    edx,ebx
c0027ddc:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027de2:	83 fa 1f             	cmp    edx,0x1f
c0027de5:	7e 30                	jle    c0027e17 <__muldf3+0x257>
c0027de7:	83 fa 20             	cmp    edx,0x20
c0027dea:	75 0b                	jne    c0027df7 <__muldf3+0x237>
c0027dec:	31 c0                	xor    eax,eax
c0027dee:	85 ff                	test   edi,edi
c0027df0:	0f 95 c0             	setne  al
c0027df3:	89 c7                	mov    edi,eax
c0027df5:	eb 1a                	jmp    c0027e11 <__muldf3+0x251>
c0027df7:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027dfa:	89 f0                	mov    eax,esi
c0027dfc:	d3 e0                	shl    eax,cl
c0027dfe:	09 f8                	or     eax,edi
c0027e00:	0f 95 c0             	setne  al
c0027e03:	0f b6 c0             	movzx  eax,al
c0027e06:	89 c7                	mov    edi,eax
c0027e08:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027e0d:	29 d9                	sub    ecx,ebx
c0027e0f:	d3 ee                	shr    esi,cl
c0027e11:	09 f7                	or     edi,esi
c0027e13:	31 db                	xor    ebx,ebx
c0027e15:	eb 3b                	jmp    c0027e52 <__muldf3+0x292>
c0027e17:	83 c3 1f             	add    ebx,0x1f
c0027e1a:	89 f0                	mov    eax,esi
c0027e1c:	88 d9                	mov    cl,bl
c0027e1e:	d3 e0                	shl    eax,cl
c0027e20:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027e23:	89 f8                	mov    eax,edi
c0027e25:	88 d1                	mov    cl,dl
c0027e27:	d3 e8                	shr    eax,cl
c0027e29:	89 c1                	mov    ecx,eax
c0027e2b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027e2e:	09 c8                	or     eax,ecx
c0027e30:	88 d9                	mov    cl,bl
c0027e32:	d3 e7                	shl    edi,cl
c0027e34:	31 db                	xor    ebx,ebx
c0027e36:	85 ff                	test   edi,edi
c0027e38:	0f 95 c3             	setne  bl
c0027e3b:	89 df                	mov    edi,ebx
c0027e3d:	09 c7                	or     edi,eax
c0027e3f:	88 d1                	mov    cl,dl
c0027e41:	d3 ee                	shr    esi,cl
c0027e43:	31 db                	xor    ebx,ebx
c0027e45:	eb 0d                	jmp    c0027e54 <__muldf3+0x294>
c0027e47:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027e4c:	eb 02                	jmp    c0027e50 <__muldf3+0x290>
c0027e4e:	31 db                	xor    ebx,ebx
c0027e50:	31 ff                	xor    edi,edi
c0027e52:	31 f6                	xor    esi,esi
c0027e54:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027e57:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027e5a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027e5f:	09 c3                	or     ebx,eax
c0027e61:	c1 e3 14             	shl    ebx,0x14
c0027e64:	89 f0                	mov    eax,esi
c0027e66:	c1 e8 0b             	shr    eax,0xb
c0027e69:	09 c3                	or     ebx,eax
c0027e6b:	89 f8                	mov    eax,edi
c0027e6d:	c1 e8 0b             	shr    eax,0xb
c0027e70:	c1 e6 15             	shl    esi,0x15
c0027e73:	09 c6                	or     esi,eax
c0027e75:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027e7b:	0f 95 c1             	setne  cl
c0027e7e:	09 c8                	or     eax,ecx
c0027e80:	83 e0 01             	and    eax,0x1
c0027e83:	c1 ef 0a             	shr    edi,0xa
c0027e86:	21 c7                	and    edi,eax
c0027e88:	01 f7                	add    edi,esi
c0027e8a:	83 d3 00             	adc    ebx,0x0
c0027e8d:	89 da                	mov    edx,ebx
c0027e8f:	eb 03                	jmp    c0027e94 <__muldf3+0x2d4>
c0027e91:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027e94:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027e97:	89 f8                	mov    eax,edi
c0027e99:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027e9c:	83 c4 24             	add    esp,0x24
c0027e9f:	5b                   	pop    ebx
c0027ea0:	5e                   	pop    esi
c0027ea1:	5f                   	pop    edi
c0027ea2:	5d                   	pop    ebp
c0027ea3:	c3                   	ret    

c0027ea4 <__divdf3>:
c0027ea4:	55                   	push   ebp
c0027ea5:	89 e5                	mov    ebp,esp
c0027ea7:	57                   	push   edi
c0027ea8:	56                   	push   esi
c0027ea9:	53                   	push   ebx
c0027eaa:	83 ec 2c             	sub    esp,0x2c
c0027ead:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027eb0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027eb3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027eb6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027eb9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027ebc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027ebf:	89 ce                	mov    esi,ecx
c0027ec1:	89 c8                	mov    eax,ecx
c0027ec3:	c1 f8 14             	sar    eax,0x14
c0027ec6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027ec9:	89 f8                	mov    eax,edi
c0027ecb:	89 fb                	mov    ebx,edi
c0027ecd:	c1 e3 0b             	shl    ebx,0xb
c0027ed0:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027ed3:	c1 e6 0b             	shl    esi,0xb
c0027ed6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027edc:	c1 e8 15             	shr    eax,0x15
c0027edf:	09 c6                	or     esi,eax
c0027ee1:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027ee4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027ee7:	89 c2                	mov    edx,eax
c0027ee9:	c1 fa 14             	sar    edx,0x14
c0027eec:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027eef:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027ef2:	89 de                	mov    esi,ebx
c0027ef4:	c1 e6 0b             	shl    esi,0xb
c0027ef7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027efa:	c1 e0 0b             	shl    eax,0xb
c0027efd:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027f02:	c1 eb 15             	shr    ebx,0x15
c0027f05:	09 d8                	or     eax,ebx
c0027f07:	89 c2                	mov    edx,eax
c0027f09:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f0c:	25 ff 07 00 00       	and    eax,0x7ff
c0027f11:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027f14:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027f17:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027f1d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027f20:	29 d8                	sub    eax,ebx
c0027f22:	05 ff 03 00 00       	add    eax,0x3ff
c0027f27:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027f2a:	46                   	inc    esi
c0027f2b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027f31:	0f 85 a5 00 00 00    	jne    c0027fdc <__divdf3+0x138>
c0027f37:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027f3a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027f3d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027f41:	74 2a                	je     c0027f6d <__divdf3+0xc9>
c0027f43:	85 f6                	test   esi,esi
c0027f45:	0f 85 cc 02 00 00    	jne    c0028217 <__divdf3+0x373>
c0027f4b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f4e:	40                   	inc    eax
c0027f4f:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f54:	75 26                	jne    c0027f7c <__divdf3+0xd8>
c0027f56:	85 db                	test   ebx,ebx
c0027f58:	74 22                	je     c0027f7c <__divdf3+0xd8>
c0027f5a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027f5d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027f60:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027f63:	09 d0                	or     eax,edx
c0027f65:	0f 85 ac 02 00 00    	jne    c0028217 <__divdf3+0x373>
c0027f6b:	eb 63                	jmp    c0027fd0 <__divdf3+0x12c>
c0027f6d:	85 f6                	test   esi,esi
c0027f6f:	75 22                	jne    c0027f93 <__divdf3+0xef>
c0027f71:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f74:	40                   	inc    eax
c0027f75:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f7a:	74 36                	je     c0027fb2 <__divdf3+0x10e>
c0027f7c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027f80:	0f 89 91 02 00 00    	jns    c0028217 <__divdf3+0x373>
c0027f86:	89 f8                	mov    eax,edi
c0027f88:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027f8e:	e9 80 02 00 00       	jmp    c0028213 <__divdf3+0x36f>
c0027f93:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027f96:	01 f6                	add    esi,esi
c0027f98:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027f9b:	c1 ef 1f             	shr    edi,0x1f
c0027f9e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027fa1:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027fa4:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027fa7:	09 f7                	or     edi,esi
c0027fa9:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027fac:	78 2e                	js     c0027fdc <__divdf3+0x138>
c0027fae:	89 c8                	mov    eax,ecx
c0027fb0:	eb e1                	jmp    c0027f93 <__divdf3+0xef>
c0027fb2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027fb5:	09 d0                	or     eax,edx
c0027fb7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027fbb:	74 0f                	je     c0027fcc <__divdf3+0x128>
c0027fbd:	85 c0                	test   eax,eax
c0027fbf:	74 bb                	je     c0027f7c <__divdf3+0xd8>
c0027fc1:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027fc4:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027fc7:	e9 4b 02 00 00       	jmp    c0028217 <__divdf3+0x373>
c0027fcc:	85 c0                	test   eax,eax
c0027fce:	75 ac                	jne    c0027f7c <__divdf3+0xd8>
c0027fd0:	31 ff                	xor    edi,edi
c0027fd2:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027fd7:	e9 3b 02 00 00       	jmp    c0028217 <__divdf3+0x373>
c0027fdc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027fdf:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027fe2:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027fe8:	75 6b                	jne    c0028055 <__divdf3+0x1b1>
c0027fea:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027fed:	09 d6                	or     esi,edx
c0027fef:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027ff3:	74 28                	je     c002801d <__divdf3+0x179>
c0027ff5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027ff8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027ffb:	85 f6                	test   esi,esi
c0027ffd:	0f 85 14 02 00 00    	jne    c0028217 <__divdf3+0x373>
c0028003:	31 ff                	xor    edi,edi
c0028005:	31 c9                	xor    ecx,ecx
c0028007:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002800a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002800d:	0f 89 04 02 00 00    	jns    c0028217 <__divdf3+0x373>
c0028013:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028018:	e9 fa 01 00 00       	jmp    c0028217 <__divdf3+0x373>
c002801d:	85 f6                	test   esi,esi
c002801f:	75 1b                	jne    c002803c <__divdf3+0x198>
c0028021:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028024:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028027:	25 00 00 00 80       	and    eax,0x80000000
c002802c:	31 c9                	xor    ecx,ecx
c002802e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0028033:	89 cf                	mov    edi,ecx
c0028035:	89 c1                	mov    ecx,eax
c0028037:	e9 db 01 00 00       	jmp    c0028217 <__divdf3+0x373>
c002803c:	01 d2                	add    edx,edx
c002803e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028041:	c1 eb 1f             	shr    ebx,0x1f
c0028044:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028047:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c002804a:	8d 48 01             	lea    ecx,[eax+0x1]
c002804d:	09 da                	or     edx,ebx
c002804f:	78 04                	js     c0028055 <__divdf3+0x1b1>
c0028051:	89 c8                	mov    eax,ecx
c0028053:	eb e7                	jmp    c002803c <__divdf3+0x198>
c0028055:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028058:	81 ce 00 00 00 80    	or     esi,0x80000000
c002805e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028064:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0028067:	39 d6                	cmp    esi,edx
c0028069:	77 0d                	ja     c0028078 <__divdf3+0x1d4>
c002806b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002806e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028071:	72 1b                	jb     c002808e <__divdf3+0x1ea>
c0028073:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0028076:	75 16                	jne    c002808e <__divdf3+0x1ea>
c0028078:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002807b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002807e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028081:	83 de 00             	sbb    esi,0x0
c0028084:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0028087:	ba 01 00 00 00       	mov    edx,0x1
c002808c:	eb 02                	jmp    c0028090 <__divdf3+0x1ec>
c002808e:	31 d2                	xor    edx,edx
c0028090:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0028097:	31 ff                	xor    edi,edi
c0028099:	01 ff                	add    edi,edi
c002809b:	89 d1                	mov    ecx,edx
c002809d:	c1 e9 1f             	shr    ecx,0x1f
c00280a0:	09 cf                	or     edi,ecx
c00280a2:	8d 1c 12             	lea    ebx,[edx+edx*1]
c00280a5:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00280a8:	89 da                	mov    edx,ebx
c00280aa:	89 f3                	mov    ebx,esi
c00280ac:	8d 34 36             	lea    esi,[esi+esi*1]
c00280af:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280b2:	c1 e9 1f             	shr    ecx,0x1f
c00280b5:	09 ce                	or     esi,ecx
c00280b7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280ba:	01 c9                	add    ecx,ecx
c00280bc:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00280bf:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00280c2:	85 db                	test   ebx,ebx
c00280c4:	78 29                	js     c00280ef <__divdf3+0x24b>
c00280c6:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00280c9:	72 07                	jb     c00280d2 <__divdf3+0x22e>
c00280cb:	75 3c                	jne    c0028109 <__divdf3+0x265>
c00280cd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00280d0:	77 37                	ja     c0028109 <__divdf3+0x265>
c00280d2:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00280d5:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c00280d8:	31 d2                	xor    edx,edx
c00280da:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c00280dd:	0f 97 c2             	seta   dl
c00280e0:	29 d6                	sub    esi,edx
c00280e2:	89 d9                	mov    ecx,ebx
c00280e4:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00280e7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00280ea:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00280ed:	eb 17                	jmp    c0028106 <__divdf3+0x262>
c00280ef:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00280f2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280f5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00280f8:	0f 97 c1             	seta   cl
c00280fb:	0f b6 c9             	movzx  ecx,cl
c00280fe:	29 ce                	sub    esi,ecx
c0028100:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0028103:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0028106:	83 ca 01             	or     edx,0x1
c0028109:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c002810c:	75 8b                	jne    c0028099 <__divdf3+0x1f5>
c002810e:	c1 e7 09             	shl    edi,0x9
c0028111:	89 d1                	mov    ecx,edx
c0028113:	c1 e9 17             	shr    ecx,0x17
c0028116:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028119:	09 f3                	or     ebx,esi
c002811b:	0f 95 c3             	setne  bl
c002811e:	0f b6 db             	movzx  ebx,bl
c0028121:	c1 e2 09             	shl    edx,0x9
c0028124:	09 d3                	or     ebx,edx
c0028126:	89 ca                	mov    edx,ecx
c0028128:	09 fa                	or     edx,edi
c002812a:	78 0c                	js     c0028138 <__divdf3+0x294>
c002812c:	01 d2                	add    edx,edx
c002812e:	89 d9                	mov    ecx,ebx
c0028130:	c1 e9 1f             	shr    ecx,0x1f
c0028133:	09 ca                	or     edx,ecx
c0028135:	01 db                	add    ebx,ebx
c0028137:	48                   	dec    eax
c0028138:	3d fe 07 00 00       	cmp    eax,0x7fe
c002813d:	0f 8f 83 00 00 00    	jg     c00281c6 <__divdf3+0x322>
c0028143:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028149:	85 c0                	test   eax,eax
c002814b:	0f 8f 82 00 00 00    	jg     c00281d3 <__divdf3+0x32f>
c0028151:	83 f8 cc             	cmp    eax,0xffffffcc
c0028154:	7c 77                	jl     c00281cd <__divdf3+0x329>
c0028156:	be 01 00 00 00       	mov    esi,0x1
c002815b:	29 c6                	sub    esi,eax
c002815d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028163:	83 fe 1f             	cmp    esi,0x1f
c0028166:	7e 2f                	jle    c0028197 <__divdf3+0x2f3>
c0028168:	83 fe 20             	cmp    esi,0x20
c002816b:	75 0a                	jne    c0028177 <__divdf3+0x2d3>
c002816d:	85 db                	test   ebx,ebx
c002816f:	0f 95 c3             	setne  bl
c0028172:	0f b6 db             	movzx  ebx,bl
c0028175:	eb 1a                	jmp    c0028191 <__divdf3+0x2ed>
c0028177:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002817a:	89 d7                	mov    edi,edx
c002817c:	d3 e7                	shl    edi,cl
c002817e:	89 f9                	mov    ecx,edi
c0028180:	09 d9                	or     ecx,ebx
c0028182:	0f 95 c3             	setne  bl
c0028185:	0f b6 db             	movzx  ebx,bl
c0028188:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002818d:	29 c1                	sub    ecx,eax
c002818f:	d3 ea                	shr    edx,cl
c0028191:	09 d3                	or     ebx,edx
c0028193:	31 c0                	xor    eax,eax
c0028195:	eb 3a                	jmp    c00281d1 <__divdf3+0x32d>
c0028197:	83 c0 1f             	add    eax,0x1f
c002819a:	89 d7                	mov    edi,edx
c002819c:	88 c1                	mov    cl,al
c002819e:	d3 e7                	shl    edi,cl
c00281a0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00281a3:	89 df                	mov    edi,ebx
c00281a5:	89 f1                	mov    ecx,esi
c00281a7:	d3 ef                	shr    edi,cl
c00281a9:	89 f9                	mov    ecx,edi
c00281ab:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00281ae:	09 cf                	or     edi,ecx
c00281b0:	88 c1                	mov    cl,al
c00281b2:	d3 e3                	shl    ebx,cl
c00281b4:	85 db                	test   ebx,ebx
c00281b6:	0f 95 c3             	setne  bl
c00281b9:	0f b6 db             	movzx  ebx,bl
c00281bc:	09 fb                	or     ebx,edi
c00281be:	89 f1                	mov    ecx,esi
c00281c0:	d3 ea                	shr    edx,cl
c00281c2:	31 c0                	xor    eax,eax
c00281c4:	eb 0d                	jmp    c00281d3 <__divdf3+0x32f>
c00281c6:	b8 ff 07 00 00       	mov    eax,0x7ff
c00281cb:	eb 02                	jmp    c00281cf <__divdf3+0x32b>
c00281cd:	31 c0                	xor    eax,eax
c00281cf:	31 db                	xor    ebx,ebx
c00281d1:	31 d2                	xor    edx,edx
c00281d3:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c00281d6:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c00281d9:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00281df:	09 c8                	or     eax,ecx
c00281e1:	c1 e0 14             	shl    eax,0x14
c00281e4:	89 d1                	mov    ecx,edx
c00281e6:	c1 e9 0b             	shr    ecx,0xb
c00281e9:	09 c8                	or     eax,ecx
c00281eb:	89 c6                	mov    esi,eax
c00281ed:	89 d9                	mov    ecx,ebx
c00281ef:	c1 e9 0b             	shr    ecx,0xb
c00281f2:	c1 e2 15             	shl    edx,0x15
c00281f5:	09 ca                	or     edx,ecx
c00281f7:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c00281fd:	0f 95 c0             	setne  al
c0028200:	09 c1                	or     ecx,eax
c0028202:	83 e1 01             	and    ecx,0x1
c0028205:	c1 eb 0a             	shr    ebx,0xa
c0028208:	21 cb                	and    ebx,ecx
c002820a:	01 d3                	add    ebx,edx
c002820c:	89 d8                	mov    eax,ebx
c002820e:	83 d6 00             	adc    esi,0x0
c0028211:	89 f2                	mov    edx,esi
c0028213:	89 c7                	mov    edi,eax
c0028215:	89 d1                	mov    ecx,edx
c0028217:	89 f8                	mov    eax,edi
c0028219:	89 ca                	mov    edx,ecx
c002821b:	83 c4 2c             	add    esp,0x2c
c002821e:	5b                   	pop    ebx
c002821f:	5e                   	pop    esi
c0028220:	5f                   	pop    edi
c0028221:	5d                   	pop    ebp
c0028222:	c3                   	ret    

c0028223 <__floatsidf>:
c0028223:	55                   	push   ebp
c0028224:	89 e5                	mov    ebp,esp
c0028226:	56                   	push   esi
c0028227:	53                   	push   ebx
c0028228:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002822b:	85 db                	test   ebx,ebx
c002822d:	7e 15                	jle    c0028244 <__floatsidf+0x21>
c002822f:	0f bd cb             	bsr    ecx,ebx
c0028232:	83 f1 1f             	xor    ecx,0x1f
c0028235:	d3 e3                	shl    ebx,cl
c0028237:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c002823d:	b8 1e 04 00 00       	mov    eax,0x41e
c0028242:	eb 21                	jmp    c0028265 <__floatsidf+0x42>
c0028244:	b8 00 00 00 00       	mov    eax,0x0
c0028249:	ba 00 00 00 00       	mov    edx,0x0
c002824e:	74 2a                	je     c002827a <__floatsidf+0x57>
c0028250:	f7 db                	neg    ebx
c0028252:	0f bd cb             	bsr    ecx,ebx
c0028255:	83 f1 1f             	xor    ecx,0x1f
c0028258:	d3 e3                	shl    ebx,cl
c002825a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028260:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028265:	29 c8                	sub    eax,ecx
c0028267:	c1 e0 14             	shl    eax,0x14
c002826a:	89 c1                	mov    ecx,eax
c002826c:	89 de                	mov    esi,ebx
c002826e:	c1 ee 0b             	shr    esi,0xb
c0028271:	09 f1                	or     ecx,esi
c0028273:	89 ca                	mov    edx,ecx
c0028275:	c1 e3 15             	shl    ebx,0x15
c0028278:	89 d8                	mov    eax,ebx
c002827a:	5b                   	pop    ebx
c002827b:	5e                   	pop    esi
c002827c:	5d                   	pop    ebp
c002827d:	c3                   	ret    

c002827e <__floatunsidf>:
c002827e:	55                   	push   ebp
c002827f:	89 e5                	mov    ebp,esp
c0028281:	56                   	push   esi
c0028282:	53                   	push   ebx
c0028283:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028286:	85 db                	test   ebx,ebx
c0028288:	74 2a                	je     c00282b4 <__floatunsidf+0x36>
c002828a:	0f bd cb             	bsr    ecx,ebx
c002828d:	83 f1 1f             	xor    ecx,0x1f
c0028290:	d3 e3                	shl    ebx,cl
c0028292:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028298:	b8 1e 04 00 00       	mov    eax,0x41e
c002829d:	29 c8                	sub    eax,ecx
c002829f:	c1 e0 14             	shl    eax,0x14
c00282a2:	89 c1                	mov    ecx,eax
c00282a4:	89 de                	mov    esi,ebx
c00282a6:	c1 ee 0b             	shr    esi,0xb
c00282a9:	09 f1                	or     ecx,esi
c00282ab:	89 ca                	mov    edx,ecx
c00282ad:	c1 e3 15             	shl    ebx,0x15
c00282b0:	89 d8                	mov    eax,ebx
c00282b2:	eb 04                	jmp    c00282b8 <__floatunsidf+0x3a>
c00282b4:	31 c0                	xor    eax,eax
c00282b6:	31 d2                	xor    edx,edx
c00282b8:	5b                   	pop    ebx
c00282b9:	5e                   	pop    esi
c00282ba:	5d                   	pop    ebp
c00282bb:	c3                   	ret    

c00282bc <__fixdfsi>:
c00282bc:	55                   	push   ebp
c00282bd:	89 e5                	mov    ebp,esp
c00282bf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00282c2:	89 d1                	mov    ecx,edx
c00282c4:	c1 e1 0b             	shl    ecx,0xb
c00282c7:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00282cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00282d0:	c1 e8 15             	shr    eax,0x15
c00282d3:	09 c1                	or     ecx,eax
c00282d5:	c1 fa 14             	sar    edx,0x14
c00282d8:	78 1f                	js     c00282f9 <__fixdfsi+0x3d>
c00282da:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00282e0:	31 c0                	xor    eax,eax
c00282e2:	83 fa 1e             	cmp    edx,0x1e
c00282e5:	77 40                	ja     c0028327 <__fixdfsi+0x6b>
c00282e7:	89 c8                	mov    eax,ecx
c00282e9:	0d 00 00 00 80       	or     eax,0x80000000
c00282ee:	b9 1f 00 00 00       	mov    ecx,0x1f
c00282f3:	29 d1                	sub    ecx,edx
c00282f5:	d3 e8                	shr    eax,cl
c00282f7:	eb 2e                	jmp    c0028327 <__fixdfsi+0x6b>
c00282f9:	31 c0                	xor    eax,eax
c00282fb:	81 c2 01 04 00 00    	add    edx,0x401
c0028301:	78 24                	js     c0028327 <__fixdfsi+0x6b>
c0028303:	83 fa 1e             	cmp    edx,0x1e
c0028306:	7e 09                	jle    c0028311 <__fixdfsi+0x55>
c0028308:	83 fa 1f             	cmp    edx,0x1f
c002830b:	75 18                	jne    c0028325 <__fixdfsi+0x69>
c002830d:	85 c9                	test   ecx,ecx
c002830f:	75 14                	jne    c0028325 <__fixdfsi+0x69>
c0028311:	89 c8                	mov    eax,ecx
c0028313:	0d 00 00 00 80       	or     eax,0x80000000
c0028318:	b9 1f 00 00 00       	mov    ecx,0x1f
c002831d:	29 d1                	sub    ecx,edx
c002831f:	d3 e8                	shr    eax,cl
c0028321:	f7 d8                	neg    eax
c0028323:	eb 02                	jmp    c0028327 <__fixdfsi+0x6b>
c0028325:	31 c0                	xor    eax,eax
c0028327:	5d                   	pop    ebp
c0028328:	c3                   	ret    

c0028329 <__fixunsdfsi>:
c0028329:	55                   	push   ebp
c002832a:	89 e5                	mov    ebp,esp
c002832c:	53                   	push   ebx
c002832d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028330:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028333:	89 d3                	mov    ebx,edx
c0028335:	c1 fb 14             	sar    ebx,0x14
c0028338:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c002833e:	31 c0                	xor    eax,eax
c0028340:	83 fb 1f             	cmp    ebx,0x1f
c0028343:	77 1d                	ja     c0028362 <__fixunsdfsi+0x39>
c0028345:	89 d0                	mov    eax,edx
c0028347:	c1 e0 0b             	shl    eax,0xb
c002834a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002834f:	c1 e9 15             	shr    ecx,0x15
c0028352:	09 c8                	or     eax,ecx
c0028354:	0d 00 00 00 80       	or     eax,0x80000000
c0028359:	b9 1f 00 00 00       	mov    ecx,0x1f
c002835e:	29 d9                	sub    ecx,ebx
c0028360:	d3 e8                	shr    eax,cl
c0028362:	5b                   	pop    ebx
c0028363:	5d                   	pop    ebp
c0028364:	c3                   	ret    

c0028365 <__cmpdf2>:
c0028365:	55                   	push   ebp
c0028366:	89 e5                	mov    ebp,esp
c0028368:	57                   	push   edi
c0028369:	56                   	push   esi
c002836a:	53                   	push   ebx
c002836b:	83 ec 0c             	sub    esp,0xc
c002836e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028371:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028374:	89 ca                	mov    edx,ecx
c0028376:	c1 ea 14             	shr    edx,0x14
c0028379:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002837f:	89 cb                	mov    ebx,ecx
c0028381:	c1 fb 1f             	sar    ebx,0x1f
c0028384:	31 da                	xor    edx,ebx
c0028386:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028389:	89 df                	mov    edi,ebx
c002838b:	c1 e7 0b             	shl    edi,0xb
c002838e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028391:	c1 e1 0b             	shl    ecx,0xb
c0028394:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002839a:	c1 eb 15             	shr    ebx,0x15
c002839d:	09 d9                	or     ecx,ebx
c002839f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c00283a2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00283a5:	89 ce                	mov    esi,ecx
c00283a7:	c1 ee 14             	shr    esi,0x14
c00283aa:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00283b0:	89 cb                	mov    ebx,ecx
c00283b2:	c1 fb 1f             	sar    ebx,0x1f
c00283b5:	31 de                	xor    esi,ebx
c00283b7:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00283ba:	89 df                	mov    edi,ebx
c00283bc:	c1 e7 0b             	shl    edi,0xb
c00283bf:	c1 e1 0b             	shl    ecx,0xb
c00283c2:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00283c8:	c1 eb 15             	shr    ebx,0x15
c00283cb:	09 d9                	or     ecx,ebx
c00283cd:	89 d3                	mov    ebx,edx
c00283cf:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00283d5:	43                   	inc    ebx
c00283d6:	83 fb 01             	cmp    ebx,0x1
c00283d9:	77 08                	ja     c00283e3 <__cmpdf2+0x7e>
c00283db:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00283de:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00283e1:	75 68                	jne    c002844b <__cmpdf2+0xe6>
c00283e3:	89 f3                	mov    ebx,esi
c00283e5:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00283eb:	43                   	inc    ebx
c00283ec:	83 fb 01             	cmp    ebx,0x1
c00283ef:	77 06                	ja     c00283f7 <__cmpdf2+0x92>
c00283f1:	89 fb                	mov    ebx,edi
c00283f3:	09 cb                	or     ebx,ecx
c00283f5:	75 54                	jne    c002844b <__cmpdf2+0xe6>
c00283f7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00283fa:	09 f8                	or     eax,edi
c00283fc:	09 c8                	or     eax,ecx
c00283fe:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028401:	75 12                	jne    c0028415 <__cmpdf2+0xb0>
c0028403:	8d 42 01             	lea    eax,[edx+0x1]
c0028406:	83 f8 01             	cmp    eax,0x1
c0028409:	77 0a                	ja     c0028415 <__cmpdf2+0xb0>
c002840b:	8d 5e 01             	lea    ebx,[esi+0x1]
c002840e:	31 c0                	xor    eax,eax
c0028410:	83 fb 01             	cmp    ebx,0x1
c0028413:	76 36                	jbe    c002844b <__cmpdf2+0xe6>
c0028415:	b8 01 00 00 00       	mov    eax,0x1
c002841a:	39 f2                	cmp    edx,esi
c002841c:	7f 2d                	jg     c002844b <__cmpdf2+0xe6>
c002841e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028423:	7c 26                	jl     c002844b <__cmpdf2+0xe6>
c0028425:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028428:	77 07                	ja     c0028431 <__cmpdf2+0xcc>
c002842a:	72 16                	jb     c0028442 <__cmpdf2+0xdd>
c002842c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c002842f:	76 0a                	jbe    c002843b <__cmpdf2+0xd6>
c0028431:	89 d0                	mov    eax,edx
c0028433:	c1 f8 1f             	sar    eax,0x1f
c0028436:	83 c8 01             	or     eax,0x1
c0028439:	eb 10                	jmp    c002844b <__cmpdf2+0xe6>
c002843b:	b8 00 00 00 00       	mov    eax,0x0
c0028440:	73 09                	jae    c002844b <__cmpdf2+0xe6>
c0028442:	89 d0                	mov    eax,edx
c0028444:	c1 f8 1f             	sar    eax,0x1f
c0028447:	83 e0 02             	and    eax,0x2
c002844a:	48                   	dec    eax
c002844b:	83 c4 0c             	add    esp,0xc
c002844e:	5b                   	pop    ebx
c002844f:	5e                   	pop    esi
c0028450:	5f                   	pop    edi
c0028451:	5d                   	pop    ebp
c0028452:	c3                   	ret    

c0028453 <__eqdf2>:
c0028453:	55                   	push   ebp
c0028454:	89 e5                	mov    ebp,esp
c0028456:	50                   	push   eax
c0028457:	6a 01                	push   0x1
c0028459:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002845c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002845f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028462:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028465:	e8 fb fe ff ff       	call   c0028365 <__cmpdf2>
c002846a:	83 c4 18             	add    esp,0x18
c002846d:	c9                   	leave  
c002846e:	c3                   	ret    

c002846f <__nedf2>:
c002846f:	eb e2                	jmp    c0028453 <__eqdf2>

c0028471 <__gtdf2>:
c0028471:	55                   	push   ebp
c0028472:	89 e5                	mov    ebp,esp
c0028474:	50                   	push   eax
c0028475:	6a ff                	push   0xffffffff
c0028477:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002847a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002847d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028480:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028483:	e8 dd fe ff ff       	call   c0028365 <__cmpdf2>
c0028488:	83 c4 18             	add    esp,0x18
c002848b:	c9                   	leave  
c002848c:	c3                   	ret    

c002848d <__gedf2>:
c002848d:	eb e2                	jmp    c0028471 <__gtdf2>

c002848f <__ltdf2>:
c002848f:	eb c2                	jmp    c0028453 <__eqdf2>

c0028491 <__ledf2>:
c0028491:	eb c0                	jmp    c0028453 <__eqdf2>

c0028493 <__truncdfsf2>:
c0028493:	55                   	push   ebp
c0028494:	89 e5                	mov    ebp,esp
c0028496:	57                   	push   edi
c0028497:	56                   	push   esi
c0028498:	53                   	push   ebx
c0028499:	83 ec 0c             	sub    esp,0xc
c002849c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002849f:	89 d1                	mov    ecx,edx
c00284a1:	c1 f9 14             	sar    ecx,0x14
c00284a4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00284a7:	89 df                	mov    edi,ebx
c00284a9:	c1 e7 0b             	shl    edi,0xb
c00284ac:	89 d0                	mov    eax,edx
c00284ae:	c1 e0 0b             	shl    eax,0xb
c00284b1:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00284b6:	c1 eb 15             	shr    ebx,0x15
c00284b9:	09 d8                	or     eax,ebx
c00284bb:	89 cb                	mov    ebx,ecx
c00284bd:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00284c3:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00284c9:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00284cf:	0f 86 9e 00 00 00    	jbe    c0028573 <__truncdfsf2+0xe0>
c00284d5:	85 db                	test   ebx,ebx
c00284d7:	75 0a                	jne    c00284e3 <__truncdfsf2+0x50>
c00284d9:	c1 fa 17             	sar    edx,0x17
c00284dc:	30 d2                	xor    dl,dl
c00284de:	e9 84 00 00 00       	jmp    c0028567 <__truncdfsf2+0xd4>
c00284e3:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c00284e9:	83 fe 83             	cmp    esi,0xffffff83
c00284ec:	7d 4b                	jge    c0028539 <__truncdfsf2+0xa6>
c00284ee:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00284f3:	29 f1                	sub    ecx,esi
c00284f5:	83 f9 1f             	cmp    ecx,0x1f
c00284f8:	7f 6b                	jg     c0028565 <__truncdfsf2+0xd2>
c00284fa:	0d 00 00 00 80       	or     eax,0x80000000
c00284ff:	89 c3                	mov    ebx,eax
c0028501:	d3 eb                	shr    ebx,cl
c0028503:	be 01 00 00 00       	mov    esi,0x1
c0028508:	d3 e6                	shl    esi,cl
c002850a:	4e                   	dec    esi
c002850b:	21 f0                	and    eax,esi
c002850d:	09 f8                	or     eax,edi
c002850f:	0f 95 c0             	setne  al
c0028512:	0f b6 c0             	movzx  eax,al
c0028515:	09 c3                	or     ebx,eax
c0028517:	89 d9                	mov    ecx,ebx
c0028519:	c1 e9 08             	shr    ecx,0x8
c002851c:	f6 c3 7f             	test   bl,0x7f
c002851f:	0f 95 c0             	setne  al
c0028522:	09 c8                	or     eax,ecx
c0028524:	83 e0 01             	and    eax,0x1
c0028527:	c1 eb 07             	shr    ebx,0x7
c002852a:	21 c3                	and    ebx,eax
c002852c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028532:	09 d1                	or     ecx,edx
c0028534:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028537:	eb 76                	jmp    c00285af <__truncdfsf2+0x11c>
c0028539:	83 c6 80             	add    esi,0xffffff80
c002853c:	7e 1d                	jle    c002855b <__truncdfsf2+0xc8>
c002853e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028544:	75 0b                	jne    c0028551 <__truncdfsf2+0xbe>
c0028546:	09 f8                	or     eax,edi
c0028548:	74 09                	je     c0028553 <__truncdfsf2+0xc0>
c002854a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002854f:	eb 02                	jmp    c0028553 <__truncdfsf2+0xc0>
c0028551:	31 c0                	xor    eax,eax
c0028553:	c1 fa 17             	sar    edx,0x17
c0028556:	80 ca ff             	or     dl,0xff
c0028559:	eb 0e                	jmp    c0028569 <__truncdfsf2+0xd6>
c002855b:	c1 fa 1f             	sar    edx,0x1f
c002855e:	c1 e2 08             	shl    edx,0x8
c0028561:	09 ca                	or     edx,ecx
c0028563:	eb 04                	jmp    c0028569 <__truncdfsf2+0xd6>
c0028565:	31 d2                	xor    edx,edx
c0028567:	31 c0                	xor    eax,eax
c0028569:	c1 e2 17             	shl    edx,0x17
c002856c:	c1 e8 08             	shr    eax,0x8
c002856f:	09 d0                	or     eax,edx
c0028571:	eb 3c                	jmp    c00285af <__truncdfsf2+0x11c>
c0028573:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028579:	89 ca                	mov    edx,ecx
c002857b:	c1 fa 0b             	sar    edx,0xb
c002857e:	c1 e2 08             	shl    edx,0x8
c0028581:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028584:	31 db                	xor    ebx,ebx
c0028586:	85 ff                	test   edi,edi
c0028588:	0f 95 c3             	setne  bl
c002858b:	09 d8                	or     eax,ebx
c002858d:	89 c3                	mov    ebx,eax
c002858f:	c1 eb 08             	shr    ebx,0x8
c0028592:	a8 7f                	test   al,0x7f
c0028594:	0f 95 c2             	setne  dl
c0028597:	89 d6                	mov    esi,edx
c0028599:	09 de                	or     esi,ebx
c002859b:	83 e6 01             	and    esi,0x1
c002859e:	c1 e8 07             	shr    eax,0x7
c00285a1:	21 f0                	and    eax,esi
c00285a3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00285a6:	09 ca                	or     edx,ecx
c00285a8:	c1 e2 17             	shl    edx,0x17
c00285ab:	09 da                	or     edx,ebx
c00285ad:	01 d0                	add    eax,edx
c00285af:	83 c4 0c             	add    esp,0xc
c00285b2:	5b                   	pop    ebx
c00285b3:	5e                   	pop    esi
c00285b4:	5f                   	pop    edi
c00285b5:	5d                   	pop    ebp
c00285b6:	c3                   	ret    

c00285b7 <__extendsfdf2>:
c00285b7:	55                   	push   ebp
c00285b8:	89 e5                	mov    ebp,esp
c00285ba:	57                   	push   edi
c00285bb:	56                   	push   esi
c00285bc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00285bf:	89 d1                	mov    ecx,edx
c00285c1:	c1 f9 17             	sar    ecx,0x17
c00285c4:	c1 e2 08             	shl    edx,0x8
c00285c7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00285cd:	89 c8                	mov    eax,ecx
c00285cf:	80 e4 f8             	and    ah,0xf8
c00285d2:	8d 71 01             	lea    esi,[ecx+0x1]
c00285d5:	81 e6 fe 00 00 00    	and    esi,0xfe
c00285db:	75 27                	jne    c0028604 <__extendsfdf2+0x4d>
c00285dd:	81 e1 ff 00 00 00    	and    ecx,0xff
c00285e3:	75 18                	jne    c00285fd <__extendsfdf2+0x46>
c00285e5:	85 d2                	test   edx,edx
c00285e7:	74 20                	je     c0028609 <__extendsfdf2+0x52>
c00285e9:	41                   	inc    ecx
c00285ea:	01 d2                	add    edx,edx
c00285ec:	79 fb                	jns    c00285e9 <__extendsfdf2+0x32>
c00285ee:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00285f4:	29 c8                	sub    eax,ecx
c00285f6:	05 81 03 00 00       	add    eax,0x381
c00285fb:	eb 0c                	jmp    c0028609 <__extendsfdf2+0x52>
c00285fd:	05 00 07 00 00       	add    eax,0x700
c0028602:	eb 05                	jmp    c0028609 <__extendsfdf2+0x52>
c0028604:	05 80 03 00 00       	add    eax,0x380
c0028609:	c1 e0 14             	shl    eax,0x14
c002860c:	89 c1                	mov    ecx,eax
c002860e:	89 d0                	mov    eax,edx
c0028610:	c1 e8 0b             	shr    eax,0xb
c0028613:	09 c1                	or     ecx,eax
c0028615:	c1 e2 15             	shl    edx,0x15
c0028618:	89 d0                	mov    eax,edx
c002861a:	89 ca                	mov    edx,ecx
c002861c:	5e                   	pop    esi
c002861d:	5f                   	pop    edi
c002861e:	5d                   	pop    ebp
c002861f:	c3                   	ret    

c0028620 <fabs>:
c0028620:	83 ec 0c             	sub    esp,0xc
c0028623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028627:	89 04 24             	mov    DWORD PTR [esp],eax
c002862a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002862e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028633:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028637:	dd 04 24             	fld    QWORD PTR [esp]
c002863a:	83 c4 0c             	add    esp,0xc
c002863d:	c3                   	ret    
c002863e:	66 90                	xchg   ax,ax

c0028640 <lrint>:
c0028640:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028644:	83 ec 04             	sub    esp,0x4
c0028647:	db 1c 24             	fistp  DWORD PTR [esp]
c002864a:	58                   	pop    eax
c002864b:	c3                   	ret    

c002864c <lrintf>:
c002864c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028650:	83 ec 04             	sub    esp,0x4
c0028653:	db 1c 24             	fistp  DWORD PTR [esp]
c0028656:	58                   	pop    eax
c0028657:	c3                   	ret    

Disassembly of section .init:

c0028658 <_init>:
c0028658:	55                   	push   ebp
c0028659:	89 e5                	mov    ebp,esp
c002865b:	e8 b8 7a fd ff       	call   c0000118 <frame_dummy>
c0028660:	e8 63 e0 ff ff       	call   c00266c8 <__do_global_ctors_aux>
c0028665:	5d                   	pop    ebp
c0028666:	c3                   	ret    

Disassembly of section .fini:

c0028667 <_fini>:
c0028667:	55                   	push   ebp
c0028668:	89 e5                	mov    ebp,esp
c002866a:	e8 39 7a fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002866f:	5d                   	pop    ebp
c0028670:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028672 <Computer::~Computer()>:
c0028672:	83 ec 0c             	sub    esp,0xc
c0028675:	ba a8 a1 02 c0       	mov    edx,0xc002a1a8
c002867a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002867e:	89 10                	mov    DWORD PTR [eax],edx
c0028680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028684:	83 ec 0c             	sub    esp,0xc
c0028687:	50                   	push   eax
c0028688:	e8 87 bb fe ff       	call   c0014214 <Device::~Device()>
c002868d:	83 c4 10             	add    esp,0x10
c0028690:	90                   	nop
c0028691:	83 c4 0c             	add    esp,0xc
c0028694:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028696 <Computer::~Computer()>:
c0028696:	83 ec 0c             	sub    esp,0xc
c0028699:	83 ec 0c             	sub    esp,0xc
c002869c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286a0:	e8 cd ff ff ff       	call   c0028672 <Computer::~Computer()>
c00286a5:	83 c4 10             	add    esp,0x10
c00286a8:	83 ec 08             	sub    esp,0x8
c00286ab:	68 ec 01 00 00       	push   0x1ec
c00286b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286b4:	e8 83 a7 fe ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c00286b9:	83 c4 10             	add    esp,0x10
c00286bc:	83 c4 0c             	add    esp,0xc
c00286bf:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00286c0 <idleCommon()>:
c00286c0:	83 ec 0c             	sub    esp,0xc
c00286c3:	e8 1a 57 ff ff       	call   c001dde2 <lockScheduler()>
c00286c8:	e8 51 5a ff ff       	call   c001e11e <schedule()>
c00286cd:	83 c4 0c             	add    esp,0xc
c00286d0:	e9 0f 57 ff ff       	jmp    c001dde4 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00286d6 <LinkedList<UnixFile>::~LinkedList()>:
c00286d6:	90                   	nop
c00286d7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00286d8 <LinkedList<UnixFile>::LinkedList()>:
c00286d8:	83 ec 0c             	sub    esp,0xc
c00286db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00286e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00286f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286f4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00286fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028705:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028709:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028714:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002871b:	83 ec 0c             	sub    esp,0xc
c002871e:	68 7a a4 02 c0       	push   0xc002a47a
c0028723:	e8 f4 a7 fe ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0028728:	83 c4 10             	add    esp,0x10
c002872b:	90                   	nop
c002872c:	83 c4 0c             	add    esp,0xc
c002872f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028730 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028730:	83 ec 0c             	sub    esp,0xc
c0028733:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028738:	75 10                	jne    c002874a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002873a:	83 ec 0c             	sub    esp,0xc
c002873d:	68 94 a4 02 c0       	push   0xc002a494
c0028742:	e8 76 1e ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c0028747:	83 c4 10             	add    esp,0x10
c002874a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002874e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028750:	85 c0                	test   eax,eax
c0028752:	74 34                	je     c0028788 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028754:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028758:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002875b:	85 c0                	test   eax,eax
c002875d:	74 29                	je     c0028788 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002875f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028763:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028766:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002876a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002876d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028771:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028775:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002877c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002877f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028786:	eb 65                	jmp    c00287ed <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002878c:	8b 00                	mov    eax,DWORD PTR [eax]
c002878e:	85 c0                	test   eax,eax
c0028790:	75 4b                	jne    c00287dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028796:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028799:	85 c0                	test   eax,eax
c002879b:	75 40                	jne    c00287dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002879d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287a5:	89 10                	mov    DWORD PTR [eax],edx
c00287a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00287b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287b9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287c7:	85 c0                	test   eax,eax
c00287c9:	74 22                	je     c00287ed <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00287cb:	83 ec 0c             	sub    esp,0xc
c00287ce:	68 b6 a4 02 c0       	push   0xc002a4b6
c00287d3:	e8 e5 1d ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c00287d8:	83 c4 10             	add    esp,0x10
c00287db:	eb 10                	jmp    c00287ed <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00287dd:	83 ec 0c             	sub    esp,0xc
c00287e0:	68 c0 a4 02 c0       	push   0xc002a4c0
c00287e5:	e8 d3 1d ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c00287ea:	83 c4 10             	add    esp,0x10
c00287ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287f4:	8d 50 01             	lea    edx,[eax+0x1]
c00287f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287fb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00287fe:	90                   	nop
c00287ff:	83 c4 0c             	add    esp,0xc
c0028802:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028804 <LinkedList<UnixFile>::getFirstElement()>:
c0028804:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028808:	8b 00                	mov    eax,DWORD PTR [eax]
c002880a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002880c <LinkedList<UnixFile>::removeFirst()>:
c002880c:	83 ec 0c             	sub    esp,0xc
c002880f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028813:	8b 00                	mov    eax,DWORD PTR [eax]
c0028815:	85 c0                	test   eax,eax
c0028817:	75 12                	jne    c002882b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028819:	83 ec 0c             	sub    esp,0xc
c002881c:	68 cc a4 02 c0       	push   0xc002a4cc
c0028821:	e8 97 1d ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c0028826:	83 c4 10             	add    esp,0x10
c0028829:	eb 7e                	jmp    c00288a9 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002882b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002882f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028832:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028835:	85 c0                	test   eax,eax
c0028837:	74 10                	je     c0028849 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028839:	83 ec 0c             	sub    esp,0xc
c002883c:	68 17 a5 02 c0       	push   0xc002a517
c0028841:	e8 77 1d ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c0028846:	83 c4 10             	add    esp,0x10
c0028849:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002884d:	8b 00                	mov    eax,DWORD PTR [eax]
c002884f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028852:	85 c0                	test   eax,eax
c0028854:	75 33                	jne    c0028889 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002885a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028864:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002886b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002886f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028872:	83 f8 01             	cmp    eax,0x1
c0028875:	74 21                	je     c0028898 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028877:	83 ec 0c             	sub    esp,0xc
c002887a:	68 f0 a4 02 c0       	push   0xc002a4f0
c002887f:	e8 39 1d ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c0028884:	83 c4 10             	add    esp,0x10
c0028887:	eb 0f                	jmp    c0028898 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002888d:	8b 00                	mov    eax,DWORD PTR [eax]
c002888f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028896:	89 10                	mov    DWORD PTR [eax],edx
c0028898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002889c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002889f:	8d 50 ff             	lea    edx,[eax-0x1]
c00288a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288a6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00288a9:	83 c4 0c             	add    esp,0xc
c00288ac:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00288ae <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00288ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00288b2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288b5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00288b6 <DriverlessDevice::~DriverlessDevice()>:
c00288b6:	ba c4 ad 02 c0       	mov    edx,0xc002adc4
c00288bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288bf:	89 10                	mov    DWORD PTR [eax],edx
c00288c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288c5:	50                   	push   eax
c00288c6:	e8 49 b9 fe ff       	call   c0014214 <Device::~Device()>
c00288cb:	83 c4 04             	add    esp,0x4
c00288ce:	90                   	nop
c00288cf:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00288d0 <DriverlessDevice::~DriverlessDevice()>:
c00288d0:	83 ec 0c             	sub    esp,0xc
c00288d3:	83 ec 0c             	sub    esp,0xc
c00288d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288da:	e8 d7 ff ff ff       	call   c00288b6 <DriverlessDevice::~DriverlessDevice()>
c00288df:	83 c4 10             	add    esp,0x10
c00288e2:	83 ec 08             	sub    esp,0x8
c00288e5:	68 58 01 00 00       	push   0x158
c00288ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288ee:	e8 49 a5 fe ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c00288f3:	83 c4 10             	add    esp,0x10
c00288f6:	83 c4 0c             	add    esp,0xc
c00288f9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00288fa <LinkedList<Device>::addElement(Device*)>:
c00288fa:	83 ec 0c             	sub    esp,0xc
c00288fd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028902:	75 10                	jne    c0028914 <LinkedList<Device>::addElement(Device*)+0x1a>
c0028904:	83 ec 0c             	sub    esp,0xc
c0028907:	68 94 a4 02 c0       	push   0xc002a494
c002890c:	e8 ac 1c ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c0028911:	83 c4 10             	add    esp,0x10
c0028914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028918:	8b 00                	mov    eax,DWORD PTR [eax]
c002891a:	85 c0                	test   eax,eax
c002891c:	74 3a                	je     c0028958 <LinkedList<Device>::addElement(Device*)+0x5e>
c002891e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028922:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028925:	85 c0                	test   eax,eax
c0028927:	74 2f                	je     c0028958 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028929:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002892d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028930:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028934:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002893a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002893e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028942:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028949:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002894c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028956:	eb 68                	jmp    c00289c0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002895c:	8b 00                	mov    eax,DWORD PTR [eax]
c002895e:	85 c0                	test   eax,eax
c0028960:	75 4e                	jne    c00289b0 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028966:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028969:	85 c0                	test   eax,eax
c002896b:	75 43                	jne    c00289b0 <LinkedList<Device>::addElement(Device*)+0xb6>
c002896d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028971:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028975:	89 10                	mov    DWORD PTR [eax],edx
c0028977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002897b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002897f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028986:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028989:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028997:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002899a:	85 c0                	test   eax,eax
c002899c:	74 22                	je     c00289c0 <LinkedList<Device>::addElement(Device*)+0xc6>
c002899e:	83 ec 0c             	sub    esp,0xc
c00289a1:	68 b6 a4 02 c0       	push   0xc002a4b6
c00289a6:	e8 12 1c ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c00289ab:	83 c4 10             	add    esp,0x10
c00289ae:	eb 10                	jmp    c00289c0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00289b0:	83 ec 0c             	sub    esp,0xc
c00289b3:	68 c0 a4 02 c0       	push   0xc002a4c0
c00289b8:	e8 00 1c ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c00289bd:	83 c4 10             	add    esp,0x10
c00289c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289c7:	8d 50 01             	lea    edx,[eax+0x1]
c00289ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ce:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00289d1:	90                   	nop
c00289d2:	83 c4 0c             	add    esp,0xc
c00289d5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00289d6 <LinkedList<Device>::LinkedList()>:
c00289d6:	83 ec 0c             	sub    esp,0xc
c00289d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289dd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00289f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289fd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a07:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a12:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a19:	83 ec 0c             	sub    esp,0xc
c0028a1c:	68 7a a4 02 c0       	push   0xc002a47a
c0028a21:	e8 f6 a4 fe ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0028a26:	83 c4 10             	add    esp,0x10
c0028a29:	90                   	nop
c0028a2a:	83 c4 0c             	add    esp,0xc
c0028a2d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028a2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028a2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a32:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a34:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028a36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028a36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a3c:	85 c0                	test   eax,eax
c0028a3e:	75 0e                	jne    c0028a4e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028a40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a47:	85 c0                	test   eax,eax
c0028a49:	75 03                	jne    c0028a4e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028a4b:	b0 01                	mov    al,0x1
c0028a4d:	c3                   	ret    
c0028a4e:	b0 00                	mov    al,0x0
c0028a50:	90                   	nop
c0028a51:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028a52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028a52:	83 ec 0c             	sub    esp,0xc
c0028a55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a59:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a5b:	85 c0                	test   eax,eax
c0028a5d:	75 15                	jne    c0028a74 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028a5f:	83 ec 0c             	sub    esp,0xc
c0028a62:	68 cc a4 02 c0       	push   0xc002a4cc
c0028a67:	e8 51 1b ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c0028a6c:	83 c4 10             	add    esp,0x10
c0028a6f:	e9 88 00 00 00       	jmp    c0028afc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028a74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a7b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028a7e:	85 c0                	test   eax,eax
c0028a80:	0f 95 c0             	setne  al
c0028a83:	84 c0                	test   al,al
c0028a85:	74 10                	je     c0028a97 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028a87:	83 ec 0c             	sub    esp,0xc
c0028a8a:	68 17 a5 02 c0       	push   0xc002a517
c0028a8f:	e8 29 1b ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c0028a94:	83 c4 10             	add    esp,0x10
c0028a97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a9d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028aa0:	85 c0                	test   eax,eax
c0028aa2:	0f 94 c0             	sete   al
c0028aa5:	84 c0                	test   al,al
c0028aa7:	74 33                	je     c0028adc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028aa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ab7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028abe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ac5:	83 f8 01             	cmp    eax,0x1
c0028ac8:	74 21                	je     c0028aeb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028aca:	83 ec 0c             	sub    esp,0xc
c0028acd:	68 f0 a4 02 c0       	push   0xc002a4f0
c0028ad2:	e8 e6 1a ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c0028ad7:	83 c4 10             	add    esp,0x10
c0028ada:	eb 0f                	jmp    c0028aeb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae0:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ae2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028ae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae9:	89 10                	mov    DWORD PTR [eax],edx
c0028aeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028af2:	8d 50 ff             	lea    edx,[eax-0x1]
c0028af5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028af9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028afc:	83 c4 0c             	add    esp,0xc
c0028aff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028b00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028b00:	83 ec 0c             	sub    esp,0xc
c0028b03:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028b08:	75 10                	jne    c0028b1a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028b0a:	83 ec 0c             	sub    esp,0xc
c0028b0d:	68 94 a4 02 c0       	push   0xc002a494
c0028b12:	e8 a6 1a ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c0028b17:	83 c4 10             	add    esp,0x10
c0028b1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b20:	85 c0                	test   eax,eax
c0028b22:	74 34                	je     c0028b58 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028b24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b2b:	85 c0                	test   eax,eax
c0028b2d:	74 29                	je     c0028b58 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028b2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b33:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b36:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b3a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028b3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b41:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b45:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b4f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b56:	eb 65                	jmp    c0028bbd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b5e:	85 c0                	test   eax,eax
c0028b60:	75 4b                	jne    c0028bad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b69:	85 c0                	test   eax,eax
c0028b6b:	75 40                	jne    c0028bad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028b6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b71:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b75:	89 10                	mov    DWORD PTR [eax],edx
c0028b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b7b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b7f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b89:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b94:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b97:	85 c0                	test   eax,eax
c0028b99:	74 22                	je     c0028bbd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b9b:	83 ec 0c             	sub    esp,0xc
c0028b9e:	68 b6 a4 02 c0       	push   0xc002a4b6
c0028ba3:	e8 15 1a ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c0028ba8:	83 c4 10             	add    esp,0x10
c0028bab:	eb 10                	jmp    c0028bbd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028bad:	83 ec 0c             	sub    esp,0xc
c0028bb0:	68 c0 a4 02 c0       	push   0xc002a4c0
c0028bb5:	e8 03 1a ff ff       	call   c001a5bd <Krnl::panic(char const*)>
c0028bba:	83 c4 10             	add    esp,0x10
c0028bbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028bc4:	8d 50 01             	lea    edx,[eax+0x1]
c0028bc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bcb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028bce:	90                   	nop
c0028bcf:	83 c4 0c             	add    esp,0xc
c0028bd2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028bd4 <ACPI::~ACPI()>:
c0028bd4:	83 ec 0c             	sub    esp,0xc
c0028bd7:	ba 0c b7 02 c0       	mov    edx,0xc002b70c
c0028bdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028be0:	89 10                	mov    DWORD PTR [eax],edx
c0028be2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028be6:	83 ec 0c             	sub    esp,0xc
c0028be9:	50                   	push   eax
c0028bea:	e8 25 b6 fe ff       	call   c0014214 <Device::~Device()>
c0028bef:	83 c4 10             	add    esp,0x10
c0028bf2:	90                   	nop
c0028bf3:	83 c4 0c             	add    esp,0xc
c0028bf6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028bf8 <ACPI::~ACPI()>:
c0028bf8:	83 ec 0c             	sub    esp,0xc
c0028bfb:	83 ec 0c             	sub    esp,0xc
c0028bfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c02:	e8 cd ff ff ff       	call   c0028bd4 <ACPI::~ACPI()>
c0028c07:	83 c4 10             	add    esp,0x10
c0028c0a:	83 ec 08             	sub    esp,0x8
c0028c0d:	68 68 12 00 00       	push   0x1268
c0028c12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c16:	e8 21 a2 fe ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c0028c1b:	83 c4 10             	add    esp,0x10
c0028c1e:	83 c4 0c             	add    esp,0xc
c0028c21:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028c22 <CPU::~CPU()>:
c0028c22:	83 ec 0c             	sub    esp,0xc
c0028c25:	ba fc ba 02 c0       	mov    edx,0xc002bafc
c0028c2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c2e:	89 10                	mov    DWORD PTR [eax],edx
c0028c30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c34:	83 ec 0c             	sub    esp,0xc
c0028c37:	50                   	push   eax
c0028c38:	e8 d7 b5 fe ff       	call   c0014214 <Device::~Device()>
c0028c3d:	83 c4 10             	add    esp,0x10
c0028c40:	90                   	nop
c0028c41:	83 c4 0c             	add    esp,0xc
c0028c44:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028c46 <CPU::~CPU()>:
c0028c46:	83 ec 0c             	sub    esp,0xc
c0028c49:	83 ec 0c             	sub    esp,0xc
c0028c4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c50:	e8 cd ff ff ff       	call   c0028c22 <CPU::~CPU()>
c0028c55:	83 c4 10             	add    esp,0x10
c0028c58:	83 ec 08             	sub    esp,0x8
c0028c5b:	68 98 11 00 00       	push   0x1198
c0028c60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c64:	e8 d3 a1 fe ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c0028c69:	83 c4 10             	add    esp,0x10
c0028c6c:	83 c4 0c             	add    esp,0xc
c0028c6f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028c70 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028c70:	90                   	nop
c0028c71:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028c72 <ThreadControlBlock::ThreadControlBlock()>:
c0028c72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c76:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c81:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c8c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028c93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c97:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028c9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ca2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028ca6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028caa:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028cae:	90                   	nop
c0028caf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028cb0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028cb0:	83 ec 0c             	sub    esp,0xc
c0028cb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cb7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028cbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cc1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ccc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cd7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cec:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028cf3:	83 ec 0c             	sub    esp,0xc
c0028cf6:	68 7a a4 02 c0       	push   0xc002a47a
c0028cfb:	e8 1c a2 fe ff       	call   c0012f1c <Dbg::kprintf(char const*, ...)>
c0028d00:	83 c4 10             	add    esp,0x10
c0028d03:	90                   	nop
c0028d04:	83 c4 0c             	add    esp,0xc
c0028d07:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028d08 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028d08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028d0c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028d0f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028d10 <Vm::_FPUState::_FPUState()>:
c0028d10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d14:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028d1b:	90                   	nop
c0028d1c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028d1e <PCI::~PCI()>:
c0028d1e:	83 ec 0c             	sub    esp,0xc
c0028d21:	ba f0 cb 02 c0       	mov    edx,0xc002cbf0
c0028d26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d2a:	89 10                	mov    DWORD PTR [eax],edx
c0028d2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d30:	83 ec 0c             	sub    esp,0xc
c0028d33:	50                   	push   eax
c0028d34:	e8 b3 ae fe ff       	call   c0013bec <Bus::~Bus()>
c0028d39:	83 c4 10             	add    esp,0x10
c0028d3c:	90                   	nop
c0028d3d:	83 c4 0c             	add    esp,0xc
c0028d40:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028d42 <PCI::~PCI()>:
c0028d42:	83 ec 0c             	sub    esp,0xc
c0028d45:	83 ec 0c             	sub    esp,0xc
c0028d48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d4c:	e8 cd ff ff ff       	call   c0028d1e <PCI::~PCI()>
c0028d51:	83 c4 10             	add    esp,0x10
c0028d54:	83 ec 08             	sub    esp,0x8
c0028d57:	68 58 01 00 00       	push   0x158
c0028d5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d60:	e8 d7 a0 fe ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c0028d65:	83 c4 10             	add    esp,0x10
c0028d68:	83 c4 0c             	add    esp,0xc
c0028d6b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028d6c <IDE::~IDE()>:
c0028d6c:	83 ec 0c             	sub    esp,0xc
c0028d6f:	ba 54 ce 02 c0       	mov    edx,0xc002ce54
c0028d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d78:	89 10                	mov    DWORD PTR [eax],edx
c0028d7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d7e:	83 ec 0c             	sub    esp,0xc
c0028d81:	50                   	push   eax
c0028d82:	e8 7d b9 fe ff       	call   c0014704 <HardDiskController::~HardDiskController()>
c0028d87:	83 c4 10             	add    esp,0x10
c0028d8a:	90                   	nop
c0028d8b:	83 c4 0c             	add    esp,0xc
c0028d8e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028d90 <IDE::~IDE()>:
c0028d90:	83 ec 0c             	sub    esp,0xc
c0028d93:	83 ec 0c             	sub    esp,0xc
c0028d96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d9a:	e8 cd ff ff ff       	call   c0028d6c <IDE::~IDE()>
c0028d9f:	83 c4 10             	add    esp,0x10
c0028da2:	83 ec 08             	sub    esp,0x8
c0028da5:	68 70 02 00 00       	push   0x270
c0028daa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dae:	e8 89 a0 fe ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c0028db3:	83 c4 10             	add    esp,0x10
c0028db6:	83 c4 0c             	add    esp,0xc
c0028db9:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028dba <SATABus::~SATABus()>:
c0028dba:	83 ec 0c             	sub    esp,0xc
c0028dbd:	ba 34 cf 02 c0       	mov    edx,0xc002cf34
c0028dc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dc6:	89 10                	mov    DWORD PTR [eax],edx
c0028dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dcc:	83 ec 0c             	sub    esp,0xc
c0028dcf:	50                   	push   eax
c0028dd0:	e8 2f b9 fe ff       	call   c0014704 <HardDiskController::~HardDiskController()>
c0028dd5:	83 c4 10             	add    esp,0x10
c0028dd8:	90                   	nop
c0028dd9:	83 c4 0c             	add    esp,0xc
c0028ddc:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028dde <SATABus::~SATABus()>:
c0028dde:	83 ec 0c             	sub    esp,0xc
c0028de1:	83 ec 0c             	sub    esp,0xc
c0028de4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028de8:	e8 cd ff ff ff       	call   c0028dba <SATABus::~SATABus()>
c0028ded:	83 c4 10             	add    esp,0x10
c0028df0:	83 ec 08             	sub    esp,0x8
c0028df3:	68 64 01 00 00       	push   0x164
c0028df8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dfc:	e8 3b a0 fe ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c0028e01:	83 c4 10             	add    esp,0x10
c0028e04:	83 c4 0c             	add    esp,0xc
c0028e07:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028e08 <ATA::~ATA()>:
c0028e08:	83 ec 0c             	sub    esp,0xc
c0028e0b:	ba 80 cf 02 c0       	mov    edx,0xc002cf80
c0028e10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e14:	89 10                	mov    DWORD PTR [eax],edx
c0028e16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e1a:	83 ec 0c             	sub    esp,0xc
c0028e1d:	50                   	push   eax
c0028e1e:	e8 d3 b9 fe ff       	call   c00147f6 <PhysicalDisk::~PhysicalDisk()>
c0028e23:	83 c4 10             	add    esp,0x10
c0028e26:	90                   	nop
c0028e27:	83 c4 0c             	add    esp,0xc
c0028e2a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028e2c <ATA::~ATA()>:
c0028e2c:	83 ec 0c             	sub    esp,0xc
c0028e2f:	83 ec 0c             	sub    esp,0xc
c0028e32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e36:	e8 cd ff ff ff       	call   c0028e08 <ATA::~ATA()>
c0028e3b:	83 c4 10             	add    esp,0x10
c0028e3e:	83 ec 08             	sub    esp,0x8
c0028e41:	68 7c 01 00 00       	push   0x17c
c0028e46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e4a:	e8 ed 9f fe ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c0028e4f:	83 c4 10             	add    esp,0x10
c0028e52:	83 c4 0c             	add    esp,0xc
c0028e55:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028e56 <ATAPI::~ATAPI()>:
c0028e56:	83 ec 0c             	sub    esp,0xc
c0028e59:	ba b8 cf 02 c0       	mov    edx,0xc002cfb8
c0028e5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e62:	89 10                	mov    DWORD PTR [eax],edx
c0028e64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e68:	83 ec 0c             	sub    esp,0xc
c0028e6b:	50                   	push   eax
c0028e6c:	e8 85 b9 fe ff       	call   c00147f6 <PhysicalDisk::~PhysicalDisk()>
c0028e71:	83 c4 10             	add    esp,0x10
c0028e74:	90                   	nop
c0028e75:	83 c4 0c             	add    esp,0xc
c0028e78:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028e7a <ATAPI::~ATAPI()>:
c0028e7a:	83 ec 0c             	sub    esp,0xc
c0028e7d:	83 ec 0c             	sub    esp,0xc
c0028e80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e84:	e8 cd ff ff ff       	call   c0028e56 <ATAPI::~ATAPI()>
c0028e89:	83 c4 10             	add    esp,0x10
c0028e8c:	83 ec 08             	sub    esp,0x8
c0028e8f:	68 80 01 00 00       	push   0x180
c0028e94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e98:	e8 9f 9f fe ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c0028e9d:	83 c4 10             	add    esp,0x10
c0028ea0:	83 c4 0c             	add    esp,0xc
c0028ea3:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028ea4 <SATA::~SATA()>:
c0028ea4:	83 ec 0c             	sub    esp,0xc
c0028ea7:	ba 6c d0 02 c0       	mov    edx,0xc002d06c
c0028eac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eb0:	89 10                	mov    DWORD PTR [eax],edx
c0028eb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eb6:	83 ec 0c             	sub    esp,0xc
c0028eb9:	50                   	push   eax
c0028eba:	e8 37 b9 fe ff       	call   c00147f6 <PhysicalDisk::~PhysicalDisk()>
c0028ebf:	83 c4 10             	add    esp,0x10
c0028ec2:	90                   	nop
c0028ec3:	83 c4 0c             	add    esp,0xc
c0028ec6:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028ec8 <SATA::~SATA()>:
c0028ec8:	83 ec 0c             	sub    esp,0xc
c0028ecb:	83 ec 0c             	sub    esp,0xc
c0028ece:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ed2:	e8 cd ff ff ff       	call   c0028ea4 <SATA::~SATA()>
c0028ed7:	83 c4 10             	add    esp,0x10
c0028eda:	83 ec 08             	sub    esp,0x8
c0028edd:	68 7c 01 00 00       	push   0x17c
c0028ee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ee6:	e8 51 9f fe ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c0028eeb:	83 c4 10             	add    esp,0x10
c0028eee:	83 c4 0c             	add    esp,0xc
c0028ef1:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028ef2 <SATAPI::~SATAPI()>:
c0028ef2:	83 ec 0c             	sub    esp,0xc
c0028ef5:	ba 48 d1 02 c0       	mov    edx,0xc002d148
c0028efa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028efe:	89 10                	mov    DWORD PTR [eax],edx
c0028f00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f04:	83 ec 0c             	sub    esp,0xc
c0028f07:	50                   	push   eax
c0028f08:	e8 e9 b8 fe ff       	call   c00147f6 <PhysicalDisk::~PhysicalDisk()>
c0028f0d:	83 c4 10             	add    esp,0x10
c0028f10:	90                   	nop
c0028f11:	83 c4 0c             	add    esp,0xc
c0028f14:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028f16 <SATAPI::~SATAPI()>:
c0028f16:	83 ec 0c             	sub    esp,0xc
c0028f19:	83 ec 0c             	sub    esp,0xc
c0028f1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f20:	e8 cd ff ff ff       	call   c0028ef2 <SATAPI::~SATAPI()>
c0028f25:	83 c4 10             	add    esp,0x10
c0028f28:	83 ec 08             	sub    esp,0x8
c0028f2b:	68 80 01 00 00       	push   0x180
c0028f30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f34:	e8 03 9f fe ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c0028f39:	83 c4 10             	add    esp,0x10
c0028f3c:	83 c4 0c             	add    esp,0xc
c0028f3f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028f40 <AVX::~AVX()>:
c0028f40:	83 ec 0c             	sub    esp,0xc
c0028f43:	ba 88 d1 02 c0       	mov    edx,0xc002d188
c0028f48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f4c:	89 10                	mov    DWORD PTR [eax],edx
c0028f4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f52:	83 ec 0c             	sub    esp,0xc
c0028f55:	50                   	push   eax
c0028f56:	e8 1f b9 fe ff       	call   c001487a <FPU::~FPU()>
c0028f5b:	83 c4 10             	add    esp,0x10
c0028f5e:	90                   	nop
c0028f5f:	83 c4 0c             	add    esp,0xc
c0028f62:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028f64 <AVX::~AVX()>:
c0028f64:	83 ec 0c             	sub    esp,0xc
c0028f67:	83 ec 0c             	sub    esp,0xc
c0028f6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f6e:	e8 cd ff ff ff       	call   c0028f40 <AVX::~AVX()>
c0028f73:	83 c4 10             	add    esp,0x10
c0028f76:	83 ec 08             	sub    esp,0x8
c0028f79:	68 58 01 00 00       	push   0x158
c0028f7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f82:	e8 b5 9e fe ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c0028f87:	83 c4 10             	add    esp,0x10
c0028f8a:	83 c4 0c             	add    esp,0xc
c0028f8d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028f8e <MMX::~MMX()>:
c0028f8e:	83 ec 0c             	sub    esp,0xc
c0028f91:	ba c8 d1 02 c0       	mov    edx,0xc002d1c8
c0028f96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f9a:	89 10                	mov    DWORD PTR [eax],edx
c0028f9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fa0:	83 ec 0c             	sub    esp,0xc
c0028fa3:	50                   	push   eax
c0028fa4:	e8 d1 b8 fe ff       	call   c001487a <FPU::~FPU()>
c0028fa9:	83 c4 10             	add    esp,0x10
c0028fac:	90                   	nop
c0028fad:	83 c4 0c             	add    esp,0xc
c0028fb0:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028fb2 <MMX::~MMX()>:
c0028fb2:	83 ec 0c             	sub    esp,0xc
c0028fb5:	83 ec 0c             	sub    esp,0xc
c0028fb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fbc:	e8 cd ff ff ff       	call   c0028f8e <MMX::~MMX()>
c0028fc1:	83 c4 10             	add    esp,0x10
c0028fc4:	83 ec 08             	sub    esp,0x8
c0028fc7:	68 58 01 00 00       	push   0x158
c0028fcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fd0:	e8 67 9e fe ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c0028fd5:	83 c4 10             	add    esp,0x10
c0028fd8:	83 c4 0c             	add    esp,0xc
c0028fdb:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028fdc <SSE::~SSE()>:
c0028fdc:	83 ec 0c             	sub    esp,0xc
c0028fdf:	ba 08 d2 02 c0       	mov    edx,0xc002d208
c0028fe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fe8:	89 10                	mov    DWORD PTR [eax],edx
c0028fea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fee:	83 ec 0c             	sub    esp,0xc
c0028ff1:	50                   	push   eax
c0028ff2:	e8 83 b8 fe ff       	call   c001487a <FPU::~FPU()>
c0028ff7:	83 c4 10             	add    esp,0x10
c0028ffa:	90                   	nop
c0028ffb:	83 c4 0c             	add    esp,0xc
c0028ffe:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0029000 <SSE::~SSE()>:
c0029000:	83 ec 0c             	sub    esp,0xc
c0029003:	83 ec 0c             	sub    esp,0xc
c0029006:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002900a:	e8 cd ff ff ff       	call   c0028fdc <SSE::~SSE()>
c002900f:	83 c4 10             	add    esp,0x10
c0029012:	83 ec 08             	sub    esp,0x8
c0029015:	68 58 01 00 00       	push   0x158
c002901a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002901e:	e8 19 9e fe ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c0029023:	83 c4 10             	add    esp,0x10
c0029026:	83 c4 0c             	add    esp,0xc
c0029029:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c002902a <x87::~x87()>:
c002902a:	83 ec 0c             	sub    esp,0xc
c002902d:	ba 48 d2 02 c0       	mov    edx,0xc002d248
c0029032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029036:	89 10                	mov    DWORD PTR [eax],edx
c0029038:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002903c:	83 ec 0c             	sub    esp,0xc
c002903f:	50                   	push   eax
c0029040:	e8 35 b8 fe ff       	call   c001487a <FPU::~FPU()>
c0029045:	83 c4 10             	add    esp,0x10
c0029048:	90                   	nop
c0029049:	83 c4 0c             	add    esp,0xc
c002904c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002904e <x87::~x87()>:
c002904e:	83 ec 0c             	sub    esp,0xc
c0029051:	83 ec 0c             	sub    esp,0xc
c0029054:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029058:	e8 cd ff ff ff       	call   c002902a <x87::~x87()>
c002905d:	83 c4 10             	add    esp,0x10
c0029060:	83 ec 08             	sub    esp,0x8
c0029063:	68 58 01 00 00       	push   0x158
c0029068:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002906c:	e8 cb 9d fe ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c0029071:	83 c4 10             	add    esp,0x10
c0029074:	83 c4 0c             	add    esp,0xc
c0029077:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029078 <IOAPIC::~IOAPIC()>:
c0029078:	83 ec 0c             	sub    esp,0xc
c002907b:	ba a0 d3 02 c0       	mov    edx,0xc002d3a0
c0029080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029084:	89 10                	mov    DWORD PTR [eax],edx
c0029086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002908a:	83 ec 0c             	sub    esp,0xc
c002908d:	50                   	push   eax
c002908e:	e8 81 b1 fe ff       	call   c0014214 <Device::~Device()>
c0029093:	83 c4 10             	add    esp,0x10
c0029096:	90                   	nop
c0029097:	83 c4 0c             	add    esp,0xc
c002909a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002909c <IOAPIC::~IOAPIC()>:
c002909c:	83 ec 0c             	sub    esp,0xc
c002909f:	83 ec 0c             	sub    esp,0xc
c00290a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290a6:	e8 cd ff ff ff       	call   c0029078 <IOAPIC::~IOAPIC()>
c00290ab:	83 c4 10             	add    esp,0x10
c00290ae:	83 ec 08             	sub    esp,0x8
c00290b1:	68 68 01 00 00       	push   0x168
c00290b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290ba:	e8 7d 9d fe ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c00290bf:	83 c4 10             	add    esp,0x10
c00290c2:	83 c4 0c             	add    esp,0xc
c00290c5:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00290c6 <APIC::~APIC()>:
c00290c6:	83 ec 0c             	sub    esp,0xc
c00290c9:	ba 58 d3 02 c0       	mov    edx,0xc002d358
c00290ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290d2:	89 10                	mov    DWORD PTR [eax],edx
c00290d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290d8:	83 ec 0c             	sub    esp,0xc
c00290db:	50                   	push   eax
c00290dc:	e8 63 bc fe ff       	call   c0014d44 <InterruptController::~InterruptController()>
c00290e1:	83 c4 10             	add    esp,0x10
c00290e4:	90                   	nop
c00290e5:	83 c4 0c             	add    esp,0xc
c00290e8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00290ea <APIC::~APIC()>:
c00290ea:	83 ec 0c             	sub    esp,0xc
c00290ed:	83 ec 0c             	sub    esp,0xc
c00290f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290f4:	e8 cd ff ff ff       	call   c00290c6 <APIC::~APIC()>
c00290f9:	83 c4 10             	add    esp,0x10
c00290fc:	83 ec 08             	sub    esp,0x8
c00290ff:	68 58 21 00 00       	push   0x2158
c0029104:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029108:	e8 2f 9d fe ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c002910d:	83 c4 10             	add    esp,0x10
c0029110:	83 c4 0c             	add    esp,0xc
c0029113:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029114 <PIC::~PIC()>:
c0029114:	83 ec 0c             	sub    esp,0xc
c0029117:	ba f0 d3 02 c0       	mov    edx,0xc002d3f0
c002911c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029120:	89 10                	mov    DWORD PTR [eax],edx
c0029122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029126:	83 ec 0c             	sub    esp,0xc
c0029129:	50                   	push   eax
c002912a:	e8 15 bc fe ff       	call   c0014d44 <InterruptController::~InterruptController()>
c002912f:	83 c4 10             	add    esp,0x10
c0029132:	90                   	nop
c0029133:	83 c4 0c             	add    esp,0xc
c0029136:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029138 <PIC::~PIC()>:
c0029138:	83 ec 0c             	sub    esp,0xc
c002913b:	83 ec 0c             	sub    esp,0xc
c002913e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029142:	e8 cd ff ff ff       	call   c0029114 <PIC::~PIC()>
c0029147:	83 c4 10             	add    esp,0x10
c002914a:	83 ec 08             	sub    esp,0x8
c002914d:	68 58 21 00 00       	push   0x2158
c0029152:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029156:	e8 e1 9c fe ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c002915b:	83 c4 10             	add    esp,0x10
c002915e:	83 c4 0c             	add    esp,0xc
c0029161:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029162 <APICTimer::~APICTimer()>:
c0029162:	83 ec 0c             	sub    esp,0xc
c0029165:	ba 44 d4 02 c0       	mov    edx,0xc002d444
c002916a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002916e:	89 10                	mov    DWORD PTR [eax],edx
c0029170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029174:	83 ec 0c             	sub    esp,0xc
c0029177:	50                   	push   eax
c0029178:	e8 13 db fe ff       	call   c0016c90 <Timer::~Timer()>
c002917d:	83 c4 10             	add    esp,0x10
c0029180:	90                   	nop
c0029181:	83 c4 0c             	add    esp,0xc
c0029184:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029186 <APICTimer::~APICTimer()>:
c0029186:	83 ec 0c             	sub    esp,0xc
c0029189:	83 ec 0c             	sub    esp,0xc
c002918c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029190:	e8 cd ff ff ff       	call   c0029162 <APICTimer::~APICTimer()>
c0029195:	83 c4 10             	add    esp,0x10
c0029198:	83 ec 08             	sub    esp,0x8
c002919b:	68 60 01 00 00       	push   0x160
c00291a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291a4:	e8 93 9c fe ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c00291a9:	83 c4 10             	add    esp,0x10
c00291ac:	83 c4 0c             	add    esp,0xc
c00291af:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00291b0 <PIT::~PIT()>:
c00291b0:	83 ec 0c             	sub    esp,0xc
c00291b3:	ba 94 d4 02 c0       	mov    edx,0xc002d494
c00291b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291bc:	89 10                	mov    DWORD PTR [eax],edx
c00291be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291c2:	83 ec 0c             	sub    esp,0xc
c00291c5:	50                   	push   eax
c00291c6:	e8 c5 da fe ff       	call   c0016c90 <Timer::~Timer()>
c00291cb:	83 c4 10             	add    esp,0x10
c00291ce:	90                   	nop
c00291cf:	83 c4 0c             	add    esp,0xc
c00291d2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00291d4 <PIT::~PIT()>:
c00291d4:	83 ec 0c             	sub    esp,0xc
c00291d7:	83 ec 0c             	sub    esp,0xc
c00291da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291de:	e8 cd ff ff ff       	call   c00291b0 <PIT::~PIT()>
c00291e3:	83 c4 10             	add    esp,0x10
c00291e6:	83 ec 08             	sub    esp,0x8
c00291e9:	68 5c 01 00 00       	push   0x15c
c00291ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291f2:	e8 45 9c fe ff       	call   c0012e3c <operator delete(void*, unsigned long)>
c00291f7:	83 c4 10             	add    esp,0x10
c00291fa:	83 c4 0c             	add    esp,0xc
c00291fd:	c3                   	ret    
