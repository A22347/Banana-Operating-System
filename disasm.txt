
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 c3 6b 00 00       	call   c0006be3 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 b5 b6 01 00       	call   c001b6da <_init>
c0000025:	c3                   	ret    
c0000026:	bb 76 c1 01 c0       	mov    ebx,0xc001c176
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 80 c1 01 c0    	cmp    ebx,0xc001c180
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 38 ec 01 c0       	mov    eax,0xc001ec38
c0000049:	3d 38 ec 01 c0       	cmp    eax,0xc001ec38
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 38 ec 01 c0       	push   0xc001ec38
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 38 ec 01 c0       	mov    eax,0xc001ec38
c0000075:	2d 38 ec 01 c0       	sub    eax,0xc001ec38
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 38 ec 01 c0       	push   0xc001ec38
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d c0 ed 01 c0 00 	cmp    BYTE PTR ds:0xc001edc0,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 88 c1 01 c0       	mov    ebx,0xc001c188
c00000bb:	81 eb 84 c1 01 c0    	sub    ebx,0xc001c184
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 84 c1 01 c0       	mov    esi,0xc001c184
c00000ca:	a1 c4 ed 01 c0       	mov    eax,ds:0xc001edc4
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 c4 ed 01 c0       	mov    ds:0xc001edc4,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 c4 ed 01 c0       	mov    eax,ds:0xc001edc4
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 38 ec 01 c0       	push   0xc001ec38
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 c0 ed 01 c0 01 	mov    BYTE PTR ds:0xc001edc0,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 c8 ed 01 c0       	push   0xc001edc8
c000012c:	68 38 ec 01 c0       	push   0xc001ec38
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	85 d2                	test   edx,edx
c00002c6:	75 11                	jne    c00002d9 <commonThreadSwitch.firstTime>
c00002c8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002cb:	e8 20 1d 01 00       	call   c0011ff0 <changeTSS>
c00002d0:	5d                   	pop    ebp
c00002d1:	5f                   	pop    edi
c00002d2:	5e                   	pop    esi
c00002d3:	5a                   	pop    edx
c00002d4:	59                   	pop    ecx
c00002d5:	5b                   	pop    ebx
c00002d6:	58                   	pop    eax
c00002d7:	9d                   	popf   
c00002d8:	c3                   	ret    

c00002d9 <commonThreadSwitch.firstTime>:
c00002d9:	fa                   	cli    
c00002da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002dd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002e2:	60                   	pusha  
c00002e3:	e8 c4 93 00 00       	call   c00096ac <mapVASFirstTime>
c00002e8:	61                   	popa   
c00002e9:	89 c4                	mov    esp,eax
c00002eb:	56                   	push   esi
c00002ec:	52                   	push   edx
c00002ed:	e8 fe 1c 01 00       	call   c0011ff0 <changeTSS>
c00002f2:	5a                   	pop    edx
c00002f3:	5e                   	pop    esi
c00002f4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002fb:	5d                   	pop    ebp
c00002fc:	5f                   	pop    edi
c00002fd:	5e                   	pop    esi
c00002fe:	59                   	pop    ecx
c00002ff:	59                   	pop    ecx
c0000300:	5b                   	pop    ebx
c0000301:	58                   	pop    eax
c0000302:	81 c4 04 00 00 00    	add    esp,0x4
c0000308:	6a 02                	push   0x2
c000030a:	9d                   	popf   
c000030b:	52                   	push   edx
c000030c:	e8 cf 21 01 00       	call   c00124e0 <taskStartupFunction>
c0000311:	5a                   	pop    edx
c0000312:	50                   	push   eax
c0000313:	ff d2                	call   edx
c0000315:	e8 1e 28 01 00       	call   c0012b38 <taskReturned>
c000031a:	e9 fb ff ff ff       	jmp    c000031a <commonThreadSwitch.firstTime+0x41>

c000031f <asmQuickAcquireLock>:
c000031f:	55                   	push   ebp
c0000320:	89 e5                	mov    ebp,esp
c0000322:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000325 <asmQuickAcquireLock.retry>:
c0000325:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000032a:	72 02                	jb     c000032e <asmQuickAcquireLock.spin_with_pause>
c000032c:	fa                   	cli    
c000032d:	c3                   	ret    

c000032e <asmQuickAcquireLock.spin_with_pause>:
c000032e:	f3 90                	pause  
c0000330:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000336:	75 f6                	jne    c000032e <asmQuickAcquireLock.spin_with_pause>
c0000338:	e9 e8 ff ff ff       	jmp    c0000325 <asmQuickAcquireLock.retry>

c000033d <asmQuickReleaseLock>:
c000033d:	55                   	push   ebp
c000033e:	89 e5                	mov    ebp,esp
c0000340:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000347:	5d                   	pop    ebp
c0000348:	c3                   	ret    

c0000349 <asmAcquireLock>:
c0000349:	55                   	push   ebp
c000034a:	89 e5                	mov    ebp,esp
c000034c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000034f <asmAcquireLock.retry>:
c000034f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000354:	72 05                	jb     c000035b <asmAcquireLock.spin_with_pause>
c0000356:	9c                   	pushf  
c0000357:	58                   	pop    eax
c0000358:	fa                   	cli    
c0000359:	5d                   	pop    ebp
c000035a:	c3                   	ret    

c000035b <asmAcquireLock.spin_with_pause>:
c000035b:	f3 90                	pause  
c000035d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000363:	75 f6                	jne    c000035b <asmAcquireLock.spin_with_pause>
c0000365:	e9 e5 ff ff ff       	jmp    c000034f <asmAcquireLock.retry>

c000036a <asmReleaseLock>:
c000036a:	55                   	push   ebp
c000036b:	89 e5                	mov    ebp,esp
c000036d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000373:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000379:	52                   	push   edx
c000037a:	9d                   	popf   
c000037b:	5d                   	pop    ebp
c000037c:	c3                   	ret    

c000037d <loadGDT>:
c000037d:	0f 01 15 10 f2 01 c0 	lgdtd  ds:0xc001f210
c0000384:	66 b8 10 00          	mov    ax,0x10
c0000388:	66 8e d8             	mov    ds,ax
c000038b:	66 8e c0             	mov    es,ax
c000038e:	66 8e e0             	mov    fs,ax
c0000391:	66 8e e8             	mov    gs,ax
c0000394:	66 8e d0             	mov    ss,ax
c0000397:	e9 00 00 00 00       	jmp    c000039c <flush2>

c000039c <flush2>:
c000039c:	c3                   	ret    

c000039d <memcpy>:
c000039d:	e9 4d 58 00 00       	jmp    c0005bef <__not_memcpy>
c00003a2:	66 90                	xchg   ax,ax
c00003a4:	66 90                	xchg   ax,ax
c00003a6:	66 90                	xchg   ax,ax
c00003a8:	66 90                	xchg   ax,ax
c00003aa:	66 90                	xchg   ax,ax
c00003ac:	66 90                	xchg   ax,ax
c00003ae:	66 90                	xchg   ax,ax

c00003b0 <memcmp>:
c00003b0:	56                   	push   esi
c00003b1:	53                   	push   ebx
c00003b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00003b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00003ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00003be:	85 f6                	test   esi,esi
c00003c0:	74 1c                	je     c00003de <memcmp+0x2e>
c00003c2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003c4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003c6:	38 cb                	cmp    bl,cl
c00003c8:	75 26                	jne    c00003f0 <memcmp+0x40>
c00003ca:	01 c6                	add    esi,eax
c00003cc:	eb 0a                	jmp    c00003d8 <memcmp+0x28>
c00003ce:	66 90                	xchg   ax,ax
c00003d0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003d2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003d4:	38 d9                	cmp    cl,bl
c00003d6:	75 18                	jne    c00003f0 <memcmp+0x40>
c00003d8:	40                   	inc    eax
c00003d9:	42                   	inc    edx
c00003da:	39 f0                	cmp    eax,esi
c00003dc:	75 f2                	jne    c00003d0 <memcmp+0x20>
c00003de:	31 c0                	xor    eax,eax
c00003e0:	5b                   	pop    ebx
c00003e1:	5e                   	pop    esi
c00003e2:	c3                   	ret    
c00003e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003f0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003f6:	31 c0                	xor    eax,eax
c00003f8:	88 c8                	mov    al,cl
c00003fa:	29 d8                	sub    eax,ebx
c00003fc:	5b                   	pop    ebx
c00003fd:	5e                   	pop    esi
c00003fe:	c3                   	ret    
c00003ff:	90                   	nop

c0000400 <memmove>:
c0000400:	55                   	push   ebp
c0000401:	57                   	push   edi
c0000402:	56                   	push   esi
c0000403:	53                   	push   ebx
c0000404:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000408:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000040c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000410:	39 dd                	cmp    ebp,ebx
c0000412:	0f 83 98 00 00 00    	jae    c00004b0 <memmove+0xb0>
c0000418:	85 d2                	test   edx,edx
c000041a:	0f 84 7c 00 00 00    	je     c000049c <memmove+0x9c>
c0000420:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000423:	8d 75 04             	lea    esi,[ebp+0x4]
c0000426:	39 cd                	cmp    ebp,ecx
c0000428:	0f 93 c1             	setae  cl
c000042b:	39 f3                	cmp    ebx,esi
c000042d:	0f 93 c0             	setae  al
c0000430:	89 c6                	mov    esi,eax
c0000432:	09 ce                	or     esi,ecx
c0000434:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000437:	89 f0                	mov    eax,esi
c0000439:	83 f9 0c             	cmp    ecx,0xc
c000043c:	0f 97 c1             	seta   cl
c000043f:	84 c8                	test   al,cl
c0000441:	0f 84 89 00 00 00    	je     c00004d0 <memmove+0xd0>
c0000447:	89 e9                	mov    ecx,ebp
c0000449:	09 d9                	or     ecx,ebx
c000044b:	83 e1 03             	and    ecx,0x3
c000044e:	0f 85 7c 00 00 00    	jne    c00004d0 <memmove+0xd0>
c0000454:	89 d7                	mov    edi,edx
c0000456:	89 d9                	mov    ecx,ebx
c0000458:	83 e7 fc             	and    edi,0xfffffffc
c000045b:	89 ee                	mov    esi,ebp
c000045d:	01 df                	add    edi,ebx
c000045f:	90                   	nop
c0000460:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000462:	83 c6 04             	add    esi,0x4
c0000465:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000468:	83 c1 04             	add    ecx,0x4
c000046b:	39 f9                	cmp    ecx,edi
c000046d:	75 f1                	jne    c0000460 <memmove+0x60>
c000046f:	89 d1                	mov    ecx,edx
c0000471:	89 d7                	mov    edi,edx
c0000473:	83 e1 fc             	and    ecx,0xfffffffc
c0000476:	29 cf                	sub    edi,ecx
c0000478:	01 cb                	add    ebx,ecx
c000047a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000047e:	39 ca                	cmp    edx,ecx
c0000480:	74 1a                	je     c000049c <memmove+0x9c>
c0000482:	8a 03                	mov    al,BYTE PTR [ebx]
c0000484:	83 ff 01             	cmp    edi,0x1
c0000487:	88 06                	mov    BYTE PTR [esi],al
c0000489:	74 11                	je     c000049c <memmove+0x9c>
c000048b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000048e:	83 ff 02             	cmp    edi,0x2
c0000491:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000494:	74 06                	je     c000049c <memmove+0x9c>
c0000496:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000499:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000049c:	5b                   	pop    ebx
c000049d:	89 e8                	mov    eax,ebp
c000049f:	5e                   	pop    esi
c00004a0:	5f                   	pop    edi
c00004a1:	5d                   	pop    ebp
c00004a2:	c3                   	ret    
c00004a3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004b0:	76 ea                	jbe    c000049c <memmove+0x9c>
c00004b2:	85 d2                	test   edx,edx
c00004b4:	74 e6                	je     c000049c <memmove+0x9c>
c00004b6:	4b                   	dec    ebx
c00004b7:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00004ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004c0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004c3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004c6:	4a                   	dec    edx
c00004c7:	75 f7                	jne    c00004c0 <memmove+0xc0>
c00004c9:	5b                   	pop    ebx
c00004ca:	89 e8                	mov    eax,ebp
c00004cc:	5e                   	pop    esi
c00004cd:	5f                   	pop    edi
c00004ce:	5d                   	pop    ebp
c00004cf:	c3                   	ret    
c00004d0:	01 ea                	add    edx,ebp
c00004d2:	89 e9                	mov    ecx,ebp
c00004d4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004da:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004e0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004e2:	41                   	inc    ecx
c00004e3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004e6:	43                   	inc    ebx
c00004e7:	39 d1                	cmp    ecx,edx
c00004e9:	75 f5                	jne    c00004e0 <memmove+0xe0>
c00004eb:	eb af                	jmp    c000049c <memmove+0x9c>
c00004ed:	8d 76 00             	lea    esi,[esi+0x0]

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	53                   	push   ebx
c00004f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004fa:	85 d2                	test   edx,edx
c00004fc:	74 1f                	je     c000051d <memset+0x2d>
c00004fe:	31 c0                	xor    eax,eax
c0000500:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0000504:	88 c4                	mov    ah,al
c0000506:	89 c1                	mov    ecx,eax
c0000508:	c1 e1 10             	shl    ecx,0x10
c000050b:	09 c8                	or     eax,ecx
c000050d:	83 fa 04             	cmp    edx,0x4
c0000510:	73 1e                	jae    c0000530 <memset+0x40>
c0000512:	85 d2                	test   edx,edx
c0000514:	74 07                	je     c000051d <memset+0x2d>
c0000516:	88 03                	mov    BYTE PTR [ebx],al
c0000518:	f6 c2 02             	test   dl,0x2
c000051b:	75 30                	jne    c000054d <memset+0x5d>
c000051d:	89 d8                	mov    eax,ebx
c000051f:	5b                   	pop    ebx
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	89 03                	mov    DWORD PTR [ebx],eax
c0000532:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000535:	89 d9                	mov    ecx,ebx
c0000537:	83 e7 fc             	and    edi,0xfffffffc
c000053a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000053e:	29 f9                	sub    ecx,edi
c0000540:	01 d1                	add    ecx,edx
c0000542:	c1 e9 02             	shr    ecx,0x2
c0000545:	fc                   	cld    
c0000546:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000548:	89 d8                	mov    eax,ebx
c000054a:	5b                   	pop    ebx
c000054b:	5f                   	pop    edi
c000054c:	c3                   	ret    
c000054d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000552:	eb c9                	jmp    c000051d <memset+0x2d>
c0000554:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000055a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000560 <strlen>:
c0000560:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000564:	31 c0                	xor    eax,eax
c0000566:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000569:	74 15                	je     c0000580 <strlen+0x20>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000570:	40                   	inc    eax
c0000571:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000575:	75 f9                	jne    c0000570 <strlen+0x10>
c0000577:	c3                   	ret    
c0000578:	90                   	nop
c0000579:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000580:	c3                   	ret    
c0000581:	eb 0d                	jmp    c0000590 <strpbrk>
c0000583:	90                   	nop
c0000584:	90                   	nop
c0000585:	90                   	nop
c0000586:	90                   	nop
c0000587:	90                   	nop
c0000588:	90                   	nop
c0000589:	90                   	nop
c000058a:	90                   	nop
c000058b:	90                   	nop
c000058c:	90                   	nop
c000058d:	90                   	nop
c000058e:	90                   	nop
c000058f:	90                   	nop

c0000590 <strpbrk>:
c0000590:	57                   	push   edi
c0000591:	56                   	push   esi
c0000592:	53                   	push   ebx
c0000593:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000597:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000059b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059d:	84 db                	test   bl,bl
c000059f:	74 21                	je     c00005c2 <strpbrk+0x32>
c00005a1:	8a 07                	mov    al,BYTE PTR [edi]
c00005a3:	84 c0                	test   al,al
c00005a5:	74 14                	je     c00005bb <strpbrk+0x2b>
c00005a7:	38 d8                	cmp    al,bl
c00005a9:	74 19                	je     c00005c4 <strpbrk+0x34>
c00005ab:	89 fa                	mov    edx,edi
c00005ad:	eb 05                	jmp    c00005b4 <strpbrk+0x24>
c00005af:	90                   	nop
c00005b0:	38 d9                	cmp    cl,bl
c00005b2:	74 10                	je     c00005c4 <strpbrk+0x34>
c00005b4:	42                   	inc    edx
c00005b5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00005b7:	84 c9                	test   cl,cl
c00005b9:	75 f5                	jne    c00005b0 <strpbrk+0x20>
c00005bb:	46                   	inc    esi
c00005bc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00005be:	84 db                	test   bl,bl
c00005c0:	75 e1                	jne    c00005a3 <strpbrk+0x13>
c00005c2:	31 f6                	xor    esi,esi
c00005c4:	89 f0                	mov    eax,esi
c00005c6:	5b                   	pop    ebx
c00005c7:	5e                   	pop    esi
c00005c8:	5f                   	pop    edi
c00005c9:	c3                   	ret    
c00005ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005d0 <strtok>:
c00005d0:	56                   	push   esi
c00005d1:	53                   	push   ebx
c00005d2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005d6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005da:	85 db                	test   ebx,ebx
c00005dc:	75 07                	jne    c00005e5 <strtok+0x15>
c00005de:	eb 30                	jmp    c0000610 <strtok+0x40>
c00005e0:	43                   	inc    ebx
c00005e1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005e5:	56                   	push   esi
c00005e6:	53                   	push   ebx
c00005e7:	e8 a4 ff ff ff       	call   c0000590 <strpbrk>
c00005ec:	5a                   	pop    edx
c00005ed:	a3 e0 ed 01 c0       	mov    ds:0xc001ede0,eax
c00005f2:	59                   	pop    ecx
c00005f3:	39 d8                	cmp    eax,ebx
c00005f5:	74 e9                	je     c00005e0 <strtok+0x10>
c00005f7:	85 c0                	test   eax,eax
c00005f9:	74 1f                	je     c000061a <strtok+0x4a>
c00005fb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005fe:	8d 50 01             	lea    edx,[eax+0x1]
c0000601:	89 d8                	mov    eax,ebx
c0000603:	89 15 e0 ed 01 c0    	mov    DWORD PTR ds:0xc001ede0,edx
c0000609:	5b                   	pop    ebx
c000060a:	5e                   	pop    esi
c000060b:	c3                   	ret    
c000060c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000610:	8b 1d e0 ed 01 c0    	mov    ebx,DWORD PTR ds:0xc001ede0
c0000616:	85 db                	test   ebx,ebx
c0000618:	75 cb                	jne    c00005e5 <strtok+0x15>
c000061a:	31 c0                	xor    eax,eax
c000061c:	5b                   	pop    ebx
c000061d:	5e                   	pop    esi
c000061e:	c3                   	ret    
c000061f:	90                   	nop

c0000620 <strcpy>:
c0000620:	53                   	push   ebx
c0000621:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000625:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000629:	89 c3                	mov    ebx,eax
c000062b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000062d:	84 d2                	test   dl,dl
c000062f:	74 19                	je     c000064a <strcpy+0x2a>
c0000631:	eb 0d                	jmp    c0000640 <strcpy+0x20>
c0000633:	90                   	nop
c0000634:	90                   	nop
c0000635:	90                   	nop
c0000636:	90                   	nop
c0000637:	90                   	nop
c0000638:	90                   	nop
c0000639:	90                   	nop
c000063a:	90                   	nop
c000063b:	90                   	nop
c000063c:	90                   	nop
c000063d:	90                   	nop
c000063e:	90                   	nop
c000063f:	90                   	nop
c0000640:	88 13                	mov    BYTE PTR [ebx],dl
c0000642:	41                   	inc    ecx
c0000643:	43                   	inc    ebx
c0000644:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000646:	84 d2                	test   dl,dl
c0000648:	75 f6                	jne    c0000640 <strcpy+0x20>
c000064a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000064d:	5b                   	pop    ebx
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strncpy>:
c0000650:	57                   	push   edi
c0000651:	56                   	push   esi
c0000652:	53                   	push   ebx
c0000653:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000657:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000065f:	85 ff                	test   edi,edi
c0000661:	74 3e                	je     c00006a1 <strncpy+0x51>
c0000663:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000665:	8d 47 ff             	lea    eax,[edi-0x1]
c0000668:	8d 4a 01             	lea    ecx,[edx+0x1]
c000066b:	88 1a                	mov    BYTE PTR [edx],bl
c000066d:	84 db                	test   bl,bl
c000066f:	74 3f                	je     c00006b0 <strncpy+0x60>
c0000671:	85 c0                	test   eax,eax
c0000673:	74 2c                	je     c00006a1 <strncpy+0x51>
c0000675:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000678:	8d 47 fe             	lea    eax,[edi-0x2]
c000067b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000067e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000681:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000684:	84 db                	test   bl,bl
c0000686:	75 15                	jne    c000069d <strncpy+0x4d>
c0000688:	eb 26                	jmp    c00006b0 <strncpy+0x60>
c000068a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000690:	47                   	inc    edi
c0000691:	41                   	inc    ecx
c0000692:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000695:	48                   	dec    eax
c0000696:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000699:	84 db                	test   bl,bl
c000069b:	74 13                	je     c00006b0 <strncpy+0x60>
c000069d:	85 c0                	test   eax,eax
c000069f:	75 ef                	jne    c0000690 <strncpy+0x40>
c00006a1:	5b                   	pop    ebx
c00006a2:	89 d0                	mov    eax,edx
c00006a4:	5e                   	pop    esi
c00006a5:	5f                   	pop    edi
c00006a6:	c3                   	ret    
c00006a7:	89 f6                	mov    esi,esi
c00006a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00006b0:	85 c0                	test   eax,eax
c00006b2:	74 ed                	je     c00006a1 <strncpy+0x51>
c00006b4:	83 f8 04             	cmp    eax,0x4
c00006b7:	73 17                	jae    c00006d0 <strncpy+0x80>
c00006b9:	85 c0                	test   eax,eax
c00006bb:	74 e4                	je     c00006a1 <strncpy+0x51>
c00006bd:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006c0:	a8 02                	test   al,0x2
c00006c2:	74 dd                	je     c00006a1 <strncpy+0x51>
c00006c4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006cb:	eb d4                	jmp    c00006a1 <strncpy+0x51>
c00006cd:	8d 76 00             	lea    esi,[esi+0x0]
c00006d0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006d6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006d9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006e1:	83 e7 fc             	and    edi,0xfffffffc
c00006e4:	29 f9                	sub    ecx,edi
c00006e6:	01 c1                	add    ecx,eax
c00006e8:	c1 e9 02             	shr    ecx,0x2
c00006eb:	fc                   	cld    
c00006ec:	31 c0                	xor    eax,eax
c00006ee:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006f0:	89 d0                	mov    eax,edx
c00006f2:	5b                   	pop    ebx
c00006f3:	5e                   	pop    esi
c00006f4:	5f                   	pop    edi
c00006f5:	c3                   	ret    
c00006f6:	8d 76 00             	lea    esi,[esi+0x0]
c00006f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000700 <strcmp>:
c0000700:	56                   	push   esi
c0000701:	53                   	push   ebx
c0000702:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000706:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000070a:	8a 16                	mov    dl,BYTE PTR [esi]
c000070c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000070e:	38 d1                	cmp    cl,dl
c0000710:	75 1d                	jne    c000072f <strcmp+0x2f>
c0000712:	84 c9                	test   cl,cl
c0000714:	74 2a                	je     c0000740 <strcmp+0x40>
c0000716:	b8 01 00 00 00       	mov    eax,0x1
c000071b:	eb 08                	jmp    c0000725 <strcmp+0x25>
c000071d:	8d 76 00             	lea    esi,[esi+0x0]
c0000720:	40                   	inc    eax
c0000721:	84 d2                	test   dl,dl
c0000723:	74 1b                	je     c0000740 <strcmp+0x40>
c0000725:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000728:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000072b:	38 ca                	cmp    dl,cl
c000072d:	74 f1                	je     c0000720 <strcmp+0x20>
c000072f:	31 c0                	xor    eax,eax
c0000731:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000737:	88 d0                	mov    al,dl
c0000739:	5b                   	pop    ebx
c000073a:	29 c8                	sub    eax,ecx
c000073c:	5e                   	pop    esi
c000073d:	c3                   	ret    
c000073e:	66 90                	xchg   ax,ax
c0000740:	31 c0                	xor    eax,eax
c0000742:	5b                   	pop    ebx
c0000743:	5e                   	pop    esi
c0000744:	c3                   	ret    
c0000745:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000749:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000750 <strchr>:
c0000750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000754:	8a 10                	mov    dl,BYTE PTR [eax]
c0000756:	84 d2                	test   dl,dl
c0000758:	74 21                	je     c000077b <strchr+0x2b>
c000075a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000075e:	38 ca                	cmp    dl,cl
c0000760:	75 12                	jne    c0000774 <strchr+0x24>
c0000762:	eb 1a                	jmp    c000077e <strchr+0x2e>
c0000764:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000076a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000770:	38 ca                	cmp    dl,cl
c0000772:	74 09                	je     c000077d <strchr+0x2d>
c0000774:	40                   	inc    eax
c0000775:	8a 10                	mov    dl,BYTE PTR [eax]
c0000777:	84 d2                	test   dl,dl
c0000779:	75 f5                	jne    c0000770 <strchr+0x20>
c000077b:	31 c0                	xor    eax,eax
c000077d:	c3                   	ret    
c000077e:	c3                   	ret    
c000077f:	90                   	nop

c0000780 <strncmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	85 ff                	test   edi,edi
c0000791:	74 2f                	je     c00007c2 <strncmp+0x42>
c0000793:	8a 16                	mov    dl,BYTE PTR [esi]
c0000795:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000797:	38 d1                	cmp    cl,dl
c0000799:	75 35                	jne    c00007d0 <strncmp+0x50>
c000079b:	8d 46 01             	lea    eax,[esi+0x1]
c000079e:	84 c9                	test   cl,cl
c00007a0:	74 20                	je     c00007c2 <strncmp+0x42>
c00007a2:	01 fe                	add    esi,edi
c00007a4:	eb 17                	jmp    c00007bd <strncmp+0x3d>
c00007a6:	8d 76 00             	lea    esi,[esi+0x0]
c00007a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00007b0:	8a 10                	mov    dl,BYTE PTR [eax]
c00007b2:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00007b4:	38 ca                	cmp    dl,cl
c00007b6:	75 18                	jne    c00007d0 <strncmp+0x50>
c00007b8:	40                   	inc    eax
c00007b9:	84 d2                	test   dl,dl
c00007bb:	74 05                	je     c00007c2 <strncmp+0x42>
c00007bd:	43                   	inc    ebx
c00007be:	39 c6                	cmp    esi,eax
c00007c0:	75 ee                	jne    c00007b0 <strncmp+0x30>
c00007c2:	5b                   	pop    ebx
c00007c3:	31 c0                	xor    eax,eax
c00007c5:	5e                   	pop    esi
c00007c6:	5f                   	pop    edi
c00007c7:	c3                   	ret    
c00007c8:	90                   	nop
c00007c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d0:	5b                   	pop    ebx
c00007d1:	31 c0                	xor    eax,eax
c00007d3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007d9:	88 d0                	mov    al,dl
c00007db:	5e                   	pop    esi
c00007dc:	29 c8                	sub    eax,ecx
c00007de:	5f                   	pop    edi
c00007df:	c3                   	ret    

c00007e0 <strcat>:
c00007e0:	56                   	push   esi
c00007e1:	53                   	push   ebx
c00007e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007e6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ea:	89 c3                	mov    ebx,eax
c00007ec:	eb 04                	jmp    c00007f2 <strcat+0x12>
c00007ee:	66 90                	xchg   ax,ax
c00007f0:	89 d3                	mov    ebx,edx
c00007f2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007f5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007f9:	75 f5                	jne    c00007f0 <strcat+0x10>
c00007fb:	31 d2                	xor    edx,edx
c00007fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000800:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000803:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000806:	42                   	inc    edx
c0000807:	84 c9                	test   cl,cl
c0000809:	75 f5                	jne    c0000800 <strcat+0x20>
c000080b:	5b                   	pop    ebx
c000080c:	5e                   	pop    esi
c000080d:	c3                   	ret    
c000080e:	66 90                	xchg   ax,ax

c0000810 <strncat>:
c0000810:	56                   	push   esi
c0000811:	53                   	push   ebx
c0000812:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000081a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000081e:	85 f6                	test   esi,esi
c0000820:	74 2e                	je     c0000850 <strncat+0x40>
c0000822:	89 c2                	mov    edx,eax
c0000824:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000082a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000830:	42                   	inc    edx
c0000831:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000835:	75 f9                	jne    c0000830 <strncat+0x20>
c0000837:	01 ce                	add    esi,ecx
c0000839:	eb 0a                	jmp    c0000845 <strncat+0x35>
c000083b:	90                   	nop
c000083c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000840:	39 f1                	cmp    ecx,esi
c0000842:	74 1c                	je     c0000860 <strncat+0x50>
c0000844:	42                   	inc    edx
c0000845:	41                   	inc    ecx
c0000846:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000849:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000084c:	84 db                	test   bl,bl
c000084e:	75 f0                	jne    c0000840 <strncat+0x30>
c0000850:	5b                   	pop    ebx
c0000851:	5e                   	pop    esi
c0000852:	c3                   	ret    
c0000853:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000859:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000860:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000863:	5b                   	pop    ebx
c0000864:	5e                   	pop    esi
c0000865:	c3                   	ret    
c0000866:	8d 76 00             	lea    esi,[esi+0x0]
c0000869:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000870 <strstr>:
c0000870:	57                   	push   edi
c0000871:	56                   	push   esi
c0000872:	53                   	push   ebx
c0000873:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000877:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000087b:	57                   	push   edi
c000087c:	e8 df fc ff ff       	call   c0000560 <strlen>
c0000881:	59                   	pop    ecx
c0000882:	85 c0                	test   eax,eax
c0000884:	74 3a                	je     c00008c0 <strstr+0x50>
c0000886:	89 c6                	mov    esi,eax
c0000888:	eb 16                	jmp    c00008a0 <strstr+0x30>
c000088a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000890:	56                   	push   esi
c0000891:	57                   	push   edi
c0000892:	53                   	push   ebx
c0000893:	e8 18 fb ff ff       	call   c00003b0 <memcmp>
c0000898:	83 c4 0c             	add    esp,0xc
c000089b:	85 c0                	test   eax,eax
c000089d:	74 21                	je     c00008c0 <strstr+0x50>
c000089f:	43                   	inc    ebx
c00008a0:	53                   	push   ebx
c00008a1:	e8 ba fc ff ff       	call   c0000560 <strlen>
c00008a6:	5a                   	pop    edx
c00008a7:	39 f0                	cmp    eax,esi
c00008a9:	73 e5                	jae    c0000890 <strstr+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	31 c0                	xor    eax,eax
c00008ae:	5e                   	pop    esi
c00008af:	5f                   	pop    edi
c00008b0:	c3                   	ret    
c00008b1:	eb 0d                	jmp    c00008c0 <strstr+0x50>
c00008b3:	90                   	nop
c00008b4:	90                   	nop
c00008b5:	90                   	nop
c00008b6:	90                   	nop
c00008b7:	90                   	nop
c00008b8:	90                   	nop
c00008b9:	90                   	nop
c00008ba:	90                   	nop
c00008bb:	90                   	nop
c00008bc:	90                   	nop
c00008bd:	90                   	nop
c00008be:	90                   	nop
c00008bf:	90                   	nop
c00008c0:	89 d8                	mov    eax,ebx
c00008c2:	5b                   	pop    ebx
c00008c3:	5e                   	pop    esi
c00008c4:	5f                   	pop    edi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <toupper>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 a0 c1 01 c0 02 	test   BYTE PTR [edx-0x3ffe3e60],0x2
c00008df:	74 03                	je     c00008e4 <toupper+0x14>
c00008e1:	83 e8 20             	sub    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <tolower>:
c00008f0:	31 d2                	xor    edx,edx
c00008f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008f6:	88 c2                	mov    dl,al
c00008f8:	f6 82 a0 c1 01 c0 01 	test   BYTE PTR [edx-0x3ffe3e60],0x1
c00008ff:	74 03                	je     c0000904 <tolower+0x14>
c0000901:	83 c0 20             	add    eax,0x20
c0000904:	c3                   	ret    
c0000905:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000909:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000910 <simple_strtoul>:
c0000910:	55                   	push   ebp
c0000911:	57                   	push   edi
c0000912:	56                   	push   esi
c0000913:	53                   	push   ebx
c0000914:	83 ec 08             	sub    esp,0x8
c0000917:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000091b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000091f:	90                   	nop
c0000920:	31 d2                	xor    edx,edx
c0000922:	8a 01                	mov    al,BYTE PTR [ecx]
c0000924:	88 c2                	mov    dl,al
c0000926:	f6 82 a0 c1 01 c0 08 	test   BYTE PTR [edx-0x3ffe3e60],0x8
c000092d:	75 04                	jne    c0000933 <simple_strtoul+0x23>
c000092f:	3c 09                	cmp    al,0x9
c0000931:	75 0d                	jne    c0000940 <simple_strtoul+0x30>
c0000933:	41                   	inc    ecx
c0000934:	eb ea                	jmp    c0000920 <simple_strtoul+0x10>
c0000936:	8d 76 00             	lea    esi,[esi+0x0]
c0000939:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000940:	3c 2d                	cmp    al,0x2d
c0000942:	0f 84 48 01 00 00    	je     c0000a90 <simple_strtoul+0x180>
c0000948:	3c 2b                	cmp    al,0x2b
c000094a:	0f 84 e0 00 00 00    	je     c0000a30 <simple_strtoul+0x120>
c0000950:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000958:	85 f6                	test   esi,esi
c000095a:	0f 85 e1 00 00 00    	jne    c0000a41 <simple_strtoul+0x131>
c0000960:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000963:	80 fa 30             	cmp    dl,0x30
c0000966:	0f 84 75 01 00 00    	je     c0000ae1 <simple_strtoul+0x1d1>
c000096c:	be 0a 00 00 00       	mov    esi,0xa
c0000971:	84 d2                	test   dl,dl
c0000973:	0f 84 9f 01 00 00    	je     c0000b18 <simple_strtoul+0x208>
c0000979:	31 ed                	xor    ebp,ebp
c000097b:	31 ff                	xor    edi,edi
c000097d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000984:	eb 35                	jmp    c00009bb <simple_strtoul+0xab>
c0000986:	8d 76 00             	lea    esi,[esi+0x0]
c0000989:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000990:	83 eb 30             	sub    ebx,0x30
c0000993:	39 f3                	cmp    ebx,esi
c0000995:	73 59                	jae    c00009f0 <simple_strtoul+0xe0>
c0000997:	31 d2                	xor    edx,edx
c0000999:	89 d8                	mov    eax,ebx
c000099b:	f7 d0                	not    eax
c000099d:	f7 f6                	div    esi
c000099f:	39 f8                	cmp    eax,edi
c00009a1:	0f 82 c9 00 00 00    	jb     c0000a70 <simple_strtoul+0x160>
c00009a7:	0f af fe             	imul   edi,esi
c00009aa:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009b1:	01 df                	add    edi,ebx
c00009b3:	41                   	inc    ecx
c00009b4:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c00009b7:	84 d2                	test   dl,dl
c00009b9:	74 35                	je     c00009f0 <simple_strtoul+0xe0>
c00009bb:	31 db                	xor    ebx,ebx
c00009bd:	88 d3                	mov    bl,dl
c00009bf:	f6 83 a0 c1 01 c0 04 	test   BYTE PTR [ebx-0x3ffe3e60],0x4
c00009c6:	75 c8                	jne    c0000990 <simple_strtoul+0x80>
c00009c8:	52                   	push   edx
c00009c9:	e8 02 ff ff ff       	call   c00008d0 <toupper>
c00009ce:	31 d2                	xor    edx,edx
c00009d0:	5b                   	pop    ebx
c00009d1:	88 c2                	mov    dl,al
c00009d3:	f6 82 a0 c1 01 c0 01 	test   BYTE PTR [edx-0x3ffe3e60],0x1
c00009da:	74 14                	je     c00009f0 <simple_strtoul+0xe0>
c00009dc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009df:	39 f3                	cmp    ebx,esi
c00009e1:	72 b4                	jb     c0000997 <simple_strtoul+0x87>
c00009e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009f4:	85 c0                	test   eax,eax
c00009f6:	74 18                	je     c0000a10 <simple_strtoul+0x100>
c00009f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009fb:	09 f8                	or     eax,edi
c00009fd:	0f 85 7d 00 00 00    	jne    c0000a80 <simple_strtoul+0x170>
c0000a03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a07:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a0b:	31 ff                	xor    edi,edi
c0000a0d:	89 30                	mov    DWORD PTR [eax],esi
c0000a0f:	90                   	nop
c0000a10:	4d                   	dec    ebp
c0000a11:	75 05                	jne    c0000a18 <simple_strtoul+0x108>
c0000a13:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a18:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a1d:	75 02                	jne    c0000a21 <simple_strtoul+0x111>
c0000a1f:	f7 df                	neg    edi
c0000a21:	83 c4 08             	add    esp,0x8
c0000a24:	89 f8                	mov    eax,edi
c0000a26:	5b                   	pop    ebx
c0000a27:	5e                   	pop    esi
c0000a28:	5f                   	pop    edi
c0000a29:	5d                   	pop    ebp
c0000a2a:	c3                   	ret    
c0000a2b:	90                   	nop
c0000a2c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a30:	41                   	inc    ecx
c0000a31:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a39:	85 f6                	test   esi,esi
c0000a3b:	0f 84 1f ff ff ff    	je     c0000960 <simple_strtoul+0x50>
c0000a41:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a44:	83 f8 22             	cmp    eax,0x22
c0000a47:	77 7b                	ja     c0000ac4 <simple_strtoul+0x1b4>
c0000a49:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a4c:	83 fe 08             	cmp    esi,0x8
c0000a4f:	0f 84 b3 00 00 00    	je     c0000b08 <simple_strtoul+0x1f8>
c0000a55:	83 fe 10             	cmp    esi,0x10
c0000a58:	0f 85 13 ff ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000a5e:	80 fa 30             	cmp    dl,0x30
c0000a61:	74 3b                	je     c0000a9e <simple_strtoul+0x18e>
c0000a63:	be 10 00 00 00       	mov    esi,0x10
c0000a68:	e9 04 ff ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a70:	bd 01 00 00 00       	mov    ebp,0x1
c0000a75:	31 ff                	xor    edi,edi
c0000a77:	e9 37 ff ff ff       	jmp    c00009b3 <simple_strtoul+0xa3>
c0000a7c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a84:	89 08                	mov    DWORD PTR [eax],ecx
c0000a86:	eb 88                	jmp    c0000a10 <simple_strtoul+0x100>
c0000a88:	90                   	nop
c0000a89:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a90:	41                   	inc    ecx
c0000a91:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a99:	e9 ba fe ff ff       	jmp    c0000958 <simple_strtoul+0x48>
c0000a9e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000aa2:	88 04 24             	mov    BYTE PTR [esp],al
c0000aa5:	50                   	push   eax
c0000aa6:	e8 45 fe ff ff       	call   c00008f0 <tolower>
c0000aab:	5e                   	pop    esi
c0000aac:	83 f8 78             	cmp    eax,0x78
c0000aaf:	0f 84 88 00 00 00    	je     c0000b3d <simple_strtoul+0x22d>
c0000ab5:	41                   	inc    ecx
c0000ab6:	be 10 00 00 00       	mov    esi,0x10
c0000abb:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000abf:	e9 ad fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000ac4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ac8:	85 ff                	test   edi,edi
c0000aca:	74 5e                	je     c0000b2a <simple_strtoul+0x21a>
c0000acc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ad0:	85 c9                	test   ecx,ecx
c0000ad2:	75 50                	jne    c0000b24 <simple_strtoul+0x214>
c0000ad4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000ada:	31 ff                	xor    edi,edi
c0000adc:	e9 37 ff ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000ae1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ae5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ae8:	50                   	push   eax
c0000ae9:	e8 02 fe ff ff       	call   c00008f0 <tolower>
c0000aee:	5d                   	pop    ebp
c0000aef:	83 f8 78             	cmp    eax,0x78
c0000af2:	74 3d                	je     c0000b31 <simple_strtoul+0x221>
c0000af4:	41                   	inc    ecx
c0000af5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000af9:	80 fa 30             	cmp    dl,0x30
c0000afc:	74 13                	je     c0000b11 <simple_strtoul+0x201>
c0000afe:	be 08 00 00 00       	mov    esi,0x8
c0000b03:	e9 69 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000b08:	80 fa 30             	cmp    dl,0x30
c0000b0b:	0f 85 60 fe ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000b11:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000b15:	41                   	inc    ecx
c0000b16:	eb e6                	jmp    c0000afe <simple_strtoul+0x1ee>
c0000b18:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b1c:	85 d2                	test   edx,edx
c0000b1e:	74 0a                	je     c0000b2a <simple_strtoul+0x21a>
c0000b20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b24:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b28:	89 30                	mov    DWORD PTR [eax],esi
c0000b2a:	31 ff                	xor    edi,edi
c0000b2c:	e9 e7 fe ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000b31:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b35:	83 c1 02             	add    ecx,0x2
c0000b38:	e9 21 ff ff ff       	jmp    c0000a5e <simple_strtoul+0x14e>
c0000b3d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b41:	be 10 00 00 00       	mov    esi,0x10
c0000b46:	83 c1 02             	add    ecx,0x2
c0000b49:	e9 23 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>

c0000b4e <largebin_index>:
c0000b4e:	89 c2                	mov    edx,eax
c0000b50:	c1 ea 08             	shr    edx,0x8
c0000b53:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b59:	77 10                	ja     c0000b6b <largebin_index+0x1d>
c0000b5b:	0f bd d2             	bsr    edx,edx
c0000b5e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b61:	d3 e8                	shr    eax,cl
c0000b63:	83 e0 03             	and    eax,0x3
c0000b66:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b6a:	c3                   	ret    
c0000b6b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b70:	c3                   	ret    

c0000b71 <malloc_init_state>:
c0000b71:	53                   	push   ebx
c0000b72:	8d 50 34             	lea    edx,[eax+0x34]
c0000b75:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b7b:	89 d1                	mov    ecx,edx
c0000b7d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b80:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b83:	83 c2 08             	add    edx,0x8
c0000b86:	39 da                	cmp    edx,ebx
c0000b88:	75 f3                	jne    c0000b7d <malloc_init_state+0xc>
c0000b8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b8c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b96:	83 e2 03             	and    edx,0x3
c0000b99:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ba3:	83 ca 48             	or     edx,0x48
c0000ba6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bb0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bba:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bc1:	89 10                	mov    DWORD PTR [eax],edx
c0000bc3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bc6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bd0:	5b                   	pop    ebx
c0000bd1:	c3                   	ret    

c0000bd2 <malloc_consolidate>:
c0000bd2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bd4:	85 d2                	test   edx,edx
c0000bd6:	0f 84 d8 00 00 00    	je     c0000cb4 <malloc_consolidate+0xe2>
c0000bdc:	55                   	push   ebp
c0000bdd:	83 e2 fd             	and    edx,0xfffffffd
c0000be0:	57                   	push   edi
c0000be1:	89 c5                	mov    ebp,eax
c0000be3:	56                   	push   esi
c0000be4:	8d 78 34             	lea    edi,[eax+0x34]
c0000be7:	53                   	push   ebx
c0000be8:	83 ec 10             	sub    esp,0x10
c0000beb:	89 10                	mov    DWORD PTR [eax],edx
c0000bed:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bf1:	c1 ea 03             	shr    edx,0x3
c0000bf4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bf8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bfc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bff:	85 d2                	test   edx,edx
c0000c01:	0f 84 98 00 00 00    	je     c0000c9f <malloc_consolidate+0xcd>
c0000c07:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c0e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c11:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c14:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c18:	89 f9                	mov    ecx,edi
c0000c1a:	83 e1 fe             	and    ecx,0xfffffffe
c0000c1d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c20:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c23:	83 e3 fc             	and    ebx,0xfffffffc
c0000c26:	83 e7 01             	and    edi,0x1
c0000c29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c2c:	75 14                	jne    c0000c42 <malloc_consolidate+0x70>
c0000c2e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c30:	29 fa                	sub    edx,edi
c0000c32:	01 f9                	add    ecx,edi
c0000c34:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c37:	89 fb                	mov    ebx,edi
c0000c39:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c3c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c3f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c42:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c45:	74 40                	je     c0000c87 <malloc_consolidate+0xb5>
c0000c47:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c4a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c4d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c51:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c54:	83 e7 01             	and    edi,0x1
c0000c57:	75 0e                	jne    c0000c67 <malloc_consolidate+0x95>
c0000c59:	01 d9                	add    ecx,ebx
c0000c5b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c5e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c61:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c64:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c67:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c6a:	89 ce                	mov    esi,ecx
c0000c6c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c6f:	83 ce 01             	or     esi,0x1
c0000c72:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c75:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c78:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c7b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c7f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c82:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c85:	eb 0c                	jmp    c0000c93 <malloc_consolidate+0xc1>
c0000c87:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c8a:	83 c9 01             	or     ecx,0x1
c0000c8d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c90:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c97:	85 d2                	test   edx,edx
c0000c99:	0f 85 6f ff ff ff    	jne    c0000c0e <malloc_consolidate+0x3c>
c0000c9f:	83 c5 04             	add    ebp,0x4
c0000ca2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ca6:	0f 85 50 ff ff ff    	jne    c0000bfc <malloc_consolidate+0x2a>
c0000cac:	83 c4 10             	add    esp,0x10
c0000caf:	5b                   	pop    ebx
c0000cb0:	5e                   	pop    esi
c0000cb1:	5f                   	pop    edi
c0000cb2:	5d                   	pop    ebp
c0000cb3:	c3                   	ret    
c0000cb4:	e9 b8 fe ff ff       	jmp    c0000b71 <malloc_init_state>

c0000cb9 <dlfree>:
c0000cb9:	57                   	push   edi
c0000cba:	56                   	push   esi
c0000cbb:	53                   	push   ebx
c0000cbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000cc0:	85 db                	test   ebx,ebx
c0000cc2:	0f 84 e2 00 00 00    	je     c0000daa <dlfree+0xf1>
c0000cc8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000ccb:	8b 0d 00 ee 01 c0    	mov    ecx,DWORD PTR ds:0xc001ee00
c0000cd1:	89 f0                	mov    eax,esi
c0000cd3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cd6:	83 e0 fc             	and    eax,0xfffffffc
c0000cd9:	39 c1                	cmp    ecx,eax
c0000cdb:	72 24                	jb     c0000d01 <dlfree+0x48>
c0000cdd:	83 c9 03             	or     ecx,0x3
c0000ce0:	c1 e8 03             	shr    eax,0x3
c0000ce3:	89 0d 00 ee 01 c0    	mov    DWORD PTR ds:0xc001ee00,ecx
c0000ce9:	83 e8 02             	sub    eax,0x2
c0000cec:	8b 0c 85 04 ee 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe11fc]
c0000cf3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cf5:	89 14 85 04 ee 01 c0 	mov    DWORD PTR [eax*4-0x3ffe11fc],edx
c0000cfc:	e9 a9 00 00 00       	jmp    c0000daa <dlfree+0xf1>
c0000d01:	83 e6 02             	and    esi,0x2
c0000d04:	0f 85 a0 00 00 00    	jne    c0000daa <dlfree+0xf1>
c0000d0a:	83 c9 01             	or     ecx,0x1
c0000d0d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d10:	89 0d 00 ee 01 c0    	mov    DWORD PTR ds:0xc001ee00,ecx
c0000d16:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d19:	83 e1 fc             	and    ecx,0xfffffffc
c0000d1c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d20:	75 13                	jne    c0000d35 <dlfree+0x7c>
c0000d22:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d25:	29 da                	sub    edx,ebx
c0000d27:	01 d8                	add    eax,ebx
c0000d29:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d2c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d2f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d32:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d35:	39 35 2c ee 01 c0    	cmp    DWORD PTR ds:0xc001ee2c,esi
c0000d3b:	74 40                	je     c0000d7d <dlfree+0xc4>
c0000d3d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d41:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d44:	80 e3 01             	and    bl,0x1
c0000d47:	75 0e                	jne    c0000d57 <dlfree+0x9e>
c0000d49:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d4c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d4f:	01 c8                	add    eax,ecx
c0000d51:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d54:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d57:	8b 0d 3c ee 01 c0    	mov    ecx,DWORD PTR ds:0xc001ee3c
c0000d5d:	c7 42 0c 34 ee 01 c0 	mov    DWORD PTR [edx+0xc],0xc001ee34
c0000d64:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d67:	89 15 3c ee 01 c0    	mov    DWORD PTR ds:0xc001ee3c,edx
c0000d6d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d70:	89 c1                	mov    ecx,eax
c0000d72:	83 c9 01             	or     ecx,0x1
c0000d75:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d78:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d7b:	eb 10                	jmp    c0000d8d <dlfree+0xd4>
c0000d7d:	01 c8                	add    eax,ecx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 15 2c ee 01 c0    	mov    DWORD PTR ds:0xc001ee2c,edx
c0000d8d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d92:	76 16                	jbe    c0000daa <dlfree+0xf1>
c0000d94:	f6 05 00 ee 01 c0 02 	test   BYTE PTR ds:0xc001ee00,0x2
c0000d9b:	74 0d                	je     c0000daa <dlfree+0xf1>
c0000d9d:	5b                   	pop    ebx
c0000d9e:	b8 00 ee 01 c0       	mov    eax,0xc001ee00
c0000da3:	5e                   	pop    esi
c0000da4:	5f                   	pop    edi
c0000da5:	e9 28 fe ff ff       	jmp    c0000bd2 <malloc_consolidate>
c0000daa:	5b                   	pop    ebx
c0000dab:	5e                   	pop    esi
c0000dac:	5f                   	pop    edi
c0000dad:	c3                   	ret    

c0000dae <sYSMALLOc>:
c0000dae:	55                   	push   ebp
c0000daf:	57                   	push   edi
c0000db0:	56                   	push   esi
c0000db1:	53                   	push   ebx
c0000db2:	89 d3                	mov    ebx,edx
c0000db4:	83 ec 2c             	sub    esp,0x2c
c0000db7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dbb:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dc1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dc4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dc7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dcb:	74 1f                	je     c0000dec <sYSMALLOc+0x3e>
c0000dcd:	89 d8                	mov    eax,ebx
c0000dcf:	e8 fe fd ff ff       	call   c0000bd2 <malloc_consolidate>
c0000dd4:	83 ec 0c             	sub    esp,0xc
c0000dd7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ddb:	83 e8 07             	sub    eax,0x7
c0000dde:	50                   	push   eax
c0000ddf:	e8 30 02 00 00       	call   c0001014 <dlmalloc>
c0000de4:	83 c4 10             	add    esp,0x10
c0000de7:	e9 20 02 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000dec:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000def:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000df5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000df8:	83 e0 fc             	and    eax,0xfffffffc
c0000dfb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000dff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e03:	83 c0 10             	add    eax,0x10
c0000e06:	01 c1                	add    ecx,eax
c0000e08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e0c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e13:	74 04                	je     c0000e19 <sYSMALLOc+0x6b>
c0000e15:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e19:	f7 da                	neg    edx
c0000e1b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e1f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e23:	21 d1                	and    ecx,edx
c0000e25:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e29:	7f 07                	jg     c0000e32 <sYSMALLOc+0x84>
c0000e2b:	31 c0                	xor    eax,eax
c0000e2d:	e9 da 01 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000e32:	83 ec 0c             	sub    esp,0xc
c0000e35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e39:	e8 b6 5b 00 00       	call   c00069f4 <sbrk>
c0000e3e:	83 c4 10             	add    esp,0x10
c0000e41:	89 c6                	mov    esi,eax
c0000e43:	83 f8 ff             	cmp    eax,0xffffffff
c0000e46:	74 e3                	je     c0000e2b <sYSMALLOc+0x7d>
c0000e48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e4c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e50:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e53:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e59:	39 f1                	cmp    ecx,esi
c0000e5b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e61:	75 13                	jne    c0000e76 <sYSMALLOc+0xc8>
c0000e63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e67:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e6b:	83 c8 01             	or     eax,0x1
c0000e6e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e71:	e9 3e 01 00 00       	jmp    c0000fb4 <sYSMALLOc+0x206>
c0000e76:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e7c:	88 d0                	mov    al,dl
c0000e7e:	83 e0 01             	and    eax,0x1
c0000e81:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e86:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e8a:	0f 95 c0             	setne  al
c0000e8d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e91:	39 f1                	cmp    ecx,esi
c0000e93:	76 12                	jbe    c0000ea7 <sYSMALLOc+0xf9>
c0000e95:	84 c0                	test   al,al
c0000e97:	74 0e                	je     c0000ea7 <sYSMALLOc+0xf9>
c0000e99:	83 e2 fe             	and    edx,0xfffffffe
c0000e9c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000ea2:	e9 83 00 00 00       	jmp    c0000f2a <sYSMALLOc+0x17c>
c0000ea7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000eac:	74 7c                	je     c0000f2a <sYSMALLOc+0x17c>
c0000eae:	84 c0                	test   al,al
c0000eb0:	74 0c                	je     c0000ebe <sYSMALLOc+0x110>
c0000eb2:	89 f0                	mov    eax,esi
c0000eb4:	29 c8                	sub    eax,ecx
c0000eb6:	01 e8                	add    eax,ebp
c0000eb8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ebe:	89 f2                	mov    edx,esi
c0000ec0:	83 e2 07             	and    edx,0x7
c0000ec3:	74 0c                	je     c0000ed1 <sYSMALLOc+0x123>
c0000ec5:	b8 08 00 00 00       	mov    eax,0x8
c0000eca:	29 d0                	sub    eax,edx
c0000ecc:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ecf:	eb 04                	jmp    c0000ed5 <sYSMALLOc+0x127>
c0000ed1:	89 f5                	mov    ebp,esi
c0000ed3:	31 c0                	xor    eax,eax
c0000ed5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ed9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000edd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	83 ec 0c             	sub    esp,0xc
c0000ee6:	01 f1                	add    ecx,esi
c0000ee8:	01 ca                	add    edx,ecx
c0000eea:	29 c8                	sub    eax,ecx
c0000eec:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ef0:	01 c2                	add    edx,eax
c0000ef2:	52                   	push   edx
c0000ef3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ef7:	e8 f8 5a 00 00       	call   c00069f4 <sbrk>
c0000efc:	83 c4 10             	add    esp,0x10
c0000eff:	83 f8 ff             	cmp    eax,0xffffffff
c0000f02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f06:	75 0f                	jne    c0000f17 <sYSMALLOc+0x169>
c0000f08:	83 ec 0c             	sub    esp,0xc
c0000f0b:	6a 00                	push   0x0
c0000f0d:	e8 e2 5a 00 00       	call   c00069f4 <sbrk>
c0000f12:	83 c4 10             	add    esp,0x10
c0000f15:	eb 30                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f17:	39 c6                	cmp    esi,eax
c0000f19:	76 33                	jbe    c0000f4e <sYSMALLOc+0x1a0>
c0000f1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f1f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f26:	01 f0                	add    eax,esi
c0000f28:	eb 1d                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f2a:	83 ec 0c             	sub    esp,0xc
c0000f2d:	89 f5                	mov    ebp,esi
c0000f2f:	6a 00                	push   0x0
c0000f31:	e8 be 5a 00 00       	call   c00069f4 <sbrk>
c0000f36:	89 c2                	mov    edx,eax
c0000f38:	29 f2                	sub    edx,esi
c0000f3a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f3e:	83 c4 10             	add    esp,0x10
c0000f41:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f47:	31 d2                	xor    edx,edx
c0000f49:	83 f8 ff             	cmp    eax,0xffffffff
c0000f4c:	74 66                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f4e:	29 e8                	sub    eax,ebp
c0000f50:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f53:	01 d0                	add    eax,edx
c0000f55:	83 c8 01             	or     eax,0x1
c0000f58:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f5b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f66:	74 4c                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f6c:	83 e8 0c             	sub    eax,0xc
c0000f6f:	83 e0 f8             	and    eax,0xfffffff8
c0000f72:	89 c2                	mov    edx,eax
c0000f74:	83 ca 01             	or     edx,0x1
c0000f77:	83 f8 0f             	cmp    eax,0xf
c0000f7a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f7d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f85:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f8d:	76 25                	jbe    c0000fb4 <sYSMALLOc+0x206>
c0000f8f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f95:	83 ec 0c             	sub    esp,0xc
c0000f98:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fa2:	83 c7 08             	add    edi,0x8
c0000fa5:	57                   	push   edi
c0000fa6:	e8 0e fd ff ff       	call   c0000cb9 <dlfree>
c0000fab:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fb1:	83 c4 10             	add    esp,0x10
c0000fb4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fba:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fc0:	73 06                	jae    c0000fc8 <sYSMALLOc+0x21a>
c0000fc2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fc8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fce:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fd4:	73 06                	jae    c0000fdc <sYSMALLOc+0x22e>
c0000fd6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fdc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fdf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fe2:	83 e2 fc             	and    edx,0xfffffffc
c0000fe5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fe9:	0f 82 3c fe ff ff    	jb     c0000e2b <sYSMALLOc+0x7d>
c0000fef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ff3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ff6:	29 fa                	sub    edx,edi
c0000ff8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ffb:	83 ca 01             	or     edx,0x1
c0000ffe:	89 fb                	mov    ebx,edi
c0001000:	83 c0 08             	add    eax,0x8
c0001003:	83 cb 01             	or     ebx,0x1
c0001006:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001009:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000100c:	83 c4 2c             	add    esp,0x2c
c000100f:	5b                   	pop    ebx
c0001010:	5e                   	pop    esi
c0001011:	5f                   	pop    edi
c0001012:	5d                   	pop    ebp
c0001013:	c3                   	ret    

c0001014 <dlmalloc>:
c0001014:	55                   	push   ebp
c0001015:	57                   	push   edi
c0001016:	56                   	push   esi
c0001017:	53                   	push   ebx
c0001018:	83 ec 1c             	sub    esp,0x1c
c000101b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000101f:	83 f8 df             	cmp    eax,0xffffffdf
c0001022:	0f 87 70 03 00 00    	ja     c0001398 <dlmalloc+0x384>
c0001028:	83 c0 0b             	add    eax,0xb
c000102b:	be 10 00 00 00       	mov    esi,0x10
c0001030:	83 f8 0f             	cmp    eax,0xf
c0001033:	76 05                	jbe    c000103a <dlmalloc+0x26>
c0001035:	83 e0 f8             	and    eax,0xfffffff8
c0001038:	89 c6                	mov    esi,eax
c000103a:	8b 3d 00 ee 01 c0    	mov    edi,DWORD PTR ds:0xc001ee00
c0001040:	f7 c7 01 00 00 00    	test   edi,0x1
c0001046:	75 17                	jne    c000105f <dlmalloc+0x4b>
c0001048:	85 ff                	test   edi,edi
c000104a:	0f 85 05 03 00 00    	jne    c0001355 <dlmalloc+0x341>
c0001050:	b8 00 ee 01 c0       	mov    eax,0xc001ee00
c0001055:	e8 78 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c000105a:	e9 f6 02 00 00       	jmp    c0001355 <dlmalloc+0x341>
c000105f:	39 f7                	cmp    edi,esi
c0001061:	72 1f                	jb     c0001082 <dlmalloc+0x6e>
c0001063:	89 f2                	mov    edx,esi
c0001065:	c1 ea 03             	shr    edx,0x3
c0001068:	83 ea 02             	sub    edx,0x2
c000106b:	8b 04 95 04 ee 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe11fc]
c0001072:	85 c0                	test   eax,eax
c0001074:	74 0c                	je     c0001082 <dlmalloc+0x6e>
c0001076:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001079:	89 0c 95 04 ee 01 c0 	mov    DWORD PTR [edx*4-0x3ffe11fc],ecx
c0001080:	eb 30                	jmp    c00010b2 <dlmalloc+0x9e>
c0001082:	89 f0                	mov    eax,esi
c0001084:	81 fe ff 00 00 00    	cmp    esi,0xff
c000108a:	77 2e                	ja     c00010ba <dlmalloc+0xa6>
c000108c:	c1 e8 03             	shr    eax,0x3
c000108f:	8d 14 c5 34 ee 01 c0 	lea    edx,[eax*8-0x3ffe11cc]
c0001096:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000109a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000109d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010a0:	39 c3                	cmp    ebx,eax
c00010a2:	74 2e                	je     c00010d2 <dlmalloc+0xbe>
c00010a4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010a7:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010ac:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010af:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010b2:	83 c0 08             	add    eax,0x8
c00010b5:	e9 e0 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c00010ba:	e8 8f fa ff ff       	call   c0000b4e <largebin_index>
c00010bf:	83 e7 02             	and    edi,0x2
c00010c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010c6:	74 0a                	je     c00010d2 <dlmalloc+0xbe>
c00010c8:	b8 00 ee 01 c0       	mov    eax,0xc001ee00
c00010cd:	e8 00 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c00010d2:	8d 46 10             	lea    eax,[esi+0x10]
c00010d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010d9:	8b 1d 40 ee 01 c0    	mov    ebx,DWORD PTR ds:0xc001ee40
c00010df:	81 fb 34 ee 01 c0    	cmp    ebx,0xc001ee34
c00010e5:	0f 84 13 01 00 00    	je     c00011fe <dlmalloc+0x1ea>
c00010eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ee:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010f1:	83 e7 fc             	and    edi,0xfffffffc
c00010f4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010fa:	77 4c                	ja     c0001148 <dlmalloc+0x134>
c00010fc:	3d 34 ee 01 c0       	cmp    eax,0xc001ee34
c0001101:	75 45                	jne    c0001148 <dlmalloc+0x134>
c0001103:	39 1d 30 ee 01 c0    	cmp    DWORD PTR ds:0xc001ee30,ebx
c0001109:	75 3d                	jne    c0001148 <dlmalloc+0x134>
c000110b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000110f:	73 37                	jae    c0001148 <dlmalloc+0x134>
c0001111:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001114:	89 fa                	mov    edx,edi
c0001116:	a3 3c ee 01 c0       	mov    ds:0xc001ee3c,eax
c000111b:	a3 40 ee 01 c0       	mov    ds:0xc001ee40,eax
c0001120:	a3 30 ee 01 c0       	mov    ds:0xc001ee30,eax
c0001125:	29 f2                	sub    edx,esi
c0001127:	c7 40 08 34 ee 01 c0 	mov    DWORD PTR [eax+0x8],0xc001ee34
c000112e:	c7 40 0c 34 ee 01 c0 	mov    DWORD PTR [eax+0xc],0xc001ee34
c0001135:	83 ce 01             	or     esi,0x1
c0001138:	89 d1                	mov    ecx,edx
c000113a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000113d:	83 c9 01             	or     ecx,0x1
c0001140:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001143:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001146:	eb 15                	jmp    c000115d <dlmalloc+0x149>
c0001148:	a3 40 ee 01 c0       	mov    ds:0xc001ee40,eax
c000114d:	39 fe                	cmp    esi,edi
c000114f:	c7 40 08 34 ee 01 c0 	mov    DWORD PTR [eax+0x8],0xc001ee34
c0001156:	75 0d                	jne    c0001165 <dlmalloc+0x151>
c0001158:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000115d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001160:	e9 35 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001165:	89 f8                	mov    eax,edi
c0001167:	81 ff ff 00 00 00    	cmp    edi,0xff
c000116d:	77 19                	ja     c0001188 <dlmalloc+0x174>
c000116f:	c1 e8 03             	shr    eax,0x3
c0001172:	8d 14 00             	lea    edx,[eax+eax*1]
c0001175:	83 c2 0d             	add    edx,0xd
c0001178:	8d 2c 95 f8 ed 01 c0 	lea    ebp,[edx*4-0x3ffe1208]
c000117f:	8b 14 95 00 ee 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe1200]
c0001186:	eb 46                	jmp    c00011ce <dlmalloc+0x1ba>
c0001188:	e8 c1 f9 ff ff       	call   c0000b4e <largebin_index>
c000118d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001190:	83 c2 0d             	add    edx,0xd
c0001193:	8d 0c 95 00 ee 01 c0 	lea    ecx,[edx*4-0x3ffe1200]
c000119a:	8b 14 95 00 ee 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe1200]
c00011a1:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011a4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011a8:	89 d5                	mov    ebp,edx
c00011aa:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011ae:	74 1e                	je     c00011ce <dlmalloc+0x1ba>
c00011b0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011b3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011b6:	77 12                	ja     c00011ca <dlmalloc+0x1b6>
c00011b8:	83 cf 01             	or     edi,0x1
c00011bb:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011be:	76 05                	jbe    c00011c5 <dlmalloc+0x1b1>
c00011c0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011c3:	eb f6                	jmp    c00011bb <dlmalloc+0x1a7>
c00011c5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011c8:	eb 04                	jmp    c00011ce <dlmalloc+0x1ba>
c00011ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ce:	89 c7                	mov    edi,eax
c00011d0:	88 c1                	mov    cl,al
c00011d2:	c1 ff 05             	sar    edi,0x5
c00011d5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011d9:	bf 01 00 00 00       	mov    edi,0x1
c00011de:	d3 e7                	shl    edi,cl
c00011e0:	89 f8                	mov    eax,edi
c00011e2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011e6:	09 04 bd 34 f1 01 c0 	or     DWORD PTR [edi*4-0x3ffe0ecc],eax
c00011ed:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011f0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011f3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011f6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011f9:	e9 db fe ff ff       	jmp    c00010d9 <dlmalloc+0xc5>
c00011fe:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001204:	76 78                	jbe    c000127e <dlmalloc+0x26a>
c0001206:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000120a:	8d 04 c5 34 ee 01 c0 	lea    eax,[eax*8-0x3ffe11cc]
c0001211:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001214:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001217:	39 ca                	cmp    edx,ecx
c0001219:	74 63                	je     c000127e <dlmalloc+0x26a>
c000121b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000121e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001221:	83 e3 fc             	and    ebx,0xfffffffc
c0001224:	39 de                	cmp    esi,ebx
c0001226:	77 52                	ja     c000127a <dlmalloc+0x266>
c0001228:	89 df                	mov    edi,ebx
c000122a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000122d:	29 f7                	sub    edi,esi
c000122f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001232:	01 d3                	add    ebx,edx
c0001234:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001237:	83 ff 0f             	cmp    edi,0xf
c000123a:	8d 42 08             	lea    eax,[edx+0x8]
c000123d:	77 09                	ja     c0001248 <dlmalloc+0x234>
c000123f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001243:	e9 52 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001248:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000124b:	83 ce 01             	or     esi,0x1
c000124e:	89 0d 3c ee 01 c0    	mov    DWORD PTR ds:0xc001ee3c,ecx
c0001254:	89 0d 40 ee 01 c0    	mov    DWORD PTR ds:0xc001ee40,ecx
c000125a:	c7 41 08 34 ee 01 c0 	mov    DWORD PTR [ecx+0x8],0xc001ee34
c0001261:	c7 41 0c 34 ee 01 c0 	mov    DWORD PTR [ecx+0xc],0xc001ee34
c0001268:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000126b:	89 fa                	mov    edx,edi
c000126d:	83 ca 01             	or     edx,0x1
c0001270:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001273:	89 3b                	mov    DWORD PTR [ebx],edi
c0001275:	e9 20 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c000127a:	89 c2                	mov    edx,eax
c000127c:	eb 99                	jmp    c0001217 <dlmalloc+0x203>
c000127e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001282:	b8 01 00 00 00       	mov    eax,0x1
c0001287:	41                   	inc    ecx
c0001288:	89 cb                	mov    ebx,ecx
c000128a:	8d 14 cd 2c ee 01 c0 	lea    edx,[ecx*8-0x3ffe11d4]
c0001291:	c1 eb 05             	shr    ebx,0x5
c0001294:	d3 e0                	shl    eax,cl
c0001296:	8b 3c 9d 34 f1 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe0ecc]
c000129d:	39 f8                	cmp    eax,edi
c000129f:	77 04                	ja     c00012a5 <dlmalloc+0x291>
c00012a1:	85 c0                	test   eax,eax
c00012a3:	75 26                	jne    c00012cb <dlmalloc+0x2b7>
c00012a5:	43                   	inc    ebx
c00012a6:	83 fb 02             	cmp    ebx,0x2
c00012a9:	0f 87 a6 00 00 00    	ja     c0001355 <dlmalloc+0x341>
c00012af:	8b 3c 9d 34 f1 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe0ecc]
c00012b6:	85 ff                	test   edi,edi
c00012b8:	74 eb                	je     c00012a5 <dlmalloc+0x291>
c00012ba:	89 d8                	mov    eax,ebx
c00012bc:	c1 e0 06             	shl    eax,0x6
c00012bf:	8d 14 85 2c ee 01 c0 	lea    edx,[eax*4-0x3ffe11d4]
c00012c6:	b8 01 00 00 00       	mov    eax,0x1
c00012cb:	85 f8                	test   eax,edi
c00012cd:	75 07                	jne    c00012d6 <dlmalloc+0x2c2>
c00012cf:	83 c2 08             	add    edx,0x8
c00012d2:	01 c0                	add    eax,eax
c00012d4:	eb f5                	jmp    c00012cb <dlmalloc+0x2b7>
c00012d6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012d9:	39 ca                	cmp    edx,ecx
c00012db:	75 14                	jne    c00012f1 <dlmalloc+0x2dd>
c00012dd:	89 c1                	mov    ecx,eax
c00012df:	83 c2 08             	add    edx,0x8
c00012e2:	f7 d1                	not    ecx
c00012e4:	01 c0                	add    eax,eax
c00012e6:	21 cf                	and    edi,ecx
c00012e8:	89 3c 9d 34 f1 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0ecc],edi
c00012ef:	eb ac                	jmp    c000129d <dlmalloc+0x289>
c00012f1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012f4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012f7:	83 e0 fc             	and    eax,0xfffffffc
c00012fa:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012fd:	89 c3                	mov    ebx,eax
c00012ff:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001302:	29 f3                	sub    ebx,esi
c0001304:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001307:	83 fb 0f             	cmp    ebx,0xf
c000130a:	8d 41 08             	lea    eax,[ecx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x304>
c000130f:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001313:	e9 82 00 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001318:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000131b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001321:	89 3d 3c ee 01 c0    	mov    DWORD PTR ds:0xc001ee3c,edi
c0001327:	89 3d 40 ee 01 c0    	mov    DWORD PTR ds:0xc001ee40,edi
c000132d:	c7 47 08 34 ee 01 c0 	mov    DWORD PTR [edi+0x8],0xc001ee34
c0001334:	c7 47 0c 34 ee 01 c0 	mov    DWORD PTR [edi+0xc],0xc001ee34
c000133b:	77 06                	ja     c0001343 <dlmalloc+0x32f>
c000133d:	89 3d 30 ee 01 c0    	mov    DWORD PTR ds:0xc001ee30,edi
c0001343:	83 ce 01             	or     esi,0x1
c0001346:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001349:	89 d9                	mov    ecx,ebx
c000134b:	83 c9 01             	or     ecx,0x1
c000134e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001351:	89 1a                	mov    DWORD PTR [edx],ebx
c0001353:	eb 45                	jmp    c000139a <dlmalloc+0x386>
c0001355:	a1 2c ee 01 c0       	mov    eax,ds:0xc001ee2c
c000135a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000135d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001360:	83 e2 fc             	and    edx,0xfffffffc
c0001363:	39 d1                	cmp    ecx,edx
c0001365:	77 1e                	ja     c0001385 <dlmalloc+0x371>
c0001367:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000136a:	89 f3                	mov    ebx,esi
c000136c:	89 0d 2c ee 01 c0    	mov    DWORD PTR ds:0xc001ee2c,ecx
c0001372:	83 cb 01             	or     ebx,0x1
c0001375:	29 f2                	sub    edx,esi
c0001377:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000137a:	83 ca 01             	or     edx,0x1
c000137d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001380:	e9 2d fd ff ff       	jmp    c00010b2 <dlmalloc+0x9e>
c0001385:	83 c4 1c             	add    esp,0x1c
c0001388:	89 f0                	mov    eax,esi
c000138a:	5b                   	pop    ebx
c000138b:	ba 00 ee 01 c0       	mov    edx,0xc001ee00
c0001390:	5e                   	pop    esi
c0001391:	5f                   	pop    edi
c0001392:	5d                   	pop    ebp
c0001393:	e9 16 fa ff ff       	jmp    c0000dae <sYSMALLOc>
c0001398:	31 c0                	xor    eax,eax
c000139a:	83 c4 1c             	add    esp,0x1c
c000139d:	5b                   	pop    ebx
c000139e:	5e                   	pop    esi
c000139f:	5f                   	pop    edi
c00013a0:	5d                   	pop    ebp
c00013a1:	c3                   	ret    

c00013a2 <iALLOc>:
c00013a2:	55                   	push   ebp
c00013a3:	89 c5                	mov    ebp,eax
c00013a5:	57                   	push   edi
c00013a6:	56                   	push   esi
c00013a7:	53                   	push   ebx
c00013a8:	83 ec 2c             	sub    esp,0x2c
c00013ab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013af:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013b7:	83 3d 00 ee 01 c0 00 	cmp    DWORD PTR ds:0xc001ee00,0x0
c00013be:	75 12                	jne    c00013d2 <iALLOc+0x30>
c00013c0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013c4:	b8 00 ee 01 c0       	mov    eax,0xc001ee00
c00013c9:	e8 04 f8 ff ff       	call   c0000bd2 <malloc_consolidate>
c00013ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013d7:	74 12                	je     c00013eb <iALLOc+0x49>
c00013d9:	85 ed                	test   ebp,ebp
c00013db:	0f 84 64 01 00 00    	je     c0001545 <iALLOc+0x1a3>
c00013e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013e9:	eb 33                	jmp    c000141e <iALLOc+0x7c>
c00013eb:	85 ed                	test   ebp,ebp
c00013ed:	75 14                	jne    c0001403 <iALLOc+0x61>
c00013ef:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013f7:	83 c4 2c             	add    esp,0x2c
c00013fa:	5b                   	pop    ebx
c00013fb:	5e                   	pop    esi
c00013fc:	5f                   	pop    edi
c00013fd:	5d                   	pop    ebp
c00013fe:	e9 11 fc ff ff       	jmp    c0001014 <dlmalloc>
c0001403:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000140a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001412:	83 f8 0f             	cmp    eax,0xf
c0001415:	76 07                	jbe    c000141e <iALLOc+0x7c>
c0001417:	83 e0 f8             	and    eax,0xfffffff8
c000141a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000141e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001423:	75 09                	jne    c000142e <iALLOc+0x8c>
c0001425:	89 d0                	mov    eax,edx
c0001427:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000142a:	31 f6                	xor    esi,esi
c000142c:	eb 3b                	jmp    c0001469 <iALLOc+0xc7>
c000142e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001430:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001438:	83 c0 0b             	add    eax,0xb
c000143b:	83 f8 0f             	cmp    eax,0xf
c000143e:	76 07                	jbe    c0001447 <iALLOc+0xa5>
c0001440:	83 e0 f8             	and    eax,0xfffffff8
c0001443:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001447:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000144b:	0f af f5             	imul   esi,ebp
c000144e:	eb 25                	jmp    c0001475 <iALLOc+0xd3>
c0001450:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001452:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001455:	bb 10 00 00 00       	mov    ebx,0x10
c000145a:	83 f9 0f             	cmp    ecx,0xf
c000145d:	76 05                	jbe    c0001464 <iALLOc+0xc2>
c000145f:	83 e1 f8             	and    ecx,0xfffffff8
c0001462:	89 cb                	mov    ebx,ecx
c0001464:	01 de                	add    esi,ebx
c0001466:	83 c0 04             	add    eax,0x4
c0001469:	39 c7                	cmp    edi,eax
c000146b:	75 e3                	jne    c0001450 <iALLOc+0xae>
c000146d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001475:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001479:	8b 1d 54 f1 01 c0    	mov    ebx,DWORD PTR ds:0xc001f154
c000147f:	83 ec 0c             	sub    esp,0xc
c0001482:	c7 05 54 f1 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001f154,0x0
c000148c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001490:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001494:	50                   	push   eax
c0001495:	e8 7a fb ff ff       	call   c0001014 <dlmalloc>
c000149a:	83 c4 10             	add    esp,0x10
c000149d:	89 1d 54 f1 01 c0    	mov    DWORD PTR ds:0xc001f154,ebx
c00014a3:	85 c0                	test   eax,eax
c00014a5:	0f 84 92 00 00 00    	je     c000153d <iALLOc+0x19b>
c00014ab:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014ae:	8d 78 f8             	lea    edi,[eax-0x8]
c00014b1:	83 e3 fc             	and    ebx,0xfffffffc
c00014b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014b8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014bd:	74 1e                	je     c00014dd <iALLOc+0x13b>
c00014bf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014c3:	89 d9                	mov    ecx,ebx
c00014c5:	52                   	push   edx
c00014c6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014ca:	83 e9 04             	sub    ecx,0x4
c00014cd:	51                   	push   ecx
c00014ce:	6a 00                	push   0x0
c00014d0:	50                   	push   eax
c00014d1:	e8 1a f0 ff ff       	call   c00004f0 <memset>
c00014d6:	83 c4 10             	add    esp,0x10
c00014d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014dd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e2:	75 14                	jne    c00014f8 <iALLOc+0x156>
c00014e4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014e7:	29 f3                	sub    ebx,esi
c00014e9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014ec:	83 cb 01             	or     ebx,0x1
c00014ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014f3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014f6:	89 f3                	mov    ebx,esi
c00014f8:	31 c0                	xor    eax,eax
c00014fa:	4d                   	dec    ebp
c00014fb:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014fe:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001502:	39 c5                	cmp    ebp,eax
c0001504:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001507:	74 2c                	je     c0001535 <iALLOc+0x193>
c0001509:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000150d:	85 c9                	test   ecx,ecx
c000150f:	75 15                	jne    c0001526 <iALLOc+0x184>
c0001511:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001514:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001517:	b9 10 00 00 00       	mov    ecx,0x10
c000151c:	83 fe 0f             	cmp    esi,0xf
c000151f:	76 05                	jbe    c0001526 <iALLOc+0x184>
c0001521:	83 e6 f8             	and    esi,0xfffffff8
c0001524:	89 f1                	mov    ecx,esi
c0001526:	89 ce                	mov    esi,ecx
c0001528:	29 cb                	sub    ebx,ecx
c000152a:	83 ce 01             	or     esi,0x1
c000152d:	40                   	inc    eax
c000152e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001531:	01 cf                	add    edi,ecx
c0001533:	eb c6                	jmp    c00014fb <iALLOc+0x159>
c0001535:	83 cb 01             	or     ebx,0x1
c0001538:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000153b:	eb 08                	jmp    c0001545 <iALLOc+0x1a3>
c000153d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001545:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001549:	83 c4 2c             	add    esp,0x2c
c000154c:	5b                   	pop    ebx
c000154d:	5e                   	pop    esi
c000154e:	5f                   	pop    edi
c000154f:	5d                   	pop    ebp
c0001550:	c3                   	ret    

c0001551 <dlrealloc>:
c0001551:	55                   	push   ebp
c0001552:	57                   	push   edi
c0001553:	56                   	push   esi
c0001554:	53                   	push   ebx
c0001555:	83 ec 1c             	sub    esp,0x1c
c0001558:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000155c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001560:	85 db                	test   ebx,ebx
c0001562:	75 10                	jne    c0001574 <dlrealloc+0x23>
c0001564:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001568:	83 c4 1c             	add    esp,0x1c
c000156b:	5b                   	pop    ebx
c000156c:	5e                   	pop    esi
c000156d:	5f                   	pop    edi
c000156e:	5d                   	pop    ebp
c000156f:	e9 a0 fa ff ff       	jmp    c0001014 <dlmalloc>
c0001574:	83 f8 df             	cmp    eax,0xffffffdf
c0001577:	76 07                	jbe    c0001580 <dlrealloc+0x2f>
c0001579:	31 db                	xor    ebx,ebx
c000157b:	e9 6a 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c0001580:	83 c0 0b             	add    eax,0xb
c0001583:	bd 10 00 00 00       	mov    ebp,0x10
c0001588:	83 f8 0f             	cmp    eax,0xf
c000158b:	76 05                	jbe    c0001592 <dlrealloc+0x41>
c000158d:	83 e0 f8             	and    eax,0xfffffff8
c0001590:	89 c5                	mov    ebp,eax
c0001592:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001595:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001598:	89 c6                	mov    esi,eax
c000159a:	83 e6 fc             	and    esi,0xfffffffc
c000159d:	a8 02                	test   al,0x2
c000159f:	75 d8                	jne    c0001579 <dlrealloc+0x28>
c00015a1:	39 f5                	cmp    ebp,esi
c00015a3:	0f 86 04 01 00 00    	jbe    c00016ad <dlrealloc+0x15c>
c00015a9:	8d 14 37             	lea    edx,[edi+esi*1]
c00015ac:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015af:	39 15 2c ee 01 c0    	cmp    DWORD PTR ds:0xc001ee2c,edx
c00015b5:	75 33                	jne    c00015ea <dlrealloc+0x99>
c00015b7:	83 e1 fc             	and    ecx,0xfffffffc
c00015ba:	01 f1                	add    ecx,esi
c00015bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015c3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015c7:	77 49                	ja     c0001612 <dlrealloc+0xc1>
c00015c9:	01 ef                	add    edi,ebp
c00015cb:	83 e0 01             	and    eax,0x1
c00015ce:	09 e8                	or     eax,ebp
c00015d0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015d3:	89 3d 2c ee 01 c0    	mov    DWORD PTR ds:0xc001ee2c,edi
c00015d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015dd:	29 e8                	sub    eax,ebp
c00015df:	83 c8 01             	or     eax,0x1
c00015e2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015e5:	e9 00 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c00015ea:	89 c8                	mov    eax,ecx
c00015ec:	83 e0 fe             	and    eax,0xfffffffe
c00015ef:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015f4:	75 1c                	jne    c0001612 <dlrealloc+0xc1>
c00015f6:	83 e1 fc             	and    ecx,0xfffffffc
c00015f9:	01 f1                	add    ecx,esi
c00015fb:	39 cd                	cmp    ebp,ecx
c00015fd:	77 13                	ja     c0001612 <dlrealloc+0xc1>
c00015ff:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001602:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001605:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001608:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000160b:	89 ce                	mov    esi,ecx
c000160d:	e9 9b 00 00 00       	jmp    c00016ad <dlrealloc+0x15c>
c0001612:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001616:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001619:	83 ec 0c             	sub    esp,0xc
c000161c:	50                   	push   eax
c000161d:	e8 f2 f9 ff ff       	call   c0001014 <dlmalloc>
c0001622:	83 c4 10             	add    esp,0x10
c0001625:	85 c0                	test   eax,eax
c0001627:	0f 84 4c ff ff ff    	je     c0001579 <dlrealloc+0x28>
c000162d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001630:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001634:	39 ca                	cmp    edx,ecx
c0001636:	75 0a                	jne    c0001642 <dlrealloc+0xf1>
c0001638:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000163b:	83 e0 fc             	and    eax,0xfffffffc
c000163e:	01 c6                	add    esi,eax
c0001640:	eb 6b                	jmp    c00016ad <dlrealloc+0x15c>
c0001642:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001645:	83 f9 27             	cmp    ecx,0x27
c0001648:	76 08                	jbe    c0001652 <dlrealloc+0x101>
c000164a:	89 de                	mov    esi,ebx
c000164c:	89 c7                	mov    edi,eax
c000164e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001650:	eb 43                	jmp    c0001695 <dlrealloc+0x144>
c0001652:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001654:	83 f9 13             	cmp    ecx,0x13
c0001657:	89 10                	mov    DWORD PTR [eax],edx
c0001659:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000165c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000165f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001662:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001665:	76 2e                	jbe    c0001695 <dlrealloc+0x144>
c0001667:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000166a:	83 f9 1b             	cmp    ecx,0x1b
c000166d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001670:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001673:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001676:	76 1d                	jbe    c0001695 <dlrealloc+0x144>
c0001678:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000167b:	83 f9 23             	cmp    ecx,0x23
c000167e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001681:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001684:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001687:	76 0c                	jbe    c0001695 <dlrealloc+0x144>
c0001689:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000168c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000168f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001692:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001695:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001699:	83 ec 0c             	sub    esp,0xc
c000169c:	53                   	push   ebx
c000169d:	e8 17 f6 ff ff       	call   c0000cb9 <dlfree>
c00016a2:	83 c4 10             	add    esp,0x10
c00016a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016a9:	89 c3                	mov    ebx,eax
c00016ab:	eb 3d                	jmp    c00016ea <dlrealloc+0x199>
c00016ad:	89 f2                	mov    edx,esi
c00016af:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016b2:	29 ea                	sub    edx,ebp
c00016b4:	83 e1 01             	and    ecx,0x1
c00016b7:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ba:	83 fa 0f             	cmp    edx,0xf
c00016bd:	77 0b                	ja     c00016ca <dlrealloc+0x179>
c00016bf:	09 ce                	or     esi,ecx
c00016c1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016c4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c8:	eb 20                	jmp    c00016ea <dlrealloc+0x199>
c00016ca:	01 ef                	add    edi,ebp
c00016cc:	83 ec 0c             	sub    esp,0xc
c00016cf:	09 cd                	or     ebp,ecx
c00016d1:	83 ca 01             	or     edx,0x1
c00016d4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016d7:	83 c7 08             	add    edi,0x8
c00016da:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016dd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016e1:	57                   	push   edi
c00016e2:	e8 d2 f5 ff ff       	call   c0000cb9 <dlfree>
c00016e7:	83 c4 10             	add    esp,0x10
c00016ea:	83 c4 1c             	add    esp,0x1c
c00016ed:	89 d8                	mov    eax,ebx
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	c3                   	ret    

c00016f4 <dlmemalign>:
c00016f4:	55                   	push   ebp
c00016f5:	57                   	push   edi
c00016f6:	56                   	push   esi
c00016f7:	53                   	push   ebx
c00016f8:	83 ec 0c             	sub    esp,0xc
c00016fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001703:	83 fa 08             	cmp    edx,0x8
c0001706:	77 10                	ja     c0001718 <dlmemalign+0x24>
c0001708:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000170c:	83 c4 0c             	add    esp,0xc
c000170f:	5b                   	pop    ebx
c0001710:	5e                   	pop    esi
c0001711:	5f                   	pop    edi
c0001712:	5d                   	pop    ebp
c0001713:	e9 fc f8 ff ff       	jmp    c0001014 <dlmalloc>
c0001718:	bf 10 00 00 00       	mov    edi,0x10
c000171d:	83 fa 0f             	cmp    edx,0xf
c0001720:	76 13                	jbe    c0001735 <dlmemalign+0x41>
c0001722:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001725:	85 d1                	test   ecx,edx
c0001727:	75 04                	jne    c000172d <dlmemalign+0x39>
c0001729:	89 d7                	mov    edi,edx
c000172b:	eb 08                	jmp    c0001735 <dlmemalign+0x41>
c000172d:	39 d7                	cmp    edi,edx
c000172f:	73 04                	jae    c0001735 <dlmemalign+0x41>
c0001731:	01 ff                	add    edi,edi
c0001733:	eb f8                	jmp    c000172d <dlmemalign+0x39>
c0001735:	83 f8 df             	cmp    eax,0xffffffdf
c0001738:	76 07                	jbe    c0001741 <dlmemalign+0x4d>
c000173a:	31 c0                	xor    eax,eax
c000173c:	e9 ce 00 00 00       	jmp    c000180f <dlmemalign+0x11b>
c0001741:	83 c0 0b             	add    eax,0xb
c0001744:	bd 10 00 00 00       	mov    ebp,0x10
c0001749:	83 f8 0f             	cmp    eax,0xf
c000174c:	76 05                	jbe    c0001753 <dlmemalign+0x5f>
c000174e:	83 e0 f8             	and    eax,0xfffffff8
c0001751:	89 c5                	mov    ebp,eax
c0001753:	83 ec 0c             	sub    esp,0xc
c0001756:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000175a:	50                   	push   eax
c000175b:	e8 b4 f8 ff ff       	call   c0001014 <dlmalloc>
c0001760:	83 c4 10             	add    esp,0x10
c0001763:	89 c1                	mov    ecx,eax
c0001765:	85 c0                	test   eax,eax
c0001767:	74 d1                	je     c000173a <dlmemalign+0x46>
c0001769:	31 d2                	xor    edx,edx
c000176b:	8d 70 f8             	lea    esi,[eax-0x8]
c000176e:	f7 f7                	div    edi
c0001770:	85 d2                	test   edx,edx
c0001772:	74 62                	je     c00017d6 <dlmemalign+0xe2>
c0001774:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001778:	89 f8                	mov    eax,edi
c000177a:	f7 d8                	neg    eax
c000177c:	21 c3                	and    ebx,eax
c000177e:	83 eb 08             	sub    ebx,0x8
c0001781:	89 d8                	mov    eax,ebx
c0001783:	29 f0                	sub    eax,esi
c0001785:	83 f8 0f             	cmp    eax,0xf
c0001788:	77 02                	ja     c000178c <dlmemalign+0x98>
c000178a:	01 fb                	add    ebx,edi
c000178c:	89 d8                	mov    eax,ebx
c000178e:	29 f0                	sub    eax,esi
c0001790:	89 c6                	mov    esi,eax
c0001792:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001795:	89 c2                	mov    edx,eax
c0001797:	83 e2 fc             	and    edx,0xfffffffc
c000179a:	29 f2                	sub    edx,esi
c000179c:	a8 02                	test   al,0x2
c000179e:	74 10                	je     c00017b0 <dlmemalign+0xbc>
c00017a0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017a3:	83 ca 02             	or     edx,0x2
c00017a6:	8d 43 08             	lea    eax,[ebx+0x8]
c00017a9:	89 33                	mov    DWORD PTR [ebx],esi
c00017ab:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017ae:	eb 5f                	jmp    c000180f <dlmemalign+0x11b>
c00017b0:	83 ec 0c             	sub    esp,0xc
c00017b3:	89 d0                	mov    eax,edx
c00017b5:	83 c8 01             	or     eax,0x1
c00017b8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017bb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017c0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017c3:	83 e0 01             	and    eax,0x1
c00017c6:	09 f0                	or     eax,esi
c00017c8:	89 de                	mov    esi,ebx
c00017ca:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017cd:	51                   	push   ecx
c00017ce:	e8 e6 f4 ff ff       	call   c0000cb9 <dlfree>
c00017d3:	83 c4 10             	add    esp,0x10
c00017d6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017d9:	a8 02                	test   al,0x2
c00017db:	75 2f                	jne    c000180c <dlmemalign+0x118>
c00017dd:	83 e0 fc             	and    eax,0xfffffffc
c00017e0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017e3:	39 c2                	cmp    edx,eax
c00017e5:	73 25                	jae    c000180c <dlmemalign+0x118>
c00017e7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	29 e8                	sub    eax,ebp
c00017ef:	83 c2 08             	add    edx,0x8
c00017f2:	83 c8 01             	or     eax,0x1
c00017f5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017f8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017fb:	83 e0 01             	and    eax,0x1
c00017fe:	09 c5                	or     ebp,eax
c0001800:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001803:	52                   	push   edx
c0001804:	e8 b0 f4 ff ff       	call   c0000cb9 <dlfree>
c0001809:	83 c4 10             	add    esp,0x10
c000180c:	8d 46 08             	lea    eax,[esi+0x8]
c000180f:	83 c4 0c             	add    esp,0xc
c0001812:	5b                   	pop    ebx
c0001813:	5e                   	pop    esi
c0001814:	5f                   	pop    edi
c0001815:	5d                   	pop    ebp
c0001816:	c3                   	ret    

c0001817 <dlcalloc>:
c0001817:	53                   	push   ebx
c0001818:	83 ec 14             	sub    esp,0x14
c000181b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000181f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001824:	50                   	push   eax
c0001825:	e8 ea f7 ff ff       	call   c0001014 <dlmalloc>
c000182a:	83 c4 10             	add    esp,0x10
c000182d:	89 c3                	mov    ebx,eax
c000182f:	85 c0                	test   eax,eax
c0001831:	74 77                	je     c00018aa <dlcalloc+0x93>
c0001833:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001836:	89 d0                	mov    eax,edx
c0001838:	83 e0 fc             	and    eax,0xfffffffc
c000183b:	80 e2 02             	and    dl,0x2
c000183e:	75 5a                	jne    c000189a <dlcalloc+0x83>
c0001840:	83 e8 04             	sub    eax,0x4
c0001843:	83 f8 27             	cmp    eax,0x27
c0001846:	76 03                	jbe    c000184b <dlcalloc+0x34>
c0001848:	51                   	push   ecx
c0001849:	eb 53                	jmp    c000189e <dlcalloc+0x87>
c000184b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001851:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001858:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000185f:	83 f8 13             	cmp    eax,0x13
c0001862:	76 46                	jbe    c00018aa <dlcalloc+0x93>
c0001864:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000186b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001872:	83 f8 1b             	cmp    eax,0x1b
c0001875:	76 33                	jbe    c00018aa <dlcalloc+0x93>
c0001877:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000187e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001885:	83 f8 23             	cmp    eax,0x23
c0001888:	76 20                	jbe    c00018aa <dlcalloc+0x93>
c000188a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001891:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001898:	eb 10                	jmp    c00018aa <dlcalloc+0x93>
c000189a:	83 e8 08             	sub    eax,0x8
c000189d:	52                   	push   edx
c000189e:	50                   	push   eax
c000189f:	6a 00                	push   0x0
c00018a1:	53                   	push   ebx
c00018a2:	e8 49 ec ff ff       	call   c00004f0 <memset>
c00018a7:	83 c4 10             	add    esp,0x10
c00018aa:	89 d8                	mov    eax,ebx
c00018ac:	83 c4 08             	add    esp,0x8
c00018af:	5b                   	pop    ebx
c00018b0:	c3                   	ret    

c00018b1 <dlcfree>:
c00018b1:	e9 03 f4 ff ff       	jmp    c0000cb9 <dlfree>

c00018b6 <dlindependent_calloc>:
c00018b6:	83 ec 28             	sub    esp,0x28
c00018b9:	b9 03 00 00 00       	mov    ecx,0x3
c00018be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018ca:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d2:	e8 cb fa ff ff       	call   c00013a2 <iALLOc>
c00018d7:	83 c4 2c             	add    esp,0x2c
c00018da:	c3                   	ret    

c00018db <dlindependent_comalloc>:
c00018db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e3:	31 c9                	xor    ecx,ecx
c00018e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018ed:	e9 b0 fa ff ff       	jmp    c00013a2 <iALLOc>

c00018f2 <dlvalloc>:
c00018f2:	83 ec 0c             	sub    esp,0xc
c00018f5:	83 3d 00 ee 01 c0 00 	cmp    DWORD PTR ds:0xc001ee00,0x0
c00018fc:	75 0a                	jne    c0001908 <dlvalloc+0x16>
c00018fe:	b8 00 ee 01 c0       	mov    eax,0xc001ee00
c0001903:	e8 ca f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001908:	50                   	push   eax
c0001909:	50                   	push   eax
c000190a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000190e:	ff 35 5c f1 01 c0    	push   DWORD PTR ds:0xc001f15c
c0001914:	e8 db fd ff ff       	call   c00016f4 <dlmemalign>
c0001919:	83 c4 1c             	add    esp,0x1c
c000191c:	c3                   	ret    

c000191d <dlpvalloc>:
c000191d:	83 ec 0c             	sub    esp,0xc
c0001920:	83 3d 00 ee 01 c0 00 	cmp    DWORD PTR ds:0xc001ee00,0x0
c0001927:	75 0a                	jne    c0001933 <dlpvalloc+0x16>
c0001929:	b8 00 ee 01 c0       	mov    eax,0xc001ee00
c000192e:	e8 9f f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001933:	a1 5c f1 01 c0       	mov    eax,ds:0xc001f15c
c0001938:	89 c1                	mov    ecx,eax
c000193a:	52                   	push   edx
c000193b:	f7 d9                	neg    ecx
c000193d:	52                   	push   edx
c000193e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001942:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001946:	21 ca                	and    edx,ecx
c0001948:	52                   	push   edx
c0001949:	50                   	push   eax
c000194a:	e8 a5 fd ff ff       	call   c00016f4 <dlmemalign>
c000194f:	83 c4 1c             	add    esp,0x1c
c0001952:	c3                   	ret    

c0001953 <dlmalloc_trim>:
c0001953:	b8 00 ee 01 c0       	mov    eax,0xc001ee00
c0001958:	e8 75 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c000195d:	31 c0                	xor    eax,eax
c000195f:	c3                   	ret    

c0001960 <dlmalloc_usable_size>:
c0001960:	53                   	push   ebx
c0001961:	31 c0                	xor    eax,eax
c0001963:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001967:	85 c9                	test   ecx,ecx
c0001969:	74 24                	je     c000198f <dlmalloc_usable_size+0x2f>
c000196b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000196e:	f6 c2 02             	test   dl,0x2
c0001971:	74 08                	je     c000197b <dlmalloc_usable_size+0x1b>
c0001973:	83 e2 fc             	and    edx,0xfffffffc
c0001976:	8d 42 f8             	lea    eax,[edx-0x8]
c0001979:	eb 14                	jmp    c000198f <dlmalloc_usable_size+0x2f>
c000197b:	89 d3                	mov    ebx,edx
c000197d:	31 c0                	xor    eax,eax
c000197f:	83 e3 fe             	and    ebx,0xfffffffe
c0001982:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001987:	74 06                	je     c000198f <dlmalloc_usable_size+0x2f>
c0001989:	83 e2 fc             	and    edx,0xfffffffc
c000198c:	8d 42 fc             	lea    eax,[edx-0x4]
c000198f:	5b                   	pop    ebx
c0001990:	c3                   	ret    

c0001991 <dlmallinfo>:
c0001991:	55                   	push   ebp
c0001992:	57                   	push   edi
c0001993:	56                   	push   esi
c0001994:	53                   	push   ebx
c0001995:	83 ec 08             	sub    esp,0x8
c0001998:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000199c:	83 3d 2c ee 01 c0 00 	cmp    DWORD PTR ds:0xc001ee2c,0x0
c00019a3:	75 0a                	jne    c00019af <dlmallinfo+0x1e>
c00019a5:	b8 00 ee 01 c0       	mov    eax,0xc001ee00
c00019aa:	e8 23 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c00019af:	a1 2c ee 01 c0       	mov    eax,ds:0xc001ee2c
c00019b4:	31 ed                	xor    ebp,ebp
c00019b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019b9:	31 c9                	xor    ecx,ecx
c00019bb:	83 e0 fc             	and    eax,0xfffffffc
c00019be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019c2:	31 c0                	xor    eax,eax
c00019c4:	8b 14 85 04 ee 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe11fc]
c00019cb:	85 d2                	test   edx,edx
c00019cd:	74 0e                	je     c00019dd <dlmallinfo+0x4c>
c00019cf:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019d2:	45                   	inc    ebp
c00019d3:	83 e6 fc             	and    esi,0xfffffffc
c00019d6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019d9:	01 f1                	add    ecx,esi
c00019db:	eb ee                	jmp    c00019cb <dlmallinfo+0x3a>
c00019dd:	40                   	inc    eax
c00019de:	83 f8 0a             	cmp    eax,0xa
c00019e1:	75 e1                	jne    c00019c4 <dlmallinfo+0x33>
c00019e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019e7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ee:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019f1:	b8 34 ee 01 c0       	mov    eax,0xc001ee34
c00019f6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019f9:	39 f0                	cmp    eax,esi
c00019fb:	74 10                	je     c0001a0d <dlmallinfo+0x7c>
c00019fd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a00:	ff 04 24             	inc    DWORD PTR [esp]
c0001a03:	83 e7 fc             	and    edi,0xfffffffc
c0001a06:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a09:	01 fa                	add    edx,edi
c0001a0b:	eb ec                	jmp    c00019f9 <dlmallinfo+0x68>
c0001a0d:	83 c0 08             	add    eax,0x8
c0001a10:	3d 2c f1 01 c0       	cmp    eax,0xc001f12c
c0001a15:	75 df                	jne    c00019f6 <dlmallinfo+0x65>
c0001a17:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a1a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a1d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a20:	a1 68 f1 01 c0       	mov    eax,ds:0xc001f168
c0001a25:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a28:	89 03                	mov    DWORD PTR [ebx],eax
c0001a2a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a2d:	8b 35 50 f1 01 c0    	mov    esi,DWORD PTR ds:0xc001f150
c0001a33:	29 d0                	sub    eax,edx
c0001a35:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a38:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a3b:	8b 35 64 f1 01 c0    	mov    esi,DWORD PTR ds:0xc001f164
c0001a41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a45:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a48:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a4b:	8b 35 74 f1 01 c0    	mov    esi,DWORD PTR ds:0xc001f174
c0001a51:	89 d8                	mov    eax,ebx
c0001a53:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a56:	83 c4 08             	add    esp,0x8
c0001a59:	5b                   	pop    ebx
c0001a5a:	5e                   	pop    esi
c0001a5b:	5f                   	pop    edi
c0001a5c:	5d                   	pop    ebp
c0001a5d:	c2 04 00             	ret    0x4

c0001a60 <dlmalloc_stats>:
c0001a60:	83 ec 30             	sub    esp,0x30
c0001a63:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a67:	50                   	push   eax
c0001a68:	e8 24 ff ff ff       	call   c0001991 <dlmallinfo>
c0001a6d:	83 c4 30             	add    esp,0x30
c0001a70:	c3                   	ret    

c0001a71 <dlmallopt>:
c0001a71:	56                   	push   esi
c0001a72:	b8 00 ee 01 c0       	mov    eax,0xc001ee00
c0001a77:	53                   	push   ebx
c0001a78:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a80:	e8 4d f1 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001a85:	8d 46 04             	lea    eax,[esi+0x4]
c0001a88:	83 f8 05             	cmp    eax,0x5
c0001a8b:	77 67                	ja     c0001af4 <dlmallopt+0x83>
c0001a8d:	ff 24 85 a4 c2 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe3d5c]
c0001a94:	83 fb 50             	cmp    ebx,0x50
c0001a97:	77 5b                	ja     c0001af4 <dlmallopt+0x83>
c0001a99:	ba 08 00 00 00       	mov    edx,0x8
c0001a9e:	85 db                	test   ebx,ebx
c0001aa0:	74 12                	je     c0001ab4 <dlmallopt+0x43>
c0001aa2:	83 c3 0b             	add    ebx,0xb
c0001aa5:	ba 10 00 00 00       	mov    edx,0x10
c0001aaa:	83 fb 0f             	cmp    ebx,0xf
c0001aad:	76 05                	jbe    c0001ab4 <dlmallopt+0x43>
c0001aaf:	89 da                	mov    edx,ebx
c0001ab1:	83 e2 f8             	and    edx,0xfffffff8
c0001ab4:	a1 00 ee 01 c0       	mov    eax,ds:0xc001ee00
c0001ab9:	83 e0 03             	and    eax,0x3
c0001abc:	09 d0                	or     eax,edx
c0001abe:	a3 00 ee 01 c0       	mov    ds:0xc001ee00,eax
c0001ac3:	eb 31                	jmp    c0001af6 <dlmallopt+0x85>
c0001ac5:	89 1d 44 f1 01 c0    	mov    DWORD PTR ds:0xc001f144,ebx
c0001acb:	eb 06                	jmp    c0001ad3 <dlmallopt+0x62>
c0001acd:	89 1d 48 f1 01 c0    	mov    DWORD PTR ds:0xc001f148,ebx
c0001ad3:	be 01 00 00 00       	mov    esi,0x1
c0001ad8:	eb 1c                	jmp    c0001af6 <dlmallopt+0x85>
c0001ada:	89 1d 4c f1 01 c0    	mov    DWORD PTR ds:0xc001f14c,ebx
c0001ae0:	eb f1                	jmp    c0001ad3 <dlmallopt+0x62>
c0001ae2:	31 f6                	xor    esi,esi
c0001ae4:	85 db                	test   ebx,ebx
c0001ae6:	75 0e                	jne    c0001af6 <dlmallopt+0x85>
c0001ae8:	c7 05 54 f1 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001f154,0x0
c0001af2:	eb df                	jmp    c0001ad3 <dlmallopt+0x62>
c0001af4:	31 f6                	xor    esi,esi
c0001af6:	89 f0                	mov    eax,esi
c0001af8:	5b                   	pop    ebx
c0001af9:	5e                   	pop    esi
c0001afa:	c3                   	ret    

c0001afb <disk_status>:
c0001afb:	31 c0                	xor    eax,eax
c0001afd:	c3                   	ret    

c0001afe <disk_initialize>:
c0001afe:	31 c0                	xor    eax,eax
c0001b00:	c3                   	ret    

c0001b01 <disk_read>:
c0001b01:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b06:	0f b6 04 85 20 28 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdd7e0]
c0001b0e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b12:	e9 49 42 01 00       	jmp    c0015d60 <fatWrapperReadDisk>

c0001b17 <disk_write>:
c0001b17:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b1c:	0f b6 04 85 20 28 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdd7e0]
c0001b24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b28:	e9 77 42 01 00       	jmp    c0015da4 <fatWrapperWriteDisk>

c0001b2d <disk_ioctl>:
c0001b2d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b32:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b36:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b3b:	0f b6 04 85 20 28 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdd7e0]
c0001b43:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b47:	e9 9c 42 01 00       	jmp    c0015de8 <fatWrapperIoctl>

c0001b4c <ld_word>:
c0001b4c:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b50:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b53:	c1 e2 08             	shl    edx,0x8
c0001b56:	09 d0                	or     eax,edx
c0001b58:	c3                   	ret    

c0001b59 <ld_dword>:
c0001b59:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b5d:	89 d1                	mov    ecx,edx
c0001b5f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b63:	c1 e1 08             	shl    ecx,0x8
c0001b66:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b69:	09 ca                	or     edx,ecx
c0001b6b:	c1 e2 08             	shl    edx,0x8
c0001b6e:	09 d0                	or     eax,edx
c0001b70:	c3                   	ret    

c0001b71 <st_word>:
c0001b71:	66 89 10             	mov    WORD PTR [eax],dx
c0001b74:	c3                   	ret    

c0001b75 <st_dword>:
c0001b75:	89 10                	mov    DWORD PTR [eax],edx
c0001b77:	c3                   	ret    

c0001b78 <mem_cpy>:
c0001b78:	85 c9                	test   ecx,ecx
c0001b7a:	74 10                	je     c0001b8c <mem_cpy+0x14>
c0001b7c:	57                   	push   edi
c0001b7d:	01 c1                	add    ecx,eax
c0001b7f:	56                   	push   esi
c0001b80:	89 c7                	mov    edi,eax
c0001b82:	89 d6                	mov    esi,edx
c0001b84:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001b85:	39 f9                	cmp    ecx,edi
c0001b87:	75 fb                	jne    c0001b84 <mem_cpy+0xc>
c0001b89:	5e                   	pop    esi
c0001b8a:	5f                   	pop    edi
c0001b8b:	c3                   	ret    
c0001b8c:	c3                   	ret    

c0001b8d <mem_set>:
c0001b8d:	01 c1                	add    ecx,eax
c0001b8f:	40                   	inc    eax
c0001b90:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001b93:	39 c8                	cmp    eax,ecx
c0001b95:	75 f8                	jne    c0001b8f <mem_set+0x2>
c0001b97:	c3                   	ret    

c0001b98 <mem_cmp>:
c0001b98:	57                   	push   edi
c0001b99:	56                   	push   esi
c0001b9a:	89 c6                	mov    esi,eax
c0001b9c:	53                   	push   ebx
c0001b9d:	46                   	inc    esi
c0001b9e:	42                   	inc    edx
c0001b9f:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001ba3:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001ba7:	29 fb                	sub    ebx,edi
c0001ba9:	89 cf                	mov    edi,ecx
c0001bab:	29 f7                	sub    edi,esi
c0001bad:	01 c7                	add    edi,eax
c0001baf:	74 04                	je     c0001bb5 <mem_cmp+0x1d>
c0001bb1:	85 db                	test   ebx,ebx
c0001bb3:	74 e8                	je     c0001b9d <mem_cmp+0x5>
c0001bb5:	89 d8                	mov    eax,ebx
c0001bb7:	5b                   	pop    ebx
c0001bb8:	5e                   	pop    esi
c0001bb9:	5f                   	pop    edi
c0001bba:	c3                   	ret    

c0001bbb <chk_chr>:
c0001bbb:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001bbe:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001bc1:	74 07                	je     c0001bca <chk_chr+0xf>
c0001bc3:	39 d1                	cmp    ecx,edx
c0001bc5:	74 03                	je     c0001bca <chk_chr+0xf>
c0001bc7:	40                   	inc    eax
c0001bc8:	eb f1                	jmp    c0001bbb <chk_chr>
c0001bca:	89 c8                	mov    eax,ecx
c0001bcc:	c3                   	ret    

c0001bcd <dbc_1st>:
c0001bcd:	31 c0                	xor    eax,eax
c0001bcf:	c3                   	ret    

c0001bd0 <dbc_2nd>:
c0001bd0:	31 c0                	xor    eax,eax
c0001bd2:	c3                   	ret    

c0001bd3 <tchar2uni>:
c0001bd3:	57                   	push   edi
c0001bd4:	89 c7                	mov    edi,eax
c0001bd6:	56                   	push   esi
c0001bd7:	53                   	push   ebx
c0001bd8:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001bda:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001bdc:	8d 73 01             	lea    esi,[ebx+0x1]
c0001bdf:	84 c9                	test   cl,cl
c0001be1:	78 0a                	js     c0001bed <tchar2uni+0x1a>
c0001be3:	0f b6 d1             	movzx  edx,cl
c0001be6:	89 f3                	mov    ebx,esi
c0001be8:	e9 9f 00 00 00       	jmp    c0001c8c <tchar2uni+0xb9>
c0001bed:	88 ca                	mov    dl,cl
c0001bef:	83 e2 e0             	and    edx,0xffffffe0
c0001bf2:	80 fa c0             	cmp    dl,0xc0
c0001bf5:	75 0c                	jne    c0001c03 <tchar2uni+0x30>
c0001bf7:	89 ca                	mov    edx,ecx
c0001bf9:	b9 01 00 00 00       	mov    ecx,0x1
c0001bfe:	83 e2 1f             	and    edx,0x1f
c0001c01:	eb 2e                	jmp    c0001c31 <tchar2uni+0x5e>
c0001c03:	88 ca                	mov    dl,cl
c0001c05:	83 e2 f0             	and    edx,0xfffffff0
c0001c08:	80 fa e0             	cmp    dl,0xe0
c0001c0b:	75 0c                	jne    c0001c19 <tchar2uni+0x46>
c0001c0d:	89 ca                	mov    edx,ecx
c0001c0f:	b9 02 00 00 00       	mov    ecx,0x2
c0001c14:	83 e2 0f             	and    edx,0xf
c0001c17:	eb 18                	jmp    c0001c31 <tchar2uni+0x5e>
c0001c19:	88 ca                	mov    dl,cl
c0001c1b:	83 e2 f8             	and    edx,0xfffffff8
c0001c1e:	88 d0                	mov    al,dl
c0001c20:	83 ca ff             	or     edx,0xffffffff
c0001c23:	3c f0                	cmp    al,0xf0
c0001c25:	75 6c                	jne    c0001c93 <tchar2uni+0xc0>
c0001c27:	89 ca                	mov    edx,ecx
c0001c29:	b9 03 00 00 00       	mov    ecx,0x3
c0001c2e:	83 e2 07             	and    edx,0x7
c0001c31:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c35:	46                   	inc    esi
c0001c36:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c39:	88 c8                	mov    al,cl
c0001c3b:	83 e0 c0             	and    eax,0xffffffc0
c0001c3e:	3c 80                	cmp    al,0x80
c0001c40:	75 4e                	jne    c0001c90 <tchar2uni+0xbd>
c0001c42:	c1 e2 06             	shl    edx,0x6
c0001c45:	83 e1 3f             	and    ecx,0x3f
c0001c48:	09 ca                	or     edx,ecx
c0001c4a:	39 de                	cmp    esi,ebx
c0001c4c:	75 e7                	jne    c0001c35 <tchar2uni+0x62>
c0001c4e:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001c51:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001c57:	77 37                	ja     c0001c90 <tchar2uni+0xbd>
c0001c59:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001c5f:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c65:	76 29                	jbe    c0001c90 <tchar2uni+0xbd>
c0001c67:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001c6d:	76 1d                	jbe    c0001c8c <tchar2uni+0xb9>
c0001c6f:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001c75:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001c7b:	c1 e1 06             	shl    ecx,0x6
c0001c7e:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001c84:	09 ca                	or     edx,ecx
c0001c86:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001c8c:	89 1f                	mov    DWORD PTR [edi],ebx
c0001c8e:	eb 03                	jmp    c0001c93 <tchar2uni+0xc0>
c0001c90:	83 ca ff             	or     edx,0xffffffff
c0001c93:	5b                   	pop    ebx
c0001c94:	89 d0                	mov    eax,edx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <put_utf>:
c0001c99:	53                   	push   ebx
c0001c9a:	83 f8 7f             	cmp    eax,0x7f
c0001c9d:	89 c3                	mov    ebx,eax
c0001c9f:	b0 00                	mov    al,0x0
c0001ca1:	77 11                	ja     c0001cb4 <put_utf+0x1b>
c0001ca3:	85 c9                	test   ecx,ecx
c0001ca5:	0f 84 e5 00 00 00    	je     c0001d90 <put_utf+0xf7>
c0001cab:	88 1a                	mov    BYTE PTR [edx],bl
c0001cad:	b0 01                	mov    al,0x1
c0001caf:	e9 dc 00 00 00       	jmp    c0001d90 <put_utf+0xf7>
c0001cb4:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001cba:	77 23                	ja     c0001cdf <put_utf+0x46>
c0001cbc:	83 f9 01             	cmp    ecx,0x1
c0001cbf:	0f 86 cb 00 00 00    	jbe    c0001d90 <put_utf+0xf7>
c0001cc5:	89 d8                	mov    eax,ebx
c0001cc7:	83 e3 3f             	and    ebx,0x3f
c0001cca:	c1 e8 06             	shr    eax,0x6
c0001ccd:	83 cb 80             	or     ebx,0xffffff80
c0001cd0:	83 c8 c0             	or     eax,0xffffffc0
c0001cd3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001cd6:	88 02                	mov    BYTE PTR [edx],al
c0001cd8:	b0 02                	mov    al,0x2
c0001cda:	e9 b1 00 00 00       	jmp    c0001d90 <put_utf+0xf7>
c0001cdf:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001ce5:	77 40                	ja     c0001d27 <put_utf+0x8e>
c0001ce7:	83 f9 02             	cmp    ecx,0x2
c0001cea:	0f 86 a0 00 00 00    	jbe    c0001d90 <put_utf+0xf7>
c0001cf0:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001cf6:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cfc:	0f 86 8e 00 00 00    	jbe    c0001d90 <put_utf+0xf7>
c0001d02:	89 d8                	mov    eax,ebx
c0001d04:	c1 e8 0c             	shr    eax,0xc
c0001d07:	83 c8 e0             	or     eax,0xffffffe0
c0001d0a:	88 02                	mov    BYTE PTR [edx],al
c0001d0c:	89 d8                	mov    eax,ebx
c0001d0e:	83 e3 3f             	and    ebx,0x3f
c0001d11:	c1 e8 06             	shr    eax,0x6
c0001d14:	83 cb 80             	or     ebx,0xffffff80
c0001d17:	83 e0 3f             	and    eax,0x3f
c0001d1a:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d1d:	83 c8 80             	or     eax,0xffffff80
c0001d20:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d23:	b0 03                	mov    al,0x3
c0001d25:	eb 69                	jmp    c0001d90 <put_utf+0xf7>
c0001d27:	83 f9 03             	cmp    ecx,0x3
c0001d2a:	76 64                	jbe    c0001d90 <put_utf+0xf7>
c0001d2c:	89 d9                	mov    ecx,ebx
c0001d2e:	0f b7 c3             	movzx  eax,bx
c0001d31:	66 31 c9             	xor    cx,cx
c0001d34:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d3a:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001d40:	c1 e9 06             	shr    ecx,0x6
c0001d43:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001d49:	77 43                	ja     c0001d8e <put_utf+0xf5>
c0001d4b:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001d51:	77 3b                	ja     c0001d8e <put_utf+0xf5>
c0001d53:	09 cb                	or     ebx,ecx
c0001d55:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001d5b:	89 d8                	mov    eax,ebx
c0001d5d:	c1 e8 12             	shr    eax,0x12
c0001d60:	83 c8 f0             	or     eax,0xfffffff0
c0001d63:	88 02                	mov    BYTE PTR [edx],al
c0001d65:	89 d8                	mov    eax,ebx
c0001d67:	c1 e8 0c             	shr    eax,0xc
c0001d6a:	83 e0 3f             	and    eax,0x3f
c0001d6d:	83 c8 80             	or     eax,0xffffff80
c0001d70:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d73:	89 d8                	mov    eax,ebx
c0001d75:	83 e3 3f             	and    ebx,0x3f
c0001d78:	c1 e8 06             	shr    eax,0x6
c0001d7b:	83 cb 80             	or     ebx,0xffffff80
c0001d7e:	83 e0 3f             	and    eax,0x3f
c0001d81:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001d84:	83 c8 80             	or     eax,0xffffff80
c0001d87:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001d8a:	b0 04                	mov    al,0x4
c0001d8c:	eb 02                	jmp    c0001d90 <put_utf+0xf7>
c0001d8e:	31 c0                	xor    eax,eax
c0001d90:	5b                   	pop    ebx
c0001d91:	c3                   	ret    

c0001d92 <clst2sect>:
c0001d92:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001d95:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001d98:	83 ea 02             	sub    edx,0x2
c0001d9b:	39 ca                	cmp    edx,ecx
c0001d9d:	76 0d                	jbe    c0001dac <clst2sect+0x1a>
c0001d9f:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001da3:	0f af d1             	imul   edx,ecx
c0001da6:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001da9:	89 d0                	mov    eax,edx
c0001dab:	c3                   	ret    
c0001dac:	31 c0                	xor    eax,eax
c0001dae:	c3                   	ret    

c0001daf <pick_lfn>:
c0001daf:	55                   	push   ebp
c0001db0:	57                   	push   edi
c0001db1:	56                   	push   esi
c0001db2:	89 d6                	mov    esi,edx
c0001db4:	53                   	push   ebx
c0001db5:	89 c3                	mov    ebx,eax
c0001db7:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001dba:	e8 8d fd ff ff       	call   c0001b4c <ld_word>
c0001dbf:	66 85 c0             	test   ax,ax
c0001dc2:	74 04                	je     c0001dc8 <pick_lfn+0x19>
c0001dc4:	31 c0                	xor    eax,eax
c0001dc6:	eb 5c                	jmp    c0001e24 <pick_lfn+0x75>
c0001dc8:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001dcb:	bd 01 00 00 00       	mov    ebp,0x1
c0001dd0:	83 e1 bf             	and    ecx,0xffffffbf
c0001dd3:	31 ff                	xor    edi,edi
c0001dd5:	49                   	dec    ecx
c0001dd6:	6b c9 0d             	imul   ecx,ecx,0xd
c0001dd9:	0f b6 87 00 c4 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe3c00]
c0001de0:	01 f0                	add    eax,esi
c0001de2:	e8 65 fd ff ff       	call   c0001b4c <ld_word>
c0001de7:	66 85 ed             	test   bp,bp
c0001dea:	74 11                	je     c0001dfd <pick_lfn+0x4e>
c0001dec:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001df2:	77 d0                	ja     c0001dc4 <pick_lfn+0x15>
c0001df4:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001df8:	89 c5                	mov    ebp,eax
c0001dfa:	41                   	inc    ecx
c0001dfb:	eb 04                	jmp    c0001e01 <pick_lfn+0x52>
c0001dfd:	66 40                	inc    ax
c0001dff:	75 c3                	jne    c0001dc4 <pick_lfn+0x15>
c0001e01:	47                   	inc    edi
c0001e02:	83 ff 0d             	cmp    edi,0xd
c0001e05:	75 d2                	jne    c0001dd9 <pick_lfn+0x2a>
c0001e07:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001e0a:	74 13                	je     c0001e1f <pick_lfn+0x70>
c0001e0c:	66 85 ed             	test   bp,bp
c0001e0f:	74 0e                	je     c0001e1f <pick_lfn+0x70>
c0001e11:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001e17:	77 ab                	ja     c0001dc4 <pick_lfn+0x15>
c0001e19:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001e1f:	b8 01 00 00 00       	mov    eax,0x1
c0001e24:	5b                   	pop    ebx
c0001e25:	5e                   	pop    esi
c0001e26:	5f                   	pop    edi
c0001e27:	5d                   	pop    ebp
c0001e28:	c3                   	ret    

c0001e29 <put_lfn>:
c0001e29:	55                   	push   ebp
c0001e2a:	31 ed                	xor    ebp,ebp
c0001e2c:	57                   	push   edi
c0001e2d:	89 d7                	mov    edi,edx
c0001e2f:	56                   	push   esi
c0001e30:	31 f6                	xor    esi,esi
c0001e32:	53                   	push   ebx
c0001e33:	83 ec 08             	sub    esp,0x8
c0001e36:	89 04 24             	mov    DWORD PTR [esp],eax
c0001e39:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001e3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001e41:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001e47:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001e4a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e4d:	31 d2                	xor    edx,edx
c0001e4f:	e8 1d fd ff ff       	call   c0001b71 <st_word>
c0001e54:	0f b6 d9             	movzx  ebx,cl
c0001e57:	4b                   	dec    ebx
c0001e58:	6b db 0d             	imul   ebx,ebx,0xd
c0001e5b:	66 83 fe ff          	cmp    si,0xffff
c0001e5f:	74 08                	je     c0001e69 <put_lfn+0x40>
c0001e61:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e64:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001e68:	43                   	inc    ebx
c0001e69:	0f b6 85 00 c4 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe3c00]
c0001e70:	0f b7 d6             	movzx  edx,si
c0001e73:	01 f8                	add    eax,edi
c0001e75:	e8 f7 fc ff ff       	call   c0001b71 <st_word>
c0001e7a:	66 85 f6             	test   si,si
c0001e7d:	75 03                	jne    c0001e82 <put_lfn+0x59>
c0001e7f:	83 ce ff             	or     esi,0xffffffff
c0001e82:	45                   	inc    ebp
c0001e83:	83 fd 0d             	cmp    ebp,0xd
c0001e86:	75 d3                	jne    c0001e5b <put_lfn+0x32>
c0001e88:	66 46                	inc    si
c0001e8a:	74 0a                	je     c0001e96 <put_lfn+0x6d>
c0001e8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e94:	75 09                	jne    c0001e9f <put_lfn+0x76>
c0001e96:	88 c8                	mov    al,cl
c0001e98:	83 c8 40             	or     eax,0x40
c0001e9b:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e9f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001ea3:	88 07                	mov    BYTE PTR [edi],al
c0001ea5:	83 c4 08             	add    esp,0x8
c0001ea8:	5b                   	pop    ebx
c0001ea9:	5e                   	pop    esi
c0001eaa:	5f                   	pop    edi
c0001eab:	5d                   	pop    ebp
c0001eac:	c3                   	ret    

c0001ead <gen_numname>:
c0001ead:	57                   	push   edi
c0001eae:	89 cf                	mov    edi,ecx
c0001eb0:	56                   	push   esi
c0001eb1:	b9 0b 00 00 00       	mov    ecx,0xb
c0001eb6:	53                   	push   ebx
c0001eb7:	89 c6                	mov    esi,eax
c0001eb9:	83 ec 10             	sub    esp,0x10
c0001ebc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001ec0:	e8 b3 fc ff ff       	call   c0001b78 <mem_cpy>
c0001ec5:	83 fb 05             	cmp    ebx,0x5
c0001ec8:	76 2d                	jbe    c0001ef7 <gen_numname+0x4a>
c0001eca:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001ecd:	66 85 c0             	test   ax,ax
c0001ed0:	74 25                	je     c0001ef7 <gen_numname+0x4a>
c0001ed2:	83 c7 02             	add    edi,0x2
c0001ed5:	ba 10 00 00 00       	mov    edx,0x10
c0001eda:	01 db                	add    ebx,ebx
c0001edc:	89 c1                	mov    ecx,eax
c0001ede:	66 d1 e8             	shr    ax,1
c0001ee1:	83 e1 01             	and    ecx,0x1
c0001ee4:	01 cb                	add    ebx,ecx
c0001ee6:	0f ba e3 10          	bt     ebx,0x10
c0001eea:	73 06                	jae    c0001ef2 <gen_numname+0x45>
c0001eec:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001ef2:	4a                   	dec    edx
c0001ef3:	75 e5                	jne    c0001eda <gen_numname+0x2d>
c0001ef5:	eb d3                	jmp    c0001eca <gen_numname+0x1d>
c0001ef7:	b8 07 00 00 00       	mov    eax,0x7
c0001efc:	88 d9                	mov    cl,bl
c0001efe:	83 e1 0f             	and    ecx,0xf
c0001f01:	8d 51 30             	lea    edx,[ecx+0x30]
c0001f04:	80 fa 39             	cmp    dl,0x39
c0001f07:	76 03                	jbe    c0001f0c <gen_numname+0x5f>
c0001f09:	8d 51 37             	lea    edx,[ecx+0x37]
c0001f0c:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001f0f:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001f13:	89 da                	mov    edx,ebx
c0001f15:	c1 ea 04             	shr    edx,0x4
c0001f18:	83 fb 0f             	cmp    ebx,0xf
c0001f1b:	76 06                	jbe    c0001f23 <gen_numname+0x76>
c0001f1d:	89 c8                	mov    eax,ecx
c0001f1f:	89 d3                	mov    ebx,edx
c0001f21:	eb d9                	jmp    c0001efc <gen_numname+0x4f>
c0001f23:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001f28:	31 d2                	xor    edx,edx
c0001f2a:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001f2d:	8d 04 16             	lea    eax,[esi+edx*1]
c0001f30:	39 ca                	cmp    edx,ecx
c0001f32:	73 18                	jae    c0001f4c <gen_numname+0x9f>
c0001f34:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001f37:	3c 20                	cmp    al,0x20
c0001f39:	74 11                	je     c0001f4c <gen_numname+0x9f>
c0001f3b:	e8 8d fc ff ff       	call   c0001bcd <dbc_1st>
c0001f40:	85 c0                	test   eax,eax
c0001f42:	74 05                	je     c0001f49 <gen_numname+0x9c>
c0001f44:	39 d3                	cmp    ebx,edx
c0001f46:	74 04                	je     c0001f4c <gen_numname+0x9f>
c0001f48:	42                   	inc    edx
c0001f49:	42                   	inc    edx
c0001f4a:	eb e1                	jmp    c0001f2d <gen_numname+0x80>
c0001f4c:	b0 20                	mov    al,0x20
c0001f4e:	83 f9 07             	cmp    ecx,0x7
c0001f51:	77 05                	ja     c0001f58 <gen_numname+0xab>
c0001f53:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001f57:	41                   	inc    ecx
c0001f58:	42                   	inc    edx
c0001f59:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001f5d:	83 fa 07             	cmp    edx,0x7
c0001f60:	76 ea                	jbe    c0001f4c <gen_numname+0x9f>
c0001f62:	83 c4 10             	add    esp,0x10
c0001f65:	5b                   	pop    ebx
c0001f66:	5e                   	pop    esi
c0001f67:	5f                   	pop    edi
c0001f68:	c3                   	ret    

c0001f69 <sum_sfn>:
c0001f69:	31 c9                	xor    ecx,ecx
c0001f6b:	31 d2                	xor    edx,edx
c0001f6d:	d0 ca                	ror    dl,1
c0001f6f:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f72:	41                   	inc    ecx
c0001f73:	83 f9 0b             	cmp    ecx,0xb
c0001f76:	75 f5                	jne    c0001f6d <sum_sfn+0x4>
c0001f78:	88 d0                	mov    al,dl
c0001f7a:	c3                   	ret    

c0001f7b <get_ldnumber>:
c0001f7b:	8b 10                	mov    edx,DWORD PTR [eax]
c0001f7d:	85 d2                	test   edx,edx
c0001f7f:	74 14                	je     c0001f95 <get_ldnumber+0x1a>
c0001f81:	56                   	push   esi
c0001f82:	53                   	push   ebx
c0001f83:	89 d3                	mov    ebx,edx
c0001f85:	43                   	inc    ebx
c0001f86:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001f89:	80 f9 1f             	cmp    cl,0x1f
c0001f8c:	76 0d                	jbe    c0001f9b <get_ldnumber+0x20>
c0001f8e:	80 f9 3a             	cmp    cl,0x3a
c0001f91:	75 f2                	jne    c0001f85 <get_ldnumber+0xa>
c0001f93:	eb 0a                	jmp    c0001f9f <get_ldnumber+0x24>
c0001f95:	83 c9 ff             	or     ecx,0xffffffff
c0001f98:	89 c8                	mov    eax,ecx
c0001f9a:	c3                   	ret    
c0001f9b:	31 c9                	xor    ecx,ecx
c0001f9d:	eb 24                	jmp    c0001fc3 <get_ldnumber+0x48>
c0001f9f:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0001fa2:	8d 4e d0             	lea    ecx,[esi-0x30]
c0001fa5:	80 f9 09             	cmp    cl,0x9
c0001fa8:	77 16                	ja     c0001fc0 <get_ldnumber+0x45>
c0001faa:	83 c2 02             	add    edx,0x2
c0001fad:	83 c9 ff             	or     ecx,0xffffffff
c0001fb0:	39 d3                	cmp    ebx,edx
c0001fb2:	75 0f                	jne    c0001fc3 <get_ldnumber+0x48>
c0001fb4:	89 f2                	mov    edx,esi
c0001fb6:	89 18                	mov    DWORD PTR [eax],ebx
c0001fb8:	0f be ca             	movsx  ecx,dl
c0001fbb:	83 e9 30             	sub    ecx,0x30
c0001fbe:	eb 03                	jmp    c0001fc3 <get_ldnumber+0x48>
c0001fc0:	83 c9 ff             	or     ecx,0xffffffff
c0001fc3:	89 c8                	mov    eax,ecx
c0001fc5:	5b                   	pop    ebx
c0001fc6:	5e                   	pop    esi
c0001fc7:	c3                   	ret    

c0001fc8 <validate>:
c0001fc8:	56                   	push   esi
c0001fc9:	53                   	push   ebx
c0001fca:	89 d6                	mov    esi,edx
c0001fcc:	51                   	push   ecx
c0001fcd:	85 c0                	test   eax,eax
c0001fcf:	75 09                	jne    c0001fda <validate+0x12>
c0001fd1:	b8 09 00 00 00       	mov    eax,0x9
c0001fd6:	31 c9                	xor    ecx,ecx
c0001fd8:	eb 2f                	jmp    c0002009 <validate+0x41>
c0001fda:	89 c3                	mov    ebx,eax
c0001fdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0001fde:	85 c0                	test   eax,eax
c0001fe0:	74 ef                	je     c0001fd1 <validate+0x9>
c0001fe2:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001fe5:	74 ea                	je     c0001fd1 <validate+0x9>
c0001fe7:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0001feb:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0001fef:	75 e0                	jne    c0001fd1 <validate+0x9>
c0001ff1:	83 ec 0c             	sub    esp,0xc
c0001ff4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0001ff8:	50                   	push   eax
c0001ff9:	e8 fd fa ff ff       	call   c0001afb <disk_status>
c0001ffe:	83 c4 10             	add    esp,0x10
c0002001:	a8 01                	test   al,0x1
c0002003:	75 cc                	jne    c0001fd1 <validate+0x9>
c0002005:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002007:	31 c0                	xor    eax,eax
c0002009:	89 0e                	mov    DWORD PTR [esi],ecx
c000200b:	5a                   	pop    edx
c000200c:	5b                   	pop    ebx
c000200d:	5e                   	pop    esi
c000200e:	c3                   	ret    

c000200f <sync_window>:
c000200f:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002013:	74 58                	je     c000206d <sync_window+0x5e>
c0002015:	56                   	push   esi
c0002016:	53                   	push   ebx
c0002017:	8d 70 34             	lea    esi,[eax+0x34]
c000201a:	51                   	push   ecx
c000201b:	89 c3                	mov    ebx,eax
c000201d:	6a 01                	push   0x1
c000201f:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002022:	56                   	push   esi
c0002023:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002027:	50                   	push   eax
c0002028:	e8 ea fa ff ff       	call   c0001b17 <disk_write>
c000202d:	83 c4 10             	add    esp,0x10
c0002030:	ba 01 00 00 00       	mov    edx,0x1
c0002035:	85 c0                	test   eax,eax
c0002037:	75 2e                	jne    c0002067 <sync_window+0x58>
c0002039:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000203c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000203f:	89 c1                	mov    ecx,eax
c0002041:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002045:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002048:	39 d1                	cmp    ecx,edx
c000204a:	73 19                	jae    c0002065 <sync_window+0x56>
c000204c:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002050:	75 13                	jne    c0002065 <sync_window+0x56>
c0002052:	6a 01                	push   0x1
c0002054:	01 d0                	add    eax,edx
c0002056:	50                   	push   eax
c0002057:	56                   	push   esi
c0002058:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000205c:	50                   	push   eax
c000205d:	e8 b5 fa ff ff       	call   c0001b17 <disk_write>
c0002062:	83 c4 10             	add    esp,0x10
c0002065:	31 d2                	xor    edx,edx
c0002067:	89 d0                	mov    eax,edx
c0002069:	5a                   	pop    edx
c000206a:	5b                   	pop    ebx
c000206b:	5e                   	pop    esi
c000206c:	c3                   	ret    
c000206d:	31 d2                	xor    edx,edx
c000206f:	89 d0                	mov    eax,edx
c0002071:	c3                   	ret    

c0002072 <move_window>:
c0002072:	57                   	push   edi
c0002073:	56                   	push   esi
c0002074:	31 f6                	xor    esi,esi
c0002076:	53                   	push   ebx
c0002077:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000207a:	74 32                	je     c00020ae <move_window+0x3c>
c000207c:	89 c3                	mov    ebx,eax
c000207e:	89 d7                	mov    edi,edx
c0002080:	e8 8a ff ff ff       	call   c000200f <sync_window>
c0002085:	89 c6                	mov    esi,eax
c0002087:	85 c0                	test   eax,eax
c0002089:	75 23                	jne    c00020ae <move_window+0x3c>
c000208b:	6a 01                	push   0x1
c000208d:	8d 43 34             	lea    eax,[ebx+0x34]
c0002090:	57                   	push   edi
c0002091:	50                   	push   eax
c0002092:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002096:	50                   	push   eax
c0002097:	e8 65 fa ff ff       	call   c0001b01 <disk_read>
c000209c:	83 c4 10             	add    esp,0x10
c000209f:	85 c0                	test   eax,eax
c00020a1:	74 08                	je     c00020ab <move_window+0x39>
c00020a3:	be 01 00 00 00       	mov    esi,0x1
c00020a8:	83 cf ff             	or     edi,0xffffffff
c00020ab:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00020ae:	89 f0                	mov    eax,esi
c00020b0:	5b                   	pop    ebx
c00020b1:	5e                   	pop    esi
c00020b2:	5f                   	pop    edi
c00020b3:	c3                   	ret    

c00020b4 <check_fs>:
c00020b4:	53                   	push   ebx
c00020b5:	89 c3                	mov    ebx,eax
c00020b7:	83 ec 08             	sub    esp,0x8
c00020ba:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00020be:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00020c5:	e8 a8 ff ff ff       	call   c0002072 <move_window>
c00020ca:	ba 04 00 00 00       	mov    edx,0x4
c00020cf:	85 c0                	test   eax,eax
c00020d1:	75 68                	jne    c000213b <check_fs+0x87>
c00020d3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00020d9:	e8 6e fa ff ff       	call   c0001b4c <ld_word>
c00020de:	ba 03 00 00 00       	mov    edx,0x3
c00020e3:	66 3d 55 aa          	cmp    ax,0xaa55
c00020e7:	75 52                	jne    c000213b <check_fs+0x87>
c00020e9:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00020ec:	8d 50 18             	lea    edx,[eax+0x18]
c00020ef:	80 fa 01             	cmp    dl,0x1
c00020f2:	76 09                	jbe    c00020fd <check_fs+0x49>
c00020f4:	ba 02 00 00 00       	mov    edx,0x2
c00020f9:	3c eb                	cmp    al,0xeb
c00020fb:	75 3e                	jne    c000213b <check_fs+0x87>
c00020fd:	ba 08 e2 01 c0       	mov    edx,0xc001e208
c0002102:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002105:	b9 03 00 00 00       	mov    ecx,0x3
c000210a:	e8 89 fa ff ff       	call   c0001b98 <mem_cmp>
c000210f:	31 d2                	xor    edx,edx
c0002111:	85 c0                	test   eax,eax
c0002113:	74 26                	je     c000213b <check_fs+0x87>
c0002115:	ba bc c2 01 c0       	mov    edx,0xc001c2bc
c000211a:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0002120:	b9 05 00 00 00       	mov    ecx,0x5
c0002125:	e8 6e fa ff ff       	call   c0001b98 <mem_cmp>
c000212a:	31 d2                	xor    edx,edx
c000212c:	85 c0                	test   eax,eax
c000212e:	74 0b                	je     c000213b <check_fs+0x87>
c0002130:	31 d2                	xor    edx,edx
c0002132:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002136:	0f 95 c2             	setne  dl
c0002139:	01 d2                	add    edx,edx
c000213b:	89 d0                	mov    eax,edx
c000213d:	83 c4 08             	add    esp,0x8
c0002140:	5b                   	pop    ebx
c0002141:	c3                   	ret    

c0002142 <find_volume>:
c0002142:	55                   	push   ebp
c0002143:	57                   	push   edi
c0002144:	56                   	push   esi
c0002145:	89 c6                	mov    esi,eax
c0002147:	53                   	push   ebx
c0002148:	89 d3                	mov    ebx,edx
c000214a:	83 ec 2c             	sub    esp,0x2c
c000214d:	31 d2                	xor    edx,edx
c000214f:	e8 60 ff ff ff       	call   c00020b4 <check_fs>
c0002154:	83 f8 02             	cmp    eax,0x2
c0002157:	74 06                	je     c000215f <find_volume+0x1d>
c0002159:	77 62                	ja     c00021bd <find_volume+0x7b>
c000215b:	85 db                	test   ebx,ebx
c000215d:	74 5e                	je     c00021bd <find_volume+0x7b>
c000215f:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002163:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002169:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000216f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002173:	89 cf                	mov    edi,ecx
c0002175:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002179:	89 e8                	mov    eax,ebp
c000217b:	83 c5 10             	add    ebp,0x10
c000217e:	e8 d6 f9 ff ff       	call   c0001b59 <ld_dword>
c0002183:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002187:	89 01                	mov    DWORD PTR [ecx],eax
c0002189:	83 c1 04             	add    ecx,0x4
c000218c:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002190:	75 e3                	jne    c0002175 <find_volume+0x33>
c0002192:	31 ed                	xor    ebp,ebp
c0002194:	85 db                	test   ebx,ebx
c0002196:	74 03                	je     c000219b <find_volume+0x59>
c0002198:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000219b:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000219e:	b8 03 00 00 00       	mov    eax,0x3
c00021a3:	85 d2                	test   edx,edx
c00021a5:	74 0c                	je     c00021b3 <find_volume+0x71>
c00021a7:	89 f0                	mov    eax,esi
c00021a9:	e8 06 ff ff ff       	call   c00020b4 <check_fs>
c00021ae:	83 f8 01             	cmp    eax,0x1
c00021b1:	76 0a                	jbe    c00021bd <find_volume+0x7b>
c00021b3:	85 db                	test   ebx,ebx
c00021b5:	75 06                	jne    c00021bd <find_volume+0x7b>
c00021b7:	45                   	inc    ebp
c00021b8:	83 fd 03             	cmp    ebp,0x3
c00021bb:	76 de                	jbe    c000219b <find_volume+0x59>
c00021bd:	83 c4 2c             	add    esp,0x2c
c00021c0:	5b                   	pop    ebx
c00021c1:	5e                   	pop    esi
c00021c2:	5f                   	pop    edi
c00021c3:	5d                   	pop    ebp
c00021c4:	c3                   	ret    

c00021c5 <mount_volume>:
c00021c5:	55                   	push   ebp
c00021c6:	89 d5                	mov    ebp,edx
c00021c8:	57                   	push   edi
c00021c9:	89 cf                	mov    edi,ecx
c00021cb:	56                   	push   esi
c00021cc:	53                   	push   ebx
c00021cd:	bb 0b 00 00 00       	mov    ebx,0xb
c00021d2:	83 ec 2c             	sub    esp,0x2c
c00021d5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00021db:	e8 9b fd ff ff       	call   c0001f7b <get_ldnumber>
c00021e0:	85 c0                	test   eax,eax
c00021e2:	0f 88 d6 02 00 00    	js     c00024be <mount_volume+0x2f9>
c00021e8:	8b 34 85 a0 f1 01 c0 	mov    esi,DWORD PTR [eax*4-0x3ffe0e60]
c00021ef:	89 c2                	mov    edx,eax
c00021f1:	bb 0c 00 00 00       	mov    ebx,0xc
c00021f6:	85 f6                	test   esi,esi
c00021f8:	0f 84 c0 02 00 00    	je     c00024be <mount_volume+0x2f9>
c00021fe:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c0002201:	83 e7 fe             	and    edi,0xfffffffe
c0002204:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002207:	74 3a                	je     c0002243 <mount_volume+0x7e>
c0002209:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000220d:	83 ec 0c             	sub    esp,0xc
c0002210:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002214:	50                   	push   eax
c0002215:	e8 e1 f8 ff ff       	call   c0001afb <disk_status>
c000221a:	83 c4 10             	add    esp,0x10
c000221d:	a8 01                	test   al,0x1
c000221f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002223:	75 1e                	jne    c0002243 <mount_volume+0x7e>
c0002225:	31 db                	xor    ebx,ebx
c0002227:	89 f9                	mov    ecx,edi
c0002229:	84 c9                	test   cl,cl
c000222b:	0f 84 8d 02 00 00    	je     c00024be <mount_volume+0x2f9>
c0002231:	a8 04                	test   al,0x4
c0002233:	0f 84 85 02 00 00    	je     c00024be <mount_volume+0x2f9>
c0002239:	bb 0a 00 00 00       	mov    ebx,0xa
c000223e:	e9 7b 02 00 00       	jmp    c00024be <mount_volume+0x2f9>
c0002243:	83 ec 0c             	sub    esp,0xc
c0002246:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002249:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000224c:	0f b6 c2             	movzx  eax,dl
c000224f:	bb 03 00 00 00       	mov    ebx,0x3
c0002254:	50                   	push   eax
c0002255:	e8 a4 f8 ff ff       	call   c0001afe <disk_initialize>
c000225a:	83 c4 10             	add    esp,0x10
c000225d:	a8 01                	test   al,0x1
c000225f:	0f 85 59 02 00 00    	jne    c00024be <mount_volume+0x2f9>
c0002265:	89 f9                	mov    ecx,edi
c0002267:	84 c9                	test   cl,cl
c0002269:	74 04                	je     c000226f <mount_volume+0xaa>
c000226b:	a8 04                	test   al,0x4
c000226d:	75 ca                	jne    c0002239 <mount_volume+0x74>
c000226f:	31 d2                	xor    edx,edx
c0002271:	89 f0                	mov    eax,esi
c0002273:	bb 01 00 00 00       	mov    ebx,0x1
c0002278:	e8 c5 fe ff ff       	call   c0002142 <find_volume>
c000227d:	83 f8 04             	cmp    eax,0x4
c0002280:	0f 84 38 02 00 00    	je     c00024be <mount_volume+0x2f9>
c0002286:	83 f8 01             	cmp    eax,0x1
c0002289:	76 0a                	jbe    c0002295 <mount_volume+0xd0>
c000228b:	bb 0d 00 00 00       	mov    ebx,0xd
c0002290:	e9 29 02 00 00       	jmp    c00024be <mount_volume+0x2f9>
c0002295:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002298:	e8 af f8 ff ff       	call   c0001b4c <ld_word>
c000229d:	66 3d 00 02          	cmp    ax,0x200
c00022a1:	75 e8                	jne    c000228b <mount_volume+0xc6>
c00022a3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00022a6:	e8 a1 f8 ff ff       	call   c0001b4c <ld_word>
c00022ab:	0f b7 c0             	movzx  eax,ax
c00022ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00022b2:	85 c0                	test   eax,eax
c00022b4:	75 0c                	jne    c00022c2 <mount_volume+0xfd>
c00022b6:	8d 46 58             	lea    eax,[esi+0x58]
c00022b9:	e8 9b f8 ff ff       	call   c0001b59 <ld_dword>
c00022be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00022c2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00022c5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00022c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00022cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00022d0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00022d3:	89 e8                	mov    eax,ebp
c00022d5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00022d8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00022db:	3c 01                	cmp    al,0x1
c00022dd:	77 ac                	ja     c000228b <mount_volume+0xc6>
c00022df:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00022e3:	89 c3                	mov    ebx,eax
c00022e5:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00022e9:	66 85 c0             	test   ax,ax
c00022ec:	74 9d                	je     c000228b <mount_volume+0xc6>
c00022ee:	8d 40 ff             	lea    eax,[eax-0x1]
c00022f1:	85 d8                	test   eax,ebx
c00022f3:	75 96                	jne    c000228b <mount_volume+0xc6>
c00022f5:	8d 46 45             	lea    eax,[esi+0x45]
c00022f8:	e8 4f f8 ff ff       	call   c0001b4c <ld_word>
c00022fd:	89 c7                	mov    edi,eax
c00022ff:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002303:	a8 0f                	test   al,0xf
c0002305:	75 84                	jne    c000228b <mount_volume+0xc6>
c0002307:	8d 46 47             	lea    eax,[esi+0x47]
c000230a:	e8 3d f8 ff ff       	call   c0001b4c <ld_word>
c000230f:	0f b7 d0             	movzx  edx,ax
c0002312:	85 d2                	test   edx,edx
c0002314:	75 0a                	jne    c0002320 <mount_volume+0x15b>
c0002316:	8d 46 54             	lea    eax,[esi+0x54]
c0002319:	e8 3b f8 ff ff       	call   c0001b59 <ld_dword>
c000231e:	89 c2                	mov    edx,eax
c0002320:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002324:	8d 46 42             	lea    eax,[esi+0x42]
c0002327:	e8 20 f8 ff ff       	call   c0001b4c <ld_word>
c000232c:	66 85 c0             	test   ax,ax
c000232f:	0f 84 56 ff ff ff    	je     c000228b <mount_volume+0xc6>
c0002335:	89 e9                	mov    ecx,ebp
c0002337:	0f b7 c0             	movzx  eax,ax
c000233a:	0f b6 e9             	movzx  ebp,cl
c000233d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002341:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002345:	89 f8                	mov    eax,edi
c0002347:	0f af cd             	imul   ecx,ebp
c000234a:	66 c1 e8 04          	shr    ax,0x4
c000234e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002352:	0f b7 c0             	movzx  eax,ax
c0002355:	01 c8                	add    eax,ecx
c0002357:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000235b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000235f:	39 c2                	cmp    edx,eax
c0002361:	0f 82 24 ff ff ff    	jb     c000228b <mount_volume+0xc6>
c0002367:	29 c2                	sub    edx,eax
c0002369:	89 d5                	mov    ebp,edx
c000236b:	89 d0                	mov    eax,edx
c000236d:	31 d2                	xor    edx,edx
c000236f:	f7 f3                	div    ebx
c0002371:	39 dd                	cmp    ebp,ebx
c0002373:	0f 82 12 ff ff ff    	jb     c000228b <mount_volume+0xc6>
c0002379:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000237e:	0f 87 07 ff ff ff    	ja     c000228b <mount_volume+0xc6>
c0002384:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002389:	0f 86 1f 01 00 00    	jbe    c00024ae <mount_volume+0x2e9>
c000238f:	bb 03 00 00 00       	mov    ebx,0x3
c0002394:	8d 68 02             	lea    ebp,[eax+0x2]
c0002397:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000239b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000239f:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00023a3:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00023a6:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00023a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00023ad:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00023b0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00023b4:	83 fb 03             	cmp    ebx,0x3
c00023b7:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00023ba:	75 21                	jne    c00023dd <mount_volume+0x218>
c00023bc:	8d 46 5e             	lea    eax,[esi+0x5e]
c00023bf:	e8 88 f7 ff ff       	call   c0001b4c <ld_word>
c00023c4:	66 09 c7             	or     di,ax
c00023c7:	0f 85 be fe ff ff    	jne    c000228b <mount_volume+0xc6>
c00023cd:	8d 46 60             	lea    eax,[esi+0x60]
c00023d0:	c1 e5 02             	shl    ebp,0x2
c00023d3:	e8 81 f7 ff ff       	call   c0001b59 <ld_dword>
c00023d8:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00023db:	eb 22                	jmp    c00023ff <mount_volume+0x23a>
c00023dd:	66 85 ff             	test   di,di
c00023e0:	0f 84 a5 fe ff ff    	je     c000228b <mount_volume+0xc6>
c00023e6:	01 c8                	add    eax,ecx
c00023e8:	83 fb 02             	cmp    ebx,0x2
c00023eb:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00023ee:	75 04                	jne    c00023f4 <mount_volume+0x22f>
c00023f0:	01 ed                	add    ebp,ebp
c00023f2:	eb 0b                	jmp    c00023ff <mount_volume+0x23a>
c00023f4:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00023f8:	83 e5 01             	and    ebp,0x1
c00023fb:	d1 e8                	shr    eax,1
c00023fd:	01 c5                	add    ebp,eax
c00023ff:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c0002405:	c1 ed 09             	shr    ebp,0x9
c0002408:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000240c:	0f 87 79 fe ff ff    	ja     c000228b <mount_volume+0xc6>
c0002412:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002419:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002420:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002424:	83 fb 03             	cmp    ebx,0x3
c0002427:	75 6e                	jne    c0002497 <mount_volume+0x2d2>
c0002429:	8d 46 64             	lea    eax,[esi+0x64]
c000242c:	e8 1b f7 ff ff       	call   c0001b4c <ld_word>
c0002431:	66 48                	dec    ax
c0002433:	75 62                	jne    c0002497 <mount_volume+0x2d2>
c0002435:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002439:	89 f0                	mov    eax,esi
c000243b:	42                   	inc    edx
c000243c:	e8 31 fc ff ff       	call   c0002072 <move_window>
c0002441:	85 c0                	test   eax,eax
c0002443:	75 52                	jne    c0002497 <mount_volume+0x2d2>
c0002445:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002449:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000244f:	e8 f8 f6 ff ff       	call   c0001b4c <ld_word>
c0002454:	66 3d 55 aa          	cmp    ax,0xaa55
c0002458:	75 3d                	jne    c0002497 <mount_volume+0x2d2>
c000245a:	8d 46 34             	lea    eax,[esi+0x34]
c000245d:	e8 f7 f6 ff ff       	call   c0001b59 <ld_dword>
c0002462:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002467:	75 2e                	jne    c0002497 <mount_volume+0x2d2>
c0002469:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000246f:	e8 e5 f6 ff ff       	call   c0001b59 <ld_dword>
c0002474:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002479:	75 1c                	jne    c0002497 <mount_volume+0x2d2>
c000247b:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002481:	e8 d3 f6 ff ff       	call   c0001b59 <ld_dword>
c0002486:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002489:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000248f:	e8 c5 f6 ff ff       	call   c0001b59 <ld_dword>
c0002494:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002497:	66 a1 80 f1 01 c0    	mov    ax,ds:0xc001f180
c000249d:	88 1e                	mov    BYTE PTR [esi],bl
c000249f:	40                   	inc    eax
c00024a0:	31 db                	xor    ebx,ebx
c00024a2:	66 a3 80 f1 01 c0    	mov    ds:0xc001f180,ax
c00024a8:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00024ac:	eb 10                	jmp    c00024be <mount_volume+0x2f9>
c00024ae:	31 db                	xor    ebx,ebx
c00024b0:	3d f5 0f 00 00       	cmp    eax,0xff5
c00024b5:	0f 97 c3             	seta   bl
c00024b8:	43                   	inc    ebx
c00024b9:	e9 d6 fe ff ff       	jmp    c0002394 <mount_volume+0x1cf>
c00024be:	83 c4 2c             	add    esp,0x2c
c00024c1:	89 d8                	mov    eax,ebx
c00024c3:	5b                   	pop    ebx
c00024c4:	5e                   	pop    esi
c00024c5:	5f                   	pop    edi
c00024c6:	5d                   	pop    ebp
c00024c7:	c3                   	ret    

c00024c8 <put_fat>:
c00024c8:	55                   	push   ebp
c00024c9:	bd 02 00 00 00       	mov    ebp,0x2
c00024ce:	57                   	push   edi
c00024cf:	56                   	push   esi
c00024d0:	53                   	push   ebx
c00024d1:	83 ec 1c             	sub    esp,0x1c
c00024d4:	83 fa 01             	cmp    edx,0x1
c00024d7:	0f 86 31 01 00 00    	jbe    c000260e <put_fat+0x146>
c00024dd:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00024e0:	0f 86 28 01 00 00    	jbe    c000260e <put_fat+0x146>
c00024e6:	89 c6                	mov    esi,eax
c00024e8:	89 cf                	mov    edi,ecx
c00024ea:	8a 00                	mov    al,BYTE PTR [eax]
c00024ec:	89 d3                	mov    ebx,edx
c00024ee:	3c 02                	cmp    al,0x2
c00024f0:	0f 84 ac 00 00 00    	je     c00025a2 <put_fat+0xda>
c00024f6:	3c 03                	cmp    al,0x3
c00024f8:	0f 84 d1 00 00 00    	je     c00025cf <put_fat+0x107>
c00024fe:	fe c8                	dec    al
c0002500:	0f 85 08 01 00 00    	jne    c000260e <put_fat+0x146>
c0002506:	89 d1                	mov    ecx,edx
c0002508:	89 f0                	mov    eax,esi
c000250a:	d1 e9                	shr    ecx,1
c000250c:	01 d1                	add    ecx,edx
c000250e:	89 ca                	mov    edx,ecx
c0002510:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002514:	c1 ea 09             	shr    edx,0x9
c0002517:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000251a:	e8 53 fb ff ff       	call   c0002072 <move_window>
c000251f:	89 c5                	mov    ebp,eax
c0002521:	85 c0                	test   eax,eax
c0002523:	0f 85 e5 00 00 00    	jne    c000260e <put_fat+0x146>
c0002529:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000252d:	8d 46 34             	lea    eax,[esi+0x34]
c0002530:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002534:	8d 41 01             	lea    eax,[ecx+0x1]
c0002537:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000253d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002541:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002545:	89 f8                	mov    eax,edi
c0002547:	83 e3 01             	and    ebx,0x1
c000254a:	74 0c                	je     c0002558 <put_fat+0x90>
c000254c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000254e:	89 f8                	mov    eax,edi
c0002550:	83 e2 0f             	and    edx,0xf
c0002553:	c1 e0 04             	shl    eax,0x4
c0002556:	09 d0                	or     eax,edx
c0002558:	88 01                	mov    BYTE PTR [ecx],al
c000255a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000255e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002562:	c1 ea 09             	shr    edx,0x9
c0002565:	89 f0                	mov    eax,esi
c0002567:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000256a:	e8 03 fb ff ff       	call   c0002072 <move_window>
c000256f:	89 c5                	mov    ebp,eax
c0002571:	85 c0                	test   eax,eax
c0002573:	0f 85 95 00 00 00    	jne    c000260e <put_fat+0x146>
c0002579:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000257d:	25 ff 01 00 00       	and    eax,0x1ff
c0002582:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002586:	85 db                	test   ebx,ebx
c0002588:	74 07                	je     c0002591 <put_fat+0xc9>
c000258a:	c1 ef 04             	shr    edi,0x4
c000258d:	89 f9                	mov    ecx,edi
c000258f:	eb 0d                	jmp    c000259e <put_fat+0xd6>
c0002591:	8a 08                	mov    cl,BYTE PTR [eax]
c0002593:	c1 ef 08             	shr    edi,0x8
c0002596:	83 e1 f0             	and    ecx,0xfffffff0
c0002599:	83 e7 0f             	and    edi,0xf
c000259c:	09 f9                	or     ecx,edi
c000259e:	88 08                	mov    BYTE PTR [eax],cl
c00025a0:	eb 27                	jmp    c00025c9 <put_fat+0x101>
c00025a2:	c1 ea 08             	shr    edx,0x8
c00025a5:	89 f0                	mov    eax,esi
c00025a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00025aa:	e8 c3 fa ff ff       	call   c0002072 <move_window>
c00025af:	89 c5                	mov    ebp,eax
c00025b1:	85 c0                	test   eax,eax
c00025b3:	75 59                	jne    c000260e <put_fat+0x146>
c00025b5:	01 db                	add    ebx,ebx
c00025b7:	0f b7 d7             	movzx  edx,di
c00025ba:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00025c0:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00025c4:	e8 a8 f5 ff ff       	call   c0001b71 <st_word>
c00025c9:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00025cd:	eb 3f                	jmp    c000260e <put_fat+0x146>
c00025cf:	c1 ea 07             	shr    edx,0x7
c00025d2:	89 f0                	mov    eax,esi
c00025d4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00025d7:	e8 96 fa ff ff       	call   c0002072 <move_window>
c00025dc:	89 c5                	mov    ebp,eax
c00025de:	85 c0                	test   eax,eax
c00025e0:	75 2c                	jne    c000260e <put_fat+0x146>
c00025e2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00025e8:	c1 e3 02             	shl    ebx,0x2
c00025eb:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00025f1:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00025f5:	89 d8                	mov    eax,ebx
c00025f7:	e8 5d f5 ff ff       	call   c0001b59 <ld_dword>
c00025fc:	25 00 00 00 f0       	and    eax,0xf0000000
c0002601:	09 f8                	or     eax,edi
c0002603:	89 c2                	mov    edx,eax
c0002605:	89 d8                	mov    eax,ebx
c0002607:	e8 69 f5 ff ff       	call   c0001b75 <st_dword>
c000260c:	eb bb                	jmp    c00025c9 <put_fat+0x101>
c000260e:	83 c4 1c             	add    esp,0x1c
c0002611:	89 e8                	mov    eax,ebp
c0002613:	5b                   	pop    ebx
c0002614:	5e                   	pop    esi
c0002615:	5f                   	pop    edi
c0002616:	5d                   	pop    ebp
c0002617:	c3                   	ret    

c0002618 <dir_clear>:
c0002618:	55                   	push   ebp
c0002619:	57                   	push   edi
c000261a:	56                   	push   esi
c000261b:	89 c6                	mov    esi,eax
c000261d:	53                   	push   ebx
c000261e:	83 ec 1c             	sub    esp,0x1c
c0002621:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002625:	e8 e5 f9 ff ff       	call   c000200f <sync_window>
c000262a:	85 c0                	test   eax,eax
c000262c:	0f 85 c0 00 00 00    	jne    c00026f2 <dir_clear+0xda>
c0002632:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002636:	89 f0                	mov    eax,esi
c0002638:	e8 55 f7 ff ff       	call   c0001d92 <clst2sect>
c000263d:	31 d2                	xor    edx,edx
c000263f:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002642:	89 c5                	mov    ebp,eax
c0002644:	b9 00 02 00 00       	mov    ecx,0x200
c0002649:	8d 46 34             	lea    eax,[esi+0x34]
c000264c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002650:	e8 38 f5 ff ff       	call   c0001b8d <mem_set>
c0002655:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002659:	c1 e3 09             	shl    ebx,0x9
c000265c:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002662:	76 1b                	jbe    c000267f <dir_clear+0x67>
c0002664:	bb 00 80 00 00       	mov    ebx,0x8000
c0002669:	eb 14                	jmp    c000267f <dir_clear+0x67>
c000266b:	83 ec 0c             	sub    esp,0xc
c000266e:	53                   	push   ebx
c000266f:	e8 24 32 00 00       	call   c0005898 <ff_memalloc>
c0002674:	83 c4 10             	add    esp,0x10
c0002677:	89 c7                	mov    edi,eax
c0002679:	85 c0                	test   eax,eax
c000267b:	75 7c                	jne    c00026f9 <dir_clear+0xe1>
c000267d:	d1 eb                	shr    ebx,1
c000267f:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002685:	77 e4                	ja     c000266b <dir_clear+0x53>
c0002687:	31 db                	xor    ebx,ebx
c0002689:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000268d:	39 d8                	cmp    eax,ebx
c000268f:	76 53                	jbe    c00026e4 <dir_clear+0xcc>
c0002691:	6a 01                	push   0x1
c0002693:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002696:	50                   	push   eax
c0002697:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000269b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000269f:	50                   	push   eax
c00026a0:	e8 72 f4 ff ff       	call   c0001b17 <disk_write>
c00026a5:	83 c4 10             	add    esp,0x10
c00026a8:	85 c0                	test   eax,eax
c00026aa:	75 38                	jne    c00026e4 <dir_clear+0xcc>
c00026ac:	43                   	inc    ebx
c00026ad:	eb da                	jmp    c0002689 <dir_clear+0x71>
c00026af:	52                   	push   edx
c00026b0:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00026b3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00026b7:	50                   	push   eax
c00026b8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026bc:	57                   	push   edi
c00026bd:	50                   	push   eax
c00026be:	e8 54 f4 ff ff       	call   c0001b17 <disk_write>
c00026c3:	83 c4 10             	add    esp,0x10
c00026c6:	85 c0                	test   eax,eax
c00026c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026cc:	75 0a                	jne    c00026d8 <dir_clear+0xc0>
c00026ce:	01 d3                	add    ebx,edx
c00026d0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00026d4:	39 d8                	cmp    eax,ebx
c00026d6:	77 d7                	ja     c00026af <dir_clear+0x97>
c00026d8:	83 ec 0c             	sub    esp,0xc
c00026db:	57                   	push   edi
c00026dc:	e8 cf 31 00 00       	call   c00058b0 <ff_memfree>
c00026e1:	83 c4 10             	add    esp,0x10
c00026e4:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00026e8:	39 d8                	cmp    eax,ebx
c00026ea:	0f 95 c0             	setne  al
c00026ed:	0f b6 c0             	movzx  eax,al
c00026f0:	eb 19                	jmp    c000270b <dir_clear+0xf3>
c00026f2:	b8 01 00 00 00       	mov    eax,0x1
c00026f7:	eb 12                	jmp    c000270b <dir_clear+0xf3>
c00026f9:	89 d9                	mov    ecx,ebx
c00026fb:	31 d2                	xor    edx,edx
c00026fd:	e8 8b f4 ff ff       	call   c0001b8d <mem_set>
c0002702:	89 da                	mov    edx,ebx
c0002704:	31 db                	xor    ebx,ebx
c0002706:	c1 ea 09             	shr    edx,0x9
c0002709:	eb c5                	jmp    c00026d0 <dir_clear+0xb8>
c000270b:	83 c4 1c             	add    esp,0x1c
c000270e:	5b                   	pop    ebx
c000270f:	5e                   	pop    esi
c0002710:	5f                   	pop    edi
c0002711:	5d                   	pop    ebp
c0002712:	c3                   	ret    

c0002713 <create_name>:
c0002713:	55                   	push   ebp
c0002714:	89 d5                	mov    ebp,edx
c0002716:	57                   	push   edi
c0002717:	89 c7                	mov    edi,eax
c0002719:	56                   	push   esi
c000271a:	31 f6                	xor    esi,esi
c000271c:	53                   	push   ebx
c000271d:	83 ec 3c             	sub    esp,0x3c
c0002720:	8b 02                	mov    eax,DWORD PTR [edx]
c0002722:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002726:	8b 07                	mov    eax,DWORD PTR [edi]
c0002728:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000272b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000272f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002733:	e8 9b f4 ff ff       	call   c0001bd3 <tchar2uni>
c0002738:	89 c3                	mov    ebx,eax
c000273a:	83 f8 ff             	cmp    eax,0xffffffff
c000273d:	75 0a                	jne    c0002749 <create_name+0x36>
c000273f:	b8 06 00 00 00       	mov    eax,0x6
c0002744:	e9 9e 02 00 00       	jmp    c00029e7 <create_name+0x2d4>
c0002749:	3d ff ff 00 00       	cmp    eax,0xffff
c000274e:	76 0c                	jbe    c000275c <create_name+0x49>
c0002750:	c1 e8 10             	shr    eax,0x10
c0002753:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002757:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000275b:	46                   	inc    esi
c000275c:	66 83 fb 1f          	cmp    bx,0x1f
c0002760:	76 4f                	jbe    c00027b1 <create_name+0x9e>
c0002762:	66 83 fb 5c          	cmp    bx,0x5c
c0002766:	74 35                	je     c000279d <create_name+0x8a>
c0002768:	66 83 fb 2f          	cmp    bx,0x2f
c000276c:	74 2f                	je     c000279d <create_name+0x8a>
c000276e:	66 83 fb 7f          	cmp    bx,0x7f
c0002772:	77 11                	ja     c0002785 <create_name+0x72>
c0002774:	0f b7 d3             	movzx  edx,bx
c0002777:	b8 c2 c2 01 c0       	mov    eax,0xc001c2c2
c000277c:	e8 3a f4 ff ff       	call   c0001bbb <chk_chr>
c0002781:	85 c0                	test   eax,eax
c0002783:	75 ba                	jne    c000273f <create_name+0x2c>
c0002785:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000278b:	77 b2                	ja     c000273f <create_name+0x2c>
c000278d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002791:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002795:	46                   	inc    esi
c0002796:	eb 97                	jmp    c000272f <create_name+0x1c>
c0002798:	40                   	inc    eax
c0002799:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000279d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00027a1:	8a 10                	mov    dl,BYTE PTR [eax]
c00027a3:	80 fa 2f             	cmp    dl,0x2f
c00027a6:	74 f0                	je     c0002798 <create_name+0x85>
c00027a8:	80 fa 5c             	cmp    dl,0x5c
c00027ab:	74 eb                	je     c0002798 <create_name+0x85>
c00027ad:	31 db                	xor    ebx,ebx
c00027af:	eb 02                	jmp    c00027b3 <create_name+0xa0>
c00027b1:	b3 04                	mov    bl,0x4
c00027b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00027b7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00027ba:	85 f6                	test   esi,esi
c00027bc:	74 18                	je     c00027d6 <create_name+0xc3>
c00027be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027c2:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c00027c7:	66 83 f8 20          	cmp    ax,0x20
c00027cb:	74 06                	je     c00027d3 <create_name+0xc0>
c00027cd:	66 83 f8 2e          	cmp    ax,0x2e
c00027d1:	75 03                	jne    c00027d6 <create_name+0xc3>
c00027d3:	4e                   	dec    esi
c00027d4:	eb e4                	jmp    c00027ba <create_name+0xa7>
c00027d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027da:	31 ed                	xor    ebp,ebp
c00027dc:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00027e2:	85 f6                	test   esi,esi
c00027e4:	0f 84 55 ff ff ff    	je     c000273f <create_name+0x2c>
c00027ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027ee:	8d 55 01             	lea    edx,[ebp+0x1]
c00027f1:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00027f5:	66 83 f8 20          	cmp    ax,0x20
c00027f9:	75 04                	jne    c00027ff <create_name+0xec>
c00027fb:	89 d5                	mov    ebp,edx
c00027fd:	eb eb                	jmp    c00027ea <create_name+0xd7>
c00027ff:	85 ed                	test   ebp,ebp
c0002801:	75 06                	jne    c0002809 <create_name+0xf6>
c0002803:	66 83 f8 2e          	cmp    ax,0x2e
c0002807:	75 08                	jne    c0002811 <create_name+0xfe>
c0002809:	83 cb 03             	or     ebx,0x3
c000280c:	eb 03                	jmp    c0002811 <create_name+0xfe>
c000280e:	4e                   	dec    esi
c000280f:	74 0c                	je     c000281d <create_name+0x10a>
c0002811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002815:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c000281b:	75 f1                	jne    c000280e <create_name+0xfb>
c000281d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002822:	8d 47 20             	lea    eax,[edi+0x20]
c0002825:	ba 20 00 00 00       	mov    edx,0x20
c000282a:	e8 5e f3 ff ff       	call   c0001b8d <mem_set>
c000282f:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002837:	31 c9                	xor    ecx,ecx
c0002839:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000283e:	8d 45 01             	lea    eax,[ebp+0x1]
c0002841:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002849:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c000284d:	66 85 ed             	test   bp,bp
c0002850:	0f 84 30 01 00 00    	je     c0002986 <create_name+0x273>
c0002856:	66 83 fd 20          	cmp    bp,0x20
c000285a:	74 10                	je     c000286c <create_name+0x159>
c000285c:	66 83 fd 2e          	cmp    bp,0x2e
c0002860:	75 13                	jne    c0002875 <create_name+0x162>
c0002862:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002866:	0f 84 6b 01 00 00    	je     c00029d7 <create_name+0x2c4>
c000286c:	83 cb 03             	or     ebx,0x3
c000286f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002873:	eb c9                	jmp    c000283e <create_name+0x12b>
c0002875:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002879:	73 0b                	jae    c0002886 <create_name+0x173>
c000287b:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c000287f:	75 47                	jne    c00028c8 <create_name+0x1b5>
c0002881:	e9 51 01 00 00       	jmp    c00029d7 <create_name+0x2c4>
c0002886:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c000288b:	75 10                	jne    c000289d <create_name+0x18a>
c000288d:	83 cb 03             	or     ebx,0x3
c0002890:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002898:	e9 e9 00 00 00       	jmp    c0002986 <create_name+0x273>
c000289d:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c00028a1:	74 0d                	je     c00028b0 <create_name+0x19d>
c00028a3:	83 cb 03             	or     ebx,0x3
c00028a6:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c00028aa:	0f 87 d6 00 00 00    	ja     c0002986 <create_name+0x273>
c00028b0:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c00028b5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00028b9:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c00028c1:	b9 08 00 00 00       	mov    ecx,0x8
c00028c6:	eb a7                	jmp    c000286f <create_name+0x15c>
c00028c8:	66 83 fd 7f          	cmp    bp,0x7f
c00028cc:	76 68                	jbe    c0002936 <create_name+0x223>
c00028ce:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00028d2:	88 da                	mov    dl,bl
c00028d4:	83 ca 02             	or     edx,0x2
c00028d7:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c00028db:	50                   	push   eax
c00028dc:	50                   	push   eax
c00028dd:	68 b5 01 00 00       	push   0x1b5
c00028e2:	55                   	push   ebp
c00028e3:	e8 e0 2f 00 00       	call   c00058c8 <ff_uni2oem>
c00028e8:	83 c4 10             	add    esp,0x10
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	a8 80                	test   al,0x80
c00028ef:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00028f3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00028f7:	74 0c                	je     c0002905 <create_name+0x1f2>
c00028f9:	83 e5 7f             	and    ebp,0x7f
c00028fc:	0f b6 ad 80 c3 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe3c80]
c0002903:	eb 2a                	jmp    c000292f <create_name+0x21c>
c0002905:	66 3d ff 00          	cmp    ax,0xff
c0002909:	76 24                	jbe    c000292f <create_name+0x21c>
c000290b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000290f:	48                   	dec    eax
c0002910:	39 c8                	cmp    eax,ecx
c0002912:	77 0c                	ja     c0002920 <create_name+0x20d>
c0002914:	83 cb 03             	or     ebx,0x3
c0002917:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000291b:	e9 4f ff ff ff       	jmp    c000286f <create_name+0x15c>
c0002920:	89 e8                	mov    eax,ebp
c0002922:	88 d3                	mov    bl,dl
c0002924:	66 c1 e8 08          	shr    ax,0x8
c0002928:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c000292c:	41                   	inc    ecx
c000292d:	eb 4b                	jmp    c000297a <create_name+0x267>
c000292f:	88 d3                	mov    bl,dl
c0002931:	66 85 ed             	test   bp,bp
c0002934:	74 19                	je     c000294f <create_name+0x23c>
c0002936:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000293a:	0f b7 d5             	movzx  edx,bp
c000293d:	b8 cb c2 01 c0       	mov    eax,0xc001c2cb
c0002942:	e8 74 f2 ff ff       	call   c0001bbb <chk_chr>
c0002947:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000294b:	85 c0                	test   eax,eax
c000294d:	74 0a                	je     c0002959 <create_name+0x246>
c000294f:	83 cb 03             	or     ebx,0x3
c0002952:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002957:	eb 21                	jmp    c000297a <create_name+0x267>
c0002959:	8d 45 bf             	lea    eax,[ebp-0x41]
c000295c:	66 83 f8 19          	cmp    ax,0x19
c0002960:	77 07                	ja     c0002969 <create_name+0x256>
c0002962:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002967:	eb 11                	jmp    c000297a <create_name+0x267>
c0002969:	8d 45 9f             	lea    eax,[ebp-0x61]
c000296c:	66 83 f8 19          	cmp    ax,0x19
c0002970:	77 08                	ja     c000297a <create_name+0x267>
c0002972:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002977:	83 ed 20             	sub    ebp,0x20
c000297a:	89 e8                	mov    eax,ebp
c000297c:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002980:	41                   	inc    ecx
c0002981:	e9 e9 fe ff ff       	jmp    c000286f <create_name+0x15c>
c0002986:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c000298a:	75 04                	jne    c0002990 <create_name+0x27d>
c000298c:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002990:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002995:	75 05                	jne    c000299c <create_name+0x289>
c0002997:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c000299c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00029a0:	83 e0 0c             	and    eax,0xc
c00029a3:	3c 0c                	cmp    al,0xc
c00029a5:	74 0b                	je     c00029b2 <create_name+0x29f>
c00029a7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00029ab:	83 e0 03             	and    eax,0x3
c00029ae:	3c 03                	cmp    al,0x3
c00029b0:	75 05                	jne    c00029b7 <create_name+0x2a4>
c00029b2:	83 cb 02             	or     ebx,0x2
c00029b5:	eb 19                	jmp    c00029d0 <create_name+0x2bd>
c00029b7:	f6 c3 02             	test   bl,0x2
c00029ba:	75 14                	jne    c00029d0 <create_name+0x2bd>
c00029bc:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00029c1:	74 03                	je     c00029c6 <create_name+0x2b3>
c00029c3:	83 cb 10             	or     ebx,0x10
c00029c6:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c00029cb:	74 03                	je     c00029d0 <create_name+0x2bd>
c00029cd:	83 cb 08             	or     ebx,0x8
c00029d0:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c00029d3:	31 c0                	xor    eax,eax
c00029d5:	eb 10                	jmp    c00029e7 <create_name+0x2d4>
c00029d7:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c00029dc:	0f 85 ce fe ff ff    	jne    c00028b0 <create_name+0x19d>
c00029e2:	e9 a6 fe ff ff       	jmp    c000288d <create_name+0x17a>
c00029e7:	83 c4 3c             	add    esp,0x3c
c00029ea:	5b                   	pop    ebx
c00029eb:	5e                   	pop    esi
c00029ec:	5f                   	pop    edi
c00029ed:	5d                   	pop    ebp
c00029ee:	c3                   	ret    

c00029ef <cmp_lfn>:
c00029ef:	55                   	push   ebp
c00029f0:	57                   	push   edi
c00029f1:	89 d7                	mov    edi,edx
c00029f3:	56                   	push   esi
c00029f4:	53                   	push   ebx
c00029f5:	83 ec 1c             	sub    esp,0x1c
c00029f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00029fc:	8d 42 1a             	lea    eax,[edx+0x1a]
c00029ff:	e8 48 f1 ff ff       	call   c0001b4c <ld_word>
c0002a04:	66 85 c0             	test   ax,ax
c0002a07:	74 07                	je     c0002a10 <cmp_lfn+0x21>
c0002a09:	31 c0                	xor    eax,eax
c0002a0b:	e9 9a 00 00 00       	jmp    c0002aaa <cmp_lfn+0xbb>
c0002a10:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002a12:	bd 01 00 00 00       	mov    ebp,0x1
c0002a17:	83 e3 3f             	and    ebx,0x3f
c0002a1a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002a22:	4b                   	dec    ebx
c0002a23:	6b db 0d             	imul   ebx,ebx,0xd
c0002a26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a2a:	0f b6 80 00 c4 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe3c00]
c0002a31:	01 f8                	add    eax,edi
c0002a33:	e8 14 f1 ff ff       	call   c0001b4c <ld_word>
c0002a38:	66 85 ed             	test   bp,bp
c0002a3b:	89 c6                	mov    esi,eax
c0002a3d:	74 3c                	je     c0002a7b <cmp_lfn+0x8c>
c0002a3f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002a45:	77 c2                	ja     c0002a09 <cmp_lfn+0x1a>
c0002a47:	83 ec 0c             	sub    esp,0xc
c0002a4a:	0f b7 c0             	movzx  eax,ax
c0002a4d:	50                   	push   eax
c0002a4e:	e8 8d 2f 00 00       	call   c00059e0 <ff_wtoupper>
c0002a53:	89 c5                	mov    ebp,eax
c0002a55:	8d 43 01             	lea    eax,[ebx+0x1]
c0002a58:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002a5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002a60:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002a64:	89 04 24             	mov    DWORD PTR [esp],eax
c0002a67:	e8 74 2f 00 00       	call   c00059e0 <ff_wtoupper>
c0002a6c:	83 c4 10             	add    esp,0x10
c0002a6f:	39 c5                	cmp    ebp,eax
c0002a71:	75 96                	jne    c0002a09 <cmp_lfn+0x1a>
c0002a73:	89 f5                	mov    ebp,esi
c0002a75:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002a79:	eb 04                	jmp    c0002a7f <cmp_lfn+0x90>
c0002a7b:	66 46                	inc    si
c0002a7d:	75 8a                	jne    c0002a09 <cmp_lfn+0x1a>
c0002a7f:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002a83:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002a88:	75 9c                	jne    c0002a26 <cmp_lfn+0x37>
c0002a8a:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002a8d:	74 16                	je     c0002aa5 <cmp_lfn+0xb6>
c0002a8f:	66 85 ed             	test   bp,bp
c0002a92:	74 11                	je     c0002aa5 <cmp_lfn+0xb6>
c0002a94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002a98:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002a9d:	0f 94 c0             	sete   al
c0002aa0:	0f b6 c0             	movzx  eax,al
c0002aa3:	eb 05                	jmp    c0002aaa <cmp_lfn+0xbb>
c0002aa5:	b8 01 00 00 00       	mov    eax,0x1
c0002aaa:	83 c4 1c             	add    esp,0x1c
c0002aad:	5b                   	pop    ebx
c0002aae:	5e                   	pop    esi
c0002aaf:	5f                   	pop    edi
c0002ab0:	5d                   	pop    ebp
c0002ab1:	c3                   	ret    

c0002ab2 <sync_fs>:
c0002ab2:	56                   	push   esi
c0002ab3:	53                   	push   ebx
c0002ab4:	53                   	push   ebx
c0002ab5:	89 c3                	mov    ebx,eax
c0002ab7:	e8 53 f5 ff ff       	call   c000200f <sync_window>
c0002abc:	85 c0                	test   eax,eax
c0002abe:	0f 85 9a 00 00 00    	jne    c0002b5e <sync_fs+0xac>
c0002ac4:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002ac7:	75 7b                	jne    c0002b44 <sync_fs+0x92>
c0002ac9:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002acd:	75 75                	jne    c0002b44 <sync_fs+0x92>
c0002acf:	b9 00 02 00 00       	mov    ecx,0x200
c0002ad4:	8d 73 34             	lea    esi,[ebx+0x34]
c0002ad7:	31 d2                	xor    edx,edx
c0002ad9:	89 f0                	mov    eax,esi
c0002adb:	e8 ad f0 ff ff       	call   c0001b8d <mem_set>
c0002ae0:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ae6:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002aeb:	e8 81 f0 ff ff       	call   c0001b71 <st_word>
c0002af0:	ba 52 52 61 41       	mov    edx,0x41615252
c0002af5:	89 f0                	mov    eax,esi
c0002af7:	e8 79 f0 ff ff       	call   c0001b75 <st_dword>
c0002afc:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002b02:	ba 72 72 41 61       	mov    edx,0x61417272
c0002b07:	e8 69 f0 ff ff       	call   c0001b75 <st_dword>
c0002b0c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002b0f:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002b15:	e8 5b f0 ff ff       	call   c0001b75 <st_dword>
c0002b1a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002b1d:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002b23:	e8 4d f0 ff ff       	call   c0001b75 <st_dword>
c0002b28:	6a 01                	push   0x1
c0002b2a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002b2d:	40                   	inc    eax
c0002b2e:	50                   	push   eax
c0002b2f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002b32:	56                   	push   esi
c0002b33:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002b37:	50                   	push   eax
c0002b38:	e8 da ef ff ff       	call   c0001b17 <disk_write>
c0002b3d:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002b41:	83 c4 10             	add    esp,0x10
c0002b44:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002b48:	51                   	push   ecx
c0002b49:	6a 00                	push   0x0
c0002b4b:	6a 00                	push   0x0
c0002b4d:	50                   	push   eax
c0002b4e:	e8 da ef ff ff       	call   c0001b2d <disk_ioctl>
c0002b53:	83 c4 10             	add    esp,0x10
c0002b56:	85 c0                	test   eax,eax
c0002b58:	0f 95 c0             	setne  al
c0002b5b:	0f b6 c0             	movzx  eax,al
c0002b5e:	5a                   	pop    edx
c0002b5f:	5b                   	pop    ebx
c0002b60:	5e                   	pop    esi
c0002b61:	c3                   	ret    

c0002b62 <create_partition>:
c0002b62:	55                   	push   ebp
c0002b63:	0f b6 c0             	movzx  eax,al
c0002b66:	57                   	push   edi
c0002b67:	56                   	push   esi
c0002b68:	53                   	push   ebx
c0002b69:	83 ec 40             	sub    esp,0x40
c0002b6c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b70:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002b74:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b78:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002b7c:	50                   	push   eax
c0002b7d:	6a 01                	push   0x1
c0002b7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002b83:	e8 a5 ef ff ff       	call   c0001b2d <disk_ioctl>
c0002b88:	83 c4 10             	add    esp,0x10
c0002b8b:	85 c0                	test   eax,eax
c0002b8d:	0f 85 69 01 00 00    	jne    c0002cfc <create_partition+0x19a>
c0002b93:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002b97:	b9 05 00 00 00       	mov    ecx,0x5
c0002b9c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ba0:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002ba5:	31 d2                	xor    edx,edx
c0002ba7:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002bac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bb0:	f7 f3                	div    ebx
c0002bb2:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002bb7:	76 0c                	jbe    c0002bc5 <create_partition+0x63>
c0002bb9:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002bbd:	49                   	dec    ecx
c0002bbe:	75 e5                	jne    c0002ba5 <create_partition+0x43>
c0002bc0:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002bc5:	b9 00 02 00 00       	mov    ecx,0x200
c0002bca:	31 d2                	xor    edx,edx
c0002bcc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002bd0:	e8 b8 ef ff ff       	call   c0001b8d <mem_set>
c0002bd5:	b9 64 00 00 00       	mov    ecx,0x64
c0002bda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bde:	31 d2                	xor    edx,edx
c0002be0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002be8:	f7 f1                	div    ecx
c0002bea:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002bef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002bf3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002bf7:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002bfd:	85 c9                	test   ecx,ecx
c0002bff:	75 34                	jne    c0002c35 <create_partition+0xd3>
c0002c01:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002c05:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002c0a:	05 fe 01 00 00       	add    eax,0x1fe
c0002c0f:	e8 5d ef ff ff       	call   c0001b71 <st_word>
c0002c14:	6a 01                	push   0x1
c0002c16:	6a 00                	push   0x0
c0002c18:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002c1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002c20:	e8 f2 ee ff ff       	call   c0001b17 <disk_write>
c0002c25:	83 c4 10             	add    esp,0x10
c0002c28:	85 c0                	test   eax,eax
c0002c2a:	0f 95 c0             	setne  al
c0002c2d:	0f b6 c0             	movzx  eax,al
c0002c30:	e9 cc 00 00 00       	jmp    c0002d01 <create_partition+0x19f>
c0002c35:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002c39:	76 c6                	jbe    c0002c01 <create_partition+0x9f>
c0002c3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002c3f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002c43:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002c46:	83 fe 64             	cmp    esi,0x64
c0002c49:	77 0d                	ja     c0002c58 <create_partition+0xf6>
c0002c4b:	74 07                	je     c0002c54 <create_partition+0xf2>
c0002c4d:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002c52:	eb 04                	jmp    c0002c58 <create_partition+0xf6>
c0002c54:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002c58:	31 c0                	xor    eax,eax
c0002c5a:	89 f2                	mov    edx,esi
c0002c5c:	01 ca                	add    edx,ecx
c0002c5e:	0f 92 c0             	setb   al
c0002c61:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002c65:	77 04                	ja     c0002c6b <create_partition+0x109>
c0002c67:	85 c0                	test   eax,eax
c0002c69:	74 08                	je     c0002c73 <create_partition+0x111>
c0002c6b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002c6f:	29 ce                	sub    esi,ecx
c0002c71:	eb 04                	jmp    c0002c77 <create_partition+0x115>
c0002c73:	85 f6                	test   esi,esi
c0002c75:	74 8a                	je     c0002c01 <create_partition+0x9f>
c0002c77:	89 ca                	mov    edx,ecx
c0002c79:	89 d8                	mov    eax,ebx
c0002c7b:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002c80:	e8 f0 ee ff ff       	call   c0001b75 <st_dword>
c0002c85:	8d 43 04             	lea    eax,[ebx+0x4]
c0002c88:	89 f2                	mov    edx,esi
c0002c8a:	83 c3 10             	add    ebx,0x10
c0002c8d:	e8 e3 ee ff ff       	call   c0001b75 <st_dword>
c0002c92:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002c97:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002c9b:	31 d2                	xor    edx,edx
c0002c9d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002ca0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002ca4:	89 c8                	mov    eax,ecx
c0002ca6:	01 f1                	add    ecx,esi
c0002ca8:	f7 f5                	div    ebp
c0002caa:	89 d5                	mov    ebp,edx
c0002cac:	31 d2                	xor    edx,edx
c0002cae:	45                   	inc    ebp
c0002caf:	f7 f7                	div    edi
c0002cb1:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002cb4:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002cb7:	89 c2                	mov    edx,eax
c0002cb9:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002cbc:	c1 ea 02             	shr    edx,0x2
c0002cbf:	83 e2 c0             	and    edx,0xffffffc0
c0002cc2:	09 ea                	or     edx,ebp
c0002cc4:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002cc9:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002ccc:	31 d2                	xor    edx,edx
c0002cce:	f7 f5                	div    ebp
c0002cd0:	89 d6                	mov    esi,edx
c0002cd2:	31 d2                	xor    edx,edx
c0002cd4:	46                   	inc    esi
c0002cd5:	f7 f7                	div    edi
c0002cd7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002cda:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002cdd:	89 c7                	mov    edi,eax
c0002cdf:	c1 ef 02             	shr    edi,0x2
c0002ce2:	83 e7 c0             	and    edi,0xffffffc0
c0002ce5:	09 fe                	or     esi,edi
c0002ce7:	89 f2                	mov    edx,esi
c0002ce9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002cec:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002cf1:	0f 85 06 ff ff ff    	jne    c0002bfd <create_partition+0x9b>
c0002cf7:	e9 05 ff ff ff       	jmp    c0002c01 <create_partition+0x9f>
c0002cfc:	b8 01 00 00 00       	mov    eax,0x1
c0002d01:	83 c4 3c             	add    esp,0x3c
c0002d04:	5b                   	pop    ebx
c0002d05:	5e                   	pop    esi
c0002d06:	5f                   	pop    edi
c0002d07:	5d                   	pop    ebp
c0002d08:	c3                   	ret    

c0002d09 <get_fileinfo>:
c0002d09:	55                   	push   ebp
c0002d0a:	57                   	push   edi
c0002d0b:	56                   	push   esi
c0002d0c:	53                   	push   ebx
c0002d0d:	83 ec 1c             	sub    esp,0x1c
c0002d10:	8b 30                	mov    esi,DWORD PTR [eax]
c0002d12:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002d16:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002d1a:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002d1e:	0f 84 c1 01 00 00    	je     c0002ee5 <get_fileinfo+0x1dc>
c0002d24:	89 d3                	mov    ebx,edx
c0002d26:	89 c6                	mov    esi,eax
c0002d28:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002d2c:	74 6a                	je     c0002d98 <get_fileinfo+0x8f>
c0002d2e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002d36:	31 ed                	xor    ebp,ebp
c0002d38:	31 ff                	xor    edi,edi
c0002d3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d42:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002d45:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002d49:	66 85 d2             	test   dx,dx
c0002d4c:	74 3e                	je     c0002d8c <get_fileinfo+0x83>
c0002d4e:	66 85 ed             	test   bp,bp
c0002d51:	75 0c                	jne    c0002d5f <get_fileinfo+0x56>
c0002d53:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002d59:	66 3d ff 07          	cmp    ax,0x7ff
c0002d5d:	76 22                	jbe    c0002d81 <get_fileinfo+0x78>
c0002d5f:	b9 ff 00 00 00       	mov    ecx,0xff
c0002d64:	89 e8                	mov    eax,ebp
c0002d66:	29 f9                	sub    ecx,edi
c0002d68:	c1 e0 10             	shl    eax,0x10
c0002d6b:	09 d0                	or     eax,edx
c0002d6d:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002d71:	e8 23 ef ff ff       	call   c0001c99 <put_utf>
c0002d76:	84 c0                	test   al,al
c0002d78:	74 10                	je     c0002d8a <get_fileinfo+0x81>
c0002d7a:	0f b6 c0             	movzx  eax,al
c0002d7d:	31 d2                	xor    edx,edx
c0002d7f:	01 c7                	add    edi,eax
c0002d81:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002d86:	89 d5                	mov    ebp,edx
c0002d88:	eb b0                	jmp    c0002d3a <get_fileinfo+0x31>
c0002d8a:	31 ff                	xor    edi,edi
c0002d8c:	66 85 ed             	test   bp,bp
c0002d8f:	74 02                	je     c0002d93 <get_fileinfo+0x8a>
c0002d91:	31 ff                	xor    edi,edi
c0002d93:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002d98:	31 ff                	xor    edi,edi
c0002d9a:	31 c9                	xor    ecx,ecx
c0002d9c:	83 f9 0a             	cmp    ecx,0xa
c0002d9f:	0f 87 ad 00 00 00    	ja     c0002e52 <get_fileinfo+0x149>
c0002da5:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002da8:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002dab:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002daf:	66 83 fa 20          	cmp    dx,0x20
c0002db3:	0f 84 92 00 00 00    	je     c0002e4b <get_fileinfo+0x142>
c0002db9:	66 83 fa 05          	cmp    dx,0x5
c0002dbd:	75 05                	jne    c0002dc4 <get_fileinfo+0xbb>
c0002dbf:	ba e5 00 00 00       	mov    edx,0xe5
c0002dc4:	83 ff 0b             	cmp    edi,0xb
c0002dc7:	77 0b                	ja     c0002dd4 <get_fileinfo+0xcb>
c0002dc9:	83 fd 09             	cmp    ebp,0x9
c0002dcc:	75 06                	jne    c0002dd4 <get_fileinfo+0xcb>
c0002dce:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002dd3:	47                   	inc    edi
c0002dd4:	0f b7 c2             	movzx  eax,dx
c0002dd7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002ddb:	e8 ed ed ff ff       	call   c0001bcd <dbc_1st>
c0002de0:	85 c0                	test   eax,eax
c0002de2:	74 2f                	je     c0002e13 <get_fileinfo+0x10a>
c0002de4:	83 fd 08             	cmp    ebp,0x8
c0002de7:	74 2a                	je     c0002e13 <get_fileinfo+0x10a>
c0002de9:	83 fd 0b             	cmp    ebp,0xb
c0002dec:	74 25                	je     c0002e13 <get_fileinfo+0x10a>
c0002dee:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002df1:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002df5:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002df9:	e8 d2 ed ff ff       	call   c0001bd0 <dbc_2nd>
c0002dfe:	85 c0                	test   eax,eax
c0002e00:	74 11                	je     c0002e13 <get_fileinfo+0x10a>
c0002e02:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e06:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002e0b:	c1 e2 08             	shl    edx,0x8
c0002e0e:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002e11:	09 c2                	or     edx,eax
c0002e13:	0f b7 d2             	movzx  edx,dx
c0002e16:	50                   	push   eax
c0002e17:	50                   	push   eax
c0002e18:	68 b5 01 00 00       	push   0x1b5
c0002e1d:	52                   	push   edx
c0002e1e:	e8 45 2b 00 00       	call   c0005968 <ff_oem2uni>
c0002e23:	83 c4 10             	add    esp,0x10
c0002e26:	66 85 c0             	test   ax,ax
c0002e29:	75 04                	jne    c0002e2f <get_fileinfo+0x126>
c0002e2b:	31 ff                	xor    edi,edi
c0002e2d:	eb 23                	jmp    c0002e52 <get_fileinfo+0x149>
c0002e2f:	b9 0c 00 00 00       	mov    ecx,0xc
c0002e34:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0002e38:	29 f9                	sub    ecx,edi
c0002e3a:	0f b7 c0             	movzx  eax,ax
c0002e3d:	e8 57 ee ff ff       	call   c0001c99 <put_utf>
c0002e42:	84 c0                	test   al,al
c0002e44:	74 e5                	je     c0002e2b <get_fileinfo+0x122>
c0002e46:	0f b6 c0             	movzx  eax,al
c0002e49:	01 c7                	add    edi,eax
c0002e4b:	89 e9                	mov    ecx,ebp
c0002e4d:	e9 4a ff ff ff       	jmp    c0002d9c <get_fileinfo+0x93>
c0002e52:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0002e57:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0002e5b:	75 54                	jne    c0002eb1 <get_fileinfo+0x1a8>
c0002e5d:	85 ff                	test   edi,edi
c0002e5f:	75 0b                	jne    c0002e6c <get_fileinfo+0x163>
c0002e61:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0002e65:	ba 01 00 00 00       	mov    edx,0x1
c0002e6a:	eb 33                	jmp    c0002e9f <get_fileinfo+0x196>
c0002e6c:	b1 08                	mov    cl,0x8
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0002e76:	84 c0                	test   al,al
c0002e78:	74 25                	je     c0002e9f <get_fileinfo+0x196>
c0002e7a:	66 83 f8 2e          	cmp    ax,0x2e
c0002e7e:	74 16                	je     c0002e96 <get_fileinfo+0x18d>
c0002e80:	8d 78 bf             	lea    edi,[eax-0x41]
c0002e83:	66 83 ff 19          	cmp    di,0x19
c0002e87:	77 0f                	ja     c0002e98 <get_fileinfo+0x18f>
c0002e89:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c0002e8c:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0002e8f:	74 07                	je     c0002e98 <get_fileinfo+0x18f>
c0002e91:	83 c0 20             	add    eax,0x20
c0002e94:	eb 02                	jmp    c0002e98 <get_fileinfo+0x18f>
c0002e96:	b1 10                	mov    cl,0x10
c0002e98:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0002e9c:	42                   	inc    edx
c0002e9d:	eb d1                	jmp    c0002e70 <get_fileinfo+0x167>
c0002e9f:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0002ea4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002ea7:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0002eab:	75 04                	jne    c0002eb1 <get_fileinfo+0x1a8>
c0002ead:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0002eb1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002eb4:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0002eb7:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0002eba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002ebd:	83 c0 1c             	add    eax,0x1c
c0002ec0:	e8 94 ec ff ff       	call   c0001b59 <ld_dword>
c0002ec5:	89 03                	mov    DWORD PTR [ebx],eax
c0002ec7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002eca:	83 c0 16             	add    eax,0x16
c0002ecd:	e8 7a ec ff ff       	call   c0001b4c <ld_word>
c0002ed2:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0002ed6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002ed9:	83 c0 18             	add    eax,0x18
c0002edc:	e8 6b ec ff ff       	call   c0001b4c <ld_word>
c0002ee1:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0002ee5:	83 c4 1c             	add    esp,0x1c
c0002ee8:	5b                   	pop    ebx
c0002ee9:	5e                   	pop    esi
c0002eea:	5f                   	pop    edi
c0002eeb:	5d                   	pop    ebp
c0002eec:	c3                   	ret    

c0002eed <ld_clust.isra.0>:
c0002eed:	56                   	push   esi
c0002eee:	89 c6                	mov    esi,eax
c0002ef0:	53                   	push   ebx
c0002ef1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ef4:	89 d3                	mov    ebx,edx
c0002ef6:	e8 51 ec ff ff       	call   c0001b4c <ld_word>
c0002efb:	0f b7 c8             	movzx  ecx,ax
c0002efe:	89 f0                	mov    eax,esi
c0002f00:	3c 03                	cmp    al,0x3
c0002f02:	75 0d                	jne    c0002f11 <ld_clust.isra.0+0x24>
c0002f04:	8d 43 14             	lea    eax,[ebx+0x14]
c0002f07:	e8 40 ec ff ff       	call   c0001b4c <ld_word>
c0002f0c:	c1 e0 10             	shl    eax,0x10
c0002f0f:	09 c1                	or     ecx,eax
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	5b                   	pop    ebx
c0002f14:	5e                   	pop    esi
c0002f15:	c3                   	ret    

c0002f16 <st_clust.isra.1>:
c0002f16:	56                   	push   esi
c0002f17:	89 c6                	mov    esi,eax
c0002f19:	53                   	push   ebx
c0002f1a:	89 d3                	mov    ebx,edx
c0002f1c:	0f b7 d1             	movzx  edx,cx
c0002f1f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0002f22:	e8 4a ec ff ff       	call   c0001b71 <st_word>
c0002f27:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0002f2a:	75 0f                	jne    c0002f3b <st_clust.isra.1+0x25>
c0002f2c:	c1 e9 10             	shr    ecx,0x10
c0002f2f:	8d 43 14             	lea    eax,[ebx+0x14]
c0002f32:	89 ca                	mov    edx,ecx
c0002f34:	5b                   	pop    ebx
c0002f35:	5e                   	pop    esi
c0002f36:	e9 36 ec ff ff       	jmp    c0001b71 <st_word>
c0002f3b:	5b                   	pop    ebx
c0002f3c:	5e                   	pop    esi
c0002f3d:	c3                   	ret    

c0002f3e <get_fat.isra.2>:
c0002f3e:	b9 01 00 00 00       	mov    ecx,0x1
c0002f43:	83 fa 01             	cmp    edx,0x1
c0002f46:	0f 86 f1 00 00 00    	jbe    c000303d <get_fat.isra.2+0xff>
c0002f4c:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0002f4f:	0f 83 e8 00 00 00    	jae    c000303d <get_fat.isra.2+0xff>
c0002f55:	55                   	push   ebp
c0002f56:	57                   	push   edi
c0002f57:	89 c7                	mov    edi,eax
c0002f59:	56                   	push   esi
c0002f5a:	89 d6                	mov    esi,edx
c0002f5c:	53                   	push   ebx
c0002f5d:	83 ec 0c             	sub    esp,0xc
c0002f60:	8a 00                	mov    al,BYTE PTR [eax]
c0002f62:	3c 02                	cmp    al,0x2
c0002f64:	74 78                	je     c0002fde <get_fat.isra.2+0xa0>
c0002f66:	3c 03                	cmp    al,0x3
c0002f68:	0f 84 97 00 00 00    	je     c0003005 <get_fat.isra.2+0xc7>
c0002f6e:	fe c8                	dec    al
c0002f70:	0f 85 bd 00 00 00    	jne    c0003033 <get_fat.isra.2+0xf5>
c0002f76:	89 d3                	mov    ebx,edx
c0002f78:	89 f8                	mov    eax,edi
c0002f7a:	d1 eb                	shr    ebx,1
c0002f7c:	01 d3                	add    ebx,edx
c0002f7e:	89 da                	mov    edx,ebx
c0002f80:	c1 ea 09             	shr    edx,0x9
c0002f83:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0002f86:	e8 e7 f0 ff ff       	call   c0002072 <move_window>
c0002f8b:	85 c0                	test   eax,eax
c0002f8d:	74 08                	je     c0002f97 <get_fat.isra.2+0x59>
c0002f8f:	83 c9 ff             	or     ecx,0xffffffff
c0002f92:	e9 9c 00 00 00       	jmp    c0003033 <get_fat.isra.2+0xf5>
c0002f97:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f9a:	89 f8                	mov    eax,edi
c0002f9c:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002fa2:	89 ea                	mov    edx,ebp
c0002fa4:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0002fa8:	c1 ea 09             	shr    edx,0x9
c0002fab:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0002fae:	e8 bf f0 ff ff       	call   c0002072 <move_window>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	75 d8                	jne    c0002f8f <get_fat.isra.2+0x51>
c0002fb7:	0f b6 c3             	movzx  eax,bl
c0002fba:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002fc0:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0002fc5:	c1 e3 08             	shl    ebx,0x8
c0002fc8:	09 c3                	or     ebx,eax
c0002fca:	89 d9                	mov    ecx,ebx
c0002fcc:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002fd2:	83 e6 01             	and    esi,0x1
c0002fd5:	74 5c                	je     c0003033 <get_fat.isra.2+0xf5>
c0002fd7:	89 d9                	mov    ecx,ebx
c0002fd9:	c1 e9 04             	shr    ecx,0x4
c0002fdc:	eb 55                	jmp    c0003033 <get_fat.isra.2+0xf5>
c0002fde:	c1 ea 08             	shr    edx,0x8
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0002fe6:	e8 87 f0 ff ff       	call   c0002072 <move_window>
c0002feb:	85 c0                	test   eax,eax
c0002fed:	75 a0                	jne    c0002f8f <get_fat.isra.2+0x51>
c0002fef:	01 f6                	add    esi,esi
c0002ff1:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002ff7:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c0002ffb:	e8 4c eb ff ff       	call   c0001b4c <ld_word>
c0003000:	0f b7 c8             	movzx  ecx,ax
c0003003:	eb 2e                	jmp    c0003033 <get_fat.isra.2+0xf5>
c0003005:	c1 ea 07             	shr    edx,0x7
c0003008:	89 f8                	mov    eax,edi
c000300a:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000300d:	e8 60 f0 ff ff       	call   c0002072 <move_window>
c0003012:	85 c0                	test   eax,eax
c0003014:	0f 85 75 ff ff ff    	jne    c0002f8f <get_fat.isra.2+0x51>
c000301a:	c1 e6 02             	shl    esi,0x2
c000301d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003023:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c0003027:	e8 2d eb ff ff       	call   c0001b59 <ld_dword>
c000302c:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003031:	89 c1                	mov    ecx,eax
c0003033:	83 c4 0c             	add    esp,0xc
c0003036:	89 c8                	mov    eax,ecx
c0003038:	5b                   	pop    ebx
c0003039:	5e                   	pop    esi
c000303a:	5f                   	pop    edi
c000303b:	5d                   	pop    ebp
c000303c:	c3                   	ret    
c000303d:	89 c8                	mov    eax,ecx
c000303f:	c3                   	ret    

c0003040 <dir_sdi>:
c0003040:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003046:	0f 87 b6 00 00 00    	ja     c0003102 <dir_sdi+0xc2>
c000304c:	55                   	push   ebp
c000304d:	57                   	push   edi
c000304e:	56                   	push   esi
c000304f:	53                   	push   ebx
c0003050:	89 d3                	mov    ebx,edx
c0003052:	83 ec 1c             	sub    esp,0x1c
c0003055:	f6 c2 1f             	test   dl,0x1f
c0003058:	74 0a                	je     c0003064 <dir_sdi+0x24>
c000305a:	b8 02 00 00 00       	mov    eax,0x2
c000305f:	e9 96 00 00 00       	jmp    c00030fa <dir_sdi+0xba>
c0003064:	89 c6                	mov    esi,eax
c0003066:	8b 38                	mov    edi,DWORD PTR [eax]
c0003068:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000306b:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000306e:	85 c9                	test   ecx,ecx
c0003070:	75 23                	jne    c0003095 <dir_sdi+0x55>
c0003072:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003075:	76 07                	jbe    c000307e <dir_sdi+0x3e>
c0003077:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000307a:	85 c0                	test   eax,eax
c000307c:	75 15                	jne    c0003093 <dir_sdi+0x53>
c000307e:	89 da                	mov    edx,ebx
c0003080:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003084:	c1 ea 05             	shr    edx,0x5
c0003087:	39 c2                	cmp    edx,eax
c0003089:	73 cf                	jae    c000305a <dir_sdi+0x1a>
c000308b:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000308e:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003091:	eb 3d                	jmp    c00030d0 <dir_sdi+0x90>
c0003093:	89 c1                	mov    ecx,eax
c0003095:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003099:	c1 e5 09             	shl    ebp,0x9
c000309c:	89 ca                	mov    edx,ecx
c000309e:	39 eb                	cmp    ebx,ebp
c00030a0:	72 1c                	jb     c00030be <dir_sdi+0x7e>
c00030a2:	8b 06                	mov    eax,DWORD PTR [esi]
c00030a4:	e8 95 fe ff ff       	call   c0002f3e <get_fat.isra.2>
c00030a9:	89 c1                	mov    ecx,eax
c00030ab:	83 f8 ff             	cmp    eax,0xffffffff
c00030ae:	74 45                	je     c00030f5 <dir_sdi+0xb5>
c00030b0:	83 f8 01             	cmp    eax,0x1
c00030b3:	76 a5                	jbe    c000305a <dir_sdi+0x1a>
c00030b5:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c00030b8:	76 a0                	jbe    c000305a <dir_sdi+0x1a>
c00030ba:	29 eb                	sub    ebx,ebp
c00030bc:	eb de                	jmp    c000309c <dir_sdi+0x5c>
c00030be:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	e8 c9 ec ff ff       	call   c0001d92 <clst2sect>
c00030c9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00030cd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00030d0:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00030d3:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00030d6:	85 d2                	test   edx,edx
c00030d8:	74 80                	je     c000305a <dir_sdi+0x1a>
c00030da:	89 d8                	mov    eax,ebx
c00030dc:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00030e2:	c1 e8 09             	shr    eax,0x9
c00030e5:	01 d0                	add    eax,edx
c00030e7:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00030ea:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00030ee:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00030f1:	31 c0                	xor    eax,eax
c00030f3:	eb 05                	jmp    c00030fa <dir_sdi+0xba>
c00030f5:	b8 01 00 00 00       	mov    eax,0x1
c00030fa:	83 c4 1c             	add    esp,0x1c
c00030fd:	5b                   	pop    ebx
c00030fe:	5e                   	pop    esi
c00030ff:	5f                   	pop    edi
c0003100:	5d                   	pop    ebp
c0003101:	c3                   	ret    
c0003102:	b8 02 00 00 00       	mov    eax,0x2
c0003107:	c3                   	ret    

c0003108 <create_chain>:
c0003108:	55                   	push   ebp
c0003109:	89 c5                	mov    ebp,eax
c000310b:	57                   	push   edi
c000310c:	89 d7                	mov    edi,edx
c000310e:	56                   	push   esi
c000310f:	53                   	push   ebx
c0003110:	83 ec 1c             	sub    esp,0x1c
c0003113:	85 d2                	test   edx,edx
c0003115:	8b 30                	mov    esi,DWORD PTR [eax]
c0003117:	75 0e                	jne    c0003127 <create_chain+0x1f>
c0003119:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000311c:	85 c9                	test   ecx,ecx
c000311e:	74 34                	je     c0003154 <create_chain+0x4c>
c0003120:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c0003123:	77 34                	ja     c0003159 <create_chain+0x51>
c0003125:	eb 2d                	jmp    c0003154 <create_chain+0x4c>
c0003127:	89 f0                	mov    eax,esi
c0003129:	e8 10 fe ff ff       	call   c0002f3e <get_fat.isra.2>
c000312e:	89 c3                	mov    ebx,eax
c0003130:	83 f8 01             	cmp    eax,0x1
c0003133:	77 0a                	ja     c000313f <create_chain+0x37>
c0003135:	bb 01 00 00 00       	mov    ebx,0x1
c000313a:	e9 f9 00 00 00       	jmp    c0003238 <create_chain+0x130>
c000313f:	83 f8 ff             	cmp    eax,0xffffffff
c0003142:	0f 84 ed 00 00 00    	je     c0003235 <create_chain+0x12d>
c0003148:	89 f9                	mov    ecx,edi
c000314a:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c000314d:	76 0a                	jbe    c0003159 <create_chain+0x51>
c000314f:	e9 e4 00 00 00       	jmp    c0003238 <create_chain+0x130>
c0003154:	b9 01 00 00 00       	mov    ecx,0x1
c0003159:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c000315d:	75 07                	jne    c0003166 <create_chain+0x5e>
c000315f:	31 db                	xor    ebx,ebx
c0003161:	e9 d2 00 00 00       	jmp    c0003238 <create_chain+0x130>
c0003166:	39 f9                	cmp    ecx,edi
c0003168:	75 46                	jne    c00031b0 <create_chain+0xa8>
c000316a:	8d 59 01             	lea    ebx,[ecx+0x1]
c000316d:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003170:	77 05                	ja     c0003177 <create_chain+0x6f>
c0003172:	bb 02 00 00 00       	mov    ebx,0x2
c0003177:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000317b:	89 da                	mov    edx,ebx
c000317d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003180:	e8 b9 fd ff ff       	call   c0002f3e <get_fat.isra.2>
c0003185:	83 f8 01             	cmp    eax,0x1
c0003188:	74 ab                	je     c0003135 <create_chain+0x2d>
c000318a:	83 f8 ff             	cmp    eax,0xffffffff
c000318d:	0f 84 a2 00 00 00    	je     c0003235 <create_chain+0x12d>
c0003193:	85 c0                	test   eax,eax
c0003195:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003199:	74 11                	je     c00031ac <create_chain+0xa4>
c000319b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000319e:	83 f8 01             	cmp    eax,0x1
c00031a1:	76 0d                	jbe    c00031b0 <create_chain+0xa8>
c00031a3:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c00031a6:	73 08                	jae    c00031b0 <create_chain+0xa8>
c00031a8:	89 c1                	mov    ecx,eax
c00031aa:	eb 04                	jmp    c00031b0 <create_chain+0xa8>
c00031ac:	85 db                	test   ebx,ebx
c00031ae:	75 3d                	jne    c00031ed <create_chain+0xe5>
c00031b0:	89 cb                	mov    ebx,ecx
c00031b2:	43                   	inc    ebx
c00031b3:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c00031b6:	77 0a                	ja     c00031c2 <create_chain+0xba>
c00031b8:	83 f9 01             	cmp    ecx,0x1
c00031bb:	76 a2                	jbe    c000315f <create_chain+0x57>
c00031bd:	bb 02 00 00 00       	mov    ebx,0x2
c00031c2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00031c6:	89 da                	mov    edx,ebx
c00031c8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00031cb:	e8 6e fd ff ff       	call   c0002f3e <get_fat.isra.2>
c00031d0:	85 c0                	test   eax,eax
c00031d2:	74 19                	je     c00031ed <create_chain+0xe5>
c00031d4:	83 f8 01             	cmp    eax,0x1
c00031d7:	0f 84 58 ff ff ff    	je     c0003135 <create_chain+0x2d>
c00031dd:	40                   	inc    eax
c00031de:	74 55                	je     c0003235 <create_chain+0x12d>
c00031e0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00031e4:	39 cb                	cmp    ebx,ecx
c00031e6:	75 ca                	jne    c00031b2 <create_chain+0xaa>
c00031e8:	e9 72 ff ff ff       	jmp    c000315f <create_chain+0x57>
c00031ed:	83 c9 ff             	or     ecx,0xffffffff
c00031f0:	89 da                	mov    edx,ebx
c00031f2:	89 f0                	mov    eax,esi
c00031f4:	e8 cf f2 ff ff       	call   c00024c8 <put_fat>
c00031f9:	85 c0                	test   eax,eax
c00031fb:	75 31                	jne    c000322e <create_chain+0x126>
c00031fd:	85 ff                	test   edi,edi
c00031ff:	75 16                	jne    c0003217 <create_chain+0x10f>
c0003201:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003204:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0003207:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c000320a:	8d 57 fe             	lea    edx,[edi-0x2]
c000320d:	39 d0                	cmp    eax,edx
c000320f:	77 17                	ja     c0003228 <create_chain+0x120>
c0003211:	48                   	dec    eax
c0003212:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0003215:	eb 11                	jmp    c0003228 <create_chain+0x120>
c0003217:	89 d9                	mov    ecx,ebx
c0003219:	89 fa                	mov    edx,edi
c000321b:	89 f0                	mov    eax,esi
c000321d:	e8 a6 f2 ff ff       	call   c00024c8 <put_fat>
c0003222:	85 c0                	test   eax,eax
c0003224:	74 db                	je     c0003201 <create_chain+0xf9>
c0003226:	eb 06                	jmp    c000322e <create_chain+0x126>
c0003228:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000322c:	eb 0a                	jmp    c0003238 <create_chain+0x130>
c000322e:	48                   	dec    eax
c000322f:	0f 85 00 ff ff ff    	jne    c0003135 <create_chain+0x2d>
c0003235:	83 cb ff             	or     ebx,0xffffffff
c0003238:	83 c4 1c             	add    esp,0x1c
c000323b:	89 d8                	mov    eax,ebx
c000323d:	5b                   	pop    ebx
c000323e:	5e                   	pop    esi
c000323f:	5f                   	pop    edi
c0003240:	5d                   	pop    ebp
c0003241:	c3                   	ret    

c0003242 <remove_chain>:
c0003242:	55                   	push   ebp
c0003243:	57                   	push   edi
c0003244:	56                   	push   esi
c0003245:	89 d6                	mov    esi,edx
c0003247:	53                   	push   ebx
c0003248:	83 ec 0c             	sub    esp,0xc
c000324b:	83 fa 01             	cmp    edx,0x1
c000324e:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003250:	76 65                	jbe    c00032b7 <remove_chain+0x75>
c0003252:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003255:	76 60                	jbe    c00032b7 <remove_chain+0x75>
c0003257:	89 c5                	mov    ebp,eax
c0003259:	89 ca                	mov    edx,ecx
c000325b:	85 c9                	test   ecx,ecx
c000325d:	74 0e                	je     c000326d <remove_chain+0x2b>
c000325f:	83 c9 ff             	or     ecx,0xffffffff
c0003262:	89 d8                	mov    eax,ebx
c0003264:	e8 5f f2 ff ff       	call   c00024c8 <put_fat>
c0003269:	85 c0                	test   eax,eax
c000326b:	75 56                	jne    c00032c3 <remove_chain+0x81>
c000326d:	89 f2                	mov    edx,esi
c000326f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003272:	e8 c7 fc ff ff       	call   c0002f3e <get_fat.isra.2>
c0003277:	89 c7                	mov    edi,eax
c0003279:	85 c0                	test   eax,eax
c000327b:	75 04                	jne    c0003281 <remove_chain+0x3f>
c000327d:	31 c0                	xor    eax,eax
c000327f:	eb 42                	jmp    c00032c3 <remove_chain+0x81>
c0003281:	83 f8 01             	cmp    eax,0x1
c0003284:	74 31                	je     c00032b7 <remove_chain+0x75>
c0003286:	83 f8 ff             	cmp    eax,0xffffffff
c0003289:	74 33                	je     c00032be <remove_chain+0x7c>
c000328b:	31 c9                	xor    ecx,ecx
c000328d:	89 f2                	mov    edx,esi
c000328f:	89 d8                	mov    eax,ebx
c0003291:	e8 32 f2 ff ff       	call   c00024c8 <put_fat>
c0003296:	85 c0                	test   eax,eax
c0003298:	75 29                	jne    c00032c3 <remove_chain+0x81>
c000329a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000329d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00032a0:	8d 4a fe             	lea    ecx,[edx-0x2]
c00032a3:	39 c8                	cmp    eax,ecx
c00032a5:	73 08                	jae    c00032af <remove_chain+0x6d>
c00032a7:	40                   	inc    eax
c00032a8:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00032ac:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00032af:	89 fe                	mov    esi,edi
c00032b1:	39 fa                	cmp    edx,edi
c00032b3:	77 b8                	ja     c000326d <remove_chain+0x2b>
c00032b5:	eb c6                	jmp    c000327d <remove_chain+0x3b>
c00032b7:	b8 02 00 00 00       	mov    eax,0x2
c00032bc:	eb 05                	jmp    c00032c3 <remove_chain+0x81>
c00032be:	b8 01 00 00 00       	mov    eax,0x1
c00032c3:	83 c4 0c             	add    esp,0xc
c00032c6:	5b                   	pop    ebx
c00032c7:	5e                   	pop    esi
c00032c8:	5f                   	pop    edi
c00032c9:	5d                   	pop    ebp
c00032ca:	c3                   	ret    

c00032cb <dir_next>:
c00032cb:	55                   	push   ebp
c00032cc:	57                   	push   edi
c00032cd:	56                   	push   esi
c00032ce:	53                   	push   ebx
c00032cf:	83 ec 1c             	sub    esp,0x1c
c00032d2:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00032d5:	8b 28                	mov    ebp,DWORD PTR [eax]
c00032d7:	83 c7 20             	add    edi,0x20
c00032da:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00032e0:	76 07                	jbe    c00032e9 <dir_next+0x1e>
c00032e2:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00032e9:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00032ec:	b9 04 00 00 00       	mov    ecx,0x4
c00032f1:	85 f6                	test   esi,esi
c00032f3:	0f 84 cd 00 00 00    	je     c00033c6 <dir_next+0xfb>
c00032f9:	89 c3                	mov    ebx,eax
c00032fb:	89 d1                	mov    ecx,edx
c00032fd:	89 f8                	mov    eax,edi
c00032ff:	25 ff 01 00 00       	and    eax,0x1ff
c0003304:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003308:	0f 85 a8 00 00 00    	jne    c00033b6 <dir_next+0xeb>
c000330e:	46                   	inc    esi
c000330f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003312:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003315:	85 d2                	test   edx,edx
c0003317:	75 22                	jne    c000333b <dir_next+0x70>
c0003319:	89 fa                	mov    edx,edi
c000331b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000331f:	c1 ea 05             	shr    edx,0x5
c0003322:	39 c2                	cmp    edx,eax
c0003324:	0f 82 8c 00 00 00    	jb     c00033b6 <dir_next+0xeb>
c000332a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003331:	b9 04 00 00 00       	mov    ecx,0x4
c0003336:	e9 8b 00 00 00       	jmp    c00033c6 <dir_next+0xfb>
c000333b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000333f:	89 fe                	mov    esi,edi
c0003341:	48                   	dec    eax
c0003342:	c1 ee 09             	shr    esi,0x9
c0003345:	85 f0                	test   eax,esi
c0003347:	75 6d                	jne    c00033b6 <dir_next+0xeb>
c0003349:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334d:	89 e8                	mov    eax,ebp
c000334f:	e8 ea fb ff ff       	call   c0002f3e <get_fat.isra.2>
c0003354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003358:	89 c6                	mov    esi,eax
c000335a:	83 f8 01             	cmp    eax,0x1
c000335d:	77 07                	ja     c0003366 <dir_next+0x9b>
c000335f:	b9 02 00 00 00       	mov    ecx,0x2
c0003364:	eb 60                	jmp    c00033c6 <dir_next+0xfb>
c0003366:	83 f8 ff             	cmp    eax,0xffffffff
c0003369:	75 07                	jne    c0003372 <dir_next+0xa7>
c000336b:	b9 01 00 00 00       	mov    ecx,0x1
c0003370:	eb 54                	jmp    c00033c6 <dir_next+0xfb>
c0003372:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003375:	77 30                	ja     c00033a7 <dir_next+0xdc>
c0003377:	85 c9                	test   ecx,ecx
c0003379:	74 af                	je     c000332a <dir_next+0x5f>
c000337b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000337e:	89 d8                	mov    eax,ebx
c0003380:	e8 83 fd ff ff       	call   c0003108 <create_chain>
c0003385:	b9 07 00 00 00       	mov    ecx,0x7
c000338a:	89 c6                	mov    esi,eax
c000338c:	85 c0                	test   eax,eax
c000338e:	74 36                	je     c00033c6 <dir_next+0xfb>
c0003390:	83 f8 01             	cmp    eax,0x1
c0003393:	74 ca                	je     c000335f <dir_next+0x94>
c0003395:	83 f8 ff             	cmp    eax,0xffffffff
c0003398:	74 d1                	je     c000336b <dir_next+0xa0>
c000339a:	89 c2                	mov    edx,eax
c000339c:	89 e8                	mov    eax,ebp
c000339e:	e8 75 f2 ff ff       	call   c0002618 <dir_clear>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	75 c4                	jne    c000336b <dir_next+0xa0>
c00033a7:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00033aa:	89 f2                	mov    edx,esi
c00033ac:	89 e8                	mov    eax,ebp
c00033ae:	e8 df e9 ff ff       	call   c0001d92 <clst2sect>
c00033b3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00033b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00033ba:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00033bd:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00033c1:	31 c9                	xor    ecx,ecx
c00033c3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00033c6:	83 c4 1c             	add    esp,0x1c
c00033c9:	89 c8                	mov    eax,ecx
c00033cb:	5b                   	pop    ebx
c00033cc:	5e                   	pop    esi
c00033cd:	5f                   	pop    edi
c00033ce:	5d                   	pop    ebp
c00033cf:	c3                   	ret    

c00033d0 <dir_alloc>:
c00033d0:	55                   	push   ebp
c00033d1:	89 c5                	mov    ebp,eax
c00033d3:	57                   	push   edi
c00033d4:	89 d7                	mov    edi,edx
c00033d6:	56                   	push   esi
c00033d7:	31 d2                	xor    edx,edx
c00033d9:	53                   	push   ebx
c00033da:	83 ec 0c             	sub    esp,0xc
c00033dd:	8b 30                	mov    esi,DWORD PTR [eax]
c00033df:	e8 5c fc ff ff       	call   c0003040 <dir_sdi>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 37                	jne    c000341f <dir_alloc+0x4f>
c00033e8:	31 db                	xor    ebx,ebx
c00033ea:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00033ed:	89 f0                	mov    eax,esi
c00033ef:	e8 7e ec ff ff       	call   c0002072 <move_window>
c00033f4:	85 c0                	test   eax,eax
c00033f6:	75 27                	jne    c000341f <dir_alloc+0x4f>
c00033f8:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00033fb:	8a 12                	mov    dl,BYTE PTR [edx]
c00033fd:	84 d2                	test   dl,dl
c00033ff:	74 05                	je     c0003406 <dir_alloc+0x36>
c0003401:	80 fa e5             	cmp    dl,0xe5
c0003404:	75 07                	jne    c000340d <dir_alloc+0x3d>
c0003406:	43                   	inc    ebx
c0003407:	39 fb                	cmp    ebx,edi
c0003409:	75 04                	jne    c000340f <dir_alloc+0x3f>
c000340b:	eb 1c                	jmp    c0003429 <dir_alloc+0x59>
c000340d:	31 db                	xor    ebx,ebx
c000340f:	ba 01 00 00 00       	mov    edx,0x1
c0003414:	89 e8                	mov    eax,ebp
c0003416:	e8 b0 fe ff ff       	call   c00032cb <dir_next>
c000341b:	85 c0                	test   eax,eax
c000341d:	74 cb                	je     c00033ea <dir_alloc+0x1a>
c000341f:	83 f8 04             	cmp    eax,0x4
c0003422:	75 05                	jne    c0003429 <dir_alloc+0x59>
c0003424:	b8 07 00 00 00       	mov    eax,0x7
c0003429:	83 c4 0c             	add    esp,0xc
c000342c:	5b                   	pop    ebx
c000342d:	5e                   	pop    esi
c000342e:	5f                   	pop    edi
c000342f:	5d                   	pop    ebp
c0003430:	c3                   	ret    

c0003431 <dir_read>:
c0003431:	55                   	push   ebp
c0003432:	57                   	push   edi
c0003433:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003438:	56                   	push   esi
c0003439:	be 04 00 00 00       	mov    esi,0x4
c000343e:	53                   	push   ebx
c000343f:	89 c3                	mov    ebx,eax
c0003441:	83 ec 1c             	sub    esp,0x1c
c0003444:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003448:	8b 28                	mov    ebp,DWORD PTR [eax]
c000344a:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000344f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003452:	85 d2                	test   edx,edx
c0003454:	0f 84 d8 00 00 00    	je     c0003532 <dir_read+0x101>
c000345a:	89 e8                	mov    eax,ebp
c000345c:	e8 11 ec ff ff       	call   c0002072 <move_window>
c0003461:	89 c6                	mov    esi,eax
c0003463:	85 c0                	test   eax,eax
c0003465:	0f 85 d2 00 00 00    	jne    c000353d <dir_read+0x10c>
c000346b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000346e:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003470:	84 c9                	test   cl,cl
c0003472:	0f 84 c0 00 00 00    	je     c0003538 <dir_read+0x107>
c0003478:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000347b:	83 e0 3f             	and    eax,0x3f
c000347e:	80 f9 2e             	cmp    cl,0x2e
c0003481:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003485:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003488:	0f 84 8a 00 00 00    	je     c0003518 <dir_read+0xe7>
c000348e:	80 f9 e5             	cmp    cl,0xe5
c0003491:	0f 84 81 00 00 00    	je     c0003518 <dir_read+0xe7>
c0003497:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000349b:	83 e0 1f             	and    eax,0x1f
c000349e:	83 f8 08             	cmp    eax,0x8
c00034a1:	0f 94 c0             	sete   al
c00034a4:	0f b6 c0             	movzx  eax,al
c00034a7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00034ab:	75 6b                	jne    c0003518 <dir_read+0xe7>
c00034ad:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00034b2:	75 44                	jne    c00034f8 <dir_read+0xc7>
c00034b4:	f6 c1 40             	test   cl,0x40
c00034b7:	74 12                	je     c00034cb <dir_read+0x9a>
c00034b9:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00034bc:	83 e1 bf             	and    ecx,0xffffffbf
c00034bf:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00034c3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034c6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00034c9:	eb 06                	jmp    c00034d1 <dir_read+0xa0>
c00034cb:	89 f8                	mov    eax,edi
c00034cd:	38 c8                	cmp    al,cl
c00034cf:	75 47                	jne    c0003518 <dir_read+0xe7>
c00034d1:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00034d5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00034da:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00034dd:	75 3e                	jne    c000351d <dir_read+0xec>
c00034df:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00034e3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00034e6:	e8 c4 e8 ff ff       	call   c0001daf <pick_lfn>
c00034eb:	85 c0                	test   eax,eax
c00034ed:	74 2e                	je     c000351d <dir_read+0xec>
c00034ef:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00034f3:	8d 79 ff             	lea    edi,[ecx-0x1]
c00034f6:	eb 25                	jmp    c000351d <dir_read+0xec>
c00034f8:	89 f8                	mov    eax,edi
c00034fa:	84 c0                	test   al,al
c00034fc:	75 11                	jne    c000350f <dir_read+0xde>
c00034fe:	89 d0                	mov    eax,edx
c0003500:	e8 64 ea ff ff       	call   c0001f69 <sum_sfn>
c0003505:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003509:	75 04                	jne    c000350f <dir_read+0xde>
c000350b:	31 f6                	xor    esi,esi
c000350d:	eb 35                	jmp    c0003544 <dir_read+0x113>
c000350f:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003516:	eb 2c                	jmp    c0003544 <dir_read+0x113>
c0003518:	bf ff ff ff ff       	mov    edi,0xffffffff
c000351d:	31 d2                	xor    edx,edx
c000351f:	89 d8                	mov    eax,ebx
c0003521:	e8 a5 fd ff ff       	call   c00032cb <dir_next>
c0003526:	89 c6                	mov    esi,eax
c0003528:	85 c0                	test   eax,eax
c000352a:	0f 84 1f ff ff ff    	je     c000344f <dir_read+0x1e>
c0003530:	eb 0b                	jmp    c000353d <dir_read+0x10c>
c0003532:	85 f6                	test   esi,esi
c0003534:	74 d5                	je     c000350b <dir_read+0xda>
c0003536:	eb 05                	jmp    c000353d <dir_read+0x10c>
c0003538:	be 04 00 00 00       	mov    esi,0x4
c000353d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003544:	83 c4 1c             	add    esp,0x1c
c0003547:	89 f0                	mov    eax,esi
c0003549:	5b                   	pop    ebx
c000354a:	5e                   	pop    esi
c000354b:	5f                   	pop    edi
c000354c:	5d                   	pop    ebp
c000354d:	c3                   	ret    

c000354e <dir_remove>:
c000354e:	57                   	push   edi
c000354f:	56                   	push   esi
c0003550:	53                   	push   ebx
c0003551:	89 c3                	mov    ebx,eax
c0003553:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003556:	8b 30                	mov    esi,DWORD PTR [eax]
c0003558:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000355b:	83 fa ff             	cmp    edx,0xffffffff
c000355e:	74 09                	je     c0003569 <dir_remove+0x1b>
c0003560:	e8 db fa ff ff       	call   c0003040 <dir_sdi>
c0003565:	85 c0                	test   eax,eax
c0003567:	75 34                	jne    c000359d <dir_remove+0x4f>
c0003569:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000356c:	89 f0                	mov    eax,esi
c000356e:	e8 ff ea ff ff       	call   c0002072 <move_window>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 1c                	jne    c0003593 <dir_remove+0x45>
c0003577:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000357a:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000357d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003581:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003584:	73 17                	jae    c000359d <dir_remove+0x4f>
c0003586:	31 d2                	xor    edx,edx
c0003588:	89 d8                	mov    eax,ebx
c000358a:	e8 3c fd ff ff       	call   c00032cb <dir_next>
c000358f:	85 c0                	test   eax,eax
c0003591:	74 d6                	je     c0003569 <dir_remove+0x1b>
c0003593:	83 f8 04             	cmp    eax,0x4
c0003596:	75 05                	jne    c000359d <dir_remove+0x4f>
c0003598:	b8 02 00 00 00       	mov    eax,0x2
c000359d:	5b                   	pop    ebx
c000359e:	5e                   	pop    esi
c000359f:	5f                   	pop    edi
c00035a0:	c3                   	ret    

c00035a1 <dir_find>:
c00035a1:	55                   	push   ebp
c00035a2:	31 d2                	xor    edx,edx
c00035a4:	57                   	push   edi
c00035a5:	56                   	push   esi
c00035a6:	53                   	push   ebx
c00035a7:	89 c3                	mov    ebx,eax
c00035a9:	83 ec 1c             	sub    esp,0x1c
c00035ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00035ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035b2:	89 d8                	mov    eax,ebx
c00035b4:	e8 87 fa ff ff       	call   c0003040 <dir_sdi>
c00035b9:	89 c6                	mov    esi,eax
c00035bb:	85 c0                	test   eax,eax
c00035bd:	0f 85 02 01 00 00    	jne    c00036c5 <dir_find+0x124>
c00035c3:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00035ca:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00035cf:	bf ff ff ff ff       	mov    edi,0xffffffff
c00035d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035db:	e8 92 ea ff ff       	call   c0002072 <move_window>
c00035e0:	89 c6                	mov    esi,eax
c00035e2:	85 c0                	test   eax,eax
c00035e4:	0f 85 db 00 00 00    	jne    c00036c5 <dir_find+0x124>
c00035ea:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00035ed:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00035f0:	84 c9                	test   cl,cl
c00035f2:	0f 84 c8 00 00 00    	je     c00036c0 <dir_find+0x11f>
c00035f8:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00035fb:	88 d0                	mov    al,dl
c00035fd:	83 e0 3f             	and    eax,0x3f
c0003600:	80 f9 e5             	cmp    cl,0xe5
c0003603:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003606:	0f 84 93 00 00 00    	je     c000369f <dir_find+0xfe>
c000360c:	80 e2 08             	and    dl,0x8
c000360f:	74 0a                	je     c000361b <dir_find+0x7a>
c0003611:	3c 0f                	cmp    al,0xf
c0003613:	0f 85 86 00 00 00    	jne    c000369f <dir_find+0xfe>
c0003619:	eb 04                	jmp    c000361f <dir_find+0x7e>
c000361b:	3c 0f                	cmp    al,0xf
c000361d:	75 54                	jne    c0003673 <dir_find+0xd2>
c000361f:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003623:	0f 85 82 00 00 00    	jne    c00036ab <dir_find+0x10a>
c0003629:	f6 c1 40             	test   cl,0x40
c000362c:	74 12                	je     c0003640 <dir_find+0x9f>
c000362e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003631:	83 e1 bf             	and    ecx,0xffffffbf
c0003634:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0003638:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000363b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000363e:	eb 06                	jmp    c0003646 <dir_find+0xa5>
c0003640:	89 f8                	mov    eax,edi
c0003642:	38 c8                	cmp    al,cl
c0003644:	75 60                	jne    c00036a6 <dir_find+0x105>
c0003646:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000364a:	bf ff ff ff ff       	mov    edi,0xffffffff
c000364f:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003652:	75 57                	jne    c00036ab <dir_find+0x10a>
c0003654:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003658:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000365c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000365f:	89 ea                	mov    edx,ebp
c0003661:	e8 89 f3 ff ff       	call   c00029ef <cmp_lfn>
c0003666:	85 c0                	test   eax,eax
c0003668:	74 41                	je     c00036ab <dir_find+0x10a>
c000366a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000366e:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003671:	eb 38                	jmp    c00036ab <dir_find+0x10a>
c0003673:	89 f8                	mov    eax,edi
c0003675:	84 c0                	test   al,al
c0003677:	75 0d                	jne    c0003686 <dir_find+0xe5>
c0003679:	89 e8                	mov    eax,ebp
c000367b:	e8 e9 e8 ff ff       	call   c0001f69 <sum_sfn>
c0003680:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003684:	74 3f                	je     c00036c5 <dir_find+0x124>
c0003686:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000368a:	75 13                	jne    c000369f <dir_find+0xfe>
c000368c:	8d 53 20             	lea    edx,[ebx+0x20]
c000368f:	b9 0b 00 00 00       	mov    ecx,0xb
c0003694:	89 e8                	mov    eax,ebp
c0003696:	e8 fd e4 ff ff       	call   c0001b98 <mem_cmp>
c000369b:	85 c0                	test   eax,eax
c000369d:	74 26                	je     c00036c5 <dir_find+0x124>
c000369f:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036a6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ab:	31 d2                	xor    edx,edx
c00036ad:	89 d8                	mov    eax,ebx
c00036af:	e8 17 fc ff ff       	call   c00032cb <dir_next>
c00036b4:	89 c6                	mov    esi,eax
c00036b6:	85 c0                	test   eax,eax
c00036b8:	0f 84 16 ff ff ff    	je     c00035d4 <dir_find+0x33>
c00036be:	eb 05                	jmp    c00036c5 <dir_find+0x124>
c00036c0:	be 04 00 00 00       	mov    esi,0x4
c00036c5:	83 c4 1c             	add    esp,0x1c
c00036c8:	89 f0                	mov    eax,esi
c00036ca:	5b                   	pop    ebx
c00036cb:	5e                   	pop    esi
c00036cc:	5f                   	pop    edi
c00036cd:	5d                   	pop    ebp
c00036ce:	c3                   	ret    

c00036cf <follow_path>:
c00036cf:	56                   	push   esi
c00036d0:	53                   	push   ebx
c00036d1:	89 c3                	mov    ebx,eax
c00036d3:	83 ec 14             	sub    esp,0x14
c00036d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036da:	8b 30                	mov    esi,DWORD PTR [eax]
c00036dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00036e0:	8a 10                	mov    dl,BYTE PTR [eax]
c00036e2:	80 fa 5c             	cmp    dl,0x5c
c00036e5:	75 07                	jne    c00036ee <follow_path+0x1f>
c00036e7:	40                   	inc    eax
c00036e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00036ec:	eb ee                	jmp    c00036dc <follow_path+0xd>
c00036ee:	80 fa 2f             	cmp    dl,0x2f
c00036f1:	74 f4                	je     c00036e7 <follow_path+0x18>
c00036f3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00036fa:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00036fd:	77 3e                	ja     c000373d <follow_path+0x6e>
c00036ff:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003703:	31 d2                	xor    edx,edx
c0003705:	89 d8                	mov    eax,ebx
c0003707:	e8 34 f9 ff ff       	call   c0003040 <dir_sdi>
c000370c:	eb 4f                	jmp    c000375d <follow_path+0x8e>
c000370e:	89 d8                	mov    eax,ebx
c0003710:	e8 8c fe ff ff       	call   c00035a1 <dir_find>
c0003715:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003718:	85 c0                	test   eax,eax
c000371a:	75 32                	jne    c000374e <follow_path+0x7f>
c000371c:	80 e2 04             	and    dl,0x4
c000371f:	75 3c                	jne    c000375d <follow_path+0x8e>
c0003721:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003725:	74 31                	je     c0003758 <follow_path+0x89>
c0003727:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000372a:	25 ff 01 00 00       	and    eax,0x1ff
c000372f:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003733:	8a 06                	mov    al,BYTE PTR [esi]
c0003735:	e8 b3 f7 ff ff       	call   c0002eed <ld_clust.isra.0>
c000373a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000373d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003741:	89 d8                	mov    eax,ebx
c0003743:	e8 cb ef ff ff       	call   c0002713 <create_name>
c0003748:	85 c0                	test   eax,eax
c000374a:	74 c2                	je     c000370e <follow_path+0x3f>
c000374c:	eb 0f                	jmp    c000375d <follow_path+0x8e>
c000374e:	83 f8 04             	cmp    eax,0x4
c0003751:	75 0a                	jne    c000375d <follow_path+0x8e>
c0003753:	80 e2 04             	and    dl,0x4
c0003756:	75 05                	jne    c000375d <follow_path+0x8e>
c0003758:	b8 05 00 00 00       	mov    eax,0x5
c000375d:	83 c4 14             	add    esp,0x14
c0003760:	5b                   	pop    ebx
c0003761:	5e                   	pop    esi
c0003762:	c3                   	ret    

c0003763 <dir_register>:
c0003763:	55                   	push   ebp
c0003764:	57                   	push   edi
c0003765:	56                   	push   esi
c0003766:	be 06 00 00 00       	mov    esi,0x6
c000376b:	53                   	push   ebx
c000376c:	83 ec 2c             	sub    esp,0x2c
c000376f:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003773:	0f 85 65 01 00 00    	jne    c00038de <dir_register+0x17b>
c0003779:	8b 38                	mov    edi,DWORD PTR [eax]
c000377b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003783:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003786:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000378a:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c000378f:	74 06                	je     c0003797 <dir_register+0x34>
c0003791:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003795:	eb ef                	jmp    c0003786 <dir_register+0x23>
c0003797:	89 c3                	mov    ebx,eax
c0003799:	b9 0c 00 00 00       	mov    ecx,0xc
c000379e:	8d 40 20             	lea    eax,[eax+0x20]
c00037a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037a5:	89 c2                	mov    edx,eax
c00037a7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00037ab:	e8 c8 e3 ff ff       	call   c0001b78 <mem_cpy>
c00037b0:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00037b5:	74 48                	je     c00037ff <dir_register+0x9c>
c00037b7:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c00037bb:	bd 01 00 00 00       	mov    ebp,0x1
c00037c0:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c00037c3:	55                   	push   ebp
c00037c4:	8d 54 24 18          	lea    edx,[esp+0x18]
c00037c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00037cc:	e8 dc e6 ff ff       	call   c0001ead <gen_numname>
c00037d1:	58                   	pop    eax
c00037d2:	89 d8                	mov    eax,ebx
c00037d4:	e8 c8 fd ff ff       	call   c00035a1 <dir_find>
c00037d9:	89 c6                	mov    esi,eax
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 10                	jne    c00037ef <dir_register+0x8c>
c00037df:	45                   	inc    ebp
c00037e0:	83 fd 64             	cmp    ebp,0x64
c00037e3:	75 db                	jne    c00037c0 <dir_register+0x5d>
c00037e5:	be 07 00 00 00       	mov    esi,0x7
c00037ea:	e9 ef 00 00 00       	jmp    c00038de <dir_register+0x17b>
c00037ef:	83 f8 04             	cmp    eax,0x4
c00037f2:	0f 85 e6 00 00 00    	jne    c00038de <dir_register+0x17b>
c00037f8:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00037fc:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00037ff:	bd 01 00 00 00       	mov    ebp,0x1
c0003804:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003809:	74 13                	je     c000381e <dir_register+0xbb>
c000380b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000380f:	b9 0d 00 00 00       	mov    ecx,0xd
c0003814:	83 c0 0c             	add    eax,0xc
c0003817:	31 d2                	xor    edx,edx
c0003819:	f7 f1                	div    ecx
c000381b:	8d 68 01             	lea    ebp,[eax+0x1]
c000381e:	89 ea                	mov    edx,ebp
c0003820:	89 d8                	mov    eax,ebx
c0003822:	e8 a9 fb ff ff       	call   c00033d0 <dir_alloc>
c0003827:	89 c6                	mov    esi,eax
c0003829:	85 c0                	test   eax,eax
c000382b:	0f 85 ad 00 00 00    	jne    c00038de <dir_register+0x17b>
c0003831:	4d                   	dec    ebp
c0003832:	74 6a                	je     c000389e <dir_register+0x13b>
c0003834:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003837:	89 e8                	mov    eax,ebp
c0003839:	c1 e0 05             	shl    eax,0x5
c000383c:	29 c2                	sub    edx,eax
c000383e:	89 d8                	mov    eax,ebx
c0003840:	e8 fb f7 ff ff       	call   c0003040 <dir_sdi>
c0003845:	89 c6                	mov    esi,eax
c0003847:	85 c0                	test   eax,eax
c0003849:	0f 85 8f 00 00 00    	jne    c00038de <dir_register+0x17b>
c000384f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003853:	e8 11 e7 ff ff       	call   c0001f69 <sum_sfn>
c0003858:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000385c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385f:	89 f8                	mov    eax,edi
c0003861:	e8 0c e8 ff ff       	call   c0002072 <move_window>
c0003866:	89 c6                	mov    esi,eax
c0003868:	85 c0                	test   eax,eax
c000386a:	75 72                	jne    c00038de <dir_register+0x17b>
c000386c:	83 ec 0c             	sub    esp,0xc
c000386f:	89 e8                	mov    eax,ebp
c0003871:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003876:	0f b6 c8             	movzx  ecx,al
c0003879:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000387c:	52                   	push   edx
c000387d:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003880:	e8 a4 e5 ff ff       	call   c0001e29 <put_lfn>
c0003885:	31 d2                	xor    edx,edx
c0003887:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c000388b:	89 d8                	mov    eax,ebx
c000388d:	e8 39 fa ff ff       	call   c00032cb <dir_next>
c0003892:	83 c4 10             	add    esp,0x10
c0003895:	89 c6                	mov    esi,eax
c0003897:	85 c0                	test   eax,eax
c0003899:	75 43                	jne    c00038de <dir_register+0x17b>
c000389b:	4d                   	dec    ebp
c000389c:	75 be                	jne    c000385c <dir_register+0xf9>
c000389e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038a1:	89 f8                	mov    eax,edi
c00038a3:	e8 ca e7 ff ff       	call   c0002072 <move_window>
c00038a8:	89 c6                	mov    esi,eax
c00038aa:	85 c0                	test   eax,eax
c00038ac:	75 30                	jne    c00038de <dir_register+0x17b>
c00038ae:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00038b1:	b9 20 00 00 00       	mov    ecx,0x20
c00038b6:	31 d2                	xor    edx,edx
c00038b8:	e8 d0 e2 ff ff       	call   c0001b8d <mem_set>
c00038bd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00038c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00038c4:	b9 0b 00 00 00       	mov    ecx,0xb
c00038c9:	e8 aa e2 ff ff       	call   c0001b78 <mem_cpy>
c00038ce:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c00038d1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038d4:	83 e0 18             	and    eax,0x18
c00038d7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c00038da:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c00038de:	83 c4 2c             	add    esp,0x2c
c00038e1:	89 f0                	mov    eax,esi
c00038e3:	5b                   	pop    ebx
c00038e4:	5e                   	pop    esi
c00038e5:	5f                   	pop    edi
c00038e6:	5d                   	pop    ebp
c00038e7:	c3                   	ret    

c00038e8 <f_mount>:
c00038e8:	53                   	push   ebx
c00038e9:	83 ec 18             	sub    esp,0x18
c00038ec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00038f0:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00038f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038f8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00038fc:	e8 7a e6 ff ff       	call   c0001f7b <get_ldnumber>
c0003901:	89 c2                	mov    edx,eax
c0003903:	b8 0b 00 00 00       	mov    eax,0xb
c0003908:	85 d2                	test   edx,edx
c000390a:	78 39                	js     c0003945 <f_mount+0x5d>
c000390c:	8b 04 95 a0 f1 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0e60]
c0003913:	85 c0                	test   eax,eax
c0003915:	74 03                	je     c000391a <f_mount+0x32>
c0003917:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000391a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000391e:	85 c0                	test   eax,eax
c0003920:	74 03                	je     c0003925 <f_mount+0x3d>
c0003922:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003925:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003929:	89 04 95 a0 f1 01 c0 	mov    DWORD PTR [edx*4-0x3ffe0e60],eax
c0003930:	31 c0                	xor    eax,eax
c0003932:	84 db                	test   bl,bl
c0003934:	74 0f                	je     c0003945 <f_mount+0x5d>
c0003936:	31 c9                	xor    ecx,ecx
c0003938:	8d 54 24 20          	lea    edx,[esp+0x20]
c000393c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003940:	e8 80 e8 ff ff       	call   c00021c5 <mount_volume>
c0003945:	83 c4 18             	add    esp,0x18
c0003948:	5b                   	pop    ebx
c0003949:	c3                   	ret    

c000394a <f_open>:
c000394a:	55                   	push   ebp
c000394b:	b8 09 00 00 00       	mov    eax,0x9
c0003950:	57                   	push   edi
c0003951:	56                   	push   esi
c0003952:	53                   	push   ebx
c0003953:	83 ec 5c             	sub    esp,0x5c
c0003956:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000395a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000395e:	85 db                	test   ebx,ebx
c0003960:	0f 84 a7 02 00 00    	je     c0003c0d <f_open+0x2c3>
c0003966:	89 fe                	mov    esi,edi
c0003968:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000396c:	83 e6 3f             	and    esi,0x3f
c000396f:	89 f0                	mov    eax,esi
c0003971:	0f b6 c8             	movzx  ecx,al
c0003974:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003978:	e8 48 e8 ff ff       	call   c00021c5 <mount_volume>
c000397d:	85 c0                	test   eax,eax
c000397f:	0f 85 82 02 00 00    	jne    c0003c07 <f_open+0x2bd>
c0003985:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003989:	83 ec 0c             	sub    esp,0xc
c000398c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003990:	68 00 02 00 00       	push   0x200
c0003995:	e8 fe 1e 00 00       	call   c0005898 <ff_memalloc>
c000399a:	83 c4 10             	add    esp,0x10
c000399d:	89 c5                	mov    ebp,eax
c000399f:	b8 11 00 00 00       	mov    eax,0x11
c00039a4:	85 ed                	test   ebp,ebp
c00039a6:	0f 84 61 02 00 00    	je     c0003c0d <f_open+0x2c3>
c00039ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00039b0:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00039b4:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c00039b7:	8d 44 24 20          	lea    eax,[esp+0x20]
c00039bb:	e8 0f fd ff ff       	call   c00036cf <follow_path>
c00039c0:	85 c0                	test   eax,eax
c00039c2:	75 0c                	jne    c00039d0 <f_open+0x86>
c00039c4:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00039c9:	79 05                	jns    c00039d0 <f_open+0x86>
c00039cb:	b8 06 00 00 00       	mov    eax,0x6
c00039d0:	f7 c7 1c 00 00 00    	test   edi,0x1c
c00039d6:	0f 84 de 00 00 00    	je     c0003aba <f_open+0x170>
c00039dc:	85 c0                	test   eax,eax
c00039de:	74 1e                	je     c00039fe <f_open+0xb4>
c00039e0:	83 f8 04             	cmp    eax,0x4
c00039e3:	0f 85 06 02 00 00    	jne    c0003bef <f_open+0x2a5>
c00039e9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00039ed:	83 ce 08             	or     esi,0x8
c00039f0:	e8 6e fd ff ff       	call   c0003763 <dir_register>
c00039f5:	85 c0                	test   eax,eax
c00039f7:	74 2f                	je     c0003a28 <f_open+0xde>
c00039f9:	e9 f1 01 00 00       	jmp    c0003bef <f_open+0x2a5>
c00039fe:	b8 07 00 00 00       	mov    eax,0x7
c0003a03:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003a08:	0f 85 e1 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003a0e:	b8 08 00 00 00       	mov    eax,0x8
c0003a13:	f7 c7 04 00 00 00    	test   edi,0x4
c0003a19:	0f 85 d0 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003a1f:	83 e7 08             	and    edi,0x8
c0003a22:	0f 84 bf 00 00 00    	je     c0003ae7 <f_open+0x19d>
c0003a28:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003a2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003a30:	89 ca                	mov    edx,ecx
c0003a32:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003a36:	8a 00                	mov    al,BYTE PTR [eax]
c0003a38:	e8 b0 f4 ff ff       	call   c0002eed <ld_clust.isra.0>
c0003a3d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a41:	89 c7                	mov    edi,eax
c0003a43:	ba 00 00 21 50       	mov    edx,0x50210000
c0003a48:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003a4b:	e8 25 e1 ff ff       	call   c0001b75 <st_dword>
c0003a50:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003a54:	31 c9                	xor    ecx,ecx
c0003a56:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003a5a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003a5e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003a62:	e8 af f4 ff ff       	call   c0002f16 <st_clust.isra.1>
c0003a67:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003a6b:	31 d2                	xor    edx,edx
c0003a6d:	83 c0 1c             	add    eax,0x1c
c0003a70:	e8 00 e1 ff ff       	call   c0001b75 <st_dword>
c0003a75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003a79:	85 ff                	test   edi,edi
c0003a7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003a7f:	74 66                	je     c0003ae7 <f_open+0x19d>
c0003a81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003a85:	31 c9                	xor    ecx,ecx
c0003a87:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003a8a:	89 fa                	mov    edx,edi
c0003a8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a90:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003a94:	e8 a9 f7 ff ff       	call   c0003242 <remove_chain>
c0003a99:	85 c0                	test   eax,eax
c0003a9b:	0f 85 4e 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003aa1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003aa5:	4f                   	dec    edi
c0003aa6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003aaa:	e8 c3 e5 ff ff       	call   c0002072 <move_window>
c0003aaf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003ab3:	85 c0                	test   eax,eax
c0003ab5:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003ab8:	eb 27                	jmp    c0003ae1 <f_open+0x197>
c0003aba:	85 c0                	test   eax,eax
c0003abc:	0f 85 2d 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003ac2:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003ac6:	b8 04 00 00 00       	mov    eax,0x4
c0003acb:	f6 c2 10             	test   dl,0x10
c0003ace:	0f 85 1b 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003ad4:	83 e7 02             	and    edi,0x2
c0003ad7:	74 0e                	je     c0003ae7 <f_open+0x19d>
c0003ad9:	b8 07 00 00 00       	mov    eax,0x7
c0003ade:	80 e2 01             	and    dl,0x1
c0003ae1:	0f 85 08 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003ae7:	f7 c6 08 00 00 00    	test   esi,0x8
c0003aed:	74 03                	je     c0003af2 <f_open+0x1a8>
c0003aef:	83 ce 40             	or     esi,0x40
c0003af2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003af6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003afa:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003afd:	89 fa                	mov    edx,edi
c0003aff:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003b03:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003b06:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003b09:	8a 01                	mov    al,BYTE PTR [ecx]
c0003b0b:	e8 dd f3 ff ff       	call   c0002eed <ld_clust.isra.0>
c0003b10:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003b13:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003b16:	e8 3e e0 ff ff       	call   c0001b59 <ld_dword>
c0003b1b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003b1f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003b22:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003b24:	31 d2                	xor    edx,edx
c0003b26:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003b2a:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003b2e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003b32:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003b39:	89 f0                	mov    eax,esi
c0003b3b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003b42:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003b45:	b9 00 02 00 00       	mov    ecx,0x200
c0003b4a:	8d 43 28             	lea    eax,[ebx+0x28]
c0003b4d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003b51:	e8 37 e0 ff ff       	call   c0001b8d <mem_set>
c0003b56:	83 e6 20             	and    esi,0x20
c0003b59:	75 07                	jne    c0003b62 <f_open+0x218>
c0003b5b:	31 c0                	xor    eax,eax
c0003b5d:	e9 8d 00 00 00       	jmp    c0003bef <f_open+0x2a5>
c0003b62:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003b65:	85 ff                	test   edi,edi
c0003b67:	74 f2                	je     c0003b5b <f_open+0x211>
c0003b69:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003b6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b70:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003b73:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003b77:	c1 e6 09             	shl    esi,0x9
c0003b7a:	39 fe                	cmp    esi,edi
c0003b7c:	73 1c                	jae    c0003b9a <f_open+0x250>
c0003b7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003b80:	29 f7                	sub    edi,esi
c0003b82:	e8 b7 f3 ff ff       	call   c0002f3e <get_fat.isra.2>
c0003b87:	89 c2                	mov    edx,eax
c0003b89:	83 f8 01             	cmp    eax,0x1
c0003b8c:	76 10                	jbe    c0003b9e <f_open+0x254>
c0003b8e:	83 f8 ff             	cmp    eax,0xffffffff
c0003b91:	75 e7                	jne    c0003b7a <f_open+0x230>
c0003b93:	b8 01 00 00 00       	mov    eax,0x1
c0003b98:	eb 09                	jmp    c0003ba3 <f_open+0x259>
c0003b9a:	31 c0                	xor    eax,eax
c0003b9c:	eb 05                	jmp    c0003ba3 <f_open+0x259>
c0003b9e:	b8 02 00 00 00       	mov    eax,0x2
c0003ba3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ba6:	85 c0                	test   eax,eax
c0003ba8:	75 45                	jne    c0003bef <f_open+0x2a5>
c0003baa:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003bb0:	74 a9                	je     c0003b5b <f_open+0x211>
c0003bb2:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003bb6:	89 f0                	mov    eax,esi
c0003bb8:	e8 d5 e1 ff ff       	call   c0001d92 <clst2sect>
c0003bbd:	89 c2                	mov    edx,eax
c0003bbf:	b8 02 00 00 00       	mov    eax,0x2
c0003bc4:	85 d2                	test   edx,edx
c0003bc6:	74 27                	je     c0003bef <f_open+0x2a5>
c0003bc8:	89 f9                	mov    ecx,edi
c0003bca:	c1 e9 09             	shr    ecx,0x9
c0003bcd:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003bd0:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003bd3:	6a 01                	push   0x1
c0003bd5:	50                   	push   eax
c0003bd6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003bda:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003bde:	50                   	push   eax
c0003bdf:	e8 1d df ff ff       	call   c0001b01 <disk_read>
c0003be4:	83 c4 10             	add    esp,0x10
c0003be7:	85 c0                	test   eax,eax
c0003be9:	0f 95 c0             	setne  al
c0003bec:	0f b6 c0             	movzx  eax,al
c0003bef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bf3:	83 ec 0c             	sub    esp,0xc
c0003bf6:	55                   	push   ebp
c0003bf7:	e8 b4 1c 00 00       	call   c00058b0 <ff_memfree>
c0003bfc:	83 c4 10             	add    esp,0x10
c0003bff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c03:	85 c0                	test   eax,eax
c0003c05:	74 06                	je     c0003c0d <f_open+0x2c3>
c0003c07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003c0d:	83 c4 5c             	add    esp,0x5c
c0003c10:	5b                   	pop    ebx
c0003c11:	5e                   	pop    esi
c0003c12:	5f                   	pop    edi
c0003c13:	5d                   	pop    ebp
c0003c14:	c3                   	ret    

c0003c15 <f_read>:
c0003c15:	55                   	push   ebp
c0003c16:	57                   	push   edi
c0003c17:	56                   	push   esi
c0003c18:	53                   	push   ebx
c0003c19:	83 ec 2c             	sub    esp,0x2c
c0003c1c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003c20:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003c24:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003c2a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003c2e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c32:	89 d8                	mov    eax,ebx
c0003c34:	e8 8f e3 ff ff       	call   c0001fc8 <validate>
c0003c39:	89 c5                	mov    ebp,eax
c0003c3b:	85 c0                	test   eax,eax
c0003c3d:	0f 85 c7 01 00 00    	jne    c0003e0a <f_read+0x1f5>
c0003c43:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003c47:	85 ed                	test   ebp,ebp
c0003c49:	0f 85 bb 01 00 00    	jne    c0003e0a <f_read+0x1f5>
c0003c4f:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003c53:	0f 84 ac 01 00 00    	je     c0003e05 <f_read+0x1f0>
c0003c59:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003c5c:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003c5f:	89 c7                	mov    edi,eax
c0003c61:	39 f0                	cmp    eax,esi
c0003c63:	0f 86 ad 00 00 00    	jbe    c0003d16 <f_read+0x101>
c0003c69:	89 f7                	mov    edi,esi
c0003c6b:	e9 a6 00 00 00       	jmp    c0003d16 <f_read+0x101>
c0003c70:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003c73:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003c79:	0f 85 5b 01 00 00    	jne    c0003dda <f_read+0x1c5>
c0003c7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c83:	89 d1                	mov    ecx,edx
c0003c85:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003c89:	c1 e9 09             	shr    ecx,0x9
c0003c8c:	48                   	dec    eax
c0003c8d:	21 c8                	and    eax,ecx
c0003c8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003c93:	0f 84 8a 00 00 00    	je     c0003d23 <f_read+0x10e>
c0003c99:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c9d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ca0:	89 c8                	mov    eax,ecx
c0003ca2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003ca6:	e8 e7 e0 ff ff       	call   c0001d92 <clst2sect>
c0003cab:	85 c0                	test   eax,eax
c0003cad:	0f 84 88 00 00 00    	je     c0003d3b <f_read+0x126>
c0003cb3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003cb7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cbb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003cbf:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003cc5:	0f 86 bd 00 00 00    	jbe    c0003d88 <f_read+0x173>
c0003ccb:	89 fe                	mov    esi,edi
c0003ccd:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003cd1:	c1 ee 09             	shr    esi,0x9
c0003cd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003cd8:	01 f2                	add    edx,esi
c0003cda:	39 c2                	cmp    edx,eax
c0003cdc:	76 06                	jbe    c0003ce4 <f_read+0xcf>
c0003cde:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ce2:	89 c6                	mov    esi,eax
c0003ce4:	56                   	push   esi
c0003ce5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ce9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ced:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003cf1:	50                   	push   eax
c0003cf2:	e8 0a de ff ff       	call   c0001b01 <disk_read>
c0003cf7:	83 c4 10             	add    esp,0x10
c0003cfa:	85 c0                	test   eax,eax
c0003cfc:	75 50                	jne    c0003d4e <f_read+0x139>
c0003cfe:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003d02:	78 60                	js     c0003d64 <f_read+0x14f>
c0003d04:	c1 e6 09             	shl    esi,0x9
c0003d07:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003d0b:	29 f7                	sub    edi,esi
c0003d0d:	01 30                	add    DWORD PTR [eax],esi
c0003d0f:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003d13:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003d16:	85 ff                	test   edi,edi
c0003d18:	0f 85 52 ff ff ff    	jne    c0003c70 <f_read+0x5b>
c0003d1e:	e9 e7 00 00 00       	jmp    c0003e0a <f_read+0x1f5>
c0003d23:	85 d2                	test   edx,edx
c0003d25:	75 05                	jne    c0003d2c <f_read+0x117>
c0003d27:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003d2a:	eb 0a                	jmp    c0003d36 <f_read+0x121>
c0003d2c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d2f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d31:	e8 08 f2 ff ff       	call   c0002f3e <get_fat.isra.2>
c0003d36:	83 f8 01             	cmp    eax,0x1
c0003d39:	77 0e                	ja     c0003d49 <f_read+0x134>
c0003d3b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003d3f:	bd 02 00 00 00       	mov    ebp,0x2
c0003d44:	e9 c1 00 00 00       	jmp    c0003e0a <f_read+0x1f5>
c0003d49:	83 f8 ff             	cmp    eax,0xffffffff
c0003d4c:	75 0e                	jne    c0003d5c <f_read+0x147>
c0003d4e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003d52:	bd 01 00 00 00       	mov    ebp,0x1
c0003d57:	e9 ae 00 00 00       	jmp    c0003e0a <f_read+0x1f5>
c0003d5c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003d5f:	e9 35 ff ff ff       	jmp    c0003c99 <f_read+0x84>
c0003d64:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003d67:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003d6b:	39 f0                	cmp    eax,esi
c0003d6d:	73 95                	jae    c0003d04 <f_read+0xef>
c0003d6f:	c1 e0 09             	shl    eax,0x9
c0003d72:	8d 53 28             	lea    edx,[ebx+0x28]
c0003d75:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003d79:	b9 00 02 00 00       	mov    ecx,0x200
c0003d7e:	e8 f5 dd ff ff       	call   c0001b78 <mem_cpy>
c0003d83:	e9 7c ff ff ff       	jmp    c0003d04 <f_read+0xef>
c0003d88:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003d8b:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003d8f:	74 42                	je     c0003dd3 <f_read+0x1be>
c0003d91:	8d 73 28             	lea    esi,[ebx+0x28]
c0003d94:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003d98:	79 19                	jns    c0003db3 <f_read+0x19e>
c0003d9a:	6a 01                	push   0x1
c0003d9c:	50                   	push   eax
c0003d9d:	56                   	push   esi
c0003d9e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003da2:	50                   	push   eax
c0003da3:	e8 6f dd ff ff       	call   c0001b17 <disk_write>
c0003da8:	83 c4 10             	add    esp,0x10
c0003dab:	85 c0                	test   eax,eax
c0003dad:	75 9f                	jne    c0003d4e <f_read+0x139>
c0003daf:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003db3:	6a 01                	push   0x1
c0003db5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003db9:	56                   	push   esi
c0003dba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003dbe:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003dc2:	50                   	push   eax
c0003dc3:	e8 39 dd ff ff       	call   c0001b01 <disk_read>
c0003dc8:	83 c4 10             	add    esp,0x10
c0003dcb:	85 c0                	test   eax,eax
c0003dcd:	0f 85 7b ff ff ff    	jne    c0003d4e <f_read+0x139>
c0003dd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003dd7:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003dda:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003ddd:	ba 00 02 00 00       	mov    edx,0x200
c0003de2:	25 ff 01 00 00       	and    eax,0x1ff
c0003de7:	89 fe                	mov    esi,edi
c0003de9:	29 c2                	sub    edx,eax
c0003deb:	39 d7                	cmp    edi,edx
c0003ded:	76 02                	jbe    c0003df1 <f_read+0x1dc>
c0003def:	89 d6                	mov    esi,edx
c0003df1:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003df5:	89 f1                	mov    ecx,esi
c0003df7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003dfb:	e8 78 dd ff ff       	call   c0001b78 <mem_cpy>
c0003e00:	e9 02 ff ff ff       	jmp    c0003d07 <f_read+0xf2>
c0003e05:	bd 07 00 00 00       	mov    ebp,0x7
c0003e0a:	83 c4 2c             	add    esp,0x2c
c0003e0d:	89 e8                	mov    eax,ebp
c0003e0f:	5b                   	pop    ebx
c0003e10:	5e                   	pop    esi
c0003e11:	5f                   	pop    edi
c0003e12:	5d                   	pop    ebp
c0003e13:	c3                   	ret    

c0003e14 <f_write>:
c0003e14:	55                   	push   ebp
c0003e15:	57                   	push   edi
c0003e16:	56                   	push   esi
c0003e17:	53                   	push   ebx
c0003e18:	83 ec 2c             	sub    esp,0x2c
c0003e1b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003e1f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003e23:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003e29:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e2d:	89 d8                	mov    eax,ebx
c0003e2f:	e8 94 e1 ff ff       	call   c0001fc8 <validate>
c0003e34:	89 c5                	mov    ebp,eax
c0003e36:	85 c0                	test   eax,eax
c0003e38:	0f 85 00 02 00 00    	jne    c000403e <f_write+0x22a>
c0003e3e:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e42:	85 ed                	test   ebp,ebp
c0003e44:	0f 85 f4 01 00 00    	jne    c000403e <f_write+0x22a>
c0003e4a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0003e4e:	0f 84 e5 01 00 00    	je     c0004039 <f_write+0x225>
c0003e54:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003e57:	89 c7                	mov    edi,eax
c0003e59:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0003e5d:	0f 83 ea 00 00 00    	jae    c0003f4d <f_write+0x139>
c0003e63:	f7 d0                	not    eax
c0003e65:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0003e69:	e9 df 00 00 00       	jmp    c0003f4d <f_write+0x139>
c0003e6e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e71:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e77:	0f 85 8b 01 00 00    	jne    c0004008 <f_write+0x1f4>
c0003e7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e81:	89 d1                	mov    ecx,edx
c0003e83:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e87:	c1 e9 09             	shr    ecx,0x9
c0003e8a:	48                   	dec    eax
c0003e8b:	21 c8                	and    eax,ecx
c0003e8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e91:	0f 84 c3 00 00 00    	je     c0003f5a <f_write+0x146>
c0003e97:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003e9b:	0f 88 18 01 00 00    	js     c0003fb9 <f_write+0x1a5>
c0003ea1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003ea5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ea8:	89 c8                	mov    eax,ecx
c0003eaa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003eae:	e8 df de ff ff       	call   c0001d92 <clst2sect>
c0003eb3:	85 c0                	test   eax,eax
c0003eb5:	0f 84 c8 00 00 00    	je     c0003f83 <f_write+0x16f>
c0003ebb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0003ebf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003ec3:	01 c7                	add    edi,eax
c0003ec5:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0003ecd:	0f 86 0d 01 00 00    	jbe    c0003fe0 <f_write+0x1cc>
c0003ed3:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003ed7:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003edb:	c1 ee 09             	shr    esi,0x9
c0003ede:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ee2:	01 f2                	add    edx,esi
c0003ee4:	39 c2                	cmp    edx,eax
c0003ee6:	76 06                	jbe    c0003eee <f_write+0xda>
c0003ee8:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eec:	89 c6                	mov    esi,eax
c0003eee:	56                   	push   esi
c0003eef:	57                   	push   edi
c0003ef0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ef4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ef8:	50                   	push   eax
c0003ef9:	e8 19 dc ff ff       	call   c0001b17 <disk_write>
c0003efe:	83 c4 10             	add    esp,0x10
c0003f01:	85 c0                	test   eax,eax
c0003f03:	0f 85 8d 00 00 00    	jne    c0003f96 <f_write+0x182>
c0003f09:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003f0c:	29 fa                	sub    edx,edi
c0003f0e:	39 f2                	cmp    edx,esi
c0003f10:	73 18                	jae    c0003f2a <f_write+0x116>
c0003f12:	c1 e2 09             	shl    edx,0x9
c0003f15:	8d 43 28             	lea    eax,[ebx+0x28]
c0003f18:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0003f1c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f21:	e8 52 dc ff ff       	call   c0001b78 <mem_cpy>
c0003f26:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f2a:	c1 e6 09             	shl    esi,0x9
c0003f2d:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0003f31:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f35:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003f39:	01 30                	add    DWORD PTR [eax],esi
c0003f3b:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0003f3e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f41:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003f44:	39 f0                	cmp    eax,esi
c0003f46:	73 02                	jae    c0003f4a <f_write+0x136>
c0003f48:	89 f0                	mov    eax,esi
c0003f4a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003f4d:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0003f52:	0f 85 16 ff ff ff    	jne    c0003e6e <f_write+0x5a>
c0003f58:	eb 1b                	jmp    c0003f75 <f_write+0x161>
c0003f5a:	85 d2                	test   edx,edx
c0003f5c:	75 09                	jne    c0003f67 <f_write+0x153>
c0003f5e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003f61:	85 c0                	test   eax,eax
c0003f63:	75 19                	jne    c0003f7e <f_write+0x16a>
c0003f65:	eb 03                	jmp    c0003f6a <f_write+0x156>
c0003f67:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f6a:	89 d8                	mov    eax,ebx
c0003f6c:	e8 97 f1 ff ff       	call   c0003108 <create_chain>
c0003f71:	85 c0                	test   eax,eax
c0003f73:	75 09                	jne    c0003f7e <f_write+0x16a>
c0003f75:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0003f79:	e9 c0 00 00 00       	jmp    c000403e <f_write+0x22a>
c0003f7e:	83 f8 01             	cmp    eax,0x1
c0003f81:	75 0e                	jne    c0003f91 <f_write+0x17d>
c0003f83:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f87:	bd 02 00 00 00       	mov    ebp,0x2
c0003f8c:	e9 ad 00 00 00       	jmp    c000403e <f_write+0x22a>
c0003f91:	83 f8 ff             	cmp    eax,0xffffffff
c0003f94:	75 0e                	jne    c0003fa4 <f_write+0x190>
c0003f96:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f9a:	bd 01 00 00 00       	mov    ebp,0x1
c0003f9f:	e9 9a 00 00 00       	jmp    c000403e <f_write+0x22a>
c0003fa4:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003fa7:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003fab:	0f 85 e6 fe ff ff    	jne    c0003e97 <f_write+0x83>
c0003fb1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003fb4:	e9 de fe ff ff       	jmp    c0003e97 <f_write+0x83>
c0003fb9:	6a 01                	push   0x1
c0003fbb:	8d 43 28             	lea    eax,[ebx+0x28]
c0003fbe:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0003fc1:	50                   	push   eax
c0003fc2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003fc6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003fca:	50                   	push   eax
c0003fcb:	e8 47 db ff ff       	call   c0001b17 <disk_write>
c0003fd0:	83 c4 10             	add    esp,0x10
c0003fd3:	85 c0                	test   eax,eax
c0003fd5:	75 bf                	jne    c0003f96 <f_write+0x182>
c0003fd7:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003fdb:	e9 c1 fe ff ff       	jmp    c0003ea1 <f_write+0x8d>
c0003fe0:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c0003fe3:	74 20                	je     c0004005 <f_write+0x1f1>
c0003fe5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fe8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0003feb:	76 18                	jbe    c0004005 <f_write+0x1f1>
c0003fed:	6a 01                	push   0x1
c0003fef:	8d 43 28             	lea    eax,[ebx+0x28]
c0003ff2:	57                   	push   edi
c0003ff3:	50                   	push   eax
c0003ff4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ff8:	50                   	push   eax
c0003ff9:	e8 03 db ff ff       	call   c0001b01 <disk_read>
c0003ffe:	83 c4 10             	add    esp,0x10
c0004001:	85 c0                	test   eax,eax
c0004003:	75 91                	jne    c0003f96 <f_write+0x182>
c0004005:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004008:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000400b:	ba 00 02 00 00       	mov    edx,0x200
c0004010:	25 ff 01 00 00       	and    eax,0x1ff
c0004015:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004019:	29 c2                	sub    edx,eax
c000401b:	39 d6                	cmp    esi,edx
c000401d:	76 02                	jbe    c0004021 <f_write+0x20d>
c000401f:	89 d6                	mov    esi,edx
c0004021:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004025:	89 f1                	mov    ecx,esi
c0004027:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000402b:	e8 48 db ff ff       	call   c0001b78 <mem_cpy>
c0004030:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004034:	e9 f4 fe ff ff       	jmp    c0003f2d <f_write+0x119>
c0004039:	bd 07 00 00 00       	mov    ebp,0x7
c000403e:	83 c4 2c             	add    esp,0x2c
c0004041:	89 e8                	mov    eax,ebp
c0004043:	5b                   	pop    ebx
c0004044:	5e                   	pop    esi
c0004045:	5f                   	pop    edi
c0004046:	5d                   	pop    ebp
c0004047:	c3                   	ret    

c0004048 <f_sync>:
c0004048:	56                   	push   esi
c0004049:	53                   	push   ebx
c000404a:	83 ec 14             	sub    esp,0x14
c000404d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004051:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004055:	89 d8                	mov    eax,ebx
c0004057:	e8 6c df ff ff       	call   c0001fc8 <validate>
c000405c:	85 c0                	test   eax,eax
c000405e:	0f 85 93 00 00 00    	jne    c00040f7 <f_sync+0xaf>
c0004064:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004067:	f6 c2 40             	test   dl,0x40
c000406a:	0f 84 87 00 00 00    	je     c00040f7 <f_sync+0xaf>
c0004070:	84 d2                	test   dl,dl
c0004072:	79 29                	jns    c000409d <f_sync+0x55>
c0004074:	6a 01                	push   0x1
c0004076:	8d 43 28             	lea    eax,[ebx+0x28]
c0004079:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000407c:	50                   	push   eax
c000407d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004081:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004085:	50                   	push   eax
c0004086:	e8 8c da ff ff       	call   c0001b17 <disk_write>
c000408b:	83 c4 10             	add    esp,0x10
c000408e:	89 c2                	mov    edx,eax
c0004090:	b8 01 00 00 00       	mov    eax,0x1
c0004095:	85 d2                	test   edx,edx
c0004097:	75 5e                	jne    c00040f7 <f_sync+0xaf>
c0004099:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000409d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00040a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040a4:	e8 c9 df ff ff       	call   c0002072 <move_window>
c00040a9:	85 c0                	test   eax,eax
c00040ab:	75 4a                	jne    c00040f7 <f_sync+0xaf>
c00040ad:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00040b0:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00040b4:	89 f2                	mov    edx,esi
c00040b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00040b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00040bb:	e8 56 ee ff ff       	call   c0002f16 <st_clust.isra.1>
c00040c0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00040c3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00040c6:	e8 aa da ff ff       	call   c0001b75 <st_dword>
c00040cb:	8d 46 16             	lea    eax,[esi+0x16]
c00040ce:	ba 00 00 21 50       	mov    edx,0x50210000
c00040d3:	e8 9d da ff ff       	call   c0001b75 <st_dword>
c00040d8:	8d 46 12             	lea    eax,[esi+0x12]
c00040db:	31 d2                	xor    edx,edx
c00040dd:	e8 8f da ff ff       	call   c0001b71 <st_word>
c00040e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040e6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00040ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040ee:	e8 bf e9 ff ff       	call   c0002ab2 <sync_fs>
c00040f3:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00040f7:	83 c4 14             	add    esp,0x14
c00040fa:	5b                   	pop    ebx
c00040fb:	5e                   	pop    esi
c00040fc:	c3                   	ret    

c00040fd <f_close>:
c00040fd:	53                   	push   ebx
c00040fe:	83 ec 24             	sub    esp,0x24
c0004101:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004105:	53                   	push   ebx
c0004106:	e8 3d ff ff ff       	call   c0004048 <f_sync>
c000410b:	83 c4 10             	add    esp,0x10
c000410e:	85 c0                	test   eax,eax
c0004110:	75 15                	jne    c0004127 <f_close+0x2a>
c0004112:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004116:	89 d8                	mov    eax,ebx
c0004118:	e8 ab de ff ff       	call   c0001fc8 <validate>
c000411d:	85 c0                	test   eax,eax
c000411f:	75 06                	jne    c0004127 <f_close+0x2a>
c0004121:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004127:	83 c4 18             	add    esp,0x18
c000412a:	5b                   	pop    ebx
c000412b:	c3                   	ret    

c000412c <f_lseek>:
c000412c:	55                   	push   ebp
c000412d:	57                   	push   edi
c000412e:	56                   	push   esi
c000412f:	53                   	push   ebx
c0004130:	83 ec 2c             	sub    esp,0x2c
c0004133:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004137:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000413b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000413f:	89 d8                	mov    eax,ebx
c0004141:	e8 82 de ff ff       	call   c0001fc8 <validate>
c0004146:	89 c5                	mov    ebp,eax
c0004148:	85 c0                	test   eax,eax
c000414a:	0f 85 79 01 00 00    	jne    c00042c9 <f_lseek+0x19d>
c0004150:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004154:	85 ed                	test   ebp,ebp
c0004156:	0f 85 6d 01 00 00    	jne    c00042c9 <f_lseek+0x19d>
c000415c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000415f:	39 f0                	cmp    eax,esi
c0004161:	73 08                	jae    c000416b <f_lseek+0x3f>
c0004163:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004167:	75 02                	jne    c000416b <f_lseek+0x3f>
c0004169:	89 c6                	mov    esi,eax
c000416b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000416e:	85 f6                	test   esi,esi
c0004170:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004177:	75 07                	jne    c0004180 <f_lseek+0x54>
c0004179:	31 f6                	xor    esi,esi
c000417b:	e9 e2 00 00 00       	jmp    c0004262 <f_lseek+0x136>
c0004180:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004184:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c0004188:	c1 e7 09             	shl    edi,0x9
c000418b:	85 c9                	test   ecx,ecx
c000418d:	74 28                	je     c00041b7 <f_lseek+0x8b>
c000418f:	49                   	dec    ecx
c0004190:	31 d2                	xor    edx,edx
c0004192:	8d 46 ff             	lea    eax,[esi-0x1]
c0004195:	f7 f7                	div    edi
c0004197:	31 d2                	xor    edx,edx
c0004199:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000419d:	89 c8                	mov    eax,ecx
c000419f:	f7 f7                	div    edi
c00041a1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00041a5:	72 10                	jb     c00041b7 <f_lseek+0x8b>
c00041a7:	89 f8                	mov    eax,edi
c00041a9:	f7 d8                	neg    eax
c00041ab:	21 c1                	and    ecx,eax
c00041ad:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00041b0:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00041b3:	29 ce                	sub    esi,ecx
c00041b5:	eb 3c                	jmp    c00041f3 <f_lseek+0xc7>
c00041b7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00041ba:	85 c0                	test   eax,eax
c00041bc:	75 32                	jne    c00041f0 <f_lseek+0xc4>
c00041be:	31 d2                	xor    edx,edx
c00041c0:	89 d8                	mov    eax,ebx
c00041c2:	e8 41 ef ff ff       	call   c0003108 <create_chain>
c00041c7:	83 f8 01             	cmp    eax,0x1
c00041ca:	75 0e                	jne    c00041da <f_lseek+0xae>
c00041cc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00041d0:	bd 02 00 00 00       	mov    ebp,0x2
c00041d5:	e9 ef 00 00 00       	jmp    c00042c9 <f_lseek+0x19d>
c00041da:	83 f8 ff             	cmp    eax,0xffffffff
c00041dd:	75 0e                	jne    c00041ed <f_lseek+0xc1>
c00041df:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00041e3:	bd 01 00 00 00       	mov    ebp,0x1
c00041e8:	e9 dc 00 00 00       	jmp    c00042c9 <f_lseek+0x19d>
c00041ed:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00041f0:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00041f3:	85 c0                	test   eax,eax
c00041f5:	74 82                	je     c0004179 <f_lseek+0x4d>
c00041f7:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00041fa:	39 fe                	cmp    esi,edi
c00041fc:	76 3d                	jbe    c000423b <f_lseek+0x10f>
c00041fe:	01 fa                	add    edx,edi
c0004200:	29 fe                	sub    esi,edi
c0004202:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004205:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004209:	89 c2                	mov    edx,eax
c000420b:	74 0d                	je     c000421a <f_lseek+0xee>
c000420d:	89 d8                	mov    eax,ebx
c000420f:	e8 f4 ee ff ff       	call   c0003108 <create_chain>
c0004214:	85 c0                	test   eax,eax
c0004216:	75 09                	jne    c0004221 <f_lseek+0xf5>
c0004218:	eb 1f                	jmp    c0004239 <f_lseek+0x10d>
c000421a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000421c:	e8 1d ed ff ff       	call   c0002f3e <get_fat.isra.2>
c0004221:	83 f8 ff             	cmp    eax,0xffffffff
c0004224:	74 b9                	je     c00041df <f_lseek+0xb3>
c0004226:	83 f8 01             	cmp    eax,0x1
c0004229:	76 a1                	jbe    c00041cc <f_lseek+0xa0>
c000422b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000422f:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004232:	76 98                	jbe    c00041cc <f_lseek+0xa0>
c0004234:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004237:	eb be                	jmp    c00041f7 <f_lseek+0xcb>
c0004239:	31 f6                	xor    esi,esi
c000423b:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000423e:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004244:	0f 84 2f ff ff ff    	je     c0004179 <f_lseek+0x4d>
c000424a:	89 c2                	mov    edx,eax
c000424c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004250:	e8 3d db ff ff       	call   c0001d92 <clst2sect>
c0004255:	85 c0                	test   eax,eax
c0004257:	0f 84 6f ff ff ff    	je     c00041cc <f_lseek+0xa0>
c000425d:	c1 ee 09             	shr    esi,0x9
c0004260:	01 c6                	add    esi,eax
c0004262:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004265:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004268:	76 07                	jbe    c0004271 <f_lseek+0x145>
c000426a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000426d:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004271:	a9 ff 01 00 00       	test   eax,0x1ff
c0004276:	74 51                	je     c00042c9 <f_lseek+0x19d>
c0004278:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000427b:	39 f0                	cmp    eax,esi
c000427d:	74 4a                	je     c00042c9 <f_lseek+0x19d>
c000427f:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004282:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004286:	79 21                	jns    c00042a9 <f_lseek+0x17d>
c0004288:	6a 01                	push   0x1
c000428a:	50                   	push   eax
c000428b:	57                   	push   edi
c000428c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004290:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004294:	50                   	push   eax
c0004295:	e8 7d d8 ff ff       	call   c0001b17 <disk_write>
c000429a:	83 c4 10             	add    esp,0x10
c000429d:	85 c0                	test   eax,eax
c000429f:	0f 85 3a ff ff ff    	jne    c00041df <f_lseek+0xb3>
c00042a5:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00042a9:	6a 01                	push   0x1
c00042ab:	56                   	push   esi
c00042ac:	57                   	push   edi
c00042ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042b1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042b5:	50                   	push   eax
c00042b6:	e8 46 d8 ff ff       	call   c0001b01 <disk_read>
c00042bb:	83 c4 10             	add    esp,0x10
c00042be:	85 c0                	test   eax,eax
c00042c0:	0f 85 19 ff ff ff    	jne    c00041df <f_lseek+0xb3>
c00042c6:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00042c9:	83 c4 2c             	add    esp,0x2c
c00042cc:	89 e8                	mov    eax,ebp
c00042ce:	5b                   	pop    ebx
c00042cf:	5e                   	pop    esi
c00042d0:	5f                   	pop    edi
c00042d1:	5d                   	pop    ebp
c00042d2:	c3                   	ret    

c00042d3 <f_opendir>:
c00042d3:	56                   	push   esi
c00042d4:	b8 09 00 00 00       	mov    eax,0x9
c00042d9:	53                   	push   ebx
c00042da:	83 ec 24             	sub    esp,0x24
c00042dd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00042e1:	85 db                	test   ebx,ebx
c00042e3:	0f 84 af 00 00 00    	je     c0004398 <f_opendir+0xc5>
c00042e9:	31 c9                	xor    ecx,ecx
c00042eb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00042ef:	8d 44 24 34          	lea    eax,[esp+0x34]
c00042f3:	e8 cd de ff ff       	call   c00021c5 <mount_volume>
c00042f8:	85 c0                	test   eax,eax
c00042fa:	0f 85 92 00 00 00    	jne    c0004392 <f_opendir+0xbf>
c0004300:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004304:	83 ec 0c             	sub    esp,0xc
c0004307:	89 03                	mov    DWORD PTR [ebx],eax
c0004309:	68 00 02 00 00       	push   0x200
c000430e:	e8 85 15 00 00       	call   c0005898 <ff_memalloc>
c0004313:	83 c4 10             	add    esp,0x10
c0004316:	89 c6                	mov    esi,eax
c0004318:	b8 11 00 00 00       	mov    eax,0x11
c000431d:	85 f6                	test   esi,esi
c000431f:	74 77                	je     c0004398 <f_opendir+0xc5>
c0004321:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004325:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004329:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000432c:	89 d8                	mov    eax,ebx
c000432e:	e8 9c f3 ff ff       	call   c00036cf <follow_path>
c0004333:	85 c0                	test   eax,eax
c0004335:	75 37                	jne    c000436e <f_opendir+0x9b>
c0004337:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000433b:	78 1c                	js     c0004359 <f_opendir+0x86>
c000433d:	b8 05 00 00 00       	mov    eax,0x5
c0004342:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004346:	74 26                	je     c000436e <f_opendir+0x9b>
c0004348:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000434b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000434f:	8a 00                	mov    al,BYTE PTR [eax]
c0004351:	e8 97 eb ff ff       	call   c0002eed <ld_clust.isra.0>
c0004356:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004359:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000435d:	31 d2                	xor    edx,edx
c000435f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004363:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004367:	89 d8                	mov    eax,ebx
c0004369:	e8 d2 ec ff ff       	call   c0003040 <dir_sdi>
c000436e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004372:	83 ec 0c             	sub    esp,0xc
c0004375:	56                   	push   esi
c0004376:	e8 35 15 00 00       	call   c00058b0 <ff_memfree>
c000437b:	83 c4 10             	add    esp,0x10
c000437e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004382:	83 f8 04             	cmp    eax,0x4
c0004385:	74 06                	je     c000438d <f_opendir+0xba>
c0004387:	85 c0                	test   eax,eax
c0004389:	74 0d                	je     c0004398 <f_opendir+0xc5>
c000438b:	eb 05                	jmp    c0004392 <f_opendir+0xbf>
c000438d:	b8 05 00 00 00       	mov    eax,0x5
c0004392:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004398:	83 c4 24             	add    esp,0x24
c000439b:	5b                   	pop    ebx
c000439c:	5e                   	pop    esi
c000439d:	c3                   	ret    

c000439e <f_closedir>:
c000439e:	53                   	push   ebx
c000439f:	83 ec 18             	sub    esp,0x18
c00043a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00043a6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00043aa:	89 d8                	mov    eax,ebx
c00043ac:	e8 17 dc ff ff       	call   c0001fc8 <validate>
c00043b1:	85 c0                	test   eax,eax
c00043b3:	75 06                	jne    c00043bb <f_closedir+0x1d>
c00043b5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00043bb:	83 c4 18             	add    esp,0x18
c00043be:	5b                   	pop    ebx
c00043bf:	c3                   	ret    

c00043c0 <f_readdir>:
c00043c0:	57                   	push   edi
c00043c1:	56                   	push   esi
c00043c2:	53                   	push   ebx
c00043c3:	83 ec 20             	sub    esp,0x20
c00043c6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00043ca:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00043ce:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00043d2:	89 d8                	mov    eax,ebx
c00043d4:	e8 ef db ff ff       	call   c0001fc8 <validate>
c00043d9:	85 c0                	test   eax,eax
c00043db:	75 6e                	jne    c000444b <f_readdir+0x8b>
c00043dd:	85 ff                	test   edi,edi
c00043df:	75 0b                	jne    c00043ec <f_readdir+0x2c>
c00043e1:	31 d2                	xor    edx,edx
c00043e3:	89 d8                	mov    eax,ebx
c00043e5:	e8 56 ec ff ff       	call   c0003040 <dir_sdi>
c00043ea:	eb 5f                	jmp    c000444b <f_readdir+0x8b>
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	68 00 02 00 00       	push   0x200
c00043f4:	e8 9f 14 00 00       	call   c0005898 <ff_memalloc>
c00043f9:	83 c4 10             	add    esp,0x10
c00043fc:	89 c6                	mov    esi,eax
c00043fe:	b8 11 00 00 00       	mov    eax,0x11
c0004403:	85 f6                	test   esi,esi
c0004405:	74 44                	je     c000444b <f_readdir+0x8b>
c0004407:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000440b:	31 d2                	xor    edx,edx
c000440d:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004410:	89 d8                	mov    eax,ebx
c0004412:	e8 1a f0 ff ff       	call   c0003431 <dir_read>
c0004417:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000441c:	75 19                	jne    c0004437 <f_readdir+0x77>
c000441e:	89 fa                	mov    edx,edi
c0004420:	89 d8                	mov    eax,ebx
c0004422:	e8 e2 e8 ff ff       	call   c0002d09 <get_fileinfo>
c0004427:	31 d2                	xor    edx,edx
c0004429:	89 d8                	mov    eax,ebx
c000442b:	e8 9b ee ff ff       	call   c00032cb <dir_next>
c0004430:	83 f8 04             	cmp    eax,0x4
c0004433:	75 02                	jne    c0004437 <f_readdir+0x77>
c0004435:	31 c0                	xor    eax,eax
c0004437:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000443b:	83 ec 0c             	sub    esp,0xc
c000443e:	56                   	push   esi
c000443f:	e8 6c 14 00 00       	call   c00058b0 <ff_memfree>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000444b:	83 c4 20             	add    esp,0x20
c000444e:	5b                   	pop    ebx
c000444f:	5e                   	pop    esi
c0004450:	5f                   	pop    edi
c0004451:	c3                   	ret    

c0004452 <f_stat>:
c0004452:	57                   	push   edi
c0004453:	31 c9                	xor    ecx,ecx
c0004455:	56                   	push   esi
c0004456:	53                   	push   ebx
c0004457:	83 ec 30             	sub    esp,0x30
c000445a:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000445e:	89 e2                	mov    edx,esp
c0004460:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004464:	e8 5c dd ff ff       	call   c00021c5 <mount_volume>
c0004469:	89 c3                	mov    ebx,eax
c000446b:	85 c0                	test   eax,eax
c000446d:	75 59                	jne    c00044c8 <f_stat+0x76>
c000446f:	83 ec 0c             	sub    esp,0xc
c0004472:	bb 11 00 00 00       	mov    ebx,0x11
c0004477:	68 00 02 00 00       	push   0x200
c000447c:	e8 17 14 00 00       	call   c0005898 <ff_memalloc>
c0004481:	83 c4 10             	add    esp,0x10
c0004484:	89 c6                	mov    esi,eax
c0004486:	85 c0                	test   eax,eax
c0004488:	74 3e                	je     c00044c8 <f_stat+0x76>
c000448a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000448d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004491:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004494:	89 e0                	mov    eax,esp
c0004496:	e8 34 f2 ff ff       	call   c00036cf <follow_path>
c000449b:	89 c3                	mov    ebx,eax
c000449d:	85 c0                	test   eax,eax
c000449f:	75 1b                	jne    c00044bc <f_stat+0x6a>
c00044a1:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c00044a6:	78 0f                	js     c00044b7 <f_stat+0x65>
c00044a8:	85 ff                	test   edi,edi
c00044aa:	74 10                	je     c00044bc <f_stat+0x6a>
c00044ac:	89 fa                	mov    edx,edi
c00044ae:	89 e0                	mov    eax,esp
c00044b0:	e8 54 e8 ff ff       	call   c0002d09 <get_fileinfo>
c00044b5:	eb 05                	jmp    c00044bc <f_stat+0x6a>
c00044b7:	bb 06 00 00 00       	mov    ebx,0x6
c00044bc:	83 ec 0c             	sub    esp,0xc
c00044bf:	56                   	push   esi
c00044c0:	e8 eb 13 00 00       	call   c00058b0 <ff_memfree>
c00044c5:	83 c4 10             	add    esp,0x10
c00044c8:	83 c4 30             	add    esp,0x30
c00044cb:	89 d8                	mov    eax,ebx
c00044cd:	5b                   	pop    ebx
c00044ce:	5e                   	pop    esi
c00044cf:	5f                   	pop    edi
c00044d0:	c3                   	ret    

c00044d1 <f_getfree>:
c00044d1:	55                   	push   ebp
c00044d2:	31 c9                	xor    ecx,ecx
c00044d4:	57                   	push   edi
c00044d5:	56                   	push   esi
c00044d6:	53                   	push   ebx
c00044d7:	83 ec 2c             	sub    esp,0x2c
c00044da:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044de:	8d 44 24 40          	lea    eax,[esp+0x40]
c00044e2:	e8 de dc ff ff       	call   c00021c5 <mount_volume>
c00044e7:	89 c7                	mov    edi,eax
c00044e9:	85 c0                	test   eax,eax
c00044eb:	0f 85 d8 00 00 00    	jne    c00045c9 <f_getfree+0xf8>
c00044f1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00044f5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00044f9:	89 30                	mov    DWORD PTR [eax],esi
c00044fb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00044fe:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004501:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004504:	39 d0                	cmp    eax,edx
c0004506:	77 0b                	ja     c0004513 <f_getfree+0x42>
c0004508:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000450c:	89 01                	mov    DWORD PTR [ecx],eax
c000450e:	e9 b6 00 00 00       	jmp    c00045c9 <f_getfree+0xf8>
c0004513:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004516:	75 29                	jne    c0004541 <f_getfree+0x70>
c0004518:	bd 02 00 00 00       	mov    ebp,0x2
c000451d:	31 db                	xor    ebx,ebx
c000451f:	89 ea                	mov    edx,ebp
c0004521:	89 f0                	mov    eax,esi
c0004523:	e8 16 ea ff ff       	call   c0002f3e <get_fat.isra.2>
c0004528:	83 f8 ff             	cmp    eax,0xffffffff
c000452b:	74 7b                	je     c00045a8 <f_getfree+0xd7>
c000452d:	83 f8 01             	cmp    eax,0x1
c0004530:	74 7d                	je     c00045af <f_getfree+0xde>
c0004532:	83 d3 00             	adc    ebx,0x0
c0004535:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004539:	45                   	inc    ebp
c000453a:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c000453d:	77 e0                	ja     c000451f <f_getfree+0x4e>
c000453f:	eb 77                	jmp    c00045b8 <f_getfree+0xe7>
c0004541:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004544:	31 db                	xor    ebx,ebx
c0004546:	31 f6                	xor    esi,esi
c0004548:	85 f6                	test   esi,esi
c000454a:	75 18                	jne    c0004564 <f_getfree+0x93>
c000454c:	8d 42 01             	lea    eax,[edx+0x1]
c000454f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004553:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004557:	e8 16 db ff ff       	call   c0002072 <move_window>
c000455c:	85 c0                	test   eax,eax
c000455e:	75 56                	jne    c00045b6 <f_getfree+0xe5>
c0004560:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004564:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004568:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000456c:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004570:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004573:	75 11                	jne    c0004586 <f_getfree+0xb5>
c0004575:	e8 d2 d5 ff ff       	call   c0001b4c <ld_word>
c000457a:	66 83 f8 01          	cmp    ax,0x1
c000457e:	83 d3 00             	adc    ebx,0x0
c0004581:	83 c6 02             	add    esi,0x2
c0004584:	eb 13                	jmp    c0004599 <f_getfree+0xc8>
c0004586:	e8 ce d5 ff ff       	call   c0001b59 <ld_dword>
c000458b:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004590:	83 f8 01             	cmp    eax,0x1
c0004593:	83 d3 00             	adc    ebx,0x0
c0004596:	83 c6 04             	add    esi,0x4
c0004599:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000459f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00045a3:	4d                   	dec    ebp
c00045a4:	75 a2                	jne    c0004548 <f_getfree+0x77>
c00045a6:	eb 10                	jmp    c00045b8 <f_getfree+0xe7>
c00045a8:	bf 01 00 00 00       	mov    edi,0x1
c00045ad:	eb 09                	jmp    c00045b8 <f_getfree+0xe7>
c00045af:	bf 02 00 00 00       	mov    edi,0x2
c00045b4:	eb 02                	jmp    c00045b8 <f_getfree+0xe7>
c00045b6:	89 c7                	mov    edi,eax
c00045b8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00045bc:	89 18                	mov    DWORD PTR [eax],ebx
c00045be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045c2:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c00045c5:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00045c9:	83 c4 2c             	add    esp,0x2c
c00045cc:	89 f8                	mov    eax,edi
c00045ce:	5b                   	pop    ebx
c00045cf:	5e                   	pop    esi
c00045d0:	5f                   	pop    edi
c00045d1:	5d                   	pop    ebp
c00045d2:	c3                   	ret    

c00045d3 <f_truncate>:
c00045d3:	56                   	push   esi
c00045d4:	53                   	push   ebx
c00045d5:	83 ec 14             	sub    esp,0x14
c00045d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00045dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00045e0:	89 d8                	mov    eax,ebx
c00045e2:	e8 e1 d9 ff ff       	call   c0001fc8 <validate>
c00045e7:	89 c6                	mov    esi,eax
c00045e9:	85 c0                	test   eax,eax
c00045eb:	0f 85 be 00 00 00    	jne    c00046af <f_truncate+0xdc>
c00045f1:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00045f5:	85 f6                	test   esi,esi
c00045f7:	0f 85 b2 00 00 00    	jne    c00046af <f_truncate+0xdc>
c00045fd:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004601:	0f 84 a3 00 00 00    	je     c00046aa <f_truncate+0xd7>
c0004607:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000460a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000460d:	0f 83 9c 00 00 00    	jae    c00046af <f_truncate+0xdc>
c0004613:	85 c0                	test   eax,eax
c0004615:	75 15                	jne    c000462c <f_truncate+0x59>
c0004617:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000461a:	31 c9                	xor    ecx,ecx
c000461c:	89 d8                	mov    eax,ebx
c000461e:	e8 1f ec ff ff       	call   c0003242 <remove_chain>
c0004623:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000462a:	eb 35                	jmp    c0004661 <f_truncate+0x8e>
c000462c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000462f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004631:	e8 08 e9 ff ff       	call   c0002f3e <get_fat.isra.2>
c0004636:	89 c2                	mov    edx,eax
c0004638:	b8 01 00 00 00       	mov    eax,0x1
c000463d:	83 fa ff             	cmp    edx,0xffffffff
c0004640:	74 1f                	je     c0004661 <f_truncate+0x8e>
c0004642:	b8 02 00 00 00       	mov    eax,0x2
c0004647:	83 fa 01             	cmp    edx,0x1
c000464a:	74 15                	je     c0004661 <f_truncate+0x8e>
c000464c:	31 c0                	xor    eax,eax
c000464e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004652:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004655:	76 0a                	jbe    c0004661 <f_truncate+0x8e>
c0004657:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000465a:	89 d8                	mov    eax,ebx
c000465c:	e8 e1 eb ff ff       	call   c0003242 <remove_chain>
c0004661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004664:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004667:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000466a:	83 ca 40             	or     edx,0x40
c000466d:	85 c0                	test   eax,eax
c000466f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004672:	75 2f                	jne    c00046a3 <f_truncate+0xd0>
c0004674:	84 d2                	test   dl,dl
c0004676:	79 37                	jns    c00046af <f_truncate+0xdc>
c0004678:	6a 01                	push   0x1
c000467a:	8d 43 28             	lea    eax,[ebx+0x28]
c000467d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004680:	50                   	push   eax
c0004681:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004685:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004689:	50                   	push   eax
c000468a:	e8 88 d4 ff ff       	call   c0001b17 <disk_write>
c000468f:	83 c4 10             	add    esp,0x10
c0004692:	85 c0                	test   eax,eax
c0004694:	75 08                	jne    c000469e <f_truncate+0xcb>
c0004696:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000469a:	31 f6                	xor    esi,esi
c000469c:	eb 11                	jmp    c00046af <f_truncate+0xdc>
c000469e:	b8 01 00 00 00       	mov    eax,0x1
c00046a3:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00046a6:	89 c6                	mov    esi,eax
c00046a8:	eb 05                	jmp    c00046af <f_truncate+0xdc>
c00046aa:	be 07 00 00 00       	mov    esi,0x7
c00046af:	89 f0                	mov    eax,esi
c00046b1:	83 c4 14             	add    esp,0x14
c00046b4:	5b                   	pop    ebx
c00046b5:	5e                   	pop    esi
c00046b6:	c3                   	ret    

c00046b7 <f_unlink>:
c00046b7:	55                   	push   ebp
c00046b8:	b9 02 00 00 00       	mov    ecx,0x2
c00046bd:	57                   	push   edi
c00046be:	56                   	push   esi
c00046bf:	53                   	push   ebx
c00046c0:	81 ec 8c 00 00 00    	sub    esp,0x8c
c00046c6:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046ca:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00046d1:	e8 ef da ff ff       	call   c00021c5 <mount_volume>
c00046d6:	85 c0                	test   eax,eax
c00046d8:	0f 85 f0 00 00 00    	jne    c00047ce <f_unlink+0x117>
c00046de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046e2:	83 ec 0c             	sub    esp,0xc
c00046e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00046e9:	68 00 02 00 00       	push   0x200
c00046ee:	e8 a5 11 00 00       	call   c0005898 <ff_memalloc>
c00046f3:	83 c4 10             	add    esp,0x10
c00046f6:	89 c3                	mov    ebx,eax
c00046f8:	b8 11 00 00 00       	mov    eax,0x11
c00046fd:	85 db                	test   ebx,ebx
c00046ff:	0f 84 c9 00 00 00    	je     c00047ce <f_unlink+0x117>
c0004705:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004709:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004710:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004713:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004717:	e8 b3 ef ff ff       	call   c00036cf <follow_path>
c000471c:	85 c0                	test   eax,eax
c000471e:	0f 85 96 00 00 00    	jne    c00047ba <f_unlink+0x103>
c0004724:	b8 06 00 00 00       	mov    eax,0x6
c0004729:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000472e:	0f 88 86 00 00 00    	js     c00047ba <f_unlink+0x103>
c0004734:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004739:	f7 c5 01 00 00 00    	test   ebp,0x1
c000473f:	74 07                	je     c0004748 <f_unlink+0x91>
c0004741:	b8 07 00 00 00       	mov    eax,0x7
c0004746:	eb 72                	jmp    c00047ba <f_unlink+0x103>
c0004748:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000474c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004750:	8a 07                	mov    al,BYTE PTR [edi]
c0004752:	e8 96 e7 ff ff       	call   c0002eed <ld_clust.isra.0>
c0004757:	83 e5 10             	and    ebp,0x10
c000475a:	89 c6                	mov    esi,eax
c000475c:	75 0f                	jne    c000476d <f_unlink+0xb6>
c000475e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004762:	e8 e7 ed ff ff       	call   c000354e <dir_remove>
c0004767:	85 c0                	test   eax,eax
c0004769:	74 2f                	je     c000479a <f_unlink+0xe3>
c000476b:	eb 4d                	jmp    c00047ba <f_unlink+0x103>
c000476d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004771:	31 d2                	xor    edx,edx
c0004773:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004777:	8d 44 24 50          	lea    eax,[esp+0x50]
c000477b:	e8 c0 e8 ff ff       	call   c0003040 <dir_sdi>
c0004780:	85 c0                	test   eax,eax
c0004782:	75 36                	jne    c00047ba <f_unlink+0x103>
c0004784:	31 d2                	xor    edx,edx
c0004786:	8d 44 24 50          	lea    eax,[esp+0x50]
c000478a:	e8 a2 ec ff ff       	call   c0003431 <dir_read>
c000478f:	85 c0                	test   eax,eax
c0004791:	74 ae                	je     c0004741 <f_unlink+0x8a>
c0004793:	83 f8 04             	cmp    eax,0x4
c0004796:	75 22                	jne    c00047ba <f_unlink+0x103>
c0004798:	eb c4                	jmp    c000475e <f_unlink+0xa7>
c000479a:	85 f6                	test   esi,esi
c000479c:	75 0b                	jne    c00047a9 <f_unlink+0xf2>
c000479e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00047a2:	e8 0b e3 ff ff       	call   c0002ab2 <sync_fs>
c00047a7:	eb 11                	jmp    c00047ba <f_unlink+0x103>
c00047a9:	31 c9                	xor    ecx,ecx
c00047ab:	89 f2                	mov    edx,esi
c00047ad:	8d 44 24 20          	lea    eax,[esp+0x20]
c00047b1:	e8 8c ea ff ff       	call   c0003242 <remove_chain>
c00047b6:	85 c0                	test   eax,eax
c00047b8:	74 e4                	je     c000479e <f_unlink+0xe7>
c00047ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00047be:	83 ec 0c             	sub    esp,0xc
c00047c1:	53                   	push   ebx
c00047c2:	e8 e9 10 00 00       	call   c00058b0 <ff_memfree>
c00047c7:	83 c4 10             	add    esp,0x10
c00047ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047ce:	81 c4 8c 00 00 00    	add    esp,0x8c
c00047d4:	5b                   	pop    ebx
c00047d5:	5e                   	pop    esi
c00047d6:	5f                   	pop    edi
c00047d7:	5d                   	pop    ebp
c00047d8:	c3                   	ret    

c00047d9 <f_mkdir>:
c00047d9:	57                   	push   edi
c00047da:	b9 02 00 00 00       	mov    ecx,0x2
c00047df:	56                   	push   esi
c00047e0:	53                   	push   ebx
c00047e1:	83 ec 50             	sub    esp,0x50
c00047e4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047e8:	8d 44 24 60          	lea    eax,[esp+0x60]
c00047ec:	e8 d4 d9 ff ff       	call   c00021c5 <mount_volume>
c00047f1:	89 c3                	mov    ebx,eax
c00047f3:	85 c0                	test   eax,eax
c00047f5:	0f 85 70 01 00 00    	jne    c000496b <f_mkdir+0x192>
c00047fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047ff:	bb 11 00 00 00       	mov    ebx,0x11
c0004804:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004808:	83 ec 0c             	sub    esp,0xc
c000480b:	68 00 02 00 00       	push   0x200
c0004810:	e8 83 10 00 00       	call   c0005898 <ff_memalloc>
c0004815:	83 c4 10             	add    esp,0x10
c0004818:	89 c7                	mov    edi,eax
c000481a:	85 c0                	test   eax,eax
c000481c:	0f 84 49 01 00 00    	je     c000496b <f_mkdir+0x192>
c0004822:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004826:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000482a:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000482d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004831:	e8 99 ee ff ff       	call   c00036cf <follow_path>
c0004836:	89 c3                	mov    ebx,eax
c0004838:	85 c0                	test   eax,eax
c000483a:	74 3e                	je     c000487a <f_mkdir+0xa1>
c000483c:	83 f8 04             	cmp    eax,0x4
c000483f:	75 3e                	jne    c000487f <f_mkdir+0xa6>
c0004841:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004845:	31 d2                	xor    edx,edx
c0004847:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000484b:	8d 44 24 10          	lea    eax,[esp+0x10]
c000484f:	e8 b4 e8 ff ff       	call   c0003108 <create_chain>
c0004854:	89 c6                	mov    esi,eax
c0004856:	85 c0                	test   eax,eax
c0004858:	74 0c                	je     c0004866 <f_mkdir+0x8d>
c000485a:	bb 02 00 00 00       	mov    ebx,0x2
c000485f:	83 f8 01             	cmp    eax,0x1
c0004862:	74 07                	je     c000486b <f_mkdir+0x92>
c0004864:	eb 2a                	jmp    c0004890 <f_mkdir+0xb7>
c0004866:	bb 07 00 00 00       	mov    ebx,0x7
c000486b:	31 c9                	xor    ecx,ecx
c000486d:	89 f2                	mov    edx,esi
c000486f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004873:	e8 ca e9 ff ff       	call   c0003242 <remove_chain>
c0004878:	eb 05                	jmp    c000487f <f_mkdir+0xa6>
c000487a:	bb 08 00 00 00       	mov    ebx,0x8
c000487f:	83 ec 0c             	sub    esp,0xc
c0004882:	57                   	push   edi
c0004883:	e8 28 10 00 00       	call   c00058b0 <ff_memfree>
c0004888:	83 c4 10             	add    esp,0x10
c000488b:	e9 db 00 00 00       	jmp    c000496b <f_mkdir+0x192>
c0004890:	bb 01 00 00 00       	mov    ebx,0x1
c0004895:	83 f8 ff             	cmp    eax,0xffffffff
c0004898:	74 d1                	je     c000486b <f_mkdir+0x92>
c000489a:	89 f2                	mov    edx,esi
c000489c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048a0:	e8 73 dd ff ff       	call   c0002618 <dir_clear>
c00048a5:	89 c3                	mov    ebx,eax
c00048a7:	85 c0                	test   eax,eax
c00048a9:	75 c0                	jne    c000486b <f_mkdir+0x92>
c00048ab:	b9 0b 00 00 00       	mov    ecx,0xb
c00048b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048b4:	ba 20 00 00 00       	mov    edx,0x20
c00048b9:	83 c0 34             	add    eax,0x34
c00048bc:	e8 cc d2 ff ff       	call   c0001b8d <mem_set>
c00048c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00048ca:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c00048ce:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c00048d2:	83 c0 4a             	add    eax,0x4a
c00048d5:	e8 9b d2 ff ff       	call   c0001b75 <st_dword>
c00048da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048de:	89 f1                	mov    ecx,esi
c00048e0:	8d 50 34             	lea    edx,[eax+0x34]
c00048e3:	e8 2e e6 ff ff       	call   c0002f16 <st_clust.isra.1>
c00048e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048ec:	b9 20 00 00 00       	mov    ecx,0x20
c00048f1:	8d 50 34             	lea    edx,[eax+0x34]
c00048f4:	83 c0 54             	add    eax,0x54
c00048f7:	e8 7c d2 ff ff       	call   c0001b78 <mem_cpy>
c00048fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004900:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004904:	8d 50 54             	lea    edx,[eax+0x54]
c0004907:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c000490b:	e8 06 e6 ff ff       	call   c0002f16 <st_clust.isra.1>
c0004910:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004914:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004918:	8d 44 24 20          	lea    eax,[esp+0x20]
c000491c:	e8 42 ee ff ff       	call   c0003763 <dir_register>
c0004921:	89 c3                	mov    ebx,eax
c0004923:	85 c0                	test   eax,eax
c0004925:	0f 85 40 ff ff ff    	jne    c000486b <f_mkdir+0x92>
c000492b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000492f:	ba 00 00 21 50       	mov    edx,0x50210000
c0004934:	83 c0 16             	add    eax,0x16
c0004937:	e8 39 d2 ff ff       	call   c0001b75 <st_dword>
c000493c:	89 f1                	mov    ecx,esi
c000493e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004942:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004946:	e8 cb e5 ff ff       	call   c0002f16 <st_clust.isra.1>
c000494b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000494f:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004953:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004957:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000495b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000495f:	e8 4e e1 ff ff       	call   c0002ab2 <sync_fs>
c0004964:	89 c3                	mov    ebx,eax
c0004966:	e9 14 ff ff ff       	jmp    c000487f <f_mkdir+0xa6>
c000496b:	83 c4 50             	add    esp,0x50
c000496e:	89 d8                	mov    eax,ebx
c0004970:	5b                   	pop    ebx
c0004971:	5e                   	pop    esi
c0004972:	5f                   	pop    edi
c0004973:	c3                   	ret    

c0004974 <f_rename>:
c0004974:	57                   	push   edi
c0004975:	56                   	push   esi
c0004976:	53                   	push   ebx
c0004977:	81 ec a0 00 00 00    	sub    esp,0xa0
c000497d:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004984:	e8 f2 d5 ff ff       	call   c0001f7b <get_ldnumber>
c0004989:	b9 02 00 00 00       	mov    ecx,0x2
c000498e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004992:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004999:	e8 27 d8 ff ff       	call   c00021c5 <mount_volume>
c000499e:	85 c0                	test   eax,eax
c00049a0:	0f 85 7a 01 00 00    	jne    c0004b20 <f_rename+0x1ac>
c00049a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049aa:	83 ec 0c             	sub    esp,0xc
c00049ad:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00049b1:	68 00 02 00 00       	push   0x200
c00049b6:	e8 dd 0e 00 00       	call   c0005898 <ff_memalloc>
c00049bb:	83 c4 10             	add    esp,0x10
c00049be:	89 c6                	mov    esi,eax
c00049c0:	b8 11 00 00 00       	mov    eax,0x11
c00049c5:	85 f6                	test   esi,esi
c00049c7:	0f 84 53 01 00 00    	je     c0004b20 <f_rename+0x1ac>
c00049cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049d1:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c00049d8:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049db:	8d 44 24 40          	lea    eax,[esp+0x40]
c00049df:	e8 eb ec ff ff       	call   c00036cf <follow_path>
c00049e4:	85 c0                	test   eax,eax
c00049e6:	0f 85 20 01 00 00    	jne    c0004b0c <f_rename+0x198>
c00049ec:	b8 06 00 00 00       	mov    eax,0x6
c00049f1:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c00049f6:	0f 85 10 01 00 00    	jne    c0004b0c <f_rename+0x198>
c00049fc:	b9 20 00 00 00       	mov    ecx,0x20
c0004a01:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a05:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a09:	e8 6a d1 ff ff       	call   c0001b78 <mem_cpy>
c0004a0e:	b9 30 00 00 00       	mov    ecx,0x30
c0004a13:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004a17:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004a1b:	e8 58 d1 ff ff       	call   c0001b78 <mem_cpy>
c0004a20:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004a27:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004a2b:	e8 9f ec ff ff       	call   c00036cf <follow_path>
c0004a30:	85 c0                	test   eax,eax
c0004a32:	75 20                	jne    c0004a54 <f_rename+0xe0>
c0004a34:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004a38:	b8 08 00 00 00       	mov    eax,0x8
c0004a3d:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004a41:	0f 85 c5 00 00 00    	jne    c0004b0c <f_rename+0x198>
c0004a47:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004a4b:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004a52:	eb 03                	jmp    c0004a57 <f_rename+0xe3>
c0004a54:	83 f8 04             	cmp    eax,0x4
c0004a57:	0f 85 af 00 00 00    	jne    c0004b0c <f_rename+0x198>
c0004a5d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004a61:	e8 fd ec ff ff       	call   c0003763 <dir_register>
c0004a66:	85 c0                	test   eax,eax
c0004a68:	0f 85 9e 00 00 00    	jne    c0004b0c <f_rename+0x198>
c0004a6e:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004a75:	b9 13 00 00 00       	mov    ecx,0x13
c0004a7a:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004a7d:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004a81:	e8 f2 d0 ff ff       	call   c0001b78 <mem_cpy>
c0004a86:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004a8a:	a8 10                	test   al,0x10
c0004a8c:	75 03                	jne    c0004a91 <f_rename+0x11d>
c0004a8e:	83 c8 20             	or     eax,0x20
c0004a91:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004a94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a98:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004a9c:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004aa0:	74 54                	je     c0004af6 <f_rename+0x182>
c0004aa2:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004aa6:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004aaa:	74 4a                	je     c0004af6 <f_rename+0x182>
c0004aac:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab0:	89 da                	mov    edx,ebx
c0004ab2:	8a 07                	mov    al,BYTE PTR [edi]
c0004ab4:	e8 34 e4 ff ff       	call   c0002eed <ld_clust.isra.0>
c0004ab9:	89 c2                	mov    edx,eax
c0004abb:	89 f8                	mov    eax,edi
c0004abd:	e8 d0 d2 ff ff       	call   c0001d92 <clst2sect>
c0004ac2:	89 c2                	mov    edx,eax
c0004ac4:	b8 02 00 00 00       	mov    eax,0x2
c0004ac9:	85 d2                	test   edx,edx
c0004acb:	74 3f                	je     c0004b0c <f_rename+0x198>
c0004acd:	89 f8                	mov    eax,edi
c0004acf:	e8 9e d5 ff ff       	call   c0002072 <move_window>
c0004ad4:	85 c0                	test   eax,eax
c0004ad6:	75 34                	jne    c0004b0c <f_rename+0x198>
c0004ad8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004adc:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004ae0:	75 14                	jne    c0004af6 <f_rename+0x182>
c0004ae2:	8d 50 54             	lea    edx,[eax+0x54]
c0004ae5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004ae9:	e8 28 e4 ff ff       	call   c0002f16 <st_clust.isra.1>
c0004aee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004af2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004af6:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004afa:	e8 4f ea ff ff       	call   c000354e <dir_remove>
c0004aff:	85 c0                	test   eax,eax
c0004b01:	75 09                	jne    c0004b0c <f_rename+0x198>
c0004b03:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b07:	e8 a6 df ff ff       	call   c0002ab2 <sync_fs>
c0004b0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b10:	83 ec 0c             	sub    esp,0xc
c0004b13:	56                   	push   esi
c0004b14:	e8 97 0d 00 00       	call   c00058b0 <ff_memfree>
c0004b19:	83 c4 10             	add    esp,0x10
c0004b1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b20:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004b26:	5b                   	pop    ebx
c0004b27:	5e                   	pop    esi
c0004b28:	5f                   	pop    edi
c0004b29:	c3                   	ret    

c0004b2a <f_chmod>:
c0004b2a:	57                   	push   edi
c0004b2b:	b9 02 00 00 00       	mov    ecx,0x2
c0004b30:	56                   	push   esi
c0004b31:	53                   	push   ebx
c0004b32:	83 ec 50             	sub    esp,0x50
c0004b35:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004b39:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004b3d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b41:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b45:	e8 7b d6 ff ff       	call   c00021c5 <mount_volume>
c0004b4a:	85 c0                	test   eax,eax
c0004b4c:	75 7e                	jne    c0004bcc <f_chmod+0xa2>
c0004b4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b52:	83 ec 0c             	sub    esp,0xc
c0004b55:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b59:	68 00 02 00 00       	push   0x200
c0004b5e:	e8 35 0d 00 00       	call   c0005898 <ff_memalloc>
c0004b63:	83 c4 10             	add    esp,0x10
c0004b66:	89 c6                	mov    esi,eax
c0004b68:	b8 11 00 00 00       	mov    eax,0x11
c0004b6d:	85 f6                	test   esi,esi
c0004b6f:	74 5b                	je     c0004bcc <f_chmod+0xa2>
c0004b71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b75:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b79:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004b7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b80:	e8 4a eb ff ff       	call   c00036cf <follow_path>
c0004b85:	85 c0                	test   eax,eax
c0004b87:	75 2f                	jne    c0004bb8 <f_chmod+0x8e>
c0004b89:	b8 06 00 00 00       	mov    eax,0x6
c0004b8e:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004b93:	75 23                	jne    c0004bb8 <f_chmod+0x8e>
c0004b95:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b99:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004b9c:	21 fb                	and    ebx,edi
c0004b9e:	83 e3 27             	and    ebx,0x27
c0004ba1:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004ba4:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ba7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bab:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004baf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bb3:	e8 fa de ff ff       	call   c0002ab2 <sync_fs>
c0004bb8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bbc:	83 ec 0c             	sub    esp,0xc
c0004bbf:	56                   	push   esi
c0004bc0:	e8 eb 0c 00 00       	call   c00058b0 <ff_memfree>
c0004bc5:	83 c4 10             	add    esp,0x10
c0004bc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bcc:	83 c4 50             	add    esp,0x50
c0004bcf:	5b                   	pop    ebx
c0004bd0:	5e                   	pop    esi
c0004bd1:	5f                   	pop    edi
c0004bd2:	c3                   	ret    

c0004bd3 <f_utime>:
c0004bd3:	56                   	push   esi
c0004bd4:	b9 02 00 00 00       	mov    ecx,0x2
c0004bd9:	53                   	push   ebx
c0004bda:	83 ec 54             	sub    esp,0x54
c0004bdd:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004be1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004be5:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004be9:	e8 d7 d5 ff ff       	call   c00021c5 <mount_volume>
c0004bee:	85 c0                	test   eax,eax
c0004bf0:	0f 85 85 00 00 00    	jne    c0004c7b <f_utime+0xa8>
c0004bf6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bfa:	83 ec 0c             	sub    esp,0xc
c0004bfd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c01:	68 00 02 00 00       	push   0x200
c0004c06:	e8 8d 0c 00 00       	call   c0005898 <ff_memalloc>
c0004c0b:	83 c4 10             	add    esp,0x10
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	b8 11 00 00 00       	mov    eax,0x11
c0004c15:	85 db                	test   ebx,ebx
c0004c17:	74 62                	je     c0004c7b <f_utime+0xa8>
c0004c19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c1d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004c21:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c24:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c28:	e8 a2 ea ff ff       	call   c00036cf <follow_path>
c0004c2d:	85 c0                	test   eax,eax
c0004c2f:	75 36                	jne    c0004c67 <f_utime+0x94>
c0004c31:	b8 06 00 00 00       	mov    eax,0x6
c0004c36:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004c3b:	75 2a                	jne    c0004c67 <f_utime+0x94>
c0004c3d:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004c41:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004c45:	c1 e2 10             	shl    edx,0x10
c0004c48:	09 c2                	or     edx,eax
c0004c4a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c4e:	83 c0 16             	add    eax,0x16
c0004c51:	e8 1f cf ff ff       	call   c0001b75 <st_dword>
c0004c56:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c5a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c62:	e8 4b de ff ff       	call   c0002ab2 <sync_fs>
c0004c67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c6b:	83 ec 0c             	sub    esp,0xc
c0004c6e:	53                   	push   ebx
c0004c6f:	e8 3c 0c 00 00       	call   c00058b0 <ff_memfree>
c0004c74:	83 c4 10             	add    esp,0x10
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	83 c4 54             	add    esp,0x54
c0004c7e:	5b                   	pop    ebx
c0004c7f:	5e                   	pop    esi
c0004c80:	c3                   	ret    

c0004c81 <f_getlabel>:
c0004c81:	55                   	push   ebp
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	57                   	push   edi
c0004c85:	56                   	push   esi
c0004c86:	53                   	push   ebx
c0004c87:	83 ec 5c             	sub    esp,0x5c
c0004c8a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004c8e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c92:	e8 2e d5 ff ff       	call   c00021c5 <mount_volume>
c0004c97:	89 c6                	mov    esi,eax
c0004c99:	85 c0                	test   eax,eax
c0004c9b:	0f 85 27 01 00 00    	jne    c0004dc8 <f_getlabel+0x147>
c0004ca1:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ca6:	0f 84 d1 00 00 00    	je     c0004d7d <f_getlabel+0xfc>
c0004cac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cb0:	31 d2                	xor    edx,edx
c0004cb2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004cb6:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004cbe:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cc2:	e8 79 e3 ff ff       	call   c0003040 <dir_sdi>
c0004cc7:	85 c0                	test   eax,eax
c0004cc9:	0f 85 a2 00 00 00    	jne    c0004d71 <f_getlabel+0xf0>
c0004ccf:	ba 01 00 00 00       	mov    edx,0x1
c0004cd4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cd8:	e8 54 e7 ff ff       	call   c0003431 <dir_read>
c0004cdd:	85 c0                	test   eax,eax
c0004cdf:	0f 85 8c 00 00 00    	jne    c0004d71 <f_getlabel+0xf0>
c0004ce5:	31 db                	xor    ebx,ebx
c0004ce7:	31 c9                	xor    ecx,ecx
c0004ce9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ced:	8d 79 01             	lea    edi,[ecx+0x1]
c0004cf0:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004cf5:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004cfa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cfe:	e8 ca ce ff ff       	call   c0001bcd <dbc_1st>
c0004d03:	85 c0                	test   eax,eax
c0004d05:	74 16                	je     c0004d1d <f_getlabel+0x9c>
c0004d07:	83 ff 0b             	cmp    edi,0xb
c0004d0a:	74 11                	je     c0004d1d <f_getlabel+0x9c>
c0004d0c:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004d11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d15:	8d 79 02             	lea    edi,[ecx+0x2]
c0004d18:	c1 e0 08             	shl    eax,0x8
c0004d1b:	09 c2                	or     edx,eax
c0004d1d:	0f b7 d2             	movzx  edx,dx
c0004d20:	50                   	push   eax
c0004d21:	50                   	push   eax
c0004d22:	68 b5 01 00 00       	push   0x1b5
c0004d27:	52                   	push   edx
c0004d28:	e8 3b 0c 00 00       	call   c0005968 <ff_oem2uni>
c0004d2d:	83 c4 10             	add    esp,0x10
c0004d30:	66 85 c0             	test   ax,ax
c0004d33:	74 25                	je     c0004d5a <f_getlabel+0xd9>
c0004d35:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004d39:	0f b7 c0             	movzx  eax,ax
c0004d3c:	01 da                	add    edx,ebx
c0004d3e:	b9 04 00 00 00       	mov    ecx,0x4
c0004d43:	e8 51 cf ff ff       	call   c0001c99 <put_utf>
c0004d48:	84 c0                	test   al,al
c0004d4a:	74 0e                	je     c0004d5a <f_getlabel+0xd9>
c0004d4c:	0f b6 c0             	movzx  eax,al
c0004d4f:	01 c3                	add    ebx,eax
c0004d51:	83 ff 0b             	cmp    edi,0xb
c0004d54:	74 06                	je     c0004d5c <f_getlabel+0xdb>
c0004d56:	89 f9                	mov    ecx,edi
c0004d58:	eb 8f                	jmp    c0004ce9 <f_getlabel+0x68>
c0004d5a:	31 db                	xor    ebx,ebx
c0004d5c:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004d60:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004d63:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004d67:	74 14                	je     c0004d7d <f_getlabel+0xfc>
c0004d69:	4b                   	dec    ebx
c0004d6a:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004d6d:	74 f1                	je     c0004d60 <f_getlabel+0xdf>
c0004d6f:	eb 0c                	jmp    c0004d7d <f_getlabel+0xfc>
c0004d71:	83 f8 04             	cmp    eax,0x4
c0004d74:	75 50                	jne    c0004dc6 <f_getlabel+0x145>
c0004d76:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004d7a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d7d:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004d82:	74 44                	je     c0004dc8 <f_getlabel+0x147>
c0004d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d88:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004d8b:	e8 e2 d2 ff ff       	call   c0002072 <move_window>
c0004d90:	89 c6                	mov    esi,eax
c0004d92:	85 c0                	test   eax,eax
c0004d94:	75 32                	jne    c0004dc8 <f_getlabel+0x147>
c0004d96:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004d9a:	b8 43 00 00 00       	mov    eax,0x43
c0004d9f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004da1:	80 f9 03             	cmp    cl,0x3
c0004da4:	74 0f                	je     c0004db5 <f_getlabel+0x134>
c0004da6:	31 c0                	xor    eax,eax
c0004da8:	80 f9 04             	cmp    cl,0x4
c0004dab:	0f 94 c0             	sete   al
c0004dae:	48                   	dec    eax
c0004daf:	83 e0 c3             	and    eax,0xffffffc3
c0004db2:	83 c0 64             	add    eax,0x64
c0004db5:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004db9:	e8 9b cd ff ff       	call   c0001b59 <ld_dword>
c0004dbe:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004dc2:	89 07                	mov    DWORD PTR [edi],eax
c0004dc4:	eb 02                	jmp    c0004dc8 <f_getlabel+0x147>
c0004dc6:	89 c6                	mov    esi,eax
c0004dc8:	83 c4 5c             	add    esp,0x5c
c0004dcb:	89 f0                	mov    eax,esi
c0004dcd:	5b                   	pop    ebx
c0004dce:	5e                   	pop    esi
c0004dcf:	5f                   	pop    edi
c0004dd0:	5d                   	pop    ebp
c0004dd1:	c3                   	ret    

c0004dd2 <f_setlabel>:
c0004dd2:	56                   	push   esi
c0004dd3:	b9 02 00 00 00       	mov    ecx,0x2
c0004dd8:	53                   	push   ebx
c0004dd9:	83 ec 54             	sub    esp,0x54
c0004ddc:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004de0:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004de4:	e8 dc d3 ff ff       	call   c00021c5 <mount_volume>
c0004de9:	89 c6                	mov    esi,eax
c0004deb:	85 c0                	test   eax,eax
c0004ded:	0f 85 67 01 00 00    	jne    c0004f5a <f_setlabel+0x188>
c0004df3:	b9 0b 00 00 00       	mov    ecx,0xb
c0004df8:	ba 20 00 00 00       	mov    edx,0x20
c0004dfd:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004e01:	31 db                	xor    ebx,ebx
c0004e03:	e8 85 cd ff ff       	call   c0001b8d <mem_set>
c0004e08:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004e0c:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e0f:	76 5b                	jbe    c0004e6c <f_setlabel+0x9a>
c0004e11:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e15:	e8 b9 cd ff ff       	call   c0001bd3 <tchar2uni>
c0004e1a:	3d ff ff 00 00       	cmp    eax,0xffff
c0004e1f:	76 0a                	jbe    c0004e2b <f_setlabel+0x59>
c0004e21:	be 06 00 00 00       	mov    esi,0x6
c0004e26:	e9 2f 01 00 00       	jmp    c0004f5a <f_setlabel+0x188>
c0004e2b:	83 ec 0c             	sub    esp,0xc
c0004e2e:	50                   	push   eax
c0004e2f:	e8 ac 0b 00 00       	call   c00059e0 <ff_wtoupper>
c0004e34:	5a                   	pop    edx
c0004e35:	59                   	pop    ecx
c0004e36:	68 b5 01 00 00       	push   0x1b5
c0004e3b:	50                   	push   eax
c0004e3c:	e8 87 0a 00 00       	call   c00058c8 <ff_uni2oem>
c0004e41:	83 c4 10             	add    esp,0x10
c0004e44:	89 c6                	mov    esi,eax
c0004e46:	66 85 c0             	test   ax,ax
c0004e49:	74 d6                	je     c0004e21 <f_setlabel+0x4f>
c0004e4b:	0f b7 d0             	movzx  edx,ax
c0004e4e:	b8 50 c3 01 c0       	mov    eax,0xc001c350
c0004e53:	e8 63 cd ff ff       	call   c0001bbb <chk_chr>
c0004e58:	85 c0                	test   eax,eax
c0004e5a:	75 c5                	jne    c0004e21 <f_setlabel+0x4f>
c0004e5c:	66 81 fe ff 00       	cmp    si,0xff
c0004e61:	0f 87 c9 00 00 00    	ja     c0004f30 <f_setlabel+0x15e>
c0004e67:	e9 e4 00 00 00       	jmp    c0004f50 <f_setlabel+0x17e>
c0004e6c:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0004e71:	74 ae                	je     c0004e21 <f_setlabel+0x4f>
c0004e73:	85 db                	test   ebx,ebx
c0004e75:	74 0e                	je     c0004e85 <f_setlabel+0xb3>
c0004e77:	8d 43 ff             	lea    eax,[ebx-0x1]
c0004e7a:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0004e7f:	75 04                	jne    c0004e85 <f_setlabel+0xb3>
c0004e81:	89 c3                	mov    ebx,eax
c0004e83:	eb ee                	jmp    c0004e73 <f_setlabel+0xa1>
c0004e85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004e89:	31 d2                	xor    edx,edx
c0004e8b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e8f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e97:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e9b:	e8 a0 e1 ff ff       	call   c0003040 <dir_sdi>
c0004ea0:	89 c6                	mov    esi,eax
c0004ea2:	85 c0                	test   eax,eax
c0004ea4:	0f 85 b0 00 00 00    	jne    c0004f5a <f_setlabel+0x188>
c0004eaa:	ba 01 00 00 00       	mov    edx,0x1
c0004eaf:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eb3:	e8 79 e5 ff ff       	call   c0003431 <dir_read>
c0004eb8:	85 c0                	test   eax,eax
c0004eba:	75 18                	jne    c0004ed4 <f_setlabel+0x102>
c0004ebc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ec0:	85 db                	test   ebx,ebx
c0004ec2:	74 0b                	je     c0004ecf <f_setlabel+0xfd>
c0004ec4:	b9 0b 00 00 00       	mov    ecx,0xb
c0004ec9:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0004ecd:	eb 47                	jmp    c0004f16 <f_setlabel+0x144>
c0004ecf:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0004ed2:	eb 47                	jmp    c0004f1b <f_setlabel+0x149>
c0004ed4:	83 f8 04             	cmp    eax,0x4
c0004ed7:	75 53                	jne    c0004f2c <f_setlabel+0x15a>
c0004ed9:	85 db                	test   ebx,ebx
c0004edb:	74 7d                	je     c0004f5a <f_setlabel+0x188>
c0004edd:	ba 01 00 00 00       	mov    edx,0x1
c0004ee2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ee6:	e8 e5 e4 ff ff       	call   c00033d0 <dir_alloc>
c0004eeb:	89 c6                	mov    esi,eax
c0004eed:	85 c0                	test   eax,eax
c0004eef:	75 69                	jne    c0004f5a <f_setlabel+0x188>
c0004ef1:	b9 20 00 00 00       	mov    ecx,0x20
c0004ef6:	31 d2                	xor    edx,edx
c0004ef8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004efc:	e8 8c cc ff ff       	call   c0001b8d <mem_set>
c0004f01:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f05:	b9 0b 00 00 00       	mov    ecx,0xb
c0004f0a:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0004f0e:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0004f12:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f16:	e8 5d cc ff ff       	call   c0001b78 <mem_cpy>
c0004f1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004f1f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004f27:	e8 86 db ff ff       	call   c0002ab2 <sync_fs>
c0004f2c:	89 c6                	mov    esi,eax
c0004f2e:	eb 2a                	jmp    c0004f5a <f_setlabel+0x188>
c0004f30:	83 fb 09             	cmp    ebx,0x9
c0004f33:	0f 87 e8 fe ff ff    	ja     c0004e21 <f_setlabel+0x4f>
c0004f39:	89 f0                	mov    eax,esi
c0004f3b:	66 c1 e8 08          	shr    ax,0x8
c0004f3f:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0004f43:	43                   	inc    ebx
c0004f44:	89 f0                	mov    eax,esi
c0004f46:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0004f4a:	43                   	inc    ebx
c0004f4b:	e9 b8 fe ff ff       	jmp    c0004e08 <f_setlabel+0x36>
c0004f50:	83 fb 0a             	cmp    ebx,0xa
c0004f53:	76 ef                	jbe    c0004f44 <f_setlabel+0x172>
c0004f55:	e9 c7 fe ff ff       	jmp    c0004e21 <f_setlabel+0x4f>
c0004f5a:	89 f0                	mov    eax,esi
c0004f5c:	83 c4 54             	add    esp,0x54
c0004f5f:	5b                   	pop    ebx
c0004f60:	5e                   	pop    esi
c0004f61:	c3                   	ret    

c0004f62 <f_expand>:
c0004f62:	55                   	push   ebp
c0004f63:	57                   	push   edi
c0004f64:	56                   	push   esi
c0004f65:	53                   	push   ebx
c0004f66:	83 ec 2c             	sub    esp,0x2c
c0004f69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004f6d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004f71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f75:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f79:	89 d8                	mov    eax,ebx
c0004f7b:	e8 48 d0 ff ff       	call   c0001fc8 <validate>
c0004f80:	89 c6                	mov    esi,eax
c0004f82:	85 c0                	test   eax,eax
c0004f84:	0f 85 2e 01 00 00    	jne    c00050b8 <f_expand+0x156>
c0004f8a:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004f8e:	85 f6                	test   esi,esi
c0004f90:	0f 85 22 01 00 00    	jne    c00050b8 <f_expand+0x156>
c0004f96:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0004f9b:	75 0a                	jne    c0004fa7 <f_expand+0x45>
c0004f9d:	be 07 00 00 00       	mov    esi,0x7
c0004fa2:	e9 11 01 00 00       	jmp    c00050b8 <f_expand+0x156>
c0004fa7:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0004fab:	75 f0                	jne    c0004f9d <f_expand+0x3b>
c0004fad:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004fb1:	74 ea                	je     c0004f9d <f_expand+0x3b>
c0004fb3:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004fb7:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0004fbb:	c1 e1 09             	shl    ecx,0x9
c0004fbe:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004fc1:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0004fc5:	0f 95 c0             	setne  al
c0004fc8:	31 d2                	xor    edx,edx
c0004fca:	0f b6 c0             	movzx  eax,al
c0004fcd:	89 c7                	mov    edi,eax
c0004fcf:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004fd3:	f7 f1                	div    ecx
c0004fd5:	01 f8                	add    eax,edi
c0004fd7:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0004fda:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004fde:	83 ff 01             	cmp    edi,0x1
c0004fe1:	76 05                	jbe    c0004fe8 <f_expand+0x86>
c0004fe3:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0004fe6:	77 05                	ja     c0004fed <f_expand+0x8b>
c0004fe8:	bf 02 00 00 00       	mov    edi,0x2
c0004fed:	89 3c 24             	mov    DWORD PTR [esp],edi
c0004ff0:	89 fd                	mov    ebp,edi
c0004ff2:	31 c9                	xor    ecx,ecx
c0004ff4:	89 ea                	mov    edx,ebp
c0004ff6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004ffa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004ffc:	45                   	inc    ebp
c0004ffd:	e8 3c df ff ff       	call   c0002f3e <get_fat.isra.2>
c0005002:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005006:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000500a:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000500d:	77 05                	ja     c0005014 <f_expand+0xb2>
c000500f:	bd 02 00 00 00       	mov    ebp,0x2
c0005014:	83 f8 01             	cmp    eax,0x1
c0005017:	74 20                	je     c0005039 <f_expand+0xd7>
c0005019:	83 f8 ff             	cmp    eax,0xffffffff
c000501c:	74 22                	je     c0005040 <f_expand+0xde>
c000501e:	85 c0                	test   eax,eax
c0005020:	75 09                	jne    c000502b <f_expand+0xc9>
c0005022:	41                   	inc    ecx
c0005023:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005027:	75 07                	jne    c0005030 <f_expand+0xce>
c0005029:	eb 1c                	jmp    c0005047 <f_expand+0xe5>
c000502b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000502e:	31 c9                	xor    ecx,ecx
c0005030:	39 fd                	cmp    ebp,edi
c0005032:	75 c0                	jne    c0004ff4 <f_expand+0x92>
c0005034:	e9 64 ff ff ff       	jmp    c0004f9d <f_expand+0x3b>
c0005039:	be 02 00 00 00       	mov    esi,0x2
c000503e:	eb 78                	jmp    c00050b8 <f_expand+0x156>
c0005040:	be 01 00 00 00       	mov    esi,0x1
c0005045:	eb 71                	jmp    c00050b8 <f_expand+0x156>
c0005047:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000504c:	74 2b                	je     c0005079 <f_expand+0x117>
c000504e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005051:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005055:	85 ed                	test   ebp,ebp
c0005057:	74 24                	je     c000507d <f_expand+0x11b>
c0005059:	83 c9 ff             	or     ecx,0xffffffff
c000505c:	83 fd 01             	cmp    ebp,0x1
c000505f:	74 03                	je     c0005064 <f_expand+0x102>
c0005061:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005064:	89 fa                	mov    edx,edi
c0005066:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000506a:	e8 59 d4 ff ff       	call   c00024c8 <put_fat>
c000506f:	85 c0                	test   eax,eax
c0005071:	75 43                	jne    c00050b6 <f_expand+0x154>
c0005073:	89 f8                	mov    eax,edi
c0005075:	4d                   	dec    ebp
c0005076:	47                   	inc    edi
c0005077:	eb dc                	jmp    c0005055 <f_expand+0xf3>
c0005079:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000507c:	48                   	dec    eax
c000507d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005081:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005086:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005089:	74 2d                	je     c00050b8 <f_expand+0x156>
c000508b:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000508f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005092:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005095:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005099:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000509c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000509f:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00050a2:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00050a5:	39 c8                	cmp    eax,ecx
c00050a7:	77 0f                	ja     c00050b8 <f_expand+0x156>
c00050a9:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00050ad:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c00050b1:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050b4:	eb 02                	jmp    c00050b8 <f_expand+0x156>
c00050b6:	89 c6                	mov    esi,eax
c00050b8:	83 c4 2c             	add    esp,0x2c
c00050bb:	89 f0                	mov    eax,esi
c00050bd:	5b                   	pop    ebx
c00050be:	5e                   	pop    esi
c00050bf:	5f                   	pop    edi
c00050c0:	5d                   	pop    ebp
c00050c1:	c3                   	ret    

c00050c2 <f_mkfs>:
c00050c2:	55                   	push   ebp
c00050c3:	57                   	push   edi
c00050c4:	bf 0b 00 00 00       	mov    edi,0xb
c00050c9:	56                   	push   esi
c00050ca:	53                   	push   ebx
c00050cb:	83 ec 4c             	sub    esp,0x4c
c00050ce:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00050d2:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00050d6:	8d 44 24 60          	lea    eax,[esp+0x60]
c00050da:	e8 9c ce ff ff       	call   c0001f7b <get_ldnumber>
c00050df:	85 c0                	test   eax,eax
c00050e1:	0f 88 a6 07 00 00    	js     c000588d <f_mkfs+0x7cb>
c00050e7:	8b 14 85 a0 f1 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0e60]
c00050ee:	85 d2                	test   edx,edx
c00050f0:	74 03                	je     c00050f5 <f_mkfs+0x33>
c00050f2:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00050f5:	85 db                	test   ebx,ebx
c00050f7:	75 05                	jne    c00050fe <f_mkfs+0x3c>
c00050f9:	bb 40 c3 01 c0       	mov    ebx,0xc001c340
c00050fe:	83 ec 0c             	sub    esp,0xc
c0005101:	0f b6 c0             	movzx  eax,al
c0005104:	bf 03 00 00 00       	mov    edi,0x3
c0005109:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000510d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005111:	e8 e8 c9 ff ff       	call   c0001afe <disk_initialize>
c0005116:	83 c4 10             	add    esp,0x10
c0005119:	a8 01                	test   al,0x1
c000511b:	0f 85 6c 07 00 00    	jne    c000588d <f_mkfs+0x7cb>
c0005121:	bf 0a 00 00 00       	mov    edi,0xa
c0005126:	a8 04                	test   al,0x4
c0005128:	0f 85 5f 07 00 00    	jne    c000588d <f_mkfs+0x7cb>
c000512e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005131:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005135:	85 c0                	test   eax,eax
c0005137:	75 20                	jne    c0005159 <f_mkfs+0x97>
c0005139:	51                   	push   ecx
c000513a:	8d 44 24 34          	lea    eax,[esp+0x34]
c000513e:	50                   	push   eax
c000513f:	6a 03                	push   0x3
c0005141:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005145:	e8 e3 c9 ff ff       	call   c0001b2d <disk_ioctl>
c000514a:	83 c4 10             	add    esp,0x10
c000514d:	85 c0                	test   eax,eax
c000514f:	74 08                	je     c0005159 <f_mkfs+0x97>
c0005151:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005159:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000515d:	8d 42 ff             	lea    eax,[edx-0x1]
c0005160:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005165:	77 04                	ja     c000516b <f_mkfs+0xa9>
c0005167:	85 c2                	test   edx,eax
c0005169:	74 08                	je     c0005173 <f_mkfs+0xb1>
c000516b:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005173:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005176:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000517a:	48                   	dec    eax
c000517b:	3c 01                	cmp    al,0x1
c000517d:	76 05                	jbe    c0005184 <f_mkfs+0xc2>
c000517f:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005184:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005187:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000518b:	48                   	dec    eax
c000518c:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005191:	77 07                	ja     c000519a <f_mkfs+0xd8>
c0005193:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c0005198:	74 08                	je     c00051a2 <f_mkfs+0xe0>
c000519a:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c00051a2:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00051a5:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00051ab:	77 07                	ja     c00051b4 <f_mkfs+0xf2>
c00051ad:	8d 47 ff             	lea    eax,[edi-0x1]
c00051b0:	85 f8                	test   eax,edi
c00051b2:	74 02                	je     c00051b6 <f_mkfs+0xf4>
c00051b4:	31 ff                	xor    edi,edi
c00051b6:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c00051be:	77 0a                	ja     c00051ca <f_mkfs+0x108>
c00051c0:	bf 11 00 00 00       	mov    edi,0x11
c00051c5:	e9 c3 06 00 00       	jmp    c000588d <f_mkfs+0x7cb>
c00051ca:	8a 1b                	mov    bl,BYTE PTR [ebx]
c00051cc:	89 ee                	mov    esi,ebp
c00051ce:	85 ed                	test   ebp,ebp
c00051d0:	75 1b                	jne    c00051ed <f_mkfs+0x12b>
c00051d2:	83 ec 0c             	sub    esp,0xc
c00051d5:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00051d9:	25 00 fe ff ff       	and    eax,0xfffffe00
c00051de:	50                   	push   eax
c00051df:	e8 b4 06 00 00       	call   c0005898 <ff_memalloc>
c00051e4:	83 c4 10             	add    esp,0x10
c00051e7:	89 c6                	mov    esi,eax
c00051e9:	85 c0                	test   eax,eax
c00051eb:	74 d3                	je     c00051c0 <f_mkfs+0xfe>
c00051ed:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00051f5:	52                   	push   edx
c00051f6:	8d 44 24 38          	lea    eax,[esp+0x38]
c00051fa:	50                   	push   eax
c00051fb:	6a 01                	push   0x1
c00051fd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005201:	e8 27 c9 ff ff       	call   c0001b2d <disk_ioctl>
c0005206:	83 c4 10             	add    esp,0x10
c0005209:	85 c0                	test   eax,eax
c000520b:	0f 85 25 06 00 00    	jne    c0005836 <f_mkfs+0x774>
c0005211:	88 d8                	mov    al,bl
c0005213:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000521b:	24 08                	and    al,0x8
c000521d:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0005221:	75 18                	jne    c000523b <f_mkfs+0x179>
c0005223:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005227:	83 f8 3f             	cmp    eax,0x3f
c000522a:	76 0f                	jbe    c000523b <f_mkfs+0x179>
c000522c:	83 e8 3f             	sub    eax,0x3f
c000522f:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c0005237:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000523b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000523f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005243:	83 f8 7f             	cmp    eax,0x7f
c0005246:	0f 86 52 02 00 00    	jbe    c000549e <f_mkfs+0x3dc>
c000524c:	b9 80 00 00 00       	mov    ecx,0x80
c0005251:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c0005257:	77 05                	ja     c000525e <f_mkfs+0x19c>
c0005259:	89 f9                	mov    ecx,edi
c000525b:	c1 e9 09             	shr    ecx,0x9
c000525e:	88 d8                	mov    al,bl
c0005260:	83 e0 01             	and    eax,0x1
c0005263:	80 e3 02             	and    bl,0x2
c0005266:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000526a:	74 0a                	je     c0005276 <f_mkfs+0x1b4>
c000526c:	84 c0                	test   al,al
c000526e:	0f 84 4c 01 00 00    	je     c00053c0 <f_mkfs+0x2fe>
c0005274:	eb 38                	jmp    c00052ae <f_mkfs+0x1ec>
c0005276:	bf 13 00 00 00       	mov    edi,0x13
c000527b:	84 c0                	test   al,al
c000527d:	75 2f                	jne    c00052ae <f_mkfs+0x1ec>
c000527f:	e9 c9 05 00 00       	jmp    c000584d <f_mkfs+0x78b>
c0005284:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c0005289:	0f 85 08 02 00 00    	jne    c0005497 <f_mkfs+0x3d5>
c000528f:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005294:	0f 86 e1 01 00 00    	jbe    c000547b <f_mkfs+0x3b9>
c000529a:	85 c9                	test   ecx,ecx
c000529c:	0f 85 bd 05 00 00    	jne    c000585f <f_mkfs+0x79d>
c00052a2:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00052a5:	83 f9 40             	cmp    ecx,0x40
c00052a8:	0f 87 c1 05 00 00    	ja     c000586f <f_mkfs+0x7ad>
c00052ae:	89 cf                	mov    edi,ecx
c00052b0:	85 c9                	test   ecx,ecx
c00052b2:	75 1d                	jne    c00052d1 <f_mkfs+0x20f>
c00052b4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00052b8:	ba 20 c3 01 c0       	mov    edx,0xc001c320
c00052bd:	c1 eb 0c             	shr    ebx,0xc
c00052c0:	bf 01 00 00 00       	mov    edi,0x1
c00052c5:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00052c8:	66 85 c0             	test   ax,ax
c00052cb:	0f 85 5f 01 00 00    	jne    c0005430 <f_mkfs+0x36e>
c00052d1:	31 d2                	xor    edx,edx
c00052d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00052d7:	f7 f7                	div    edi
c00052d9:	3d f5 0f 00 00       	cmp    eax,0xff5
c00052de:	0f 86 5e 01 00 00    	jbe    c0005442 <f_mkfs+0x380>
c00052e4:	83 c0 02             	add    eax,0x2
c00052e7:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00052ec:	01 c0                	add    eax,eax
c00052ee:	05 ff 01 00 00       	add    eax,0x1ff
c00052f3:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00052fb:	c1 e8 09             	shr    eax,0x9
c00052fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005302:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005306:	c1 e0 05             	shl    eax,0x5
c0005309:	c1 e8 09             	shr    eax,0x9
c000530c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0005310:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0005315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005319:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000531d:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c0005321:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005329:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c000532e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005332:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005336:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000533a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000533e:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005342:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005346:	f7 d8                	neg    eax
c0005348:	21 c3                	and    ebx,eax
c000534a:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c000534e:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005353:	0f 85 fc 00 00 00    	jne    c0005455 <f_mkfs+0x393>
c0005359:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c000535d:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005361:	89 f8                	mov    eax,edi
c0005363:	c1 e0 04             	shl    eax,0x4
c0005366:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000536a:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c000536e:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005372:	0f 82 26 01 00 00    	jb     c000549e <f_mkfs+0x3dc>
c0005378:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000537c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005380:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005384:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c0005389:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c000538d:	29 d0                	sub    eax,edx
c000538f:	31 d2                	xor    edx,edx
c0005391:	f7 f7                	div    edi
c0005393:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005398:	89 c3                	mov    ebx,eax
c000539a:	0f 85 e4 fe ff ff    	jne    c0005284 <f_mkfs+0x1c2>
c00053a0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00053a5:	0f 87 02 01 00 00    	ja     c00054ad <f_mkfs+0x3eb>
c00053ab:	85 c9                	test   ecx,ecx
c00053ad:	0f 85 eb 00 00 00    	jne    c000549e <f_mkfs+0x3dc>
c00053b3:	83 ff 01             	cmp    edi,0x1
c00053b6:	0f 86 e2 00 00 00    	jbe    c000549e <f_mkfs+0x3dc>
c00053bc:	89 f9                	mov    ecx,edi
c00053be:	d1 e9                	shr    ecx,1
c00053c0:	89 cb                	mov    ebx,ecx
c00053c2:	85 c9                	test   ecx,ecx
c00053c4:	75 26                	jne    c00053ec <f_mkfs+0x32a>
c00053c6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00053ca:	ba 30 c3 01 c0       	mov    edx,0xc001c330
c00053cf:	c1 eb 11             	shr    ebx,0x11
c00053d2:	b9 01 00 00 00       	mov    ecx,0x1
c00053d7:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00053da:	66 85 c0             	test   ax,ax
c00053dd:	74 0b                	je     c00053ea <f_mkfs+0x328>
c00053df:	83 c2 02             	add    edx,0x2
c00053e2:	39 d8                	cmp    eax,ebx
c00053e4:	77 04                	ja     c00053ea <f_mkfs+0x328>
c00053e6:	01 c9                	add    ecx,ecx
c00053e8:	eb ed                	jmp    c00053d7 <f_mkfs+0x315>
c00053ea:	31 db                	xor    ebx,ebx
c00053ec:	31 d2                	xor    edx,edx
c00053ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00053f2:	f7 f1                	div    ecx
c00053f4:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00053fb:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005400:	c1 ea 09             	shr    edx,0x9
c0005403:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005408:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000540c:	0f 87 8c 00 00 00    	ja     c000549e <f_mkfs+0x3dc>
c0005412:	89 cf                	mov    edi,ecx
c0005414:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000541c:	89 d9                	mov    ecx,ebx
c000541e:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c0005426:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c000542b:	e9 e0 fe ff ff       	jmp    c0005310 <f_mkfs+0x24e>
c0005430:	83 c2 02             	add    edx,0x2
c0005433:	39 d8                	cmp    eax,ebx
c0005435:	0f 87 96 fe ff ff    	ja     c00052d1 <f_mkfs+0x20f>
c000543b:	01 ff                	add    edi,edi
c000543d:	e9 83 fe ff ff       	jmp    c00052c5 <f_mkfs+0x203>
c0005442:	8d 04 40             	lea    eax,[eax+eax*2]
c0005445:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000544a:	40                   	inc    eax
c000544b:	d1 e8                	shr    eax,1
c000544d:	83 c0 03             	add    eax,0x3
c0005450:	e9 99 fe ff ff       	jmp    c00052ee <f_mkfs+0x22c>
c0005455:	31 d2                	xor    edx,edx
c0005457:	89 d8                	mov    eax,ebx
c0005459:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c000545d:	85 d2                	test   edx,edx
c000545f:	74 09                	je     c000546a <f_mkfs+0x3a8>
c0005461:	4b                   	dec    ebx
c0005462:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005466:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000546a:	89 d8                	mov    eax,ebx
c000546c:	31 d2                	xor    edx,edx
c000546e:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005472:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005476:	e9 e6 fe ff ff       	jmp    c0005361 <f_mkfs+0x29f>
c000547b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005480:	77 2b                	ja     c00054ad <f_mkfs+0x3eb>
c0005482:	85 c9                	test   ecx,ecx
c0005484:	75 18                	jne    c000549e <f_mkfs+0x3dc>
c0005486:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005489:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000548f:	0f 86 19 fe ff ff    	jbe    c00052ae <f_mkfs+0x1ec>
c0005495:	eb 07                	jmp    c000549e <f_mkfs+0x3dc>
c0005497:	3d f5 0f 00 00       	cmp    eax,0xff5
c000549c:	76 0a                	jbe    c00054a8 <f_mkfs+0x3e6>
c000549e:	bf 0e 00 00 00       	mov    edi,0xe
c00054a3:	e9 a5 03 00 00       	jmp    c000584d <f_mkfs+0x78b>
c00054a8:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054ad:	31 d2                	xor    edx,edx
c00054af:	b9 00 02 00 00       	mov    ecx,0x200
c00054b4:	89 f0                	mov    eax,esi
c00054b6:	e8 d2 c6 ff ff       	call   c0001b8d <mem_set>
c00054bb:	b9 0b 00 00 00       	mov    ecx,0xb
c00054c0:	ba d2 c2 01 c0       	mov    edx,0xc001c2d2
c00054c5:	89 f0                	mov    eax,esi
c00054c7:	e8 ac c6 ff ff       	call   c0001b78 <mem_cpy>
c00054cc:	8d 46 0b             	lea    eax,[esi+0xb]
c00054cf:	ba 00 02 00 00       	mov    edx,0x200
c00054d4:	e8 98 c6 ff ff       	call   c0001b71 <st_word>
c00054d9:	89 f8                	mov    eax,edi
c00054db:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00054e0:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00054e3:	8d 46 0e             	lea    eax,[esi+0xe]
c00054e6:	e8 86 c6 ff ff       	call   c0001b71 <st_word>
c00054eb:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00054ef:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00054f4:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00054f7:	75 08                	jne    c0005501 <f_mkfs+0x43f>
c00054f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005501:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005505:	8d 46 11             	lea    eax,[esi+0x11]
c0005508:	e8 64 c6 ff ff       	call   c0001b71 <st_word>
c000550d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005511:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005517:	77 0a                	ja     c0005523 <f_mkfs+0x461>
c0005519:	8d 46 13             	lea    eax,[esi+0x13]
c000551c:	e8 50 c6 ff ff       	call   c0001b71 <st_word>
c0005521:	eb 08                	jmp    c000552b <f_mkfs+0x469>
c0005523:	8d 46 20             	lea    eax,[esi+0x20]
c0005526:	e8 4a c6 ff ff       	call   c0001b75 <st_dword>
c000552b:	8d 46 18             	lea    eax,[esi+0x18]
c000552e:	ba 3f 00 00 00       	mov    edx,0x3f
c0005533:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c0005537:	e8 35 c6 ff ff       	call   c0001b71 <st_word>
c000553c:	8d 46 1a             	lea    eax,[esi+0x1a]
c000553f:	ba ff 00 00 00       	mov    edx,0xff
c0005544:	e8 28 c6 ff ff       	call   c0001b71 <st_word>
c0005549:	8d 46 1c             	lea    eax,[esi+0x1c]
c000554c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005550:	e8 20 c6 ff ff       	call   c0001b75 <st_dword>
c0005555:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000555a:	75 57                	jne    c00055b3 <f_mkfs+0x4f1>
c000555c:	8d 46 43             	lea    eax,[esi+0x43]
c000555f:	ba 00 00 21 50       	mov    edx,0x50210000
c0005564:	e8 0c c6 ff ff       	call   c0001b75 <st_dword>
c0005569:	8d 46 24             	lea    eax,[esi+0x24]
c000556c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005570:	e8 00 c6 ff ff       	call   c0001b75 <st_dword>
c0005575:	8d 46 2c             	lea    eax,[esi+0x2c]
c0005578:	ba 02 00 00 00       	mov    edx,0x2
c000557d:	e8 f3 c5 ff ff       	call   c0001b75 <st_dword>
c0005582:	8d 46 30             	lea    eax,[esi+0x30]
c0005585:	ba 01 00 00 00       	mov    edx,0x1
c000558a:	e8 e2 c5 ff ff       	call   c0001b71 <st_word>
c000558f:	8d 46 32             	lea    eax,[esi+0x32]
c0005592:	ba 06 00 00 00       	mov    edx,0x6
c0005597:	e8 d5 c5 ff ff       	call   c0001b71 <st_word>
c000559c:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c00055a0:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c00055a4:	8d 46 47             	lea    eax,[esi+0x47]
c00055a7:	b9 13 00 00 00       	mov    ecx,0x13
c00055ac:	ba de c2 01 c0       	mov    edx,0xc001c2de
c00055b1:	eb 2f                	jmp    c00055e2 <f_mkfs+0x520>
c00055b3:	8d 46 27             	lea    eax,[esi+0x27]
c00055b6:	ba 00 00 21 50       	mov    edx,0x50210000
c00055bb:	e8 b5 c5 ff ff       	call   c0001b75 <st_dword>
c00055c0:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c00055c5:	8d 46 16             	lea    eax,[esi+0x16]
c00055c8:	e8 a4 c5 ff ff       	call   c0001b71 <st_word>
c00055cd:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00055d1:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00055d5:	8d 46 2b             	lea    eax,[esi+0x2b]
c00055d8:	b9 13 00 00 00       	mov    ecx,0x13
c00055dd:	ba f2 c2 01 c0       	mov    edx,0xc001c2f2
c00055e2:	e8 91 c5 ff ff       	call   c0001b78 <mem_cpy>
c00055e7:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00055ed:	ba 55 aa 00 00       	mov    edx,0xaa55
c00055f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055f6:	e8 76 c5 ff ff       	call   c0001b71 <st_word>
c00055fb:	6a 01                	push   0x1
c00055fd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005601:	56                   	push   esi
c0005602:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005606:	e8 0c c5 ff ff       	call   c0001b17 <disk_write>
c000560b:	83 c4 10             	add    esp,0x10
c000560e:	85 c0                	test   eax,eax
c0005610:	0f 85 20 02 00 00    	jne    c0005836 <f_mkfs+0x774>
c0005616:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000561b:	0f 85 98 00 00 00    	jne    c00056b9 <f_mkfs+0x5f7>
c0005621:	6a 01                	push   0x1
c0005623:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005627:	83 c0 06             	add    eax,0x6
c000562a:	50                   	push   eax
c000562b:	56                   	push   esi
c000562c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005630:	e8 e2 c4 ff ff       	call   c0001b17 <disk_write>
c0005635:	b9 00 02 00 00       	mov    ecx,0x200
c000563a:	31 d2                	xor    edx,edx
c000563c:	89 f0                	mov    eax,esi
c000563e:	e8 4a c5 ff ff       	call   c0001b8d <mem_set>
c0005643:	ba 52 52 61 41       	mov    edx,0x41615252
c0005648:	89 f0                	mov    eax,esi
c000564a:	e8 26 c5 ff ff       	call   c0001b75 <st_dword>
c000564f:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005655:	ba 72 72 41 61       	mov    edx,0x61417272
c000565a:	e8 16 c5 ff ff       	call   c0001b75 <st_dword>
c000565f:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005662:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c0005668:	e8 08 c5 ff ff       	call   c0001b75 <st_dword>
c000566d:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005673:	ba 02 00 00 00       	mov    edx,0x2
c0005678:	e8 f8 c4 ff ff       	call   c0001b75 <st_dword>
c000567d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005682:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c0005688:	e8 e4 c4 ff ff       	call   c0001b71 <st_word>
c000568d:	6a 01                	push   0x1
c000568f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005693:	83 c0 07             	add    eax,0x7
c0005696:	50                   	push   eax
c0005697:	56                   	push   esi
c0005698:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000569c:	e8 76 c4 ff ff       	call   c0001b17 <disk_write>
c00056a1:	83 c4 20             	add    esp,0x20
c00056a4:	6a 01                	push   0x1
c00056a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00056aa:	40                   	inc    eax
c00056ab:	50                   	push   eax
c00056ac:	56                   	push   esi
c00056ad:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00056b1:	e8 61 c4 ff ff       	call   c0001b17 <disk_write>
c00056b6:	83 c4 10             	add    esp,0x10
c00056b9:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00056bd:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c00056c1:	c1 e8 09             	shr    eax,0x9
c00056c4:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00056ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056ce:	31 d2                	xor    edx,edx
c00056d0:	31 db                	xor    ebx,ebx
c00056d2:	89 f0                	mov    eax,esi
c00056d4:	e8 b4 c4 ff ff       	call   c0001b8d <mem_set>
c00056d9:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00056de:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00056e6:	0f 94 c3             	sete   bl
c00056e9:	4b                   	dec    ebx
c00056ea:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00056f0:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00056f6:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056fb:	75 21                	jne    c000571e <f_mkfs+0x65c>
c00056fd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005702:	89 f0                	mov    eax,esi
c0005704:	e8 6c c4 ff ff       	call   c0001b75 <st_dword>
c0005709:	8d 46 04             	lea    eax,[esi+0x4]
c000570c:	83 ca ff             	or     edx,0xffffffff
c000570f:	e8 61 c4 ff ff       	call   c0001b75 <st_dword>
c0005714:	8d 46 08             	lea    eax,[esi+0x8]
c0005717:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000571c:	eb 04                	jmp    c0005722 <f_mkfs+0x660>
c000571e:	89 da                	mov    edx,ebx
c0005720:	89 f0                	mov    eax,esi
c0005722:	e8 4e c4 ff ff       	call   c0001b75 <st_dword>
c0005727:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000572b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000572f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005733:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005737:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573b:	76 08                	jbe    c0005745 <f_mkfs+0x683>
c000573d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005741:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005745:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000574d:	56                   	push   esi
c000574e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005752:	e8 c0 c3 ff ff       	call   c0001b17 <disk_write>
c0005757:	83 c4 10             	add    esp,0x10
c000575a:	85 c0                	test   eax,eax
c000575c:	0f 85 d4 00 00 00    	jne    c0005836 <f_mkfs+0x774>
c0005762:	b9 00 02 00 00       	mov    ecx,0x200
c0005767:	31 d2                	xor    edx,edx
c0005769:	89 f0                	mov    eax,esi
c000576b:	e8 1d c4 ff ff       	call   c0001b8d <mem_set>
c0005770:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005774:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c0005778:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000577c:	75 b1                	jne    c000572f <f_mkfs+0x66d>
c000577e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005782:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000578a:	40                   	inc    eax
c000578b:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000578f:	0f 87 61 ff ff ff    	ja     c00056f6 <f_mkfs+0x634>
c0005795:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000579a:	74 04                	je     c00057a0 <f_mkfs+0x6de>
c000579c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00057a0:	89 fb                	mov    ebx,edi
c00057a2:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c00057a6:	76 04                	jbe    c00057ac <f_mkfs+0x6ea>
c00057a8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00057ac:	53                   	push   ebx
c00057ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00057b1:	56                   	push   esi
c00057b2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057b6:	e8 5c c3 ff ff       	call   c0001b17 <disk_write>
c00057bb:	83 c4 10             	add    esp,0x10
c00057be:	85 c0                	test   eax,eax
c00057c0:	75 74                	jne    c0005836 <f_mkfs+0x774>
c00057c2:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c00057c6:	29 df                	sub    edi,ebx
c00057c8:	75 d6                	jne    c00057a0 <f_mkfs+0x6de>
c00057ca:	b1 0c                	mov    cl,0xc
c00057cc:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057d1:	74 18                	je     c00057eb <f_mkfs+0x729>
c00057d3:	b1 06                	mov    cl,0x6
c00057d5:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00057dd:	77 0c                	ja     c00057eb <f_mkfs+0x729>
c00057df:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00057e4:	0f 94 c1             	sete   cl
c00057e7:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00057eb:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00057f0:	75 2d                	jne    c000581f <f_mkfs+0x75d>
c00057f2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00057f6:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00057fe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0005802:	0f b6 c9             	movzx  ecx,cl
c0005805:	83 ec 0c             	sub    esp,0xc
c0005808:	56                   	push   esi
c0005809:	8d 54 24 48          	lea    edx,[esp+0x48]
c000580d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005811:	e8 4c d3 ff ff       	call   c0002b62 <create_partition>
c0005816:	83 c4 10             	add    esp,0x10
c0005819:	89 c7                	mov    edi,eax
c000581b:	85 c0                	test   eax,eax
c000581d:	75 2e                	jne    c000584d <f_mkfs+0x78b>
c000581f:	31 ff                	xor    edi,edi
c0005821:	50                   	push   eax
c0005822:	6a 00                	push   0x0
c0005824:	6a 00                	push   0x0
c0005826:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000582a:	e8 fe c2 ff ff       	call   c0001b2d <disk_ioctl>
c000582f:	83 c4 10             	add    esp,0x10
c0005832:	85 c0                	test   eax,eax
c0005834:	74 17                	je     c000584d <f_mkfs+0x78b>
c0005836:	85 ed                	test   ebp,ebp
c0005838:	75 0c                	jne    c0005846 <f_mkfs+0x784>
c000583a:	83 ec 0c             	sub    esp,0xc
c000583d:	56                   	push   esi
c000583e:	e8 6d 00 00 00       	call   c00058b0 <ff_memfree>
c0005843:	83 c4 10             	add    esp,0x10
c0005846:	bf 01 00 00 00       	mov    edi,0x1
c000584b:	eb 40                	jmp    c000588d <f_mkfs+0x7cb>
c000584d:	85 ed                	test   ebp,ebp
c000584f:	75 3c                	jne    c000588d <f_mkfs+0x7cb>
c0005851:	83 ec 0c             	sub    esp,0xc
c0005854:	56                   	push   esi
c0005855:	e8 56 00 00 00       	call   c00058b0 <ff_memfree>
c000585a:	83 c4 10             	add    esp,0x10
c000585d:	eb 2e                	jmp    c000588d <f_mkfs+0x7cb>
c000585f:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005864:	0f 85 56 fb ff ff    	jne    c00053c0 <f_mkfs+0x2fe>
c000586a:	e9 2f fc ff ff       	jmp    c000549e <f_mkfs+0x3dc>
c000586f:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005874:	0f 85 4c fb ff ff    	jne    c00053c6 <f_mkfs+0x304>
c000587a:	89 cf                	mov    edi,ecx
c000587c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005882:	0f 86 49 fa ff ff    	jbe    c00052d1 <f_mkfs+0x20f>
c0005888:	e9 11 fc ff ff       	jmp    c000549e <f_mkfs+0x3dc>
c000588d:	83 c4 4c             	add    esp,0x4c
c0005890:	89 f8                	mov    eax,edi
c0005892:	5b                   	pop    ebx
c0005893:	5e                   	pop    esi
c0005894:	5f                   	pop    edi
c0005895:	5d                   	pop    ebp
c0005896:	c3                   	ret    
c0005897:	90                   	nop

c0005898 <ff_memalloc>:
c0005898:	83 ec 0c             	sub    esp,0xc
c000589b:	83 ec 0c             	sub    esp,0xc
c000589e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00058a2:	e8 76 12 00 00       	call   c0006b1d <malloc>
c00058a7:	83 c4 10             	add    esp,0x10
c00058aa:	83 c4 0c             	add    esp,0xc
c00058ad:	c3                   	ret    
c00058ae:	66 90                	xchg   ax,ax

c00058b0 <ff_memfree>:
c00058b0:	83 ec 0c             	sub    esp,0xc
c00058b3:	83 ec 0c             	sub    esp,0xc
c00058b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00058ba:	e8 6e 12 00 00       	call   c0006b2d <free>
c00058bf:	83 c4 10             	add    esp,0x10
c00058c2:	90                   	nop
c00058c3:	83 c4 0c             	add    esp,0xc
c00058c6:	c3                   	ret    
c00058c7:	90                   	nop

c00058c8 <ff_uni2oem>:
c00058c8:	83 ec 14             	sub    esp,0x14
c00058cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00058cf:	66 89 04 24          	mov    WORD PTR [esp],ax
c00058d3:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00058da:	c7 44 24 0c 20 c7 01 c0 	mov    DWORD PTR [esp+0xc],0xc001c720
c00058e2:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00058e7:	77 0b                	ja     c00058f4 <ff_uni2oem+0x2c>
c00058e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00058ed:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00058f2:	eb 68                	jmp    c000595c <ff_uni2oem+0x94>
c00058f4:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00058fc:	77 5e                	ja     c000595c <ff_uni2oem+0x94>
c00058fe:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005904:	75 56                	jne    c000595c <ff_uni2oem+0x94>
c0005906:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000590d:	eb 0d                	jmp    c000591c <ff_uni2oem+0x54>
c000590f:	90                   	nop
c0005910:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005915:	40                   	inc    eax
c0005916:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000591b:	90                   	nop
c000591c:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005922:	77 24                	ja     c0005948 <ff_uni2oem+0x80>
c0005924:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005929:	25 ff ff 00 00       	and    eax,0xffff
c000592e:	01 c0                	add    eax,eax
c0005930:	89 c2                	mov    edx,eax
c0005932:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005936:	01 d0                	add    eax,edx
c0005938:	66 8b 00             	mov    ax,WORD PTR [eax]
c000593b:	25 ff ff 00 00       	and    eax,0xffff
c0005940:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005944:	75 ca                	jne    c0005910 <ff_uni2oem+0x48>
c0005946:	66 90                	xchg   ax,ax
c0005948:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000594d:	83 e8 80             	sub    eax,0xffffff80
c0005950:	25 ff 00 00 00       	and    eax,0xff
c0005955:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000595a:	66 90                	xchg   ax,ax
c000595c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005961:	83 c4 14             	add    esp,0x14
c0005964:	c3                   	ret    
c0005965:	8d 76 00             	lea    esi,[esi+0x0]

c0005968 <ff_oem2uni>:
c0005968:	83 ec 18             	sub    esp,0x18
c000596b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000596f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005973:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005978:	66 89 04 24          	mov    WORD PTR [esp],ax
c000597c:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005983:	c7 44 24 10 20 c7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001c720
c000598b:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005991:	77 0d                	ja     c00059a0 <ff_oem2uni+0x38>
c0005993:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005997:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000599c:	eb 36                	jmp    c00059d4 <ff_oem2uni+0x6c>
c000599e:	66 90                	xchg   ax,ax
c00059a0:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00059a6:	75 2c                	jne    c00059d4 <ff_oem2uni+0x6c>
c00059a8:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00059af:	77 23                	ja     c00059d4 <ff_oem2uni+0x6c>
c00059b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00059b5:	25 ff ff 00 00       	and    eax,0xffff
c00059ba:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00059bf:	01 c0                	add    eax,eax
c00059c1:	89 c2                	mov    edx,eax
c00059c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c7:	01 d0                	add    eax,edx
c00059c9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00059cc:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00059d1:	8d 76 00             	lea    esi,[esi+0x0]
c00059d4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00059d9:	83 c4 18             	add    esp,0x18
c00059dc:	c3                   	ret    
c00059dd:	8d 76 00             	lea    esi,[esi+0x0]

c00059e0 <ff_wtoupper>:
c00059e0:	83 ec 10             	sub    esp,0x10
c00059e3:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00059eb:	0f 87 77 01 00 00    	ja     c0005b68 <ff_wtoupper+0x188>
c00059f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059f5:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00059fa:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005a01:	77 09                	ja     c0005a0c <ff_wtoupper+0x2c>
c0005a03:	b8 20 c5 01 c0       	mov    eax,0xc001c520
c0005a08:	eb 0a                	jmp    c0005a14 <ff_wtoupper+0x34>
c0005a0a:	66 90                	xchg   ax,ax
c0005a0c:	b8 60 c4 01 c0       	mov    eax,0xc001c460
c0005a11:	8d 76 00             	lea    esi,[esi+0x0]
c0005a14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a1c:	8d 50 02             	lea    edx,[eax+0x2]
c0005a1f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a23:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005a26:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005a2b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005a31:	0f 84 21 01 00 00    	je     c0005b58 <ff_wtoupper+0x178>
c0005a37:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005a3c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005a41:	0f 82 11 01 00 00    	jb     c0005b58 <ff_wtoupper+0x178>
c0005a47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a4b:	8d 50 02             	lea    edx,[eax+0x2]
c0005a4e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a52:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005a55:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005a5a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005a5f:	66 c1 e8 08          	shr    ax,0x8
c0005a63:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005a68:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005a6f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005a74:	31 d2                	xor    edx,edx
c0005a76:	66 89 c2             	mov    dx,ax
c0005a79:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a7d:	31 c9                	xor    ecx,ecx
c0005a7f:	66 89 c1             	mov    cx,ax
c0005a82:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005a87:	25 ff ff 00 00       	and    eax,0xffff
c0005a8c:	01 c8                	add    eax,ecx
c0005a8e:	39 c2                	cmp    edx,eax
c0005a90:	0f 8d 9a 00 00 00    	jge    c0005b30 <ff_wtoupper+0x150>
c0005a96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a9a:	25 ff ff 00 00       	and    eax,0xffff
c0005a9f:	83 f8 08             	cmp    eax,0x8
c0005aa2:	0f 87 ac 00 00 00    	ja     c0005b54 <ff_wtoupper+0x174>
c0005aa8:	8b 04 85 20 c4 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe3be0]
c0005aaf:	ff e0                	jmp    eax
c0005ab1:	8d 76 00             	lea    esi,[esi+0x0]
c0005ab4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ab9:	31 d2                	xor    edx,edx
c0005abb:	66 89 c2             	mov    dx,ax
c0005abe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005ac2:	25 ff ff 00 00       	and    eax,0xffff
c0005ac7:	29 c2                	sub    edx,eax
c0005ac9:	89 d0                	mov    eax,edx
c0005acb:	01 c0                	add    eax,eax
c0005acd:	89 c2                	mov    edx,eax
c0005acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ad3:	01 d0                	add    eax,edx
c0005ad5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ad8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005add:	eb 4d                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005adf:	90                   	nop
c0005ae0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ae5:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005ae9:	83 e0 01             	and    eax,0x1
c0005aec:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005af1:	eb 39                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005af3:	90                   	nop
c0005af4:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005afa:	eb 30                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005afc:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005b02:	eb 28                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005b04:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005b0a:	eb 20                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005b0c:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005b12:	eb 18                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005b14:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005b1a:	eb 10                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005b1c:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005b22:	eb 08                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005b24:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005b2b:	90                   	nop
c0005b2c:	eb 26                	jmp    c0005b54 <ff_wtoupper+0x174>
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005b36:	0f 85 dc fe ff ff    	jne    c0005a18 <ff_wtoupper+0x38>
c0005b3c:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005b41:	25 ff ff 00 00       	and    eax,0xffff
c0005b46:	01 c0                	add    eax,eax
c0005b48:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005b4c:	e9 c7 fe ff ff       	jmp    c0005a18 <ff_wtoupper+0x38>
c0005b51:	8d 76 00             	lea    esi,[esi+0x0]
c0005b54:	90                   	nop
c0005b55:	8d 76 00             	lea    esi,[esi+0x0]
c0005b58:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005b5d:	25 ff ff 00 00       	and    eax,0xffff
c0005b62:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005b66:	66 90                	xchg   ax,ax
c0005b68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005b6c:	83 c4 10             	add    esp,0x10
c0005b6f:	c3                   	ret    

c0005b70 <CPU::current()>:
c0005b70:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c0005b75:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0005b7b:	c3                   	ret    

c0005b7c <operator new(unsigned long)>:
c0005b7c:	e9 9c 0f 00 00       	jmp    c0006b1d <malloc>

c0005b81 <operator delete(void*)>:
c0005b81:	e9 b7 0f 00 00       	jmp    c0006b3d <rfree>

c0005b86 <disableIRQs()>:
c0005b86:	fa                   	cli    
c0005b87:	c3                   	ret    

c0005b88 <enableIRQs()>:
c0005b88:	fb                   	sti    
c0005b89:	c3                   	ret    

c0005b8a <lockScheduler()>:
c0005b8a:	fa                   	cli    
c0005b8b:	ff 05 c8 26 02 c0    	inc    DWORD PTR ds:0xc00226c8
c0005b91:	c3                   	ret    

c0005b92 <unlockScheduler()>:
c0005b92:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c0005b97:	48                   	dec    eax
c0005b98:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c0005b9d:	75 01                	jne    c0005ba0 <unlockScheduler()+0xe>
c0005b9f:	fb                   	sti    
c0005ba0:	c3                   	ret    

c0005ba1 <lockStuff()>:
c0005ba1:	fa                   	cli    
c0005ba2:	ff 05 c8 26 02 c0    	inc    DWORD PTR ds:0xc00226c8
c0005ba8:	ff 05 c4 26 02 c0    	inc    DWORD PTR ds:0xc00226c4
c0005bae:	c3                   	ret    

c0005baf <unlockStuff()>:
c0005baf:	83 ec 0c             	sub    esp,0xc
c0005bb2:	a1 c4 26 02 c0       	mov    eax,ds:0xc00226c4
c0005bb7:	48                   	dec    eax
c0005bb8:	a3 c4 26 02 c0       	mov    ds:0xc00226c4,eax
c0005bbd:	75 18                	jne    c0005bd7 <unlockStuff()+0x28>
c0005bbf:	83 3d c0 26 02 c0 00 	cmp    DWORD PTR ds:0xc00226c0,0x0
c0005bc6:	74 0f                	je     c0005bd7 <unlockStuff()+0x28>
c0005bc8:	c7 05 c0 26 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00226c0,0x0
c0005bd2:	e8 79 cb 00 00       	call   c0012750 <schedule()>
c0005bd7:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c0005bdc:	48                   	dec    eax
c0005bdd:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c0005be2:	75 01                	jne    c0005be5 <unlockStuff()+0x36>
c0005be4:	fb                   	sti    
c0005be5:	83 c4 0c             	add    esp,0xc
c0005be8:	c3                   	ret    

c0005be9 <Virt::getAKernelVAS()>:
c0005be9:	a1 f0 f2 01 c0       	mov    eax,ds:0xc001f2f0
c0005bee:	c3                   	ret    

c0005bef <__not_memcpy>:
c0005bef:	57                   	push   edi
c0005bf0:	56                   	push   esi
c0005bf1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005bf9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005bfd:	89 c7                	mov    edi,eax
c0005bff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0005c01:	5e                   	pop    esi
c0005c02:	5f                   	pop    edi
c0005c03:	c3                   	ret    

c0005c04 <Krnl::resolveCompatibilitySymbol(char*)>:
c0005c04:	83 ec 0c             	sub    esp,0xc
c0005c07:	83 ec 08             	sub    esp,0x8
c0005c0a:	68 20 c8 01 c0       	push   0xc001c820
c0005c0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c13:	e8 e8 aa ff ff       	call   c0000700 <strcmp>
c0005c18:	83 c4 10             	add    esp,0x10
c0005c1b:	85 c0                	test   eax,eax
c0005c1d:	0f 94 c0             	sete   al
c0005c20:	84 c0                	test   al,al
c0005c22:	74 0c                	je     c0005c30 <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0005c24:	b8 08 f2 01 c0       	mov    eax,0xc001f208
c0005c29:	e9 ea 00 00 00       	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005c2e:	66 90                	xchg   ax,ax
c0005c30:	83 ec 08             	sub    esp,0x8
c0005c33:	68 29 c8 01 c0       	push   0xc001c829
c0005c38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c3c:	e8 bf aa ff ff       	call   c0000700 <strcmp>
c0005c41:	83 c4 10             	add    esp,0x10
c0005c44:	85 c0                	test   eax,eax
c0005c46:	0f 94 c0             	sete   al
c0005c49:	84 c0                	test   al,al
c0005c4b:	74 0b                	je     c0005c58 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0005c4d:	b8 c0 b4 01 c0       	mov    eax,0xc001b4c0
c0005c52:	e9 c1 00 00 00       	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005c57:	90                   	nop
c0005c58:	83 ec 08             	sub    esp,0x8
c0005c5b:	68 33 c8 01 c0       	push   0xc001c833
c0005c60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c64:	e8 97 aa ff ff       	call   c0000700 <strcmp>
c0005c69:	83 c4 10             	add    esp,0x10
c0005c6c:	85 c0                	test   eax,eax
c0005c6e:	0f 94 c0             	sete   al
c0005c71:	84 c0                	test   al,al
c0005c73:	74 0b                	je     c0005c80 <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0005c75:	b8 f4 b1 01 c0       	mov    eax,0xc001b1f4
c0005c7a:	e9 99 00 00 00       	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005c7f:	90                   	nop
c0005c80:	83 ec 08             	sub    esp,0x8
c0005c83:	68 3c c8 01 c0       	push   0xc001c83c
c0005c88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c8c:	e8 6f aa ff ff       	call   c0000700 <strcmp>
c0005c91:	83 c4 10             	add    esp,0x10
c0005c94:	85 c0                	test   eax,eax
c0005c96:	0f 94 c0             	sete   al
c0005c99:	84 c0                	test   al,al
c0005c9b:	74 07                	je     c0005ca4 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c0005c9d:	b8 c0 b5 01 c0       	mov    eax,0xc001b5c0
c0005ca2:	eb 74                	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005ca4:	83 ec 08             	sub    esp,0x8
c0005ca7:	68 46 c8 01 c0       	push   0xc001c846
c0005cac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005cb0:	e8 4b aa ff ff       	call   c0000700 <strcmp>
c0005cb5:	83 c4 10             	add    esp,0x10
c0005cb8:	85 c0                	test   eax,eax
c0005cba:	0f 94 c0             	sete   al
c0005cbd:	84 c0                	test   al,al
c0005cbf:	74 07                	je     c0005cc8 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c0005cc1:	b8 40 b3 01 c0       	mov    eax,0xc001b340
c0005cc6:	eb 50                	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005cc8:	83 ec 08             	sub    esp,0x8
c0005ccb:	68 4f c8 01 c0       	push   0xc001c84f
c0005cd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005cd4:	e8 27 aa ff ff       	call   c0000700 <strcmp>
c0005cd9:	83 c4 10             	add    esp,0x10
c0005cdc:	85 c0                	test   eax,eax
c0005cde:	0f 94 c0             	sete   al
c0005ce1:	84 c0                	test   al,al
c0005ce3:	74 07                	je     c0005cec <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c0005ce5:	b8 0c f2 01 c0       	mov    eax,0xc001f20c
c0005cea:	eb 2c                	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005cec:	83 ec 08             	sub    esp,0x8
c0005cef:	68 5c c8 01 c0       	push   0xc001c85c
c0005cf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005cf8:	e8 03 aa ff ff       	call   c0000700 <strcmp>
c0005cfd:	83 c4 10             	add    esp,0x10
c0005d00:	85 c0                	test   eax,eax
c0005d02:	0f 94 c0             	sete   al
c0005d05:	84 c0                	test   al,al
c0005d07:	74 07                	je     c0005d10 <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0005d09:	b8 0d f2 01 c0       	mov    eax,0xc001f20d
c0005d0e:	eb 08                	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005d10:	b8 00 00 00 00       	mov    eax,0x0
c0005d15:	8d 76 00             	lea    esi,[esi+0x0]
c0005d18:	83 c4 0c             	add    esp,0xc
c0005d1b:	c3                   	ret    

c0005d1c <Computer::close(int, int, void*)>:
c0005d1c:	57                   	push   edi
c0005d1d:	56                   	push   esi
c0005d1e:	53                   	push   ebx
c0005d1f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0005d23:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0005d27:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0005d2b:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0005d31:	83 ec 0c             	sub    esp,0xc
c0005d34:	50                   	push   eax
c0005d35:	e8 d0 50 00 00       	call   c000ae0a <Device::closeAll()>
c0005d3a:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	8b 10                	mov    edx,DWORD PTR [eax]
c0005d45:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0005d49:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0005d51:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0005d55:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d59:	5b                   	pop    ebx
c0005d5a:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0005d5d:	5e                   	pop    esi
c0005d5e:	5f                   	pop    edi
c0005d5f:	ff e0                	jmp    eax

c0005d61 <Krnl::firstTask()>:
c0005d61:	53                   	push   ebx
c0005d62:	83 ec 14             	sub    esp,0x14
c0005d65:	fb                   	sti    
c0005d66:	68 69 c8 01 c0       	push   0xc001c869
c0005d6b:	e8 07 0e 00 00       	call   c0006b77 <Krnl::setBootMessage(char const*)>
c0005d70:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0005d77:	e8 a1 0d 00 00       	call   c0006b1d <malloc>
c0005d7c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005d83:	89 c3                	mov    ebx,eax
c0005d85:	a1 f0 26 02 c0       	mov    eax,ds:0xc00226f0
c0005d8a:	50                   	push   eax
c0005d8b:	68 82 c8 01 c0       	push   0xc001c882
c0005d90:	6a 01                	push   0x1
c0005d92:	53                   	push   ebx
c0005d93:	e8 8c c5 00 00       	call   c0012324 <Process::Process(bool, char const*, Process*, char**)>
c0005d98:	83 c4 20             	add    esp,0x20
c0005d9b:	68 ff 00 00 00       	push   0xff
c0005da0:	6a 00                	push   0x0
c0005da2:	68 77 65 00 c0       	push   0xc0006577
c0005da7:	53                   	push   ebx
c0005da8:	e8 83 c7 00 00       	call   c0012530 <Process::createThread(void (*)(void*), void*, int)>
c0005dad:	8b 15 f0 26 02 c0    	mov    edx,DWORD PTR ds:0xc00226f0
c0005db3:	6a 7a                	push   0x7a
c0005db5:	6a 00                	push   0x0
c0005db7:	68 84 2f 01 c0       	push   0xc0012f84
c0005dbc:	52                   	push   edx
c0005dbd:	e8 6e c7 00 00       	call   c0012530 <Process::createThread(void (*)(void*), void*, int)>
c0005dc2:	83 c4 14             	add    esp,0x14
c0005dc5:	a3 a8 26 02 c0       	mov    ds:0xc00226a8,eax
c0005dca:	68 80 c9 01 c0       	push   0xc001c980
c0005dcf:	c6 05 0d f2 01 c0 01 	mov    BYTE PTR ds:0xc001f20d,0x1
c0005dd6:	e8 9c 0d 00 00       	call   c0006b77 <Krnl::setBootMessage(char const*)>
c0005ddb:	e8 83 d5 00 00       	call   c0013363 <Vm::initialise8086()>
c0005de0:	e8 69 3e 00 00       	call   c0009c4e <Fs::initVFS()>
c0005de5:	c7 04 24 8f c8 01 c0 	mov    DWORD PTR [esp],0xc001c88f
c0005dec:	e8 86 0d 00 00       	call   c0006b77 <Krnl::setBootMessage(char const*)>
c0005df1:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c0005df6:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0005dfc:	8b 10                	mov    edx,DWORD PTR [eax]
c0005dfe:	6a 00                	push   0x0
c0005e00:	6a 00                	push   0x0
c0005e02:	6a 00                	push   0x0
c0005e04:	50                   	push   eax
c0005e05:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0005e08:	83 c4 14             	add    esp,0x14
c0005e0b:	68 80 c9 01 c0       	push   0xc001c980
c0005e10:	e8 62 0d 00 00       	call   c0006b77 <Krnl::setBootMessage(char const*)>
c0005e15:	e8 9c ad 00 00       	call   c0010bb6 <Sys::loadSyscalls()>
c0005e1a:	e8 d3 94 00 00       	call   c000f2f2 <Krnl::loadSystemEnv()>
c0005e1f:	e8 98 97 00 00       	call   c000f5bc <Krnl::setupPowerManager()>
c0005e24:	83 c4 0c             	add    esp,0xc
c0005e27:	6a 3a                	push   0x3a
c0005e29:	68 a9 c8 01 c0       	push   0xc001c8a9
c0005e2e:	68 b2 c8 01 c0       	push   0xc001c8b2
c0005e33:	e8 ae 9c 00 00       	call   c000fae6 <Reg::readIntWithDefault(char*, char*, int)>
c0005e38:	89 04 24             	mov    DWORD PTR [esp],eax
c0005e3b:	e8 1c 49 00 00       	call   c000a75c <User::loadClockSettings(int)>
c0005e40:	c7 04 24 a4 c9 01 c0 	mov    DWORD PTR [esp],0xc001c9a4
c0005e47:	e8 2b 0d 00 00       	call   c0006b77 <Krnl::setBootMessage(char const*)>
c0005e4c:	59                   	pop    ecx
c0005e4d:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c0005e52:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0005e58:	53                   	push   ebx
c0005e59:	e8 aa 4f 00 00       	call   c000ae08 <Device::loadDriversForAll()>
c0005e5e:	c7 04 24 ba c8 01 c0 	mov    DWORD PTR [esp],0xc001c8ba
c0005e65:	e8 0d 0d 00 00       	call   c0006b77 <Krnl::setBootMessage(char const*)>
c0005e6a:	58                   	pop    eax
c0005e6b:	8b 1d 08 f2 01 c0    	mov    ebx,DWORD PTR ds:0xc001f208
c0005e71:	5a                   	pop    edx
c0005e72:	6a 01                	push   0x1
c0005e74:	68 cb c8 01 c0       	push   0xc001c8cb
c0005e79:	e8 e0 be 00 00       	call   c0011d5e <Thr::loadDLL(char const*, bool)>
c0005e7e:	59                   	pop    ecx
c0005e7f:	5a                   	pop    edx
c0005e80:	53                   	push   ebx
c0005e81:	50                   	push   eax
c0005e82:	e8 08 c1 00 00       	call   c0011f8f <Thr::executeDLL(unsigned long, void*)>
c0005e87:	83 c4 10             	add    esp,0x10
c0005e8a:	83 ec 0c             	sub    esp,0xc
c0005e8d:	6a 02                	push   0x2
c0005e8f:	e8 b8 ca 00 00       	call   c001294c <blockTask(TaskState)>
c0005e94:	83 c4 10             	add    esp,0x10
c0005e97:	eb f1                	jmp    c0005e8a <Krnl::firstTask()+0x129>
c0005e99:	90                   	nop

c0005e9a <Computer::Computer()>:
c0005e9a:	83 ec 0c             	sub    esp,0xc
c0005e9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ea1:	83 ec 08             	sub    esp,0x8
c0005ea4:	68 e7 c8 01 c0       	push   0xc001c8e7
c0005ea9:	50                   	push   eax
c0005eaa:	e8 d5 4f 00 00       	call   c000ae84 <Device::Device(char const*)>
c0005eaf:	83 c4 10             	add    esp,0x10
c0005eb2:	ba f0 c9 01 c0       	mov    edx,0xc001c9f0
c0005eb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ebb:	89 10                	mov    DWORD PTR [eax],edx
c0005ebd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ec1:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0005ecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ecf:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0005ed9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005edd:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0005ee3:	83 ca 04             	or     edx,0x4
c0005ee6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0005eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ef0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005ef6:	31 d2                	xor    edx,edx
c0005ef8:	88 c2                	mov    dl,al
c0005efa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005efe:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0005f05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f09:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005f0f:	31 d2                	xor    edx,edx
c0005f11:	88 c2                	mov    dl,al
c0005f13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f17:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0005f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f20:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005f26:	8d 50 01             	lea    edx,[eax+0x1]
c0005f29:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005f2d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0005f33:	31 d2                	xor    edx,edx
c0005f35:	88 c2                	mov    dl,al
c0005f37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f3b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0005f3f:	83 e1 3f             	and    ecx,0x3f
c0005f42:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0005f46:	90                   	nop
c0005f47:	83 c4 0c             	add    esp,0xc
c0005f4a:	c3                   	ret    
c0005f4b:	90                   	nop

c0005f4c <Computer::setBootMessage(char const*)>:
c0005f4c:	c3                   	ret    
c0005f4d:	90                   	nop

c0005f4e <Computer::detectFeatures()>:
c0005f4e:	55                   	push   ebp
c0005f4f:	57                   	push   edi
c0005f50:	56                   	push   esi
c0005f51:	53                   	push   ebx
c0005f52:	83 ec 1c             	sub    esp,0x1c
c0005f55:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f59:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0005f63:	e8 b1 a2 ff ff       	call   c0000219 <detectCPUID>
c0005f68:	85 c0                	test   eax,eax
c0005f6a:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0005f70:	0f 95 c2             	setne  dl
c0005f73:	83 e0 fd             	and    eax,0xfffffffd
c0005f76:	01 d2                	add    edx,edx
c0005f78:	09 d0                	or     eax,edx
c0005f7a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0005f80:	a8 02                	test   al,0x2
c0005f82:	75 46                	jne    c0005fca <Computer::detectFeatures()+0x7c>
c0005f84:	f6 05 21 f2 01 c0 04 	test   BYTE PTR ds:0xc001f221,0x4
c0005f8b:	74 07                	je     c0005f94 <Computer::detectFeatures()+0x46>
c0005f8d:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0005f94:	e8 ed 51 01 00       	call   c001b186 <x87Detect>
c0005f99:	83 e0 01             	and    eax,0x1
c0005f9c:	c1 e0 04             	shl    eax,0x4
c0005f9f:	88 c2                	mov    dl,al
c0005fa1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0005fa7:	83 e0 ef             	and    eax,0xffffffef
c0005faa:	09 d0                	or     eax,edx
c0005fac:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0005fb2:	a8 10                	test   al,0x10
c0005fb4:	0f 85 2a 01 00 00    	jne    c00060e4 <Computer::detectFeatures()+0x196>
c0005fba:	84 c0                	test   al,al
c0005fbc:	0f 88 45 01 00 00    	js     c0006107 <Computer::detectFeatures()+0x1b9>
c0005fc2:	83 c4 1c             	add    esp,0x1c
c0005fc5:	5b                   	pop    ebx
c0005fc6:	5e                   	pop    esi
c0005fc7:	5f                   	pop    edi
c0005fc8:	5d                   	pop    ebp
c0005fc9:	c3                   	ret    
c0005fca:	83 ec 0c             	sub    esp,0xc
c0005fcd:	6a 20                	push   0x20
c0005fcf:	e8 40 84 00 00       	call   c000e414 <CPU::cpuidCheckEDX(unsigned int)>
c0005fd4:	83 e0 01             	and    eax,0x1
c0005fd7:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0005fde:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0005fe4:	83 e0 f7             	and    eax,0xfffffff7
c0005fe7:	09 d0                	or     eax,edx
c0005fe9:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0005fef:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0005ff6:	e8 19 84 00 00       	call   c000e414 <CPU::cpuidCheckEDX(unsigned int)>
c0005ffb:	83 e0 01             	and    eax,0x1
c0005ffe:	88 c2                	mov    dl,al
c0006000:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006006:	83 e0 fe             	and    eax,0xfffffffe
c0006009:	09 d0                	or     eax,edx
c000600b:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006011:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006018:	e8 f7 83 00 00       	call   c000e414 <CPU::cpuidCheckEDX(unsigned int)>
c000601d:	c1 e0 07             	shl    eax,0x7
c0006020:	88 c2                	mov    dl,al
c0006022:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006028:	83 e0 7f             	and    eax,0x7f
c000602b:	09 d0                	or     eax,edx
c000602d:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006033:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000603a:	e8 d5 83 00 00       	call   c000e414 <CPU::cpuidCheckEDX(unsigned int)>
c000603f:	83 c4 10             	add    esp,0x10
c0006042:	83 e0 01             	and    eax,0x1
c0006045:	c1 e0 05             	shl    eax,0x5
c0006048:	88 c2                	mov    dl,al
c000604a:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006050:	83 e0 df             	and    eax,0xffffffdf
c0006053:	09 d0                	or     eax,edx
c0006055:	f7 05 20 f2 01 c0 01 04 00 00 	test   DWORD PTR ds:0xc001f220,0x401
c000605f:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006065:	0f 84 c2 00 00 00    	je     c000612d <Computer::detectFeatures()+0x1df>
c000606b:	83 e0 fe             	and    eax,0xfffffffe
c000606e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006074:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c000607a:	88 c2                	mov    dl,al
c000607c:	83 e2 09             	and    edx,0x9
c000607f:	fe ca                	dec    dl
c0006081:	75 09                	jne    c000608c <Computer::detectFeatures()+0x13e>
c0006083:	83 e0 fe             	and    eax,0xfffffffe
c0006086:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000608c:	83 ec 0c             	sub    esp,0xc
c000608f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006093:	50                   	push   eax
c0006094:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006098:	55                   	push   ebp
c0006099:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000609d:	57                   	push   edi
c000609e:	8d 74 24 18          	lea    esi,[esp+0x18]
c00060a2:	56                   	push   esi
c00060a3:	68 00 00 00 80       	push   0x80000000
c00060a8:	e8 e3 82 00 00       	call   c000e390 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00060ad:	83 c4 20             	add    esp,0x20
c00060b0:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c00060b7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00060bb:	0f 86 c3 fe ff ff    	jbe    c0005f84 <Computer::detectFeatures()+0x36>
c00060c1:	83 ec 0c             	sub    esp,0xc
c00060c4:	50                   	push   eax
c00060c5:	55                   	push   ebp
c00060c6:	57                   	push   edi
c00060c7:	56                   	push   esi
c00060c8:	68 01 00 00 80       	push   0x80000001
c00060cd:	e8 be 82 00 00       	call   c000e390 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00060d2:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c00060dc:	83 c4 20             	add    esp,0x20
c00060df:	e9 a0 fe ff ff       	jmp    c0005f84 <Computer::detectFeatures()+0x36>
c00060e4:	e8 57 50 01 00       	call   c001b140 <absolutelyNoChanceInHell>
c00060e9:	88 c2                	mov    dl,al
c00060eb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00060f1:	c1 e2 07             	shl    edx,0x7
c00060f4:	83 e0 7f             	and    eax,0x7f
c00060f7:	09 d0                	or     eax,edx
c00060f9:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00060ff:	84 c0                	test   al,al
c0006101:	0f 89 bb fe ff ff    	jns    c0005fc2 <Computer::detectFeatures()+0x74>
c0006107:	e8 b4 4d 01 00       	call   c001aec0 <avxDetect>
c000610c:	83 e0 01             	and    eax,0x1
c000610f:	c1 e0 05             	shl    eax,0x5
c0006112:	88 c2                	mov    dl,al
c0006114:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c000611a:	83 e0 df             	and    eax,0xffffffdf
c000611d:	09 d0                	or     eax,edx
c000611f:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006125:	83 c4 1c             	add    esp,0x1c
c0006128:	5b                   	pop    ebx
c0006129:	5e                   	pop    esi
c000612a:	5f                   	pop    edi
c000612b:	5d                   	pop    ebp
c000612c:	c3                   	ret    
c000612d:	83 ec 0c             	sub    esp,0xc
c0006130:	68 00 02 00 00       	push   0x200
c0006135:	e8 da 82 00 00       	call   c000e414 <CPU::cpuidCheckEDX(unsigned int)>
c000613a:	83 c4 10             	add    esp,0x10
c000613d:	83 e0 01             	and    eax,0x1
c0006140:	88 c2                	mov    dl,al
c0006142:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006148:	83 e0 fe             	and    eax,0xfffffffe
c000614b:	09 d0                	or     eax,edx
c000614d:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006153:	e9 1c ff ff ff       	jmp    c0006074 <Computer::detectFeatures()+0x126>

c0006158 <Computer::displayFeatures()>:
c0006158:	c3                   	ret    
c0006159:	90                   	nop

c000615a <Computer::rdmsr(unsigned int)>:
c000615a:	83 ec 0c             	sub    esp,0xc
c000615d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006161:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006168:	74 0a                	je     c0006174 <Computer::rdmsr(unsigned int)+0x1a>
c000616a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000616e:	0f 32                	rdmsr  
c0006170:	83 c4 0c             	add    esp,0xc
c0006173:	c3                   	ret    
c0006174:	83 ec 0c             	sub    esp,0xc
c0006177:	68 f0 c8 01 c0       	push   0xc001c8f0
c000617c:	e8 7a 92 00 00       	call   c000f3fb <Krnl::panic(char const*)>
c0006181:	83 c4 10             	add    esp,0x10
c0006184:	eb e4                	jmp    c000616a <Computer::rdmsr(unsigned int)+0x10>

c0006186 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006186:	57                   	push   edi
c0006187:	56                   	push   esi
c0006188:	52                   	push   edx
c0006189:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000618d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006191:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006195:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000619c:	74 0e                	je     c00061ac <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000619e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061a2:	89 f0                	mov    eax,esi
c00061a4:	89 fa                	mov    edx,edi
c00061a6:	0f 30                	wrmsr  
c00061a8:	58                   	pop    eax
c00061a9:	5e                   	pop    esi
c00061aa:	5f                   	pop    edi
c00061ab:	c3                   	ret    
c00061ac:	83 ec 0c             	sub    esp,0xc
c00061af:	68 f6 c8 01 c0       	push   0xc001c8f6
c00061b4:	e8 42 92 00 00       	call   c000f3fb <Krnl::panic(char const*)>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	eb e0                	jmp    c000619e <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c00061be <Computer::shutdown()>:
c00061be:	83 ec 0c             	sub    esp,0xc
c00061c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061c5:	8b 10                	mov    edx,DWORD PTR [eax]
c00061c7:	6a 00                	push   0x0
c00061c9:	6a 00                	push   0x0
c00061cb:	6a 00                	push   0x0
c00061cd:	50                   	push   eax
c00061ce:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00061d1:	83 c4 1c             	add    esp,0x1c
c00061d4:	c3                   	ret    
c00061d5:	90                   	nop

c00061d6 <Computer::restart()>:
c00061d6:	83 ec 0c             	sub    esp,0xc
c00061d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061dd:	8b 10                	mov    edx,DWORD PTR [eax]
c00061df:	6a 00                	push   0x0
c00061e1:	6a 00                	push   0x0
c00061e3:	6a 01                	push   0x1
c00061e5:	50                   	push   eax
c00061e6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00061e9:	83 c4 1c             	add    esp,0x1c
c00061ec:	c3                   	ret    
c00061ed:	90                   	nop

c00061ee <Computer::sleep()>:
c00061ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061f2:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c00061f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00061fc:	e9 8b 7c 00 00       	jmp    c000de8c <ACPI::sleep()>
c0006201:	90                   	nop

c0006202 <Computer::nmiEnabled()>:
c0006202:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006206:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000620c:	c3                   	ret    
c000620d:	90                   	nop

c000620e <Computer::readCMOS(unsigned char)>:
c000620e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006212:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006219:	19 c0                	sbb    eax,eax
c000621b:	83 e0 80             	and    eax,0xffffff80
c000621e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006222:	e6 70                	out    0x70,al
c0006224:	e4 71                	in     al,0x71
c0006226:	c3                   	ret    
c0006227:	90                   	nop

c0006228 <Computer::enableNMI(bool)>:
c0006228:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000622c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006230:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006236:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000623e:	eb ce                	jmp    c000620e <Computer::readCMOS(unsigned char)>

c0006240 <Computer::open(int, int, void*)>:
c0006240:	56                   	push   esi
c0006241:	53                   	push   ebx
c0006242:	83 ec 10             	sub    esp,0x10
c0006245:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006249:	f6 05 20 f2 01 c0 04 	test   BYTE PTR ds:0xc001f220,0x4
c0006250:	68 fc c8 01 c0       	push   0xc001c8fc
c0006255:	0f 94 05 40 eb 01 c0 	sete   BYTE PTR ds:0xc001eb40
c000625c:	e8 16 09 00 00       	call   c0006b77 <Krnl::setBootMessage(char const*)>
c0006261:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006268:	e8 b0 08 00 00       	call   c0006b1d <malloc>
c000626d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006270:	89 c6                	mov    esi,eax
c0006272:	e8 ad 77 00 00       	call   c000da24 <ACPI::ACPI()>
c0006277:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000627d:	58                   	pop    eax
c000627e:	5a                   	pop    edx
c000627f:	56                   	push   esi
c0006280:	53                   	push   ebx
c0006281:	e8 66 4a 00 00       	call   c000acec <Device::addChild(Device*)>
c0006286:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006289:	e8 c0 fc ff ff       	call   c0005f4e <Computer::detectFeatures()>
c000628e:	59                   	pop    ecx
c000628f:	5e                   	pop    esi
c0006290:	6a 01                	push   0x1
c0006292:	53                   	push   ebx
c0006293:	e8 90 ff ff ff       	call   c0006228 <Computer::enableNMI(bool)>
c0006298:	c7 04 24 14 c9 01 c0 	mov    DWORD PTR [esp],0xc001c914
c000629f:	e8 d3 08 00 00       	call   c0006b77 <Krnl::setBootMessage(char const*)>
c00062a4:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c00062ab:	e8 6d 08 00 00       	call   c0006b1d <malloc>
c00062b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00062b3:	89 c6                	mov    esi,eax
c00062b5:	e8 12 82 00 00       	call   c000e4cc <CPU::CPU()>
c00062ba:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c00062c0:	58                   	pop    eax
c00062c1:	5a                   	pop    edx
c00062c2:	56                   	push   esi
c00062c3:	53                   	push   ebx
c00062c4:	e8 23 4a 00 00       	call   c000acec <Device::addChild(Device*)>
c00062c9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00062cf:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00062d3:	8b 10                	mov    edx,DWORD PTR [eax]
c00062d5:	51                   	push   ecx
c00062d6:	6a 00                	push   0x0
c00062d8:	6a 00                	push   0x0
c00062da:	50                   	push   eax
c00062db:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00062de:	83 c4 14             	add    esp,0x14
c00062e1:	68 c4 c9 01 c0       	push   0xc001c9c4
c00062e6:	e8 8c 08 00 00       	call   c0006b77 <Krnl::setBootMessage(char const*)>
c00062eb:	e8 34 e1 00 00       	call   c0014424 <HalInitialiseCoprocessor()>
c00062f0:	c7 04 24 2e c9 01 c0 	mov    DWORD PTR [esp],0xc001c92e
c00062f7:	e8 7b 08 00 00       	call   c0006b77 <Krnl::setBootMessage(char const*)>
c00062fc:	c7 04 24 61 5d 00 c0 	mov    DWORD PTR [esp],0xc0005d61
c0006303:	e8 40 c3 00 00       	call   c0012648 <setupMultitasking(void (*)())>
c0006308:	83 c4 14             	add    esp,0x14
c000630b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006310:	5b                   	pop    ebx
c0006311:	5e                   	pop    esi
c0006312:	c3                   	ret    
c0006313:	90                   	nop

c0006314 <Computer::disableNMI()>:
c0006314:	6a 00                	push   0x0
c0006316:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000631a:	50                   	push   eax
c000631b:	e8 08 ff ff ff       	call   c0006228 <Computer::enableNMI(bool)>
c0006320:	5a                   	pop    edx
c0006321:	59                   	pop    ecx
c0006322:	c3                   	ret    
c0006323:	90                   	nop

c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0006324:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006328:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000632f:	19 c0                	sbb    eax,eax
c0006331:	83 e0 80             	and    eax,0xffffff80
c0006334:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006338:	e6 70                	out    0x70,al
c000633a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000633e:	e6 71                	out    0x71,al
c0006340:	c3                   	ret    
c0006341:	90                   	nop

c0006342 <Computer::handleNMI()>:
c0006342:	56                   	push   esi
c0006343:	53                   	push   ebx
c0006344:	83 ec 10             	sub    esp,0x10
c0006347:	e4 92                	in     al,0x92
c0006349:	89 c6                	mov    esi,eax
c000634b:	e4 61                	in     al,0x61
c000634d:	68 49 c9 01 c0       	push   0xc001c949
c0006352:	88 c3                	mov    bl,al
c0006354:	e8 53 35 00 00       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c0006359:	83 c4 10             	add    esp,0x10
c000635c:	83 e6 10             	and    esi,0x10
c000635f:	75 0d                	jne    c000636e <Computer::handleNMI()+0x2c>
c0006361:	f6 c3 40             	test   bl,0x40
c0006364:	75 1d                	jne    c0006383 <Computer::handleNMI()+0x41>
c0006366:	84 db                	test   bl,bl
c0006368:	78 2d                	js     c0006397 <Computer::handleNMI()+0x55>
c000636a:	58                   	pop    eax
c000636b:	5b                   	pop    ebx
c000636c:	5e                   	pop    esi
c000636d:	c3                   	ret    
c000636e:	83 ec 0c             	sub    esp,0xc
c0006371:	68 5a c9 01 c0       	push   0xc001c95a
c0006376:	e8 80 90 00 00       	call   c000f3fb <Krnl::panic(char const*)>
c000637b:	83 c4 10             	add    esp,0x10
c000637e:	f6 c3 40             	test   bl,0x40
c0006381:	74 e3                	je     c0006366 <Computer::handleNMI()+0x24>
c0006383:	83 ec 0c             	sub    esp,0xc
c0006386:	68 67 c9 01 c0       	push   0xc001c967
c000638b:	e8 6b 90 00 00       	call   c000f3fb <Krnl::panic(char const*)>
c0006390:	83 c4 10             	add    esp,0x10
c0006393:	84 db                	test   bl,bl
c0006395:	79 d3                	jns    c000636a <Computer::handleNMI()+0x28>
c0006397:	c7 44 24 10 71 c9 01 c0 	mov    DWORD PTR [esp+0x10],0xc001c971
c000639f:	5a                   	pop    edx
c00063a0:	5b                   	pop    ebx
c00063a1:	5e                   	pop    esi
c00063a2:	e9 54 90 00 00       	jmp    c000f3fb <Krnl::panic(char const*)>
c00063a7:	90                   	nop

c00063a8 <GDTEntry::setBase(unsigned int)>:
c00063a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063ac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00063b0:	89 c1                	mov    ecx,eax
c00063b2:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00063b6:	c1 e9 10             	shr    ecx,0x10
c00063b9:	c1 e8 18             	shr    eax,0x18
c00063bc:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c00063bf:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c00063c2:	c3                   	ret    
c00063c3:	90                   	nop

c00063c4 <GDTEntry::setLimit(unsigned int)>:
c00063c4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00063c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063cc:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c00063cf:	66 89 01             	mov    WORD PTR [ecx],ax
c00063d2:	83 e2 f0             	and    edx,0xfffffff0
c00063d5:	c1 e8 10             	shr    eax,0x10
c00063d8:	83 e0 0f             	and    eax,0xf
c00063db:	09 d0                	or     eax,edx
c00063dd:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c00063e0:	c3                   	ret    
c00063e1:	90                   	nop

c00063e2 <GDT::GDT()>:
c00063e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00063e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00063ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00063f0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00063f6:	90                   	nop
c00063f7:	c3                   	ret    

c00063f8 <GDT::addEntry(GDTEntry)>:
c00063f8:	53                   	push   ebx
c00063f9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00063fd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006401:	8b 02                	mov    eax,DWORD PTR [edx]
c0006403:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006407:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000640b:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000640f:	8d 48 01             	lea    ecx,[eax+0x1]
c0006412:	c1 e0 03             	shl    eax,0x3
c0006415:	89 0a                	mov    DWORD PTR [edx],ecx
c0006417:	5b                   	pop    ebx
c0006418:	c3                   	ret    
c0006419:	90                   	nop

c000641a <GDT::getNumberOfEntries()>:
c000641a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000641e:	8b 00                	mov    eax,DWORD PTR [eax]
c0006420:	c3                   	ret    
c0006421:	90                   	nop

c0006422 <GDT::flush()>:
c0006422:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006426:	8b 10                	mov    edx,DWORD PTR [eax]
c0006428:	83 c0 04             	add    eax,0x4
c000642b:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0006432:	a3 12 f2 01 c0       	mov    ds:0xc001f212,eax
c0006437:	66 89 15 10 f2 01 c0 	mov    WORD PTR ds:0xc001f210,dx
c000643e:	e9 3a 9f ff ff       	jmp    c000037d <loadGDT>
c0006443:	90                   	nop

c0006444 <GDT::setup()>:
c0006444:	57                   	push   edi
c0006445:	56                   	push   esi
c0006446:	53                   	push   ebx
c0006447:	83 ec 30             	sub    esp,0x30
c000644a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000644e:	6a 00                	push   0x0
c0006450:	8d 74 24 14          	lea    esi,[esp+0x14]
c0006454:	56                   	push   esi
c0006455:	e8 4e ff ff ff       	call   c00063a8 <GDTEntry::setBase(unsigned int)>
c000645a:	6a 00                	push   0x0
c000645c:	56                   	push   esi
c000645d:	e8 62 ff ff ff       	call   c00063c4 <GDTEntry::setLimit(unsigned int)>
c0006462:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000646a:	6a 00                	push   0x0
c000646c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0006470:	56                   	push   esi
c0006471:	e8 32 ff ff ff       	call   c00063a8 <GDTEntry::setBase(unsigned int)>
c0006476:	68 ff ff ff 00       	push   0xffffff
c000647b:	56                   	push   esi
c000647c:	e8 43 ff ff ff       	call   c00063c4 <GDTEntry::setLimit(unsigned int)>
c0006481:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0006485:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0006489:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000648d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0006491:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0006496:	0d 00 9a c0 00       	or     eax,0xc09a00
c000649b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000649f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00064a3:	89 f8                	mov    eax,edi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	80 e4 f7             	and    ah,0xf7
c00064aa:	80 ce 60             	or     dh,0x60
c00064ad:	89 c7                	mov    edi,eax
c00064af:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00064b3:	80 cc 60             	or     ah,0x60
c00064b6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00064ba:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00064be:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00064c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00064c6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00064ca:	83 c4 20             	add    esp,0x20
c00064cd:	6a 00                	push   0x0
c00064cf:	8d 44 24 24          	lea    eax,[esp+0x24]
c00064d3:	50                   	push   eax
c00064d4:	e8 cf fe ff ff       	call   c00063a8 <GDTEntry::setBase(unsigned int)>
c00064d9:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00064dd:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c00064e1:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c00064e6:	6a 00                	push   0x0
c00064e8:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064ec:	50                   	push   eax
c00064ed:	e8 b6 fe ff ff       	call   c00063a8 <GDTEntry::setBase(unsigned int)>
c00064f2:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c00064f7:	83 c4 0c             	add    esp,0xc
c00064fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00064fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0006502:	53                   	push   ebx
c0006503:	e8 f0 fe ff ff       	call   c00063f8 <GDT::addEntry(GDTEntry)>
c0006508:	83 c4 0c             	add    esp,0xc
c000650b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000650f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0006513:	53                   	push   ebx
c0006514:	e8 df fe ff ff       	call   c00063f8 <GDT::addEntry(GDTEntry)>
c0006519:	83 c4 0c             	add    esp,0xc
c000651c:	57                   	push   edi
c000651d:	56                   	push   esi
c000651e:	53                   	push   ebx
c000651f:	e8 d4 fe ff ff       	call   c00063f8 <GDT::addEntry(GDTEntry)>
c0006524:	83 c4 0c             	add    esp,0xc
c0006527:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000652b:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000652f:	53                   	push   ebx
c0006530:	e8 c3 fe ff ff       	call   c00063f8 <GDT::addEntry(GDTEntry)>
c0006535:	83 c4 0c             	add    esp,0xc
c0006538:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000653c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0006540:	53                   	push   ebx
c0006541:	e8 b2 fe ff ff       	call   c00063f8 <GDT::addEntry(GDTEntry)>
c0006546:	83 c4 0c             	add    esp,0xc
c0006549:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000654d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0006551:	53                   	push   ebx
c0006552:	e8 a1 fe ff ff       	call   c00063f8 <GDT::addEntry(GDTEntry)>
c0006557:	83 c4 0c             	add    esp,0xc
c000655a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000655e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0006562:	53                   	push   ebx
c0006563:	e8 90 fe ff ff       	call   c00063f8 <GDT::addEntry(GDTEntry)>
c0006568:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000656b:	e8 b2 fe ff ff       	call   c0006422 <GDT::flush()>
c0006570:	83 c4 40             	add    esp,0x40
c0006573:	5b                   	pop    ebx
c0006574:	5e                   	pop    esi
c0006575:	5f                   	pop    edi
c0006576:	c3                   	ret    

c0006577 <idleFunction(void*)>:
c0006577:	83 ec 0c             	sub    esp,0xc
c000657a:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c000657f:	48                   	dec    eax
c0006580:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c0006585:	75 01                	jne    c0006588 <idleFunction(void*)+0x11>
c0006587:	fb                   	sti    
c0006588:	f4                   	hlt    
c0006589:	e8 b4 51 01 00       	call   c001b742 <idleCommon()>
c000658e:	eb f8                	jmp    c0006588 <idleFunction(void*)+0x11>

c0006590 <IDTEntry::IDTEntry(bool)>:
c0006590:	83 ec 04             	sub    esp,0x4
c0006593:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006597:	88 04 24             	mov    BYTE PTR [esp],al
c000659a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000659e:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00065a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a8:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00065ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00065b3:	83 e2 f0             	and    edx,0xfffffff0
c00065b6:	83 ca 0e             	or     edx,0xe
c00065b9:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00065bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065c0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00065c3:	83 e2 ef             	and    edx,0xffffffef
c00065c6:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00065c9:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00065cd:	74 05                	je     c00065d4 <IDTEntry::IDTEntry(bool)+0x44>
c00065cf:	b2 03                	mov    dl,0x3
c00065d1:	eb 05                	jmp    c00065d8 <IDTEntry::IDTEntry(bool)+0x48>
c00065d3:	90                   	nop
c00065d4:	b2 00                	mov    dl,0x0
c00065d6:	66 90                	xchg   ax,ax
c00065d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065dc:	83 e2 03             	and    edx,0x3
c00065df:	88 d1                	mov    cl,dl
c00065e1:	c1 e1 05             	shl    ecx,0x5
c00065e4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00065e7:	83 e2 9f             	and    edx,0xffffff9f
c00065ea:	09 ca                	or     edx,ecx
c00065ec:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00065ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065f3:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00065f6:	83 ca 80             	or     edx,0xffffff80
c00065f9:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00065fc:	90                   	nop
c00065fd:	83 c4 04             	add    esp,0x4
c0006600:	c3                   	ret    
c0006601:	90                   	nop

c0006602 <IDTEntry::setOffset(unsigned int)>:
c0006602:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000660a:	66 89 02             	mov    WORD PTR [edx],ax
c000660d:	c1 e8 10             	shr    eax,0x10
c0006610:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0006614:	c3                   	ret    
c0006615:	90                   	nop
c0006616:	66 90                	xchg   ax,ax

c0006618 <IDT::IDT()>:
c0006618:	90                   	nop
c0006619:	c3                   	ret    

c000661a <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000661a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000661e:	83 c0 30             	add    eax,0x30
c0006621:	c3                   	ret    

c0006622 <IDT::addEntry(IDTEntry, int)>:
c0006622:	53                   	push   ebx
c0006623:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000662b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000662f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006633:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c0006636:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000663a:	5b                   	pop    ebx
c000663b:	c3                   	ret    

c000663c <IDT::addEntry(int, void (*)(), bool)>:
c000663c:	53                   	push   ebx
c000663d:	83 ec 10             	sub    esp,0x10
c0006640:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0006645:	50                   	push   eax
c0006646:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000664a:	53                   	push   ebx
c000664b:	e8 40 ff ff ff       	call   c0006590 <IDTEntry::IDTEntry(bool)>
c0006650:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0006654:	53                   	push   ebx
c0006655:	e8 a8 ff ff ff       	call   c0006602 <IDTEntry::setOffset(unsigned int)>
c000665a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000665e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0006662:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0006666:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000666a:	e8 b3 ff ff ff       	call   c0006622 <IDT::addEntry(IDTEntry, int)>
c000666f:	83 c4 30             	add    esp,0x30
c0006672:	5b                   	pop    ebx
c0006673:	c3                   	ret    

c0006674 <IDT::flush()>:
c0006674:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006678:	66 c7 05 18 f2 01 c0 ff 07 	mov    WORD PTR ds:0xc001f218,0x7ff
c0006681:	a3 1a f2 01 c0       	mov    ds:0xc001f21a,eax
c0006686:	0f 01 1d 18 f2 01 c0 	lidtd  ds:0xc001f218
c000668d:	c3                   	ret    

c000668e <IDT::setup()>:
c000668e:	57                   	push   edi
c000668f:	56                   	push   esi
c0006690:	53                   	push   ebx
c0006691:	83 ec 10             	sub    esp,0x10
c0006694:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006698:	6a 00                	push   0x0
c000669a:	68 50 af 01 c0       	push   0xc001af50
c000669f:	6a 00                	push   0x0
c00066a1:	53                   	push   ebx
c00066a2:	e8 95 ff ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c00066a7:	6a 00                	push   0x0
c00066a9:	68 60 af 01 c0       	push   0xc001af60
c00066ae:	6a 01                	push   0x1
c00066b0:	53                   	push   ebx
c00066b1:	e8 86 ff ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c00066b6:	83 c4 20             	add    esp,0x20
c00066b9:	6a 00                	push   0x0
c00066bb:	68 6a af 01 c0       	push   0xc001af6a
c00066c0:	6a 02                	push   0x2
c00066c2:	53                   	push   ebx
c00066c3:	e8 74 ff ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c00066c8:	6a 00                	push   0x0
c00066ca:	68 74 af 01 c0       	push   0xc001af74
c00066cf:	6a 03                	push   0x3
c00066d1:	53                   	push   ebx
c00066d2:	e8 65 ff ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c00066d7:	83 c4 20             	add    esp,0x20
c00066da:	6a 00                	push   0x0
c00066dc:	68 7e af 01 c0       	push   0xc001af7e
c00066e1:	6a 04                	push   0x4
c00066e3:	53                   	push   ebx
c00066e4:	e8 53 ff ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c00066e9:	6a 00                	push   0x0
c00066eb:	68 88 af 01 c0       	push   0xc001af88
c00066f0:	6a 05                	push   0x5
c00066f2:	53                   	push   ebx
c00066f3:	e8 44 ff ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c00066f8:	83 c4 20             	add    esp,0x20
c00066fb:	6a 00                	push   0x0
c00066fd:	68 92 af 01 c0       	push   0xc001af92
c0006702:	6a 06                	push   0x6
c0006704:	53                   	push   ebx
c0006705:	e8 32 ff ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c000670a:	6a 00                	push   0x0
c000670c:	68 9c af 01 c0       	push   0xc001af9c
c0006711:	6a 07                	push   0x7
c0006713:	53                   	push   ebx
c0006714:	e8 23 ff ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c0006719:	83 c4 20             	add    esp,0x20
c000671c:	6a 00                	push   0x0
c000671e:	68 a6 af 01 c0       	push   0xc001afa6
c0006723:	6a 08                	push   0x8
c0006725:	53                   	push   ebx
c0006726:	e8 11 ff ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c000672b:	6a 00                	push   0x0
c000672d:	68 ae af 01 c0       	push   0xc001afae
c0006732:	6a 09                	push   0x9
c0006734:	53                   	push   ebx
c0006735:	e8 02 ff ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c000673a:	83 c4 20             	add    esp,0x20
c000673d:	6a 00                	push   0x0
c000673f:	68 b8 af 01 c0       	push   0xc001afb8
c0006744:	6a 0a                	push   0xa
c0006746:	53                   	push   ebx
c0006747:	e8 f0 fe ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c000674c:	6a 00                	push   0x0
c000674e:	68 c0 af 01 c0       	push   0xc001afc0
c0006753:	6a 0b                	push   0xb
c0006755:	53                   	push   ebx
c0006756:	e8 e1 fe ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c000675b:	83 c4 20             	add    esp,0x20
c000675e:	6a 00                	push   0x0
c0006760:	68 c8 af 01 c0       	push   0xc001afc8
c0006765:	6a 0c                	push   0xc
c0006767:	53                   	push   ebx
c0006768:	e8 cf fe ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c000676d:	6a 00                	push   0x0
c000676f:	68 d0 af 01 c0       	push   0xc001afd0
c0006774:	6a 0d                	push   0xd
c0006776:	53                   	push   ebx
c0006777:	e8 c0 fe ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c000677c:	83 c4 20             	add    esp,0x20
c000677f:	6a 00                	push   0x0
c0006781:	68 d8 af 01 c0       	push   0xc001afd8
c0006786:	6a 0e                	push   0xe
c0006788:	53                   	push   ebx
c0006789:	e8 ae fe ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c000678e:	6a 00                	push   0x0
c0006790:	68 e0 af 01 c0       	push   0xc001afe0
c0006795:	6a 0f                	push   0xf
c0006797:	53                   	push   ebx
c0006798:	e8 9f fe ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c000679d:	83 c4 20             	add    esp,0x20
c00067a0:	6a 00                	push   0x0
c00067a2:	68 ea af 01 c0       	push   0xc001afea
c00067a7:	6a 10                	push   0x10
c00067a9:	53                   	push   ebx
c00067aa:	e8 8d fe ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c00067af:	6a 00                	push   0x0
c00067b1:	68 f4 af 01 c0       	push   0xc001aff4
c00067b6:	6a 11                	push   0x11
c00067b8:	53                   	push   ebx
c00067b9:	e8 7e fe ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c00067be:	83 c4 20             	add    esp,0x20
c00067c1:	6a 00                	push   0x0
c00067c3:	68 fe af 01 c0       	push   0xc001affe
c00067c8:	6a 12                	push   0x12
c00067ca:	53                   	push   ebx
c00067cb:	e8 6c fe ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c00067d0:	6a 01                	push   0x1
c00067d2:	68 98 b0 01 c0       	push   0xc001b098
c00067d7:	6a 60                	push   0x60
c00067d9:	53                   	push   ebx
c00067da:	e8 5d fe ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c00067df:	83 c4 20             	add    esp,0x20
c00067e2:	6a 00                	push   0x0
c00067e4:	68 9f b0 01 c0       	push   0xc001b09f
c00067e9:	6a 20                	push   0x20
c00067eb:	53                   	push   ebx
c00067ec:	e8 4b fe ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c00067f1:	6a 00                	push   0x0
c00067f3:	68 8a b0 01 c0       	push   0xc001b08a
c00067f8:	6a 21                	push   0x21
c00067fa:	53                   	push   ebx
c00067fb:	e8 3c fe ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c0006800:	83 c4 20             	add    esp,0x20
c0006803:	6a 00                	push   0x0
c0006805:	68 91 b0 01 c0       	push   0xc001b091
c000680a:	6a 22                	push   0x22
c000680c:	53                   	push   ebx
c000680d:	e8 2a fe ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c0006812:	6a 00                	push   0x0
c0006814:	68 08 b0 01 c0       	push   0xc001b008
c0006819:	6a 23                	push   0x23
c000681b:	53                   	push   ebx
c000681c:	e8 1b fe ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c0006821:	83 c4 20             	add    esp,0x20
c0006824:	6a 00                	push   0x0
c0006826:	68 12 b0 01 c0       	push   0xc001b012
c000682b:	6a 24                	push   0x24
c000682d:	53                   	push   ebx
c000682e:	e8 09 fe ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c0006833:	6a 00                	push   0x0
c0006835:	68 1c b0 01 c0       	push   0xc001b01c
c000683a:	6a 25                	push   0x25
c000683c:	53                   	push   ebx
c000683d:	e8 fa fd ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c0006842:	83 c4 20             	add    esp,0x20
c0006845:	6a 00                	push   0x0
c0006847:	68 26 b0 01 c0       	push   0xc001b026
c000684c:	6a 26                	push   0x26
c000684e:	53                   	push   ebx
c000684f:	e8 e8 fd ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c0006854:	6a 00                	push   0x0
c0006856:	68 30 b0 01 c0       	push   0xc001b030
c000685b:	6a 27                	push   0x27
c000685d:	53                   	push   ebx
c000685e:	e8 d9 fd ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c0006863:	83 c4 20             	add    esp,0x20
c0006866:	6a 00                	push   0x0
c0006868:	68 3a b0 01 c0       	push   0xc001b03a
c000686d:	6a 28                	push   0x28
c000686f:	53                   	push   ebx
c0006870:	e8 c7 fd ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c0006875:	6a 00                	push   0x0
c0006877:	68 44 b0 01 c0       	push   0xc001b044
c000687c:	6a 29                	push   0x29
c000687e:	53                   	push   ebx
c000687f:	e8 b8 fd ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c0006884:	83 c4 20             	add    esp,0x20
c0006887:	6a 00                	push   0x0
c0006889:	68 4e b0 01 c0       	push   0xc001b04e
c000688e:	6a 2a                	push   0x2a
c0006890:	53                   	push   ebx
c0006891:	e8 a6 fd ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c0006896:	6a 00                	push   0x0
c0006898:	68 58 b0 01 c0       	push   0xc001b058
c000689d:	6a 2b                	push   0x2b
c000689f:	53                   	push   ebx
c00068a0:	e8 97 fd ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c00068a5:	83 c4 20             	add    esp,0x20
c00068a8:	6a 00                	push   0x0
c00068aa:	68 62 b0 01 c0       	push   0xc001b062
c00068af:	6a 2c                	push   0x2c
c00068b1:	53                   	push   ebx
c00068b2:	e8 85 fd ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c00068b7:	6a 00                	push   0x0
c00068b9:	68 6c b0 01 c0       	push   0xc001b06c
c00068be:	6a 2d                	push   0x2d
c00068c0:	53                   	push   ebx
c00068c1:	e8 76 fd ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c00068c6:	83 c4 20             	add    esp,0x20
c00068c9:	6a 00                	push   0x0
c00068cb:	68 76 b0 01 c0       	push   0xc001b076
c00068d0:	6a 2e                	push   0x2e
c00068d2:	53                   	push   ebx
c00068d3:	e8 64 fd ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c00068d8:	6a 00                	push   0x0
c00068da:	68 80 b0 01 c0       	push   0xc001b080
c00068df:	6a 2f                	push   0x2f
c00068e1:	53                   	push   ebx
c00068e2:	e8 55 fd ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c00068e7:	83 c4 20             	add    esp,0x20
c00068ea:	6a 00                	push   0x0
c00068ec:	68 d6 b0 01 c0       	push   0xc001b0d6
c00068f1:	6a 30                	push   0x30
c00068f3:	53                   	push   ebx
c00068f4:	e8 43 fd ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c00068f9:	6a 00                	push   0x0
c00068fb:	68 e0 b0 01 c0       	push   0xc001b0e0
c0006900:	6a 31                	push   0x31
c0006902:	53                   	push   ebx
c0006903:	e8 34 fd ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c0006908:	83 c4 20             	add    esp,0x20
c000690b:	6a 00                	push   0x0
c000690d:	68 ea b0 01 c0       	push   0xc001b0ea
c0006912:	6a 32                	push   0x32
c0006914:	53                   	push   ebx
c0006915:	e8 22 fd ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c000691a:	6a 00                	push   0x0
c000691c:	68 f4 b0 01 c0       	push   0xc001b0f4
c0006921:	6a 33                	push   0x33
c0006923:	53                   	push   ebx
c0006924:	e8 13 fd ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c0006929:	83 c4 20             	add    esp,0x20
c000692c:	6a 00                	push   0x0
c000692e:	68 fe b0 01 c0       	push   0xc001b0fe
c0006933:	6a 34                	push   0x34
c0006935:	53                   	push   ebx
c0006936:	e8 01 fd ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c000693b:	6a 00                	push   0x0
c000693d:	68 08 b1 01 c0       	push   0xc001b108
c0006942:	6a 35                	push   0x35
c0006944:	53                   	push   ebx
c0006945:	e8 f2 fc ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c000694a:	83 c4 20             	add    esp,0x20
c000694d:	6a 00                	push   0x0
c000694f:	68 12 b1 01 c0       	push   0xc001b112
c0006954:	6a 36                	push   0x36
c0006956:	53                   	push   ebx
c0006957:	e8 e0 fc ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c000695c:	6a 00                	push   0x0
c000695e:	68 1c b1 01 c0       	push   0xc001b11c
c0006963:	6a 37                	push   0x37
c0006965:	53                   	push   ebx
c0006966:	e8 d1 fc ff ff       	call   c000663c <IDT::addEntry(int, void (*)(), bool)>
c000696b:	83 c4 1c             	add    esp,0x1c
c000696e:	6a 03                	push   0x3
c0006970:	6a 02                	push   0x2
c0006972:	ff 35 f0 f2 01 c0    	push   DWORD PTR ds:0xc001f2f0
c0006978:	e8 75 24 00 00       	call   c0008df2 <VAS::allocatePages(int, int)>
c000697d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0006984:	89 c6                	mov    esi,eax
c0006986:	e8 92 01 00 00       	call   c0006b1d <malloc>
c000698b:	81 c6 00 20 00 00    	add    esi,0x2000
c0006991:	89 04 24             	mov    DWORD PTR [esp],eax
c0006994:	89 c7                	mov    edi,eax
c0006996:	e8 01 16 00 00       	call   c0007f9c <TSS::TSS()>
c000699b:	83 c4 0c             	add    esp,0xc
c000699e:	68 a6 af 01 c0       	push   0xc001afa6
c00069a3:	56                   	push   esi
c00069a4:	57                   	push   edi
c00069a5:	e8 36 16 00 00       	call   c0007fe0 <TSS::setup(unsigned long, unsigned long)>
c00069aa:	89 c6                	mov    esi,eax
c00069ac:	58                   	pop    eax
c00069ad:	5a                   	pop    edx
c00069ae:	6a 00                	push   0x0
c00069b0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069b4:	50                   	push   eax
c00069b5:	e8 d6 fb ff ff       	call   c0006590 <IDTEntry::IDTEntry(bool)>
c00069ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069be:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00069c3:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c00069ca:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c00069d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00069d4:	80 ce 05             	or     dh,0x5
c00069d7:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c00069da:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00069de:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069e2:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00069e5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00069e8:	e8 87 fc ff ff       	call   c0006674 <IDT::flush()>
c00069ed:	83 c4 20             	add    esp,0x20
c00069f0:	5b                   	pop    ebx
c00069f1:	5e                   	pop    esi
c00069f2:	5f                   	pop    edi
c00069f3:	c3                   	ret    

c00069f4 <sbrk>:
c00069f4:	55                   	push   ebp
c00069f5:	57                   	push   edi
c00069f6:	56                   	push   esi
c00069f7:	53                   	push   ebx
c00069f8:	83 ec 1c             	sub    esp,0x1c
c00069fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00069ff:	85 c0                	test   eax,eax
c0006a01:	74 5f                	je     c0006a62 <sbrk+0x6e>
c0006a03:	78 64                	js     c0006a69 <sbrk+0x75>
c0006a05:	8b 15 d4 e9 01 c0    	mov    edx,DWORD PTR ds:0xc001e9d4
c0006a0b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006a0f:	05 ff 0f 00 00       	add    eax,0xfff
c0006a14:	89 c5                	mov    ebp,eax
c0006a16:	78 69                	js     c0006a81 <sbrk+0x8d>
c0006a18:	c1 fd 0c             	sar    ebp,0xc
c0006a1b:	bb 00 00 00 00       	mov    ebx,0x0
c0006a20:	8b 35 f0 f2 01 c0    	mov    esi,DWORD PTR ds:0xc001f2f0
c0006a26:	8b 3d d4 e9 01 c0    	mov    edi,DWORD PTR ds:0xc001e9d4
c0006a2c:	e8 b9 04 00 00       	call   c0006eea <Phys::allocatePage()>
c0006a31:	68 01 04 00 00       	push   0x401
c0006a36:	57                   	push   edi
c0006a37:	50                   	push   eax
c0006a38:	56                   	push   esi
c0006a39:	e8 b0 22 00 00       	call   c0008cee <VAS::mapPage(unsigned long, unsigned long, int)>
c0006a3e:	81 05 d4 e9 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001e9d4,0x1000
c0006a48:	43                   	inc    ebx
c0006a49:	83 c4 10             	add    esp,0x10
c0006a4c:	39 dd                	cmp    ebp,ebx
c0006a4e:	75 d0                	jne    c0006a20 <sbrk+0x2c>
c0006a50:	0f 20 d8             	mov    eax,cr3
c0006a53:	0f 22 d8             	mov    cr3,eax
c0006a56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a5a:	83 c4 1c             	add    esp,0x1c
c0006a5d:	5b                   	pop    ebx
c0006a5e:	5e                   	pop    esi
c0006a5f:	5f                   	pop    edi
c0006a60:	5d                   	pop    ebp
c0006a61:	c3                   	ret    
c0006a62:	a1 d4 e9 01 c0       	mov    eax,ds:0xc001e9d4
c0006a67:	eb f1                	jmp    c0006a5a <sbrk+0x66>
c0006a69:	83 ec 08             	sub    esp,0x8
c0006a6c:	50                   	push   eax
c0006a6d:	68 14 ca 01 c0       	push   0xc001ca14
c0006a72:	e8 35 2e 00 00       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c0006a77:	83 c4 10             	add    esp,0x10
c0006a7a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006a7f:	eb d9                	jmp    c0006a5a <sbrk+0x66>
c0006a81:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0006a87:	eb 8f                	jmp    c0006a18 <sbrk+0x24>

c0006a89 <mmap>:
c0006a89:	83 ec 18             	sub    esp,0x18
c0006a8c:	68 44 ca 01 c0       	push   0xc001ca44
c0006a91:	e8 65 89 00 00       	call   c000f3fb <Krnl::panic(char const*)>
c0006a96:	b8 00 00 00 00       	mov    eax,0x0
c0006a9b:	83 c4 1c             	add    esp,0x1c
c0006a9e:	c3                   	ret    

c0006a9f <munmap>:
c0006a9f:	83 ec 18             	sub    esp,0x18
c0006aa2:	68 49 ca 01 c0       	push   0xc001ca49
c0006aa7:	e8 4f 89 00 00       	call   c000f3fb <Krnl::panic(char const*)>
c0006aac:	b8 00 00 00 00       	mov    eax,0x0
c0006ab1:	83 c4 1c             	add    esp,0x1c
c0006ab4:	c3                   	ret    

c0006ab5 <liballoc_lock()>:
c0006ab5:	fa                   	cli    
c0006ab6:	ff 05 c8 26 02 c0    	inc    DWORD PTR ds:0xc00226c8
c0006abc:	b8 00 00 00 00       	mov    eax,0x0
c0006ac1:	c3                   	ret    

c0006ac2 <liballoc_unlock()>:
c0006ac2:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c0006ac7:	48                   	dec    eax
c0006ac8:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c0006acd:	75 01                	jne    c0006ad0 <liballoc_unlock()+0xe>
c0006acf:	fb                   	sti    
c0006ad0:	b8 00 00 00 00       	mov    eax,0x0
c0006ad5:	c3                   	ret    

c0006ad6 <liballoc_alloc(int)>:
c0006ad6:	83 ec 10             	sub    esp,0x10
c0006ad9:	6a 01                	push   0x1
c0006adb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0006adf:	ff 35 f0 f2 01 c0    	push   DWORD PTR ds:0xc001f2f0
c0006ae5:	e8 08 23 00 00       	call   c0008df2 <VAS::allocatePages(int, int)>
c0006aea:	83 c4 1c             	add    esp,0x1c
c0006aed:	c3                   	ret    

c0006aee <liballoc_free(void*, int)>:
c0006aee:	83 ec 14             	sub    esp,0x14
c0006af1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0006af5:	ff 35 f0 f2 01 c0    	push   DWORD PTR ds:0xc001f2f0
c0006afb:	e8 ae 1f 00 00       	call   c0008aae <VAS::freeAllocatedPages(unsigned long)>
c0006b00:	b8 00 00 00 00       	mov    eax,0x0
c0006b05:	83 c4 1c             	add    esp,0x1c
c0006b08:	c3                   	ret    

c0006b09 <realloc>:
c0006b09:	83 ec 14             	sub    esp,0x14
c0006b0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006b10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006b14:	e8 38 aa ff ff       	call   c0001551 <dlrealloc>
c0006b19:	83 c4 1c             	add    esp,0x1c
c0006b1c:	c3                   	ret    

c0006b1d <malloc>:
c0006b1d:	83 ec 18             	sub    esp,0x18
c0006b20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006b24:	e8 eb a4 ff ff       	call   c0001014 <dlmalloc>
c0006b29:	83 c4 1c             	add    esp,0x1c
c0006b2c:	c3                   	ret    

c0006b2d <free>:
c0006b2d:	83 ec 18             	sub    esp,0x18
c0006b30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006b34:	e8 80 a1 ff ff       	call   c0000cb9 <dlfree>
c0006b39:	83 c4 1c             	add    esp,0x1c
c0006b3c:	c3                   	ret    

c0006b3d <rfree>:
c0006b3d:	83 ec 18             	sub    esp,0x18
c0006b40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006b44:	e8 70 a1 ff ff       	call   c0000cb9 <dlfree>
c0006b49:	83 c4 1c             	add    esp,0x1c
c0006b4c:	c3                   	ret    

c0006b4d <calloc>:
c0006b4d:	56                   	push   esi
c0006b4e:	53                   	push   ebx
c0006b4f:	83 ec 10             	sub    esp,0x10
c0006b52:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006b56:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0006b5b:	53                   	push   ebx
c0006b5c:	e8 bc ff ff ff       	call   c0006b1d <malloc>
c0006b61:	89 c6                	mov    esi,eax
c0006b63:	83 c4 0c             	add    esp,0xc
c0006b66:	53                   	push   ebx
c0006b67:	6a 00                	push   0x0
c0006b69:	50                   	push   eax
c0006b6a:	e8 81 99 ff ff       	call   c00004f0 <memset>
c0006b6f:	89 f0                	mov    eax,esi
c0006b71:	83 c4 14             	add    esp,0x14
c0006b74:	5b                   	pop    ebx
c0006b75:	5e                   	pop    esi
c0006b76:	c3                   	ret    

c0006b77 <Krnl::setBootMessage(char const*)>:
c0006b77:	57                   	push   edi
c0006b78:	56                   	push   esi
c0006b79:	53                   	push   ebx
c0006b7a:	81 ec a4 00 00 00    	sub    esp,0xa4
c0006b80:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0006b87:	68 9e 00 00 00       	push   0x9e
c0006b8c:	6a 00                	push   0x0
c0006b8e:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0006b92:	56                   	push   esi
c0006b93:	e8 58 99 ff ff       	call   c00004f0 <memset>
c0006b98:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006b9b:	e8 c0 99 ff ff       	call   c0000560 <strlen>
c0006ba0:	ba 50 00 00 00       	mov    edx,0x50
c0006ba5:	83 c4 10             	add    esp,0x10
c0006ba8:	29 c2                	sub    edx,eax
c0006baa:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0006bae:	d1 ea                	shr    edx,1
c0006bb0:	84 c0                	test   al,al
c0006bb2:	74 19                	je     c0006bcd <Krnl::setBootMessage(char const*)+0x56>
c0006bb4:	01 d2                	add    edx,edx
c0006bb6:	43                   	inc    ebx
c0006bb7:	01 f2                	add    edx,esi
c0006bb9:	80 cc 0f             	or     ah,0xf
c0006bbc:	83 c2 02             	add    edx,0x2
c0006bbf:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0006bc3:	43                   	inc    ebx
c0006bc4:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0006bc9:	84 c0                	test   al,al
c0006bcb:	75 ec                	jne    c0006bb9 <Krnl::setBootMessage(char const*)+0x42>
c0006bcd:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0006bd2:	b9 9e 00 00 00       	mov    ecx,0x9e
c0006bd7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006bd9:	81 c4 a0 00 00 00    	add    esp,0xa0
c0006bdf:	5b                   	pop    ebx
c0006be0:	5e                   	pop    esi
c0006be1:	5f                   	pop    edi
c0006be2:	c3                   	ret    

c0006be3 <kernel_main>:
c0006be3:	55                   	push   ebp
c0006be4:	57                   	push   edi
c0006be5:	bf f9 03 00 00       	mov    edi,0x3f9
c0006bea:	56                   	push   esi
c0006beb:	89 fa                	mov    edx,edi
c0006bed:	53                   	push   ebx
c0006bee:	31 f6                	xor    esi,esi
c0006bf0:	83 ec 38             	sub    esp,0x38
c0006bf3:	a1 00 05 00 00       	mov    eax,ds:0x500
c0006bf8:	a3 20 f2 01 c0       	mov    ds:0xc001f220,eax
c0006bfd:	89 f0                	mov    eax,esi
c0006bff:	ee                   	out    dx,al
c0006c00:	bb fb 03 00 00       	mov    ebx,0x3fb
c0006c05:	b0 80                	mov    al,0x80
c0006c07:	89 da                	mov    edx,ebx
c0006c09:	ee                   	out    dx,al
c0006c0a:	b1 03                	mov    cl,0x3
c0006c0c:	ba f8 03 00 00       	mov    edx,0x3f8
c0006c11:	88 c8                	mov    al,cl
c0006c13:	ee                   	out    dx,al
c0006c14:	89 f0                	mov    eax,esi
c0006c16:	89 fa                	mov    edx,edi
c0006c18:	ee                   	out    dx,al
c0006c19:	88 c8                	mov    al,cl
c0006c1b:	89 da                	mov    edx,ebx
c0006c1d:	ee                   	out    dx,al
c0006c1e:	b0 c7                	mov    al,0xc7
c0006c20:	ba fa 03 00 00       	mov    edx,0x3fa
c0006c25:	ee                   	out    dx,al
c0006c26:	b0 0b                	mov    al,0xb
c0006c28:	ba fc 03 00 00       	mov    edx,0x3fc
c0006c2d:	ee                   	out    dx,al
c0006c2e:	68 50 ca 01 c0       	push   0xc001ca50
c0006c33:	e8 74 2c 00 00       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c0006c38:	0f be 05 e0 e9 01 c0 	movsx  eax,BYTE PTR ds:0xc001e9e0
c0006c3f:	83 c4 10             	add    esp,0x10
c0006c42:	84 c0                	test   al,al
c0006c44:	74 5c                	je     c0006ca2 <kernel_main+0xbf>
c0006c46:	31 db                	xor    ebx,ebx
c0006c48:	bd 0a 00 00 00       	mov    ebp,0xa
c0006c4d:	bf 05 00 00 00       	mov    edi,0x5
c0006c52:	31 f6                	xor    esi,esi
c0006c54:	eb 14                	jmp    c0006c6a <kernel_main+0x87>
c0006c56:	47                   	inc    edi
c0006c57:	bd 0a 00 00 00       	mov    ebp,0xa
c0006c5c:	31 f6                	xor    esi,esi
c0006c5e:	43                   	inc    ebx
c0006c5f:	0f be 83 e0 e9 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe1620]
c0006c66:	84 c0                	test   al,al
c0006c68:	74 38                	je     c0006ca2 <kernel_main+0xbf>
c0006c6a:	80 be 16 ea 01 c0 db 	cmp    BYTE PTR [esi-0x3ffe15ea],0xdb
c0006c71:	0f 84 97 00 00 00    	je     c0006d0e <kernel_main+0x12b>
c0006c77:	3c 0d                	cmp    al,0xd
c0006c79:	74 e3                	je     c0006c5e <kernel_main+0x7b>
c0006c7b:	3c 0a                	cmp    al,0xa
c0006c7d:	74 d7                	je     c0006c56 <kernel_main+0x73>
c0006c7f:	83 ec 0c             	sub    esp,0xc
c0006c82:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0006c86:	57                   	push   edi
c0006c87:	43                   	inc    ebx
c0006c88:	52                   	push   edx
c0006c89:	46                   	inc    esi
c0006c8a:	6a 00                	push   0x0
c0006c8c:	6a 0e                	push   0xe
c0006c8e:	50                   	push   eax
c0006c8f:	e8 c4 e4 00 00       	call   c0015158 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0006c94:	83 c4 20             	add    esp,0x20
c0006c97:	0f be 83 e0 e9 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe1620]
c0006c9e:	84 c0                	test   al,al
c0006ca0:	75 c8                	jne    c0006c6a <kernel_main+0x87>
c0006ca2:	83 ec 0c             	sub    esp,0xc
c0006ca5:	a1 24 05 00 00       	mov    eax,ds:0x524
c0006caa:	05 ff 0f 00 00       	add    eax,0xfff
c0006caf:	25 00 f0 ff ff       	and    eax,0xfffff000
c0006cb4:	50                   	push   eax
c0006cb5:	e8 82 03 00 00       	call   c000703c <Phys::physicalMemorySetup(unsigned int)>
c0006cba:	e8 59 1b 00 00       	call   c0008818 <Virt::virtualMemorySetup()>
c0006cbf:	58                   	pop    eax
c0006cc0:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0006cc4:	53                   	push   ebx
c0006cc5:	e8 0a 1c 00 00       	call   c00088d4 <VAS::VAS()>
c0006cca:	89 1d f0 f2 01 c0    	mov    DWORD PTR ds:0xc001f2f0,ebx
c0006cd0:	e8 4b 93 ff ff       	call   c0000020 <callGlobalConstructors>
c0006cd5:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0006cdc:	e8 3c fe ff ff       	call   c0006b1d <malloc>
c0006ce1:	89 04 24             	mov    DWORD PTR [esp],eax
c0006ce4:	89 c6                	mov    esi,eax
c0006ce6:	e8 af f1 ff ff       	call   c0005e9a <Computer::Computer()>
c0006ceb:	6a 00                	push   0x0
c0006ced:	89 35 08 f2 01 c0    	mov    DWORD PTR ds:0xc001f208,esi
c0006cf3:	6a 00                	push   0x0
c0006cf5:	6a 00                	push   0x0
c0006cf7:	56                   	push   esi
c0006cf8:	e8 43 f5 ff ff       	call   c0006240 <Computer::open(int, int, void*)>
c0006cfd:	83 c4 14             	add    esp,0x14
c0006d00:	53                   	push   ebx
c0006d01:	e8 84 1e 00 00       	call   c0008b8a <VAS::~VAS()>
c0006d06:	83 c4 3c             	add    esp,0x3c
c0006d09:	5b                   	pop    ebx
c0006d0a:	5e                   	pop    esi
c0006d0b:	5f                   	pop    edi
c0006d0c:	5d                   	pop    ebp
c0006d0d:	c3                   	ret    
c0006d0e:	31 d2                	xor    edx,edx
c0006d10:	8a 96 15 ea 01 c0    	mov    dl,BYTE PTR [esi-0x3ffe15eb]
c0006d16:	83 e2 fe             	and    edx,0xfffffffe
c0006d19:	81 fa ba 00 00 00    	cmp    edx,0xba
c0006d1f:	0f 85 52 ff ff ff    	jne    c0006c77 <kernel_main+0x94>
c0006d25:	45                   	inc    ebp
c0006d26:	e9 4c ff ff ff       	jmp    c0006c77 <kernel_main+0x94>

c0006d2b <Phys::allocateDMA(unsigned long)>:
c0006d2b:	55                   	push   ebp
c0006d2c:	31 ed                	xor    ebp,ebp
c0006d2e:	57                   	push   edi
c0006d2f:	56                   	push   esi
c0006d30:	53                   	push   ebx
c0006d31:	31 db                	xor    ebx,ebx
c0006d33:	83 ec 1c             	sub    esp,0x1c
c0006d36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0006d3a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0006d42:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0006d48:	31 c0                	xor    eax,eax
c0006d4a:	c1 ef 0c             	shr    edi,0xc
c0006d4d:	eb 19                	jmp    c0006d68 <Phys::allocateDMA(unsigned long)+0x3d>
c0006d4f:	85 c0                	test   eax,eax
c0006d51:	75 06                	jne    c0006d59 <Phys::allocateDMA(unsigned long)+0x2e>
c0006d53:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0006d57:	89 dd                	mov    ebp,ebx
c0006d59:	8d 70 01             	lea    esi,[eax+0x1]
c0006d5c:	39 f7                	cmp    edi,esi
c0006d5e:	74 33                	je     c0006d93 <Phys::allocateDMA(unsigned long)+0x68>
c0006d60:	89 f0                	mov    eax,esi
c0006d62:	43                   	inc    ebx
c0006d63:	83 fb 0f             	cmp    ebx,0xf
c0006d66:	7f 11                	jg     c0006d79 <Phys::allocateDMA(unsigned long)+0x4e>
c0006d68:	80 bb 3c f2 01 c0 00 	cmp    BYTE PTR [ebx-0x3ffe0dc4],0x0
c0006d6f:	74 de                	je     c0006d4f <Phys::allocateDMA(unsigned long)+0x24>
c0006d71:	31 c0                	xor    eax,eax
c0006d73:	43                   	inc    ebx
c0006d74:	83 fb 0f             	cmp    ebx,0xf
c0006d77:	7e ef                	jle    c0006d68 <Phys::allocateDMA(unsigned long)+0x3d>
c0006d79:	83 ec 0c             	sub    esp,0xc
c0006d7c:	68 68 ca 01 c0       	push   0xc001ca68
c0006d81:	e8 75 86 00 00       	call   c000f3fb <Krnl::panic(char const*)>
c0006d86:	83 c4 10             	add    esp,0x10
c0006d89:	31 c0                	xor    eax,eax
c0006d8b:	83 c4 1c             	add    esp,0x1c
c0006d8e:	5b                   	pop    ebx
c0006d8f:	5e                   	pop    esi
c0006d90:	5f                   	pop    edi
c0006d91:	5d                   	pop    ebp
c0006d92:	c3                   	ret    
c0006d93:	89 e9                	mov    ecx,ebp
c0006d95:	c1 f9 04             	sar    ecx,0x4
c0006d98:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006d9c:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0006da0:	89 ca                	mov    edx,ecx
c0006da2:	4a                   	dec    edx
c0006da3:	79 03                	jns    c0006da8 <Phys::allocateDMA(unsigned long)+0x7d>
c0006da5:	8d 51 0e             	lea    edx,[ecx+0xe]
c0006da8:	c1 fa 04             	sar    edx,0x4
c0006dab:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0006daf:	74 08                	je     c0006db9 <Phys::allocateDMA(unsigned long)+0x8e>
c0006db1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0006db5:	31 c0                	xor    eax,eax
c0006db7:	eb ba                	jmp    c0006d73 <Phys::allocateDMA(unsigned long)+0x48>
c0006db9:	85 f6                	test   esi,esi
c0006dbb:	74 15                	je     c0006dd2 <Phys::allocateDMA(unsigned long)+0xa7>
c0006dbd:	8d 95 3c f2 01 c0    	lea    edx,[ebp-0x3ffe0dc4]
c0006dc3:	8d 84 05 3d f2 01 c0 	lea    eax,[ebp+eax*1-0x3ffe0dc3]
c0006dca:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0006dcd:	42                   	inc    edx
c0006dce:	39 d0                	cmp    eax,edx
c0006dd0:	75 f8                	jne    c0006dca <Phys::allocateDMA(unsigned long)+0x9f>
c0006dd2:	01 3d 34 f2 01 c0    	add    DWORD PTR ds:0xc001f234,edi
c0006dd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ddc:	85 c0                	test   eax,eax
c0006dde:	74 17                	je     c0006df7 <Phys::allocateDMA(unsigned long)+0xcc>
c0006de0:	83 ec 0c             	sub    esp,0xc
c0006de3:	68 68 ca 01 c0       	push   0xc001ca68
c0006de8:	e8 0e 86 00 00       	call   c000f3fb <Krnl::panic(char const*)>
c0006ded:	83 c4 10             	add    esp,0x10
c0006df0:	89 f0                	mov    eax,esi
c0006df2:	e9 6b ff ff ff       	jmp    c0006d62 <Phys::allocateDMA(unsigned long)+0x37>
c0006df7:	c1 e5 0c             	shl    ebp,0xc
c0006dfa:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0006e00:	eb 89                	jmp    c0006d8b <Phys::allocateDMA(unsigned long)+0x60>

c0006e02 <Phys::freeDMA(unsigned long, unsigned long)>:
c0006e02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e06:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0006e0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e10:	c1 ea 0c             	shr    edx,0xc
c0006e13:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0006e18:	29 15 34 f2 01 c0    	sub    DWORD PTR ds:0xc001f234,edx
c0006e1e:	c1 e8 0c             	shr    eax,0xc
c0006e21:	85 d2                	test   edx,edx
c0006e23:	74 0f                	je     c0006e34 <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0006e25:	05 3c f2 01 c0       	add    eax,0xc001f23c
c0006e2a:	01 c2                	add    edx,eax
c0006e2c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e2f:	40                   	inc    eax
c0006e30:	39 d0                	cmp    eax,edx
c0006e32:	75 f8                	jne    c0006e2c <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0006e34:	c3                   	ret    

c0006e35 <Phys::setPageState(unsigned long, bool)>:
c0006e35:	56                   	push   esi
c0006e36:	ba 01 00 00 00       	mov    edx,0x1
c0006e3b:	53                   	push   ebx
c0006e3c:	8b 35 24 eb 01 c0    	mov    esi,DWORD PTR ds:0xc001eb24
c0006e42:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006e46:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006e4a:	89 c8                	mov    eax,ecx
c0006e4c:	83 e1 07             	and    ecx,0x7
c0006e4f:	c1 e8 03             	shr    eax,0x3
c0006e52:	d3 e3                	shl    ebx,cl
c0006e54:	01 c6                	add    esi,eax
c0006e56:	d3 e2                	shl    edx,cl
c0006e58:	f7 d2                	not    edx
c0006e5a:	20 16                	and    BYTE PTR [esi],dl
c0006e5c:	03 05 24 eb 01 c0    	add    eax,DWORD PTR ds:0xc001eb24
c0006e62:	08 18                	or     BYTE PTR [eax],bl
c0006e64:	5b                   	pop    ebx
c0006e65:	5e                   	pop    esi
c0006e66:	c3                   	ret    

c0006e67 <Phys::getPageState(unsigned long)>:
c0006e67:	53                   	push   ebx
c0006e68:	8b 15 24 eb 01 c0    	mov    edx,DWORD PTR ds:0xc001eb24
c0006e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006e72:	31 db                	xor    ebx,ebx
c0006e74:	89 c8                	mov    eax,ecx
c0006e76:	83 e1 07             	and    ecx,0x7
c0006e79:	c1 e8 03             	shr    eax,0x3
c0006e7c:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0006e7f:	89 d8                	mov    eax,ebx
c0006e81:	5b                   	pop    ebx
c0006e82:	d3 f8                	sar    eax,cl
c0006e84:	83 e0 01             	and    eax,0x1
c0006e87:	c3                   	ret    

c0006e88 <Phys::freePage(unsigned long)>:
c0006e88:	53                   	push   ebx
c0006e89:	83 ec 08             	sub    esp,0x8
c0006e8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e90:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0006e96:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0006e9c:	76 3a                	jbe    c0006ed8 <Phys::freePage(unsigned long)+0x50>
c0006e9e:	c1 e8 0c             	shr    eax,0xc
c0006ea1:	50                   	push   eax
c0006ea2:	89 c3                	mov    ebx,eax
c0006ea4:	e8 be ff ff ff       	call   c0006e67 <Phys::getPageState(unsigned long)>
c0006ea9:	5a                   	pop    edx
c0006eaa:	84 c0                	test   al,al
c0006eac:	74 19                	je     c0006ec7 <Phys::freePage(unsigned long)+0x3f>
c0006eae:	83 ec 08             	sub    esp,0x8
c0006eb1:	ff 0d 34 f2 01 c0    	dec    DWORD PTR ds:0xc001f234
c0006eb7:	6a 00                	push   0x0
c0006eb9:	53                   	push   ebx
c0006eba:	e8 76 ff ff ff       	call   c0006e35 <Phys::setPageState(unsigned long, bool)>
c0006ebf:	83 c4 10             	add    esp,0x10
c0006ec2:	83 c4 08             	add    esp,0x8
c0006ec5:	5b                   	pop    ebx
c0006ec6:	c3                   	ret    
c0006ec7:	c7 44 24 10 0d cb 01 c0 	mov    DWORD PTR [esp+0x10],0xc001cb0d
c0006ecf:	83 c4 08             	add    esp,0x8
c0006ed2:	5b                   	pop    ebx
c0006ed3:	e9 23 85 00 00       	jmp    c000f3fb <Krnl::panic(char const*)>
c0006ed8:	68 00 10 00 00       	push   0x1000
c0006edd:	50                   	push   eax
c0006ede:	e8 1f ff ff ff       	call   c0006e02 <Phys::freeDMA(unsigned long, unsigned long)>
c0006ee3:	59                   	pop    ecx
c0006ee4:	5b                   	pop    ebx
c0006ee5:	83 c4 08             	add    esp,0x8
c0006ee8:	5b                   	pop    ebx
c0006ee9:	c3                   	ret    

c0006eea <Phys::allocatePage()>:
c0006eea:	56                   	push   esi
c0006eeb:	53                   	push   ebx
c0006eec:	83 ec 14             	sub    esp,0x14
c0006eef:	8b 35 28 f2 01 c0    	mov    esi,DWORD PTR ds:0xc001f228
c0006ef5:	89 f3                	mov    ebx,esi
c0006ef7:	eb 0a                	jmp    c0006f03 <Phys::allocatePage()+0x19>
c0006ef9:	89 1d 28 f2 01 c0    	mov    DWORD PTR ds:0xc001f228,ebx
c0006eff:	39 de                	cmp    esi,ebx
c0006f01:	74 24                	je     c0006f27 <Phys::allocatePage()+0x3d>
c0006f03:	53                   	push   ebx
c0006f04:	e8 5e ff ff ff       	call   c0006e67 <Phys::getPageState(unsigned long)>
c0006f09:	5a                   	pop    edx
c0006f0a:	84 c0                	test   al,al
c0006f0c:	74 5f                	je     c0006f6d <Phys::allocatePage()+0x83>
c0006f0e:	43                   	inc    ebx
c0006f0f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0006f15:	75 e2                	jne    c0006ef9 <Phys::allocatePage()+0xf>
c0006f17:	31 db                	xor    ebx,ebx
c0006f19:	c7 05 28 f2 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001f228,0x0
c0006f23:	39 de                	cmp    esi,ebx
c0006f25:	75 dc                	jne    c0006f03 <Phys::allocatePage()+0x19>
c0006f27:	83 ec 0c             	sub    esp,0xc
c0006f2a:	80 35 4c f2 01 c0 01 	xor    BYTE PTR ds:0xc001f24c,0x1
c0006f31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0006f36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0006f39:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0006f3f:	50                   	push   eax
c0006f40:	e8 87 26 00 00       	call   c00095cc <VAS::scanForEviction()>
c0006f45:	83 c4 10             	add    esp,0x10
c0006f48:	85 c0                	test   eax,eax
c0006f4a:	75 3f                	jne    c0006f8b <Phys::allocatePage()+0xa1>
c0006f4c:	83 ec 0c             	sub    esp,0xc
c0006f4f:	68 90 ca 01 c0       	push   0xc001ca90
c0006f54:	e8 a2 84 00 00       	call   c000f3fb <Krnl::panic(char const*)>
c0006f59:	83 c4 10             	add    esp,0x10
c0006f5c:	8b 1d 28 f2 01 c0    	mov    ebx,DWORD PTR ds:0xc001f228
c0006f62:	53                   	push   ebx
c0006f63:	e8 ff fe ff ff       	call   c0006e67 <Phys::getPageState(unsigned long)>
c0006f68:	5a                   	pop    edx
c0006f69:	84 c0                	test   al,al
c0006f6b:	75 a1                	jne    c0006f0e <Phys::allocatePage()+0x24>
c0006f6d:	6a 01                	push   0x1
c0006f6f:	53                   	push   ebx
c0006f70:	e8 c0 fe ff ff       	call   c0006e35 <Phys::setPageState(unsigned long, bool)>
c0006f75:	a1 28 f2 01 c0       	mov    eax,ds:0xc001f228
c0006f7a:	5a                   	pop    edx
c0006f7b:	ff 05 34 f2 01 c0    	inc    DWORD PTR ds:0xc001f234
c0006f81:	c1 e0 0c             	shl    eax,0xc
c0006f84:	59                   	pop    ecx
c0006f85:	83 c4 14             	add    esp,0x14
c0006f88:	5b                   	pop    ebx
c0006f89:	5e                   	pop    esi
c0006f8a:	c3                   	ret    
c0006f8b:	83 ec 08             	sub    esp,0x8
c0006f8e:	89 c2                	mov    edx,eax
c0006f90:	6a 01                	push   0x1
c0006f92:	c1 ea 0c             	shr    edx,0xc
c0006f95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006f99:	52                   	push   edx
c0006f9a:	e8 96 fe ff ff       	call   c0006e35 <Phys::setPageState(unsigned long, bool)>
c0006f9f:	83 c4 10             	add    esp,0x10
c0006fa2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006fa6:	eb dd                	jmp    c0006f85 <Phys::allocatePage()+0x9b>

c0006fa8 <Phys::allocateContiguousPages(int)>:
c0006fa8:	57                   	push   edi
c0006fa9:	56                   	push   esi
c0006faa:	53                   	push   ebx
c0006fab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0006faf:	fa                   	cli    
c0006fb0:	ff 05 c8 26 02 c0    	inc    DWORD PTR ds:0xc00226c8
c0006fb6:	31 db                	xor    ebx,ebx
c0006fb8:	85 db                	test   ebx,ebx
c0006fba:	75 11                	jne    c0006fcd <Phys::allocateContiguousPages(int)+0x25>
c0006fbc:	e8 29 ff ff ff       	call   c0006eea <Phys::allocatePage()>
c0006fc1:	83 fe 01             	cmp    esi,0x1
c0006fc4:	89 c7                	mov    edi,eax
c0006fc6:	74 21                	je     c0006fe9 <Phys::allocateContiguousPages(int)+0x41>
c0006fc8:	bb 01 00 00 00       	mov    ebx,0x1
c0006fcd:	e8 18 ff ff ff       	call   c0006eea <Phys::allocatePage()>
c0006fd2:	89 da                	mov    edx,ebx
c0006fd4:	c1 e2 0c             	shl    edx,0xc
c0006fd7:	01 fa                	add    edx,edi
c0006fd9:	39 c2                	cmp    edx,eax
c0006fdb:	74 20                	je     c0006ffd <Phys::allocateContiguousPages(int)+0x55>
c0006fdd:	bb 01 00 00 00       	mov    ebx,0x1
c0006fe2:	89 c7                	mov    edi,eax
c0006fe4:	83 fe 01             	cmp    esi,0x1
c0006fe7:	75 e4                	jne    c0006fcd <Phys::allocateContiguousPages(int)+0x25>
c0006fe9:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c0006fee:	48                   	dec    eax
c0006fef:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c0006ff4:	75 01                	jne    c0006ff7 <Phys::allocateContiguousPages(int)+0x4f>
c0006ff6:	fb                   	sti    
c0006ff7:	89 f8                	mov    eax,edi
c0006ff9:	5b                   	pop    ebx
c0006ffa:	5e                   	pop    esi
c0006ffb:	5f                   	pop    edi
c0006ffc:	c3                   	ret    
c0006ffd:	43                   	inc    ebx
c0006ffe:	39 f3                	cmp    ebx,esi
c0007000:	75 b6                	jne    c0006fb8 <Phys::allocateContiguousPages(int)+0x10>
c0007002:	eb e5                	jmp    c0006fe9 <Phys::allocateContiguousPages(int)+0x41>

c0007004 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007004:	56                   	push   esi
c0007005:	53                   	push   ebx
c0007006:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000700a:	39 1d 2c f2 01 c0    	cmp    DWORD PTR ds:0xc001f22c,ebx
c0007010:	73 06                	jae    c0007018 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007012:	89 1d 2c f2 01 c0    	mov    DWORD PTR ds:0xc001f22c,ebx
c0007018:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000701c:	c1 eb 0c             	shr    ebx,0xc
c000701f:	c1 e8 0c             	shr    eax,0xc
c0007022:	39 d8                	cmp    eax,ebx
c0007024:	73 13                	jae    c0007039 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007026:	6a 00                	push   0x0
c0007028:	8d 70 01             	lea    esi,[eax+0x1]
c000702b:	50                   	push   eax
c000702c:	e8 04 fe ff ff       	call   c0006e35 <Phys::setPageState(unsigned long, bool)>
c0007031:	5a                   	pop    edx
c0007032:	89 f0                	mov    eax,esi
c0007034:	59                   	pop    ecx
c0007035:	39 f3                	cmp    ebx,esi
c0007037:	75 ed                	jne    c0007026 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007039:	5b                   	pop    ebx
c000703a:	5e                   	pop    esi
c000703b:	c3                   	ret    

c000703c <Phys::physicalMemorySetup(unsigned int)>:
c000703c:	55                   	push   ebp
c000703d:	57                   	push   edi
c000703e:	56                   	push   esi
c000703f:	53                   	push   ebx
c0007040:	31 db                	xor    ebx,ebx
c0007042:	83 ec 40             	sub    esp,0x40
c0007045:	6a 10                	push   0x10
c0007047:	6a 00                	push   0x0
c0007049:	68 3c f2 01 c0       	push   0xc001f23c
c000704e:	e8 9d 94 ff ff       	call   c00004f0 <memset>
c0007053:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007057:	25 00 f0 ff ff       	and    eax,0xfffff000
c000705c:	05 00 10 00 00       	add    eax,0x1000
c0007061:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007065:	5a                   	pop    edx
c0007066:	59                   	pop    ecx
c0007067:	50                   	push   eax
c0007068:	68 23 cb 01 c0       	push   0xc001cb23
c000706d:	e8 3a 28 00 00       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c0007072:	83 c4 10             	add    esp,0x10
c0007075:	83 ec 08             	sub    esp,0x8
c0007078:	6a 01                	push   0x1
c000707a:	53                   	push   ebx
c000707b:	43                   	inc    ebx
c000707c:	e8 b4 fd ff ff       	call   c0006e35 <Phys::setPageState(unsigned long, bool)>
c0007081:	83 c4 10             	add    esp,0x10
c0007084:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000708a:	75 e9                	jne    c0007075 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000708c:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007092:	66 85 c0             	test   ax,ax
c0007095:	0f 84 97 01 00 00    	je     c0007232 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000709b:	89 c7                	mov    edi,eax
c000709d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00070a5:	81 e7 ff ff 00 00    	and    edi,0xffff
c00070ab:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00070b0:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00070b4:	eb 15                	jmp    c00070cb <Phys::physicalMemorySetup(unsigned int)+0x8f>
c00070b6:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00070ba:	83 c3 18             	add    ebx,0x18
c00070bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00070c1:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00070c5:	0f 84 77 01 00 00    	je     c0007242 <Phys::physicalMemorySetup(unsigned int)+0x206>
c00070cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00070ce:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00070d1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00070d4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070d8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00070dc:	8b 33                	mov    esi,DWORD PTR [ebx]
c00070de:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00070e1:	01 f0                	add    eax,esi
c00070e3:	55                   	push   ebp
c00070e4:	11 fa                	adc    edx,edi
c00070e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070ea:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00070ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070f2:	50                   	push   eax
c00070f3:	56                   	push   esi
c00070f4:	68 c0 ca 01 c0       	push   0xc001cac0
c00070f9:	e8 ae 27 00 00       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c00070fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007102:	83 c4 10             	add    esp,0x10
c0007105:	09 f8                	or     eax,edi
c0007107:	0f 85 35 01 00 00    	jne    c0007242 <Phys::physicalMemorySetup(unsigned int)+0x206>
c000710d:	4d                   	dec    ebp
c000710e:	75 a6                	jne    c00070b6 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007110:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007114:	ba 00 00 08 00       	mov    edx,0x80000
c0007119:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000711d:	39 f2                	cmp    edx,esi
c000711f:	89 c1                	mov    ecx,eax
c0007121:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007129:	19 f9                	sbb    ecx,edi
c000712b:	0f 82 a7 00 00 00    	jb     c00071d8 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007131:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007135:	89 c1                	mov    ecx,eax
c0007137:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000713b:	0f 83 97 00 00 00    	jae    c00071d8 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007141:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007146:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000714a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000714e:	39 fa                	cmp    edx,edi
c0007150:	19 e8                	sbb    eax,ebp
c0007152:	0f 82 9a 01 00 00    	jb     c00072f2 <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007158:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000715c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007160:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007166:	ba ff 1f 00 00       	mov    edx,0x1fff
c000716b:	83 d5 ff             	adc    ebp,0xffffffff
c000716e:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007172:	31 c0                	xor    eax,eax
c0007174:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007178:	39 fa                	cmp    edx,edi
c000717a:	89 c1                	mov    ecx,eax
c000717c:	19 e9                	sbb    ecx,ebp
c000717e:	0f 83 32 ff ff ff    	jae    c00070b6 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007184:	be 00 00 08 00       	mov    esi,0x80000
c0007189:	51                   	push   ecx
c000718a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000718e:	57                   	push   edi
c000718f:	56                   	push   esi
c0007190:	68 e4 ca 01 c0       	push   0xc001cae4
c0007195:	e8 12 27 00 00       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c000719a:	5d                   	pop    ebp
c000719b:	58                   	pop    eax
c000719c:	57                   	push   edi
c000719d:	56                   	push   esi
c000719e:	e8 61 fe ff ff       	call   c0007004 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00071a3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00071a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00071ab:	83 c4 0c             	add    esp,0xc
c00071ae:	0f ac d0 0c          	shrd   eax,edx,0xc
c00071b2:	03 05 38 f2 01 c0    	add    eax,DWORD PTR ds:0xc001f238
c00071b8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00071bf:	a3 38 f2 01 c0       	mov    ds:0xc001f238,eax
c00071c4:	52                   	push   edx
c00071c5:	50                   	push   eax
c00071c6:	68 49 cb 01 c0       	push   0xc001cb49
c00071cb:	e8 dc 26 00 00       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c00071d0:	83 c4 10             	add    esp,0x10
c00071d3:	e9 de fe ff ff       	jmp    c00070b6 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c00071d8:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00071dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00071e0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00071e4:	39 ea                	cmp    edx,ebp
c00071e6:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00071ea:	0f 82 c6 fe ff ff    	jb     c00070b6 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c00071f0:	ba ff 1f 00 00       	mov    edx,0x1fff
c00071f5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00071f9:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00071fd:	0f 83 b3 fe ff ff    	jae    c00070b6 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007203:	39 ee                	cmp    esi,ebp
c0007205:	89 f8                	mov    eax,edi
c0007207:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000720b:	0f 83 78 ff ff ff    	jae    c0007189 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007211:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007215:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007219:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000721d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007221:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007225:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007229:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000722d:	e9 57 ff ff ff       	jmp    c0007189 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007232:	83 ec 0c             	sub    esp,0xc
c0007235:	68 3b cb 01 c0       	push   0xc001cb3b
c000723a:	e8 bc 81 00 00       	call   c000f3fb <Krnl::panic(char const*)>
c000723f:	83 c4 10             	add    esp,0x10
c0007242:	83 ec 08             	sub    esp,0x8
c0007245:	bb 60 00 00 00       	mov    ebx,0x60
c000724a:	6a 00                	push   0x0
c000724c:	6a 06                	push   0x6
c000724e:	e8 e2 fb ff ff       	call   c0006e35 <Phys::setPageState(unsigned long, bool)>
c0007253:	58                   	pop    eax
c0007254:	5a                   	pop    edx
c0007255:	6a 00                	push   0x0
c0007257:	6a 07                	push   0x7
c0007259:	e8 d7 fb ff ff       	call   c0006e35 <Phys::setPageState(unsigned long, bool)>
c000725e:	83 05 38 f2 01 c0 02 	add    DWORD PTR ds:0xc001f238,0x2
c0007265:	83 c4 10             	add    esp,0x10
c0007268:	83 ec 08             	sub    esp,0x8
c000726b:	6a 00                	push   0x0
c000726d:	53                   	push   ebx
c000726e:	43                   	inc    ebx
c000726f:	e8 c1 fb ff ff       	call   c0006e35 <Phys::setPageState(unsigned long, bool)>
c0007274:	83 c4 10             	add    esp,0x10
c0007277:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000727d:	75 e9                	jne    c0007268 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c000727f:	a1 38 f2 01 c0       	mov    eax,ds:0xc001f238
c0007284:	bb 40 01 00 00       	mov    ebx,0x140
c0007289:	83 c0 20             	add    eax,0x20
c000728c:	a3 38 f2 01 c0       	mov    ds:0xc001f238,eax
c0007291:	eb 22                	jmp    c00072b5 <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007293:	83 ec 08             	sub    esp,0x8
c0007296:	6a 00                	push   0x0
c0007298:	53                   	push   ebx
c0007299:	43                   	inc    ebx
c000729a:	e8 96 fb ff ff       	call   c0006e35 <Phys::setPageState(unsigned long, bool)>
c000729f:	a1 38 f2 01 c0       	mov    eax,ds:0xc001f238
c00072a4:	83 c4 10             	add    esp,0x10
c00072a7:	40                   	inc    eax
c00072a8:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00072ae:	a3 38 f2 01 c0       	mov    ds:0xc001f238,eax
c00072b3:	74 07                	je     c00072bc <Phys::physicalMemorySetup(unsigned int)+0x280>
c00072b5:	3d ff 03 00 00       	cmp    eax,0x3ff
c00072ba:	7e d7                	jle    c0007293 <Phys::physicalMemorySetup(unsigned int)+0x257>
c00072bc:	bb d0 01 00 00       	mov    ebx,0x1d0
c00072c1:	3d ff 07 00 00       	cmp    eax,0x7ff
c00072c6:	7f 22                	jg     c00072ea <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c00072c8:	83 ec 08             	sub    esp,0x8
c00072cb:	6a 00                	push   0x0
c00072cd:	53                   	push   ebx
c00072ce:	43                   	inc    ebx
c00072cf:	e8 61 fb ff ff       	call   c0006e35 <Phys::setPageState(unsigned long, bool)>
c00072d4:	a1 38 f2 01 c0       	mov    eax,ds:0xc001f238
c00072d9:	83 c4 10             	add    esp,0x10
c00072dc:	40                   	inc    eax
c00072dd:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00072e3:	a3 38 f2 01 c0       	mov    ds:0xc001f238,eax
c00072e8:	75 d7                	jne    c00072c1 <Phys::physicalMemorySetup(unsigned int)+0x285>
c00072ea:	83 c4 3c             	add    esp,0x3c
c00072ed:	5b                   	pop    ebx
c00072ee:	5e                   	pop    esi
c00072ef:	5f                   	pop    edi
c00072f0:	5d                   	pop    ebp
c00072f1:	c3                   	ret    
c00072f2:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00072fa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007302:	e9 51 fe ff ff       	jmp    c0007158 <Phys::physicalMemorySetup(unsigned int)+0x11c>
c0007307:	90                   	nop

c0007308 <Pipe::isAtty()>:
c0007308:	31 c0                	xor    eax,eax
c000730a:	c3                   	ret    
c000730b:	90                   	nop

c000730c <Pipe::~Pipe()>:
c000730c:	83 ec 0c             	sub    esp,0xc
c000730f:	ba a8 cb 01 c0       	mov    edx,0xc001cba8
c0007314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007318:	89 10                	mov    DWORD PTR [eax],edx
c000731a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000731e:	83 ec 0c             	sub    esp,0xc
c0007321:	50                   	push   eax
c0007322:	e8 d1 10 00 00       	call   c00083f8 <UnixFile::~UnixFile()>
c0007327:	83 c4 10             	add    esp,0x10
c000732a:	90                   	nop
c000732b:	83 c4 0c             	add    esp,0xc
c000732e:	c3                   	ret    
c000732f:	90                   	nop

c0007330 <Pipe::~Pipe()>:
c0007330:	83 ec 0c             	sub    esp,0xc
c0007333:	83 ec 0c             	sub    esp,0xc
c0007336:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000733a:	e8 cd ff ff ff       	call   c000730c <Pipe::~Pipe()>
c000733f:	83 c4 10             	add    esp,0x10
c0007342:	83 ec 08             	sub    esp,0x8
c0007345:	6a 20                	push   0x20
c0007347:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000734b:	e8 66 24 00 00       	call   c00097b6 <operator delete(void*, unsigned long)>
c0007350:	83 c4 10             	add    esp,0x10
c0007353:	83 c4 0c             	add    esp,0xc
c0007356:	c3                   	ret    
c0007357:	90                   	nop

c0007358 <Pipe::write(unsigned long long, void*, int*)>:
c0007358:	55                   	push   ebp
c0007359:	57                   	push   edi
c000735a:	56                   	push   esi
c000735b:	53                   	push   ebx
c000735c:	83 ec 1c             	sub    esp,0x1c
c000735f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007363:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007367:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000736a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000736e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007371:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007375:	89 d8                	mov    eax,ebx
c0007377:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000737a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000737e:	89 d6                	mov    esi,edx
c0007380:	89 d7                	mov    edi,edx
c0007382:	c1 ff 1f             	sar    edi,0x1f
c0007385:	03 34 24             	add    esi,DWORD PTR [esp]
c0007388:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000738c:	c1 f8 1f             	sar    eax,0x1f
c000738f:	39 f3                	cmp    ebx,esi
c0007391:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007395:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007399:	19 f8                	sbb    eax,edi
c000739b:	b8 01 00 00 00       	mov    eax,0x1
c00073a0:	72 6e                	jb     c0007410 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00073a2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00073a5:	01 d0                	add    eax,edx
c00073a7:	99                   	cdq    
c00073a8:	f7 fb                	idiv   ebx
c00073aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073ae:	29 d3                	sub    ebx,edx
c00073b0:	89 d7                	mov    edi,edx
c00073b2:	89 de                	mov    esi,ebx
c00073b4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00073b7:	c1 fb 1f             	sar    ebx,0x1f
c00073ba:	39 f2                	cmp    edx,esi
c00073bc:	19 d8                	sbb    eax,ebx
c00073be:	b8 00 00 00 00       	mov    eax,0x0
c00073c3:	72 04                	jb     c00073c9 <Pipe::write(unsigned long long, void*, int*)+0x71>
c00073c5:	89 d0                	mov    eax,edx
c00073c7:	29 f0                	sub    eax,esi
c00073c9:	89 d3                	mov    ebx,edx
c00073cb:	29 c3                	sub    ebx,eax
c00073cd:	74 0b                	je     c00073da <Pipe::write(unsigned long long, void*, int*)+0x82>
c00073cf:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00073d2:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00073d6:	89 d9                	mov    ecx,ebx
c00073d8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00073da:	85 c0                	test   eax,eax
c00073dc:	74 0d                	je     c00073eb <Pipe::write(unsigned long long, void*, int*)+0x93>
c00073de:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00073e2:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00073e5:	89 de                	mov    esi,ebx
c00073e7:	89 c1                	mov    ecx,eax
c00073e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00073eb:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c00073ee:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00073f3:	75 10                	jne    c0007405 <Pipe::write(unsigned long long, void*, int*)+0xad>
c00073f5:	83 ec 0c             	sub    esp,0xc
c00073f8:	68 65 cb 01 c0       	push   0xc001cb65
c00073fd:	e8 f9 7f 00 00       	call   c000f3fb <Krnl::panic(char const*)>
c0007402:	83 c4 10             	add    esp,0x10
c0007405:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007409:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000740c:	89 08                	mov    DWORD PTR [eax],ecx
c000740e:	31 c0                	xor    eax,eax
c0007410:	83 c4 1c             	add    esp,0x1c
c0007413:	5b                   	pop    ebx
c0007414:	5e                   	pop    esi
c0007415:	5f                   	pop    edi
c0007416:	5d                   	pop    ebp
c0007417:	c3                   	ret    

c0007418 <Pipe::read(unsigned long long, void*, int*)>:
c0007418:	55                   	push   ebp
c0007419:	57                   	push   edi
c000741a:	56                   	push   esi
c000741b:	53                   	push   ebx
c000741c:	83 ec 1c             	sub    esp,0x1c
c000741f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007423:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0007427:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000742b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000742e:	89 c8                	mov    eax,ecx
c0007430:	99                   	cdq    
c0007431:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0007435:	74 24                	je     c000745b <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007437:	39 f9                	cmp    ecx,edi
c0007439:	89 d1                	mov    ecx,edx
c000743b:	19 f1                	sbb    ecx,esi
c000743d:	73 1c                	jae    c000745b <Pipe::read(unsigned long long, void*, int*)+0x43>
c000743f:	fa                   	cli    
c0007440:	ff 05 c8 26 02 c0    	inc    DWORD PTR ds:0xc00226c8
c0007446:	e8 05 b3 00 00       	call   c0012750 <schedule()>
c000744b:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c0007450:	48                   	dec    eax
c0007451:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c0007456:	75 d3                	jne    c000742b <Pipe::read(unsigned long long, void*, int*)+0x13>
c0007458:	fb                   	sti    
c0007459:	eb d0                	jmp    c000742b <Pipe::read(unsigned long long, void*, int*)+0x13>
c000745b:	39 f8                	cmp    eax,edi
c000745d:	89 d1                	mov    ecx,edx
c000745f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0007462:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0007466:	19 f1                	sbb    ecx,esi
c0007468:	73 07                	jae    c0007471 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000746a:	89 04 24             	mov    DWORD PTR [esp],eax
c000746d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007471:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0007474:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0007477:	29 f7                	sub    edi,esi
c0007479:	89 f8                	mov    eax,edi
c000747b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000747f:	99                   	cdq    
c0007480:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0007483:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007487:	19 d0                	sbb    eax,edx
c0007489:	73 07                	jae    c0007492 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000748b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000748e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007492:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0007495:	89 ea                	mov    edx,ebp
c0007497:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000749b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00074a0:	74 0d                	je     c00074af <Pipe::read(unsigned long long, void*, int*)+0x97>
c00074a2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00074a5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00074a9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00074ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00074af:	85 d2                	test   edx,edx
c00074b1:	74 11                	je     c00074c4 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00074b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00074b7:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00074ba:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00074be:	89 d1                	mov    ecx,edx
c00074c0:	89 c7                	mov    edi,eax
c00074c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00074c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00074c7:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00074ca:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00074cd:	99                   	cdq    
c00074ce:	89 f7                	mov    edi,esi
c00074d0:	03 04 24             	add    eax,DWORD PTR [esp]
c00074d3:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00074d7:	c1 ff 1f             	sar    edi,0x1f
c00074da:	57                   	push   edi
c00074db:	56                   	push   esi
c00074dc:	52                   	push   edx
c00074dd:	50                   	push   eax
c00074de:	e8 dd 40 01 00       	call   c001b5c0 <__umoddi3>
c00074e3:	83 c4 10             	add    esp,0x10
c00074e6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00074e9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00074ee:	75 10                	jne    c0007500 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c00074f0:	83 ec 0c             	sub    esp,0xc
c00074f3:	68 82 cb 01 c0       	push   0xc001cb82
c00074f8:	e8 fe 7e 00 00       	call   c000f3fb <Krnl::panic(char const*)>
c00074fd:	83 c4 10             	add    esp,0x10
c0007500:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007504:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007507:	89 10                	mov    DWORD PTR [eax],edx
c0007509:	83 c4 1c             	add    esp,0x1c
c000750c:	31 c0                	xor    eax,eax
c000750e:	5b                   	pop    ebx
c000750f:	5e                   	pop    esi
c0007510:	5f                   	pop    edi
c0007511:	5d                   	pop    ebp
c0007512:	c3                   	ret    
c0007513:	90                   	nop

c0007514 <Pipe::Pipe(int)>:
c0007514:	83 ec 0c             	sub    esp,0xc
c0007517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000751b:	83 ec 08             	sub    esp,0x8
c000751e:	6a 00                	push   0x0
c0007520:	50                   	push   eax
c0007521:	e8 f0 0c 00 00       	call   c0008216 <UnixFile::UnixFile(int)>
c0007526:	83 c4 10             	add    esp,0x10
c0007529:	ba a8 cb 01 c0       	mov    edx,0xc001cba8
c000752e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007532:	89 10                	mov    DWORD PTR [eax],edx
c0007534:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007538:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000753c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000753f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007543:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000754a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000754e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0007555:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007559:	83 ec 0c             	sub    esp,0xc
c000755c:	50                   	push   eax
c000755d:	e8 bb f5 ff ff       	call   c0006b1d <malloc>
c0007562:	83 c4 10             	add    esp,0x10
c0007565:	89 c2                	mov    edx,eax
c0007567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000756b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000756e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007572:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0007576:	90                   	nop
c0007577:	83 c4 0c             	add    esp,0xc
c000757a:	c3                   	ret    
c000757b:	90                   	nop

c000757c <VgaText::isAtty()>:
c000757c:	b0 01                	mov    al,0x1
c000757e:	c3                   	ret    
c000757f:	90                   	nop

c0007580 <VgaText::~VgaText()>:
c0007580:	83 ec 0c             	sub    esp,0xc
c0007583:	ba 30 cc 01 c0       	mov    edx,0xc001cc30
c0007588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000758c:	89 10                	mov    DWORD PTR [eax],edx
c000758e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007592:	83 ec 0c             	sub    esp,0xc
c0007595:	50                   	push   eax
c0007596:	e8 5d 0e 00 00       	call   c00083f8 <UnixFile::~UnixFile()>
c000759b:	83 c4 10             	add    esp,0x10
c000759e:	90                   	nop
c000759f:	83 c4 0c             	add    esp,0xc
c00075a2:	c3                   	ret    
c00075a3:	90                   	nop

c00075a4 <VgaText::~VgaText()>:
c00075a4:	83 ec 0c             	sub    esp,0xc
c00075a7:	83 ec 0c             	sub    esp,0xc
c00075aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00075ae:	e8 cd ff ff ff       	call   c0007580 <VgaText::~VgaText()>
c00075b3:	83 c4 10             	add    esp,0x10
c00075b6:	83 ec 08             	sub    esp,0x8
c00075b9:	68 34 01 00 00       	push   0x134
c00075be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00075c2:	e8 ef 21 00 00       	call   c00097b6 <operator delete(void*, unsigned long)>
c00075c7:	83 c4 10             	add    esp,0x10
c00075ca:	83 c4 0c             	add    esp,0xc
c00075cd:	c3                   	ret    

c00075ce <VgaText::read(unsigned long long, void*, int*)>:
c00075ce:	83 ec 10             	sub    esp,0x10
c00075d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075d5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00075d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00075dd:	e8 24 45 00 00       	call   c000bb06 <readKeyboard(VgaText*, char*, unsigned long)>
c00075e2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00075e6:	89 02                	mov    DWORD PTR [edx],eax
c00075e8:	31 c0                	xor    eax,eax
c00075ea:	83 c4 1c             	add    esp,0x1c
c00075ed:	c3                   	ret    

c00075ee <setTerminalScrollLock(bool)>:
c00075ee:	c3                   	ret    

c00075ef <doTerminalCycle()>:
c00075ef:	c3                   	ret    

c00075f0 <addToTerminalCycle(VgaText*)>:
c00075f0:	c3                   	ret    

c00075f1 <scrollTerminalScrollLock(int)>:
c00075f1:	c3                   	ret    

c00075f2 <VgaText::updateTitle()>:
c00075f2:	c3                   	ret    
c00075f3:	90                   	nop

c00075f4 <VgaText::load()>:
c00075f4:	c3                   	ret    
c00075f5:	90                   	nop

c00075f6 <VgaText::updateCursor()>:
c00075f6:	83 ec 14             	sub    esp,0x14
c00075f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00075fd:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0007600:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0007603:	e8 bc db 00 00       	call   c00151c4 <HalConsoleCursorUpdate(int, int)>
c0007608:	83 c4 1c             	add    esp,0x1c
c000760b:	c3                   	ret    

c000760c <VgaText::doANSI_SGR(int)>:
c000760c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007610:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007614:	85 d2                	test   edx,edx
c0007616:	75 0b                	jne    c0007623 <VgaText::doANSI_SGR(int)+0x17>
c0007618:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000761b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000761e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0007621:	eb 59                	jmp    c000767c <VgaText::doANSI_SGR(int)+0x70>
c0007623:	83 fa 07             	cmp    edx,0x7
c0007626:	75 0b                	jne    c0007633 <VgaText::doANSI_SGR(int)+0x27>
c0007628:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000762b:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000762e:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0007631:	eb 49                	jmp    c000767c <VgaText::doANSI_SGR(int)+0x70>
c0007633:	83 fa 1b             	cmp    edx,0x1b
c0007636:	74 e0                	je     c0007618 <VgaText::doANSI_SGR(int)+0xc>
c0007638:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000763b:	83 f9 07             	cmp    ecx,0x7
c000763e:	77 09                	ja     c0007649 <VgaText::doANSI_SGR(int)+0x3d>
c0007640:	8b 14 8d 60 eb 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe14a0]
c0007647:	eb 20                	jmp    c0007669 <VgaText::doANSI_SGR(int)+0x5d>
c0007649:	8d 4a d8             	lea    ecx,[edx-0x28]
c000764c:	83 f9 07             	cmp    ecx,0x7
c000764f:	77 09                	ja     c000765a <VgaText::doANSI_SGR(int)+0x4e>
c0007651:	8b 14 8d 60 eb 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe14a0]
c0007658:	eb 22                	jmp    c000767c <VgaText::doANSI_SGR(int)+0x70>
c000765a:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000765d:	83 f9 07             	cmp    ecx,0x7
c0007660:	77 0b                	ja     c000766d <VgaText::doANSI_SGR(int)+0x61>
c0007662:	8b 14 95 18 ea 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe15e8]
c0007669:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000766c:	c3                   	ret    
c000766d:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0007670:	83 f9 07             	cmp    ecx,0x7
c0007673:	77 0a                	ja     c000767f <VgaText::doANSI_SGR(int)+0x73>
c0007675:	8b 14 95 f0 e9 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe1610]
c000767c:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000767f:	c3                   	ret    

c0007680 <VgaText::setDefaultBgColour(VgaColour)>:
c0007680:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007684:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007688:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000768b:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000768e:	c3                   	ret    
c000768f:	90                   	nop

c0007690 <VgaText::setDefaultFgColour(VgaColour)>:
c0007690:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007694:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007698:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000769b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000769e:	c3                   	ret    
c000769f:	90                   	nop

c00076a0 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00076a0:	53                   	push   ebx
c00076a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00076a5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00076a9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00076ad:	51                   	push   ecx
c00076ae:	e8 cd ff ff ff       	call   c0007680 <VgaText::setDefaultBgColour(VgaColour)>
c00076b3:	58                   	pop    eax
c00076b4:	5a                   	pop    edx
c00076b5:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00076b9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00076bd:	5b                   	pop    ebx
c00076be:	eb d0                	jmp    c0007690 <VgaText::setDefaultFgColour(VgaColour)>

c00076c0 <VgaText::setTitleTextColour(VgaColour)>:
c00076c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00076c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00076c8:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00076cb:	c3                   	ret    

c00076cc <VgaText::setTitleColour(VgaColour)>:
c00076cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00076d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00076d4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00076d7:	c3                   	ret    

c00076d8 <VgaText::setTitle(char*)>:
c00076d8:	c3                   	ret    
c00076d9:	90                   	nop

c00076da <VgaText::combineColours(unsigned char, unsigned char)>:
c00076da:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00076de:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00076e3:	83 e0 0f             	and    eax,0xf
c00076e6:	c1 e2 04             	shl    edx,0x4
c00076e9:	09 d0                	or     eax,edx
c00076eb:	c3                   	ret    

c00076ec <VgaText::scrollScreen()>:
c00076ec:	55                   	push   ebp
c00076ed:	b9 01 00 00 00       	mov    ecx,0x1
c00076f2:	57                   	push   edi
c00076f3:	56                   	push   esi
c00076f4:	53                   	push   ebx
c00076f5:	83 ec 0c             	sub    esp,0xc
c00076f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00076fc:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0007702:	31 ff                	xor    edi,edi
c0007704:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007707:	83 f9 18             	cmp    ecx,0x18
c000770a:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000770d:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0007714:	75 27                	jne    c000773d <VgaText::scrollScreen()+0x51>
c0007716:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0007719:	01 f5                	add    ebp,esi
c000771b:	f7 c7 01 00 00 00    	test   edi,0x1
c0007721:	74 16                	je     c0007739 <VgaText::scrollScreen()+0x4d>
c0007723:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0007727:	50                   	push   eax
c0007728:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000772c:	50                   	push   eax
c000772d:	e8 a8 ff ff ff       	call   c00076da <VgaText::combineColours(unsigned char, unsigned char)>
c0007732:	5a                   	pop    edx
c0007733:	5a                   	pop    edx
c0007734:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0007737:	eb 04                	jmp    c000773d <VgaText::scrollScreen()+0x51>
c0007739:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000773d:	47                   	inc    edi
c000773e:	46                   	inc    esi
c000773f:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0007745:	75 bd                	jne    c0007704 <VgaText::scrollScreen()+0x18>
c0007747:	41                   	inc    ecx
c0007748:	83 f9 19             	cmp    ecx,0x19
c000774b:	75 af                	jne    c00076fc <VgaText::scrollScreen()+0x10>
c000774d:	39 1d 54 f2 01 c0    	cmp    DWORD PTR ds:0xc001f254,ebx
c0007753:	75 1f                	jne    c0007774 <VgaText::scrollScreen()+0x88>
c0007755:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0007759:	74 05                	je     c0007760 <VgaText::scrollScreen()+0x74>
c000775b:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000775e:	eb 14                	jmp    c0007774 <VgaText::scrollScreen()+0x88>
c0007760:	50                   	push   eax
c0007761:	50                   	push   eax
c0007762:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0007766:	50                   	push   eax
c0007767:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000776b:	50                   	push   eax
c000776c:	e8 df d8 00 00       	call   c0015050 <HalConsoleScroll(int, int)>
c0007771:	83 c4 10             	add    esp,0x10
c0007774:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0007778:	83 c4 0c             	add    esp,0xc
c000777b:	5b                   	pop    ebx
c000777c:	5e                   	pop    esi
c000777d:	5f                   	pop    edi
c000777e:	5d                   	pop    ebp
c000777f:	e9 72 fe ff ff       	jmp    c00075f6 <VgaText::updateCursor()>

c0007784 <VgaText::combineCharAndColour(char, unsigned char)>:
c0007784:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0007789:	c1 e0 08             	shl    eax,0x8
c000778c:	89 c2                	mov    edx,eax
c000778e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0007793:	09 d0                	or     eax,edx
c0007795:	c3                   	ret    

c0007796 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0007796:	55                   	push   ebp
c0007797:	57                   	push   edi
c0007798:	56                   	push   esi
c0007799:	53                   	push   ebx
c000779a:	83 ec 1c             	sub    esp,0x1c
c000779d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00077a1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00077a5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00077a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00077ad:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00077b1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00077b5:	0f b6 c3             	movzx  eax,bl
c00077b8:	50                   	push   eax
c00077b9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00077be:	50                   	push   eax
c00077bf:	e8 16 ff ff ff       	call   c00076da <VgaText::combineColours(unsigned char, unsigned char)>
c00077c4:	5a                   	pop    edx
c00077c5:	0f b6 c0             	movzx  eax,al
c00077c8:	59                   	pop    ecx
c00077c9:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00077ce:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00077d2:	50                   	push   eax
c00077d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077d7:	e8 a8 ff ff ff       	call   c0007784 <VgaText::combineCharAndColour(char, unsigned char)>
c00077dc:	5a                   	pop    edx
c00077dd:	66 6b d7 50          	imul   dx,di,0x50
c00077e1:	59                   	pop    ecx
c00077e2:	01 f2                	add    edx,esi
c00077e4:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00077e7:	0f b7 d2             	movzx  edx,dx
c00077ea:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00077ee:	39 2d 54 f2 01 c0    	cmp    DWORD PTR ds:0xc001f254,ebp
c00077f4:	75 28                	jne    c000781e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c00077f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00077fa:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00077fe:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0007802:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0007806:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000780a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000780e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007812:	83 c4 1c             	add    esp,0x1c
c0007815:	5b                   	pop    ebx
c0007816:	5e                   	pop    esi
c0007817:	5f                   	pop    edi
c0007818:	5d                   	pop    ebp
c0007819:	e9 3a d9 00 00       	jmp    c0015158 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000781e:	83 c4 1c             	add    esp,0x1c
c0007821:	5b                   	pop    ebx
c0007822:	5e                   	pop    esi
c0007823:	5f                   	pop    edi
c0007824:	5d                   	pop    ebp
c0007825:	c3                   	ret    

c0007826 <VgaText::getCursorX()>:
c0007826:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000782a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000782d:	c3                   	ret    

c000782e <VgaText::getCursorY()>:
c000782e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007832:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0007835:	c3                   	ret    

c0007836 <VgaText::setCursor(int, int)>:
c0007836:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000783a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000783e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007841:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007845:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007848:	e9 a9 fd ff ff       	jmp    c00075f6 <VgaText::updateCursor()>

c000784d <setActiveTerminal(VgaText*)>:
c000784d:	53                   	push   ebx
c000784e:	83 ec 08             	sub    esp,0x8
c0007851:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007855:	85 db                	test   ebx,ebx
c0007857:	75 11                	jne    c000786a <setActiveTerminal(VgaText*)+0x1d>
c0007859:	c7 44 24 10 bc cb 01 c0 	mov    DWORD PTR [esp+0x10],0xc001cbbc
c0007861:	83 c4 08             	add    esp,0x8
c0007864:	5b                   	pop    ebx
c0007865:	e9 91 7b 00 00       	jmp    c000f3fb <Krnl::panic(char const*)>
c000786a:	a1 54 f2 01 c0       	mov    eax,ds:0xc001f254
c000786f:	85 c0                	test   eax,eax
c0007871:	74 0c                	je     c000787f <setActiveTerminal(VgaText*)+0x32>
c0007873:	83 ec 0c             	sub    esp,0xc
c0007876:	50                   	push   eax
c0007877:	e8 7a fd ff ff       	call   c00075f6 <VgaText::updateCursor()>
c000787c:	83 c4 10             	add    esp,0x10
c000787f:	89 1d 54 f2 01 c0    	mov    DWORD PTR ds:0xc001f254,ebx
c0007885:	50                   	push   eax
c0007886:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007889:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000788c:	53                   	push   ebx
c000788d:	e8 a4 ff ff ff       	call   c0007836 <VgaText::setCursor(int, int)>
c0007892:	83 c4 18             	add    esp,0x18
c0007895:	5b                   	pop    ebx
c0007896:	c3                   	ret    
c0007897:	90                   	nop

c0007898 <VgaText::clearScreen()>:
c0007898:	57                   	push   edi
c0007899:	56                   	push   esi
c000789a:	31 f6                	xor    esi,esi
c000789c:	53                   	push   ebx
c000789d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00078a1:	52                   	push   edx
c00078a2:	6a 00                	push   0x0
c00078a4:	6a 00                	push   0x0
c00078a6:	53                   	push   ebx
c00078a7:	e8 8a ff ff ff       	call   c0007836 <VgaText::setCursor(int, int)>
c00078ac:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00078b3:	83 c4 10             	add    esp,0x10
c00078b6:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00078b9:	7e 20                	jle    c00078db <VgaText::clearScreen()+0x43>
c00078bb:	31 ff                	xor    edi,edi
c00078bd:	50                   	push   eax
c00078be:	50                   	push   eax
c00078bf:	56                   	push   esi
c00078c0:	57                   	push   edi
c00078c1:	47                   	inc    edi
c00078c2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00078c5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00078c8:	6a 20                	push   0x20
c00078ca:	53                   	push   ebx
c00078cb:	e8 c6 fe ff ff       	call   c0007796 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00078d0:	83 c4 20             	add    esp,0x20
c00078d3:	83 ff 50             	cmp    edi,0x50
c00078d6:	75 e5                	jne    c00078bd <VgaText::clearScreen()+0x25>
c00078d8:	46                   	inc    esi
c00078d9:	eb db                	jmp    c00078b6 <VgaText::clearScreen()+0x1e>
c00078db:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00078e2:	5b                   	pop    ebx
c00078e3:	5e                   	pop    esi
c00078e4:	5f                   	pop    edi
c00078e5:	c3                   	ret    

c00078e6 <VgaText::setCursorX(int)>:
c00078e6:	83 ec 10             	sub    esp,0x10
c00078e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00078ed:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00078f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00078f4:	50                   	push   eax
c00078f5:	e8 3c ff ff ff       	call   c0007836 <VgaText::setCursor(int, int)>
c00078fa:	83 c4 1c             	add    esp,0x1c
c00078fd:	c3                   	ret    

c00078fe <VgaText::setCursorY(int)>:
c00078fe:	83 ec 10             	sub    esp,0x10
c0007901:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007905:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007909:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000790c:	50                   	push   eax
c000790d:	e8 24 ff ff ff       	call   c0007836 <VgaText::setCursor(int, int)>
c0007912:	83 c4 1c             	add    esp,0x1c
c0007915:	c3                   	ret    

c0007916 <VgaText::incrementCursor(bool)>:
c0007916:	56                   	push   esi
c0007917:	53                   	push   ebx
c0007918:	51                   	push   ecx
c0007919:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000791d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007921:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0007924:	40                   	inc    eax
c0007925:	83 f8 50             	cmp    eax,0x50
c0007928:	74 05                	je     c000792f <VgaText::incrementCursor(bool)+0x19>
c000792a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000792d:	eb 24                	jmp    c0007953 <VgaText::incrementCursor(bool)+0x3d>
c000792f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0007932:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007939:	8d 50 01             	lea    edx,[eax+0x1]
c000793c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000793f:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0007942:	75 0f                	jne    c0007953 <VgaText::incrementCursor(bool)+0x3d>
c0007944:	83 ec 0c             	sub    esp,0xc
c0007947:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000794a:	53                   	push   ebx
c000794b:	e8 9c fd ff ff       	call   c00076ec <VgaText::scrollScreen()>
c0007950:	83 c4 10             	add    esp,0x10
c0007953:	89 f0                	mov    eax,esi
c0007955:	84 c0                	test   al,al
c0007957:	74 0c                	je     c0007965 <VgaText::incrementCursor(bool)+0x4f>
c0007959:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000795d:	5a                   	pop    edx
c000795e:	5b                   	pop    ebx
c000795f:	5e                   	pop    esi
c0007960:	e9 91 fc ff ff       	jmp    c00075f6 <VgaText::updateCursor()>
c0007965:	58                   	pop    eax
c0007966:	5b                   	pop    ebx
c0007967:	5e                   	pop    esi
c0007968:	c3                   	ret    
c0007969:	90                   	nop

c000796a <VgaText::decrementCursor(bool)>:
c000796a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000796e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007972:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0007975:	85 c0                	test   eax,eax
c0007977:	74 04                	je     c000797d <VgaText::decrementCursor(bool)+0x13>
c0007979:	48                   	dec    eax
c000797a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000797d:	84 c9                	test   cl,cl
c000797f:	74 09                	je     c000798a <VgaText::decrementCursor(bool)+0x20>
c0007981:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007985:	e9 6c fc ff ff       	jmp    c00075f6 <VgaText::updateCursor()>
c000798a:	c3                   	ret    
c000798b:	90                   	nop

c000798c <VgaText::putchar(char, VgaColour, VgaColour)>:
c000798c:	53                   	push   ebx
c000798d:	83 ec 08             	sub    esp,0x8
c0007990:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007994:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007998:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000799c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00079a0:	3c 07                	cmp    al,0x7
c00079a2:	75 21                	jne    c00079c5 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c00079a4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00079ac:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00079b4:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00079bc:	83 c4 08             	add    esp,0x8
c00079bf:	5b                   	pop    ebx
c00079c0:	e9 3e 2d 00 00       	jmp    c000a703 <Krnl::beep(int, int, bool)>
c00079c5:	3c 0d                	cmp    al,0xd
c00079c7:	75 09                	jne    c00079d2 <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c00079c9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00079d0:	eb 2c                	jmp    c00079fe <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00079d2:	3c 0a                	cmp    al,0xa
c00079d4:	75 31                	jne    c0007a07 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c00079d6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00079d9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00079e0:	8d 50 01             	lea    edx,[eax+0x1]
c00079e3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00079e6:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00079e9:	75 0f                	jne    c00079fa <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c00079eb:	83 ec 0c             	sub    esp,0xc
c00079ee:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00079f1:	53                   	push   ebx
c00079f2:	e8 f5 fc ff ff       	call   c00076ec <VgaText::scrollScreen()>
c00079f7:	83 c4 10             	add    esp,0x10
c00079fa:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00079fe:	83 c4 08             	add    esp,0x8
c0007a01:	5b                   	pop    ebx
c0007a02:	e9 ef fb ff ff       	jmp    c00075f6 <VgaText::updateCursor()>
c0007a07:	3c 08                	cmp    al,0x8
c0007a09:	75 25                	jne    c0007a30 <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c0007a0b:	50                   	push   eax
c0007a0c:	50                   	push   eax
c0007a0d:	6a 01                	push   0x1
c0007a0f:	53                   	push   ebx
c0007a10:	e8 55 ff ff ff       	call   c000796a <VgaText::decrementCursor(bool)>
c0007a15:	5a                   	pop    edx
c0007a16:	59                   	pop    ecx
c0007a17:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007a1a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007a1d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0007a20:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0007a23:	6a 20                	push   0x20
c0007a25:	53                   	push   ebx
c0007a26:	e8 6b fd ff ff       	call   c0007796 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0007a2b:	83 c4 28             	add    esp,0x28
c0007a2e:	5b                   	pop    ebx
c0007a2f:	c3                   	ret    
c0007a30:	83 ec 08             	sub    esp,0x8
c0007a33:	0f be c0             	movsx  eax,al
c0007a36:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007a39:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007a3c:	51                   	push   ecx
c0007a3d:	52                   	push   edx
c0007a3e:	50                   	push   eax
c0007a3f:	53                   	push   ebx
c0007a40:	e8 51 fd ff ff       	call   c0007796 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0007a45:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0007a49:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0007a51:	83 c4 28             	add    esp,0x28
c0007a54:	5b                   	pop    ebx
c0007a55:	e9 bc fe ff ff       	jmp    c0007916 <VgaText::incrementCursor(bool)>

c0007a5a <VgaText::putchar(char)>:
c0007a5a:	56                   	push   esi
c0007a5b:	53                   	push   ebx
c0007a5c:	83 ec 14             	sub    esp,0x14
c0007a5f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007a63:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007a67:	3c 5b                	cmp    al,0x5b
c0007a69:	75 18                	jne    c0007a83 <VgaText::putchar(char)+0x29>
c0007a6b:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0007a6f:	74 1f                	je     c0007a90 <VgaText::putchar(char)+0x36>
c0007a71:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0007a77:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0007a7e:	e9 bd 00 00 00       	jmp    c0007b40 <VgaText::putchar(char)+0xe6>
c0007a83:	3c 1b                	cmp    al,0x1b
c0007a85:	75 09                	jne    c0007a90 <VgaText::putchar(char)+0x36>
c0007a87:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0007a8b:	e9 b0 00 00 00       	jmp    c0007b40 <VgaText::putchar(char)+0xe6>
c0007a90:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0007a93:	84 c9                	test   cl,cl
c0007a95:	0f 84 92 00 00 00    	je     c0007b2d <VgaText::putchar(char)+0xd3>
c0007a9b:	8d 50 c0             	lea    edx,[eax-0x40]
c0007a9e:	80 fa 3e             	cmp    dl,0x3e
c0007aa1:	77 76                	ja     c0007b19 <VgaText::putchar(char)+0xbf>
c0007aa3:	3c 6d                	cmp    al,0x6d
c0007aa5:	75 47                	jne    c0007aee <VgaText::putchar(char)+0x94>
c0007aa7:	31 f6                	xor    esi,esi
c0007aa9:	31 d2                	xor    edx,edx
c0007aab:	31 c0                	xor    eax,eax
c0007aad:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0007ab0:	7e 2d                	jle    c0007adf <VgaText::putchar(char)+0x85>
c0007ab2:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0007ab7:	80 fa 3b             	cmp    dl,0x3b
c0007aba:	75 17                	jne    c0007ad3 <VgaText::putchar(char)+0x79>
c0007abc:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0007ac0:	50                   	push   eax
c0007ac1:	53                   	push   ebx
c0007ac2:	e8 45 fb ff ff       	call   c000760c <VgaText::doANSI_SGR(int)>
c0007ac7:	59                   	pop    ecx
c0007ac8:	31 d2                	xor    edx,edx
c0007aca:	58                   	pop    eax
c0007acb:	31 c0                	xor    eax,eax
c0007acd:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0007ad1:	eb 09                	jmp    c0007adc <VgaText::putchar(char)+0x82>
c0007ad3:	6b c0 0a             	imul   eax,eax,0xa
c0007ad6:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0007ada:	88 ca                	mov    dl,cl
c0007adc:	46                   	inc    esi
c0007add:	eb ce                	jmp    c0007aad <VgaText::putchar(char)+0x53>
c0007adf:	84 d2                	test   dl,dl
c0007ae1:	74 2e                	je     c0007b11 <VgaText::putchar(char)+0xb7>
c0007ae3:	50                   	push   eax
c0007ae4:	53                   	push   ebx
c0007ae5:	e8 22 fb ff ff       	call   c000760c <VgaText::doANSI_SGR(int)>
c0007aea:	58                   	pop    eax
c0007aeb:	5a                   	pop    edx
c0007aec:	eb 23                	jmp    c0007b11 <VgaText::putchar(char)+0xb7>
c0007aee:	3c 4a                	cmp    al,0x4a
c0007af0:	75 1f                	jne    c0007b11 <VgaText::putchar(char)+0xb7>
c0007af2:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0007af6:	75 19                	jne    c0007b11 <VgaText::putchar(char)+0xb7>
c0007af8:	83 ec 0c             	sub    esp,0xc
c0007afb:	53                   	push   ebx
c0007afc:	e8 97 fd ff ff       	call   c0007898 <VgaText::clearScreen()>
c0007b01:	83 c4 0c             	add    esp,0xc
c0007b04:	6a 00                	push   0x0
c0007b06:	6a 00                	push   0x0
c0007b08:	53                   	push   ebx
c0007b09:	e8 28 fd ff ff       	call   c0007836 <VgaText::setCursor(int, int)>
c0007b0e:	83 c4 10             	add    esp,0x10
c0007b11:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0007b17:	eb 27                	jmp    c0007b40 <VgaText::putchar(char)+0xe6>
c0007b19:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0007b1c:	83 fa 0e             	cmp    edx,0xe
c0007b1f:	7f 1f                	jg     c0007b40 <VgaText::putchar(char)+0xe6>
c0007b21:	8d 4a 01             	lea    ecx,[edx+0x1]
c0007b24:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0007b27:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0007b2b:	eb 13                	jmp    c0007b40 <VgaText::putchar(char)+0xe6>
c0007b2d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0007b30:	0f be c0             	movsx  eax,al
c0007b33:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0007b36:	50                   	push   eax
c0007b37:	53                   	push   ebx
c0007b38:	e8 4f fe ff ff       	call   c000798c <VgaText::putchar(char, VgaColour, VgaColour)>
c0007b3d:	83 c4 10             	add    esp,0x10
c0007b40:	83 c4 14             	add    esp,0x14
c0007b43:	5b                   	pop    ebx
c0007b44:	5e                   	pop    esi
c0007b45:	c3                   	ret    

c0007b46 <VgaText::putx(unsigned int)>:
c0007b46:	57                   	push   edi
c0007b47:	b9 11 00 00 00       	mov    ecx,0x11
c0007b4c:	56                   	push   esi
c0007b4d:	be ca cb 01 c0       	mov    esi,0xc001cbca
c0007b52:	53                   	push   ebx
c0007b53:	83 ec 20             	sub    esp,0x20
c0007b56:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0007b5a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0007b5e:	fc                   	cld    
c0007b5f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007b61:	be 08 00 00 00       	mov    esi,0x8
c0007b66:	50                   	push   eax
c0007b67:	50                   	push   eax
c0007b68:	89 d8                	mov    eax,ebx
c0007b6a:	c1 e3 04             	shl    ebx,0x4
c0007b6d:	c1 e8 1c             	shr    eax,0x1c
c0007b70:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0007b75:	50                   	push   eax
c0007b76:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007b7a:	e8 db fe ff ff       	call   c0007a5a <VgaText::putchar(char)>
c0007b7f:	83 c4 10             	add    esp,0x10
c0007b82:	4e                   	dec    esi
c0007b83:	75 e1                	jne    c0007b66 <VgaText::putx(unsigned int)+0x20>
c0007b85:	83 c4 20             	add    esp,0x20
c0007b88:	5b                   	pop    ebx
c0007b89:	5e                   	pop    esi
c0007b8a:	5f                   	pop    edi
c0007b8b:	c3                   	ret    

c0007b8c <VgaText::puts(char const*)>:
c0007b8c:	53                   	push   ebx
c0007b8d:	83 ec 08             	sub    esp,0x8
c0007b90:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0007b94:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0007b97:	84 c0                	test   al,al
c0007b99:	74 12                	je     c0007bad <VgaText::puts(char const*)+0x21>
c0007b9b:	43                   	inc    ebx
c0007b9c:	51                   	push   ecx
c0007b9d:	51                   	push   ecx
c0007b9e:	50                   	push   eax
c0007b9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ba3:	e8 b2 fe ff ff       	call   c0007a5a <VgaText::putchar(char)>
c0007ba8:	83 c4 10             	add    esp,0x10
c0007bab:	eb e7                	jmp    c0007b94 <VgaText::puts(char const*)+0x8>
c0007bad:	83 c4 08             	add    esp,0x8
c0007bb0:	5b                   	pop    ebx
c0007bb1:	c3                   	ret    

c0007bb2 <VgaText::write(unsigned long long, void*, int*)>:
c0007bb2:	55                   	push   ebp
c0007bb3:	57                   	push   edi
c0007bb4:	56                   	push   esi
c0007bb5:	53                   	push   ebx
c0007bb6:	83 ec 0c             	sub    esp,0xc
c0007bb9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0007bbd:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0007bc1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0007bc5:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0007bcc:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0007bcf:	39 eb                	cmp    ebx,ebp
c0007bd1:	74 13                	je     c0007be6 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0007bd3:	43                   	inc    ebx
c0007bd4:	50                   	push   eax
c0007bd5:	50                   	push   eax
c0007bd6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0007bda:	50                   	push   eax
c0007bdb:	56                   	push   esi
c0007bdc:	e8 79 fe ff ff       	call   c0007a5a <VgaText::putchar(char)>
c0007be1:	83 c4 10             	add    esp,0x10
c0007be4:	eb e9                	jmp    c0007bcf <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0007be6:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0007bed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007bf1:	89 38                	mov    DWORD PTR [eax],edi
c0007bf3:	83 c4 0c             	add    esp,0xc
c0007bf6:	31 c0                	xor    eax,eax
c0007bf8:	5b                   	pop    ebx
c0007bf9:	5e                   	pop    esi
c0007bfa:	5f                   	pop    edi
c0007bfb:	5d                   	pop    ebp
c0007bfc:	c3                   	ret    
c0007bfd:	90                   	nop

c0007bfe <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0007bfe:	55                   	push   ebp
c0007bff:	57                   	push   edi
c0007c00:	56                   	push   esi
c0007c01:	53                   	push   ebx
c0007c02:	83 ec 0c             	sub    esp,0xc
c0007c05:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007c09:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0007c0e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0007c15:	50                   	push   eax
c0007c16:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0007c1b:	50                   	push   eax
c0007c1c:	e8 b9 fa ff ff       	call   c00076da <VgaText::combineColours(unsigned char, unsigned char)>
c0007c21:	5a                   	pop    edx
c0007c22:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007c27:	59                   	pop    ecx
c0007c28:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0007c2b:	89 c5                	mov    ebp,eax
c0007c2d:	0f b7 f6             	movzx  esi,si
c0007c30:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0007c34:	01 f6                	add    esi,esi
c0007c36:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007c39:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0007c3c:	84 c0                	test   al,al
c0007c3e:	0f 84 f4 00 00 00    	je     c0007d38 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0007c44:	3c 0d                	cmp    al,0xd
c0007c46:	75 0c                	jne    c0007c54 <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c0007c48:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007c4f:	e9 de 00 00 00       	jmp    c0007d32 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0007c54:	3c 0a                	cmp    al,0xa
c0007c56:	75 45                	jne    c0007c9d <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0007c58:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0007c5b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007c62:	8d 48 01             	lea    ecx,[eax+0x1]
c0007c65:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0007c68:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0007c6b:	75 0f                	jne    c0007c7c <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0007c6d:	83 ec 0c             	sub    esp,0xc
c0007c70:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0007c73:	53                   	push   ebx
c0007c74:	e8 73 fa ff ff       	call   c00076ec <VgaText::scrollScreen()>
c0007c79:	83 c4 10             	add    esp,0x10
c0007c7c:	83 ec 0c             	sub    esp,0xc
c0007c7f:	53                   	push   ebx
c0007c80:	e8 71 f9 ff ff       	call   c00075f6 <VgaText::updateCursor()>
c0007c85:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007c8a:	83 c4 10             	add    esp,0x10
c0007c8d:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0007c90:	0f b7 f6             	movzx  esi,si
c0007c93:	01 f6                	add    esi,esi
c0007c95:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007c98:	e9 95 00 00 00       	jmp    c0007d32 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0007c9d:	3c 08                	cmp    al,0x8
c0007c9f:	75 35                	jne    c0007cd6 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c0007ca1:	51                   	push   ecx
c0007ca2:	51                   	push   ecx
c0007ca3:	6a 01                	push   0x1
c0007ca5:	53                   	push   ebx
c0007ca6:	e8 bf fc ff ff       	call   c000796a <VgaText::decrementCursor(bool)>
c0007cab:	5e                   	pop    esi
c0007cac:	58                   	pop    eax
c0007cad:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007cb0:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007cb3:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0007cb6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0007cb9:	6a 20                	push   0x20
c0007cbb:	53                   	push   ebx
c0007cbc:	e8 d5 fa ff ff       	call   c0007796 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0007cc1:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0007ccc:	0f b7 f6             	movzx  esi,si
c0007ccf:	01 f6                	add    esi,esi
c0007cd1:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007cd4:	eb 5c                	jmp    c0007d32 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0007cd6:	52                   	push   edx
c0007cd7:	52                   	push   edx
c0007cd8:	89 ea                	mov    edx,ebp
c0007cda:	0f b6 ca             	movzx  ecx,dl
c0007cdd:	51                   	push   ecx
c0007cde:	50                   	push   eax
c0007cdf:	e8 a0 fa ff ff       	call   c0007784 <VgaText::combineCharAndColour(char, unsigned char)>
c0007ce4:	83 c4 10             	add    esp,0x10
c0007ce7:	66 89 06             	mov    WORD PTR [esi],ax
c0007cea:	39 1d 54 f2 01 c0    	cmp    DWORD PTR ds:0xc001f254,ebx
c0007cf0:	75 1d                	jne    c0007d0f <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c0007cf2:	83 ec 0c             	sub    esp,0xc
c0007cf5:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007cf8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007cfb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0007cff:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0007d03:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0007d06:	50                   	push   eax
c0007d07:	e8 4c d4 00 00       	call   c0015158 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0007d0c:	83 c4 20             	add    esp,0x20
c0007d0f:	83 c6 02             	add    esi,0x2
c0007d12:	50                   	push   eax
c0007d13:	50                   	push   eax
c0007d14:	6a 00                	push   0x0
c0007d16:	53                   	push   ebx
c0007d17:	e8 fa fb ff ff       	call   c0007916 <VgaText::incrementCursor(bool)>
c0007d1c:	83 c4 10             	add    esp,0x10
c0007d1f:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0007d23:	75 0d                	jne    c0007d32 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0007d25:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007d2a:	0f b7 f6             	movzx  esi,si
c0007d2d:	01 f6                	add    esi,esi
c0007d2f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007d32:	47                   	inc    edi
c0007d33:	e9 01 ff ff ff       	jmp    c0007c39 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	53                   	push   ebx
c0007d3c:	e8 b5 f8 ff ff       	call   c00075f6 <VgaText::updateCursor()>
c0007d41:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0007d48:	83 c4 1c             	add    esp,0x1c
c0007d4b:	5b                   	pop    ebx
c0007d4c:	5e                   	pop    esi
c0007d4d:	5f                   	pop    edi
c0007d4e:	5d                   	pop    ebp
c0007d4f:	c3                   	ret    

c0007d50 <VgaText::VgaText(char const*)>:
c0007d50:	56                   	push   esi
c0007d51:	53                   	push   ebx
c0007d52:	83 ec 04             	sub    esp,0x4
c0007d55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d59:	83 ec 08             	sub    esp,0x8
c0007d5c:	6a 00                	push   0x0
c0007d5e:	50                   	push   eax
c0007d5f:	e8 b2 04 00 00       	call   c0008216 <UnixFile::UnixFile(int)>
c0007d64:	83 c4 10             	add    esp,0x10
c0007d67:	ba 30 cc 01 c0       	mov    edx,0xc001cc30
c0007d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d70:	89 10                	mov    DWORD PTR [eax],edx
c0007d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d76:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0007d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d81:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0007d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d8c:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0007d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d94:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0007d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d9c:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0007da3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007da7:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0007dae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007db2:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0007db9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007dbd:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0007dc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007dc8:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0007dcf:	83 ec 0c             	sub    esp,0xc
c0007dd2:	6a 01                	push   0x1
c0007dd4:	e8 80 08 00 00       	call   c0008659 <Virt::allocateKernelVirtualPages(int)>
c0007dd9:	83 c4 10             	add    esp,0x10
c0007ddc:	89 c2                	mov    edx,eax
c0007dde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007de2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0007de5:	8b 1d f0 f2 01 c0    	mov    ebx,DWORD PTR ds:0xc001f2f0
c0007deb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007def:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007df2:	89 c6                	mov    esi,eax
c0007df4:	e8 f1 f0 ff ff       	call   c0006eea <Phys::allocatePage()>
c0007df9:	68 05 0c 00 00       	push   0xc05
c0007dfe:	56                   	push   esi
c0007dff:	50                   	push   eax
c0007e00:	53                   	push   ebx
c0007e01:	e8 e8 0e 00 00       	call   c0008cee <VAS::mapPage(unsigned long, unsigned long, int)>
c0007e06:	83 c4 10             	add    esp,0x10
c0007e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e0d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007e10:	83 ec 04             	sub    esp,0x4
c0007e13:	68 a0 0f 00 00       	push   0xfa0
c0007e18:	6a 00                	push   0x0
c0007e1a:	50                   	push   eax
c0007e1b:	e8 d0 86 ff ff       	call   c00004f0 <memset>
c0007e20:	83 c4 10             	add    esp,0x10
c0007e23:	83 ec 04             	sub    esp,0x4
c0007e26:	6a 00                	push   0x0
c0007e28:	6a 07                	push   0x7
c0007e2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e2e:	e8 6d f8 ff ff       	call   c00076a0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0007e33:	83 c4 10             	add    esp,0x10
c0007e36:	83 ec 04             	sub    esp,0x4
c0007e39:	6a 00                	push   0x0
c0007e3b:	6a 00                	push   0x0
c0007e3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e41:	e8 f0 f9 ff ff       	call   c0007836 <VgaText::setCursor(int, int)>
c0007e46:	83 c4 10             	add    esp,0x10
c0007e49:	83 ec 0c             	sub    esp,0xc
c0007e4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e50:	e8 43 fa ff ff       	call   c0007898 <VgaText::clearScreen()>
c0007e55:	83 c4 10             	add    esp,0x10
c0007e58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e5c:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0007e60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e64:	05 82 00 00 00       	add    eax,0x82
c0007e69:	83 ec 04             	sub    esp,0x4
c0007e6c:	6a 30                	push   0x30
c0007e6e:	6a 00                	push   0x0
c0007e70:	50                   	push   eax
c0007e71:	e8 7a 86 ff ff       	call   c00004f0 <memset>
c0007e76:	83 c4 10             	add    esp,0x10
c0007e79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e7d:	05 b2 00 00 00       	add    eax,0xb2
c0007e82:	83 ec 04             	sub    esp,0x4
c0007e85:	68 80 00 00 00       	push   0x80
c0007e8a:	6a 00                	push   0x0
c0007e8c:	50                   	push   eax
c0007e8d:	e8 5e 86 ff ff       	call   c00004f0 <memset>
c0007e92:	83 c4 10             	add    esp,0x10
c0007e95:	90                   	nop
c0007e96:	83 c4 04             	add    esp,0x4
c0007e99:	5b                   	pop    ebx
c0007e9a:	5e                   	pop    esi
c0007e9b:	c3                   	ret    

c0007e9c <VgaText::receiveKey(unsigned char)>:
c0007e9c:	57                   	push   edi
c0007e9d:	56                   	push   esi
c0007e9e:	53                   	push   ebx
c0007e9f:	83 ec 10             	sub    esp,0x10
c0007ea2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0007ea6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0007eaa:	84 db                	test   bl,bl
c0007eac:	0f 84 ba 00 00 00    	je     c0007f6c <VgaText::receiveKey(unsigned char)+0xd0>
c0007eb2:	8d be 82 00 00 00    	lea    edi,[esi+0x82]
c0007eb8:	80 fb 08             	cmp    bl,0x8
c0007ebb:	75 2c                	jne    c0007ee9 <VgaText::receiveKey(unsigned char)+0x4d>
c0007ebd:	83 ec 0c             	sub    esp,0xc
c0007ec0:	57                   	push   edi
c0007ec1:	e8 9a 86 ff ff       	call   c0000560 <strlen>
c0007ec6:	83 c4 10             	add    esp,0x10
c0007ec9:	85 c0                	test   eax,eax
c0007ecb:	74 41                	je     c0007f0e <VgaText::receiveKey(unsigned char)+0x72>
c0007ecd:	50                   	push   eax
c0007ece:	50                   	push   eax
c0007ecf:	6a 08                	push   0x8
c0007ed1:	56                   	push   esi
c0007ed2:	e8 83 fb ff ff       	call   c0007a5a <VgaText::putchar(char)>
c0007ed7:	89 3c 24             	mov    DWORD PTR [esp],edi
c0007eda:	e8 81 86 ff ff       	call   c0000560 <strlen>
c0007edf:	c6 84 06 81 00 00 00 00 	mov    BYTE PTR [esi+eax*1+0x81],0x0
c0007ee7:	eb 22                	jmp    c0007f0b <VgaText::receiveKey(unsigned char)+0x6f>
c0007ee9:	0f be c3             	movsx  eax,bl
c0007eec:	52                   	push   edx
c0007eed:	52                   	push   edx
c0007eee:	50                   	push   eax
c0007eef:	56                   	push   esi
c0007ef0:	e8 65 fb ff ff       	call   c0007a5a <VgaText::putchar(char)>
c0007ef5:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0007ef9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0007efe:	59                   	pop    ecx
c0007eff:	58                   	pop    eax
c0007f00:	8d 44 24 16          	lea    eax,[esp+0x16]
c0007f04:	50                   	push   eax
c0007f05:	57                   	push   edi
c0007f06:	e8 d5 88 ff ff       	call   c00007e0 <strcat>
c0007f0b:	83 c4 10             	add    esp,0x10
c0007f0e:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0007f15:	75 05                	jne    c0007f1c <VgaText::receiveKey(unsigned char)+0x80>
c0007f17:	80 fb 0a             	cmp    bl,0xa
c0007f1a:	75 50                	jne    c0007f6c <VgaText::receiveKey(unsigned char)+0xd0>
c0007f1c:	83 ec 0c             	sub    esp,0xc
c0007f1f:	81 c6 b2 00 00 00    	add    esi,0xb2
c0007f25:	56                   	push   esi
c0007f26:	e8 35 86 ff ff       	call   c0000560 <strlen>
c0007f2b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0007f2e:	89 c3                	mov    ebx,eax
c0007f30:	e8 2b 86 ff ff       	call   c0000560 <strlen>
c0007f35:	83 c4 10             	add    esp,0x10
c0007f38:	8d 44 03 04          	lea    eax,[ebx+eax*1+0x4]
c0007f3c:	3d 80 00 00 00       	cmp    eax,0x80
c0007f41:	76 10                	jbe    c0007f53 <VgaText::receiveKey(unsigned char)+0xb7>
c0007f43:	83 ec 0c             	sub    esp,0xc
c0007f46:	68 db cb 01 c0       	push   0xc001cbdb
c0007f4b:	e8 ab 74 00 00       	call   c000f3fb <Krnl::panic(char const*)>
c0007f50:	83 c4 10             	add    esp,0x10
c0007f53:	50                   	push   eax
c0007f54:	50                   	push   eax
c0007f55:	57                   	push   edi
c0007f56:	56                   	push   esi
c0007f57:	e8 84 88 ff ff       	call   c00007e0 <strcat>
c0007f5c:	83 c4 0c             	add    esp,0xc
c0007f5f:	6a 30                	push   0x30
c0007f61:	6a 00                	push   0x0
c0007f63:	57                   	push   edi
c0007f64:	e8 87 85 ff ff       	call   c00004f0 <memset>
c0007f69:	83 c4 10             	add    esp,0x10
c0007f6c:	83 c4 10             	add    esp,0x10
c0007f6f:	5b                   	pop    ebx
c0007f70:	5e                   	pop    esi
c0007f71:	5f                   	pop    edi
c0007f72:	c3                   	ret    
c0007f73:	90                   	nop

c0007f74 <VgaText::doUpdate()>:
c0007f74:	c3                   	ret    

c0007f75 <newTerminal(char*)>:
c0007f75:	83 ec 28             	sub    esp,0x28
c0007f78:	68 34 01 00 00       	push   0x134
c0007f7d:	e8 9b eb ff ff       	call   c0006b1d <malloc>
c0007f82:	5a                   	pop    edx
c0007f83:	59                   	pop    ecx
c0007f84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f88:	50                   	push   eax
c0007f89:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007f8d:	e8 be fd ff ff       	call   c0007d50 <VgaText::VgaText(char const*)>
c0007f92:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007f96:	83 c4 2c             	add    esp,0x2c
c0007f99:	c3                   	ret    
c0007f9a:	66 90                	xchg   ax,ax

c0007f9c <TSS::TSS()>:
c0007f9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007fa0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0007fa7:	90                   	nop
c0007fa8:	c3                   	ret    
c0007fa9:	90                   	nop
c0007faa:	66 90                	xchg   ax,ax

c0007fac <TSS::setESP(unsigned long)>:
c0007fac:	55                   	push   ebp
c0007fad:	89 e5                	mov    ebp,esp
c0007faf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007fb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007fb5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0007fb8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007fbb:	90                   	nop
c0007fbc:	5d                   	pop    ebp
c0007fbd:	c3                   	ret    
c0007fbe:	66 90                	xchg   ax,ax

c0007fc0 <TSS::flush()>:
c0007fc0:	55                   	push   ebp
c0007fc1:	89 e5                	mov    ebp,esp
c0007fc3:	83 ec 10             	sub    esp,0x10
c0007fc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007fc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0007fcb:	83 c8 03             	or     eax,0x3
c0007fce:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0007fd2:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0007fd6:	66 89 d0             	mov    ax,dx
c0007fd9:	0f 00 d8             	ltr    ax
c0007fdc:	90                   	nop
c0007fdd:	c9                   	leave  
c0007fde:	c3                   	ret    
c0007fdf:	90                   	nop

c0007fe0 <TSS::setup(unsigned long, unsigned long)>:
c0007fe0:	55                   	push   ebp
c0007fe1:	89 e5                	mov    ebp,esp
c0007fe3:	83 ec 18             	sub    esp,0x18
c0007fe6:	83 ec 0c             	sub    esp,0xc
c0007fe9:	6a 68                	push   0x68
c0007feb:	e8 2d eb ff ff       	call   c0006b1d <malloc>
c0007ff0:	83 c4 10             	add    esp,0x10
c0007ff3:	89 c2                	mov    edx,eax
c0007ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007ff8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007ffb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007ffe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008001:	83 ec 04             	sub    esp,0x4
c0008004:	6a 68                	push   0x68
c0008006:	6a 00                	push   0x0
c0008008:	50                   	push   eax
c0008009:	e8 e2 84 ff ff       	call   c00004f0 <memset>
c000800e:	83 c4 10             	add    esp,0x10
c0008011:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008014:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008017:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000801d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008020:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008023:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008029:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000802c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000802f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008032:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008035:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008038:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000803b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008041:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008044:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008047:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000804d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008050:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008053:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008059:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000805c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000805f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008065:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008068:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000806b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008071:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008074:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008077:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000807d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008080:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008083:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008086:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008089:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000808c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000808f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008092:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008095:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008098:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000809b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00080a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00080a5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080a8:	0f 20 da             	mov    edx,cr3
c00080ab:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00080ae:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00080b1:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00080b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00080b7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080ba:	83 ec 08             	sub    esp,0x8
c00080bd:	50                   	push   eax
c00080be:	8d 45 ec             	lea    eax,[ebp-0x14]
c00080c1:	50                   	push   eax
c00080c2:	e8 e1 e2 ff ff       	call   c00063a8 <GDTEntry::setBase(unsigned int)>
c00080c7:	83 c4 10             	add    esp,0x10
c00080ca:	83 ec 08             	sub    esp,0x8
c00080cd:	6a 68                	push   0x68
c00080cf:	8d 45 ec             	lea    eax,[ebp-0x14]
c00080d2:	50                   	push   eax
c00080d3:	e8 ec e2 ff ff       	call   c00063c4 <GDTEntry::setLimit(unsigned int)>
c00080d8:	83 c4 10             	add    esp,0x10
c00080db:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00080df:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00080e2:	83 e0 0f             	and    eax,0xf
c00080e5:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00080e8:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00080eb:	83 c8 40             	or     eax,0x40
c00080ee:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00080f1:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c00080f6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00080fc:	05 78 01 00 00       	add    eax,0x178
c0008101:	83 ec 04             	sub    esp,0x4
c0008104:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008107:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000810a:	50                   	push   eax
c000810b:	e8 e8 e2 ff ff       	call   c00063f8 <GDT::addEntry(GDTEntry)>
c0008110:	83 c4 10             	add    esp,0x10
c0008113:	89 c2                	mov    edx,eax
c0008115:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008118:	89 10                	mov    DWORD PTR [eax],edx
c000811a:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c000811f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008125:	05 78 01 00 00       	add    eax,0x178
c000812a:	83 ec 0c             	sub    esp,0xc
c000812d:	50                   	push   eax
c000812e:	e8 ef e2 ff ff       	call   c0006422 <GDT::flush()>
c0008133:	83 c4 10             	add    esp,0x10
c0008136:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008139:	8b 00                	mov    eax,DWORD PTR [eax]
c000813b:	c9                   	leave  
c000813c:	c3                   	ret    
c000813d:	90                   	nop

c000813e <ReservedFilename::read(unsigned long long, void*, int*)>:
c000813e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008142:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008146:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008149:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000814e:	75 08                	jne    c0008158 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008150:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008156:	eb 38                	jmp    c0008190 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008158:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000815d:	75 17                	jne    c0008176 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000815f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008164:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008167:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000816d:	8b 10                	mov    edx,DWORD PTR [eax]
c000816f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008173:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008176:	89 c1                	mov    ecx,eax
c0008178:	83 e1 fd             	and    ecx,0xfffffffd
c000817b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008181:	74 cd                	je     c0008150 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008183:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008188:	83 e0 ef             	and    eax,0xffffffef
c000818b:	83 f8 08             	cmp    eax,0x8
c000818e:	76 c0                	jbe    c0008150 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008190:	31 c0                	xor    eax,eax
c0008192:	c3                   	ret    
c0008193:	90                   	nop

c0008194 <ReservedFilename::isAtty()>:
c0008194:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008198:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000819b:	31 c0                	xor    eax,eax
c000819d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00081a3:	74 09                	je     c00081ae <ReservedFilename::isAtty()+0x1a>
c00081a5:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00081ab:	0f 94 c0             	sete   al
c00081ae:	c3                   	ret    
c00081af:	90                   	nop

c00081b0 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00081b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00081b4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00081b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00081bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00081bf:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00081c4:	75 08                	jne    c00081ce <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00081c6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00081cc:	eb 3d                	jmp    c000820b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00081ce:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00081d3:	75 17                	jne    c00081ec <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00081d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00081da:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00081dd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00081e3:	8b 10                	mov    edx,DWORD PTR [eax]
c00081e5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00081e9:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00081ec:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00081f1:	75 04                	jne    c00081f7 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00081f3:	89 0a                	mov    DWORD PTR [edx],ecx
c00081f5:	eb 14                	jmp    c000820b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00081f7:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00081fc:	74 c8                	je     c00081c6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00081fe:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008203:	83 e0 ef             	and    eax,0xffffffef
c0008206:	83 f8 08             	cmp    eax,0x8
c0008209:	76 bb                	jbe    c00081c6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000820b:	31 c0                	xor    eax,eax
c000820d:	c3                   	ret    

c000820e <UnixFile::getFileDescriptor()>:
c000820e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008212:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008215:	c3                   	ret    

c0008216 <UnixFile::UnixFile(int)>:
c0008216:	53                   	push   ebx
c0008217:	83 ec 28             	sub    esp,0x28
c000821a:	ba f8 cc 01 c0       	mov    edx,0xc001ccf8
c000821f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008223:	89 10                	mov    DWORD PTR [eax],edx
c0008225:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000822d:	0f 8f 8c 01 00 00    	jg     c00083bf <UnixFile::UnixFile(int)+0x1a9>
c0008233:	a1 a0 eb 01 c0       	mov    eax,ds:0xc001eba0
c0008238:	8d 50 01             	lea    edx,[eax+0x1]
c000823b:	89 15 a0 eb 01 c0    	mov    DWORD PTR ds:0xc001eba0,edx
c0008241:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008245:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008248:	83 ec 08             	sub    esp,0x8
c000824b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000824f:	68 d8 f2 01 c0       	push   0xc001f2d8
c0008254:	e8 4f 35 01 00       	call   c001b7a8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008259:	83 c4 10             	add    esp,0x10
c000825c:	a0 d4 f2 01 c0       	mov    al,ds:0xc001f2d4
c0008261:	83 f0 01             	xor    eax,0x1
c0008264:	84 c0                	test   al,al
c0008266:	0f 84 54 01 00 00    	je     c00083c0 <UnixFile::UnixFile(int)+0x1aa>
c000826c:	c6 05 d4 f2 01 c0 01 	mov    BYTE PTR ds:0xc001f2d4,0x1
c0008273:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000827b:	83 ec 0c             	sub    esp,0xc
c000827e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008282:	e8 96 e8 ff ff       	call   c0006b1d <malloc>
c0008287:	83 c4 10             	add    esp,0x10
c000828a:	89 c3                	mov    ebx,eax
c000828c:	83 ec 08             	sub    esp,0x8
c000828f:	68 03 ff ff 0f       	push   0xfffff03
c0008294:	53                   	push   ebx
c0008295:	e8 2c 01 00 00       	call   c00083c6 <ReservedFilename::ReservedFilename(int)>
c000829a:	83 c4 10             	add    esp,0x10
c000829d:	89 1d cc f2 01 c0    	mov    DWORD PTR ds:0xc001f2cc,ebx
c00082a3:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00082ab:	83 ec 0c             	sub    esp,0xc
c00082ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082b2:	e8 66 e8 ff ff       	call   c0006b1d <malloc>
c00082b7:	83 c4 10             	add    esp,0x10
c00082ba:	89 c3                	mov    ebx,eax
c00082bc:	83 ec 08             	sub    esp,0x8
c00082bf:	68 01 ff ff 0f       	push   0xfffff01
c00082c4:	53                   	push   ebx
c00082c5:	e8 fc 00 00 00       	call   c00083c6 <ReservedFilename::ReservedFilename(int)>
c00082ca:	83 c4 10             	add    esp,0x10
c00082cd:	89 1d d0 f2 01 c0    	mov    DWORD PTR ds:0xc001f2d0,ebx
c00082d3:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00082db:	83 ec 0c             	sub    esp,0xc
c00082de:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00082e2:	e8 36 e8 ff ff       	call   c0006b1d <malloc>
c00082e7:	83 c4 10             	add    esp,0x10
c00082ea:	89 c3                	mov    ebx,eax
c00082ec:	83 ec 08             	sub    esp,0x8
c00082ef:	68 00 ff ff 0f       	push   0xfffff00
c00082f4:	53                   	push   ebx
c00082f5:	e8 cc 00 00 00       	call   c00083c6 <ReservedFilename::ReservedFilename(int)>
c00082fa:	83 c4 10             	add    esp,0x10
c00082fd:	89 1d c4 f2 01 c0    	mov    DWORD PTR ds:0xc001f2c4,ebx
c0008303:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000830b:	83 ec 0c             	sub    esp,0xc
c000830e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008312:	e8 06 e8 ff ff       	call   c0006b1d <malloc>
c0008317:	83 c4 10             	add    esp,0x10
c000831a:	89 c3                	mov    ebx,eax
c000831c:	83 ec 08             	sub    esp,0x8
c000831f:	68 02 ff ff 0f       	push   0xfffff02
c0008324:	53                   	push   ebx
c0008325:	e8 9c 00 00 00       	call   c00083c6 <ReservedFilename::ReservedFilename(int)>
c000832a:	83 c4 10             	add    esp,0x10
c000832d:	89 1d c8 f2 01 c0    	mov    DWORD PTR ds:0xc001f2c8,ebx
c0008333:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000833b:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0008340:	7f 7e                	jg     c00083c0 <UnixFile::UnixFile(int)+0x1aa>
c0008342:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000834a:	83 ec 0c             	sub    esp,0xc
c000834d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008351:	e8 c7 e7 ff ff       	call   c0006b1d <malloc>
c0008356:	83 c4 10             	add    esp,0x10
c0008359:	89 c3                	mov    ebx,eax
c000835b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000835f:	05 10 ff ff 0f       	add    eax,0xfffff10
c0008364:	83 ec 08             	sub    esp,0x8
c0008367:	50                   	push   eax
c0008368:	53                   	push   ebx
c0008369:	e8 58 00 00 00       	call   c00083c6 <ReservedFilename::ReservedFilename(int)>
c000836e:	83 c4 10             	add    esp,0x10
c0008371:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008375:	89 1c 85 a0 f2 01 c0 	mov    DWORD PTR [eax*4-0x3ffe0d60],ebx
c000837c:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0008384:	83 ec 0c             	sub    esp,0xc
c0008387:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000838b:	e8 8d e7 ff ff       	call   c0006b1d <malloc>
c0008390:	83 c4 10             	add    esp,0x10
c0008393:	89 c3                	mov    ebx,eax
c0008395:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008399:	05 20 ff ff 0f       	add    eax,0xfffff20
c000839e:	83 ec 08             	sub    esp,0x8
c00083a1:	50                   	push   eax
c00083a2:	53                   	push   ebx
c00083a3:	e8 1e 00 00 00       	call   c00083c6 <ReservedFilename::ReservedFilename(int)>
c00083a8:	83 c4 10             	add    esp,0x10
c00083ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083af:	89 1c 85 60 f2 01 c0 	mov    DWORD PTR [eax*4-0x3ffe0da0],ebx
c00083b6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00083ba:	e9 7c ff ff ff       	jmp    c000833b <UnixFile::UnixFile(int)+0x125>
c00083bf:	90                   	nop
c00083c0:	83 c4 28             	add    esp,0x28
c00083c3:	5b                   	pop    ebx
c00083c4:	c3                   	ret    
c00083c5:	90                   	nop

c00083c6 <ReservedFilename::ReservedFilename(int)>:
c00083c6:	83 ec 0c             	sub    esp,0xc
c00083c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00083cd:	83 ec 08             	sub    esp,0x8
c00083d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00083d4:	50                   	push   eax
c00083d5:	e8 3c fe ff ff       	call   c0008216 <UnixFile::UnixFile(int)>
c00083da:	83 c4 10             	add    esp,0x10
c00083dd:	ba 14 cd 01 c0       	mov    edx,0xc001cd14
c00083e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00083e6:	89 10                	mov    DWORD PTR [eax],edx
c00083e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00083ec:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00083f0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00083f3:	90                   	nop
c00083f4:	83 c4 0c             	add    esp,0xc
c00083f7:	c3                   	ret    

c00083f8 <UnixFile::~UnixFile()>:
c00083f8:	83 ec 1c             	sub    esp,0x1c
c00083fb:	ba f8 cc 01 c0       	mov    edx,0xc001ccf8
c0008400:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008404:	89 10                	mov    DWORD PTR [eax],edx
c0008406:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000840a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000840d:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0008412:	7f 73                	jg     c0008487 <UnixFile::~UnixFile()+0x8f>
c0008414:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000841c:	83 ec 0c             	sub    esp,0xc
c000841f:	68 d8 f2 01 c0       	push   0xc001f2d8
c0008424:	e8 53 34 01 00       	call   c001b87c <LinkedList<UnixFile>::getFirstElement()>
c0008429:	83 c4 10             	add    esp,0x10
c000842c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008430:	83 ec 0c             	sub    esp,0xc
c0008433:	68 d8 f2 01 c0       	push   0xc001f2d8
c0008438:	e8 47 34 01 00       	call   c001b884 <LinkedList<UnixFile>::removeFirst()>
c000843d:	83 c4 10             	add    esp,0x10
c0008440:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008444:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0008448:	74 40                	je     c000848a <UnixFile::~UnixFile()+0x92>
c000844a:	83 ec 08             	sub    esp,0x8
c000844d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008451:	68 d8 f2 01 c0       	push   0xc001f2d8
c0008456:	e8 4d 33 01 00       	call   c001b7a8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000845b:	83 c4 10             	add    esp,0x10
c000845e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008462:	8d 50 01             	lea    edx,[eax+0x1]
c0008465:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008469:	3d 88 13 00 00       	cmp    eax,0x1388
c000846e:	0f 94 c0             	sete   al
c0008471:	84 c0                	test   al,al
c0008473:	74 a7                	je     c000841c <UnixFile::~UnixFile()+0x24>
c0008475:	83 ec 0c             	sub    esp,0xc
c0008478:	68 d0 cc 01 c0       	push   0xc001ccd0
c000847d:	e8 79 6f 00 00       	call   c000f3fb <Krnl::panic(char const*)>
c0008482:	83 c4 10             	add    esp,0x10
c0008485:	eb 95                	jmp    c000841c <UnixFile::~UnixFile()+0x24>
c0008487:	90                   	nop
c0008488:	eb 01                	jmp    c000848b <UnixFile::~UnixFile()+0x93>
c000848a:	90                   	nop
c000848b:	90                   	nop
c000848c:	83 c4 1c             	add    esp,0x1c
c000848f:	c3                   	ret    

c0008490 <UnixFile::~UnixFile()>:
c0008490:	83 ec 0c             	sub    esp,0xc
c0008493:	83 ec 0c             	sub    esp,0xc
c0008496:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849a:	e8 59 ff ff ff       	call   c00083f8 <UnixFile::~UnixFile()>
c000849f:	83 c4 10             	add    esp,0x10
c00084a2:	83 ec 08             	sub    esp,0x8
c00084a5:	6a 0c                	push   0xc
c00084a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ab:	e8 06 13 00 00       	call   c00097b6 <operator delete(void*, unsigned long)>
c00084b0:	83 c4 10             	add    esp,0x10
c00084b3:	83 c4 0c             	add    esp,0xc
c00084b6:	c3                   	ret    
c00084b7:	90                   	nop

c00084b8 <ReservedFilename::~ReservedFilename()>:
c00084b8:	83 ec 0c             	sub    esp,0xc
c00084bb:	ba 14 cd 01 c0       	mov    edx,0xc001cd14
c00084c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084c4:	89 10                	mov    DWORD PTR [eax],edx
c00084c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084ca:	83 ec 0c             	sub    esp,0xc
c00084cd:	50                   	push   eax
c00084ce:	e8 25 ff ff ff       	call   c00083f8 <UnixFile::~UnixFile()>
c00084d3:	83 c4 10             	add    esp,0x10
c00084d6:	90                   	nop
c00084d7:	83 c4 0c             	add    esp,0xc
c00084da:	c3                   	ret    
c00084db:	90                   	nop

c00084dc <ReservedFilename::~ReservedFilename()>:
c00084dc:	83 ec 0c             	sub    esp,0xc
c00084df:	83 ec 0c             	sub    esp,0xc
c00084e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084e6:	e8 cd ff ff ff       	call   c00084b8 <ReservedFilename::~ReservedFilename()>
c00084eb:	83 c4 10             	add    esp,0x10
c00084ee:	83 ec 08             	sub    esp,0x8
c00084f1:	6a 0c                	push   0xc
c00084f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f7:	e8 ba 12 00 00       	call   c00097b6 <operator delete(void*, unsigned long)>
c00084fc:	83 c4 10             	add    esp,0x10
c00084ff:	83 c4 0c             	add    esp,0xc
c0008502:	c3                   	ret    

c0008503 <getFromFileDescriptor(int)>:
c0008503:	53                   	push   ebx
c0008504:	83 ec 08             	sub    esp,0x8
c0008507:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000850b:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0008511:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0008517:	7f 2c                	jg     c0008545 <getFromFileDescriptor(int)+0x42>
c0008519:	83 ec 0c             	sub    esp,0xc
c000851c:	68 d8 f2 01 c0       	push   0xc001f2d8
c0008521:	e8 56 33 01 00       	call   c001b87c <LinkedList<UnixFile>::getFirstElement()>
c0008526:	83 c4 10             	add    esp,0x10
c0008529:	85 c0                	test   eax,eax
c000852b:	75 04                	jne    c0008531 <getFromFileDescriptor(int)+0x2e>
c000852d:	31 c0                	xor    eax,eax
c000852f:	eb 6e                	jmp    c000859f <getFromFileDescriptor(int)+0x9c>
c0008531:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0008534:	74 69                	je     c000859f <getFromFileDescriptor(int)+0x9c>
c0008536:	52                   	push   edx
c0008537:	52                   	push   edx
c0008538:	50                   	push   eax
c0008539:	68 d8 f2 01 c0       	push   0xc001f2d8
c000853e:	e8 e3 33 01 00       	call   c001b926 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0008543:	eb e1                	jmp    c0008526 <getFromFileDescriptor(int)+0x23>
c0008545:	a1 cc f2 01 c0       	mov    eax,ds:0xc001f2cc
c000854a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0008550:	74 4d                	je     c000859f <getFromFileDescriptor(int)+0x9c>
c0008552:	a1 d0 f2 01 c0       	mov    eax,ds:0xc001f2d0
c0008557:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000855d:	74 40                	je     c000859f <getFromFileDescriptor(int)+0x9c>
c000855f:	a1 c8 f2 01 c0       	mov    eax,ds:0xc001f2c8
c0008564:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000856a:	74 33                	je     c000859f <getFromFileDescriptor(int)+0x9c>
c000856c:	a1 c4 f2 01 c0       	mov    eax,ds:0xc001f2c4
c0008571:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0008577:	74 26                	je     c000859f <getFromFileDescriptor(int)+0x9c>
c0008579:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000857f:	83 f8 08             	cmp    eax,0x8
c0008582:	77 09                	ja     c000858d <getFromFileDescriptor(int)+0x8a>
c0008584:	8b 04 85 a0 f2 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0d60]
c000858b:	eb 12                	jmp    c000859f <getFromFileDescriptor(int)+0x9c>
c000858d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0008593:	83 fb 08             	cmp    ebx,0x8
c0008596:	77 95                	ja     c000852d <getFromFileDescriptor(int)+0x2a>
c0008598:	8b 04 9d 60 f2 01 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffe0da0]
c000859f:	83 c4 08             	add    esp,0x8
c00085a2:	5b                   	pop    ebx
c00085a3:	c3                   	ret    

c00085a4 <__static_initialization_and_destruction_0(int, int)>:
c00085a4:	83 ec 0c             	sub    esp,0xc
c00085a7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00085ac:	75 34                	jne    c00085e2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00085ae:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085b6:	75 2a                	jne    c00085e2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00085b8:	83 ec 0c             	sub    esp,0xc
c00085bb:	68 d8 f2 01 c0       	push   0xc001f2d8
c00085c0:	e8 a1 31 01 00       	call   c001b766 <LinkedList<UnixFile>::LinkedList()>
c00085c5:	83 c4 10             	add    esp,0x10
c00085c8:	83 ec 04             	sub    esp,0x4
c00085cb:	68 d0 e9 01 c0       	push   0xc001e9d0
c00085d0:	68 d8 f2 01 c0       	push   0xc001f2d8
c00085d5:	68 64 b7 01 c0       	push   0xc001b764
c00085da:	e8 87 11 00 00       	call   c0009766 <__cxa_atexit>
c00085df:	83 c4 10             	add    esp,0x10
c00085e2:	90                   	nop
c00085e3:	83 c4 0c             	add    esp,0xc
c00085e6:	c3                   	ret    

c00085e7 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00085e7:	83 ec 0c             	sub    esp,0xc
c00085ea:	83 ec 08             	sub    esp,0x8
c00085ed:	68 ff ff 00 00       	push   0xffff
c00085f2:	6a 01                	push   0x1
c00085f4:	e8 ab ff ff ff       	call   c00085a4 <__static_initialization_and_destruction_0(int, int)>
c00085f9:	83 c4 10             	add    esp,0x10
c00085fc:	83 c4 0c             	add    esp,0xc
c00085ff:	c3                   	ret    

c0008600 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0008600:	53                   	push   ebx
c0008601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008605:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008609:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000860f:	89 c8                	mov    eax,ecx
c0008611:	d1 e8                	shr    eax,1
c0008613:	03 05 a8 eb 01 c0    	add    eax,DWORD PTR ds:0xc001eba8
c0008619:	83 e1 01             	and    ecx,0x1
c000861c:	8a 10                	mov    dl,BYTE PTR [eax]
c000861e:	75 09                	jne    c0008629 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0008620:	83 e2 f0             	and    edx,0xfffffff0
c0008623:	09 da                	or     edx,ebx
c0008625:	88 10                	mov    BYTE PTR [eax],dl
c0008627:	5b                   	pop    ebx
c0008628:	c3                   	ret    
c0008629:	c1 e3 04             	shl    ebx,0x4
c000862c:	83 e2 0f             	and    edx,0xf
c000862f:	09 da                	or     edx,ebx
c0008631:	88 10                	mov    BYTE PTR [eax],dl
c0008633:	5b                   	pop    ebx
c0008634:	c3                   	ret    

c0008635 <Virt::getPageState(unsigned long)>:
c0008635:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008639:	8b 0d a8 eb 01 c0    	mov    ecx,DWORD PTR ds:0xc001eba8
c000863f:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0008645:	89 d0                	mov    eax,edx
c0008647:	d1 e8                	shr    eax,1
c0008649:	83 e2 01             	and    edx,0x1
c000864c:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000864f:	75 04                	jne    c0008655 <Virt::getPageState(unsigned long)+0x20>
c0008651:	83 e0 0f             	and    eax,0xf
c0008654:	c3                   	ret    
c0008655:	c0 e8 04             	shr    al,0x4
c0008658:	c3                   	ret    

c0008659 <Virt::allocateKernelVirtualPages(int)>:
c0008659:	55                   	push   ebp
c000865a:	31 ed                	xor    ebp,ebp
c000865c:	57                   	push   edi
c000865d:	56                   	push   esi
c000865e:	53                   	push   ebx
c000865f:	31 db                	xor    ebx,ebx
c0008661:	83 ec 1c             	sub    esp,0x1c
c0008664:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0008668:	8b 3d a4 eb 01 c0    	mov    edi,DWORD PTR ds:0xc001eba4
c000866e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008673:	57                   	push   edi
c0008674:	e8 bc ff ff ff       	call   c0008635 <Virt::getPageState(unsigned long)>
c0008679:	5a                   	pop    edx
c000867a:	84 c0                	test   al,al
c000867c:	75 3a                	jne    c00086b8 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000867e:	85 db                	test   ebx,ebx
c0008680:	75 02                	jne    c0008684 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0008682:	89 fd                	mov    ebp,edi
c0008684:	43                   	inc    ebx
c0008685:	39 f3                	cmp    ebx,esi
c0008687:	74 5a                	je     c00086e3 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0008689:	47                   	inc    edi
c000868a:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0008690:	76 31                	jbe    c00086c3 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0008692:	c7 05 a4 eb 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001eba4,0xc8000
c000869c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00086a1:	75 28                	jne    c00086cb <Virt::allocateKernelVirtualPages(int)+0x72>
c00086a3:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00086a8:	bf 00 80 0c 00       	mov    edi,0xc8000
c00086ad:	57                   	push   edi
c00086ae:	e8 82 ff ff ff       	call   c0008635 <Virt::getPageState(unsigned long)>
c00086b3:	5a                   	pop    edx
c00086b4:	84 c0                	test   al,al
c00086b6:	74 c6                	je     c000867e <Virt::allocateKernelVirtualPages(int)+0x25>
c00086b8:	31 db                	xor    ebx,ebx
c00086ba:	47                   	inc    edi
c00086bb:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00086c1:	77 cf                	ja     c0008692 <Virt::allocateKernelVirtualPages(int)+0x39>
c00086c3:	89 3d a4 eb 01 c0    	mov    DWORD PTR ds:0xc001eba4,edi
c00086c9:	eb a8                	jmp    c0008673 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00086cb:	83 ec 0c             	sub    esp,0xc
c00086ce:	68 28 cd 01 c0       	push   0xc001cd28
c00086d3:	e8 23 6d 00 00       	call   c000f3fb <Krnl::panic(char const*)>
c00086d8:	8b 3d a4 eb 01 c0    	mov    edi,DWORD PTR ds:0xc001eba4
c00086de:	83 c4 10             	add    esp,0x10
c00086e1:	eb 90                	jmp    c0008673 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00086e3:	89 2d a4 eb 01 c0    	mov    DWORD PTR ds:0xc001eba4,ebp
c00086e9:	4b                   	dec    ebx
c00086ea:	74 5f                	je     c000874b <Virt::allocateKernelVirtualPages(int)+0xf2>
c00086ec:	85 f6                	test   esi,esi
c00086ee:	74 3d                	je     c000872d <Virt::allocateKernelVirtualPages(int)+0xd4>
c00086f0:	89 e8                	mov    eax,ebp
c00086f2:	31 db                	xor    ebx,ebx
c00086f4:	8d 7e ff             	lea    edi,[esi-0x1]
c00086f7:	eb 14                	jmp    c000870d <Virt::allocateKernelVirtualPages(int)+0xb4>
c00086f9:	6a 01                	push   0x1
c00086fb:	43                   	inc    ebx
c00086fc:	50                   	push   eax
c00086fd:	e8 fe fe ff ff       	call   c0008600 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008702:	58                   	pop    eax
c0008703:	39 f3                	cmp    ebx,esi
c0008705:	5a                   	pop    edx
c0008706:	74 25                	je     c000872d <Virt::allocateKernelVirtualPages(int)+0xd4>
c0008708:	a1 a4 eb 01 c0       	mov    eax,ds:0xc001eba4
c000870d:	8d 50 01             	lea    edx,[eax+0x1]
c0008710:	85 db                	test   ebx,ebx
c0008712:	89 15 a4 eb 01 c0    	mov    DWORD PTR ds:0xc001eba4,edx
c0008718:	74 20                	je     c000873a <Virt::allocateKernelVirtualPages(int)+0xe1>
c000871a:	39 df                	cmp    edi,ebx
c000871c:	75 db                	jne    c00086f9 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000871e:	6a 03                	push   0x3
c0008720:	43                   	inc    ebx
c0008721:	50                   	push   eax
c0008722:	e8 d9 fe ff ff       	call   c0008600 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008727:	59                   	pop    ecx
c0008728:	39 f3                	cmp    ebx,esi
c000872a:	58                   	pop    eax
c000872b:	75 db                	jne    c0008708 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000872d:	83 c4 1c             	add    esp,0x1c
c0008730:	89 e8                	mov    eax,ebp
c0008732:	5b                   	pop    ebx
c0008733:	c1 e0 0c             	shl    eax,0xc
c0008736:	5e                   	pop    esi
c0008737:	5f                   	pop    edi
c0008738:	5d                   	pop    ebp
c0008739:	c3                   	ret    
c000873a:	6a 02                	push   0x2
c000873c:	bb 01 00 00 00       	mov    ebx,0x1
c0008741:	50                   	push   eax
c0008742:	e8 b9 fe ff ff       	call   c0008600 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008747:	58                   	pop    eax
c0008748:	5a                   	pop    edx
c0008749:	eb bd                	jmp    c0008708 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000874b:	6a 04                	push   0x4
c000874d:	8d 45 01             	lea    eax,[ebp+0x1]
c0008750:	55                   	push   ebp
c0008751:	a3 a4 eb 01 c0       	mov    ds:0xc001eba4,eax
c0008756:	e8 a5 fe ff ff       	call   c0008600 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000875b:	59                   	pop    ecx
c000875c:	89 e8                	mov    eax,ebp
c000875e:	5b                   	pop    ebx
c000875f:	c1 e0 0c             	shl    eax,0xc
c0008762:	83 c4 1c             	add    esp,0x1c
c0008765:	5b                   	pop    ebx
c0008766:	5e                   	pop    esi
c0008767:	5f                   	pop    edi
c0008768:	5d                   	pop    ebp
c0008769:	c3                   	ret    

c000876a <Virt::freeSwapfilePage(unsigned long)>:
c000876a:	53                   	push   ebx
c000876b:	8b 15 ec f2 01 c0    	mov    edx,DWORD PTR ds:0xc001f2ec
c0008771:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008775:	b8 01 00 00 00       	mov    eax,0x1
c000877a:	89 cb                	mov    ebx,ecx
c000877c:	d3 e0                	shl    eax,cl
c000877e:	c1 eb 05             	shr    ebx,0x5
c0008781:	f7 d0                	not    eax
c0008783:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0008786:	5b                   	pop    ebx
c0008787:	c3                   	ret    

c0008788 <Virt::swapIDToSector(unsigned long)>:
c0008788:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000878c:	0f af 05 ac eb 01 c0 	imul   eax,DWORD PTR ds:0xc001ebac
c0008793:	03 05 b4 eb 01 c0    	add    eax,DWORD PTR ds:0xc001ebb4
c0008799:	c3                   	ret    

c000879a <Virt::allocateSwapfilePage()>:
c000879a:	55                   	push   ebp
c000879b:	31 d2                	xor    edx,edx
c000879d:	57                   	push   edi
c000879e:	56                   	push   esi
c000879f:	53                   	push   ebx
c00087a0:	83 ec 0c             	sub    esp,0xc
c00087a3:	8b 0d ac eb 01 c0    	mov    ecx,DWORD PTR ds:0xc001ebac
c00087a9:	a1 b0 eb 01 c0       	mov    eax,ds:0xc001ebb0
c00087ae:	f7 f1                	div    ecx
c00087b0:	39 0d b0 eb 01 c0    	cmp    DWORD PTR ds:0xc001ebb0,ecx
c00087b6:	72 2d                	jb     c00087e5 <Virt::allocateSwapfilePage()+0x4b>
c00087b8:	8b 35 ec f2 01 c0    	mov    esi,DWORD PTR ds:0xc001f2ec
c00087be:	8b 16                	mov    edx,DWORD PTR [esi]
c00087c0:	f6 c2 01             	test   dl,0x1
c00087c3:	74 3c                	je     c0008801 <Virt::allocateSwapfilePage()+0x67>
c00087c5:	31 c9                	xor    ecx,ecx
c00087c7:	bf 01 00 00 00       	mov    edi,0x1
c00087cc:	eb 12                	jmp    c00087e0 <Virt::allocateSwapfilePage()+0x46>
c00087ce:	89 fd                	mov    ebp,edi
c00087d0:	89 ca                	mov    edx,ecx
c00087d2:	d3 e5                	shl    ebp,cl
c00087d4:	c1 ea 05             	shr    edx,0x5
c00087d7:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00087da:	8b 13                	mov    edx,DWORD PTR [ebx]
c00087dc:	85 ea                	test   edx,ebp
c00087de:	74 2a                	je     c000880a <Virt::allocateSwapfilePage()+0x70>
c00087e0:	41                   	inc    ecx
c00087e1:	39 c8                	cmp    eax,ecx
c00087e3:	77 e9                	ja     c00087ce <Virt::allocateSwapfilePage()+0x34>
c00087e5:	83 ec 0c             	sub    esp,0xc
c00087e8:	68 8f ce 01 c0       	push   0xc001ce8f
c00087ed:	e8 09 6c 00 00       	call   c000f3fb <Krnl::panic(char const*)>
c00087f2:	83 c4 10             	add    esp,0x10
c00087f5:	31 c9                	xor    ecx,ecx
c00087f7:	83 c4 0c             	add    esp,0xc
c00087fa:	89 c8                	mov    eax,ecx
c00087fc:	5b                   	pop    ebx
c00087fd:	5e                   	pop    esi
c00087fe:	5f                   	pop    edi
c00087ff:	5d                   	pop    ebp
c0008800:	c3                   	ret    
c0008801:	89 f3                	mov    ebx,esi
c0008803:	bd 01 00 00 00       	mov    ebp,0x1
c0008808:	31 c9                	xor    ecx,ecx
c000880a:	09 ea                	or     edx,ebp
c000880c:	89 c8                	mov    eax,ecx
c000880e:	89 13                	mov    DWORD PTR [ebx],edx
c0008810:	83 c4 0c             	add    esp,0xc
c0008813:	5b                   	pop    ebx
c0008814:	5e                   	pop    esi
c0008815:	5f                   	pop    edi
c0008816:	5d                   	pop    ebp
c0008817:	c3                   	ret    

c0008818 <Virt::virtualMemorySetup()>:
c0008818:	53                   	push   ebx
c0008819:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000881e:	6a 0f                	push   0xf
c0008820:	53                   	push   ebx
c0008821:	43                   	inc    ebx
c0008822:	e8 d9 fd ff ff       	call   c0008600 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008827:	58                   	pop    eax
c0008828:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000882e:	5a                   	pop    edx
c000882f:	75 ed                	jne    c000881e <Virt::virtualMemorySetup()+0x6>
c0008831:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0008836:	6a 00                	push   0x0
c0008838:	53                   	push   ebx
c0008839:	43                   	inc    ebx
c000883a:	e8 c1 fd ff ff       	call   c0008600 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000883f:	59                   	pop    ecx
c0008840:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0008846:	58                   	pop    eax
c0008847:	75 ed                	jne    c0008836 <Virt::virtualMemorySetup()+0x1e>
c0008849:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000884e:	6a 0f                	push   0xf
c0008850:	53                   	push   ebx
c0008851:	43                   	inc    ebx
c0008852:	e8 a9 fd ff ff       	call   c0008600 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008857:	58                   	pop    eax
c0008858:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000885e:	5a                   	pop    edx
c000885f:	75 ed                	jne    c000884e <Virt::virtualMemorySetup()+0x36>
c0008861:	5b                   	pop    ebx
c0008862:	c3                   	ret    

c0008863 <Virt::setupPageSwapping(int)>:
c0008863:	53                   	push   ebx
c0008864:	83 ec 0c             	sub    esp,0xc
c0008867:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000886b:	a1 68 17 02 c0       	mov    eax,ds:0xc0021768
c0008870:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0008876:	8b 10                	mov    edx,DWORD PTR [eax]
c0008878:	53                   	push   ebx
c0008879:	c1 e3 0b             	shl    ebx,0xb
c000887c:	68 a6 ce 01 c0       	push   0xc001cea6
c0008881:	50                   	push   eax
c0008882:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0008885:	89 1d b0 eb 01 c0    	mov    DWORD PTR ds:0xc001ebb0,ebx
c000888b:	c6 05 b8 eb 01 c0 43 	mov    BYTE PTR ds:0xc001ebb8,0x43
c0008892:	c1 eb 08             	shr    ebx,0x8
c0008895:	a3 b4 eb 01 c0       	mov    ds:0xc001ebb4,eax
c000889a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000889d:	c7 05 ac eb 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001ebac,0x8
c00088a7:	e8 71 e2 ff ff       	call   c0006b1d <malloc>
c00088ac:	83 c4 0c             	add    esp,0xc
c00088af:	89 c1                	mov    ecx,eax
c00088b1:	a3 ec f2 01 c0       	mov    ds:0xc001f2ec,eax
c00088b6:	31 d2                	xor    edx,edx
c00088b8:	a1 b0 eb 01 c0       	mov    eax,ds:0xc001ebb0
c00088bd:	f7 35 ac eb 01 c0    	div    DWORD PTR ds:0xc001ebac
c00088c3:	c1 e8 05             	shr    eax,0x5
c00088c6:	50                   	push   eax
c00088c7:	6a 00                	push   0x0
c00088c9:	51                   	push   ecx
c00088ca:	e8 21 7c ff ff       	call   c00004f0 <memset>
c00088cf:	83 c4 18             	add    esp,0x18
c00088d2:	5b                   	pop    ebx
c00088d3:	c3                   	ret    

c00088d4 <VAS::VAS()>:
c00088d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00088d8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00088df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00088e3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00088ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00088ee:	a3 f0 f2 01 c0       	mov    ds:0xc001f2f0,eax
c00088f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00088f7:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00088fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00088ff:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0008902:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008906:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000890d:	90                   	nop
c000890e:	c3                   	ret    
c000890f:	90                   	nop

c0008910 <VAS::VAS(VAS*)>:
c0008910:	83 ec 0c             	sub    esp,0xc
c0008913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008917:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000891e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008922:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0008929:	83 ec 0c             	sub    esp,0xc
c000892c:	68 48 cd 01 c0       	push   0xc001cd48
c0008931:	e8 c5 6a 00 00       	call   c000f3fb <Krnl::panic(char const*)>
c0008936:	83 c4 10             	add    esp,0x10
c0008939:	90                   	nop
c000893a:	83 c4 0c             	add    esp,0xc
c000893d:	c3                   	ret    

c000893e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000893e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008942:	89 c2                	mov    edx,eax
c0008944:	c1 e8 0a             	shr    eax,0xa
c0008947:	c1 ea 16             	shr    edx,0x16
c000894a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000894f:	19 c9                	sbb    ecx,ecx
c0008951:	c1 e2 0c             	shl    edx,0xc
c0008954:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000895a:	25 fc 0f 00 00       	and    eax,0xffc
c000895f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0008966:	01 d0                	add    eax,edx
c0008968:	c3                   	ret    
c0008969:	90                   	nop

c000896a <VAS::getPageTableEntry(unsigned long)>:
c000896a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000896e:	89 ca                	mov    edx,ecx
c0008970:	c1 e9 0a             	shr    ecx,0xa
c0008973:	c1 ea 16             	shr    edx,0x16
c0008976:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000897c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0008982:	c1 e0 0c             	shl    eax,0xc
c0008985:	8d 04 08             	lea    eax,[eax+ecx*1]
c0008988:	c3                   	ret    

c0008989 <Virt::freeKernelVirtualPages(unsigned long)>:
c0008989:	57                   	push   edi
c000898a:	56                   	push   esi
c000898b:	be 01 00 00 00       	mov    esi,0x1
c0008990:	53                   	push   ebx
c0008991:	83 ec 10             	sub    esp,0x10
c0008994:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008998:	c1 eb 0c             	shr    ebx,0xc
c000899b:	eb 3f                	jmp    c00089dc <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000899d:	83 ec 08             	sub    esp,0x8
c00089a0:	a1 f0 f2 01 c0       	mov    eax,ds:0xc001f2f0
c00089a5:	57                   	push   edi
c00089a6:	50                   	push   eax
c00089a7:	e8 be ff ff ff       	call   c000896a <VAS::getPageTableEntry(unsigned long)>
c00089ac:	83 c4 10             	add    esp,0x10
c00089af:	8b 00                	mov    eax,DWORD PTR [eax]
c00089b1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00089b5:	f6 c4 04             	test   ah,0x4
c00089b8:	75 60                	jne    c0008a1a <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c00089ba:	80 fa 04             	cmp    dl,0x4
c00089bd:	74 79                	je     c0008a38 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c00089bf:	80 fa 02             	cmp    dl,0x2
c00089c2:	0f 84 89 00 00 00    	je     c0008a51 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c00089c8:	80 fa 03             	cmp    dl,0x3
c00089cb:	0f 84 ae 00 00 00    	je     c0008a7f <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c00089d1:	fe ca                	dec    dl
c00089d3:	0f 84 93 00 00 00    	je     c0008a6c <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c00089d9:	43                   	inc    ebx
c00089da:	31 f6                	xor    esi,esi
c00089dc:	53                   	push   ebx
c00089dd:	89 df                	mov    edi,ebx
c00089df:	e8 51 fc ff ff       	call   c0008635 <Virt::getPageState(unsigned long)>
c00089e4:	c1 e7 0c             	shl    edi,0xc
c00089e7:	5a                   	pop    edx
c00089e8:	84 c0                	test   al,al
c00089ea:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00089ee:	75 ad                	jne    c000899d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00089f0:	83 ec 0c             	sub    esp,0xc
c00089f3:	68 bd ce 01 c0       	push   0xc001cebd
c00089f8:	e8 fe 69 00 00       	call   c000f3fb <Krnl::panic(char const*)>
c00089fd:	5a                   	pop    edx
c00089fe:	59                   	pop    ecx
c00089ff:	57                   	push   edi
c0008a00:	8b 3d f0 f2 01 c0    	mov    edi,DWORD PTR ds:0xc001f2f0
c0008a06:	57                   	push   edi
c0008a07:	e8 5e ff ff ff       	call   c000896a <VAS::getPageTableEntry(unsigned long)>
c0008a0c:	83 c4 10             	add    esp,0x10
c0008a0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0008a11:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0008a15:	f6 c4 04             	test   ah,0x4
c0008a18:	74 bf                	je     c00089d9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0008a1a:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0008a1e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008a23:	83 ec 0c             	sub    esp,0xc
c0008a26:	50                   	push   eax
c0008a27:	e8 5c e4 ff ff       	call   c0006e88 <Phys::freePage(unsigned long)>
c0008a2c:	83 c4 10             	add    esp,0x10
c0008a2f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0008a33:	80 fa 04             	cmp    dl,0x4
c0008a36:	75 87                	jne    c00089bf <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0008a38:	89 f0                	mov    eax,esi
c0008a3a:	84 c0                	test   al,al
c0008a3c:	75 47                	jne    c0008a85 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c0008a3e:	c7 44 24 20 6c cd 01 c0 	mov    DWORD PTR [esp+0x20],0xc001cd6c
c0008a46:	83 c4 10             	add    esp,0x10
c0008a49:	5b                   	pop    ebx
c0008a4a:	5e                   	pop    esi
c0008a4b:	5f                   	pop    edi
c0008a4c:	e9 aa 69 00 00       	jmp    c000f3fb <Krnl::panic(char const*)>
c0008a51:	89 f0                	mov    eax,esi
c0008a53:	84 c0                	test   al,al
c0008a55:	75 15                	jne    c0008a6c <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0008a57:	83 ec 0c             	sub    esp,0xc
c0008a5a:	68 d9 ce 01 c0       	push   0xc001ced9
c0008a5f:	e8 97 69 00 00       	call   c000f3fb <Krnl::panic(char const*)>
c0008a64:	83 c4 10             	add    esp,0x10
c0008a67:	e9 6d ff ff ff       	jmp    c00089d9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0008a6c:	83 ec 08             	sub    esp,0x8
c0008a6f:	6a 00                	push   0x0
c0008a71:	53                   	push   ebx
c0008a72:	e8 89 fb ff ff       	call   c0008600 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008a77:	83 c4 10             	add    esp,0x10
c0008a7a:	e9 5a ff ff ff       	jmp    c00089d9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0008a7f:	89 f0                	mov    eax,esi
c0008a81:	84 c0                	test   al,al
c0008a83:	75 15                	jne    c0008a9a <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c0008a85:	83 ec 08             	sub    esp,0x8
c0008a88:	6a 00                	push   0x0
c0008a8a:	53                   	push   ebx
c0008a8b:	e8 70 fb ff ff       	call   c0008600 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008a90:	83 c4 10             	add    esp,0x10
c0008a93:	83 c4 10             	add    esp,0x10
c0008a96:	5b                   	pop    ebx
c0008a97:	5e                   	pop    esi
c0008a98:	5f                   	pop    edi
c0008a99:	c3                   	ret    
c0008a9a:	c7 44 24 20 f5 ce 01 c0 	mov    DWORD PTR [esp+0x20],0xc001cef5
c0008aa2:	83 c4 10             	add    esp,0x10
c0008aa5:	5b                   	pop    ebx
c0008aa6:	5e                   	pop    esi
c0008aa7:	5f                   	pop    edi
c0008aa8:	e9 4e 69 00 00       	jmp    c000f3fb <Krnl::panic(char const*)>
c0008aad:	90                   	nop

c0008aae <VAS::freeAllocatedPages(unsigned long)>:
c0008aae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008ab2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008ab6:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0008aba:	74 09                	je     c0008ac5 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0008abc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008ac0:	e9 c4 fe ff ff       	jmp    c0008989 <Virt::freeKernelVirtualPages(unsigned long)>
c0008ac5:	c7 44 24 04 90 cd 01 c0 	mov    DWORD PTR [esp+0x4],0xc001cd90
c0008acd:	e9 da 0d 00 00       	jmp    c00098ac <Dbg::kprintf(char const*, ...)>

c0008ad2 <VAS::virtualToPhysical(unsigned long)>:
c0008ad2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008ad6:	50                   	push   eax
c0008ad7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008adb:	52                   	push   edx
c0008adc:	e8 89 fe ff ff       	call   c000896a <VAS::getPageTableEntry(unsigned long)>
c0008ae1:	59                   	pop    ecx
c0008ae2:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ae4:	5a                   	pop    edx
c0008ae5:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008aea:	c3                   	ret    
c0008aeb:	90                   	nop

c0008aec <VAS::reflagRange(unsigned long, int, int, int)>:
c0008aec:	55                   	push   ebp
c0008aed:	57                   	push   edi
c0008aee:	56                   	push   esi
c0008aef:	53                   	push   ebx
c0008af0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008af4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0008af8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008afc:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0008b00:	85 db                	test   ebx,ebx
c0008b02:	7e 22                	jle    c0008b26 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0008b04:	c1 e3 0c             	shl    ebx,0xc
c0008b07:	01 f3                	add    ebx,esi
c0008b09:	56                   	push   esi
c0008b0a:	81 c6 00 10 00 00    	add    esi,0x1000
c0008b10:	55                   	push   ebp
c0008b11:	e8 54 fe ff ff       	call   c000896a <VAS::getPageTableEntry(unsigned long)>
c0008b16:	5a                   	pop    edx
c0008b17:	59                   	pop    ecx
c0008b18:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008b1a:	21 f9                	and    ecx,edi
c0008b1c:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0008b20:	39 f3                	cmp    ebx,esi
c0008b22:	89 08                	mov    DWORD PTR [eax],ecx
c0008b24:	75 e3                	jne    c0008b09 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0008b26:	5b                   	pop    ebx
c0008b27:	5e                   	pop    esi
c0008b28:	5f                   	pop    edi
c0008b29:	5d                   	pop    ebp
c0008b2a:	c3                   	ret    
c0008b2b:	90                   	nop

c0008b2c <VAS::setToWriteCombining(unsigned long, int)>:
c0008b2c:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c0008b31:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008b37:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0008b3e:	75 01                	jne    c0008b41 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0008b40:	c3                   	ret    
c0008b41:	68 80 00 00 00       	push   0x80
c0008b46:	6a ff                	push   0xffffffff
c0008b48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008b4c:	50                   	push   eax
c0008b4d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008b51:	52                   	push   edx
c0008b52:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008b56:	51                   	push   ecx
c0008b57:	e8 90 ff ff ff       	call   c0008aec <VAS::reflagRange(unsigned long, int, int, int)>
c0008b5c:	83 c4 14             	add    esp,0x14
c0008b5f:	c3                   	ret    

c0008b60 <VAS::mapOtherVASIn(bool, VAS*)>:
c0008b60:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0008b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b69:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0008b6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b70:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0008b73:	19 c0                	sbb    eax,eax
c0008b75:	83 ca 03             	or     edx,0x3
c0008b78:	83 e0 fc             	and    eax,0xfffffffc
c0008b7b:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0008b82:	0f 20 d8             	mov    eax,cr3
c0008b85:	0f 22 d8             	mov    cr3,eax
c0008b88:	c3                   	ret    
c0008b89:	90                   	nop

c0008b8a <VAS::~VAS()>:
c0008b8a:	83 ec 2c             	sub    esp,0x2c
c0008b8d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008b95:	fa                   	cli    
c0008b96:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c0008b9b:	40                   	inc    eax
c0008b9c:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c0008ba1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0008ba6:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ba8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008bab:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0008bb1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008bb5:	6a 01                	push   0x1
c0008bb7:	50                   	push   eax
c0008bb8:	e8 a3 ff ff ff       	call   c0008b60 <VAS::mapOtherVASIn(bool, VAS*)>
c0008bbd:	83 c4 0c             	add    esp,0xc
c0008bc0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008bc8:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0008bd0:	0f 8f d4 00 00 00    	jg     c0008caa <VAS::~VAS()+0x120>
c0008bd6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008bda:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008bdd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008be1:	c1 e2 02             	shl    edx,0x2
c0008be4:	01 d0                	add    eax,edx
c0008be6:	8b 00                	mov    eax,DWORD PTR [eax]
c0008be8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bf0:	83 e0 01             	and    eax,0x1
c0008bf3:	0f 84 a8 00 00 00    	je     c0008ca1 <VAS::~VAS()+0x117>
c0008bf9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0008c01:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0008c09:	7f 72                	jg     c0008c7d <VAS::~VAS()+0xf3>
c0008c0b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008c0f:	c1 e0 0a             	shl    eax,0xa
c0008c12:	89 c2                	mov    edx,eax
c0008c14:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008c18:	01 d0                	add    eax,edx
c0008c1a:	c1 e0 0c             	shl    eax,0xc
c0008c1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008c21:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0008c26:	8b 00                	mov    eax,DWORD PTR [eax]
c0008c28:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008c2b:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0008c31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008c35:	6a 01                	push   0x1
c0008c37:	50                   	push   eax
c0008c38:	e8 01 fd ff ff       	call   c000893e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0008c3d:	83 c4 0c             	add    esp,0xc
c0008c40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008c48:	8b 00                	mov    eax,DWORD PTR [eax]
c0008c4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008c52:	25 01 04 00 00       	and    eax,0x401
c0008c57:	3d 01 04 00 00       	cmp    eax,0x401
c0008c5c:	75 19                	jne    c0008c77 <VAS::~VAS()+0xed>
c0008c5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008c62:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008c67:	83 ec 0c             	sub    esp,0xc
c0008c6a:	50                   	push   eax
c0008c6b:	e8 18 e2 ff ff       	call   c0006e88 <Phys::freePage(unsigned long)>
c0008c70:	83 c4 10             	add    esp,0x10
c0008c73:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008c77:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0008c7b:	eb 84                	jmp    c0008c01 <VAS::~VAS()+0x77>
c0008c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c81:	25 00 04 00 00       	and    eax,0x400
c0008c86:	74 19                	je     c0008ca1 <VAS::~VAS()+0x117>
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008c91:	83 ec 0c             	sub    esp,0xc
c0008c94:	50                   	push   eax
c0008c95:	e8 ee e1 ff ff       	call   c0006e88 <Phys::freePage(unsigned long)>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008ca1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0008ca5:	e9 1e ff ff ff       	jmp    c0008bc8 <VAS::~VAS()+0x3e>
c0008caa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008cae:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008cb1:	83 ec 0c             	sub    esp,0xc
c0008cb4:	50                   	push   eax
c0008cb5:	e8 cf fc ff ff       	call   c0008989 <Virt::freeKernelVirtualPages(unsigned long)>
c0008cba:	83 c4 10             	add    esp,0x10
c0008cbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008cc1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0008cc4:	83 ec 0c             	sub    esp,0xc
c0008cc7:	50                   	push   eax
c0008cc8:	e8 bb e1 ff ff       	call   c0006e88 <Phys::freePage(unsigned long)>
c0008ccd:	83 c4 10             	add    esp,0x10
c0008cd0:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008cd4:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c0008cd9:	48                   	dec    eax
c0008cda:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c0008cdf:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c0008ce4:	85 c0                	test   eax,eax
c0008ce6:	75 01                	jne    c0008ce9 <VAS::~VAS()+0x15f>
c0008ce8:	fb                   	sti    
c0008ce9:	90                   	nop
c0008cea:	83 c4 2c             	add    esp,0x2c
c0008ced:	c3                   	ret    

c0008cee <VAS::mapPage(unsigned long, unsigned long, int)>:
c0008cee:	55                   	push   ebp
c0008cef:	57                   	push   edi
c0008cf0:	56                   	push   esi
c0008cf1:	53                   	push   ebx
c0008cf2:	83 ec 1c             	sub    esp,0x1c
c0008cf5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0008cf9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0008cfd:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0008d03:	77 0b                	ja     c0008d10 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0008d05:	0f 20 d8             	mov    eax,cr3
c0008d08:	0f 20 d8             	mov    eax,cr3
c0008d0b:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0008d0e:	75 47                	jne    c0008d57 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c0008d10:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008d14:	09 d8                	or     eax,ebx
c0008d16:	a9 ff 0f 00 00       	test   eax,0xfff
c0008d1b:	75 57                	jne    c0008d74 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0008d1d:	89 de                	mov    esi,ebx
c0008d1f:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0008d22:	c1 ee 16             	shr    esi,0x16
c0008d25:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0008d2c:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0008d30:	74 54                	je     c0008d86 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c0008d32:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008d36:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0008d3c:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0008d40:	c1 e6 0c             	shl    esi,0xc
c0008d43:	c1 eb 0a             	shr    ebx,0xa
c0008d46:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0008d4c:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0008d4f:	83 c4 1c             	add    esp,0x1c
c0008d52:	5b                   	pop    ebx
c0008d53:	5e                   	pop    esi
c0008d54:	5f                   	pop    edi
c0008d55:	5d                   	pop    ebp
c0008d56:	c3                   	ret    
c0008d57:	83 ec 0c             	sub    esp,0xc
c0008d5a:	68 b4 cd 01 c0       	push   0xc001cdb4
c0008d5f:	e8 48 0b 00 00       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c0008d64:	83 c4 10             	add    esp,0x10
c0008d67:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008d6b:	09 d8                	or     eax,ebx
c0008d6d:	a9 ff 0f 00 00       	test   eax,0xfff
c0008d72:	74 a9                	je     c0008d1d <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0008d74:	83 ec 0c             	sub    esp,0xc
c0008d77:	68 1c ce 01 c0       	push   0xc001ce1c
c0008d7c:	e8 7a 66 00 00       	call   c000f3fb <Krnl::panic(char const*)>
c0008d81:	83 c4 10             	add    esp,0x10
c0008d84:	eb 97                	jmp    c0008d1d <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0008d86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d8a:	e8 5b e1 ff ff       	call   c0006eea <Phys::allocatePage()>
c0008d8f:	83 ec 0c             	sub    esp,0xc
c0008d92:	89 c5                	mov    ebp,eax
c0008d94:	8b 0d f0 f2 01 c0    	mov    ecx,DWORD PTR ds:0xc001f2f0
c0008d9a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0008d9e:	6a 01                	push   0x1
c0008da0:	e8 b4 f8 ff ff       	call   c0008659 <Virt::allocateKernelVirtualPages(int)>
c0008da5:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0008dac:	6a 01                	push   0x1
c0008dae:	50                   	push   eax
c0008daf:	55                   	push   ebp
c0008db0:	81 cd 07 04 00 00    	or     ebp,0x407
c0008db6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008dba:	51                   	push   ecx
c0008dbb:	e8 28 02 00 00       	call   c0008fe8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0008dc0:	83 c4 1c             	add    esp,0x1c
c0008dc3:	68 00 10 00 00       	push   0x1000
c0008dc8:	6a 00                	push   0x0
c0008dca:	50                   	push   eax
c0008dcb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008dcf:	e8 1c 77 ff ff       	call   c00004f0 <memset>
c0008dd4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0008dd8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0008ddb:	e8 a9 fb ff ff       	call   c0008989 <Virt::freeKernelVirtualPages(unsigned long)>
c0008de0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008de4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0008de7:	83 c4 10             	add    esp,0x10
c0008dea:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0008ded:	e9 40 ff ff ff       	jmp    c0008d32 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0008df2 <VAS::allocatePages(int, int)>:
c0008df2:	55                   	push   ebp
c0008df3:	57                   	push   edi
c0008df4:	56                   	push   esi
c0008df5:	53                   	push   ebx
c0008df6:	83 ec 1c             	sub    esp,0x1c
c0008df9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0008dfd:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c0008e02:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008e08:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0008e0e:	83 e0 01             	and    eax,0x1
c0008e11:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0008e15:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0008e19:	0f 85 cc 00 00 00    	jne    c0008eeb <VAS::allocatePages(int, int)+0xf9>
c0008e1f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0008e22:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008e26:	85 c0                	test   eax,eax
c0008e28:	0f 84 a1 00 00 00    	je     c0008ecf <VAS::allocatePages(int, int)+0xdd>
c0008e2e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0008e32:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008e36:	c1 e6 0c             	shl    esi,0xc
c0008e39:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0008e3d:	85 c0                	test   eax,eax
c0008e3f:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0008e42:	7e 33                	jle    c0008e77 <VAS::allocatePages(int, int)+0x85>
c0008e44:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0008e48:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008e4c:	81 cd 00 04 00 00    	or     ebp,0x400
c0008e52:	e8 93 e0 ff ff       	call   c0006eea <Phys::allocatePage()>
c0008e57:	55                   	push   ebp
c0008e58:	53                   	push   ebx
c0008e59:	50                   	push   eax
c0008e5a:	57                   	push   edi
c0008e5b:	e8 8e fe ff ff       	call   c0008cee <VAS::mapPage(unsigned long, unsigned long, int)>
c0008e60:	83 c4 10             	add    esp,0x10
c0008e63:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0008e68:	74 03                	je     c0008e6d <VAS::allocatePages(int, int)+0x7b>
c0008e6a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0008e6d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0008e73:	39 de                	cmp    esi,ebx
c0008e75:	75 db                	jne    c0008e52 <VAS::allocatePages(int, int)+0x60>
c0008e77:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0008e7c:	75 12                	jne    c0008e90 <VAS::allocatePages(int, int)+0x9e>
c0008e7e:	0f 20 d8             	mov    eax,cr3
c0008e81:	0f 22 d8             	mov    cr3,eax
c0008e84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008e88:	83 c4 1c             	add    esp,0x1c
c0008e8b:	5b                   	pop    ebx
c0008e8c:	5e                   	pop    esi
c0008e8d:	5f                   	pop    edi
c0008e8e:	5d                   	pop    ebp
c0008e8f:	c3                   	ret    
c0008e90:	c1 ee 0a             	shr    esi,0xa
c0008e93:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008e97:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0008e9d:	c1 eb 0a             	shr    ebx,0xa
c0008ea0:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0008ea6:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0008eac:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0008eb2:	39 c3                	cmp    ebx,eax
c0008eb4:	77 ce                	ja     c0008e84 <VAS::allocatePages(int, int)+0x92>
c0008eb6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0008eb9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0008ebf:	39 d8                	cmp    eax,ebx
c0008ec1:	73 f3                	jae    c0008eb6 <VAS::allocatePages(int, int)+0xc4>
c0008ec3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008ec7:	83 c4 1c             	add    esp,0x1c
c0008eca:	5b                   	pop    ebx
c0008ecb:	5e                   	pop    esi
c0008ecc:	5f                   	pop    edi
c0008ecd:	5d                   	pop    ebp
c0008ece:	c3                   	ret    
c0008ecf:	83 ec 0c             	sub    esp,0xc
c0008ed2:	68 40 ce 01 c0       	push   0xc001ce40
c0008ed7:	e8 1f 65 00 00       	call   c000f3fb <Krnl::panic(char const*)>
c0008edc:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0008edf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008ee3:	83 c4 10             	add    esp,0x10
c0008ee6:	e9 43 ff ff ff       	jmp    c0008e2e <VAS::allocatePages(int, int)+0x3c>
c0008eeb:	83 ec 0c             	sub    esp,0xc
c0008eee:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0008ef2:	51                   	push   ecx
c0008ef3:	e8 61 f7 ff ff       	call   c0008659 <Virt::allocateKernelVirtualPages(int)>
c0008ef8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008efc:	83 c4 10             	add    esp,0x10
c0008eff:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0008f04:	0f 87 9b 00 00 00    	ja     c0008fa5 <VAS::allocatePages(int, int)+0x1b3>
c0008f0a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0008f0e:	85 d2                	test   edx,edx
c0008f10:	7e 3c                	jle    c0008f4e <VAS::allocatePages(int, int)+0x15c>
c0008f12:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008f16:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0008f1a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008f1e:	c1 e5 0c             	shl    ebp,0xc
c0008f21:	81 ce 00 04 00 00    	or     esi,0x400
c0008f27:	01 dd                	add    ebp,ebx
c0008f29:	e8 bc df ff ff       	call   c0006eea <Phys::allocatePage()>
c0008f2e:	56                   	push   esi
c0008f2f:	53                   	push   ebx
c0008f30:	50                   	push   eax
c0008f31:	57                   	push   edi
c0008f32:	e8 b7 fd ff ff       	call   c0008cee <VAS::mapPage(unsigned long, unsigned long, int)>
c0008f37:	83 c4 10             	add    esp,0x10
c0008f3a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0008f3f:	74 03                	je     c0008f44 <VAS::allocatePages(int, int)+0x152>
c0008f41:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0008f44:	81 c3 00 10 00 00    	add    ebx,0x1000
c0008f4a:	39 dd                	cmp    ebp,ebx
c0008f4c:	75 db                	jne    c0008f29 <VAS::allocatePages(int, int)+0x137>
c0008f4e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0008f53:	0f 84 25 ff ff ff    	je     c0008e7e <VAS::allocatePages(int, int)+0x8c>
c0008f59:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008f5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008f61:	89 d3                	mov    ebx,edx
c0008f63:	c1 e0 0c             	shl    eax,0xc
c0008f66:	c1 eb 0a             	shr    ebx,0xa
c0008f69:	01 d0                	add    eax,edx
c0008f6b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0008f71:	c1 e8 0a             	shr    eax,0xa
c0008f74:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0008f7a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008f7f:	2d 00 00 40 00       	sub    eax,0x400000
c0008f84:	39 c3                	cmp    ebx,eax
c0008f86:	0f 87 f8 fe ff ff    	ja     c0008e84 <VAS::allocatePages(int, int)+0x92>
c0008f8c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0008f8f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0008f95:	39 d8                	cmp    eax,ebx
c0008f97:	73 f3                	jae    c0008f8c <VAS::allocatePages(int, int)+0x19a>
c0008f99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008f9d:	83 c4 1c             	add    esp,0x1c
c0008fa0:	5b                   	pop    ebx
c0008fa1:	5e                   	pop    esi
c0008fa2:	5f                   	pop    edi
c0008fa3:	5d                   	pop    ebp
c0008fa4:	c3                   	ret    
c0008fa5:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c0008faa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008fb0:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0008fb7:	0f 84 4d ff ff ff    	je     c0008f0a <VAS::allocatePages(int, int)+0x118>
c0008fbd:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0008fc5:	e9 40 ff ff ff       	jmp    c0008f0a <VAS::allocatePages(int, int)+0x118>

c0008fca <VAS::setCPUSpecific(unsigned long)>:
c0008fca:	83 ec 0c             	sub    esp,0xc
c0008fcd:	6a 05                	push   0x5
c0008fcf:	68 00 00 40 c2       	push   0xc2400000
c0008fd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fd8:	50                   	push   eax
c0008fd9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008fdd:	52                   	push   edx
c0008fde:	e8 0b fd ff ff       	call   c0008cee <VAS::mapPage(unsigned long, unsigned long, int)>
c0008fe3:	83 c4 1c             	add    esp,0x1c
c0008fe6:	c3                   	ret    
c0008fe7:	90                   	nop

c0008fe8 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0008fe8:	55                   	push   ebp
c0008fe9:	57                   	push   edi
c0008fea:	56                   	push   esi
c0008feb:	53                   	push   ebx
c0008fec:	83 ec 1c             	sub    esp,0x1c
c0008fef:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c0008ff4:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0008ff8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008ffe:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009002:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009008:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000900c:	83 e0 01             	and    eax,0x1
c000900f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009013:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009017:	85 c0                	test   eax,eax
c0009019:	7e 39                	jle    c0009054 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000901b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000901f:	89 f3                	mov    ebx,esi
c0009021:	c1 e0 0c             	shl    eax,0xc
c0009024:	01 f0                	add    eax,esi
c0009026:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000902a:	55                   	push   ebp
c000902b:	53                   	push   ebx
c000902c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009030:	29 f0                	sub    eax,esi
c0009032:	01 d8                	add    eax,ebx
c0009034:	50                   	push   eax
c0009035:	57                   	push   edi
c0009036:	e8 b3 fc ff ff       	call   c0008cee <VAS::mapPage(unsigned long, unsigned long, int)>
c000903b:	83 c4 10             	add    esp,0x10
c000903e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009043:	74 03                	je     c0009048 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009045:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009048:	81 c3 00 10 00 00    	add    ebx,0x1000
c000904e:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009052:	75 d6                	jne    c000902a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009054:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009059:	75 10                	jne    c000906b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000905b:	0f 20 d8             	mov    eax,cr3
c000905e:	0f 22 d8             	mov    cr3,eax
c0009061:	83 c4 1c             	add    esp,0x1c
c0009064:	89 f0                	mov    eax,esi
c0009066:	5b                   	pop    ebx
c0009067:	5e                   	pop    esi
c0009068:	5f                   	pop    edi
c0009069:	5d                   	pop    ebp
c000906a:	c3                   	ret    
c000906b:	89 f3                	mov    ebx,esi
c000906d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009071:	c1 eb 0a             	shr    ebx,0xa
c0009074:	c1 e0 0c             	shl    eax,0xc
c0009077:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000907d:	01 f0                	add    eax,esi
c000907f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009085:	c1 e8 0a             	shr    eax,0xa
c0009088:	25 00 f0 ff ff       	and    eax,0xfffff000
c000908d:	2d 00 00 40 00       	sub    eax,0x400000
c0009092:	39 c3                	cmp    ebx,eax
c0009094:	77 cb                	ja     c0009061 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009096:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009099:	81 c3 00 10 00 00    	add    ebx,0x1000
c000909f:	39 d8                	cmp    eax,ebx
c00090a1:	73 f3                	jae    c0009096 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00090a3:	83 c4 1c             	add    esp,0x1c
c00090a6:	89 f0                	mov    eax,esi
c00090a8:	5b                   	pop    ebx
c00090a9:	5e                   	pop    esi
c00090aa:	5f                   	pop    edi
c00090ab:	5d                   	pop    ebp
c00090ac:	c3                   	ret    
c00090ad:	90                   	nop

c00090ae <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00090ae:	55                   	push   ebp
c00090af:	57                   	push   edi
c00090b0:	56                   	push   esi
c00090b1:	53                   	push   ebx
c00090b2:	83 ec 1c             	sub    esp,0x1c
c00090b5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00090b9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00090bd:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00090c1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00090c5:	a9 ff 0f 00 00       	test   eax,0xfff
c00090ca:	75 4a                	jne    c0009116 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00090cc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00090d0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00090d3:	c1 eb 16             	shr    ebx,0x16
c00090d6:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00090dd:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00090e1:	74 4d                	je     c0009130 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00090e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00090e7:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00090eb:	c1 e8 0a             	shr    eax,0xa
c00090ee:	80 fa 01             	cmp    dl,0x1
c00090f1:	19 d2                	sbb    edx,edx
c00090f3:	c1 e3 0c             	shl    ebx,0xc
c00090f6:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c00090fa:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009100:	25 fc 0f 00 00       	and    eax,0xffc
c0009105:	01 d8                	add    eax,ebx
c0009107:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000910e:	83 c4 1c             	add    esp,0x1c
c0009111:	5b                   	pop    ebx
c0009112:	5e                   	pop    esi
c0009113:	5f                   	pop    edi
c0009114:	5d                   	pop    ebp
c0009115:	c3                   	ret    
c0009116:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000911a:	83 ec 0c             	sub    esp,0xc
c000911d:	68 6c ce 01 c0       	push   0xc001ce6c
c0009122:	e8 d4 62 00 00       	call   c000f3fb <Krnl::panic(char const*)>
c0009127:	83 c4 10             	add    esp,0x10
c000912a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000912e:	eb 9c                	jmp    c00090cc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009130:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009134:	e8 b1 dd ff ff       	call   c0006eea <Phys::allocatePage()>
c0009139:	83 ec 0c             	sub    esp,0xc
c000913c:	89 c5                	mov    ebp,eax
c000913e:	8b 0d f0 f2 01 c0    	mov    ecx,DWORD PTR ds:0xc001f2f0
c0009144:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009148:	6a 01                	push   0x1
c000914a:	e8 0a f5 ff ff       	call   c0008659 <Virt::allocateKernelVirtualPages(int)>
c000914f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009156:	6a 01                	push   0x1
c0009158:	50                   	push   eax
c0009159:	55                   	push   ebp
c000915a:	81 cd 07 04 00 00    	or     ebp,0x407
c0009160:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009164:	51                   	push   ecx
c0009165:	e8 7e fe ff ff       	call   c0008fe8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000916a:	83 c4 1c             	add    esp,0x1c
c000916d:	68 00 10 00 00       	push   0x1000
c0009172:	6a 00                	push   0x0
c0009174:	50                   	push   eax
c0009175:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009179:	e8 72 73 ff ff       	call   c00004f0 <memset>
c000917e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009182:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009185:	e8 ff f7 ff ff       	call   c0008989 <Virt::freeKernelVirtualPages(unsigned long)>
c000918a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000918d:	83 c4 10             	add    esp,0x10
c0009190:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009193:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009197:	e9 47 ff ff ff       	jmp    c00090e3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000919c <VAS::VAS(bool)>:
c000919c:	53                   	push   ebx
c000919d:	83 ec 28             	sub    esp,0x28
c00091a0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00091a4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00091a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091ac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00091b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091b7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00091be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091c2:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00091c6:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00091c9:	e8 1c dd ff ff       	call   c0006eea <Phys::allocatePage()>
c00091ce:	89 c2                	mov    edx,eax
c00091d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091d4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00091d7:	8b 1d f0 f2 01 c0    	mov    ebx,DWORD PTR ds:0xc001f2f0
c00091dd:	83 ec 0c             	sub    esp,0xc
c00091e0:	6a 01                	push   0x1
c00091e2:	e8 72 f4 ff ff       	call   c0008659 <Virt::allocateKernelVirtualPages(int)>
c00091e7:	83 c4 10             	add    esp,0x10
c00091ea:	89 c2                	mov    edx,eax
c00091ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091f0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00091f3:	83 ec 0c             	sub    esp,0xc
c00091f6:	6a 03                	push   0x3
c00091f8:	6a 01                	push   0x1
c00091fa:	52                   	push   edx
c00091fb:	50                   	push   eax
c00091fc:	53                   	push   ebx
c00091fd:	e8 e6 fd ff ff       	call   c0008fe8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009202:	83 c4 20             	add    esp,0x20
c0009205:	89 c2                	mov    edx,eax
c0009207:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000920b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000920e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009216:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000921e:	7f 1c                	jg     c000923c <VAS::VAS(bool)+0xa0>
c0009220:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009224:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009227:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000922b:	c1 e2 02             	shl    edx,0x2
c000922e:	01 d0                	add    eax,edx
c0009230:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009236:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000923a:	eb da                	jmp    c0009216 <VAS::VAS(bool)+0x7a>
c000923c:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009244:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000924c:	7f 7a                	jg     c00092c8 <VAS::VAS(bool)+0x12c>
c000924e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009252:	2d 00 02 00 00       	sub    eax,0x200
c0009257:	c1 e0 0c             	shl    eax,0xc
c000925a:	83 c8 03             	or     eax,0x3
c000925d:	89 c2                	mov    edx,eax
c000925f:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c0009264:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000926a:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009270:	83 e0 10             	and    eax,0x10
c0009273:	84 c0                	test   al,al
c0009275:	74 07                	je     c000927e <VAS::VAS(bool)+0xe2>
c0009277:	b8 00 01 00 00       	mov    eax,0x100
c000927c:	eb 05                	jmp    c0009283 <VAS::VAS(bool)+0xe7>
c000927e:	b8 00 00 00 00       	mov    eax,0x0
c0009283:	09 d0                	or     eax,edx
c0009285:	89 c1                	mov    ecx,eax
c0009287:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000928b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000928e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009292:	c1 e2 02             	shl    edx,0x2
c0009295:	01 d0                	add    eax,edx
c0009297:	89 ca                	mov    edx,ecx
c0009299:	89 10                	mov    DWORD PTR [eax],edx
c000929b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000929f:	2d 40 03 00 00       	sub    eax,0x340
c00092a4:	83 f8 7f             	cmp    eax,0x7f
c00092a7:	77 16                	ja     c00092bf <VAS::VAS(bool)+0x123>
c00092a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00092ad:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00092b0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00092b4:	c1 e2 02             	shl    edx,0x2
c00092b7:	01 d0                	add    eax,edx
c00092b9:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00092bf:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00092c3:	e9 7c ff ff ff       	jmp    c0009244 <VAS::VAS(bool)+0xa8>
c00092c8:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c00092cd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00092d3:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c00092d9:	83 e0 10             	and    eax,0x10
c00092dc:	84 c0                	test   al,al
c00092de:	74 07                	je     c00092e7 <VAS::VAS(bool)+0x14b>
c00092e0:	b8 03 41 00 00       	mov    eax,0x4103
c00092e5:	eb 05                	jmp    c00092ec <VAS::VAS(bool)+0x150>
c00092e7:	b8 03 40 00 00       	mov    eax,0x4003
c00092ec:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00092f0:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00092f3:	81 c2 20 0c 00 00    	add    edx,0xc20
c00092f9:	89 02                	mov    DWORD PTR [edx],eax
c00092fb:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c0009300:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009306:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000930c:	83 ec 08             	sub    esp,0x8
c000930f:	50                   	push   eax
c0009310:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009314:	e8 b1 fc ff ff       	call   c0008fca <VAS::setCPUSpecific(unsigned long)>
c0009319:	83 c4 10             	add    esp,0x10
c000931c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009320:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009323:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c0009328:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000932e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009334:	83 e0 10             	and    eax,0x10
c0009337:	84 c0                	test   al,al
c0009339:	74 07                	je     c0009342 <VAS::VAS(bool)+0x1a6>
c000933b:	b8 00 01 00 00       	mov    eax,0x100
c0009340:	eb 05                	jmp    c0009347 <VAS::VAS(bool)+0x1ab>
c0009342:	b8 00 00 00 00       	mov    eax,0x0
c0009347:	09 c2                	or     edx,eax
c0009349:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000934d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009350:	05 fc 0f 00 00       	add    eax,0xffc
c0009355:	83 ca 03             	or     edx,0x3
c0009358:	89 10                	mov    DWORD PTR [eax],edx
c000935a:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c000935f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009365:	83 ec 0c             	sub    esp,0xc
c0009368:	50                   	push   eax
c0009369:	e8 12 1c 00 00       	call   c000af80 <Device::getName()>
c000936e:	83 c4 10             	add    esp,0x10
c0009371:	83 ec 08             	sub    esp,0x8
c0009374:	68 0f cf 01 c0       	push   0xc001cf0f
c0009379:	50                   	push   eax
c000937a:	e8 81 73 ff ff       	call   c0000700 <strcmp>
c000937f:	83 c4 10             	add    esp,0x10
c0009382:	85 c0                	test   eax,eax
c0009384:	0f 94 c0             	sete   al
c0009387:	84 c0                	test   al,al
c0009389:	0f 84 87 00 00 00    	je     c0009416 <VAS::VAS(bool)+0x27a>
c000938f:	fa                   	cli    
c0009390:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c0009395:	40                   	inc    eax
c0009396:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c000939b:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c00093a0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00093a6:	05 7c 09 00 00       	add    eax,0x97c
c00093ab:	83 ec 0c             	sub    esp,0xc
c00093ae:	50                   	push   eax
c00093af:	e8 66 d2 ff ff       	call   c000661a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00093b4:	83 c4 10             	add    esp,0x10
c00093b7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00093bc:	89 c3                	mov    ebx,eax
c00093be:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c00093c3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00093c9:	05 7c 09 00 00       	add    eax,0x97c
c00093ce:	83 ec 0c             	sub    esp,0xc
c00093d1:	50                   	push   eax
c00093d2:	e8 43 d2 ff ff       	call   c000661a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00093d7:	83 c4 10             	add    esp,0x10
c00093da:	83 ec 08             	sub    esp,0x8
c00093dd:	50                   	push   eax
c00093de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00093e2:	e8 83 f5 ff ff       	call   c000896a <VAS::getPageTableEntry(unsigned long)>
c00093e7:	83 c4 10             	add    esp,0x10
c00093ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00093ec:	25 00 f0 ff ff       	and    eax,0xfffff000
c00093f1:	6a 11                	push   0x11
c00093f3:	53                   	push   ebx
c00093f4:	50                   	push   eax
c00093f5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00093f9:	e8 f0 f8 ff ff       	call   c0008cee <VAS::mapPage(unsigned long, unsigned long, int)>
c00093fe:	83 c4 10             	add    esp,0x10
c0009401:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c0009406:	48                   	dec    eax
c0009407:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c000940c:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c0009411:	85 c0                	test   eax,eax
c0009413:	75 01                	jne    c0009416 <VAS::VAS(bool)+0x27a>
c0009415:	fb                   	sti    
c0009416:	90                   	nop
c0009417:	83 c4 28             	add    esp,0x28
c000941a:	5b                   	pop    ebx
c000941b:	c3                   	ret    

c000941c <VAS::evict(unsigned long)>:
c000941c:	55                   	push   ebp
c000941d:	57                   	push   edi
c000941e:	56                   	push   esi
c000941f:	53                   	push   ebx
c0009420:	83 ec 1c             	sub    esp,0x1c
c0009423:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009427:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000942b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000942f:	e8 66 f3 ff ff       	call   c000879a <Virt::allocateSwapfilePage()>
c0009434:	8b 0d ac eb 01 c0    	mov    ecx,DWORD PTR ds:0xc001ebac
c000943a:	89 c7                	mov    edi,eax
c000943c:	85 c9                	test   ecx,ecx
c000943e:	7e 3e                	jle    c000947e <VAS::evict(unsigned long)+0x62>
c0009440:	89 ee                	mov    esi,ebp
c0009442:	31 db                	xor    ebx,ebx
c0009444:	83 ec 0c             	sub    esp,0xc
c0009447:	57                   	push   edi
c0009448:	e8 3b f3 ff ff       	call   c0008788 <Virt::swapIDToSector(unsigned long)>
c000944d:	89 34 24             	mov    DWORD PTR [esp],esi
c0009450:	01 d8                	add    eax,ebx
c0009452:	6a 01                	push   0x1
c0009454:	31 d2                	xor    edx,edx
c0009456:	43                   	inc    ebx
c0009457:	52                   	push   edx
c0009458:	81 c6 00 02 00 00    	add    esi,0x200
c000945e:	50                   	push   eax
c000945f:	0f be 05 b8 eb 01 c0 	movsx  eax,BYTE PTR ds:0xc001ebb8
c0009466:	8b 14 85 5c 16 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffde9a4]
c000946d:	52                   	push   edx
c000946e:	e8 8d 2b 00 00       	call   c000c000 <LogicalDisk::write(unsigned long long, int, void*)>
c0009473:	83 c4 20             	add    esp,0x20
c0009476:	39 1d ac eb 01 c0    	cmp    DWORD PTR ds:0xc001ebac,ebx
c000947c:	7f c6                	jg     c0009444 <VAS::evict(unsigned long)+0x28>
c000947e:	83 ec 08             	sub    esp,0x8
c0009481:	c1 e7 0b             	shl    edi,0xb
c0009484:	55                   	push   ebp
c0009485:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009489:	50                   	push   eax
c000948a:	e8 db f4 ff ff       	call   c000896a <VAS::getPageTableEntry(unsigned long)>
c000948f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009491:	89 d1                	mov    ecx,edx
c0009493:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0009499:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000949f:	09 cf                	or     edi,ecx
c00094a1:	89 38                	mov    DWORD PTR [eax],edi
c00094a3:	89 14 24             	mov    DWORD PTR [esp],edx
c00094a6:	ff 05 e8 f2 01 c0    	inc    DWORD PTR ds:0xc001f2e8
c00094ac:	e8 d7 d9 ff ff       	call   c0006e88 <Phys::freePage(unsigned long)>
c00094b1:	0f 20 d8             	mov    eax,cr3
c00094b4:	0f 22 d8             	mov    cr3,eax
c00094b7:	a1 e4 f2 01 c0       	mov    eax,ds:0xc001f2e4
c00094bc:	c7 44 24 40 1d cf 01 c0 	mov    DWORD PTR [esp+0x40],0xc001cf1d
c00094c4:	8d 50 01             	lea    edx,[eax+0x1]
c00094c7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00094cb:	89 15 e4 f2 01 c0    	mov    DWORD PTR ds:0xc001f2e4,edx
c00094d1:	83 c4 2c             	add    esp,0x2c
c00094d4:	5b                   	pop    ebx
c00094d5:	5e                   	pop    esi
c00094d6:	5f                   	pop    edi
c00094d7:	5d                   	pop    ebp
c00094d8:	e9 cf 03 00 00       	jmp    c00098ac <Dbg::kprintf(char const*, ...)>
c00094dd:	90                   	nop

c00094de <VAS::tryLoadBackOffDisk(unsigned long)>:
c00094de:	55                   	push   ebp
c00094df:	57                   	push   edi
c00094e0:	56                   	push   esi
c00094e1:	53                   	push   ebx
c00094e2:	83 ec 14             	sub    esp,0x14
c00094e5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00094e9:	53                   	push   ebx
c00094ea:	68 2e cf 01 c0       	push   0xc001cf2e
c00094ef:	e8 b8 03 00 00       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c00094f4:	83 c4 10             	add    esp,0x10
c00094f7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00094fd:	74 21                	je     c0009520 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c00094ff:	83 ec 08             	sub    esp,0x8
c0009502:	53                   	push   ebx
c0009503:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0009507:	57                   	push   edi
c0009508:	e8 5d f4 ff ff       	call   c000896a <VAS::getPageTableEntry(unsigned long)>
c000950d:	83 c4 10             	add    esp,0x10
c0009510:	89 c6                	mov    esi,eax
c0009512:	85 c0                	test   eax,eax
c0009514:	74 0a                	je     c0009520 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c0009516:	8b 28                	mov    ebp,DWORD PTR [eax]
c0009518:	f7 c5 01 00 00 00    	test   ebp,0x1
c000951e:	74 0a                	je     c000952a <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c0009520:	31 c0                	xor    eax,eax
c0009522:	83 c4 0c             	add    esp,0xc
c0009525:	5b                   	pop    ebx
c0009526:	5e                   	pop    esi
c0009527:	5f                   	pop    edi
c0009528:	5d                   	pop    ebp
c0009529:	c3                   	ret    
c000952a:	e8 bb d9 ff ff       	call   c0006eea <Phys::allocatePage()>
c000952f:	c1 ed 0b             	shr    ebp,0xb
c0009532:	8b 16                	mov    edx,DWORD PTR [esi]
c0009534:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000953a:	09 c2                	or     edx,eax
c000953c:	81 ca 01 08 00 00    	or     edx,0x801
c0009542:	89 16                	mov    DWORD PTR [esi],edx
c0009544:	8b 35 ac eb 01 c0    	mov    esi,DWORD PTR ds:0xc001ebac
c000954a:	85 f6                	test   esi,esi
c000954c:	7e 3e                	jle    c000958c <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000954e:	89 df                	mov    edi,ebx
c0009550:	31 f6                	xor    esi,esi
c0009552:	83 ec 0c             	sub    esp,0xc
c0009555:	55                   	push   ebp
c0009556:	e8 2d f2 ff ff       	call   c0008788 <Virt::swapIDToSector(unsigned long)>
c000955b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000955e:	01 f0                	add    eax,esi
c0009560:	6a 01                	push   0x1
c0009562:	31 d2                	xor    edx,edx
c0009564:	46                   	inc    esi
c0009565:	52                   	push   edx
c0009566:	81 c7 00 02 00 00    	add    edi,0x200
c000956c:	50                   	push   eax
c000956d:	0f be 05 b8 eb 01 c0 	movsx  eax,BYTE PTR ds:0xc001ebb8
c0009574:	8b 0c 85 5c 16 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde9a4]
c000957b:	51                   	push   ecx
c000957c:	e8 13 2a 00 00       	call   c000bf94 <LogicalDisk::read(unsigned long long, int, void*)>
c0009581:	83 c4 20             	add    esp,0x20
c0009584:	39 35 ac eb 01 c0    	cmp    DWORD PTR ds:0xc001ebac,esi
c000958a:	7f c6                	jg     c0009552 <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000958c:	a1 e8 f2 01 c0       	mov    eax,ds:0xc001f2e8
c0009591:	48                   	dec    eax
c0009592:	52                   	push   edx
c0009593:	a3 e8 f2 01 c0       	mov    ds:0xc001f2e8,eax
c0009598:	50                   	push   eax
c0009599:	53                   	push   ebx
c000959a:	68 41 cf 01 c0       	push   0xc001cf41
c000959f:	e8 08 03 00 00       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c00095a4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00095a7:	e8 be f1 ff ff       	call   c000876a <Virt::freeSwapfilePage(unsigned long)>
c00095ac:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c00095b1:	83 c4 10             	add    esp,0x10
c00095b4:	48                   	dec    eax
c00095b5:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c00095ba:	85 c0                	test   eax,eax
c00095bc:	75 01                	jne    c00095bf <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c00095be:	fb                   	sti    
c00095bf:	0f 20 d8             	mov    eax,cr3
c00095c2:	0f 22 d8             	mov    cr3,eax
c00095c5:	b0 01                	mov    al,0x1
c00095c7:	e9 56 ff ff ff       	jmp    c0009522 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c00095cc <VAS::scanForEviction()>:
c00095cc:	57                   	push   edi
c00095cd:	31 ff                	xor    edi,edi
c00095cf:	56                   	push   esi
c00095d0:	53                   	push   ebx
c00095d1:	83 ec 10             	sub    esp,0x10
c00095d4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00095d8:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00095db:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00095e1:	75 0e                	jne    c00095f1 <VAS::scanForEviction()+0x25>
c00095e3:	89 da                	mov    edx,ebx
c00095e5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00095e8:	c1 ea 16             	shr    edx,0x16
c00095eb:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00095ef:	74 4e                	je     c000963f <VAS::scanForEviction()+0x73>
c00095f1:	53                   	push   ebx
c00095f2:	56                   	push   esi
c00095f3:	e8 72 f3 ff ff       	call   c000896a <VAS::getPageTableEntry(unsigned long)>
c00095f8:	5a                   	pop    edx
c00095f9:	8b 10                	mov    edx,DWORD PTR [eax]
c00095fb:	59                   	pop    ecx
c00095fc:	89 d1                	mov    ecx,edx
c00095fe:	81 e1 01 08 00 00    	and    ecx,0x801
c0009604:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000960a:	74 3e                	je     c000964a <VAS::scanForEviction()+0x7e>
c000960c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009612:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0009618:	76 2b                	jbe    c0009645 <VAS::scanForEviction()+0x79>
c000961a:	47                   	inc    edi
c000961b:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0009622:	83 ff 03             	cmp    edi,0x3
c0009625:	74 32                	je     c0009659 <VAS::scanForEviction()+0x8d>
c0009627:	31 db                	xor    ebx,ebx
c0009629:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000962f:	75 c0                	jne    c00095f1 <VAS::scanForEviction()+0x25>
c0009631:	89 da                	mov    edx,ebx
c0009633:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009636:	c1 ea 16             	shr    edx,0x16
c0009639:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000963d:	75 b2                	jne    c00095f1 <VAS::scanForEviction()+0x25>
c000963f:	81 c3 00 00 40 00    	add    ebx,0x400000
c0009645:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0009648:	eb 91                	jmp    c00095db <VAS::scanForEviction()+0xf>
c000964a:	f6 c2 20             	test   dl,0x20
c000964d:	74 13                	je     c0009662 <VAS::scanForEviction()+0x96>
c000964f:	83 e2 df             	and    edx,0xffffffdf
c0009652:	89 10                	mov    DWORD PTR [eax],edx
c0009654:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0009657:	eb b3                	jmp    c000960c <VAS::scanForEviction()+0x40>
c0009659:	83 c4 10             	add    esp,0x10
c000965c:	31 c0                	xor    eax,eax
c000965e:	5b                   	pop    ebx
c000965f:	5e                   	pop    esi
c0009660:	5f                   	pop    edi
c0009661:	c3                   	ret    
c0009662:	83 ec 08             	sub    esp,0x8
c0009665:	89 d0                	mov    eax,edx
c0009667:	25 00 f0 ff ff       	and    eax,0xfffff000
c000966c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0009670:	53                   	push   ebx
c0009671:	68 56 cf 01 c0       	push   0xc001cf56
c0009676:	e8 31 02 00 00       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c000967b:	58                   	pop    eax
c000967c:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000967f:	5a                   	pop    edx
c0009680:	51                   	push   ecx
c0009681:	56                   	push   esi
c0009682:	e8 95 fd ff ff       	call   c000941c <VAS::evict(unsigned long)>
c0009687:	5b                   	pop    ebx
c0009688:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000968b:	5f                   	pop    edi
c000968c:	50                   	push   eax
c000968d:	68 6a cf 01 c0       	push   0xc001cf6a
c0009692:	e8 15 02 00 00       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c0009697:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000969e:	83 c4 10             	add    esp,0x10
c00096a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00096a5:	83 c4 10             	add    esp,0x10
c00096a8:	5b                   	pop    ebx
c00096a9:	5e                   	pop    esi
c00096aa:	5f                   	pop    edi
c00096ab:	c3                   	ret    

c00096ac <mapVASFirstTime>:
c00096ac:	55                   	push   ebp
c00096ad:	57                   	push   edi
c00096ae:	56                   	push   esi
c00096af:	53                   	push   ebx
c00096b0:	83 ec 0c             	sub    esp,0xc
c00096b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00096b8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00096bb:	4a                   	dec    edx
c00096bc:	0f 84 8c 00 00 00    	je     c000974e <mapVASFirstTime+0xa2>
c00096c2:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00096c5:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c00096c8:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00096cd:	c1 e5 15             	shl    ebp,0x15
c00096d0:	bf 00 90 e7 01       	mov    edi,0x1e79000
c00096d5:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c00096db:	29 eb                	sub    ebx,ebp
c00096dd:	29 ef                	sub    edi,ebp
c00096df:	e8 06 d8 ff ff       	call   c0006eea <Phys::allocatePage()>
c00096e4:	83 ec 0c             	sub    esp,0xc
c00096e7:	68 03 04 00 00       	push   0x403
c00096ec:	6a 01                	push   0x1
c00096ee:	53                   	push   ebx
c00096ef:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00096f5:	50                   	push   eax
c00096f6:	56                   	push   esi
c00096f7:	e8 ec f8 ff ff       	call   c0008fe8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00096fc:	83 c4 20             	add    esp,0x20
c00096ff:	39 fb                	cmp    ebx,edi
c0009701:	75 dc                	jne    c00096df <mapVASFirstTime+0x33>
c0009703:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0009708:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000970d:	29 eb                	sub    ebx,ebp
c000970f:	29 ef                	sub    edi,ebp
c0009711:	e8 d4 d7 ff ff       	call   c0006eea <Phys::allocatePage()>
c0009716:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000971a:	19 d2                	sbb    edx,edx
c000971c:	83 ec 0c             	sub    esp,0xc
c000971f:	83 e2 04             	and    edx,0x4
c0009722:	81 c2 03 04 00 00    	add    edx,0x403
c0009728:	52                   	push   edx
c0009729:	6a 01                	push   0x1
c000972b:	53                   	push   ebx
c000972c:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0009732:	50                   	push   eax
c0009733:	56                   	push   esi
c0009734:	e8 af f8 ff ff       	call   c0008fe8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009739:	83 c4 20             	add    esp,0x20
c000973c:	39 df                	cmp    edi,ebx
c000973e:	75 d1                	jne    c0009711 <mapVASFirstTime+0x65>
c0009740:	0f 20 d8             	mov    eax,cr3
c0009743:	0f 22 d8             	mov    cr3,eax
c0009746:	83 c4 0c             	add    esp,0xc
c0009749:	5b                   	pop    ebx
c000974a:	5e                   	pop    esi
c000974b:	5f                   	pop    edi
c000974c:	5d                   	pop    ebp
c000974d:	c3                   	ret    
c000974e:	83 ec 0c             	sub    esp,0xc
c0009751:	68 7d cf 01 c0       	push   0xc001cf7d
c0009756:	e8 51 01 00 00       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c000975b:	83 c4 10             	add    esp,0x10
c000975e:	83 c4 0c             	add    esp,0xc
c0009761:	5b                   	pop    ebx
c0009762:	5e                   	pop    esi
c0009763:	5f                   	pop    edi
c0009764:	5d                   	pop    ebp
c0009765:	c3                   	ret    

c0009766 <__cxa_atexit>:
c0009766:	31 c0                	xor    eax,eax
c0009768:	c3                   	ret    

c0009769 <__cxa_finalize>:
c0009769:	c3                   	ret    

c000976a <__stack_chk_fail>:
c000976a:	55                   	push   ebp
c000976b:	89 e5                	mov    ebp,esp
c000976d:	83 ec 10             	sub    esp,0x10
c0009770:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0009773:	68 96 cf 01 c0       	push   0xc001cf96
c0009778:	e8 2f 01 00 00       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c000977d:	58                   	pop    eax
c000977e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0009781:	5a                   	pop    edx
c0009782:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009785:	68 96 cf 01 c0       	push   0xc001cf96
c000978a:	e8 1d 01 00 00       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c000978f:	c7 04 24 9e cf 01 c0 	mov    DWORD PTR [esp],0xc001cf9e
c0009796:	e8 60 5c 00 00       	call   c000f3fb <Krnl::panic(char const*)>
c000979b:	83 c4 10             	add    esp,0x10
c000979e:	c9                   	leave  
c000979f:	c3                   	ret    

c00097a0 <__cxa_pure_virtual>:
c00097a0:	83 ec 18             	sub    esp,0x18
c00097a3:	68 b6 cf 01 c0       	push   0xc001cfb6
c00097a8:	e8 4e 5c 00 00       	call   c000f3fb <Krnl::panic(char const*)>
c00097ad:	83 c4 1c             	add    esp,0x1c
c00097b0:	c3                   	ret    

c00097b1 <operator new[](unsigned long)>:
c00097b1:	e9 67 d3 ff ff       	jmp    c0006b1d <malloc>

c00097b6 <operator delete(void*, unsigned long)>:
c00097b6:	e9 82 d3 ff ff       	jmp    c0006b3d <rfree>

c00097bb <operator delete[](void*)>:
c00097bb:	e9 7d d3 ff ff       	jmp    c0006b3d <rfree>

c00097c0 <operator delete[](void*, unsigned long)>:
c00097c0:	e9 78 d3 ff ff       	jmp    c0006b3d <rfree>

c00097c5 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00097c5:	55                   	push   ebp
c00097c6:	b9 04 00 00 00       	mov    ecx,0x4
c00097cb:	57                   	push   edi
c00097cc:	56                   	push   esi
c00097cd:	be cb cb 01 c0       	mov    esi,0xc001cbcb
c00097d2:	53                   	push   ebx
c00097d3:	83 ec 20             	sub    esp,0x20
c00097d6:	a1 ca cb 01 c0       	mov    eax,ds:0xc001cbca
c00097db:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00097df:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c00097e3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00097e7:	a1 d7 cb 01 c0       	mov    eax,ds:0xc001cbd7
c00097ec:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00097f0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00097f4:	fc                   	cld    
c00097f5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00097f7:	89 ee                	mov    esi,ebp
c00097f9:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00097fd:	eb 02                	jmp    c0009801 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c00097ff:	89 c6                	mov    esi,eax
c0009801:	31 d2                	xor    edx,edx
c0009803:	41                   	inc    ecx
c0009804:	89 f0                	mov    eax,esi
c0009806:	f7 f3                	div    ebx
c0009808:	39 de                	cmp    esi,ebx
c000980a:	73 f3                	jae    c00097ff <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000980c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000980f:	eb 02                	jmp    c0009813 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c0009811:	89 c5                	mov    ebp,eax
c0009813:	31 d2                	xor    edx,edx
c0009815:	49                   	dec    ecx
c0009816:	89 e8                	mov    eax,ebp
c0009818:	f7 f3                	div    ebx
c000981a:	39 dd                	cmp    ebp,ebx
c000981c:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0009820:	88 11                	mov    BYTE PTR [ecx],dl
c0009822:	73 ed                	jae    c0009811 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c0009824:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009828:	83 c4 20             	add    esp,0x20
c000982b:	5b                   	pop    ebx
c000982c:	5e                   	pop    esi
c000982d:	5f                   	pop    edi
c000982e:	5d                   	pop    ebp
c000982f:	c3                   	ret    

c0009830 <Dbg::logc(char)>:
c0009830:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009834:	f6 05 20 f2 01 c0 10 	test   BYTE PTR ds:0xc001f220,0x10
c000983b:	75 12                	jne    c000984f <Dbg::logc(char)+0x1f>
c000983d:	ba fd 03 00 00       	mov    edx,0x3fd
c0009842:	ec                   	in     al,dx
c0009843:	a8 20                	test   al,0x20
c0009845:	74 fb                	je     c0009842 <Dbg::logc(char)+0x12>
c0009847:	ba f8 03 00 00       	mov    edx,0x3f8
c000984c:	88 c8                	mov    al,cl
c000984e:	ee                   	out    dx,al
c000984f:	c3                   	ret    

c0009850 <Dbg::logs(char*)>:
c0009850:	53                   	push   ebx
c0009851:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009855:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0009858:	84 c0                	test   al,al
c000985a:	74 0f                	je     c000986b <Dbg::logs(char*)+0x1b>
c000985c:	50                   	push   eax
c000985d:	43                   	inc    ebx
c000985e:	e8 cd ff ff ff       	call   c0009830 <Dbg::logc(char)>
c0009863:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0009866:	5a                   	pop    edx
c0009867:	84 c0                	test   al,al
c0009869:	75 f1                	jne    c000985c <Dbg::logs(char*)+0xc>
c000986b:	5b                   	pop    ebx
c000986c:	c3                   	ret    

c000986d <Dbg::logWriteInt(unsigned int)>:
c000986d:	83 ec 10             	sub    esp,0x10
c0009870:	6a 0a                	push   0xa
c0009872:	8d 44 24 08          	lea    eax,[esp+0x8]
c0009876:	50                   	push   eax
c0009877:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000987b:	50                   	push   eax
c000987c:	e8 44 ff ff ff       	call   c00097c5 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0009881:	50                   	push   eax
c0009882:	e8 c9 ff ff ff       	call   c0009850 <Dbg::logs(char*)>
c0009887:	83 c4 20             	add    esp,0x20
c000988a:	c3                   	ret    

c000988b <Dbg::logWriteIntBase(unsigned int, int)>:
c000988b:	83 ec 10             	sub    esp,0x10
c000988e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009892:	50                   	push   eax
c0009893:	8d 44 24 08          	lea    eax,[esp+0x8]
c0009897:	50                   	push   eax
c0009898:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000989c:	52                   	push   edx
c000989d:	e8 23 ff ff ff       	call   c00097c5 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00098a2:	50                   	push   eax
c00098a3:	e8 a8 ff ff ff       	call   c0009850 <Dbg::logs(char*)>
c00098a8:	83 c4 20             	add    esp,0x20
c00098ab:	c3                   	ret    

c00098ac <Dbg::kprintf(char const*, ...)>:
c00098ac:	55                   	push   ebp
c00098ad:	57                   	push   edi
c00098ae:	56                   	push   esi
c00098af:	53                   	push   ebx
c00098b0:	83 ec 0c             	sub    esp,0xc
c00098b3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00098b7:	f6 05 20 f2 01 c0 10 	test   BYTE PTR ds:0xc001f220,0x10
c00098be:	74 08                	je     c00098c8 <Dbg::kprintf(char const*, ...)+0x1c>
c00098c0:	83 c4 0c             	add    esp,0xc
c00098c3:	5b                   	pop    ebx
c00098c4:	5e                   	pop    esi
c00098c5:	5f                   	pop    edi
c00098c6:	5d                   	pop    ebp
c00098c7:	c3                   	ret    
c00098c8:	8d 44 24 24          	lea    eax,[esp+0x24]
c00098cc:	31 ff                	xor    edi,edi
c00098ce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00098d2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00098d5:	84 c0                	test   al,al
c00098d7:	74 e7                	je     c00098c0 <Dbg::kprintf(char const*, ...)+0x14>
c00098d9:	8d 77 01             	lea    esi,[edi+0x1]
c00098dc:	3c 25                	cmp    al,0x25
c00098de:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c00098e1:	75 47                	jne    c000992a <Dbg::kprintf(char const*, ...)+0x7e>
c00098e3:	83 c7 02             	add    edi,0x2
c00098e6:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00098e9:	8d 34 3b             	lea    esi,[ebx+edi*1]
c00098ec:	83 e8 25             	sub    eax,0x25
c00098ef:	3c 53                	cmp    al,0x53
c00098f1:	0f 87 d2 00 00 00    	ja     c00099c9 <Dbg::kprintf(char const*, ...)+0x11d>
c00098f7:	25 ff 00 00 00       	and    eax,0xff
c00098fc:	ff 24 85 cc cf 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe3034]
c0009903:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009907:	89 c8                	mov    eax,ecx
c0009909:	83 c1 04             	add    ecx,0x4
c000990c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0009910:	8b 28                	mov    ebp,DWORD PTR [eax]
c0009912:	55                   	push   ebp
c0009913:	e8 55 ff ff ff       	call   c000986d <Dbg::logWriteInt(unsigned int)>
c0009918:	58                   	pop    eax
c0009919:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000991c:	84 c0                	test   al,al
c000991e:	74 a0                	je     c00098c0 <Dbg::kprintf(char const*, ...)+0x14>
c0009920:	8d 77 01             	lea    esi,[edi+0x1]
c0009923:	3c 25                	cmp    al,0x25
c0009925:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0009928:	74 b9                	je     c00098e3 <Dbg::kprintf(char const*, ...)+0x37>
c000992a:	50                   	push   eax
c000992b:	89 f7                	mov    edi,esi
c000992d:	e8 fe fe ff ff       	call   c0009830 <Dbg::logc(char)>
c0009932:	89 ee                	mov    esi,ebp
c0009934:	58                   	pop    eax
c0009935:	eb e2                	jmp    c0009919 <Dbg::kprintf(char const*, ...)+0x6d>
c0009937:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000993b:	89 c8                	mov    eax,ecx
c000993d:	83 c1 04             	add    ecx,0x4
c0009940:	8b 00                	mov    eax,DWORD PTR [eax]
c0009942:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0009946:	50                   	push   eax
c0009947:	e8 04 ff ff ff       	call   c0009850 <Dbg::logs(char*)>
c000994c:	58                   	pop    eax
c000994d:	eb ca                	jmp    c0009919 <Dbg::kprintf(char const*, ...)+0x6d>
c000994f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009953:	89 d0                	mov    eax,edx
c0009955:	83 c2 04             	add    edx,0x4
c0009958:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000995c:	8b 00                	mov    eax,DWORD PTR [eax]
c000995e:	50                   	push   eax
c000995f:	e8 09 ff ff ff       	call   c000986d <Dbg::logWriteInt(unsigned int)>
c0009964:	58                   	pop    eax
c0009965:	eb b2                	jmp    c0009919 <Dbg::kprintf(char const*, ...)+0x6d>
c0009967:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000996b:	89 d0                	mov    eax,edx
c000996d:	83 c2 04             	add    edx,0x4
c0009970:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0009973:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009977:	50                   	push   eax
c0009978:	e8 b3 fe ff ff       	call   c0009830 <Dbg::logc(char)>
c000997d:	58                   	pop    eax
c000997e:	eb 99                	jmp    c0009919 <Dbg::kprintf(char const*, ...)+0x6d>
c0009980:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009984:	89 c8                	mov    eax,ecx
c0009986:	83 c1 04             	add    ecx,0x4
c0009989:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000998d:	6a 10                	push   0x10
c000998f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009991:	51                   	push   ecx
c0009992:	e8 f4 fe ff ff       	call   c000988b <Dbg::logWriteIntBase(unsigned int, int)>
c0009997:	5d                   	pop    ebp
c0009998:	58                   	pop    eax
c0009999:	e9 7b ff ff ff       	jmp    c0009919 <Dbg::kprintf(char const*, ...)+0x6d>
c000999e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00099a2:	89 d0                	mov    eax,edx
c00099a4:	83 c2 08             	add    edx,0x8
c00099a7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00099ab:	6a 10                	push   0x10
c00099ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00099af:	50                   	push   eax
c00099b0:	e8 d6 fe ff ff       	call   c000988b <Dbg::logWriteIntBase(unsigned int, int)>
c00099b5:	58                   	pop    eax
c00099b6:	5a                   	pop    edx
c00099b7:	e9 5d ff ff ff       	jmp    c0009919 <Dbg::kprintf(char const*, ...)+0x6d>
c00099bc:	6a 25                	push   0x25
c00099be:	e8 6d fe ff ff       	call   c0009830 <Dbg::logc(char)>
c00099c3:	5a                   	pop    edx
c00099c4:	e9 50 ff ff ff       	jmp    c0009919 <Dbg::kprintf(char const*, ...)+0x6d>
c00099c9:	6a 25                	push   0x25
c00099cb:	e8 60 fe ff ff       	call   c0009830 <Dbg::logc(char)>
c00099d0:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00099d4:	50                   	push   eax
c00099d5:	e8 56 fe ff ff       	call   c0009830 <Dbg::logc(char)>
c00099da:	5a                   	pop    edx
c00099db:	59                   	pop    ecx
c00099dc:	e9 38 ff ff ff       	jmp    c0009919 <Dbg::kprintf(char const*, ...)+0x6d>
c00099e1:	90                   	nop

c00099e2 <File::read(unsigned long long, void*, int*)>:
c00099e2:	53                   	push   ebx
c00099e3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00099e7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00099eb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00099f2:	3c 19                	cmp    al,0x19
c00099f4:	77 35                	ja     c0009a2b <File::read(unsigned long long, void*, int*)+0x49>
c00099f6:	8b 04 85 60 17 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde8a0]
c00099fd:	85 c0                	test   eax,eax
c00099ff:	74 2a                	je     c0009a2b <File::read(unsigned long long, void*, int*)+0x49>
c0009a01:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009a07:	85 c0                	test   eax,eax
c0009a09:	74 20                	je     c0009a2b <File::read(unsigned long long, void*, int*)+0x49>
c0009a0b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009a0f:	74 21                	je     c0009a32 <File::read(unsigned long long, void*, int*)+0x50>
c0009a11:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009a13:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0009a17:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0009a1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a21:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a25:	5b                   	pop    ebx
c0009a26:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0009a29:	ff e0                	jmp    eax
c0009a2b:	b8 0b 00 00 00       	mov    eax,0xb
c0009a30:	eb 05                	jmp    c0009a37 <File::read(unsigned long long, void*, int*)+0x55>
c0009a32:	b8 05 00 00 00       	mov    eax,0x5
c0009a37:	5b                   	pop    ebx
c0009a38:	c3                   	ret    
c0009a39:	90                   	nop

c0009a3a <File::write(unsigned long long, void*, int*)>:
c0009a3a:	53                   	push   ebx
c0009a3b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a3f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009a43:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0009a4a:	3c 19                	cmp    al,0x19
c0009a4c:	77 35                	ja     c0009a83 <File::write(unsigned long long, void*, int*)+0x49>
c0009a4e:	8b 04 85 60 17 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde8a0]
c0009a55:	85 c0                	test   eax,eax
c0009a57:	74 2a                	je     c0009a83 <File::write(unsigned long long, void*, int*)+0x49>
c0009a59:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009a5f:	85 c0                	test   eax,eax
c0009a61:	74 20                	je     c0009a83 <File::write(unsigned long long, void*, int*)+0x49>
c0009a63:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009a67:	74 21                	je     c0009a8a <File::write(unsigned long long, void*, int*)+0x50>
c0009a69:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009a6b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0009a6f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0009a75:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a79:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a7d:	5b                   	pop    ebx
c0009a7e:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0009a81:	ff e0                	jmp    eax
c0009a83:	b8 0b 00 00 00       	mov    eax,0xb
c0009a88:	eb 05                	jmp    c0009a8f <File::write(unsigned long long, void*, int*)+0x55>
c0009a8a:	b8 05 00 00 00       	mov    eax,0x5
c0009a8f:	5b                   	pop    ebx
c0009a90:	c3                   	ret    
c0009a91:	90                   	nop

c0009a92 <Directory::read(unsigned long long, void*, int*)>:
c0009a92:	53                   	push   ebx
c0009a93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a97:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009a9b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0009aa2:	3c 19                	cmp    al,0x19
c0009aa4:	77 35                	ja     c0009adb <Directory::read(unsigned long long, void*, int*)+0x49>
c0009aa6:	8b 04 85 60 17 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde8a0]
c0009aad:	85 c0                	test   eax,eax
c0009aaf:	74 2a                	je     c0009adb <Directory::read(unsigned long long, void*, int*)+0x49>
c0009ab1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009ab7:	85 c0                	test   eax,eax
c0009ab9:	74 20                	je     c0009adb <Directory::read(unsigned long long, void*, int*)+0x49>
c0009abb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009abf:	74 21                	je     c0009ae2 <Directory::read(unsigned long long, void*, int*)+0x50>
c0009ac1:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ac3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0009ac7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0009acd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ad1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ad5:	5b                   	pop    ebx
c0009ad6:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0009ad9:	ff e0                	jmp    eax
c0009adb:	b8 0b 00 00 00       	mov    eax,0xb
c0009ae0:	eb 05                	jmp    c0009ae7 <Directory::read(unsigned long long, void*, int*)+0x55>
c0009ae2:	b8 05 00 00 00       	mov    eax,0x5
c0009ae7:	5b                   	pop    ebx
c0009ae8:	c3                   	ret    
c0009ae9:	90                   	nop

c0009aea <Directory::write(unsigned long long, void*, int*)>:
c0009aea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aee:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0009af5:	b8 0b 00 00 00       	mov    eax,0xb
c0009afa:	80 fa 19             	cmp    dl,0x19
c0009afd:	77 18                	ja     c0009b17 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0009aff:	8b 14 95 60 17 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde8a0]
c0009b06:	85 d2                	test   edx,edx
c0009b08:	74 0d                	je     c0009b17 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0009b0a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0009b11:	19 c0                	sbb    eax,eax
c0009b13:	83 e0 0a             	and    eax,0xa
c0009b16:	40                   	inc    eax
c0009b17:	c3                   	ret    

c0009b18 <File::isAtty()>:
c0009b18:	31 c0                	xor    eax,eax
c0009b1a:	c3                   	ret    
c0009b1b:	90                   	nop

c0009b1c <Directory::isAtty()>:
c0009b1c:	31 c0                	xor    eax,eax
c0009b1e:	c3                   	ret    
c0009b1f:	90                   	nop

c0009b20 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0009b20:	b8 0a 00 00 00       	mov    eax,0xa
c0009b25:	c3                   	ret    

c0009b26 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0009b26:	b8 0a 00 00 00       	mov    eax,0xa
c0009b2b:	c3                   	ret    

c0009b2c <Filesystem::allocateSwapfile(char const*, int)>:
c0009b2c:	31 c0                	xor    eax,eax
c0009b2e:	31 d2                	xor    edx,edx
c0009b30:	c3                   	ret    
c0009b31:	90                   	nop

c0009b32 <File::~File()>:
c0009b32:	83 ec 0c             	sub    esp,0xc
c0009b35:	ba 8c d1 01 c0       	mov    edx,0xc001d18c
c0009b3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b3e:	89 10                	mov    DWORD PTR [eax],edx
c0009b40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b44:	83 ec 0c             	sub    esp,0xc
c0009b47:	50                   	push   eax
c0009b48:	e8 ab e8 ff ff       	call   c00083f8 <UnixFile::~UnixFile()>
c0009b4d:	83 c4 10             	add    esp,0x10
c0009b50:	90                   	nop
c0009b51:	83 c4 0c             	add    esp,0xc
c0009b54:	c3                   	ret    
c0009b55:	90                   	nop

c0009b56 <File::~File()>:
c0009b56:	83 ec 0c             	sub    esp,0xc
c0009b59:	83 ec 0c             	sub    esp,0xc
c0009b5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b60:	e8 cd ff ff ff       	call   c0009b32 <File::~File()>
c0009b65:	83 c4 10             	add    esp,0x10
c0009b68:	83 ec 08             	sub    esp,0x8
c0009b6b:	68 14 01 00 00       	push   0x114
c0009b70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b74:	e8 3d fc ff ff       	call   c00097b6 <operator delete(void*, unsigned long)>
c0009b79:	83 c4 10             	add    esp,0x10
c0009b7c:	83 c4 0c             	add    esp,0xc
c0009b7f:	c3                   	ret    

c0009b80 <Directory::~Directory()>:
c0009b80:	83 ec 0c             	sub    esp,0xc
c0009b83:	ba a8 d1 01 c0       	mov    edx,0xc001d1a8
c0009b88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b8c:	89 10                	mov    DWORD PTR [eax],edx
c0009b8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b92:	83 ec 0c             	sub    esp,0xc
c0009b95:	50                   	push   eax
c0009b96:	e8 5d e8 ff ff       	call   c00083f8 <UnixFile::~UnixFile()>
c0009b9b:	83 c4 10             	add    esp,0x10
c0009b9e:	90                   	nop
c0009b9f:	83 c4 0c             	add    esp,0xc
c0009ba2:	c3                   	ret    
c0009ba3:	90                   	nop

c0009ba4 <Directory::~Directory()>:
c0009ba4:	83 ec 0c             	sub    esp,0xc
c0009ba7:	83 ec 0c             	sub    esp,0xc
c0009baa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009bae:	e8 cd ff ff ff       	call   c0009b80 <Directory::~Directory()>
c0009bb3:	83 c4 10             	add    esp,0x10
c0009bb6:	83 ec 08             	sub    esp,0x8
c0009bb9:	68 14 01 00 00       	push   0x114
c0009bbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009bc2:	e8 ef fb ff ff       	call   c00097b6 <operator delete(void*, unsigned long)>
c0009bc7:	83 c4 10             	add    esp,0x10
c0009bca:	83 c4 0c             	add    esp,0xc
c0009bcd:	c3                   	ret    

c0009bce <Filesystem::Filesystem()>:
c0009bce:	ba 24 d1 01 c0       	mov    edx,0xc001d124
c0009bd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009bd7:	89 10                	mov    DWORD PTR [eax],edx
c0009bd9:	8b 15 f4 f2 01 c0    	mov    edx,DWORD PTR ds:0xc001f2f4
c0009bdf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009be3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009be6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009bea:	a3 f4 f2 01 c0       	mov    ds:0xc001f2f4,eax
c0009bef:	90                   	nop
c0009bf0:	c3                   	ret    
c0009bf1:	90                   	nop

c0009bf2 <Filesystem::~Filesystem()>:
c0009bf2:	ba 24 d1 01 c0       	mov    edx,0xc001d124
c0009bf7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009bfb:	89 10                	mov    DWORD PTR [eax],edx
c0009bfd:	90                   	nop
c0009bfe:	c3                   	ret    
c0009bff:	90                   	nop

c0009c00 <Filesystem::~Filesystem()>:
c0009c00:	83 ec 0c             	sub    esp,0xc
c0009c03:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009c07:	e8 e6 ff ff ff       	call   c0009bf2 <Filesystem::~Filesystem()>
c0009c0c:	83 c4 04             	add    esp,0x4
c0009c0f:	83 ec 08             	sub    esp,0x8
c0009c12:	6a 08                	push   0x8
c0009c14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c18:	e8 99 fb ff ff       	call   c00097b6 <operator delete(void*, unsigned long)>
c0009c1d:	83 c4 10             	add    esp,0x10
c0009c20:	83 c4 0c             	add    esp,0xc
c0009c23:	c3                   	ret    

c0009c24 <Fs::getcwd(Process*, char*, int)>:
c0009c24:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009c28:	31 c0                	xor    eax,eax
c0009c2a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0009c2d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0009c31:	7d 15                	jge    c0009c48 <Fs::getcwd(Process*, char*, int)+0x24>
c0009c33:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009c37:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0009c3e:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0009c41:	84 c9                	test   cl,cl
c0009c43:	74 06                	je     c0009c4b <Fs::getcwd(Process*, char*, int)+0x27>
c0009c45:	40                   	inc    eax
c0009c46:	eb e2                	jmp    c0009c2a <Fs::getcwd(Process*, char*, int)+0x6>
c0009c48:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0009c4b:	31 c0                	xor    eax,eax
c0009c4d:	c3                   	ret    

c0009c4e <Fs::initVFS()>:
c0009c4e:	83 ec 18             	sub    esp,0x18
c0009c51:	6a 08                	push   0x8
c0009c53:	e8 c5 ce ff ff       	call   c0006b1d <malloc>
c0009c58:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c5b:	e8 a4 c2 00 00       	call   c0015f04 <FAT::FAT()>
c0009c60:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0009c67:	e8 b1 ce ff ff       	call   c0006b1d <malloc>
c0009c6c:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c6f:	e8 c0 d5 00 00       	call   c0017234 <ISO9660::ISO9660()>
c0009c74:	83 c4 1c             	add    esp,0x1c
c0009c77:	c3                   	ret    

c0009c78 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0009c78:	55                   	push   ebp
c0009c79:	57                   	push   edi
c0009c7a:	56                   	push   esi
c0009c7b:	53                   	push   ebx
c0009c7c:	81 ec 10 04 00 00    	sub    esp,0x410
c0009c82:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0009c89:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0009c90:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0009c97:	68 00 04 00 00       	push   0x400
c0009c9c:	6a 00                	push   0x0
c0009c9e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0009ca2:	56                   	push   esi
c0009ca3:	e8 48 68 ff ff       	call   c00004f0 <memset>
c0009ca8:	83 c4 10             	add    esp,0x10
c0009cab:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0009caf:	75 0b                	jne    c0009cbc <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0009cb1:	50                   	push   eax
c0009cb2:	50                   	push   eax
c0009cb3:	57                   	push   edi
c0009cb4:	56                   	push   esi
c0009cb5:	e8 66 69 ff ff       	call   c0000620 <strcpy>
c0009cba:	eb 41                	jmp    c0009cfd <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0009cbc:	8a 07                	mov    al,BYTE PTR [edi]
c0009cbe:	3c 5c                	cmp    al,0x5c
c0009cc0:	74 04                	je     c0009cc6 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0009cc2:	3c 2f                	cmp    al,0x2f
c0009cc4:	75 18                	jne    c0009cde <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0009cc6:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0009cc9:	3c 60                	cmp    al,0x60
c0009ccb:	7e 03                	jle    c0009cd0 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0009ccd:	83 e8 20             	sub    eax,0x20
c0009cd0:	88 04 24             	mov    BYTE PTR [esp],al
c0009cd3:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0009cda:	50                   	push   eax
c0009cdb:	50                   	push   eax
c0009cdc:	eb 18                	jmp    c0009cf6 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0009cde:	50                   	push   eax
c0009cdf:	50                   	push   eax
c0009ce0:	55                   	push   ebp
c0009ce1:	56                   	push   esi
c0009ce2:	e8 39 69 ff ff       	call   c0000620 <strcpy>
c0009ce7:	5a                   	pop    edx
c0009ce8:	59                   	pop    ecx
c0009ce9:	68 df dd 01 c0       	push   0xc001dddf
c0009cee:	56                   	push   esi
c0009cef:	e8 ec 6a ff ff       	call   c00007e0 <strcat>
c0009cf4:	5d                   	pop    ebp
c0009cf5:	58                   	pop    eax
c0009cf6:	57                   	push   edi
c0009cf7:	56                   	push   esi
c0009cf8:	e8 e3 6a ff ff       	call   c00007e0 <strcat>
c0009cfd:	83 c4 10             	add    esp,0x10
c0009d00:	8a 04 24             	mov    al,BYTE PTR [esp]
c0009d03:	3c 60                	cmp    al,0x60
c0009d05:	7e 03                	jle    c0009d0a <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0009d07:	83 e8 20             	sub    eax,0x20
c0009d0a:	88 04 24             	mov    BYTE PTR [esp],al
c0009d0d:	88 03                	mov    BYTE PTR [ebx],al
c0009d0f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0009d16:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0009d1c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0009d20:	bf 03 00 00 00       	mov    edi,0x3
c0009d25:	b8 03 00 00 00       	mov    eax,0x3
c0009d2a:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0009d2d:	84 d2                	test   dl,dl
c0009d2f:	0f 84 91 00 00 00    	je     c0009dc6 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0009d35:	8d 4f 01             	lea    ecx,[edi+0x1]
c0009d38:	80 fa 5c             	cmp    dl,0x5c
c0009d3b:	74 05                	je     c0009d42 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0009d3d:	80 fa 2f             	cmp    dl,0x2f
c0009d40:	75 12                	jne    c0009d54 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0009d42:	89 c5                	mov    ebp,eax
c0009d44:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0009d49:	74 09                	je     c0009d54 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0009d4b:	40                   	inc    eax
c0009d4c:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0009d50:	89 cf                	mov    edi,ecx
c0009d52:	eb d6                	jmp    c0009d2a <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0009d54:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0009d59:	75 5b                	jne    c0009db6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0009d5b:	80 fa 2e             	cmp    dl,0x2e
c0009d5e:	75 56                	jne    c0009db6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0009d60:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0009d64:	74 19                	je     c0009d7f <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0009d66:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0009d6b:	74 53                	je     c0009dc0 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0009d6d:	89 f9                	mov    ecx,edi
c0009d6f:	41                   	inc    ecx
c0009d70:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0009d73:	80 fa 2f             	cmp    dl,0x2f
c0009d76:	74 f7                	je     c0009d6f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0009d78:	80 fa 5c             	cmp    dl,0x5c
c0009d7b:	74 f2                	je     c0009d6f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0009d7d:	eb d1                	jmp    c0009d50 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009d7f:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0009d84:	74 3a                	je     c0009dc0 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0009d86:	83 f8 03             	cmp    eax,0x3
c0009d89:	74 c5                	je     c0009d50 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009d8b:	41                   	inc    ecx
c0009d8c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0009d8f:	80 fa 2f             	cmp    dl,0x2f
c0009d92:	74 f7                	je     c0009d8b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0009d94:	80 fa 5c             	cmp    dl,0x5c
c0009d97:	74 f2                	je     c0009d8b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0009d99:	48                   	dec    eax
c0009d9a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0009d9e:	75 06                	jne    c0009da6 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0009da0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0009da4:	eb f3                	jmp    c0009d99 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0009da6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0009daa:	74 07                	je     c0009db3 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0009dac:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0009db0:	48                   	dec    eax
c0009db1:	eb f3                	jmp    c0009da6 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0009db3:	40                   	inc    eax
c0009db4:	eb 9a                	jmp    c0009d50 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009db6:	80 fa 2f             	cmp    dl,0x2f
c0009db9:	74 95                	je     c0009d50 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009dbb:	80 fa 5c             	cmp    dl,0x5c
c0009dbe:	74 90                	je     c0009d50 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009dc0:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0009dc3:	40                   	inc    eax
c0009dc4:	eb 8a                	jmp    c0009d50 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009dc6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0009dca:	83 ec 0c             	sub    esp,0xc
c0009dcd:	53                   	push   ebx
c0009dce:	e8 8d 67 ff ff       	call   c0000560 <strlen>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0009ddb:	75 26                	jne    c0009e03 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0009ddd:	83 ec 0c             	sub    esp,0xc
c0009de0:	53                   	push   ebx
c0009de1:	e8 7a 67 ff ff       	call   c0000560 <strlen>
c0009de6:	83 c4 10             	add    esp,0x10
c0009de9:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0009dee:	74 26                	je     c0009e16 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0009df0:	83 ec 0c             	sub    esp,0xc
c0009df3:	53                   	push   ebx
c0009df4:	e8 67 67 ff ff       	call   c0000560 <strlen>
c0009df9:	83 c4 10             	add    esp,0x10
c0009dfc:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0009e01:	eb c7                	jmp    c0009dca <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0009e03:	83 ec 0c             	sub    esp,0xc
c0009e06:	53                   	push   ebx
c0009e07:	e8 54 67 ff ff       	call   c0000560 <strlen>
c0009e0c:	83 c4 10             	add    esp,0x10
c0009e0f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0009e14:	74 c7                	je     c0009ddd <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0009e16:	81 c4 0c 04 00 00    	add    esp,0x40c
c0009e1c:	5b                   	pop    ebx
c0009e1d:	5e                   	pop    esi
c0009e1e:	5f                   	pop    edi
c0009e1f:	5d                   	pop    ebp
c0009e20:	c3                   	ret    
c0009e21:	90                   	nop

c0009e22 <File::File(char const*, Process*)>:
c0009e22:	83 ec 0c             	sub    esp,0xc
c0009e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e29:	83 ec 08             	sub    esp,0x8
c0009e2c:	6a 00                	push   0x0
c0009e2e:	50                   	push   eax
c0009e2f:	e8 e2 e3 ff ff       	call   c0008216 <UnixFile::UnixFile(int)>
c0009e34:	83 c4 10             	add    esp,0x10
c0009e37:	ba 8c d1 01 c0       	mov    edx,0xc001d18c
c0009e3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e40:	89 10                	mov    DWORD PTR [eax],edx
c0009e42:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e46:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0009e4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e50:	83 c0 0d             	add    eax,0xd
c0009e53:	83 ec 04             	sub    esp,0x4
c0009e56:	52                   	push   edx
c0009e57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e5b:	50                   	push   eax
c0009e5c:	e8 17 fe ff ff       	call   c0009c78 <Fs::standardiseFiles(char*, char const*, char const*)>
c0009e61:	83 c4 10             	add    esp,0x10
c0009e64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e68:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0009e6b:	8d 50 bf             	lea    edx,[eax-0x41]
c0009e6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e72:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0009e78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e7c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0009e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e84:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0009e8a:	25 ff 00 00 00       	and    eax,0xff
c0009e8f:	8b 04 85 60 17 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde8a0]
c0009e96:	85 c0                	test   eax,eax
c0009e98:	74 42                	je     c0009edc <File::File(char const*, Process*)+0xba>
c0009e9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e9e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0009ea4:	25 ff 00 00 00       	and    eax,0xff
c0009ea9:	8b 04 85 60 17 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde8a0]
c0009eb0:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009eb6:	85 c0                	test   eax,eax
c0009eb8:	75 22                	jne    c0009edc <File::File(char const*, Process*)+0xba>
c0009eba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ebe:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0009ec4:	25 ff 00 00 00       	and    eax,0xff
c0009ec9:	8b 04 85 60 17 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde8a0]
c0009ed0:	83 ec 0c             	sub    esp,0xc
c0009ed3:	50                   	push   eax
c0009ed4:	e8 f9 1f 00 00       	call   c000bed2 <LogicalDisk::mount()>
c0009ed9:	83 c4 10             	add    esp,0x10
c0009edc:	90                   	nop
c0009edd:	83 c4 0c             	add    esp,0xc
c0009ee0:	c3                   	ret    
c0009ee1:	90                   	nop

c0009ee2 <File::open(FileOpenMode)>:
c0009ee2:	53                   	push   ebx
c0009ee3:	b8 0b 00 00 00       	mov    eax,0xb
c0009ee8:	83 ec 08             	sub    esp,0x8
c0009eeb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009eef:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0009ef6:	80 fa 19             	cmp    dl,0x19
c0009ef9:	77 40                	ja     c0009f3b <File::open(FileOpenMode)+0x59>
c0009efb:	8b 14 95 60 17 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde8a0]
c0009f02:	85 d2                	test   edx,edx
c0009f04:	74 35                	je     c0009f3b <File::open(FileOpenMode)+0x59>
c0009f06:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0009f0c:	85 d2                	test   edx,edx
c0009f0e:	74 2b                	je     c0009f3b <File::open(FileOpenMode)+0x59>
c0009f10:	b8 06 00 00 00       	mov    eax,0x6
c0009f15:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0009f19:	75 20                	jne    c0009f3b <File::open(FileOpenMode)+0x59>
c0009f1b:	8b 02                	mov    eax,DWORD PTR [edx]
c0009f1d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0009f23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f27:	51                   	push   ecx
c0009f28:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0009f2b:	51                   	push   ecx
c0009f2c:	52                   	push   edx
c0009f2d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0009f30:	83 c4 10             	add    esp,0x10
c0009f33:	85 c0                	test   eax,eax
c0009f35:	75 04                	jne    c0009f3b <File::open(FileOpenMode)+0x59>
c0009f37:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0009f3b:	83 c4 08             	add    esp,0x8
c0009f3e:	5b                   	pop    ebx
c0009f3f:	c3                   	ret    

c0009f40 <File::close()>:
c0009f40:	53                   	push   ebx
c0009f41:	b8 0b 00 00 00       	mov    eax,0xb
c0009f46:	83 ec 08             	sub    esp,0x8
c0009f49:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009f4d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0009f54:	80 fa 19             	cmp    dl,0x19
c0009f57:	77 41                	ja     c0009f9a <File::close()+0x5a>
c0009f59:	8b 1c 95 60 17 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffde8a0]
c0009f60:	85 db                	test   ebx,ebx
c0009f62:	74 36                	je     c0009f9a <File::close()+0x5a>
c0009f64:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0009f6b:	74 2d                	je     c0009f9a <File::close()+0x5a>
c0009f6d:	b8 05 00 00 00       	mov    eax,0x5
c0009f72:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0009f76:	74 22                	je     c0009f9a <File::close()+0x5a>
c0009f78:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0009f7c:	8b 04 95 60 17 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffde8a0]
c0009f83:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009f89:	53                   	push   ebx
c0009f8a:	53                   	push   ebx
c0009f8b:	8b 10                	mov    edx,DWORD PTR [eax]
c0009f8d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0009f93:	50                   	push   eax
c0009f94:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0009f97:	83 c4 10             	add    esp,0x10
c0009f9a:	83 c4 08             	add    esp,0x8
c0009f9d:	5b                   	pop    ebx
c0009f9e:	c3                   	ret    
c0009f9f:	90                   	nop

c0009fa0 <File::seek(unsigned long long)>:
c0009fa0:	56                   	push   esi
c0009fa1:	53                   	push   ebx
c0009fa2:	b8 0b 00 00 00       	mov    eax,0xb
c0009fa7:	51                   	push   ecx
c0009fa8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009fac:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009fb0:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0009fb7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009fbb:	80 fa 19             	cmp    dl,0x19
c0009fbe:	77 31                	ja     c0009ff1 <File::seek(unsigned long long)+0x51>
c0009fc0:	8b 14 95 60 17 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde8a0]
c0009fc7:	85 d2                	test   edx,edx
c0009fc9:	74 26                	je     c0009ff1 <File::seek(unsigned long long)+0x51>
c0009fcb:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0009fd1:	85 d2                	test   edx,edx
c0009fd3:	74 1c                	je     c0009ff1 <File::seek(unsigned long long)+0x51>
c0009fd5:	b8 05 00 00 00       	mov    eax,0x5
c0009fda:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0009fde:	74 11                	je     c0009ff1 <File::seek(unsigned long long)+0x51>
c0009fe0:	8b 02                	mov    eax,DWORD PTR [edx]
c0009fe2:	53                   	push   ebx
c0009fe3:	51                   	push   ecx
c0009fe4:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0009fea:	52                   	push   edx
c0009feb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0009fee:	83 c4 10             	add    esp,0x10
c0009ff1:	5a                   	pop    edx
c0009ff2:	5b                   	pop    ebx
c0009ff3:	5e                   	pop    esi
c0009ff4:	c3                   	ret    
c0009ff5:	90                   	nop

c0009ff6 <File::tell(unsigned long long*)>:
c0009ff6:	83 ec 0c             	sub    esp,0xc
c0009ff9:	b8 0b 00 00 00       	mov    eax,0xb
c0009ffe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a002:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000a009:	80 fa 19             	cmp    dl,0x19
c000a00c:	77 34                	ja     c000a042 <File::tell(unsigned long long*)+0x4c>
c000a00e:	8b 14 95 60 17 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde8a0]
c000a015:	85 d2                	test   edx,edx
c000a017:	74 29                	je     c000a042 <File::tell(unsigned long long*)+0x4c>
c000a019:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000a01f:	85 d2                	test   edx,edx
c000a021:	74 1f                	je     c000a042 <File::tell(unsigned long long*)+0x4c>
c000a023:	b8 05 00 00 00       	mov    eax,0x5
c000a028:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000a02c:	74 14                	je     c000a042 <File::tell(unsigned long long*)+0x4c>
c000a02e:	50                   	push   eax
c000a02f:	8b 02                	mov    eax,DWORD PTR [edx]
c000a031:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a035:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000a03b:	52                   	push   edx
c000a03c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	83 c4 0c             	add    esp,0xc
c000a045:	c3                   	ret    

c000a046 <File::rewind()>:
c000a046:	83 ec 10             	sub    esp,0x10
c000a049:	6a 00                	push   0x0
c000a04b:	6a 00                	push   0x0
c000a04d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a051:	e8 4a ff ff ff       	call   c0009fa0 <File::seek(unsigned long long)>
c000a056:	83 c4 1c             	add    esp,0x1c
c000a059:	c3                   	ret    

c000a05a <File::unlink()>:
c000a05a:	83 ec 0c             	sub    esp,0xc
c000a05d:	b8 0b 00 00 00       	mov    eax,0xb
c000a062:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a066:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a06d:	80 f9 19             	cmp    cl,0x19
c000a070:	77 2f                	ja     c000a0a1 <File::unlink()+0x47>
c000a072:	8b 0c 8d 60 17 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde8a0]
c000a079:	85 c9                	test   ecx,ecx
c000a07b:	74 24                	je     c000a0a1 <File::unlink()+0x47>
c000a07d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a083:	85 c9                	test   ecx,ecx
c000a085:	74 1a                	je     c000a0a1 <File::unlink()+0x47>
c000a087:	b8 06 00 00 00       	mov    eax,0x6
c000a08c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a090:	75 0f                	jne    c000a0a1 <File::unlink()+0x47>
c000a092:	83 c2 0d             	add    edx,0xd
c000a095:	50                   	push   eax
c000a096:	50                   	push   eax
c000a097:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a099:	52                   	push   edx
c000a09a:	51                   	push   ecx
c000a09b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000a09e:	83 c4 10             	add    esp,0x10
c000a0a1:	83 c4 0c             	add    esp,0xc
c000a0a4:	c3                   	ret    
c000a0a5:	90                   	nop

c000a0a6 <File::rename(char const*)>:
c000a0a6:	83 ec 0c             	sub    esp,0xc
c000a0a9:	b8 0b 00 00 00       	mov    eax,0xb
c000a0ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a0b2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a0b9:	80 f9 19             	cmp    cl,0x19
c000a0bc:	77 32                	ja     c000a0f0 <File::rename(char const*)+0x4a>
c000a0be:	8b 0c 8d 60 17 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde8a0]
c000a0c5:	85 c9                	test   ecx,ecx
c000a0c7:	74 27                	je     c000a0f0 <File::rename(char const*)+0x4a>
c000a0c9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a0cf:	85 c9                	test   ecx,ecx
c000a0d1:	74 1d                	je     c000a0f0 <File::rename(char const*)+0x4a>
c000a0d3:	b8 06 00 00 00       	mov    eax,0x6
c000a0d8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a0dc:	75 12                	jne    c000a0f0 <File::rename(char const*)+0x4a>
c000a0de:	83 c2 0d             	add    edx,0xd
c000a0e1:	50                   	push   eax
c000a0e2:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a0e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a0e8:	52                   	push   edx
c000a0e9:	51                   	push   ecx
c000a0ea:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000a0ed:	83 c4 10             	add    esp,0x10
c000a0f0:	83 c4 0c             	add    esp,0xc
c000a0f3:	c3                   	ret    

c000a0f4 <File::chfatattr(unsigned char, unsigned char)>:
c000a0f4:	57                   	push   edi
c000a0f5:	b8 0b 00 00 00       	mov    eax,0xb
c000a0fa:	56                   	push   esi
c000a0fb:	53                   	push   ebx
c000a0fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a100:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a104:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a10b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000a10f:	80 f9 19             	cmp    cl,0x19
c000a112:	77 37                	ja     c000a14b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000a114:	8b 0c 8d 60 17 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde8a0]
c000a11b:	85 c9                	test   ecx,ecx
c000a11d:	74 2c                	je     c000a14b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000a11f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a125:	85 c9                	test   ecx,ecx
c000a127:	74 22                	je     c000a14b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000a129:	b8 06 00 00 00       	mov    eax,0x6
c000a12e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a132:	75 17                	jne    c000a14b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000a134:	8b 39                	mov    edi,DWORD PTR [ecx]
c000a136:	89 f0                	mov    eax,esi
c000a138:	83 c2 0d             	add    edx,0xd
c000a13b:	0f b6 f0             	movzx  esi,al
c000a13e:	0f b6 db             	movzx  ebx,bl
c000a141:	56                   	push   esi
c000a142:	53                   	push   ebx
c000a143:	52                   	push   edx
c000a144:	51                   	push   ecx
c000a145:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000a148:	83 c4 10             	add    esp,0x10
c000a14b:	5b                   	pop    ebx
c000a14c:	5e                   	pop    esi
c000a14d:	5f                   	pop    edi
c000a14e:	c3                   	ret    
c000a14f:	90                   	nop

c000a150 <File::exists()>:
c000a150:	83 ec 0c             	sub    esp,0xc
c000a153:	31 c0                	xor    eax,eax
c000a155:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a159:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a160:	80 f9 19             	cmp    cl,0x19
c000a163:	77 24                	ja     c000a189 <File::exists()+0x39>
c000a165:	8b 0c 8d 60 17 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde8a0]
c000a16c:	85 c9                	test   ecx,ecx
c000a16e:	74 19                	je     c000a189 <File::exists()+0x39>
c000a170:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a176:	85 c9                	test   ecx,ecx
c000a178:	74 0f                	je     c000a189 <File::exists()+0x39>
c000a17a:	83 c2 0d             	add    edx,0xd
c000a17d:	50                   	push   eax
c000a17e:	50                   	push   eax
c000a17f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a181:	52                   	push   edx
c000a182:	51                   	push   ecx
c000a183:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000a186:	83 c4 10             	add    esp,0x10
c000a189:	83 c4 0c             	add    esp,0xc
c000a18c:	c3                   	ret    
c000a18d:	90                   	nop

c000a18e <File::stat(unsigned long long*, bool*)>:
c000a18e:	56                   	push   esi
c000a18f:	53                   	push   ebx
c000a190:	50                   	push   eax
c000a191:	b8 0b 00 00 00       	mov    eax,0xb
c000a196:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a19a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a19e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a1a5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a1a9:	80 f9 19             	cmp    cl,0x19
c000a1ac:	77 3d                	ja     c000a1eb <File::stat(unsigned long long*, bool*)+0x5d>
c000a1ae:	8b 0c 8d 60 17 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde8a0]
c000a1b5:	85 c9                	test   ecx,ecx
c000a1b7:	74 32                	je     c000a1eb <File::stat(unsigned long long*, bool*)+0x5d>
c000a1b9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a1bf:	85 c9                	test   ecx,ecx
c000a1c1:	74 28                	je     c000a1eb <File::stat(unsigned long long*, bool*)+0x5d>
c000a1c3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a1c5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a1c9:	74 13                	je     c000a1de <File::stat(unsigned long long*, bool*)+0x50>
c000a1cb:	83 ec 04             	sub    esp,0x4
c000a1ce:	56                   	push   esi
c000a1cf:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000a1d5:	51                   	push   ecx
c000a1d6:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000a1d9:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a1dc:	eb 0a                	jmp    c000a1e8 <File::stat(unsigned long long*, bool*)+0x5a>
c000a1de:	53                   	push   ebx
c000a1df:	83 c2 0d             	add    edx,0xd
c000a1e2:	56                   	push   esi
c000a1e3:	52                   	push   edx
c000a1e4:	51                   	push   ecx
c000a1e5:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000a1e8:	83 c4 10             	add    esp,0x10
c000a1eb:	5a                   	pop    edx
c000a1ec:	5b                   	pop    ebx
c000a1ed:	5e                   	pop    esi
c000a1ee:	c3                   	ret    

c000a1ef <Fs::setcwd(Process*, char*)>:
c000a1ef:	55                   	push   ebp
c000a1f0:	57                   	push   edi
c000a1f1:	56                   	push   esi
c000a1f2:	53                   	push   ebx
c000a1f3:	81 ec 20 02 00 00    	sub    esp,0x220
c000a1f9:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000a200:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000a206:	57                   	push   edi
c000a207:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000a20e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000a212:	56                   	push   esi
c000a213:	e8 60 fa ff ff       	call   c0009c78 <Fs::standardiseFiles(char*, char const*, char const*)>
c000a218:	89 34 24             	mov    DWORD PTR [esp],esi
c000a21b:	e8 40 63 ff ff       	call   c0000560 <strlen>
c000a220:	83 c4 10             	add    esp,0x10
c000a223:	83 f8 02             	cmp    eax,0x2
c000a226:	77 15                	ja     c000a23d <Fs::setcwd(Process*, char*)+0x4e>
c000a228:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000a22d:	83 eb 41             	sub    ebx,0x41
c000a230:	8b 04 9d 60 17 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffde8a0]
c000a237:	85 c0                	test   eax,eax
c000a239:	75 1c                	jne    c000a257 <Fs::setcwd(Process*, char*)+0x68>
c000a23b:	eb 2f                	jmp    c000a26c <Fs::setcwd(Process*, char*)+0x7d>
c000a23d:	83 ec 0c             	sub    esp,0xc
c000a240:	56                   	push   esi
c000a241:	e8 1a 63 ff ff       	call   c0000560 <strlen>
c000a246:	83 c4 10             	add    esp,0x10
c000a249:	83 f8 03             	cmp    eax,0x3
c000a24c:	75 57                	jne    c000a2a5 <Fs::setcwd(Process*, char*)+0xb6>
c000a24e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000a253:	75 50                	jne    c000a2a5 <Fs::setcwd(Process*, char*)+0xb6>
c000a255:	eb d1                	jmp    c000a228 <Fs::setcwd(Process*, char*)+0x39>
c000a257:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000a25e:	75 0c                	jne    c000a26c <Fs::setcwd(Process*, char*)+0x7d>
c000a260:	83 ec 0c             	sub    esp,0xc
c000a263:	50                   	push   eax
c000a264:	e8 69 1c 00 00       	call   c000bed2 <LogicalDisk::mount()>
c000a269:	83 c4 10             	add    esp,0x10
c000a26c:	b8 03 00 00 00       	mov    eax,0x3
c000a271:	83 fb 19             	cmp    ebx,0x19
c000a274:	0f 87 c6 00 00 00    	ja     c000a340 <Fs::setcwd(Process*, char*)+0x151>
c000a27a:	8b 14 9d 60 17 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffde8a0]
c000a281:	b8 05 00 00 00       	mov    eax,0x5
c000a286:	85 d2                	test   edx,edx
c000a288:	0f 84 b2 00 00 00    	je     c000a340 <Fs::setcwd(Process*, char*)+0x151>
c000a28e:	b8 06 00 00 00       	mov    eax,0x6
c000a293:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000a29a:	0f 85 92 00 00 00    	jne    c000a332 <Fs::setcwd(Process*, char*)+0x143>
c000a2a0:	e9 9b 00 00 00       	jmp    c000a340 <Fs::setcwd(Process*, char*)+0x151>
c000a2a5:	83 ec 0c             	sub    esp,0xc
c000a2a8:	68 14 01 00 00       	push   0x114
c000a2ad:	e8 6b c8 ff ff       	call   c0006b1d <malloc>
c000a2b2:	83 c4 0c             	add    esp,0xc
c000a2b5:	89 c3                	mov    ebx,eax
c000a2b7:	55                   	push   ebp
c000a2b8:	56                   	push   esi
c000a2b9:	50                   	push   eax
c000a2ba:	e8 63 fb ff ff       	call   c0009e22 <File::File(char const*, Process*)>
c000a2bf:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a2c4:	83 c4 0c             	add    esp,0xc
c000a2c7:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000a2cb:	50                   	push   eax
c000a2cc:	8d 44 24 10          	lea    eax,[esp+0x10]
c000a2d0:	50                   	push   eax
c000a2d1:	53                   	push   ebx
c000a2d2:	e8 b7 fe ff ff       	call   c000a18e <File::stat(unsigned long long*, bool*)>
c000a2d7:	83 c4 10             	add    esp,0x10
c000a2da:	83 f8 02             	cmp    eax,0x2
c000a2dd:	74 04                	je     c000a2e3 <Fs::setcwd(Process*, char*)+0xf4>
c000a2df:	85 c0                	test   eax,eax
c000a2e1:	74 1c                	je     c000a2ff <Fs::setcwd(Process*, char*)+0x110>
c000a2e3:	b8 01 00 00 00       	mov    eax,0x1
c000a2e8:	85 db                	test   ebx,ebx
c000a2ea:	74 54                	je     c000a340 <Fs::setcwd(Process*, char*)+0x151>
c000a2ec:	83 ec 0c             	sub    esp,0xc
c000a2ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a2f1:	53                   	push   ebx
c000a2f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a2f5:	83 c4 10             	add    esp,0x10
c000a2f8:	b8 01 00 00 00       	mov    eax,0x1
c000a2fd:	eb 41                	jmp    c000a340 <Fs::setcwd(Process*, char*)+0x151>
c000a2ff:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000a304:	75 1c                	jne    c000a322 <Fs::setcwd(Process*, char*)+0x133>
c000a306:	b8 02 00 00 00       	mov    eax,0x2
c000a30b:	85 db                	test   ebx,ebx
c000a30d:	74 31                	je     c000a340 <Fs::setcwd(Process*, char*)+0x151>
c000a30f:	83 ec 0c             	sub    esp,0xc
c000a312:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a314:	53                   	push   ebx
c000a315:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	b8 02 00 00 00       	mov    eax,0x2
c000a320:	eb 1e                	jmp    c000a340 <Fs::setcwd(Process*, char*)+0x151>
c000a322:	85 db                	test   ebx,ebx
c000a324:	74 0c                	je     c000a332 <Fs::setcwd(Process*, char*)+0x143>
c000a326:	83 ec 0c             	sub    esp,0xc
c000a329:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a32b:	53                   	push   ebx
c000a32c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a32f:	83 c4 10             	add    esp,0x10
c000a332:	50                   	push   eax
c000a333:	50                   	push   eax
c000a334:	56                   	push   esi
c000a335:	57                   	push   edi
c000a336:	e8 e5 62 ff ff       	call   c0000620 <strcpy>
c000a33b:	83 c4 10             	add    esp,0x10
c000a33e:	31 c0                	xor    eax,eax
c000a340:	81 c4 1c 02 00 00    	add    esp,0x21c
c000a346:	5b                   	pop    ebx
c000a347:	5e                   	pop    esi
c000a348:	5f                   	pop    edi
c000a349:	5d                   	pop    ebp
c000a34a:	c3                   	ret    
c000a34b:	90                   	nop

c000a34c <Directory::Directory(char const*, Process*)>:
c000a34c:	83 ec 0c             	sub    esp,0xc
c000a34f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a353:	83 ec 08             	sub    esp,0x8
c000a356:	6a 00                	push   0x0
c000a358:	50                   	push   eax
c000a359:	e8 b8 de ff ff       	call   c0008216 <UnixFile::UnixFile(int)>
c000a35e:	83 c4 10             	add    esp,0x10
c000a361:	ba a8 d1 01 c0       	mov    edx,0xc001d1a8
c000a366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a36a:	89 10                	mov    DWORD PTR [eax],edx
c000a36c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a370:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000a376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a37a:	83 c0 0d             	add    eax,0xd
c000a37d:	83 ec 04             	sub    esp,0x4
c000a380:	52                   	push   edx
c000a381:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a385:	50                   	push   eax
c000a386:	e8 ed f8 ff ff       	call   c0009c78 <Fs::standardiseFiles(char*, char const*, char const*)>
c000a38b:	83 c4 10             	add    esp,0x10
c000a38e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a392:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000a395:	8d 50 bf             	lea    edx,[eax-0x41]
c000a398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a39c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000a3a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3a6:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000a3aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3ae:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000a3b4:	25 ff 00 00 00       	and    eax,0xff
c000a3b9:	8b 04 85 60 17 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde8a0]
c000a3c0:	85 c0                	test   eax,eax
c000a3c2:	74 42                	je     c000a406 <Directory::Directory(char const*, Process*)+0xba>
c000a3c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3c8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000a3ce:	25 ff 00 00 00       	and    eax,0xff
c000a3d3:	8b 04 85 60 17 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde8a0]
c000a3da:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a3e0:	85 c0                	test   eax,eax
c000a3e2:	75 22                	jne    c000a406 <Directory::Directory(char const*, Process*)+0xba>
c000a3e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3e8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000a3ee:	25 ff 00 00 00       	and    eax,0xff
c000a3f3:	8b 04 85 60 17 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde8a0]
c000a3fa:	83 ec 0c             	sub    esp,0xc
c000a3fd:	50                   	push   eax
c000a3fe:	e8 cf 1a 00 00       	call   c000bed2 <LogicalDisk::mount()>
c000a403:	83 c4 10             	add    esp,0x10
c000a406:	90                   	nop
c000a407:	83 c4 0c             	add    esp,0xc
c000a40a:	c3                   	ret    
c000a40b:	90                   	nop

c000a40c <Directory::open()>:
c000a40c:	53                   	push   ebx
c000a40d:	b8 0b 00 00 00       	mov    eax,0xb
c000a412:	83 ec 08             	sub    esp,0x8
c000a415:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a419:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000a420:	80 fa 19             	cmp    dl,0x19
c000a423:	77 3d                	ja     c000a462 <Directory::open()+0x56>
c000a425:	8b 14 95 60 17 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde8a0]
c000a42c:	85 d2                	test   edx,edx
c000a42e:	74 32                	je     c000a462 <Directory::open()+0x56>
c000a430:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000a436:	85 d2                	test   edx,edx
c000a438:	74 28                	je     c000a462 <Directory::open()+0x56>
c000a43a:	b8 06 00 00 00       	mov    eax,0x6
c000a43f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000a443:	75 1d                	jne    c000a462 <Directory::open()+0x56>
c000a445:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000a44b:	50                   	push   eax
c000a44c:	8b 02                	mov    eax,DWORD PTR [edx]
c000a44e:	51                   	push   ecx
c000a44f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000a452:	51                   	push   ecx
c000a453:	52                   	push   edx
c000a454:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000a457:	83 c4 10             	add    esp,0x10
c000a45a:	85 c0                	test   eax,eax
c000a45c:	75 04                	jne    c000a462 <Directory::open()+0x56>
c000a45e:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000a462:	83 c4 08             	add    esp,0x8
c000a465:	5b                   	pop    ebx
c000a466:	c3                   	ret    
c000a467:	90                   	nop

c000a468 <Directory::close()>:
c000a468:	53                   	push   ebx
c000a469:	b8 0b 00 00 00       	mov    eax,0xb
c000a46e:	83 ec 08             	sub    esp,0x8
c000a471:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a475:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000a47c:	80 fa 19             	cmp    dl,0x19
c000a47f:	77 41                	ja     c000a4c2 <Directory::close()+0x5a>
c000a481:	8b 1c 95 60 17 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffde8a0]
c000a488:	85 db                	test   ebx,ebx
c000a48a:	74 36                	je     c000a4c2 <Directory::close()+0x5a>
c000a48c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000a493:	74 2d                	je     c000a4c2 <Directory::close()+0x5a>
c000a495:	b8 05 00 00 00       	mov    eax,0x5
c000a49a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000a49e:	74 22                	je     c000a4c2 <Directory::close()+0x5a>
c000a4a0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000a4a4:	8b 04 95 60 17 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffde8a0]
c000a4ab:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a4b1:	53                   	push   ebx
c000a4b2:	53                   	push   ebx
c000a4b3:	8b 10                	mov    edx,DWORD PTR [eax]
c000a4b5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000a4bb:	50                   	push   eax
c000a4bc:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000a4bf:	83 c4 10             	add    esp,0x10
c000a4c2:	83 c4 08             	add    esp,0x8
c000a4c5:	5b                   	pop    ebx
c000a4c6:	c3                   	ret    
c000a4c7:	90                   	nop

c000a4c8 <Directory::unlink()>:
c000a4c8:	83 ec 0c             	sub    esp,0xc
c000a4cb:	b8 0b 00 00 00       	mov    eax,0xb
c000a4d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a4d4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a4db:	80 f9 19             	cmp    cl,0x19
c000a4de:	77 2f                	ja     c000a50f <Directory::unlink()+0x47>
c000a4e0:	8b 0c 8d 60 17 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde8a0]
c000a4e7:	85 c9                	test   ecx,ecx
c000a4e9:	74 24                	je     c000a50f <Directory::unlink()+0x47>
c000a4eb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a4f1:	85 c9                	test   ecx,ecx
c000a4f3:	74 1a                	je     c000a50f <Directory::unlink()+0x47>
c000a4f5:	b8 06 00 00 00       	mov    eax,0x6
c000a4fa:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a4fe:	75 0f                	jne    c000a50f <Directory::unlink()+0x47>
c000a500:	83 c2 0d             	add    edx,0xd
c000a503:	50                   	push   eax
c000a504:	50                   	push   eax
c000a505:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a507:	52                   	push   edx
c000a508:	51                   	push   ecx
c000a509:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000a50c:	83 c4 10             	add    esp,0x10
c000a50f:	83 c4 0c             	add    esp,0xc
c000a512:	c3                   	ret    
c000a513:	90                   	nop

c000a514 <Directory::rename(char const*)>:
c000a514:	83 ec 0c             	sub    esp,0xc
c000a517:	b8 0b 00 00 00       	mov    eax,0xb
c000a51c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a520:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a527:	80 f9 19             	cmp    cl,0x19
c000a52a:	77 32                	ja     c000a55e <Directory::rename(char const*)+0x4a>
c000a52c:	8b 0c 8d 60 17 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde8a0]
c000a533:	85 c9                	test   ecx,ecx
c000a535:	74 27                	je     c000a55e <Directory::rename(char const*)+0x4a>
c000a537:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a53d:	85 c9                	test   ecx,ecx
c000a53f:	74 1d                	je     c000a55e <Directory::rename(char const*)+0x4a>
c000a541:	b8 06 00 00 00       	mov    eax,0x6
c000a546:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a54a:	75 12                	jne    c000a55e <Directory::rename(char const*)+0x4a>
c000a54c:	83 c2 0d             	add    edx,0xd
c000a54f:	50                   	push   eax
c000a550:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a552:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a556:	52                   	push   edx
c000a557:	51                   	push   ecx
c000a558:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000a55b:	83 c4 10             	add    esp,0x10
c000a55e:	83 c4 0c             	add    esp,0xc
c000a561:	c3                   	ret    

c000a562 <Directory::exists()>:
c000a562:	83 ec 0c             	sub    esp,0xc
c000a565:	31 c0                	xor    eax,eax
c000a567:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a56b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a572:	80 f9 19             	cmp    cl,0x19
c000a575:	77 24                	ja     c000a59b <Directory::exists()+0x39>
c000a577:	8b 0c 8d 60 17 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde8a0]
c000a57e:	85 c9                	test   ecx,ecx
c000a580:	74 19                	je     c000a59b <Directory::exists()+0x39>
c000a582:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a588:	85 c9                	test   ecx,ecx
c000a58a:	74 0f                	je     c000a59b <Directory::exists()+0x39>
c000a58c:	83 c2 0d             	add    edx,0xd
c000a58f:	50                   	push   eax
c000a590:	50                   	push   eax
c000a591:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a593:	52                   	push   edx
c000a594:	51                   	push   ecx
c000a595:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000a598:	83 c4 10             	add    esp,0x10
c000a59b:	83 c4 0c             	add    esp,0xc
c000a59e:	c3                   	ret    
c000a59f:	90                   	nop

c000a5a0 <Directory::read(dirent*)>:
c000a5a0:	83 ec 1c             	sub    esp,0x1c
c000a5a3:	b8 0b 00 00 00       	mov    eax,0xb
c000a5a8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5ac:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000a5b3:	80 fa 19             	cmp    dl,0x19
c000a5b6:	77 30                	ja     c000a5e8 <Directory::read(dirent*)+0x48>
c000a5b8:	8b 14 95 60 17 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde8a0]
c000a5bf:	85 d2                	test   edx,edx
c000a5c1:	74 25                	je     c000a5e8 <Directory::read(dirent*)+0x48>
c000a5c3:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000a5ca:	74 1c                	je     c000a5e8 <Directory::read(dirent*)+0x48>
c000a5cc:	83 ec 0c             	sub    esp,0xc
c000a5cf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a5d1:	8d 54 24 18          	lea    edx,[esp+0x18]
c000a5d5:	52                   	push   edx
c000a5d6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a5da:	6a 00                	push   0x0
c000a5dc:	68 10 01 00 00       	push   0x110
c000a5e1:	51                   	push   ecx
c000a5e2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000a5e5:	83 c4 20             	add    esp,0x20
c000a5e8:	83 c4 1c             	add    esp,0x1c
c000a5eb:	c3                   	ret    

c000a5ec <Directory::create()>:
c000a5ec:	83 ec 0c             	sub    esp,0xc
c000a5ef:	b8 0b 00 00 00       	mov    eax,0xb
c000a5f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a5f8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a5ff:	80 f9 19             	cmp    cl,0x19
c000a602:	77 2f                	ja     c000a633 <Directory::create()+0x47>
c000a604:	8b 0c 8d 60 17 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde8a0]
c000a60b:	85 c9                	test   ecx,ecx
c000a60d:	74 24                	je     c000a633 <Directory::create()+0x47>
c000a60f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a615:	85 c9                	test   ecx,ecx
c000a617:	74 1a                	je     c000a633 <Directory::create()+0x47>
c000a619:	b8 06 00 00 00       	mov    eax,0x6
c000a61e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a622:	75 0f                	jne    c000a633 <Directory::create()+0x47>
c000a624:	83 c2 0d             	add    edx,0xd
c000a627:	50                   	push   eax
c000a628:	50                   	push   eax
c000a629:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a62b:	52                   	push   edx
c000a62c:	51                   	push   ecx
c000a62d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000a630:	83 c4 10             	add    esp,0x10
c000a633:	83 c4 0c             	add    esp,0xc
c000a636:	c3                   	ret    
c000a637:	90                   	nop

c000a638 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000a638:	b8 0a 00 00 00       	mov    eax,0xa
c000a63d:	c3                   	ret    
c000a63e:	66 90                	xchg   ax,ax

c000a640 <Bus::Bus(char const*)>:
c000a640:	83 ec 0c             	sub    esp,0xc
c000a643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a647:	83 ec 08             	sub    esp,0x8
c000a64a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a64e:	50                   	push   eax
c000a64f:	e8 30 08 00 00       	call   c000ae84 <Device::Device(char const*)>
c000a654:	83 c4 10             	add    esp,0x10
c000a657:	ba c4 d1 01 c0       	mov    edx,0xc001d1c4
c000a65c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a660:	89 10                	mov    DWORD PTR [eax],edx
c000a662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a666:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000a670:	90                   	nop
c000a671:	83 c4 0c             	add    esp,0xc
c000a674:	c3                   	ret    
c000a675:	90                   	nop
c000a676:	66 90                	xchg   ax,ax

c000a678 <Bus::~Bus()>:
c000a678:	83 ec 0c             	sub    esp,0xc
c000a67b:	ba c4 d1 01 c0       	mov    edx,0xc001d1c4
c000a680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a684:	89 10                	mov    DWORD PTR [eax],edx
c000a686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a68a:	83 ec 0c             	sub    esp,0xc
c000a68d:	50                   	push   eax
c000a68e:	e8 5b 05 00 00       	call   c000abee <Device::~Device()>
c000a693:	83 c4 10             	add    esp,0x10
c000a696:	90                   	nop
c000a697:	83 c4 0c             	add    esp,0xc
c000a69a:	c3                   	ret    
c000a69b:	90                   	nop

c000a69c <Bus::~Bus()>:
c000a69c:	83 ec 0c             	sub    esp,0xc
c000a69f:	83 ec 0c             	sub    esp,0xc
c000a6a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6a6:	e8 cd ff ff ff       	call   c000a678 <Bus::~Bus()>
c000a6ab:	83 c4 10             	add    esp,0x10
c000a6ae:	83 ec 08             	sub    esp,0x8
c000a6b1:	68 58 01 00 00       	push   0x158
c000a6b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6ba:	e8 f7 f0 ff ff       	call   c00097b6 <operator delete(void*, unsigned long)>
c000a6bf:	83 c4 10             	add    esp,0x10
c000a6c2:	83 c4 0c             	add    esp,0xc
c000a6c5:	c3                   	ret    

c000a6c6 <beepThread(void*)>:
c000a6c6:	83 ec 0c             	sub    esp,0xc
c000a6c9:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c000a6ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a6d2:	48                   	dec    eax
c000a6d3:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c000a6d8:	75 01                	jne    c000a6db <beepThread(void*)+0x15>
c000a6da:	fb                   	sti    
c000a6db:	83 ec 0c             	sub    esp,0xc
c000a6de:	6b c2 0a             	imul   eax,edx,0xa
c000a6e1:	50                   	push   eax
c000a6e2:	e8 69 83 00 00       	call   c0012a50 <milliTenthSleep(unsigned int)>
c000a6e7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000a6ee:	e8 a5 9f 00 00       	call   c0014698 <HalMakeBeep(int)>
c000a6f3:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000a6fb:	83 c4 1c             	add    esp,0x1c
c000a6fe:	e9 49 82 00 00       	jmp    c001294c <blockTask(TaskState)>

c000a703 <Krnl::beep(int, int, bool)>:
c000a703:	56                   	push   esi
c000a704:	53                   	push   ebx
c000a705:	83 ec 10             	sub    esp,0x10
c000a708:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a70c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a714:	e8 7f 9f 00 00       	call   c0014698 <HalMakeBeep(int)>
c000a719:	83 c4 10             	add    esp,0x10
c000a71c:	89 f0                	mov    eax,esi
c000a71e:	84 c0                	test   al,al
c000a720:	74 1e                	je     c000a740 <Krnl::beep(int, int, bool)+0x3d>
c000a722:	83 ec 0c             	sub    esp,0xc
c000a725:	6b db 0a             	imul   ebx,ebx,0xa
c000a728:	53                   	push   ebx
c000a729:	e8 22 83 00 00       	call   c0012a50 <milliTenthSleep(unsigned int)>
c000a72e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000a736:	83 c4 14             	add    esp,0x14
c000a739:	5b                   	pop    ebx
c000a73a:	5e                   	pop    esi
c000a73b:	e9 58 9f 00 00       	jmp    c0014698 <HalMakeBeep(int)>
c000a740:	68 e6 00 00 00       	push   0xe6
c000a745:	53                   	push   ebx
c000a746:	68 c6 a6 00 c0       	push   0xc000a6c6
c000a74b:	ff 35 f0 26 02 c0    	push   DWORD PTR ds:0xc00226f0
c000a751:	e8 da 7d 00 00       	call   c0012530 <Process::createThread(void (*)(void*), void*, int)>
c000a756:	83 c4 14             	add    esp,0x14
c000a759:	5b                   	pop    ebx
c000a75a:	5e                   	pop    esi
c000a75b:	c3                   	ret    

c000a75c <User::loadClockSettings(int)>:
c000a75c:	53                   	push   ebx
c000a75d:	83 ec 14             	sub    esp,0x14
c000a760:	68 14 01 00 00       	push   0x114
c000a765:	e8 b3 c3 ff ff       	call   c0006b1d <malloc>
c000a76a:	83 c4 0c             	add    esp,0xc
c000a76d:	89 c3                	mov    ebx,eax
c000a76f:	ff 35 f0 26 02 c0    	push   DWORD PTR ds:0xc00226f0
c000a775:	68 e8 d1 01 c0       	push   0xc001d1e8
c000a77a:	50                   	push   eax
c000a77b:	e8 a2 f6 ff ff       	call   c0009e22 <File::File(char const*, Process*)>
c000a780:	58                   	pop    eax
c000a781:	5a                   	pop    edx
c000a782:	6a 01                	push   0x1
c000a784:	53                   	push   ebx
c000a785:	e8 58 f7 ff ff       	call   c0009ee2 <File::open(FileOpenMode)>
c000a78a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a78d:	e8 ae f7 ff ff       	call   c0009f40 <File::close()>
c000a792:	83 c4 10             	add    esp,0x10
c000a795:	85 db                	test   ebx,ebx
c000a797:	74 0f                	je     c000a7a8 <User::loadClockSettings(int)+0x4c>
c000a799:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a79b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a79f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000a7a2:	83 c4 08             	add    esp,0x8
c000a7a5:	5b                   	pop    ebx
c000a7a6:	ff e0                	jmp    eax
c000a7a8:	83 c4 08             	add    esp,0x8
c000a7ab:	5b                   	pop    ebx
c000a7ac:	c3                   	ret    
c000a7ad:	90                   	nop

c000a7ae <Clock::Clock(char const*)>:
c000a7ae:	83 ec 0c             	sub    esp,0xc
c000a7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7b5:	83 ec 08             	sub    esp,0x8
c000a7b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7bc:	50                   	push   eax
c000a7bd:	e8 c2 06 00 00       	call   c000ae84 <Device::Device(char const*)>
c000a7c2:	83 c4 10             	add    esp,0x10
c000a7c5:	ba 10 d2 01 c0       	mov    edx,0xc001d210
c000a7ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7ce:	89 10                	mov    DWORD PTR [eax],edx
c000a7d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7d4:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000a7de:	90                   	nop
c000a7df:	83 c4 0c             	add    esp,0xc
c000a7e2:	c3                   	ret    
c000a7e3:	90                   	nop

c000a7e4 <Clock::~Clock()>:
c000a7e4:	83 ec 0c             	sub    esp,0xc
c000a7e7:	ba 10 d2 01 c0       	mov    edx,0xc001d210
c000a7ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7f0:	89 10                	mov    DWORD PTR [eax],edx
c000a7f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7f6:	83 ec 0c             	sub    esp,0xc
c000a7f9:	50                   	push   eax
c000a7fa:	e8 ef 03 00 00       	call   c000abee <Device::~Device()>
c000a7ff:	83 c4 10             	add    esp,0x10
c000a802:	90                   	nop
c000a803:	83 c4 0c             	add    esp,0xc
c000a806:	c3                   	ret    
c000a807:	90                   	nop

c000a808 <Clock::~Clock()>:
c000a808:	83 ec 0c             	sub    esp,0xc
c000a80b:	83 ec 0c             	sub    esp,0xc
c000a80e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a812:	e8 cd ff ff ff       	call   c000a7e4 <Clock::~Clock()>
c000a817:	83 c4 10             	add    esp,0x10
c000a81a:	83 ec 08             	sub    esp,0x8
c000a81d:	68 58 01 00 00       	push   0x158
c000a822:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a826:	e8 8b ef ff ff       	call   c00097b6 <operator delete(void*, unsigned long)>
c000a82b:	83 c4 10             	add    esp,0x10
c000a82e:	83 c4 0c             	add    esp,0xc
c000a831:	c3                   	ret    

c000a832 <Clock::timeInSecondsLocal()>:
c000a832:	53                   	push   ebx
c000a833:	83 ec 14             	sub    esp,0x14
c000a836:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a83a:	8b 10                	mov    edx,DWORD PTR [eax]
c000a83c:	50                   	push   eax
c000a83d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000a840:	0f b6 0d f8 f2 01 c0 	movzx  ecx,BYTE PTR ds:0xc001f2f8
c000a847:	03 0d fc f2 01 c0    	add    ecx,DWORD PTR ds:0xc001f2fc
c000a84d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000a853:	89 cb                	mov    ebx,ecx
c000a855:	c1 fb 1f             	sar    ebx,0x1f
c000a858:	01 c8                	add    eax,ecx
c000a85a:	11 da                	adc    edx,ebx
c000a85c:	83 c4 10             	add    esp,0x10
c000a85f:	31 c9                	xor    ecx,ecx
c000a861:	80 3d f9 f2 01 c0 00 	cmp    BYTE PTR ds:0xc001f2f9,0x0
c000a868:	74 05                	je     c000a86f <Clock::timeInSecondsLocal()+0x3d>
c000a86a:	b9 08 07 00 00       	mov    ecx,0x708
c000a86f:	31 db                	xor    ebx,ebx
c000a871:	01 c8                	add    eax,ecx
c000a873:	11 da                	adc    edx,ebx
c000a875:	83 c4 08             	add    esp,0x8
c000a878:	5b                   	pop    ebx
c000a879:	c3                   	ret    

c000a87a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000a87a:	57                   	push   edi
c000a87b:	56                   	push   esi
c000a87c:	53                   	push   ebx
c000a87d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a881:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a885:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a887:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000a88b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000a88e:	0f b6 05 f8 f2 01 c0 	movzx  eax,BYTE PTR ds:0xc001f2f8
c000a895:	03 05 fc f2 01 c0    	add    eax,DWORD PTR ds:0xc001f2fc
c000a89b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000a8a1:	99                   	cdq    
c000a8a2:	29 c6                	sub    esi,eax
c000a8a4:	19 d7                	sbb    edi,edx
c000a8a6:	89 f0                	mov    eax,esi
c000a8a8:	89 fa                	mov    edx,edi
c000a8aa:	31 f6                	xor    esi,esi
c000a8ac:	80 3d f9 f2 01 c0 00 	cmp    BYTE PTR ds:0xc001f2f9,0x0
c000a8b3:	74 05                	je     c000a8ba <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000a8b5:	be 08 07 00 00       	mov    esi,0x708
c000a8ba:	31 ff                	xor    edi,edi
c000a8bc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000a8c0:	29 f0                	sub    eax,esi
c000a8c2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a8c6:	19 fa                	sbb    edx,edi
c000a8c8:	89 d8                	mov    eax,ebx
c000a8ca:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000a8ce:	5b                   	pop    ebx
c000a8cf:	5e                   	pop    esi
c000a8d0:	5f                   	pop    edi
c000a8d1:	ff e0                	jmp    eax

c000a8d3 <datetimeToSeconds(datetime_t)>:
c000a8d3:	55                   	push   ebp
c000a8d4:	57                   	push   edi
c000a8d5:	56                   	push   esi
c000a8d6:	53                   	push   ebx
c000a8d7:	83 ec 14             	sub    esp,0x14
c000a8da:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000a8de:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000a8e2:	89 d3                	mov    ebx,edx
c000a8e4:	0f b6 c6             	movzx  eax,dh
c000a8e7:	c1 eb 10             	shr    ebx,0x10
c000a8ea:	48                   	dec    eax
c000a8eb:	66 81 eb 6c 07       	sub    bx,0x76c
c000a8f0:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000a8f4:	0f b6 f5             	movzx  esi,ch
c000a8f7:	89 cf                	mov    edi,ecx
c000a8f9:	6b f6 3c             	imul   esi,esi,0x3c
c000a8fc:	c1 ef 10             	shr    edi,0x10
c000a8ff:	0f b6 c9             	movzx  ecx,cl
c000a902:	89 f8                	mov    eax,edi
c000a904:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000a90a:	0f b6 f8             	movzx  edi,al
c000a90d:	0f b6 d2             	movzx  edx,dl
c000a910:	01 fe                	add    esi,edi
c000a912:	01 f1                	add    ecx,esi
c000a914:	0f b7 f3             	movzx  esi,bx
c000a917:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a91b:	c1 f9 1f             	sar    ecx,0x1f
c000a91e:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000a923:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a927:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000a92c:	8b 0c 8d 60 d2 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe2da0]
c000a933:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000a937:	76 29                	jbe    c000a962 <datetimeToSeconds(datetime_t)+0x8f>
c000a939:	f6 c3 03             	test   bl,0x3
c000a93c:	75 24                	jne    c000a962 <datetimeToSeconds(datetime_t)+0x8f>
c000a93e:	31 d2                	xor    edx,edx
c000a940:	bf 64 00 00 00       	mov    edi,0x64
c000a945:	89 d8                	mov    eax,ebx
c000a947:	66 f7 f7             	div    di
c000a94a:	66 85 d2             	test   dx,dx
c000a94d:	75 12                	jne    c000a961 <datetimeToSeconds(datetime_t)+0x8e>
c000a94f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000a955:	bf 90 01 00 00       	mov    edi,0x190
c000a95a:	99                   	cdq    
c000a95b:	f7 ff                	idiv   edi
c000a95d:	85 d2                	test   edx,edx
c000a95f:	75 01                	jne    c000a962 <datetimeToSeconds(datetime_t)+0x8f>
c000a961:	41                   	inc    ecx
c000a962:	66 83 fb 46          	cmp    bx,0x46
c000a966:	76 45                	jbe    c000a9ad <datetimeToSeconds(datetime_t)+0xda>
c000a968:	bb 46 00 00 00       	mov    ebx,0x46
c000a96d:	bf 64 00 00 00       	mov    edi,0x64
c000a972:	bd 90 01 00 00       	mov    ebp,0x190
c000a977:	b8 6d 01 00 00       	mov    eax,0x16d
c000a97c:	f6 c3 03             	test   bl,0x3
c000a97f:	75 23                	jne    c000a9a4 <datetimeToSeconds(datetime_t)+0xd1>
c000a981:	89 d8                	mov    eax,ebx
c000a983:	99                   	cdq    
c000a984:	f7 ff                	idiv   edi
c000a986:	b8 6e 01 00 00       	mov    eax,0x16e
c000a98b:	85 d2                	test   edx,edx
c000a98d:	75 15                	jne    c000a9a4 <datetimeToSeconds(datetime_t)+0xd1>
c000a98f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000a995:	99                   	cdq    
c000a996:	f7 fd                	idiv   ebp
c000a998:	31 c0                	xor    eax,eax
c000a99a:	85 d2                	test   edx,edx
c000a99c:	0f 94 c0             	sete   al
c000a99f:	05 6d 01 00 00       	add    eax,0x16d
c000a9a4:	01 c1                	add    ecx,eax
c000a9a6:	43                   	inc    ebx
c000a9a7:	39 f3                	cmp    ebx,esi
c000a9a9:	7c cc                	jl     c000a977 <datetimeToSeconds(datetime_t)+0xa4>
c000a9ab:	eb 3b                	jmp    c000a9e8 <datetimeToSeconds(datetime_t)+0x115>
c000a9ad:	74 39                	je     c000a9e8 <datetimeToSeconds(datetime_t)+0x115>
c000a9af:	b8 45 00 00 00       	mov    eax,0x45
c000a9b4:	89 c2                	mov    edx,eax
c000a9b6:	83 e2 03             	and    edx,0x3
c000a9b9:	39 f0                	cmp    eax,esi
c000a9bb:	7e 13                	jle    c000a9d0 <datetimeToSeconds(datetime_t)+0xfd>
c000a9bd:	85 d2                	test   edx,edx
c000a9bf:	0f 94 c2             	sete   dl
c000a9c2:	48                   	dec    eax
c000a9c3:	0f b6 d2             	movzx  edx,dl
c000a9c6:	81 c2 6d 01 00 00    	add    edx,0x16d
c000a9cc:	29 d1                	sub    ecx,edx
c000a9ce:	eb e4                	jmp    c000a9b4 <datetimeToSeconds(datetime_t)+0xe1>
c000a9d0:	b8 6d 01 00 00       	mov    eax,0x16d
c000a9d5:	85 d2                	test   edx,edx
c000a9d7:	75 0d                	jne    c000a9e6 <datetimeToSeconds(datetime_t)+0x113>
c000a9d9:	31 c0                	xor    eax,eax
c000a9db:	66 85 db             	test   bx,bx
c000a9de:	0f 95 c0             	setne  al
c000a9e1:	05 6d 01 00 00       	add    eax,0x16d
c000a9e6:	29 c1                	sub    ecx,eax
c000a9e8:	b8 80 51 01 00       	mov    eax,0x15180
c000a9ed:	f7 e9                	imul   ecx
c000a9ef:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000a9f3:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000a9f7:	83 c4 14             	add    esp,0x14
c000a9fa:	5b                   	pop    ebx
c000a9fb:	5e                   	pop    esi
c000a9fc:	5f                   	pop    edi
c000a9fd:	5d                   	pop    ebp
c000a9fe:	c3                   	ret    
c000a9ff:	90                   	nop

c000aa00 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000aa00:	57                   	push   edi
c000aa01:	56                   	push   esi
c000aa02:	53                   	push   ebx
c000aa03:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aa07:	8b 06                	mov    eax,DWORD PTR [esi]
c000aa09:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000aa0c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aa10:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aa14:	e8 ba fe ff ff       	call   c000a8d3 <datetimeToSeconds(datetime_t)>
c000aa19:	59                   	pop    ecx
c000aa1a:	0f b6 0d f8 f2 01 c0 	movzx  ecx,BYTE PTR ds:0xc001f2f8
c000aa21:	5b                   	pop    ebx
c000aa22:	03 0d fc f2 01 c0    	add    ecx,DWORD PTR ds:0xc001f2fc
c000aa28:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000aa2e:	89 cb                	mov    ebx,ecx
c000aa30:	c1 fb 1f             	sar    ebx,0x1f
c000aa33:	29 c8                	sub    eax,ecx
c000aa35:	19 da                	sbb    edx,ebx
c000aa37:	31 c9                	xor    ecx,ecx
c000aa39:	80 3d f9 f2 01 c0 00 	cmp    BYTE PTR ds:0xc001f2f9,0x0
c000aa40:	74 05                	je     c000aa47 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000aa42:	b9 08 07 00 00       	mov    ecx,0x708
c000aa47:	31 db                	xor    ebx,ebx
c000aa49:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000aa4d:	29 c8                	sub    eax,ecx
c000aa4f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000aa53:	19 da                	sbb    edx,ebx
c000aa55:	89 f8                	mov    eax,edi
c000aa57:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000aa5b:	5b                   	pop    ebx
c000aa5c:	5e                   	pop    esi
c000aa5d:	5f                   	pop    edi
c000aa5e:	ff e0                	jmp    eax

c000aa60 <secondsToDatetime(unsigned long long)>:
c000aa60:	55                   	push   ebp
c000aa61:	57                   	push   edi
c000aa62:	56                   	push   esi
c000aa63:	53                   	push   ebx
c000aa64:	83 ec 1c             	sub    esp,0x1c
c000aa67:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000aa6b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000aa6f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000aa73:	6a 00                	push   0x0
c000aa75:	68 80 51 01 00       	push   0x15180
c000aa7a:	55                   	push   ebp
c000aa7b:	57                   	push   edi
c000aa7c:	e8 3f 0a 01 00       	call   c001b4c0 <__udivdi3>
c000aa81:	83 c4 10             	add    esp,0x10
c000aa84:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000aa8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa8e:	6a 00                	push   0x0
c000aa90:	68 80 51 01 00       	push   0x15180
c000aa95:	55                   	push   ebp
c000aa96:	57                   	push   edi
c000aa97:	bf 10 0e 00 00       	mov    edi,0xe10
c000aa9c:	e8 1f 0b 01 00       	call   c001b5c0 <__umoddi3>
c000aaa1:	83 c4 10             	add    esp,0x10
c000aaa4:	99                   	cdq    
c000aaa5:	f7 ff                	idiv   edi
c000aaa7:	bf 3c 00 00 00       	mov    edi,0x3c
c000aaac:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000aaaf:	89 d0                	mov    eax,edx
c000aab1:	99                   	cdq    
c000aab2:	f7 ff                	idiv   edi
c000aab4:	85 db                	test   ebx,ebx
c000aab6:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000aab9:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000aabc:	79 11                	jns    c000aacf <secondsToDatetime(unsigned long long)+0x6f>
c000aabe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000aac2:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000aac8:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000aacd:	eb 07                	jmp    c000aad6 <secondsToDatetime(unsigned long long)+0x76>
c000aacf:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000aad4:	89 d8                	mov    eax,ebx
c000aad6:	bf b4 05 00 00       	mov    edi,0x5b4
c000aadb:	99                   	cdq    
c000aadc:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000aae1:	f7 f9                	idiv   ecx
c000aae3:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000aae8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aaec:	31 d2                	xor    edx,edx
c000aaee:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000aaf6:	01 c3                	add    ebx,eax
c000aaf8:	89 d8                	mov    eax,ebx
c000aafa:	f7 f1                	div    ecx
c000aafc:	31 d2                	xor    edx,edx
c000aafe:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000ab01:	89 d8                	mov    eax,ebx
c000ab03:	f7 f7                	div    edi
c000ab05:	31 d2                	xor    edx,edx
c000ab07:	29 c1                	sub    ecx,eax
c000ab09:	89 d8                	mov    eax,ebx
c000ab0b:	f7 f5                	div    ebp
c000ab0d:	bd 6d 01 00 00       	mov    ebp,0x16d
c000ab12:	29 c1                	sub    ecx,eax
c000ab14:	31 d2                	xor    edx,edx
c000ab16:	89 c8                	mov    eax,ecx
c000ab18:	f7 f5                	div    ebp
c000ab1a:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000ab1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ab23:	31 d2                	xor    edx,edx
c000ab25:	89 c8                	mov    eax,ecx
c000ab27:	f7 f5                	div    ebp
c000ab29:	31 d2                	xor    edx,edx
c000ab2b:	01 c3                	add    ebx,eax
c000ab2d:	89 c8                	mov    eax,ecx
c000ab2f:	f7 f7                	div    edi
c000ab31:	bf 99 00 00 00       	mov    edi,0x99
c000ab36:	29 c3                	sub    ebx,eax
c000ab38:	31 d2                	xor    edx,edx
c000ab3a:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000ab42:	29 c3                	sub    ebx,eax
c000ab44:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000ab47:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000ab4a:	bb 05 00 00 00       	mov    ebx,0x5
c000ab4f:	83 c1 02             	add    ecx,0x2
c000ab52:	89 c8                	mov    eax,ecx
c000ab54:	f7 f7                	div    edi
c000ab56:	31 d2                	xor    edx,edx
c000ab58:	89 c7                	mov    edi,eax
c000ab5a:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000ab60:	83 c0 02             	add    eax,0x2
c000ab63:	f7 f3                	div    ebx
c000ab65:	89 eb                	mov    ebx,ebp
c000ab67:	29 c3                	sub    ebx,eax
c000ab69:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000ab6f:	88 1e                	mov    BYTE PTR [esi],bl
c000ab71:	19 c0                	sbb    eax,eax
c000ab73:	31 d2                	xor    edx,edx
c000ab75:	83 e0 0c             	and    eax,0xc
c000ab78:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000ab7c:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000ab84:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ab88:	83 f9 01             	cmp    ecx,0x1
c000ab8b:	0f 96 c2             	setbe  dl
c000ab8e:	41                   	inc    ecx
c000ab8f:	01 d0                	add    eax,edx
c000ab91:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000ab94:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000ab98:	83 c4 1c             	add    esp,0x1c
c000ab9b:	89 f0                	mov    eax,esi
c000ab9d:	5b                   	pop    ebx
c000ab9e:	5e                   	pop    esi
c000ab9f:	5f                   	pop    edi
c000aba0:	5d                   	pop    ebp
c000aba1:	c2 04 00             	ret    0x4

c000aba4 <Clock::timeInDatetimeLocal()>:
c000aba4:	53                   	push   ebx
c000aba5:	83 ec 14             	sub    esp,0x14
c000aba8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000abac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000abb0:	e8 7d fc ff ff       	call   c000a832 <Clock::timeInSecondsLocal()>
c000abb5:	83 c4 0c             	add    esp,0xc
c000abb8:	52                   	push   edx
c000abb9:	50                   	push   eax
c000abba:	53                   	push   ebx
c000abbb:	e8 a0 fe ff ff       	call   c000aa60 <secondsToDatetime(unsigned long long)>
c000abc0:	89 d8                	mov    eax,ebx
c000abc2:	83 c4 14             	add    esp,0x14
c000abc5:	5b                   	pop    ebx
c000abc6:	c2 04 00             	ret    0x4
c000abc9:	90                   	nop

c000abca <Device::hibernate()>:
c000abca:	c3                   	ret    
c000abcb:	90                   	nop

c000abcc <Device::wake()>:
c000abcc:	c3                   	ret    
c000abcd:	90                   	nop

c000abce <Device::detect()>:
c000abce:	c3                   	ret    
c000abcf:	90                   	nop

c000abd0 <Device::disableLegacy()>:
c000abd0:	c3                   	ret    
c000abd1:	90                   	nop

c000abd2 <Device::powerSaving(PowerSavingLevel)>:
c000abd2:	c3                   	ret    
c000abd3:	90                   	nop

c000abd4 <DriverlessDevice::close(int, int, void*)>:
c000abd4:	31 c0                	xor    eax,eax
c000abd6:	c3                   	ret    
c000abd7:	90                   	nop

c000abd8 <DriverlessDevice::detect()>:
c000abd8:	c3                   	ret    
c000abd9:	90                   	nop

c000abda <DriverlessDevice::open(int, int, void*)>:
c000abda:	83 ec 18             	sub    esp,0x18
c000abdd:	68 90 d2 01 c0       	push   0xc001d290
c000abe2:	e8 14 48 00 00       	call   c000f3fb <Krnl::panic(char const*)>
c000abe7:	83 c8 ff             	or     eax,0xffffffff
c000abea:	83 c4 1c             	add    esp,0x1c
c000abed:	c3                   	ret    

c000abee <Device::~Device()>:
c000abee:	ba f0 d2 01 c0       	mov    edx,0xc001d2f0
c000abf3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000abf7:	89 10                	mov    DWORD PTR [eax],edx
c000abf9:	90                   	nop
c000abfa:	c3                   	ret    
c000abfb:	90                   	nop

c000abfc <Device::~Device()>:
c000abfc:	83 ec 0c             	sub    esp,0xc
c000abff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ac03:	e8 e6 ff ff ff       	call   c000abee <Device::~Device()>
c000ac08:	83 c4 04             	add    esp,0x4
c000ac0b:	83 ec 08             	sub    esp,0x8
c000ac0e:	68 58 01 00 00       	push   0x158
c000ac13:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac17:	e8 9a eb ff ff       	call   c00097b6 <operator delete(void*, unsigned long)>
c000ac1c:	83 c4 10             	add    esp,0x10
c000ac1f:	83 c4 0c             	add    esp,0xc
c000ac22:	c3                   	ret    
c000ac23:	90                   	nop

c000ac24 <Device::findAndLoadDriver()>:
c000ac24:	c7 44 24 04 ae d2 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d2ae
c000ac2c:	e9 7b ec ff ff       	jmp    c00098ac <Dbg::kprintf(char const*, ...)>
c000ac31:	90                   	nop

c000ac32 <Device::preOpenPCI(PCIDeviceInfo)>:
c000ac32:	57                   	push   edi
c000ac33:	b9 09 00 00 00       	mov    ecx,0x9
c000ac38:	56                   	push   esi
c000ac39:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ac3d:	8d 74 24 10          	lea    esi,[esp+0x10]
c000ac41:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000ac4b:	81 c7 18 01 00 00    	add    edi,0x118
c000ac51:	fc                   	cld    
c000ac52:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ac54:	5e                   	pop    esi
c000ac55:	5f                   	pop    edi
c000ac56:	c3                   	ret    
c000ac57:	90                   	nop

c000ac58 <Device::preOpenACPI(void*, char*, char*)>:
c000ac58:	57                   	push   edi
c000ac59:	b9 1e 00 00 00       	mov    ecx,0x1e
c000ac5e:	56                   	push   esi
c000ac5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ac63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac67:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000ac71:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000ac77:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000ac7d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ac81:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ac83:	b9 0e 00 00 00       	mov    ecx,0xe
c000ac88:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000ac8e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ac92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ac94:	5e                   	pop    esi
c000ac95:	5f                   	pop    edi
c000ac96:	c3                   	ret    
c000ac97:	90                   	nop

c000ac98 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000ac98:	53                   	push   ebx
c000ac99:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ac9d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aca1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aca5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aca9:	0f b6 c0             	movzx  eax,al
c000acac:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000acb0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000acb4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000acb8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000acbc:	5b                   	pop    ebx
c000acbd:	e9 a6 05 00 00       	jmp    c000b268 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000acc2 <Device::getParent()>:
c000acc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acc6:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000accc:	c3                   	ret    
c000accd:	90                   	nop

c000acce <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000acce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000acd2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000acd6:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000acdb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000acdf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ace3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ace7:	e9 e8 06 00 00       	jmp    c000b3d4 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000acec <Device::addChild(Device*)>:
c000acec:	53                   	push   ebx
c000aced:	83 ec 08             	sub    esp,0x8
c000acf0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000acf4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000acf8:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000acfe:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000ad04:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ad06:	85 d2                	test   edx,edx
c000ad08:	74 04                	je     c000ad0e <Device::addChild(Device*)+0x22>
c000ad0a:	89 d3                	mov    ebx,edx
c000ad0c:	eb f6                	jmp    c000ad04 <Device::addChild(Device*)+0x18>
c000ad0e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ad11:	83 ec 0c             	sub    esp,0xc
c000ad14:	6a 08                	push   0x8
c000ad16:	e8 02 be ff ff       	call   c0006b1d <malloc>
c000ad1b:	89 03                	mov    DWORD PTR [ebx],eax
c000ad1d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ad23:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ad2a:	83 c4 18             	add    esp,0x18
c000ad2d:	5b                   	pop    ebx
c000ad2e:	c3                   	ret    
c000ad2f:	90                   	nop

c000ad30 <Device::removeAllChildren()>:
c000ad30:	56                   	push   esi
c000ad31:	53                   	push   ebx
c000ad32:	52                   	push   edx
c000ad33:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ad37:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ad3d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ad40:	74 17                	je     c000ad59 <Device::removeAllChildren()+0x29>
c000ad42:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad45:	85 c0                	test   eax,eax
c000ad47:	74 0c                	je     c000ad55 <Device::removeAllChildren()+0x25>
c000ad49:	83 ec 0c             	sub    esp,0xc
c000ad4c:	8b 10                	mov    edx,DWORD PTR [eax]
c000ad4e:	50                   	push   eax
c000ad4f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000ad52:	83 c4 10             	add    esp,0x10
c000ad55:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ad57:	eb e4                	jmp    c000ad3d <Device::removeAllChildren()+0xd>
c000ad59:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ad5f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ad65:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ad6b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ad72:	58                   	pop    eax
c000ad73:	5b                   	pop    ebx
c000ad74:	5e                   	pop    esi
c000ad75:	c3                   	ret    

c000ad76 <Device::hibernateAll()>:
c000ad76:	53                   	push   ebx
c000ad77:	83 ec 14             	sub    esp,0x14
c000ad7a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ad7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ad80:	53                   	push   ebx
c000ad81:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ad84:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ad8a:	83 c4 10             	add    esp,0x10
c000ad8d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ad90:	74 0f                	je     c000ada1 <Device::hibernateAll()+0x2b>
c000ad92:	83 ec 0c             	sub    esp,0xc
c000ad95:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ad98:	e8 d9 ff ff ff       	call   c000ad76 <Device::hibernateAll()>
c000ad9d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ad9f:	eb e9                	jmp    c000ad8a <Device::hibernateAll()+0x14>
c000ada1:	83 c4 08             	add    esp,0x8
c000ada4:	5b                   	pop    ebx
c000ada5:	c3                   	ret    

c000ada6 <Device::wakeAll()>:
c000ada6:	53                   	push   ebx
c000ada7:	83 ec 14             	sub    esp,0x14
c000adaa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000adae:	8b 03                	mov    eax,DWORD PTR [ebx]
c000adb0:	53                   	push   ebx
c000adb1:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000adb4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000adba:	83 c4 10             	add    esp,0x10
c000adbd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000adc0:	74 0f                	je     c000add1 <Device::wakeAll()+0x2b>
c000adc2:	83 ec 0c             	sub    esp,0xc
c000adc5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000adc8:	e8 d9 ff ff ff       	call   c000ada6 <Device::wakeAll()>
c000adcd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000adcf:	eb e9                	jmp    c000adba <Device::wakeAll()+0x14>
c000add1:	83 c4 08             	add    esp,0x8
c000add4:	5b                   	pop    ebx
c000add5:	c3                   	ret    

c000add6 <Device::detectAll()>:
c000add6:	53                   	push   ebx
c000add7:	83 ec 14             	sub    esp,0x14
c000adda:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000adde:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ade0:	53                   	push   ebx
c000ade1:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000ade4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000adea:	83 c4 10             	add    esp,0x10
c000aded:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000adf0:	74 0f                	je     c000ae01 <Device::detectAll()+0x2b>
c000adf2:	83 ec 0c             	sub    esp,0xc
c000adf5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000adf8:	e8 d9 ff ff ff       	call   c000add6 <Device::detectAll()>
c000adfd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000adff:	eb e9                	jmp    c000adea <Device::detectAll()+0x14>
c000ae01:	83 c4 08             	add    esp,0x8
c000ae04:	5b                   	pop    ebx
c000ae05:	c3                   	ret    

c000ae06 <Device::disableLegacyAll()>:
c000ae06:	c3                   	ret    
c000ae07:	90                   	nop

c000ae08 <Device::loadDriversForAll()>:
c000ae08:	c3                   	ret    
c000ae09:	90                   	nop

c000ae0a <Device::closeAll()>:
c000ae0a:	53                   	push   ebx
c000ae0b:	83 ec 08             	sub    esp,0x8
c000ae0e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ae12:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae14:	6a 00                	push   0x0
c000ae16:	6a 00                	push   0x0
c000ae18:	6a 00                	push   0x0
c000ae1a:	53                   	push   ebx
c000ae1b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ae1e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ae24:	83 c4 10             	add    esp,0x10
c000ae27:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ae2a:	74 0f                	je     c000ae3b <Device::closeAll()+0x31>
c000ae2c:	83 ec 0c             	sub    esp,0xc
c000ae2f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ae32:	e8 d3 ff ff ff       	call   c000ae0a <Device::closeAll()>
c000ae37:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ae39:	eb e9                	jmp    c000ae24 <Device::closeAll()+0x1a>
c000ae3b:	83 c4 08             	add    esp,0x8
c000ae3e:	5b                   	pop    ebx
c000ae3f:	c3                   	ret    

c000ae40 <Device::powerSavingAll(PowerSavingLevel)>:
c000ae40:	56                   	push   esi
c000ae41:	53                   	push   ebx
c000ae42:	83 ec 0c             	sub    esp,0xc
c000ae45:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ae49:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000ae4d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae4f:	56                   	push   esi
c000ae50:	53                   	push   ebx
c000ae51:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000ae54:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ae5a:	83 c4 10             	add    esp,0x10
c000ae5d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ae60:	74 0f                	je     c000ae71 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000ae62:	52                   	push   edx
c000ae63:	52                   	push   edx
c000ae64:	56                   	push   esi
c000ae65:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ae68:	e8 d3 ff ff ff       	call   c000ae40 <Device::powerSavingAll(PowerSavingLevel)>
c000ae6d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ae6f:	eb e9                	jmp    c000ae5a <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000ae71:	58                   	pop    eax
c000ae72:	5b                   	pop    ebx
c000ae73:	5e                   	pop    esi
c000ae74:	c3                   	ret    
c000ae75:	90                   	nop

c000ae76 <Device::setName(char const*)>:
c000ae76:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000ae7e:	e9 9d 57 ff ff       	jmp    c0000620 <strcpy>
c000ae83:	90                   	nop

c000ae84 <Device::Device(char const*)>:
c000ae84:	83 ec 1c             	sub    esp,0x1c
c000ae87:	ba f0 d2 01 c0       	mov    edx,0xc001d2f0
c000ae8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ae90:	89 10                	mov    DWORD PTR [eax],edx
c000ae92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ae96:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000aea0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aea4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000aeae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aeb2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000aebc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aec0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000aeca:	83 ec 08             	sub    esp,0x8
c000aecd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000aed1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000aed5:	e8 9c ff ff ff       	call   c000ae76 <Device::setName(char const*)>
c000aeda:	83 c4 10             	add    esp,0x10
c000aedd:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000aee5:	83 ec 0c             	sub    esp,0xc
c000aee8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aeec:	e8 2c bc ff ff       	call   c0006b1d <malloc>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000aefa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000af01:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000af05:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000af0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000af0f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000af15:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000af1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000af1f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000af25:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000af2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000af30:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000af37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000af3b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000af42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000af46:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000af50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000af54:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000af5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000af62:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000af6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000af70:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000af7a:	90                   	nop
c000af7b:	83 c4 1c             	add    esp,0x1c
c000af7e:	c3                   	ret    
c000af7f:	90                   	nop

c000af80 <Device::getName()>:
c000af80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af84:	05 d0 00 00 00       	add    eax,0xd0
c000af89:	c3                   	ret    

c000af8a <DriverlessDevice::DriverlessDevice(char const*)>:
c000af8a:	83 ec 0c             	sub    esp,0xc
c000af8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af91:	83 ec 08             	sub    esp,0x8
c000af94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af98:	50                   	push   eax
c000af99:	e8 e6 fe ff ff       	call   c000ae84 <Device::Device(char const*)>
c000af9e:	83 c4 10             	add    esp,0x10
c000afa1:	ba 1c d3 01 c0       	mov    edx,0xc001d31c
c000afa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afaa:	89 10                	mov    DWORD PTR [eax],edx
c000afac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afb0:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000afba:	90                   	nop
c000afbb:	83 c4 0c             	add    esp,0xc
c000afbe:	c3                   	ret    
c000afbf:	90                   	nop

c000afc0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000afc0:	57                   	push   edi
c000afc1:	56                   	push   esi
c000afc2:	53                   	push   ebx
c000afc3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000afc7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000afcb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000afcf:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000afd5:	75 0c                	jne    c000afe3 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000afd7:	52                   	push   edx
c000afd8:	52                   	push   edx
c000afd9:	53                   	push   ebx
c000afda:	56                   	push   esi
c000afdb:	e8 92 09 01 00       	call   c001b972 <LinkedList<Device>::addElement(Device*)>
c000afe0:	83 c4 10             	add    esp,0x10
c000afe3:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000afe9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000afec:	74 12                	je     c000b000 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000afee:	50                   	push   eax
c000afef:	57                   	push   edi
c000aff0:	56                   	push   esi
c000aff1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000aff4:	e8 c7 ff ff ff       	call   c000afc0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000aff9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000affb:	83 c4 10             	add    esp,0x10
c000affe:	eb e9                	jmp    c000afe9 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000b000:	5b                   	pop    ebx
c000b001:	5e                   	pop    esi
c000b002:	5f                   	pop    edi
c000b003:	c3                   	ret    

c000b004 <getDevicesOfType(DeviceType)>:
c000b004:	53                   	push   ebx
c000b005:	83 ec 14             	sub    esp,0x14
c000b008:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b00c:	53                   	push   ebx
c000b00d:	e8 3c 0a 01 00       	call   c001ba4e <LinkedList<Device>::LinkedList()>
c000b012:	83 c4 0c             	add    esp,0xc
c000b015:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b019:	53                   	push   ebx
c000b01a:	ff 35 08 f2 01 c0    	push   DWORD PTR ds:0xc001f208
c000b020:	e8 9b ff ff ff       	call   c000afc0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000b025:	89 d8                	mov    eax,ebx
c000b027:	83 c4 18             	add    esp,0x18
c000b02a:	5b                   	pop    ebx
c000b02b:	c2 04 00             	ret    0x4
c000b02e:	66 90                	xchg   ax,ax

c000b030 <HardDiskController::HardDiskController(char const*)>:
c000b030:	83 ec 0c             	sub    esp,0xc
c000b033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b037:	83 ec 08             	sub    esp,0x8
c000b03a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b03e:	50                   	push   eax
c000b03f:	e8 40 fe ff ff       	call   c000ae84 <Device::Device(char const*)>
c000b044:	83 c4 10             	add    esp,0x10
c000b047:	ba 48 d3 01 c0       	mov    edx,0xc001d348
c000b04c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b050:	89 10                	mov    DWORD PTR [eax],edx
c000b052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b056:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000b060:	90                   	nop
c000b061:	83 c4 0c             	add    esp,0xc
c000b064:	c3                   	ret    
c000b065:	90                   	nop
c000b066:	66 90                	xchg   ax,ax

c000b068 <HardDiskController::~HardDiskController()>:
c000b068:	83 ec 0c             	sub    esp,0xc
c000b06b:	ba 48 d3 01 c0       	mov    edx,0xc001d348
c000b070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b074:	89 10                	mov    DWORD PTR [eax],edx
c000b076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b07a:	83 ec 0c             	sub    esp,0xc
c000b07d:	50                   	push   eax
c000b07e:	e8 6b fb ff ff       	call   c000abee <Device::~Device()>
c000b083:	83 c4 10             	add    esp,0x10
c000b086:	90                   	nop
c000b087:	83 c4 0c             	add    esp,0xc
c000b08a:	c3                   	ret    
c000b08b:	90                   	nop

c000b08c <HardDiskController::~HardDiskController()>:
c000b08c:	83 ec 0c             	sub    esp,0xc
c000b08f:	83 ec 0c             	sub    esp,0xc
c000b092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b096:	e8 cd ff ff ff       	call   c000b068 <HardDiskController::~HardDiskController()>
c000b09b:	83 c4 10             	add    esp,0x10
c000b09e:	83 ec 08             	sub    esp,0x8
c000b0a1:	68 58 01 00 00       	push   0x158
c000b0a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0aa:	e8 07 e7 ff ff       	call   c00097b6 <operator delete(void*, unsigned long)>
c000b0af:	83 c4 10             	add    esp,0x10
c000b0b2:	83 c4 0c             	add    esp,0xc
c000b0b5:	c3                   	ret    

c000b0b6 <PhysicalDisk::eject()>:
c000b0b6:	83 c8 ff             	or     eax,0xffffffff
c000b0b9:	c3                   	ret    

c000b0ba <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000b0ba:	83 ec 0c             	sub    esp,0xc
c000b0bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0c1:	83 ec 08             	sub    esp,0x8
c000b0c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0c8:	50                   	push   eax
c000b0c9:	e8 b6 fd ff ff       	call   c000ae84 <Device::Device(char const*)>
c000b0ce:	83 c4 10             	add    esp,0x10
c000b0d1:	ba 74 d3 01 c0       	mov    edx,0xc001d374
c000b0d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0da:	89 10                	mov    DWORD PTR [eax],edx
c000b0dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0e0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000b0e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0eb:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000b0f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0f6:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000b100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b104:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b108:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000b10e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b112:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000b11c:	90                   	nop
c000b11d:	83 c4 0c             	add    esp,0xc
c000b120:	c3                   	ret    
c000b121:	90                   	nop

c000b122 <PhysicalDisk::startCache()>:
c000b122:	56                   	push   esi
c000b123:	53                   	push   ebx
c000b124:	83 ec 10             	sub    esp,0x10
c000b127:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b12b:	6a 44                	push   0x44
c000b12d:	e8 eb b9 ff ff       	call   c0006b1d <malloc>
c000b132:	89 c6                	mov    esi,eax
c000b134:	58                   	pop    eax
c000b135:	5a                   	pop    edx
c000b136:	53                   	push   ebx
c000b137:	56                   	push   esi
c000b138:	e8 ab 15 00 00       	call   c000c6e8 <VCache::VCache(PhysicalDisk*)>
c000b13d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000b143:	83 c4 14             	add    esp,0x14
c000b146:	5b                   	pop    ebx
c000b147:	5e                   	pop    esi
c000b148:	c3                   	ret    
c000b149:	90                   	nop

c000b14a <PhysicalDisk::~PhysicalDisk()>:
c000b14a:	83 ec 0c             	sub    esp,0xc
c000b14d:	ba 74 d3 01 c0       	mov    edx,0xc001d374
c000b152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b156:	89 10                	mov    DWORD PTR [eax],edx
c000b158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b15c:	83 ec 0c             	sub    esp,0xc
c000b15f:	50                   	push   eax
c000b160:	e8 89 fa ff ff       	call   c000abee <Device::~Device()>
c000b165:	83 c4 10             	add    esp,0x10
c000b168:	90                   	nop
c000b169:	83 c4 0c             	add    esp,0xc
c000b16c:	c3                   	ret    
c000b16d:	90                   	nop

c000b16e <PhysicalDisk::~PhysicalDisk()>:
c000b16e:	83 ec 0c             	sub    esp,0xc
c000b171:	83 ec 0c             	sub    esp,0xc
c000b174:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b178:	e8 cd ff ff ff       	call   c000b14a <PhysicalDisk::~PhysicalDisk()>
c000b17d:	83 c4 10             	add    esp,0x10
c000b180:	83 ec 08             	sub    esp,0x8
c000b183:	68 6c 01 00 00       	push   0x16c
c000b188:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b18c:	e8 25 e6 ff ff       	call   c00097b6 <operator delete(void*, unsigned long)>
c000b191:	83 c4 10             	add    esp,0x10
c000b194:	83 c4 0c             	add    esp,0xc
c000b197:	c3                   	ret    

c000b198 <int_handler>:
c000b198:	55                   	push   ebp
c000b199:	57                   	push   edi
c000b19a:	56                   	push   esi
c000b19b:	53                   	push   ebx
c000b19c:	83 ec 0c             	sub    esp,0xc
c000b19f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000b1a3:	80 3d 80 1c 02 c0 00 	cmp    BYTE PTR ds:0xc0021c80,0x0
c000b1aa:	74 0b                	je     c000b1b7 <int_handler+0x1f>
c000b1ac:	fa                   	cli    
c000b1ad:	f4                   	hlt    
c000b1ae:	80 3d 80 1c 02 c0 00 	cmp    BYTE PTR ds:0xc0021c80,0x0
c000b1b5:	75 f5                	jne    c000b1ac <int_handler+0x14>
c000b1b7:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000b1ba:	8d 46 e0             	lea    eax,[esi-0x20]
c000b1bd:	83 f8 17             	cmp    eax,0x17
c000b1c0:	76 3e                	jbe    c000b200 <int_handler+0x68>
c000b1c2:	c1 e6 04             	shl    esi,0x4
c000b1c5:	31 db                	xor    ebx,ebx
c000b1c7:	8d ae 00 03 02 c0    	lea    ebp,[esi-0x3ffdfd00]
c000b1cd:	81 c6 00 f3 01 c0    	add    esi,0xc001f300
c000b1d3:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000b1d7:	85 c0                	test   eax,eax
c000b1d9:	74 13                	je     c000b1ee <int_handler+0x56>
c000b1db:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000b1de:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000b1e2:	74 2a                	je     c000b20e <int_handler+0x76>
c000b1e4:	83 ec 08             	sub    esp,0x8
c000b1e7:	52                   	push   edx
c000b1e8:	57                   	push   edi
c000b1e9:	ff d0                	call   eax
c000b1eb:	83 c4 10             	add    esp,0x10
c000b1ee:	43                   	inc    ebx
c000b1ef:	83 fb 04             	cmp    ebx,0x4
c000b1f2:	75 df                	jne    c000b1d3 <int_handler+0x3b>
c000b1f4:	83 c4 0c             	add    esp,0xc
c000b1f7:	31 c0                	xor    eax,eax
c000b1f9:	5b                   	pop    ebx
c000b1fa:	31 d2                	xor    edx,edx
c000b1fc:	5e                   	pop    esi
c000b1fd:	5f                   	pop    edi
c000b1fe:	5d                   	pop    ebp
c000b1ff:	c3                   	ret    
c000b200:	83 ec 0c             	sub    esp,0xc
c000b203:	50                   	push   eax
c000b204:	e8 cc 94 00 00       	call   c00146d5 <HalEndOfInterrupt(int)>
c000b209:	83 c4 10             	add    esp,0x10
c000b20c:	eb b4                	jmp    c000b1c2 <int_handler+0x2a>
c000b20e:	83 ec 08             	sub    esp,0x8
c000b211:	52                   	push   edx
c000b212:	57                   	push   edi
c000b213:	ff d0                	call   eax
c000b215:	83 c4 10             	add    esp,0x10
c000b218:	83 c4 0c             	add    esp,0xc
c000b21b:	5b                   	pop    ebx
c000b21c:	5e                   	pop    esi
c000b21d:	5f                   	pop    edi
c000b21e:	5d                   	pop    ebp
c000b21f:	c3                   	ret    

c000b220 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000b220:	56                   	push   esi
c000b221:	31 c0                	xor    eax,eax
c000b223:	53                   	push   ebx
c000b224:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b228:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b22c:	89 ca                	mov    edx,ecx
c000b22e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b232:	c1 e2 04             	shl    edx,0x4
c000b235:	83 bc 82 00 03 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdfd00],0x0
c000b23d:	74 15                	je     c000b254 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000b23f:	40                   	inc    eax
c000b240:	83 f8 04             	cmp    eax,0x4
c000b243:	75 f0                	jne    c000b235 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000b245:	c7 44 24 0c a4 d3 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d3a4
c000b24d:	5b                   	pop    ebx
c000b24e:	5e                   	pop    esi
c000b24f:	e9 a7 41 00 00       	jmp    c000f3fb <Krnl::panic(char const*)>
c000b254:	8d 04 88             	lea    eax,[eax+ecx*4]
c000b257:	89 1c 85 00 03 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfd00],ebx
c000b25e:	89 34 85 00 f3 01 c0 	mov    DWORD PTR [eax*4-0x3ffe0d00],esi
c000b265:	5b                   	pop    ebx
c000b266:	5e                   	pop    esi
c000b267:	c3                   	ret    

c000b268 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b268:	57                   	push   edi
c000b269:	8b 15 08 f2 01 c0    	mov    edx,DWORD PTR ds:0xc001f208
c000b26f:	56                   	push   esi
c000b270:	53                   	push   ebx
c000b271:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b275:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b279:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000b280:	74 5b                	je     c000b2dd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000b282:	89 c7                	mov    edi,eax
c000b284:	84 c0                	test   al,al
c000b286:	74 24                	je     c000b2ac <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000b288:	83 fe 0f             	cmp    esi,0xf
c000b28b:	0f 8f d9 00 00 00    	jg     c000b36a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000b291:	8a 86 c0 eb 01 c0    	mov    al,BYTE PTR [esi-0x3ffe1440]
c000b297:	25 ff 00 00 00       	and    eax,0xff
c000b29c:	66 8b bc 00 a0 1a 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffde560]
c000b2a4:	89 c6                	mov    esi,eax
c000b2a6:	66 d1 ef             	shr    di,1
c000b2a9:	83 e7 01             	and    edi,0x1
c000b2ac:	83 ec 08             	sub    esp,0x8
c000b2af:	a1 c0 30 02 c0       	mov    eax,ds:0xc00230c0
c000b2b4:	31 db                	xor    ebx,ebx
c000b2b6:	50                   	push   eax
c000b2b7:	68 b1 d3 01 c0       	push   0xc001d3b1
c000b2bc:	e8 eb e5 ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c000b2c1:	83 c4 10             	add    esp,0x10
c000b2c4:	a1 c0 30 02 c0       	mov    eax,ds:0xc00230c0
c000b2c9:	85 c0                	test   eax,eax
c000b2cb:	7f 51                	jg     c000b31e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000b2cd:	83 ec 0c             	sub    esp,0xc
c000b2d0:	68 c8 d3 01 c0       	push   0xc001d3c8
c000b2d5:	e8 21 41 00 00       	call   c000f3fb <Krnl::panic(char const*)>
c000b2da:	83 c4 10             	add    esp,0x10
c000b2dd:	8d 4e 20             	lea    ecx,[esi+0x20]
c000b2e0:	31 d2                	xor    edx,edx
c000b2e2:	89 c8                	mov    eax,ecx
c000b2e4:	c1 e0 04             	shl    eax,0x4
c000b2e7:	8b 9c 90 00 03 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdfd00]
c000b2ee:	85 db                	test   ebx,ebx
c000b2f0:	0f 84 8b 00 00 00    	je     c000b381 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000b2f6:	42                   	inc    edx
c000b2f7:	83 fa 04             	cmp    edx,0x4
c000b2fa:	75 eb                	jne    c000b2e7 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000b2fc:	83 ec 0c             	sub    esp,0xc
c000b2ff:	68 1c d4 01 c0       	push   0xc001d41c
c000b304:	e8 f2 40 00 00       	call   c000f3fb <Krnl::panic(char const*)>
c000b309:	83 c4 10             	add    esp,0x10
c000b30c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b311:	5b                   	pop    ebx
c000b312:	5e                   	pop    esi
c000b313:	5f                   	pop    edi
c000b314:	c3                   	ret    
c000b315:	43                   	inc    ebx
c000b316:	39 1d c0 30 02 c0    	cmp    DWORD PTR ds:0xc00230c0,ebx
c000b31c:	7e af                	jle    c000b2cd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000b31e:	83 ec 08             	sub    esp,0x8
c000b321:	8b 04 9d e0 30 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdcf20]
c000b328:	56                   	push   esi
c000b329:	50                   	push   eax
c000b32a:	e8 6f f6 00 00       	call   c001a99e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000b32f:	83 c4 10             	add    esp,0x10
c000b332:	84 c0                	test   al,al
c000b334:	74 df                	je     c000b315 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000b336:	81 e7 ff 00 00 00    	and    edi,0xff
c000b33c:	50                   	push   eax
c000b33d:	8d 46 20             	lea    eax,[esi+0x20]
c000b340:	57                   	push   edi
c000b341:	25 ff 00 00 00       	and    eax,0xff
c000b346:	6a 00                	push   0x0
c000b348:	50                   	push   eax
c000b349:	89 f0                	mov    eax,esi
c000b34b:	6a 00                	push   0x0
c000b34d:	25 ff 00 00 00       	and    eax,0xff
c000b352:	6a 00                	push   0x0
c000b354:	50                   	push   eax
c000b355:	8b 04 9d e0 30 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdcf20]
c000b35c:	50                   	push   eax
c000b35d:	e8 b6 f7 00 00       	call   c001ab18 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000b362:	83 c4 20             	add    esp,0x20
c000b365:	e9 73 ff ff ff       	jmp    c000b2dd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000b36a:	83 ec 0c             	sub    esp,0xc
c000b36d:	31 ff                	xor    edi,edi
c000b36f:	68 e4 d3 01 c0       	push   0xc001d3e4
c000b374:	e8 82 40 00 00       	call   c000f3fb <Krnl::panic(char const*)>
c000b379:	83 c4 10             	add    esp,0x10
c000b37c:	e9 2b ff ff ff       	jmp    c000b2ac <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000b381:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b384:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b388:	89 14 85 00 03 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfd00],edx
c000b38f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b393:	5b                   	pop    ebx
c000b394:	89 14 85 00 f3 01 c0 	mov    DWORD PTR [eax*4-0x3ffe0d00],edx
c000b39b:	89 f0                	mov    eax,esi
c000b39d:	5e                   	pop    esi
c000b39e:	5f                   	pop    edi
c000b39f:	c3                   	ret    

c000b3a0 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000b3a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3a4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b3a8:	c1 e0 04             	shl    eax,0x4
c000b3ab:	8d 50 10             	lea    edx,[eax+0x10]
c000b3ae:	39 88 00 03 02 c0    	cmp    DWORD PTR [eax-0x3ffdfd00],ecx
c000b3b4:	74 08                	je     c000b3be <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000b3b6:	83 c0 04             	add    eax,0x4
c000b3b9:	39 d0                	cmp    eax,edx
c000b3bb:	75 f1                	jne    c000b3ae <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000b3bd:	c3                   	ret    
c000b3be:	c7 80 00 03 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfd00],0x0
c000b3c8:	c7 80 00 f3 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0d00],0x0
c000b3d2:	eb e2                	jmp    c000b3b6 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000b3d4 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000b3d4:	53                   	push   ebx
c000b3d5:	83 ec 08             	sub    esp,0x8
c000b3d8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b3dc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000b3e1:	74 0e                	je     c000b3f1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000b3e3:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c000b3e8:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000b3ef:	75 37                	jne    c000b428 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000b3f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3f5:	83 c0 20             	add    eax,0x20
c000b3f8:	c1 e0 04             	shl    eax,0x4
c000b3fb:	8d 50 10             	lea    edx,[eax+0x10]
c000b3fe:	39 98 00 03 02 c0    	cmp    DWORD PTR [eax-0x3ffdfd00],ebx
c000b404:	74 0c                	je     c000b412 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000b406:	83 c0 04             	add    eax,0x4
c000b409:	39 d0                	cmp    eax,edx
c000b40b:	75 f1                	jne    c000b3fe <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000b40d:	83 c4 08             	add    esp,0x8
c000b410:	5b                   	pop    ebx
c000b411:	c3                   	ret    
c000b412:	c7 80 00 03 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfd00],0x0
c000b41c:	c7 80 00 f3 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0d00],0x0
c000b426:	eb de                	jmp    c000b406 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000b428:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000b42d:	7f 12                	jg     c000b441 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000b42f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b433:	31 c0                	xor    eax,eax
c000b435:	8a 81 c0 eb 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe1440]
c000b43b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b43f:	eb b0                	jmp    c000b3f1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000b441:	83 ec 0c             	sub    esp,0xc
c000b444:	68 d5 d3 01 c0       	push   0xc001d3d5
c000b449:	e8 ad 3f 00 00       	call   c000f3fb <Krnl::panic(char const*)>
c000b44e:	83 c4 10             	add    esp,0x10
c000b451:	eb 9e                	jmp    c000b3f1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000b453 <setupINTS()>:
c000b453:	31 c0                	xor    eax,eax
c000b455:	c7 80 00 03 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfd00],0x0
c000b45f:	c7 80 00 f3 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0d00],0x0
c000b469:	c7 80 04 03 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfcfc],0x0
c000b473:	c7 80 04 f3 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0cfc],0x0
c000b47d:	c7 80 08 03 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfcf8],0x0
c000b487:	c7 80 08 f3 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0cf8],0x0
c000b491:	c7 80 0c 03 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfcf4],0x0
c000b49b:	c7 80 0c f3 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0cf4],0x0
c000b4a5:	83 c0 10             	add    eax,0x10
c000b4a8:	3d 00 10 00 00       	cmp    eax,0x1000
c000b4ad:	75 a6                	jne    c000b455 <setupINTS()+0x2>
c000b4af:	c3                   	ret    

c000b4b0 <convertLegacyIRQNumber(int)>:
c000b4b0:	83 ec 0c             	sub    esp,0xc
c000b4b3:	8b 15 08 f2 01 c0    	mov    edx,DWORD PTR ds:0xc001f208
c000b4b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4bd:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000b4c4:	74 0f                	je     c000b4d5 <convertLegacyIRQNumber(int)+0x25>
c000b4c6:	83 f8 0f             	cmp    eax,0xf
c000b4c9:	7f 0e                	jg     c000b4d9 <convertLegacyIRQNumber(int)+0x29>
c000b4cb:	31 c9                	xor    ecx,ecx
c000b4cd:	8a 88 c0 eb 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe1440]
c000b4d3:	89 c8                	mov    eax,ecx
c000b4d5:	83 c4 0c             	add    esp,0xc
c000b4d8:	c3                   	ret    
c000b4d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4dd:	83 ec 0c             	sub    esp,0xc
c000b4e0:	68 e4 d3 01 c0       	push   0xc001d3e4
c000b4e5:	e8 11 3f 00 00       	call   c000f3fb <Krnl::panic(char const*)>
c000b4ea:	83 c4 10             	add    esp,0x10
c000b4ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4f1:	83 c4 0c             	add    esp,0xc
c000b4f4:	c3                   	ret    
c000b4f5:	90                   	nop

c000b4f6 <startGUI(void*)>:
c000b4f6:	55                   	push   ebp
c000b4f7:	89 e5                	mov    ebp,esp
c000b4f9:	53                   	push   ebx
c000b4fa:	83 ec 04             	sub    esp,0x4
c000b4fd:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c000b502:	48                   	dec    eax
c000b503:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c000b508:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c000b50d:	85 c0                	test   eax,eax
c000b50f:	75 01                	jne    c000b512 <startGUI(void*)+0x1c>
c000b511:	fb                   	sti    
c000b512:	8b 1d 08 f2 01 c0    	mov    ebx,DWORD PTR ds:0xc001f208
c000b518:	83 ec 08             	sub    esp,0x8
c000b51b:	6a 01                	push   0x1
c000b51d:	68 41 d4 01 c0       	push   0xc001d441
c000b522:	e8 37 68 00 00       	call   c0011d5e <Thr::loadDLL(char const*, bool)>
c000b527:	83 c4 10             	add    esp,0x10
c000b52a:	83 ec 08             	sub    esp,0x8
c000b52d:	53                   	push   ebx
c000b52e:	50                   	push   eax
c000b52f:	e8 5b 6a 00 00       	call   c0011f8f <Thr::executeDLL(unsigned long, void*)>
c000b534:	83 c4 10             	add    esp,0x10
c000b537:	8b 1d 08 f2 01 c0    	mov    ebx,DWORD PTR ds:0xc001f208
c000b53d:	83 ec 08             	sub    esp,0x8
c000b540:	6a 01                	push   0x1
c000b542:	68 5b d4 01 c0       	push   0xc001d45b
c000b547:	e8 12 68 00 00       	call   c0011d5e <Thr::loadDLL(char const*, bool)>
c000b54c:	83 c4 10             	add    esp,0x10
c000b54f:	83 ec 08             	sub    esp,0x8
c000b552:	53                   	push   ebx
c000b553:	50                   	push   eax
c000b554:	e8 36 6a 00 00       	call   c0011f8f <Thr::executeDLL(unsigned long, void*)>
c000b559:	83 c4 10             	add    esp,0x10
c000b55c:	90                   	nop
c000b55d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000b560:	c9                   	leave  
c000b561:	c3                   	ret    

c000b562 <startGUIVESA(void*)>:
c000b562:	55                   	push   ebp
c000b563:	89 e5                	mov    ebp,esp
c000b565:	53                   	push   ebx
c000b566:	83 ec 04             	sub    esp,0x4
c000b569:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c000b56e:	48                   	dec    eax
c000b56f:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c000b574:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c000b579:	85 c0                	test   eax,eax
c000b57b:	75 01                	jne    c000b57e <startGUIVESA(void*)+0x1c>
c000b57d:	fb                   	sti    
c000b57e:	8b 1d 08 f2 01 c0    	mov    ebx,DWORD PTR ds:0xc001f208
c000b584:	83 ec 08             	sub    esp,0x8
c000b587:	6a 01                	push   0x1
c000b589:	68 79 d4 01 c0       	push   0xc001d479
c000b58e:	e8 cb 67 00 00       	call   c0011d5e <Thr::loadDLL(char const*, bool)>
c000b593:	83 c4 10             	add    esp,0x10
c000b596:	83 ec 08             	sub    esp,0x8
c000b599:	53                   	push   ebx
c000b59a:	50                   	push   eax
c000b59b:	e8 ef 69 00 00       	call   c0011f8f <Thr::executeDLL(unsigned long, void*)>
c000b5a0:	83 c4 10             	add    esp,0x10
c000b5a3:	8b 1d 08 f2 01 c0    	mov    ebx,DWORD PTR ds:0xc001f208
c000b5a9:	83 ec 08             	sub    esp,0x8
c000b5ac:	6a 01                	push   0x1
c000b5ae:	68 5b d4 01 c0       	push   0xc001d45b
c000b5b3:	e8 a6 67 00 00       	call   c0011d5e <Thr::loadDLL(char const*, bool)>
c000b5b8:	83 c4 10             	add    esp,0x10
c000b5bb:	83 ec 08             	sub    esp,0x8
c000b5be:	53                   	push   ebx
c000b5bf:	50                   	push   eax
c000b5c0:	e8 ca 69 00 00       	call   c0011f8f <Thr::executeDLL(unsigned long, void*)>
c000b5c5:	83 c4 10             	add    esp,0x10
c000b5c8:	90                   	nop
c000b5c9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000b5cc:	c9                   	leave  
c000b5cd:	c3                   	ret    

c000b5ce <sendKeyToTerminal(unsigned char)>:
c000b5ce:	55                   	push   ebp
c000b5cf:	89 e5                	mov    ebp,esp
c000b5d1:	83 ec 28             	sub    esp,0x28
c000b5d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b5d7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000b5da:	8b 15 54 f2 01 c0    	mov    edx,DWORD PTR ds:0xc001f254
c000b5e0:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000b5e3:	25 ff 00 00 00       	and    eax,0xff
c000b5e8:	83 ec 08             	sub    esp,0x8
c000b5eb:	50                   	push   eax
c000b5ec:	52                   	push   edx
c000b5ed:	e8 aa c8 ff ff       	call   c0007e9c <VgaText::receiveKey(unsigned char)>
c000b5f2:	83 c4 10             	add    esp,0x10
c000b5f5:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000b5f9:	0f 85 8f 00 00 00    	jne    c000b68e <sendKeyToTerminal(unsigned char)+0xc0>
c000b5ff:	fa                   	cli    
c000b600:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c000b605:	40                   	inc    eax
c000b606:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c000b60b:	a1 c4 26 02 c0       	mov    eax,ds:0xc00226c4
c000b610:	40                   	inc    eax
c000b611:	a3 c4 26 02 c0       	mov    ds:0xc00226c4,eax
c000b616:	a1 00 13 02 c0       	mov    eax,ds:0xc0021300
c000b61b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000b61e:	c7 05 00 13 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021300,0x0
c000b628:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000b62c:	74 1f                	je     c000b64d <sendKeyToTerminal(unsigned char)+0x7f>
c000b62e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000b631:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000b634:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000b637:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b63a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000b63d:	83 ec 0c             	sub    esp,0xc
c000b640:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b643:	e8 cc 75 00 00       	call   c0012c14 <unblockTask(ThreadControlBlock*)>
c000b648:	83 c4 10             	add    esp,0x10
c000b64b:	eb db                	jmp    c000b628 <sendKeyToTerminal(unsigned char)+0x5a>
c000b64d:	a1 c4 26 02 c0       	mov    eax,ds:0xc00226c4
c000b652:	48                   	dec    eax
c000b653:	a3 c4 26 02 c0       	mov    ds:0xc00226c4,eax
c000b658:	a1 c4 26 02 c0       	mov    eax,ds:0xc00226c4
c000b65d:	85 c0                	test   eax,eax
c000b65f:	75 18                	jne    c000b679 <sendKeyToTerminal(unsigned char)+0xab>
c000b661:	a1 c0 26 02 c0       	mov    eax,ds:0xc00226c0
c000b666:	85 c0                	test   eax,eax
c000b668:	74 0f                	je     c000b679 <sendKeyToTerminal(unsigned char)+0xab>
c000b66a:	c7 05 c0 26 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00226c0,0x0
c000b674:	e8 d7 70 00 00       	call   c0012750 <schedule()>
c000b679:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c000b67e:	48                   	dec    eax
c000b67f:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c000b684:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c000b689:	85 c0                	test   eax,eax
c000b68b:	75 01                	jne    c000b68e <sendKeyToTerminal(unsigned char)+0xc0>
c000b68d:	fb                   	sti    
c000b68e:	90                   	nop
c000b68f:	c9                   	leave  
c000b690:	c3                   	ret    

c000b691 <sendKeyboardToken(KeyboardToken)>:
c000b691:	55                   	push   ebp
c000b692:	89 e5                	mov    ebp,esp
c000b694:	83 ec 18             	sub    esp,0x18
c000b697:	e8 ab 3e 00 00       	call   c000f547 <Krnl::userIOReceived()>
c000b69c:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000b69f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6a2:	25 ff ff 00 00       	and    eax,0xffff
c000b6a7:	83 f2 01             	xor    edx,0x1
c000b6aa:	88 90 20 13 02 c0    	mov    BYTE PTR [eax-0x3ffdece0],dl
c000b6b0:	a1 08 13 02 c0       	mov    eax,ds:0xc0021308
c000b6b5:	85 c0                	test   eax,eax
c000b6b7:	74 24                	je     c000b6dd <sendKeyboardToken(KeyboardToken)+0x4c>
c000b6b9:	8b 0d 08 13 02 c0    	mov    ecx,DWORD PTR ds:0xc0021308
c000b6bf:	83 ec 04             	sub    esp,0x4
c000b6c2:	68 20 13 02 c0       	push   0xc0021320
c000b6c7:	83 ec 08             	sub    esp,0x8
c000b6ca:	89 e2                	mov    edx,esp
c000b6cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6cf:	89 02                	mov    DWORD PTR [edx],eax
c000b6d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b6d4:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000b6d8:	ff d1                	call   ecx
c000b6da:	83 c4 10             	add    esp,0x10
c000b6dd:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000b6e1:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000b6e4:	a0 28 17 02 c0       	mov    al,ds:0xc0021728
c000b6e9:	38 c2                	cmp    dl,al
c000b6eb:	74 1e                	je     c000b70b <sendKeyboardToken(KeyboardToken)+0x7a>
c000b6ed:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000b6f0:	a2 28 17 02 c0       	mov    ds:0xc0021728,al
c000b6f5:	a0 28 17 02 c0       	mov    al,ds:0xc0021728
c000b6fa:	25 ff 00 00 00       	and    eax,0xff
c000b6ff:	83 ec 0c             	sub    esp,0xc
c000b702:	50                   	push   eax
c000b703:	e8 e6 be ff ff       	call   c00075ee <setTerminalScrollLock(bool)>
c000b708:	83 c4 10             	add    esp,0x10
c000b70b:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000b70e:	84 c0                	test   al,al
c000b710:	0f 84 ae 00 00 00    	je     c000b7c4 <sendKeyboardToken(KeyboardToken)+0x133>
c000b716:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b719:	66 3d 10 03          	cmp    ax,0x310
c000b71d:	75 06                	jne    c000b725 <sendKeyboardToken(KeyboardToken)+0x94>
c000b71f:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000b725:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b728:	66 3d 11 03          	cmp    ax,0x311
c000b72c:	75 06                	jne    c000b734 <sendKeyboardToken(KeyboardToken)+0xa3>
c000b72e:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000b734:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b737:	66 3d 12 03          	cmp    ax,0x312
c000b73b:	75 06                	jne    c000b743 <sendKeyboardToken(KeyboardToken)+0xb2>
c000b73d:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000b743:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b746:	66 3d 13 03          	cmp    ax,0x313
c000b74a:	75 06                	jne    c000b752 <sendKeyboardToken(KeyboardToken)+0xc1>
c000b74c:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000b752:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b755:	66 3d 14 03          	cmp    ax,0x314
c000b759:	75 06                	jne    c000b761 <sendKeyboardToken(KeyboardToken)+0xd0>
c000b75b:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000b761:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b764:	66 3d 15 03          	cmp    ax,0x315
c000b768:	75 06                	jne    c000b770 <sendKeyboardToken(KeyboardToken)+0xdf>
c000b76a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000b770:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b773:	66 3d 16 03          	cmp    ax,0x316
c000b777:	75 06                	jne    c000b77f <sendKeyboardToken(KeyboardToken)+0xee>
c000b779:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000b77f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b782:	66 3d 17 03          	cmp    ax,0x317
c000b786:	75 06                	jne    c000b78e <sendKeyboardToken(KeyboardToken)+0xfd>
c000b788:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000b78e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b791:	66 3d 18 03          	cmp    ax,0x318
c000b795:	75 06                	jne    c000b79d <sendKeyboardToken(KeyboardToken)+0x10c>
c000b797:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000b79d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7a0:	66 3d 19 03          	cmp    ax,0x319
c000b7a4:	75 06                	jne    c000b7ac <sendKeyboardToken(KeyboardToken)+0x11b>
c000b7a6:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000b7ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7af:	66 3d 1a 03          	cmp    ax,0x31a
c000b7b3:	0f 85 c9 00 00 00    	jne    c000b882 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000b7b9:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000b7bf:	e9 be 00 00 00       	jmp    c000b882 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000b7c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7c7:	66 3d 10 03          	cmp    ax,0x310
c000b7cb:	75 0a                	jne    c000b7d7 <sendKeyboardToken(KeyboardToken)+0x146>
c000b7cd:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000b7d3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b7d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7da:	66 3d 11 03          	cmp    ax,0x311
c000b7de:	75 0a                	jne    c000b7ea <sendKeyboardToken(KeyboardToken)+0x159>
c000b7e0:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000b7e6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b7ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7ed:	66 3d 12 03          	cmp    ax,0x312
c000b7f1:	75 0a                	jne    c000b7fd <sendKeyboardToken(KeyboardToken)+0x16c>
c000b7f3:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000b7f9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b7fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b800:	66 3d 13 03          	cmp    ax,0x313
c000b804:	75 0a                	jne    c000b810 <sendKeyboardToken(KeyboardToken)+0x17f>
c000b806:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000b80c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b810:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b813:	66 3d 14 03          	cmp    ax,0x314
c000b817:	75 0a                	jne    c000b823 <sendKeyboardToken(KeyboardToken)+0x192>
c000b819:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000b81f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b823:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b826:	66 3d 15 03          	cmp    ax,0x315
c000b82a:	75 0a                	jne    c000b836 <sendKeyboardToken(KeyboardToken)+0x1a5>
c000b82c:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000b832:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b836:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b839:	66 3d 16 03          	cmp    ax,0x316
c000b83d:	75 0a                	jne    c000b849 <sendKeyboardToken(KeyboardToken)+0x1b8>
c000b83f:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000b845:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b849:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b84c:	66 3d 17 03          	cmp    ax,0x317
c000b850:	75 0a                	jne    c000b85c <sendKeyboardToken(KeyboardToken)+0x1cb>
c000b852:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000b858:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b85c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b85f:	66 3d 18 03          	cmp    ax,0x318
c000b863:	75 0a                	jne    c000b86f <sendKeyboardToken(KeyboardToken)+0x1de>
c000b865:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000b86b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b86f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b872:	66 3d 19 03          	cmp    ax,0x319
c000b876:	75 0a                	jne    c000b882 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000b878:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000b87e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b882:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b885:	66 3d 00 02          	cmp    ax,0x200
c000b889:	75 2c                	jne    c000b8b7 <sendKeyboardToken(KeyboardToken)+0x226>
c000b88b:	a0 20 17 02 c0       	mov    al,ds:0xc0021720
c000b890:	83 f0 01             	xor    eax,0x1
c000b893:	84 c0                	test   al,al
c000b895:	74 20                	je     c000b8b7 <sendKeyboardToken(KeyboardToken)+0x226>
c000b897:	a1 f0 26 02 c0       	mov    eax,ds:0xc00226f0
c000b89c:	6a 01                	push   0x1
c000b89e:	6a 00                	push   0x0
c000b8a0:	68 f6 b4 00 c0       	push   0xc000b4f6
c000b8a5:	50                   	push   eax
c000b8a6:	e8 85 6c 00 00       	call   c0012530 <Process::createThread(void (*)(void*), void*, int)>
c000b8ab:	83 c4 10             	add    esp,0x10
c000b8ae:	c6 05 20 17 02 c0 01 	mov    BYTE PTR ds:0xc0021720,0x1
c000b8b5:	eb 33                	jmp    c000b8ea <sendKeyboardToken(KeyboardToken)+0x259>
c000b8b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b8ba:	66 3d 01 02          	cmp    ax,0x201
c000b8be:	75 2a                	jne    c000b8ea <sendKeyboardToken(KeyboardToken)+0x259>
c000b8c0:	a0 20 17 02 c0       	mov    al,ds:0xc0021720
c000b8c5:	83 f0 01             	xor    eax,0x1
c000b8c8:	84 c0                	test   al,al
c000b8ca:	74 1e                	je     c000b8ea <sendKeyboardToken(KeyboardToken)+0x259>
c000b8cc:	a1 f0 26 02 c0       	mov    eax,ds:0xc00226f0
c000b8d1:	6a 01                	push   0x1
c000b8d3:	6a 00                	push   0x0
c000b8d5:	68 62 b5 00 c0       	push   0xc000b562
c000b8da:	50                   	push   eax
c000b8db:	e8 50 6c 00 00       	call   c0012530 <Process::createThread(void (*)(void*), void*, int)>
c000b8e0:	83 c4 10             	add    esp,0x10
c000b8e3:	c6 05 20 17 02 c0 01 	mov    BYTE PTR ds:0xc0021720,0x1
c000b8ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b8ed:	66 3d 1d 03          	cmp    ax,0x31d
c000b8f1:	75 06                	jne    c000b8f9 <sendKeyboardToken(KeyboardToken)+0x268>
c000b8f3:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000b8f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b8fc:	66 3d 1c 03          	cmp    ax,0x31c
c000b900:	75 06                	jne    c000b908 <sendKeyboardToken(KeyboardToken)+0x277>
c000b902:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000b908:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b90b:	66 3d 1b 03          	cmp    ax,0x31b
c000b90f:	75 06                	jne    c000b917 <sendKeyboardToken(KeyboardToken)+0x286>
c000b911:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000b917:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b91a:	66 3d 1e 03          	cmp    ax,0x31e
c000b91e:	75 06                	jne    c000b926 <sendKeyboardToken(KeyboardToken)+0x295>
c000b920:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000b926:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b929:	66 3d 1f 03          	cmp    ax,0x31f
c000b92d:	75 06                	jne    c000b935 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000b92f:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000b935:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b938:	66 3d 1a 03          	cmp    ax,0x31a
c000b93c:	75 06                	jne    c000b944 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000b93e:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000b944:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000b948:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000b94b:	83 f0 01             	xor    eax,0x1
c000b94e:	84 c0                	test   al,al
c000b950:	74 7b                	je     c000b9cd <sendKeyboardToken(KeyboardToken)+0x33c>
c000b952:	a0 21 14 02 c0       	mov    al,ds:0xc0021421
c000b957:	84 c0                	test   al,al
c000b959:	74 43                	je     c000b99e <sendKeyboardToken(KeyboardToken)+0x30d>
c000b95b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000b95f:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000b963:	74 2d                	je     c000b992 <sendKeyboardToken(KeyboardToken)+0x301>
c000b965:	8b 15 24 17 02 c0    	mov    edx,DWORD PTR ds:0xc0021724
c000b96b:	89 d0                	mov    eax,edx
c000b96d:	c1 e0 02             	shl    eax,0x2
c000b970:	01 d0                	add    eax,edx
c000b972:	01 c0                	add    eax,eax
c000b974:	a3 24 17 02 c0       	mov    ds:0xc0021724,eax
c000b979:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b97c:	25 ff ff 00 00       	and    eax,0xffff
c000b981:	8d 50 d0             	lea    edx,[eax-0x30]
c000b984:	a1 24 17 02 c0       	mov    eax,ds:0xc0021724
c000b989:	01 d0                	add    eax,edx
c000b98b:	a3 24 17 02 c0       	mov    ds:0xc0021724,eax
c000b990:	eb 71                	jmp    c000ba03 <sendKeyboardToken(KeyboardToken)+0x372>
c000b992:	c7 05 24 17 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021724,0x0
c000b99c:	eb 65                	jmp    c000ba03 <sendKeyboardToken(KeyboardToken)+0x372>
c000b99e:	a1 24 17 02 c0       	mov    eax,ds:0xc0021724
c000b9a3:	85 c0                	test   eax,eax
c000b9a5:	74 1a                	je     c000b9c1 <sendKeyboardToken(KeyboardToken)+0x330>
c000b9a7:	a1 24 17 02 c0       	mov    eax,ds:0xc0021724
c000b9ac:	25 ff 00 00 00       	and    eax,0xff
c000b9b1:	83 ec 0c             	sub    esp,0xc
c000b9b4:	50                   	push   eax
c000b9b5:	e8 14 fc ff ff       	call   c000b5ce <sendKeyToTerminal(unsigned char)>
c000b9ba:	83 c4 10             	add    esp,0x10
c000b9bd:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000b9c1:	c7 05 24 17 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021724,0x0
c000b9cb:	eb 36                	jmp    c000ba03 <sendKeyboardToken(KeyboardToken)+0x372>
c000b9cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b9d0:	66 3d 01 01          	cmp    ax,0x101
c000b9d4:	75 2d                	jne    c000ba03 <sendKeyboardToken(KeyboardToken)+0x372>
c000b9d6:	a1 24 17 02 c0       	mov    eax,ds:0xc0021724
c000b9db:	85 c0                	test   eax,eax
c000b9dd:	74 1a                	je     c000b9f9 <sendKeyboardToken(KeyboardToken)+0x368>
c000b9df:	a1 24 17 02 c0       	mov    eax,ds:0xc0021724
c000b9e4:	25 ff 00 00 00       	and    eax,0xff
c000b9e9:	83 ec 0c             	sub    esp,0xc
c000b9ec:	50                   	push   eax
c000b9ed:	e8 dc fb ff ff       	call   c000b5ce <sendKeyToTerminal(unsigned char)>
c000b9f2:	83 c4 10             	add    esp,0x10
c000b9f5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000b9f9:	c7 05 24 17 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021724,0x0
c000ba03:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000ba06:	83 f0 01             	xor    eax,0x1
c000ba09:	84 c0                	test   al,al
c000ba0b:	74 4e                	je     c000ba5b <sendKeyboardToken(KeyboardToken)+0x3ca>
c000ba0d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ba10:	83 f0 01             	xor    eax,0x1
c000ba13:	84 c0                	test   al,al
c000ba15:	74 44                	je     c000ba5b <sendKeyboardToken(KeyboardToken)+0x3ca>
c000ba17:	a0 20 14 02 c0       	mov    al,ds:0xc0021420
c000ba1c:	83 f0 01             	xor    eax,0x1
c000ba1f:	84 c0                	test   al,al
c000ba21:	74 38                	je     c000ba5b <sendKeyboardToken(KeyboardToken)+0x3ca>
c000ba23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba26:	66 83 f8 1f          	cmp    ax,0x1f
c000ba2a:	76 09                	jbe    c000ba35 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000ba2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba2f:	66 83 f8 7e          	cmp    ax,0x7e
c000ba33:	76 12                	jbe    c000ba47 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000ba35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba38:	66 83 f8 0a          	cmp    ax,0xa
c000ba3c:	74 09                	je     c000ba47 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000ba3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba41:	66 83 f8 08          	cmp    ax,0x8
c000ba45:	75 14                	jne    c000ba5b <sendKeyboardToken(KeyboardToken)+0x3ca>
c000ba47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba4a:	25 ff 00 00 00       	and    eax,0xff
c000ba4f:	83 ec 0c             	sub    esp,0xc
c000ba52:	50                   	push   eax
c000ba53:	e8 76 fb ff ff       	call   c000b5ce <sendKeyToTerminal(unsigned char)>
c000ba58:	83 c4 10             	add    esp,0x10
c000ba5b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000ba5e:	83 f0 01             	xor    eax,0x1
c000ba61:	84 c0                	test   al,al
c000ba63:	74 51                	je     c000bab6 <sendKeyboardToken(KeyboardToken)+0x425>
c000ba65:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ba68:	83 f0 01             	xor    eax,0x1
c000ba6b:	84 c0                	test   al,al
c000ba6d:	74 47                	je     c000bab6 <sendKeyboardToken(KeyboardToken)+0x425>
c000ba6f:	a0 20 14 02 c0       	mov    al,ds:0xc0021420
c000ba74:	84 c0                	test   al,al
c000ba76:	74 3e                	je     c000bab6 <sendKeyboardToken(KeyboardToken)+0x425>
c000ba78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba7b:	66 83 f8 3f          	cmp    ax,0x3f
c000ba7f:	76 35                	jbe    c000bab6 <sendKeyboardToken(KeyboardToken)+0x425>
c000ba81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba84:	66 83 f8 7f          	cmp    ax,0x7f
c000ba88:	77 2c                	ja     c000bab6 <sendKeyboardToken(KeyboardToken)+0x425>
c000ba8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba8d:	88 c2                	mov    dl,al
c000ba8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba92:	66 83 f8 5f          	cmp    ax,0x5f
c000ba96:	76 04                	jbe    c000ba9c <sendKeyboardToken(KeyboardToken)+0x40b>
c000ba98:	b0 20                	mov    al,0x20
c000ba9a:	eb 02                	jmp    c000ba9e <sendKeyboardToken(KeyboardToken)+0x40d>
c000ba9c:	b0 00                	mov    al,0x0
c000ba9e:	29 c2                	sub    edx,eax
c000baa0:	88 d0                	mov    al,dl
c000baa2:	83 e8 40             	sub    eax,0x40
c000baa5:	25 ff 00 00 00       	and    eax,0xff
c000baaa:	83 ec 0c             	sub    esp,0xc
c000baad:	50                   	push   eax
c000baae:	e8 1b fb ff ff       	call   c000b5ce <sendKeyToTerminal(unsigned char)>
c000bab3:	83 c4 10             	add    esp,0x10
c000bab6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bab9:	66 3d 00 03          	cmp    ax,0x300
c000babd:	75 0f                	jne    c000bace <sendKeyboardToken(KeyboardToken)+0x43d>
c000babf:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000bac2:	83 f0 01             	xor    eax,0x1
c000bac5:	84 c0                	test   al,al
c000bac7:	74 05                	je     c000bace <sendKeyboardToken(KeyboardToken)+0x43d>
c000bac9:	e8 21 bb ff ff       	call   c00075ef <doTerminalCycle()>
c000bace:	90                   	nop
c000bacf:	c9                   	leave  
c000bad0:	c3                   	ret    

c000bad1 <clearInternalKeybuffer(VgaText*)>:
c000bad1:	55                   	push   ebp
c000bad2:	89 e5                	mov    ebp,esp
c000bad4:	83 ec 08             	sub    esp,0x8
c000bad7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bada:	05 b2 00 00 00       	add    eax,0xb2
c000badf:	83 ec 0c             	sub    esp,0xc
c000bae2:	50                   	push   eax
c000bae3:	e8 78 4a ff ff       	call   c0000560 <strlen>
c000bae8:	83 c4 10             	add    esp,0x10
c000baeb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000baee:	81 c2 b2 00 00 00    	add    edx,0xb2
c000baf4:	83 ec 04             	sub    esp,0x4
c000baf7:	50                   	push   eax
c000baf8:	6a 00                	push   0x0
c000bafa:	52                   	push   edx
c000bafb:	e8 f0 49 ff ff       	call   c00004f0 <memset>
c000bb00:	83 c4 10             	add    esp,0x10
c000bb03:	90                   	nop
c000bb04:	c9                   	leave  
c000bb05:	c3                   	ret    

c000bb06 <readKeyboard(VgaText*, char*, unsigned long)>:
c000bb06:	55                   	push   ebp
c000bb07:	89 e5                	mov    ebp,esp
c000bb09:	83 ec 18             	sub    esp,0x18
c000bb0c:	a1 08 13 02 c0       	mov    eax,ds:0xc0021308
c000bb11:	85 c0                	test   eax,eax
c000bb13:	74 2a                	je     c000bb3f <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000bb15:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000bb1b:	8b 0d 08 13 02 c0    	mov    ecx,DWORD PTR ds:0xc0021308
c000bb21:	83 ec 04             	sub    esp,0x4
c000bb24:	68 20 13 02 c0       	push   0xc0021320
c000bb29:	83 ec 08             	sub    esp,0x8
c000bb2c:	89 e2                	mov    edx,esp
c000bb2e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000bb31:	89 02                	mov    DWORD PTR [edx],eax
c000bb33:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000bb36:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000bb3a:	ff d1                	call   ecx
c000bb3c:	83 c4 10             	add    esp,0x10
c000bb3f:	fb                   	sti    
c000bb40:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000bb47:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000bb4b:	0f 84 a1 00 00 00    	je     c000bbf2 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000bb51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bb54:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000bb5a:	84 c0                	test   al,al
c000bb5c:	75 28                	jne    c000bb86 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000bb5e:	fa                   	cli    
c000bb5f:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c000bb64:	40                   	inc    eax
c000bb65:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c000bb6a:	e8 e1 6b 00 00       	call   c0012750 <schedule()>
c000bb6f:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c000bb74:	48                   	dec    eax
c000bb75:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c000bb7a:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c000bb7f:	85 c0                	test   eax,eax
c000bb81:	75 ce                	jne    c000bb51 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000bb83:	fb                   	sti    
c000bb84:	eb cb                	jmp    c000bb51 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000bb86:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000bb89:	8d 50 01             	lea    edx,[eax+0x1]
c000bb8c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000bb8f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000bb92:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000bb98:	88 10                	mov    BYTE PTR [eax],dl
c000bb9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bb9d:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000bba3:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000bba6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bba9:	05 b2 00 00 00       	add    eax,0xb2
c000bbae:	83 ec 0c             	sub    esp,0xc
c000bbb1:	50                   	push   eax
c000bbb2:	e8 a9 49 ff ff       	call   c0000560 <strlen>
c000bbb7:	83 c4 10             	add    esp,0x10
c000bbba:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000bbbd:	81 c2 b2 00 00 00    	add    edx,0xb2
c000bbc3:	8d 4a 01             	lea    ecx,[edx+0x1]
c000bbc6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000bbc9:	81 c2 b2 00 00 00    	add    edx,0xb2
c000bbcf:	83 ec 04             	sub    esp,0x4
c000bbd2:	50                   	push   eax
c000bbd3:	51                   	push   ecx
c000bbd4:	52                   	push   edx
c000bbd5:	e8 26 48 ff ff       	call   c0000400 <memmove>
c000bbda:	83 c4 10             	add    esp,0x10
c000bbdd:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000bbe0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000bbe3:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000bbe7:	0f 85 5a ff ff ff    	jne    c000bb47 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000bbed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000bbf0:	eb 03                	jmp    c000bbf5 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000bbf2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000bbf5:	c9                   	leave  
c000bbf6:	c3                   	ret    
c000bbf7:	90                   	nop

c000bbf8 <Keyboard::Keyboard(char const*)>:
c000bbf8:	83 ec 0c             	sub    esp,0xc
c000bbfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbff:	83 ec 08             	sub    esp,0x8
c000bc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc06:	50                   	push   eax
c000bc07:	e8 78 f2 ff ff       	call   c000ae84 <Device::Device(char const*)>
c000bc0c:	83 c4 10             	add    esp,0x10
c000bc0f:	ba 9c d4 01 c0       	mov    edx,0xc001d49c
c000bc14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc18:	89 10                	mov    DWORD PTR [eax],edx
c000bc1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc1e:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000bc28:	c6 05 04 13 02 c0 01 	mov    BYTE PTR ds:0xc0021304,0x1
c000bc2f:	90                   	nop
c000bc30:	83 c4 0c             	add    esp,0xc
c000bc33:	c3                   	ret    

c000bc34 <Keyboard::~Keyboard()>:
c000bc34:	83 ec 0c             	sub    esp,0xc
c000bc37:	ba 9c d4 01 c0       	mov    edx,0xc001d49c
c000bc3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc40:	89 10                	mov    DWORD PTR [eax],edx
c000bc42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc46:	83 ec 0c             	sub    esp,0xc
c000bc49:	50                   	push   eax
c000bc4a:	e8 9f ef ff ff       	call   c000abee <Device::~Device()>
c000bc4f:	83 c4 10             	add    esp,0x10
c000bc52:	90                   	nop
c000bc53:	83 c4 0c             	add    esp,0xc
c000bc56:	c3                   	ret    
c000bc57:	90                   	nop

c000bc58 <Keyboard::~Keyboard()>:
c000bc58:	83 ec 0c             	sub    esp,0xc
c000bc5b:	83 ec 0c             	sub    esp,0xc
c000bc5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc62:	e8 cd ff ff ff       	call   c000bc34 <Keyboard::~Keyboard()>
c000bc67:	83 c4 10             	add    esp,0x10
c000bc6a:	83 ec 08             	sub    esp,0x8
c000bc6d:	68 5c 01 00 00       	push   0x15c
c000bc72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc76:	e8 3b db ff ff       	call   c00097b6 <operator delete(void*, unsigned long)>
c000bc7b:	83 c4 10             	add    esp,0x10
c000bc7e:	83 c4 0c             	add    esp,0xc
c000bc81:	c3                   	ret    

c000bc82 <LogicalDisk::close(int, int, void*)>:
c000bc82:	83 c8 ff             	or     eax,0xffffffff
c000bc85:	c3                   	ret    

c000bc86 <LogicalDisk::~LogicalDisk()>:
c000bc86:	83 ec 0c             	sub    esp,0xc
c000bc89:	ba 14 d5 01 c0       	mov    edx,0xc001d514
c000bc8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc92:	89 10                	mov    DWORD PTR [eax],edx
c000bc94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc98:	83 ec 0c             	sub    esp,0xc
c000bc9b:	50                   	push   eax
c000bc9c:	e8 4d ef ff ff       	call   c000abee <Device::~Device()>
c000bca1:	83 c4 10             	add    esp,0x10
c000bca4:	90                   	nop
c000bca5:	83 c4 0c             	add    esp,0xc
c000bca8:	c3                   	ret    
c000bca9:	90                   	nop

c000bcaa <LogicalDisk::~LogicalDisk()>:
c000bcaa:	83 ec 0c             	sub    esp,0xc
c000bcad:	83 ec 0c             	sub    esp,0xc
c000bcb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcb4:	e8 cd ff ff ff       	call   c000bc86 <LogicalDisk::~LogicalDisk()>
c000bcb9:	83 c4 10             	add    esp,0x10
c000bcbc:	83 ec 08             	sub    esp,0x8
c000bcbf:	68 74 01 00 00       	push   0x174
c000bcc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcc8:	e8 e9 da ff ff       	call   c00097b6 <operator delete(void*, unsigned long)>
c000bccd:	83 c4 10             	add    esp,0x10
c000bcd0:	83 c4 0c             	add    esp,0xc
c000bcd3:	c3                   	ret    

c000bcd4 <LogicalDisk::open(int, int, void*)>:
c000bcd4:	83 ec 18             	sub    esp,0x18
c000bcd7:	68 c8 d4 01 c0       	push   0xc001d4c8
c000bcdc:	e8 1a 37 00 00       	call   c000f3fb <Krnl::panic(char const*)>
c000bce1:	83 c8 ff             	or     eax,0xffffffff
c000bce4:	83 c4 1c             	add    esp,0x1c
c000bce7:	c3                   	ret    

c000bce8 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000bce8:	53                   	push   ebx
c000bce9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bced:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bcf1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bcf5:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000bcfb:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000bd01:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000bd07:	77 10                	ja     c000bd19 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000bd09:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000bd0f:	89 d3                	mov    ebx,edx
c000bd11:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000bd17:	72 05                	jb     c000bd1e <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000bd19:	83 c8 ff             	or     eax,0xffffffff
c000bd1c:	89 c2                	mov    edx,eax
c000bd1e:	5b                   	pop    ebx
c000bd1f:	c3                   	ret    

c000bd20 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000bd20:	56                   	push   esi
c000bd21:	83 c8 ff             	or     eax,0xffffffff
c000bd24:	53                   	push   ebx
c000bd25:	89 c2                	mov    edx,eax
c000bd27:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bd2b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000bd2f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bd33:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000bd39:	77 27                	ja     c000bd62 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000bd3b:	89 d8                	mov    eax,ebx
c000bd3d:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000bd43:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000bd49:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bd4e:	89 c2                	mov    edx,eax
c000bd50:	73 10                	jae    c000bd62 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000bd52:	89 c8                	mov    eax,ecx
c000bd54:	89 da                	mov    edx,ebx
c000bd56:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000bd5c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000bd62:	5b                   	pop    ebx
c000bd63:	5e                   	pop    esi
c000bd64:	c3                   	ret    
c000bd65:	90                   	nop

c000bd66 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000bd66:	83 ec 1c             	sub    esp,0x1c
c000bd69:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bd6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bd75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bd79:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd7d:	89 04 24             	mov    DWORD PTR [esp],eax
c000bd80:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bd84:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bd88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd8c:	83 ec 08             	sub    esp,0x8
c000bd8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd93:	50                   	push   eax
c000bd94:	e8 eb f0 ff ff       	call   c000ae84 <Device::Device(char const*)>
c000bd99:	83 c4 10             	add    esp,0x10
c000bd9c:	ba 14 d5 01 c0       	mov    edx,0xc001d514
c000bda1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bda5:	89 10                	mov    DWORD PTR [eax],edx
c000bda7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bdab:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bdb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bdb6:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bdbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bdc1:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000bdcb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000bdcf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bdd3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bdd7:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000bddd:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000bde3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000bde7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000bdea:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000bdee:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000bdf4:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000bdfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bdfe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000be02:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000be08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be0c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000be16:	90                   	nop
c000be17:	83 c4 1c             	add    esp,0x1c
c000be1a:	c3                   	ret    
c000be1b:	90                   	nop

c000be1c <LogicalDisk::assignDriveLetter()>:
c000be1c:	55                   	push   ebp
c000be1d:	57                   	push   edi
c000be1e:	56                   	push   esi
c000be1f:	53                   	push   ebx
c000be20:	83 ec 14             	sub    esp,0x14
c000be23:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000be27:	8b 3d 40 17 02 c0    	mov    edi,DWORD PTR ds:0xc0021740
c000be2d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000be33:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000be37:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000be3d:	8b 3d 44 17 02 c0    	mov    edi,DWORD PTR ds:0xc0021744
c000be43:	3c 01                	cmp    al,0x1
c000be45:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000be49:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000be4d:	19 c0                	sbb    eax,eax
c000be4f:	83 e0 02             	and    eax,0x2
c000be52:	83 c0 41             	add    eax,0x41
c000be55:	0f be e8             	movsx  ebp,al
c000be58:	3c 43                	cmp    al,0x43
c000be5a:	75 10                	jne    c000be6c <LogicalDisk::assignDriveLetter()+0x50>
c000be5c:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000be63:	75 5d                	jne    c000bec2 <LogicalDisk::assignDriveLetter()+0xa6>
c000be65:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000be6a:	75 56                	jne    c000bec2 <LogicalDisk::assignDriveLetter()+0xa6>
c000be6c:	8d 75 bf             	lea    esi,[ebp-0x41]
c000be6f:	ba 01 00 00 00       	mov    edx,0x1
c000be74:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000be78:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000be7c:	d3 e2                	shl    edx,cl
c000be7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000be82:	89 d7                	mov    edi,edx
c000be84:	89 d6                	mov    esi,edx
c000be86:	c1 ff 1f             	sar    edi,0x1f
c000be89:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000be8d:	21 f9                	and    ecx,edi
c000be8f:	09 d1                	or     ecx,edx
c000be91:	75 2f                	jne    c000bec2 <LogicalDisk::assignDriveLetter()+0xa6>
c000be93:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000be97:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000be9b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000bea1:	09 f2                	or     edx,esi
c000bea3:	89 15 40 17 02 c0    	mov    DWORD PTR ds:0xc0021740,edx
c000bea9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bead:	09 fa                	or     edx,edi
c000beaf:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000beb3:	89 15 44 17 02 c0    	mov    DWORD PTR ds:0xc0021744,edx
c000beb9:	89 1c bd 60 17 02 c0 	mov    DWORD PTR [edi*4-0x3ffde8a0],ebx
c000bec0:	eb 08                	jmp    c000beca <LogicalDisk::assignDriveLetter()+0xae>
c000bec2:	45                   	inc    ebp
c000bec3:	40                   	inc    eax
c000bec4:	3c 5b                	cmp    al,0x5b
c000bec6:	75 90                	jne    c000be58 <LogicalDisk::assignDriveLetter()+0x3c>
c000bec8:	31 c0                	xor    eax,eax
c000beca:	83 c4 14             	add    esp,0x14
c000becd:	5b                   	pop    ebx
c000bece:	5e                   	pop    esi
c000becf:	5f                   	pop    edi
c000bed0:	5d                   	pop    ebp
c000bed1:	c3                   	ret    

c000bed2 <LogicalDisk::mount()>:
c000bed2:	56                   	push   esi
c000bed3:	53                   	push   ebx
c000bed4:	53                   	push   ebx
c000bed5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bed9:	8b 1d f4 f2 01 c0    	mov    ebx,DWORD PTR ds:0xc001f2f4
c000bedf:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000bee9:	85 db                	test   ebx,ebx
c000beeb:	74 27                	je     c000bf14 <LogicalDisk::mount()+0x42>
c000beed:	51                   	push   ecx
c000beee:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000bef5:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bef7:	83 e8 41             	sub    eax,0x41
c000befa:	50                   	push   eax
c000befb:	56                   	push   esi
c000befc:	53                   	push   ebx
c000befd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000bf00:	83 c4 10             	add    esp,0x10
c000bf03:	84 c0                	test   al,al
c000bf05:	74 08                	je     c000bf0f <LogicalDisk::mount()+0x3d>
c000bf07:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000bf0d:	eb 07                	jmp    c000bf16 <LogicalDisk::mount()+0x44>
c000bf0f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000bf12:	eb d5                	jmp    c000bee9 <LogicalDisk::mount()+0x17>
c000bf14:	31 c0                	xor    eax,eax
c000bf16:	5a                   	pop    edx
c000bf17:	5b                   	pop    ebx
c000bf18:	5e                   	pop    esi
c000bf19:	c3                   	ret    

c000bf1a <LogicalDisk::unmount()>:
c000bf1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf1e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000bf28:	c3                   	ret    
c000bf29:	90                   	nop

c000bf2a <LogicalDisk::eject()>:
c000bf2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf2e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000bf34:	8b 10                	mov    edx,DWORD PTR [eax]
c000bf36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bf3a:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000bf3d:	90                   	nop

c000bf3e <LogicalDisk::unassignDriveLetter()>:
c000bf3e:	57                   	push   edi
c000bf3f:	56                   	push   esi
c000bf40:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bf44:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000bf4b:	84 c9                	test   cl,cl
c000bf4d:	75 0f                	jne    c000bf5e <LogicalDisk::unassignDriveLetter()+0x20>
c000bf4f:	c7 44 24 0c ec d4 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d4ec
c000bf57:	5e                   	pop    esi
c000bf58:	5f                   	pop    edi
c000bf59:	e9 9d 34 00 00       	jmp    c000f3fb <Krnl::panic(char const*)>
c000bf5e:	83 e9 41             	sub    ecx,0x41
c000bf61:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000bf68:	b8 01 00 00 00       	mov    eax,0x1
c000bf6d:	c7 04 8d 60 17 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffde8a0],0x0
c000bf78:	d3 e0                	shl    eax,cl
c000bf7a:	89 c7                	mov    edi,eax
c000bf7c:	f7 d0                	not    eax
c000bf7e:	c1 ff 1f             	sar    edi,0x1f
c000bf81:	21 05 40 17 02 c0    	and    DWORD PTR ds:0xc0021740,eax
c000bf87:	89 fe                	mov    esi,edi
c000bf89:	f7 d6                	not    esi
c000bf8b:	21 35 44 17 02 c0    	and    DWORD PTR ds:0xc0021744,esi
c000bf91:	5e                   	pop    esi
c000bf92:	5f                   	pop    edi
c000bf93:	c3                   	ret    

c000bf94 <LogicalDisk::read(unsigned long long, int, void*)>:
c000bf94:	57                   	push   edi
c000bf95:	56                   	push   esi
c000bf96:	53                   	push   ebx
c000bf97:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bf9b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bf9f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bfa3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bfa7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000bfad:	77 41                	ja     c000bff0 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000bfaf:	99                   	cdq    
c000bfb0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000bfb6:	01 c8                	add    eax,ecx
c000bfb8:	11 da                	adc    edx,ebx
c000bfba:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000bfc0:	19 d7                	sbb    edi,edx
c000bfc2:	72 33                	jb     c000bff7 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000bfc4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000bfca:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000bfd0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000bfd4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000bfd8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000bfde:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000bfe4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bfe8:	5b                   	pop    ebx
c000bfe9:	5e                   	pop    esi
c000bfea:	5f                   	pop    edi
c000bfeb:	e9 32 0a 00 00       	jmp    c000ca22 <VCache::read(unsigned long long, int, void*)>
c000bff0:	b8 05 00 00 00       	mov    eax,0x5
c000bff5:	eb 05                	jmp    c000bffc <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000bff7:	b8 07 00 00 00       	mov    eax,0x7
c000bffc:	5b                   	pop    ebx
c000bffd:	5e                   	pop    esi
c000bffe:	5f                   	pop    edi
c000bfff:	c3                   	ret    

c000c000 <LogicalDisk::write(unsigned long long, int, void*)>:
c000c000:	57                   	push   edi
c000c001:	56                   	push   esi
c000c002:	53                   	push   ebx
c000c003:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c007:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c00b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c00f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c013:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000c019:	77 41                	ja     c000c05c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000c01b:	99                   	cdq    
c000c01c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000c022:	01 c8                	add    eax,ecx
c000c024:	11 da                	adc    edx,ebx
c000c026:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000c02c:	19 d7                	sbb    edi,edx
c000c02e:	72 33                	jb     c000c063 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000c030:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000c036:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000c03c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c040:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000c044:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000c04a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000c050:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c054:	5b                   	pop    ebx
c000c055:	5e                   	pop    esi
c000c056:	5f                   	pop    edi
c000c057:	e9 cc 08 00 00       	jmp    c000c928 <VCache::write(unsigned long long, int, void*)>
c000c05c:	b8 05 00 00 00       	mov    eax,0x5
c000c061:	eb 05                	jmp    c000c068 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000c063:	b8 07 00 00 00       	mov    eax,0x7
c000c068:	5b                   	pop    ebx
c000c069:	5e                   	pop    esi
c000c06a:	5f                   	pop    edi
c000c06b:	c3                   	ret    

c000c06c <Mouse::Mouse(char const*)>:
c000c06c:	83 ec 0c             	sub    esp,0xc
c000c06f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c073:	83 ec 08             	sub    esp,0x8
c000c076:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c07a:	50                   	push   eax
c000c07b:	e8 04 ee ff ff       	call   c000ae84 <Device::Device(char const*)>
c000c080:	83 c4 10             	add    esp,0x10
c000c083:	ba 40 d5 01 c0       	mov    edx,0xc001d540
c000c088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c08c:	89 10                	mov    DWORD PTR [eax],edx
c000c08e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c092:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000c09c:	90                   	nop
c000c09d:	83 c4 0c             	add    esp,0xc
c000c0a0:	c3                   	ret    
c000c0a1:	90                   	nop
c000c0a2:	66 90                	xchg   ax,ax

c000c0a4 <Mouse::~Mouse()>:
c000c0a4:	83 ec 0c             	sub    esp,0xc
c000c0a7:	ba 40 d5 01 c0       	mov    edx,0xc001d540
c000c0ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0b0:	89 10                	mov    DWORD PTR [eax],edx
c000c0b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0b6:	83 ec 0c             	sub    esp,0xc
c000c0b9:	50                   	push   eax
c000c0ba:	e8 2f eb ff ff       	call   c000abee <Device::~Device()>
c000c0bf:	83 c4 10             	add    esp,0x10
c000c0c2:	90                   	nop
c000c0c3:	83 c4 0c             	add    esp,0xc
c000c0c6:	c3                   	ret    
c000c0c7:	90                   	nop

c000c0c8 <Mouse::~Mouse()>:
c000c0c8:	83 ec 0c             	sub    esp,0xc
c000c0cb:	83 ec 0c             	sub    esp,0xc
c000c0ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0d2:	e8 cd ff ff ff       	call   c000c0a4 <Mouse::~Mouse()>
c000c0d7:	83 c4 10             	add    esp,0x10
c000c0da:	83 ec 08             	sub    esp,0x8
c000c0dd:	68 58 01 00 00       	push   0x158
c000c0e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0e6:	e8 cb d6 ff ff       	call   c00097b6 <operator delete(void*, unsigned long)>
c000c0eb:	83 c4 10             	add    esp,0x10
c000c0ee:	83 c4 0c             	add    esp,0xc
c000c0f1:	c3                   	ret    

c000c0f2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000c0f2:	55                   	push   ebp
c000c0f3:	57                   	push   edi
c000c0f4:	56                   	push   esi
c000c0f5:	53                   	push   ebx
c000c0f6:	81 ec 28 01 00 00    	sub    esp,0x128
c000c0fc:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000c103:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000c10a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000c111:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000c118:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c11c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c120:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000c127:	e8 54 ee ff ff       	call   c000af80 <Device::getName()>
c000c12c:	5a                   	pop    edx
c000c12d:	59                   	pop    ecx
c000c12e:	50                   	push   eax
c000c12f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000c133:	55                   	push   ebp
c000c134:	e8 e7 44 ff ff       	call   c0000620 <strcpy>
c000c139:	5b                   	pop    ebx
c000c13a:	58                   	pop    eax
c000c13b:	68 64 d5 01 c0       	push   0xc001d564
c000c140:	55                   	push   ebp
c000c141:	e8 9a 46 ff ff       	call   c00007e0 <strcat>
c000c146:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000c14d:	e8 cb a9 ff ff       	call   c0006b1d <malloc>
c000c152:	83 c4 0c             	add    esp,0xc
c000c155:	89 c3                	mov    ebx,eax
c000c157:	57                   	push   edi
c000c158:	56                   	push   esi
c000c159:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c15d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c161:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000c168:	55                   	push   ebp
c000c169:	50                   	push   eax
c000c16a:	e8 f7 fb ff ff       	call   c000bd66 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000c16f:	83 c4 14             	add    esp,0x14
c000c172:	53                   	push   ebx
c000c173:	e8 a4 fc ff ff       	call   c000be1c <LogicalDisk::assignDriveLetter()>
c000c178:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c17b:	e8 52 fd ff ff       	call   c000bed2 <LogicalDisk::mount()>
c000c180:	58                   	pop    eax
c000c181:	5a                   	pop    edx
c000c182:	53                   	push   ebx
c000c183:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000c18a:	e8 5d eb ff ff       	call   c000acec <Device::addChild(Device*)>
c000c18f:	81 c4 2c 01 00 00    	add    esp,0x12c
c000c195:	5b                   	pop    ebx
c000c196:	5e                   	pop    esi
c000c197:	5f                   	pop    edi
c000c198:	5d                   	pop    ebp
c000c199:	c3                   	ret    

c000c19a <createPartitionsForDisk(PhysicalDisk*)>:
c000c19a:	55                   	push   ebp
c000c19b:	57                   	push   edi
c000c19c:	56                   	push   esi
c000c19d:	53                   	push   ebx
c000c19e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000c1a4:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000c1ab:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000c1b1:	3d 00 02 00 00       	cmp    eax,0x200
c000c1b6:	74 27                	je     c000c1df <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000c1b8:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000c1be:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000c1c4:	83 ec 10             	sub    esp,0x10
c000c1c7:	0f a4 f7 0a          	shld   edi,esi,0xa
c000c1cb:	99                   	cdq    
c000c1cc:	c1 e6 0a             	shl    esi,0xa
c000c1cf:	52                   	push   edx
c000c1d0:	89 fd                	mov    ebp,edi
c000c1d2:	50                   	push   eax
c000c1d3:	55                   	push   ebp
c000c1d4:	56                   	push   esi
c000c1d5:	e8 e6 f2 00 00       	call   c001b4c0 <__udivdi3>
c000c1da:	e9 b1 00 00 00       	jmp    c000c290 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000c1df:	83 ec 0c             	sub    esp,0xc
c000c1e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c1e4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000c1e8:	56                   	push   esi
c000c1e9:	6a 01                	push   0x1
c000c1eb:	6a 00                	push   0x0
c000c1ed:	6a 00                	push   0x0
c000c1ef:	53                   	push   ebx
c000c1f0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000c1f3:	83 c4 20             	add    esp,0x20
c000c1f6:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000c1fe:	75 0a                	jne    c000c20a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000c200:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000c208:	74 2c                	je     c000c236 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000c20a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000c210:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000c216:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000c21c:	83 ec 10             	sub    esp,0x10
c000c21f:	0f a4 c2 0a          	shld   edx,eax,0xa
c000c223:	89 f7                	mov    edi,esi
c000c225:	c1 e0 0a             	shl    eax,0xa
c000c228:	c1 ff 1f             	sar    edi,0x1f
c000c22b:	57                   	push   edi
c000c22c:	56                   	push   esi
c000c22d:	52                   	push   edx
c000c22e:	50                   	push   eax
c000c22f:	e8 8c f2 00 00       	call   c001b4c0 <__udivdi3>
c000c234:	eb 5a                	jmp    c000c290 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000c236:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000c23d:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000c244:	83 e1 7f             	and    ecx,0x7f
c000c247:	83 e0 7f             	and    eax,0x7f
c000c24a:	01 c1                	add    ecx,eax
c000c24c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000c253:	83 e0 7f             	and    eax,0x7f
c000c256:	01 c1                	add    ecx,eax
c000c258:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000c25f:	83 e0 7f             	and    eax,0x7f
c000c262:	00 c1                	add    cl,al
c000c264:	74 41                	je     c000c2a7 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000c266:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000c26c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000c272:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000c278:	83 ec 10             	sub    esp,0x10
c000c27b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000c27f:	89 f7                	mov    edi,esi
c000c281:	c1 e0 0a             	shl    eax,0xa
c000c284:	c1 ff 1f             	sar    edi,0x1f
c000c287:	57                   	push   edi
c000c288:	56                   	push   esi
c000c289:	52                   	push   edx
c000c28a:	50                   	push   eax
c000c28b:	e8 30 f2 00 00       	call   c001b4c0 <__udivdi3>
c000c290:	83 c4 14             	add    esp,0x14
c000c293:	52                   	push   edx
c000c294:	50                   	push   eax
c000c295:	6a 00                	push   0x0
c000c297:	6a 00                	push   0x0
c000c299:	53                   	push   ebx
c000c29a:	e8 53 fe ff ff       	call   c000c0f2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000c29f:	83 c4 20             	add    esp,0x20
c000c2a2:	e9 79 01 00 00       	jmp    c000c420 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000c2a7:	89 f0                	mov    eax,esi
c000c2a9:	31 f6                	xor    esi,esi
c000c2ab:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000c2b2:	75 02                	jne    c000c2b6 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000c2b4:	89 f1                	mov    ecx,esi
c000c2b6:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000c2bd:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000c2c4:	c1 e2 08             	shl    edx,0x8
c000c2c7:	c1 e7 10             	shl    edi,0x10
c000c2ca:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000c2d2:	09 fa                	or     edx,edi
c000c2d4:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000c2dc:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000c2e3:	83 c0 10             	add    eax,0x10
c000c2e6:	09 fa                	or     edx,edi
c000c2e8:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000c2ef:	c1 e7 18             	shl    edi,0x18
c000c2f2:	09 fa                	or     edx,edi
c000c2f4:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000c2fb:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000c2ff:	c1 e7 10             	shl    edi,0x10
c000c302:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000c309:	c1 e2 08             	shl    edx,0x8
c000c30c:	09 fa                	or     edx,edi
c000c30e:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000c315:	09 fa                	or     edx,edi
c000c317:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000c31e:	c1 e7 18             	shl    edi,0x18
c000c321:	09 fa                	or     edx,edi
c000c323:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000c327:	46                   	inc    esi
c000c328:	83 fe 04             	cmp    esi,0x4
c000c32b:	0f 85 7a ff ff ff    	jne    c000c2ab <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000c331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c335:	83 f0 01             	xor    eax,0x1
c000c338:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000c33c:	75 57                	jne    c000c395 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000c33e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c342:	83 f0 01             	xor    eax,0x1
c000c345:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000c349:	75 4a                	jne    c000c395 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000c34b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000c34f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000c357:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c35f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000c365:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000c36b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000c371:	0f a4 c2 0a          	shld   edx,eax,0xa
c000c375:	89 f7                	mov    edi,esi
c000c377:	c1 e0 0a             	shl    eax,0xa
c000c37a:	c1 ff 1f             	sar    edi,0x1f
c000c37d:	57                   	push   edi
c000c37e:	56                   	push   esi
c000c37f:	52                   	push   edx
c000c380:	50                   	push   eax
c000c381:	e8 3a f1 00 00       	call   c001b4c0 <__udivdi3>
c000c386:	83 c4 10             	add    esp,0x10
c000c389:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c38d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c391:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000c395:	84 c9                	test   cl,cl
c000c397:	74 53                	je     c000c3ec <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000c399:	0f b6 c9             	movzx  ecx,cl
c000c39c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c3a4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c3a8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c3ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c3b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c3b4:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000c3b8:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000c3bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c3c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c3c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c3c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c3cc:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000c3d0:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000c3d4:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000c3d8:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000c3dc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c3e0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c3e4:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000c3e8:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000c3ec:	31 ed                	xor    ebp,ebp
c000c3ee:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000c3f2:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000c3f6:	89 f8                	mov    eax,edi
c000c3f8:	09 f0                	or     eax,esi
c000c3fa:	74 1e                	je     c000c41a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000c3fc:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000c400:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000c404:	89 d1                	mov    ecx,edx
c000c406:	09 c1                	or     ecx,eax
c000c408:	74 10                	je     c000c41a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000c40a:	83 ec 0c             	sub    esp,0xc
c000c40d:	57                   	push   edi
c000c40e:	56                   	push   esi
c000c40f:	52                   	push   edx
c000c410:	50                   	push   eax
c000c411:	53                   	push   ebx
c000c412:	e8 db fc ff ff       	call   c000c0f2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000c417:	83 c4 20             	add    esp,0x20
c000c41a:	45                   	inc    ebp
c000c41b:	83 fd 04             	cmp    ebp,0x4
c000c41e:	75 ce                	jne    c000c3ee <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000c420:	81 c4 5c 02 00 00    	add    esp,0x25c
c000c426:	5b                   	pop    ebx
c000c427:	5e                   	pop    esi
c000c428:	5f                   	pop    edi
c000c429:	5d                   	pop    ebp
c000c42a:	c3                   	ret    
c000c42b:	90                   	nop

c000c42c <Serial::Serial(char const*)>:
c000c42c:	83 ec 0c             	sub    esp,0xc
c000c42f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c433:	83 ec 08             	sub    esp,0x8
c000c436:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c43a:	50                   	push   eax
c000c43b:	e8 44 ea ff ff       	call   c000ae84 <Device::Device(char const*)>
c000c440:	83 c4 10             	add    esp,0x10
c000c443:	ba 78 d5 01 c0       	mov    edx,0xc001d578
c000c448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c44c:	89 10                	mov    DWORD PTR [eax],edx
c000c44e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c452:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000c45c:	90                   	nop
c000c45d:	83 c4 0c             	add    esp,0xc
c000c460:	c3                   	ret    
c000c461:	90                   	nop
c000c462:	66 90                	xchg   ax,ax

c000c464 <Serial::~Serial()>:
c000c464:	83 ec 0c             	sub    esp,0xc
c000c467:	ba 78 d5 01 c0       	mov    edx,0xc001d578
c000c46c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c470:	89 10                	mov    DWORD PTR [eax],edx
c000c472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c476:	83 ec 0c             	sub    esp,0xc
c000c479:	50                   	push   eax
c000c47a:	e8 6f e7 ff ff       	call   c000abee <Device::~Device()>
c000c47f:	83 c4 10             	add    esp,0x10
c000c482:	90                   	nop
c000c483:	83 c4 0c             	add    esp,0xc
c000c486:	c3                   	ret    
c000c487:	90                   	nop

c000c488 <Serial::~Serial()>:
c000c488:	83 ec 0c             	sub    esp,0xc
c000c48b:	83 ec 0c             	sub    esp,0xc
c000c48e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c492:	e8 cd ff ff ff       	call   c000c464 <Serial::~Serial()>
c000c497:	83 c4 10             	add    esp,0x10
c000c49a:	83 ec 08             	sub    esp,0x8
c000c49d:	68 58 01 00 00       	push   0x158
c000c4a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4a6:	e8 0b d3 ff ff       	call   c00097b6 <operator delete(void*, unsigned long)>
c000c4ab:	83 c4 10             	add    esp,0x10
c000c4ae:	83 c4 0c             	add    esp,0xc
c000c4b1:	c3                   	ret    
c000c4b2:	66 90                	xchg   ax,ax

c000c4b4 <Timer::Timer(char const*)>:
c000c4b4:	83 ec 0c             	sub    esp,0xc
c000c4b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4bb:	83 ec 08             	sub    esp,0x8
c000c4be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c2:	50                   	push   eax
c000c4c3:	e8 bc e9 ff ff       	call   c000ae84 <Device::Device(char const*)>
c000c4c8:	83 c4 10             	add    esp,0x10
c000c4cb:	ba bc d5 01 c0       	mov    edx,0xc001d5bc
c000c4d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4d4:	89 10                	mov    DWORD PTR [eax],edx
c000c4d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4da:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000c4e4:	90                   	nop
c000c4e5:	83 c4 0c             	add    esp,0xc
c000c4e8:	c3                   	ret    
c000c4e9:	90                   	nop
c000c4ea:	66 90                	xchg   ax,ax

c000c4ec <Timer::~Timer()>:
c000c4ec:	83 ec 0c             	sub    esp,0xc
c000c4ef:	ba bc d5 01 c0       	mov    edx,0xc001d5bc
c000c4f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4f8:	89 10                	mov    DWORD PTR [eax],edx
c000c4fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4fe:	83 ec 0c             	sub    esp,0xc
c000c501:	50                   	push   eax
c000c502:	e8 e7 e6 ff ff       	call   c000abee <Device::~Device()>
c000c507:	83 c4 10             	add    esp,0x10
c000c50a:	90                   	nop
c000c50b:	83 c4 0c             	add    esp,0xc
c000c50e:	c3                   	ret    
c000c50f:	90                   	nop

c000c510 <Timer::~Timer()>:
c000c510:	83 ec 0c             	sub    esp,0xc
c000c513:	83 ec 0c             	sub    esp,0xc
c000c516:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c51a:	e8 cd ff ff ff       	call   c000c4ec <Timer::~Timer()>
c000c51f:	83 c4 10             	add    esp,0x10
c000c522:	83 ec 08             	sub    esp,0x8
c000c525:	68 5c 01 00 00       	push   0x15c
c000c52a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c52e:	e8 83 d2 ff ff       	call   c00097b6 <operator delete(void*, unsigned long)>
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	83 c4 0c             	add    esp,0xc
c000c539:	c3                   	ret    

c000c53a <Timer::read()>:
c000c53a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c53e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000c544:	c3                   	ret    

c000c545 <setupTimer(int)>:
c000c545:	53                   	push   ebx
c000c546:	83 ec 14             	sub    esp,0x14
c000c549:	68 5c 01 00 00       	push   0x15c
c000c54e:	e8 ca a5 ff ff       	call   c0006b1d <malloc>
c000c553:	89 04 24             	mov    DWORD PTR [esp],eax
c000c556:	89 c3                	mov    ebx,eax
c000c558:	e8 db e8 00 00       	call   c001ae38 <PIT::PIT()>
c000c55d:	58                   	pop    eax
c000c55e:	5a                   	pop    edx
c000c55f:	53                   	push   ebx
c000c560:	ff 35 08 f2 01 c0    	push   DWORD PTR ds:0xc001f208
c000c566:	e8 81 e7 ff ff       	call   c000acec <Device::addChild(Device*)>
c000c56b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c56d:	6a 00                	push   0x0
c000c56f:	6a 00                	push   0x0
c000c571:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c575:	53                   	push   ebx
c000c576:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c579:	89 d8                	mov    eax,ebx
c000c57b:	83 c4 28             	add    esp,0x28
c000c57e:	5b                   	pop    ebx
c000c57f:	c3                   	ret    

c000c580 <timerHandler(unsigned int)>:
c000c580:	56                   	push   esi
c000c581:	53                   	push   ebx
c000c582:	51                   	push   ecx
c000c583:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c587:	01 05 cc 17 02 c0    	add    DWORD PTR ds:0xc00217cc,eax
c000c58d:	80 3d 0d f2 01 c0 00 	cmp    BYTE PTR ds:0xc001f20d,0x0
c000c594:	0f 84 4a 01 00 00    	je     c000c6e4 <timerHandler(unsigned int)+0x164>
c000c59a:	fa                   	cli    
c000c59b:	ff 05 c8 26 02 c0    	inc    DWORD PTR ds:0xc00226c8
c000c5a1:	83 ec 0c             	sub    esp,0xc
c000c5a4:	ff 05 c4 26 02 c0    	inc    DWORD PTR ds:0xc00226c4
c000c5aa:	68 d8 26 02 c0       	push   0xc00226d8
c000c5af:	e8 dc f4 00 00       	call   c001ba90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000c5b4:	83 c4 10             	add    esp,0x10
c000c5b7:	84 c0                	test   al,al
c000c5b9:	0f 85 a1 00 00 00    	jne    c000c660 <timerHandler(unsigned int)+0xe0>
c000c5bf:	83 ec 0c             	sub    esp,0xc
c000c5c2:	68 d8 26 02 c0       	push   0xc00226d8
c000c5c7:	e8 e0 f4 00 00       	call   c001baac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c5cc:	83 c4 10             	add    esp,0x10
c000c5cf:	89 c6                	mov    esi,eax
c000c5d1:	8d 76 00             	lea    esi,[esi+0x0]
c000c5d4:	83 ec 0c             	sub    esp,0xc
c000c5d7:	68 d8 26 02 c0       	push   0xc00226d8
c000c5dc:	e8 cb f4 00 00       	call   c001baac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c5e1:	c7 04 24 d8 26 02 c0 	mov    DWORD PTR [esp],0xc00226d8
c000c5e8:	89 c3                	mov    ebx,eax
c000c5ea:	e8 c5 f4 00 00       	call   c001bab4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000c5ef:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000c5f2:	83 c4 10             	add    esp,0x10
c000c5f5:	3b 05 cc 17 02 c0    	cmp    eax,DWORD PTR ds:0xc00217cc
c000c5fb:	77 23                	ja     c000c620 <timerHandler(unsigned int)+0xa0>
c000c5fd:	83 ec 0c             	sub    esp,0xc
c000c600:	53                   	push   ebx
c000c601:	e8 0e 66 00 00       	call   c0012c14 <unblockTask(ThreadControlBlock*)>
c000c606:	83 c4 10             	add    esp,0x10
c000c609:	39 de                	cmp    esi,ebx
c000c60b:	75 27                	jne    c000c634 <timerHandler(unsigned int)+0xb4>
c000c60d:	83 ec 0c             	sub    esp,0xc
c000c610:	68 d8 26 02 c0       	push   0xc00226d8
c000c615:	e8 92 f4 00 00       	call   c001baac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c61a:	89 c6                	mov    esi,eax
c000c61c:	eb 12                	jmp    c000c630 <timerHandler(unsigned int)+0xb0>
c000c61e:	66 90                	xchg   ax,ax
c000c620:	52                   	push   edx
c000c621:	52                   	push   edx
c000c622:	53                   	push   ebx
c000c623:	68 d8 26 02 c0       	push   0xc00226d8
c000c628:	e8 3f f5 00 00       	call   c001bb6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000c62d:	8d 76 00             	lea    esi,[esi+0x0]
c000c630:	83 c4 10             	add    esp,0x10
c000c633:	90                   	nop
c000c634:	83 ec 0c             	sub    esp,0xc
c000c637:	68 d8 26 02 c0       	push   0xc00226d8
c000c63c:	e8 4f f4 00 00       	call   c001ba90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000c641:	83 c4 10             	add    esp,0x10
c000c644:	84 c0                	test   al,al
c000c646:	75 18                	jne    c000c660 <timerHandler(unsigned int)+0xe0>
c000c648:	83 ec 0c             	sub    esp,0xc
c000c64b:	68 d8 26 02 c0       	push   0xc00226d8
c000c650:	e8 57 f4 00 00       	call   c001baac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c655:	83 c4 10             	add    esp,0x10
c000c658:	39 f0                	cmp    eax,esi
c000c65a:	0f 85 74 ff ff ff    	jne    c000c5d4 <timerHandler(unsigned int)+0x54>
c000c660:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000c665:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000c669:	74 41                	je     c000c6ac <timerHandler(unsigned int)+0x12c>
c000c66b:	80 3d 0c f2 01 c0 00 	cmp    BYTE PTR ds:0xc001f20c,0x0
c000c672:	74 38                	je     c000c6ac <timerHandler(unsigned int)+0x12c>
c000c674:	fa                   	cli    
c000c675:	ff 05 c8 26 02 c0    	inc    DWORD PTR ds:0xc00226c8
c000c67b:	a1 cc 17 02 c0       	mov    eax,ds:0xc00217cc
c000c680:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000c686:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000c689:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000c68f:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000c692:	72 08                	jb     c000c69c <timerHandler(unsigned int)+0x11c>
c000c694:	e8 b7 60 00 00       	call   c0012750 <schedule()>
c000c699:	8d 76 00             	lea    esi,[esi+0x0]
c000c69c:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c000c6a1:	48                   	dec    eax
c000c6a2:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c000c6a7:	75 03                	jne    c000c6ac <timerHandler(unsigned int)+0x12c>
c000c6a9:	fb                   	sti    
c000c6aa:	66 90                	xchg   ax,ax
c000c6ac:	a1 c4 26 02 c0       	mov    eax,ds:0xc00226c4
c000c6b1:	48                   	dec    eax
c000c6b2:	a3 c4 26 02 c0       	mov    ds:0xc00226c4,eax
c000c6b7:	75 1b                	jne    c000c6d4 <timerHandler(unsigned int)+0x154>
c000c6b9:	83 3d c0 26 02 c0 00 	cmp    DWORD PTR ds:0xc00226c0,0x0
c000c6c0:	74 12                	je     c000c6d4 <timerHandler(unsigned int)+0x154>
c000c6c2:	c7 05 c0 26 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00226c0,0x0
c000c6cc:	e8 7f 60 00 00       	call   c0012750 <schedule()>
c000c6d1:	8d 76 00             	lea    esi,[esi+0x0]
c000c6d4:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c000c6d9:	48                   	dec    eax
c000c6da:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c000c6df:	75 03                	jne    c000c6e4 <timerHandler(unsigned int)+0x164>
c000c6e1:	fb                   	sti    
c000c6e2:	66 90                	xchg   ax,ax
c000c6e4:	58                   	pop    eax
c000c6e5:	5b                   	pop    ebx
c000c6e6:	5e                   	pop    esi
c000c6e7:	c3                   	ret    

c000c6e8 <VCache::VCache(PhysicalDisk*)>:
c000c6e8:	53                   	push   ebx
c000c6e9:	83 ec 18             	sub    esp,0x18
c000c6ec:	ba ec d5 01 c0       	mov    edx,0xc001d5ec
c000c6f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c6f5:	89 10                	mov    DWORD PTR [eax],edx
c000c6f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c6fb:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000c702:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c706:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000c70d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c711:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000c718:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000c71f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c723:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000c72a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000c731:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c735:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000c73c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c740:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000c744:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c748:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000c74f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000c756:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c75a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000c75e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c762:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000c766:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c76a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000c76e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c772:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000c779:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000c781:	83 ec 0c             	sub    esp,0xc
c000c784:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c788:	e8 90 a3 ff ff       	call   c0006b1d <malloc>
c000c78d:	83 c4 10             	add    esp,0x10
c000c790:	89 c3                	mov    ebx,eax
c000c792:	83 ec 0c             	sub    esp,0xc
c000c795:	53                   	push   ebx
c000c796:	e8 81 5d 00 00       	call   c001251c <Mutex::Mutex()>
c000c79b:	83 c4 10             	add    esp,0x10
c000c79e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7a2:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000c7a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7a9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c7ad:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000c7b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7b4:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000c7bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c7bf:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000c7c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7c9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c7cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c7d0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000c7d6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c7dc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c7e0:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000c7e3:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000c7e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7ea:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000c7ee:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c7f2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000c7f8:	05 00 01 00 00       	add    eax,0x100
c000c7fd:	c1 e0 04             	shl    eax,0x4
c000c800:	83 ec 0c             	sub    esp,0xc
c000c803:	50                   	push   eax
c000c804:	e8 14 a3 ff ff       	call   c0006b1d <malloc>
c000c809:	83 c4 10             	add    esp,0x10
c000c80c:	89 c2                	mov    edx,eax
c000c80e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c812:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000c815:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c819:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000c820:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c824:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000c828:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c82c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000c832:	c1 e0 06             	shl    eax,0x6
c000c835:	83 ec 0c             	sub    esp,0xc
c000c838:	50                   	push   eax
c000c839:	e8 df a2 ff ff       	call   c0006b1d <malloc>
c000c83e:	83 c4 10             	add    esp,0x10
c000c841:	89 c2                	mov    edx,eax
c000c843:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c847:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000c84a:	90                   	nop
c000c84b:	83 c4 18             	add    esp,0x18
c000c84e:	5b                   	pop    ebx
c000c84f:	c3                   	ret    

c000c850 <VCache::invalidateReadBuffer()>:
c000c850:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c854:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000c85a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000c85e:	c3                   	ret    
c000c85f:	90                   	nop

c000c860 <VCache::writeWriteBuffer()>:
c000c860:	53                   	push   ebx
c000c861:	83 ec 08             	sub    esp,0x8
c000c864:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c868:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000c86c:	74 1e                	je     c000c88c <VCache::writeWriteBuffer()+0x2c>
c000c86e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c871:	83 ec 0c             	sub    esp,0xc
c000c874:	8b 10                	mov    edx,DWORD PTR [eax]
c000c876:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000c879:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000c87c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000c87f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c882:	50                   	push   eax
c000c883:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000c886:	83 c4 20             	add    esp,0x20
c000c889:	8d 76 00             	lea    esi,[esi+0x0]
c000c88c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000c893:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000c89a:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000c89e:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000c8a5:	83 c4 08             	add    esp,0x8
c000c8a8:	5b                   	pop    ebx
c000c8a9:	c3                   	ret    
c000c8aa:	66 90                	xchg   ax,ax

c000c8ac <VCache::~VCache()>:
c000c8ac:	83 ec 0c             	sub    esp,0xc
c000c8af:	ba ec d5 01 c0       	mov    edx,0xc001d5ec
c000c8b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8b8:	89 10                	mov    DWORD PTR [eax],edx
c000c8ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8be:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000c8c1:	84 c0                	test   al,al
c000c8c3:	74 0f                	je     c000c8d4 <VCache::~VCache()+0x28>
c000c8c5:	83 ec 0c             	sub    esp,0xc
c000c8c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8cc:	e8 8f ff ff ff       	call   c000c860 <VCache::writeWriteBuffer()>
c000c8d1:	83 c4 10             	add    esp,0x10
c000c8d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8d8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c8db:	83 ec 0c             	sub    esp,0xc
c000c8de:	50                   	push   eax
c000c8df:	e8 49 a2 ff ff       	call   c0006b2d <free>
c000c8e4:	83 c4 10             	add    esp,0x10
c000c8e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8eb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000c8ee:	83 ec 0c             	sub    esp,0xc
c000c8f1:	50                   	push   eax
c000c8f2:	e8 36 a2 ff ff       	call   c0006b2d <free>
c000c8f7:	83 c4 10             	add    esp,0x10
c000c8fa:	90                   	nop
c000c8fb:	83 c4 0c             	add    esp,0xc
c000c8fe:	c3                   	ret    
c000c8ff:	90                   	nop

c000c900 <VCache::~VCache()>:
c000c900:	83 ec 0c             	sub    esp,0xc
c000c903:	83 ec 0c             	sub    esp,0xc
c000c906:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c90a:	e8 9d ff ff ff       	call   c000c8ac <VCache::~VCache()>
c000c90f:	83 c4 10             	add    esp,0x10
c000c912:	83 ec 08             	sub    esp,0x8
c000c915:	6a 44                	push   0x44
c000c917:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c91b:	e8 96 ce ff ff       	call   c00097b6 <operator delete(void*, unsigned long)>
c000c920:	83 c4 10             	add    esp,0x10
c000c923:	83 c4 0c             	add    esp,0xc
c000c926:	c3                   	ret    
c000c927:	90                   	nop

c000c928 <VCache::write(unsigned long long, int, void*)>:
c000c928:	55                   	push   ebp
c000c929:	31 c0                	xor    eax,eax
c000c92b:	57                   	push   edi
c000c92c:	56                   	push   esi
c000c92d:	53                   	push   ebx
c000c92e:	83 ec 0c             	sub    esp,0xc
c000c931:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c935:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c939:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000c93d:	8d 76 00             	lea    esi,[esi+0x0]
c000c940:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c000c944:	7d 1a                	jge    c000c960 <VCache::write(unsigned long long, int, void*)+0x38>
c000c946:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000c949:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000c94f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c953:	0f af c8             	imul   ecx,eax
c000c956:	01 ca                	add    edx,ecx
c000c958:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000c95a:	40                   	inc    eax
c000c95b:	eb e3                	jmp    c000c940 <VCache::write(unsigned long long, int, void*)+0x18>
c000c95d:	8d 76 00             	lea    esi,[esi+0x0]
c000c960:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000c964:	74 0a                	je     c000c970 <VCache::write(unsigned long long, int, void*)+0x48>
c000c966:	53                   	push   ebx
c000c967:	e8 e4 fe ff ff       	call   c000c850 <VCache::invalidateReadBuffer()>
c000c96c:	58                   	pop    eax
c000c96d:	8d 76 00             	lea    esi,[esi+0x0]
c000c970:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000c974:	74 5e                	je     c000c9d4 <VCache::write(unsigned long long, int, void*)+0xac>
c000c976:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c000c979:	89 e8                	mov    eax,ebp
c000c97b:	99                   	cdq    
c000c97c:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000c97f:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000c982:	89 c1                	mov    ecx,eax
c000c984:	89 d0                	mov    eax,edx
c000c986:	31 f1                	xor    ecx,esi
c000c988:	31 f8                	xor    eax,edi
c000c98a:	09 c1                	or     ecx,eax
c000c98c:	75 3a                	jne    c000c9c8 <VCache::write(unsigned long long, int, void*)+0xa0>
c000c98e:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c000c993:	75 33                	jne    c000c9c8 <VCache::write(unsigned long long, int, void*)+0xa0>
c000c995:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c998:	89 ef                	mov    edi,ebp
c000c99a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000c9a0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c9a4:	0f af f9             	imul   edi,ecx
c000c9a7:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000c9aa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c9ac:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000c9af:	40                   	inc    eax
c000c9b0:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000c9b3:	83 f8 40             	cmp    eax,0x40
c000c9b6:	75 60                	jne    c000ca18 <VCache::write(unsigned long long, int, void*)+0xf0>
c000c9b8:	83 ec 0c             	sub    esp,0xc
c000c9bb:	53                   	push   ebx
c000c9bc:	e8 9f fe ff ff       	call   c000c860 <VCache::writeWriteBuffer()>
c000c9c1:	83 c4 10             	add    esp,0x10
c000c9c4:	eb 52                	jmp    c000ca18 <VCache::write(unsigned long long, int, void*)+0xf0>
c000c9c6:	66 90                	xchg   ax,ax
c000c9c8:	83 ec 0c             	sub    esp,0xc
c000c9cb:	53                   	push   ebx
c000c9cc:	e8 8f fe ff ff       	call   c000c860 <VCache::writeWriteBuffer()>
c000c9d1:	83 c4 10             	add    esp,0x10
c000c9d4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c9d7:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c000c9dc:	7f 22                	jg     c000ca00 <VCache::write(unsigned long long, int, void*)+0xd8>
c000c9de:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000c9e1:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c000c9e4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c9e8:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000c9ec:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000c9ef:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000c9f2:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000c9f8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c9fc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c9fe:	eb 18                	jmp    c000ca18 <VCache::write(unsigned long long, int, void*)+0xf0>
c000ca00:	83 ec 0c             	sub    esp,0xc
c000ca03:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca05:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca09:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca0d:	57                   	push   edi
c000ca0e:	56                   	push   esi
c000ca0f:	50                   	push   eax
c000ca10:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000ca13:	83 c4 20             	add    esp,0x20
c000ca16:	66 90                	xchg   ax,ax
c000ca18:	83 c4 0c             	add    esp,0xc
c000ca1b:	31 c0                	xor    eax,eax
c000ca1d:	5b                   	pop    ebx
c000ca1e:	5e                   	pop    esi
c000ca1f:	5f                   	pop    edi
c000ca20:	5d                   	pop    ebp
c000ca21:	c3                   	ret    

c000ca22 <VCache::read(unsigned long long, int, void*)>:
c000ca22:	55                   	push   ebp
c000ca23:	31 c0                	xor    eax,eax
c000ca25:	57                   	push   edi
c000ca26:	56                   	push   esi
c000ca27:	53                   	push   ebx
c000ca28:	83 ec 1c             	sub    esp,0x1c
c000ca2b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ca2f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000ca33:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ca37:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000ca3b:	90                   	nop
c000ca3c:	39 e8                	cmp    eax,ebp
c000ca3e:	7d 18                	jge    c000ca58 <VCache::read(unsigned long long, int, void*)+0x36>
c000ca40:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000ca43:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000ca49:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ca4d:	0f af c8             	imul   ecx,eax
c000ca50:	01 ca                	add    edx,ecx
c000ca52:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000ca54:	40                   	inc    eax
c000ca55:	eb e5                	jmp    c000ca3c <VCache::read(unsigned long long, int, void*)+0x1a>
c000ca57:	90                   	nop
c000ca58:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000ca5c:	74 0e                	je     c000ca6c <VCache::read(unsigned long long, int, void*)+0x4a>
c000ca5e:	83 ec 0c             	sub    esp,0xc
c000ca61:	53                   	push   ebx
c000ca62:	e8 f9 fd ff ff       	call   c000c860 <VCache::writeWriteBuffer()>
c000ca67:	83 c4 10             	add    esp,0x10
c000ca6a:	66 90                	xchg   ax,ax
c000ca6c:	83 fd 01             	cmp    ebp,0x1
c000ca6f:	0f 85 87 00 00 00    	jne    c000cafc <VCache::read(unsigned long long, int, void*)+0xda>
c000ca75:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ca78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ca7c:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000ca83:	75 77                	jne    c000cafc <VCache::read(unsigned long long, int, void*)+0xda>
c000ca85:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000ca88:	89 e9                	mov    ecx,ebp
c000ca8a:	f7 d9                	neg    ecx
c000ca8c:	89 c8                	mov    eax,ecx
c000ca8e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ca92:	c1 f8 1f             	sar    eax,0x1f
c000ca95:	21 f1                	and    ecx,esi
c000ca97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ca9b:	89 c8                	mov    eax,ecx
c000ca9d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000caa1:	21 f9                	and    ecx,edi
c000caa3:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000caa7:	89 ca                	mov    edx,ecx
c000caa9:	74 0d                	je     c000cab8 <VCache::read(unsigned long long, int, void*)+0x96>
c000caab:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c000caae:	75 08                	jne    c000cab8 <VCache::read(unsigned long long, int, void*)+0x96>
c000cab0:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000cab3:	74 27                	je     c000cadc <VCache::read(unsigned long long, int, void*)+0xba>
c000cab5:	8d 76 00             	lea    esi,[esi+0x0]
c000cab8:	83 ec 0c             	sub    esp,0xc
c000cabb:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000cabf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cac3:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000cac6:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cac9:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000cacb:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000cace:	55                   	push   ebp
c000cacf:	52                   	push   edx
c000cad0:	50                   	push   eax
c000cad1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000cad5:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000cad8:	83 c4 20             	add    esp,0x20
c000cadb:	90                   	nop
c000cadc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000cadf:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000cae3:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000cae9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000caec:	48                   	dec    eax
c000caed:	21 c6                	and    esi,eax
c000caef:	0f af f1             	imul   esi,ecx
c000caf2:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000caf5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000caf7:	eb 23                	jmp    c000cb1c <VCache::read(unsigned long long, int, void*)+0xfa>
c000caf9:	8d 76 00             	lea    esi,[esi+0x0]
c000cafc:	83 ec 0c             	sub    esp,0xc
c000caff:	53                   	push   ebx
c000cb00:	e8 4b fd ff ff       	call   c000c850 <VCache::invalidateReadBuffer()>
c000cb05:	5a                   	pop    edx
c000cb06:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000cb09:	8b 10                	mov    edx,DWORD PTR [eax]
c000cb0b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cb0f:	55                   	push   ebp
c000cb10:	57                   	push   edi
c000cb11:	56                   	push   esi
c000cb12:	50                   	push   eax
c000cb13:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000cb16:	83 c4 20             	add    esp,0x20
c000cb19:	8d 76 00             	lea    esi,[esi+0x0]
c000cb1c:	83 c4 1c             	add    esp,0x1c
c000cb1f:	31 c0                	xor    eax,eax
c000cb21:	5b                   	pop    ebx
c000cb22:	5e                   	pop    esi
c000cb23:	5f                   	pop    edi
c000cb24:	5d                   	pop    ebp
c000cb25:	c3                   	ret    

c000cb26 <Video::putrect(int, int, int, int, unsigned int)>:
c000cb26:	55                   	push   ebp
c000cb27:	57                   	push   edi
c000cb28:	56                   	push   esi
c000cb29:	53                   	push   ebx
c000cb2a:	83 ec 1c             	sub    esp,0x1c
c000cb2d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000cb31:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cb35:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000cb39:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000cb3d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000cb41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb45:	01 df                	add    edi,ebx
c000cb47:	39 fb                	cmp    ebx,edi
c000cb49:	7d 1f                	jge    c000cb6a <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000cb4b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cb4f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000cb53:	7d 12                	jge    c000cb67 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000cb55:	8b 16                	mov    edx,DWORD PTR [esi]
c000cb57:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000cb5b:	53                   	push   ebx
c000cb5c:	55                   	push   ebp
c000cb5d:	45                   	inc    ebp
c000cb5e:	56                   	push   esi
c000cb5f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000cb62:	83 c4 10             	add    esp,0x10
c000cb65:	eb e8                	jmp    c000cb4f <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000cb67:	43                   	inc    ebx
c000cb68:	eb dd                	jmp    c000cb47 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000cb6a:	83 c4 1c             	add    esp,0x1c
c000cb6d:	5b                   	pop    ebx
c000cb6e:	5e                   	pop    esi
c000cb6f:	5f                   	pop    edi
c000cb70:	5d                   	pop    ebp
c000cb71:	c3                   	ret    

c000cb72 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000cb72:	55                   	push   ebp
c000cb73:	57                   	push   edi
c000cb74:	31 ff                	xor    edi,edi
c000cb76:	56                   	push   esi
c000cb77:	53                   	push   ebx
c000cb78:	83 ec 1c             	sub    esp,0x1c
c000cb7b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000cb7f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000cb83:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000cb8a:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000cb8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cb93:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000cb97:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000cb9b:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000cb9e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cba2:	01 f9                	add    ecx,edi
c000cba4:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000cba8:	7d 2f                	jge    c000cbd9 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000cbaa:	31 f6                	xor    esi,esi
c000cbac:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000cbb0:	01 f2                	add    edx,esi
c000cbb2:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000cbb6:	7d 1a                	jge    c000cbd2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000cbb8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbbb:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000cbbe:	46                   	inc    esi
c000cbbf:	51                   	push   ecx
c000cbc0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cbc4:	52                   	push   edx
c000cbc5:	55                   	push   ebp
c000cbc6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000cbc9:	83 c4 10             	add    esp,0x10
c000cbcc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cbd0:	eb da                	jmp    c000cbac <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000cbd2:	47                   	inc    edi
c000cbd3:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000cbd7:	eb c5                	jmp    c000cb9e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000cbd9:	83 c4 1c             	add    esp,0x1c
c000cbdc:	5b                   	pop    ebx
c000cbdd:	5e                   	pop    esi
c000cbde:	5f                   	pop    edi
c000cbdf:	5d                   	pop    ebp
c000cbe0:	c3                   	ret    
c000cbe1:	90                   	nop

c000cbe2 <Video::blit(unsigned int*, int, int, int, int)>:
c000cbe2:	55                   	push   ebp
c000cbe3:	57                   	push   edi
c000cbe4:	56                   	push   esi
c000cbe5:	53                   	push   ebx
c000cbe6:	83 ec 1c             	sub    esp,0x1c
c000cbe9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbed:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000cbf1:	85 c0                	test   eax,eax
c000cbf3:	79 02                	jns    c000cbf7 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000cbf5:	31 c0                	xor    eax,eax
c000cbf7:	c1 e0 02             	shl    eax,0x2
c000cbfa:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000cbfe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cc02:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000cc06:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000cc0a:	39 d8                	cmp    eax,ebx
c000cc0c:	7e 49                	jle    c000cc57 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000cc0e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000cc14:	7c 41                	jl     c000cc57 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000cc16:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000cc1a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cc1e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cc22:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000cc26:	39 f9                	cmp    ecx,edi
c000cc28:	7e 22                	jle    c000cc4c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000cc2a:	83 c5 04             	add    ebp,0x4
c000cc2d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000cc33:	7c 14                	jl     c000cc49 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000cc35:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000cc37:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000cc3a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000cc3e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000cc42:	56                   	push   esi
c000cc43:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000cc46:	83 c4 10             	add    esp,0x10
c000cc49:	47                   	inc    edi
c000cc4a:	eb d2                	jmp    c000cc1e <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000cc4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cc50:	43                   	inc    ebx
c000cc51:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000cc55:	eb ab                	jmp    c000cc02 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000cc57:	83 c4 1c             	add    esp,0x1c
c000cc5a:	5b                   	pop    ebx
c000cc5b:	5e                   	pop    esi
c000cc5c:	5f                   	pop    edi
c000cc5d:	5d                   	pop    ebp
c000cc5e:	c3                   	ret    
c000cc5f:	90                   	nop

c000cc60 <Video::clearScreen(unsigned int)>:
c000cc60:	57                   	push   edi
c000cc61:	56                   	push   esi
c000cc62:	53                   	push   ebx
c000cc63:	31 db                	xor    ebx,ebx
c000cc65:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cc69:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000cc6f:	7e 1f                	jle    c000cc90 <Video::clearScreen(unsigned int)+0x30>
c000cc71:	31 ff                	xor    edi,edi
c000cc73:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000cc79:	7e 12                	jle    c000cc8d <Video::clearScreen(unsigned int)+0x2d>
c000cc7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000cc7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc81:	53                   	push   ebx
c000cc82:	57                   	push   edi
c000cc83:	47                   	inc    edi
c000cc84:	56                   	push   esi
c000cc85:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000cc88:	83 c4 10             	add    esp,0x10
c000cc8b:	eb e6                	jmp    c000cc73 <Video::clearScreen(unsigned int)+0x13>
c000cc8d:	43                   	inc    ebx
c000cc8e:	eb d9                	jmp    c000cc69 <Video::clearScreen(unsigned int)+0x9>
c000cc90:	5b                   	pop    ebx
c000cc91:	5e                   	pop    esi
c000cc92:	5f                   	pop    edi
c000cc93:	c3                   	ret    

c000cc94 <Video::putpixel(int, int, unsigned int)>:
c000cc94:	c7 44 24 04 f4 d5 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d5f4
c000cc9c:	e9 5a 27 00 00       	jmp    c000f3fb <Krnl::panic(char const*)>
c000cca1:	90                   	nop

c000cca2 <Video::Video(char const*)>:
c000cca2:	83 ec 0c             	sub    esp,0xc
c000cca5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cca9:	83 ec 08             	sub    esp,0x8
c000ccac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccb0:	50                   	push   eax
c000ccb1:	e8 ce e1 ff ff       	call   c000ae84 <Device::Device(char const*)>
c000ccb6:	83 c4 10             	add    esp,0x10
c000ccb9:	ba 64 d6 01 c0       	mov    edx,0xc001d664
c000ccbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccc2:	89 10                	mov    DWORD PTR [eax],edx
c000ccc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccc8:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ccd2:	90                   	nop
c000ccd3:	83 c4 0c             	add    esp,0xc
c000ccd6:	c3                   	ret    
c000ccd7:	90                   	nop

c000ccd8 <Video::~Video()>:
c000ccd8:	83 ec 0c             	sub    esp,0xc
c000ccdb:	ba 64 d6 01 c0       	mov    edx,0xc001d664
c000cce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cce4:	89 10                	mov    DWORD PTR [eax],edx
c000cce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccea:	83 ec 0c             	sub    esp,0xc
c000cced:	50                   	push   eax
c000ccee:	e8 fb de ff ff       	call   c000abee <Device::~Device()>
c000ccf3:	83 c4 10             	add    esp,0x10
c000ccf6:	90                   	nop
c000ccf7:	83 c4 0c             	add    esp,0xc
c000ccfa:	c3                   	ret    
c000ccfb:	90                   	nop

c000ccfc <Video::~Video()>:
c000ccfc:	83 ec 0c             	sub    esp,0xc
c000ccff:	83 ec 0c             	sub    esp,0xc
c000cd02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd06:	e8 cd ff ff ff       	call   c000ccd8 <Video::~Video()>
c000cd0b:	83 c4 10             	add    esp,0x10
c000cd0e:	83 ec 08             	sub    esp,0x8
c000cd11:	68 64 01 00 00       	push   0x164
c000cd16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd1a:	e8 97 ca ff ff       	call   c00097b6 <operator delete(void*, unsigned long)>
c000cd1f:	83 c4 10             	add    esp,0x10
c000cd22:	83 c4 0c             	add    esp,0xc
c000cd25:	c3                   	ret    

c000cd26 <Video::isMonochrome()>:
c000cd26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd2a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000cd30:	c3                   	ret    
c000cd31:	90                   	nop

c000cd32 <Video::getWidth()>:
c000cd32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd36:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cd3c:	c3                   	ret    
c000cd3d:	90                   	nop

c000cd3e <Video::getHeight()>:
c000cd3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd42:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000cd48:	c3                   	ret    
c000cd49:	90                   	nop

c000cd4a <Video::drawCursor(int, int, unsigned char*, int)>:
c000cd4a:	55                   	push   ebp
c000cd4b:	57                   	push   edi
c000cd4c:	56                   	push   esi
c000cd4d:	53                   	push   ebx
c000cd4e:	83 ec 2c             	sub    esp,0x2c
c000cd51:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000cd55:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000cd59:	83 f8 01             	cmp    eax,0x1
c000cd5c:	19 c9                	sbb    ecx,ecx
c000cd5e:	31 db                	xor    ebx,ebx
c000cd60:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000cd64:	89 cd                	mov    ebp,ecx
c000cd66:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000cd6e:	f7 d5                	not    ebp
c000cd70:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000cd76:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000cd7a:	01 d8                	add    eax,ebx
c000cd7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cd80:	56                   	push   esi
c000cd81:	e8 b8 ff ff ff       	call   c000cd3e <Video::getHeight()>
c000cd86:	59                   	pop    ecx
c000cd87:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000cd8b:	7e 70                	jle    c000cdfd <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000cd8d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000cd91:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000cd95:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000cd98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd9c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000cda0:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000cda7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cdab:	89 f8                	mov    eax,edi
c000cdad:	83 c0 20             	add    eax,0x20
c000cdb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cdb4:	56                   	push   esi
c000cdb5:	e8 78 ff ff ff       	call   c000cd32 <Video::getWidth()>
c000cdba:	5a                   	pop    edx
c000cdbb:	39 c7                	cmp    edi,eax
c000cdbd:	7d 34                	jge    c000cdf3 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000cdbf:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000cdc4:	74 05                	je     c000cdcb <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000cdc6:	8b 06                	mov    eax,DWORD PTR [esi]
c000cdc8:	55                   	push   ebp
c000cdc9:	eb 0d                	jmp    c000cdd8 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000cdcb:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000cdd0:	74 12                	je     c000cde4 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000cdd2:	8b 06                	mov    eax,DWORD PTR [esi]
c000cdd4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cdd8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cddc:	57                   	push   edi
c000cddd:	56                   	push   esi
c000cdde:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000cde1:	83 c4 10             	add    esp,0x10
c000cde4:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000cde8:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000cdec:	47                   	inc    edi
c000cded:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000cdf1:	75 c1                	jne    c000cdb4 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000cdf3:	43                   	inc    ebx
c000cdf4:	83 fb 20             	cmp    ebx,0x20
c000cdf7:	0f 85 79 ff ff ff    	jne    c000cd76 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000cdfd:	83 c4 2c             	add    esp,0x2c
c000ce00:	5b                   	pop    ebx
c000ce01:	5e                   	pop    esi
c000ce02:	5f                   	pop    edi
c000ce03:	5d                   	pop    ebp
c000ce04:	c3                   	ret    
c000ce05:	90                   	nop

c000ce06 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ce06:	55                   	push   ebp
c000ce07:	57                   	push   edi
c000ce08:	56                   	push   esi
c000ce09:	53                   	push   ebx
c000ce0a:	83 ec 28             	sub    esp,0x28
c000ce0d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ce11:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ce15:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000ce19:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000ce1d:	c1 e6 08             	shl    esi,0x8
c000ce20:	01 c6                	add    esi,eax
c000ce22:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000ce26:	c1 e0 08             	shl    eax,0x8
c000ce29:	01 d0                	add    eax,edx
c000ce2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ce2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ce33:	0f af c6             	imul   eax,esi
c000ce36:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ce3d:	50                   	push   eax
c000ce3e:	e8 da 9c ff ff       	call   c0006b1d <malloc>
c000ce43:	83 c4 10             	add    esp,0x10
c000ce46:	89 c7                	mov    edi,eax
c000ce48:	85 c0                	test   eax,eax
c000ce4a:	75 10                	jne    c000ce5c <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ce4c:	83 ec 0c             	sub    esp,0xc
c000ce4f:	68 15 d6 01 c0       	push   0xc001d615
c000ce54:	e8 a2 25 00 00       	call   c000f3fb <Krnl::panic(char const*)>
c000ce59:	83 c4 10             	add    esp,0x10
c000ce5c:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000ce5f:	ba 12 00 00 00       	mov    edx,0x12
c000ce64:	84 c0                	test   al,al
c000ce66:	74 11                	je     c000ce79 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000ce68:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000ce6c:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000ce70:	c1 fa 03             	sar    edx,0x3
c000ce73:	0f af d1             	imul   edx,ecx
c000ce76:	83 c2 12             	add    edx,0x12
c000ce79:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000ce7d:	74 04                	je     c000ce83 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000ce7f:	85 f6                	test   esi,esi
c000ce81:	75 12                	jne    c000ce95 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000ce83:	83 ec 0c             	sub    esp,0xc
c000ce86:	68 25 d6 01 c0       	push   0xc001d625
c000ce8b:	e8 1c ca ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c000ce90:	e9 b8 00 00 00       	jmp    c000cf4d <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000ce95:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000ce99:	80 f9 02             	cmp    cl,0x2
c000ce9c:	0f 85 96 00 00 00    	jne    c000cf38 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000cea2:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000cea7:	75 0e                	jne    c000ceb7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000cea9:	84 c0                	test   al,al
c000ceab:	75 0a                	jne    c000ceb7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000cead:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000ceb0:	83 e8 18             	sub    eax,0x18
c000ceb3:	a8 f7                	test   al,0xf7
c000ceb5:	74 0a                	je     c000cec1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000ceb7:	83 ec 0c             	sub    esp,0xc
c000ceba:	68 3a d6 01 c0       	push   0xc001d63a
c000cebf:	eb 7f                	jmp    c000cf40 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000cec1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000cec9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000ced1:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000ced5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000cedd:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000cee1:	75 0c                	jne    c000ceef <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000cee3:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000cee8:	c1 e0 18             	shl    eax,0x18
c000ceeb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ceef:	45                   	inc    ebp
c000cef0:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000cef5:	c1 e1 10             	shl    ecx,0x10
c000cef8:	89 c8                	mov    eax,ecx
c000cefa:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000ceff:	c1 e1 08             	shl    ecx,0x8
c000cf02:	09 c1                	or     ecx,eax
c000cf04:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000cf08:	09 c1                	or     ecx,eax
c000cf0a:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000cf0e:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000cf12:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000cf16:	c1 f8 03             	sar    eax,0x3
c000cf19:	01 c2                	add    edx,eax
c000cf1b:	89 e8                	mov    eax,ebp
c000cf1d:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000cf21:	39 c6                	cmp    esi,eax
c000cf23:	7f b0                	jg     c000ced5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000cf25:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000cf29:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cf2d:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000cf30:	7e 22                	jle    c000cf54 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000cf32:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000cf36:	eb 99                	jmp    c000ced1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000cf38:	50                   	push   eax
c000cf39:	50                   	push   eax
c000cf3a:	51                   	push   ecx
c000cf3b:	68 48 d6 01 c0       	push   0xc001d648
c000cf40:	e8 67 c9 ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c000cf45:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cf48:	e8 e0 9b ff ff       	call   c0006b2d <free>
c000cf4d:	83 c4 10             	add    esp,0x10
c000cf50:	31 ff                	xor    edi,edi
c000cf52:	eb 0f                	jmp    c000cf63 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000cf54:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000cf58:	89 30                	mov    DWORD PTR [eax],esi
c000cf5a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cf5e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000cf61:	89 30                	mov    DWORD PTR [eax],esi
c000cf63:	83 c4 1c             	add    esp,0x1c
c000cf66:	89 f8                	mov    eax,edi
c000cf68:	5b                   	pop    ebx
c000cf69:	5e                   	pop    esi
c000cf6a:	5f                   	pop    edi
c000cf6b:	5d                   	pop    ebp
c000cf6c:	c3                   	ret    
c000cf6d:	90                   	nop

c000cf6e <Video::putTGA(int, int, unsigned char*, int)>:
c000cf6e:	55                   	push   ebp
c000cf6f:	57                   	push   edi
c000cf70:	56                   	push   esi
c000cf71:	53                   	push   ebx
c000cf72:	83 ec 28             	sub    esp,0x28
c000cf75:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000cf79:	8d 44 24 18          	lea    eax,[esp+0x18]
c000cf7d:	50                   	push   eax
c000cf7e:	8d 44 24 18          	lea    eax,[esp+0x18]
c000cf82:	50                   	push   eax
c000cf83:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000cf87:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000cf8b:	56                   	push   esi
c000cf8c:	e8 75 fe ff ff       	call   c000ce06 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000cf91:	83 c4 20             	add    esp,0x20
c000cf94:	85 c0                	test   eax,eax
c000cf96:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000cf9a:	74 35                	je     c000cfd1 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000cf9c:	89 c7                	mov    edi,eax
c000cf9e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cfa2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000cfa6:	39 d8                	cmp    eax,ebx
c000cfa8:	7e 27                	jle    c000cfd1 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000cfaa:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cfae:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cfb2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000cfb6:	39 e8                	cmp    eax,ebp
c000cfb8:	7e 14                	jle    c000cfce <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000cfba:	8b 06                	mov    eax,DWORD PTR [esi]
c000cfbc:	83 c7 04             	add    edi,0x4
c000cfbf:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000cfc2:	53                   	push   ebx
c000cfc3:	55                   	push   ebp
c000cfc4:	45                   	inc    ebp
c000cfc5:	56                   	push   esi
c000cfc6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000cfc9:	83 c4 10             	add    esp,0x10
c000cfcc:	eb e0                	jmp    c000cfae <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000cfce:	43                   	inc    ebx
c000cfcf:	eb cd                	jmp    c000cf9e <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000cfd1:	83 c4 1c             	add    esp,0x1c
c000cfd4:	5b                   	pop    ebx
c000cfd5:	5e                   	pop    esi
c000cfd6:	5f                   	pop    edi
c000cfd7:	5d                   	pop    ebp
c000cfd8:	c3                   	ret    
c000cfd9:	66 90                	xchg   ax,ax
c000cfdb:	90                   	nop

c000cfdc <ACPI::close(int, int, void*)>:
c000cfdc:	83 ec 1c             	sub    esp,0x1c
c000cfdf:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000cfe7:	74 0b                	je     c000cff4 <ACPI::close(int, int, void*)+0x18>
c000cfe9:	b8 00 00 00 00       	mov    eax,0x0
c000cfee:	e9 9d 00 00 00       	jmp    c000d090 <ACPI::close(int, int, void*)+0xb4>
c000cff3:	90                   	nop
c000cff4:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000cff9:	75 29                	jne    c000d024 <ACPI::close(int, int, void*)+0x48>
c000cffb:	a1 e8 17 02 c0       	mov    eax,ds:0xc00217e8
c000d000:	85 c0                	test   eax,eax
c000d002:	74 08                	je     c000d00c <ACPI::close(int, int, void*)+0x30>
c000d004:	a1 e8 17 02 c0       	mov    eax,ds:0xc00217e8
c000d009:	ff d0                	call   eax
c000d00b:	90                   	nop
c000d00c:	83 ec 0c             	sub    esp,0xc
c000d00f:	68 a4 d6 01 c0       	push   0xc001d6a4
c000d014:	e8 e2 23 00 00       	call   c000f3fb <Krnl::panic(char const*)>
c000d019:	83 c4 10             	add    esp,0x10
c000d01c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d021:	eb 6d                	jmp    c000d090 <ACPI::close(int, int, void*)+0xb4>
c000d023:	90                   	nop
c000d024:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000d029:	75 5d                	jne    c000d088 <ACPI::close(int, int, void*)+0xac>
c000d02b:	a1 e4 17 02 c0       	mov    eax,ds:0xc00217e4
c000d030:	85 c0                	test   eax,eax
c000d032:	74 08                	je     c000d03c <ACPI::close(int, int, void*)+0x60>
c000d034:	a1 e4 17 02 c0       	mov    eax,ds:0xc00217e4
c000d039:	ff d0                	call   eax
c000d03b:	90                   	nop
c000d03c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000d041:	8d 76 00             	lea    esi,[esi+0x0]
c000d044:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000d048:	25 ff 00 00 00       	and    eax,0xff
c000d04d:	83 e0 02             	and    eax,0x2
c000d050:	74 1e                	je     c000d070 <ACPI::close(int, int, void*)+0x94>
c000d052:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000d059:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d05d:	89 c2                	mov    edx,eax
c000d05f:	ec                   	in     al,dx
c000d060:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000d064:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000d068:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000d06c:	eb d6                	jmp    c000d044 <ACPI::close(int, int, void*)+0x68>
c000d06e:	66 90                	xchg   ax,ax
c000d070:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000d077:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000d07c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000d080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d084:	ee                   	out    dx,al
c000d085:	8d 76 00             	lea    esi,[esi+0x0]
c000d088:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d08d:	8d 76 00             	lea    esi,[esi+0x0]
c000d090:	83 c4 1c             	add    esp,0x1c
c000d093:	c3                   	ret    

c000d094 <findRSDP()>:
c000d094:	83 ec 1c             	sub    esp,0x1c
c000d097:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c000d09c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000d0a2:	83 e0 04             	and    eax,0x4
c000d0a5:	84 c0                	test   al,al
c000d0a7:	75 07                	jne    c000d0b0 <findRSDP()+0x1c>
c000d0a9:	b8 00 00 00 00       	mov    eax,0x0
c000d0ae:	eb 70                	jmp    c000d120 <findRSDP()+0x8c>
c000d0b0:	a1 38 f2 01 c0       	mov    eax,ds:0xc001f238
c000d0b5:	3d ff 07 00 00       	cmp    eax,0x7ff
c000d0ba:	7f 1c                	jg     c000d0d8 <findRSDP()+0x44>
c000d0bc:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c000d0c1:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000d0c7:	83 e2 fb             	and    edx,0xfffffffb
c000d0ca:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000d0d0:	b8 00 00 00 00       	mov    eax,0x0
c000d0d5:	eb 49                	jmp    c000d120 <findRSDP()+0x8c>
c000d0d7:	90                   	nop
c000d0d8:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000d0e0:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000d0e8:	77 2e                	ja     c000d118 <findRSDP()+0x84>
c000d0ea:	83 ec 04             	sub    esp,0x4
c000d0ed:	6a 08                	push   0x8
c000d0ef:	68 3f d7 01 c0       	push   0xc001d73f
c000d0f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d0f8:	e8 b3 32 ff ff       	call   c00003b0 <memcmp>
c000d0fd:	83 c4 10             	add    esp,0x10
c000d100:	85 c0                	test   eax,eax
c000d102:	0f 94 c0             	sete   al
c000d105:	84 c0                	test   al,al
c000d107:	74 07                	je     c000d110 <findRSDP()+0x7c>
c000d109:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d10d:	eb 11                	jmp    c000d120 <findRSDP()+0x8c>
c000d10f:	90                   	nop
c000d110:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000d115:	eb c9                	jmp    c000d0e0 <findRSDP()+0x4c>
c000d117:	90                   	nop
c000d118:	b8 00 00 00 00       	mov    eax,0x0
c000d11d:	8d 76 00             	lea    esi,[esi+0x0]
c000d120:	83 c4 1c             	add    esp,0x1c
c000d123:	c3                   	ret    

c000d124 <loadACPITables(unsigned char*)>:
c000d124:	57                   	push   edi
c000d125:	56                   	push   esi
c000d126:	53                   	push   ebx
c000d127:	83 ec 60             	sub    esp,0x60
c000d12a:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c000d12f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000d135:	83 e0 04             	and    eax,0x4
c000d138:	84 c0                	test   al,al
c000d13a:	0f 84 3c 02 00 00    	je     c000d37c <loadACPITables(unsigned char*)+0x258>
c000d140:	a0 00 1a 02 c0       	mov    al,ds:0xc0021a00
c000d145:	84 c0                	test   al,al
c000d147:	74 77                	je     c000d1c0 <loadACPITables(unsigned char*)+0x9c>
c000d149:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d14d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d151:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d155:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d158:	83 e8 24             	sub    eax,0x24
c000d15b:	c1 e8 03             	shr    eax,0x3
c000d15e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d162:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000d16a:	66 90                	xchg   ax,ax
c000d16c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000d170:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000d174:	0f 8d b6 00 00 00    	jge    c000d230 <loadACPITables(unsigned char*)+0x10c>
c000d17a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d17e:	83 c0 24             	add    eax,0x24
c000d181:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d185:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000d189:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000d18d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000d191:	c1 e0 03             	shl    eax,0x3
c000d194:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000d198:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000d19c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d19f:	8b 00                	mov    eax,DWORD PTR [eax]
c000d1a1:	89 c1                	mov    ecx,eax
c000d1a3:	a1 ec 17 02 c0       	mov    eax,ds:0xc00217ec
c000d1a8:	8d 50 01             	lea    edx,[eax+0x1]
c000d1ab:	89 15 ec 17 02 c0    	mov    DWORD PTR ds:0xc00217ec,edx
c000d1b1:	89 ca                	mov    edx,ecx
c000d1b3:	89 14 c5 04 18 02 c0 	mov    DWORD PTR [eax*8-0x3ffde7fc],edx
c000d1ba:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000d1be:	eb ac                	jmp    c000d16c <loadACPITables(unsigned char*)+0x48>
c000d1c0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d1c4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d1c8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d1cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d1cf:	83 e8 24             	sub    eax,0x24
c000d1d2:	c1 e8 02             	shr    eax,0x2
c000d1d5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000d1d9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000d1e1:	8d 76 00             	lea    esi,[esi+0x0]
c000d1e4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000d1e8:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000d1ec:	7d 42                	jge    c000d230 <loadACPITables(unsigned char*)+0x10c>
c000d1ee:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d1f2:	83 c0 24             	add    eax,0x24
c000d1f5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d1f9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d1fd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d201:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000d205:	c1 e0 02             	shl    eax,0x2
c000d208:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d20c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d210:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d212:	a1 ec 17 02 c0       	mov    eax,ds:0xc00217ec
c000d217:	8d 50 01             	lea    edx,[eax+0x1]
c000d21a:	89 15 ec 17 02 c0    	mov    DWORD PTR ds:0xc00217ec,edx
c000d220:	89 ca                	mov    edx,ecx
c000d222:	89 14 c5 04 18 02 c0 	mov    DWORD PTR [eax*8-0x3ffde7fc],edx
c000d229:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000d22d:	eb b5                	jmp    c000d1e4 <loadACPITables(unsigned char*)+0xc0>
c000d22f:	90                   	nop
c000d230:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000d238:	a1 ec 17 02 c0       	mov    eax,ds:0xc00217ec
c000d23d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000d241:	0f 8d 39 01 00 00    	jge    c000d380 <loadACPITables(unsigned char*)+0x25c>
c000d247:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d24b:	8b 04 c5 04 18 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffde7fc]
c000d252:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d256:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d25a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d25e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d262:	25 ff 0f 00 00       	and    eax,0xfff
c000d267:	89 c6                	mov    esi,eax
c000d269:	8b 1d f0 f2 01 c0    	mov    ebx,DWORD PTR ds:0xc001f2f0
c000d26f:	83 ec 0c             	sub    esp,0xc
c000d272:	6a 01                	push   0x1
c000d274:	e8 e0 b3 ff ff       	call   c0008659 <Virt::allocateKernelVirtualPages(int)>
c000d279:	83 c4 10             	add    esp,0x10
c000d27c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d280:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d286:	83 ec 0c             	sub    esp,0xc
c000d289:	6a 01                	push   0x1
c000d28b:	6a 01                	push   0x1
c000d28d:	50                   	push   eax
c000d28e:	52                   	push   edx
c000d28f:	53                   	push   ebx
c000d290:	e8 53 bd ff ff       	call   c0008fe8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d295:	83 c4 20             	add    esp,0x20
c000d298:	09 f0                	or     eax,esi
c000d29a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d29e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d2a2:	c1 e0 03             	shl    eax,0x3
c000d2a5:	05 00 18 02 c0       	add    eax,0xc0021800
c000d2aa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d2ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d2b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d2b6:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000d2be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d2c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d2ca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d2ce:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d2d2:	89 c6                	mov    esi,eax
c000d2d4:	89 d7                	mov    edi,edx
c000d2d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d2d8:	89 c8                	mov    eax,ecx
c000d2da:	89 fa                	mov    edx,edi
c000d2dc:	89 f3                	mov    ebx,esi
c000d2de:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000d2e2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000d2e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d2ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d2ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d2f1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d2f9:	05 00 10 00 00       	add    eax,0x1000
c000d2fe:	c1 e8 0c             	shr    eax,0xc
c000d301:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d305:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d309:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d30d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d311:	25 ff 0f 00 00       	and    eax,0xfff
c000d316:	89 c6                	mov    esi,eax
c000d318:	8b 1d f0 f2 01 c0    	mov    ebx,DWORD PTR ds:0xc001f2f0
c000d31e:	83 ec 0c             	sub    esp,0xc
c000d321:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000d325:	e8 2f b3 ff ff       	call   c0008659 <Virt::allocateKernelVirtualPages(int)>
c000d32a:	83 c4 10             	add    esp,0x10
c000d32d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d331:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d337:	83 ec 0c             	sub    esp,0xc
c000d33a:	6a 01                	push   0x1
c000d33c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d340:	50                   	push   eax
c000d341:	52                   	push   edx
c000d342:	53                   	push   ebx
c000d343:	e8 a0 bc ff ff       	call   c0008fe8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d348:	83 c4 20             	add    esp,0x20
c000d34b:	09 f0                	or     eax,esi
c000d34d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d351:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d355:	83 ec 0c             	sub    esp,0xc
c000d358:	50                   	push   eax
c000d359:	e8 2b b6 ff ff       	call   c0008989 <Virt::freeKernelVirtualPages(unsigned long)>
c000d35e:	83 c4 10             	add    esp,0x10
c000d361:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d365:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000d369:	89 14 c5 04 18 02 c0 	mov    DWORD PTR [eax*8-0x3ffde7fc],edx
c000d370:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000d374:	e9 bf fe ff ff       	jmp    c000d238 <loadACPITables(unsigned char*)+0x114>
c000d379:	8d 76 00             	lea    esi,[esi+0x0]
c000d37c:	90                   	nop
c000d37d:	8d 76 00             	lea    esi,[esi+0x0]
c000d380:	83 c4 60             	add    esp,0x60
c000d383:	5b                   	pop    ebx
c000d384:	5e                   	pop    esi
c000d385:	5f                   	pop    edi
c000d386:	c3                   	ret    
c000d387:	90                   	nop

c000d388 <findRSDT(unsigned char*)>:
c000d388:	57                   	push   edi
c000d389:	56                   	push   esi
c000d38a:	53                   	push   ebx
c000d38b:	83 ec 50             	sub    esp,0x50
c000d38e:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c000d393:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000d399:	83 e0 04             	and    eax,0x4
c000d39c:	84 c0                	test   al,al
c000d39e:	75 0c                	jne    c000d3ac <findRSDT(unsigned char*)+0x24>
c000d3a0:	b8 00 00 00 00       	mov    eax,0x0
c000d3a5:	e9 26 01 00 00       	jmp    c000d4d0 <findRSDT(unsigned char*)+0x148>
c000d3aa:	66 90                	xchg   ax,ax
c000d3ac:	89 e0                	mov    eax,esp
c000d3ae:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000d3b2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d3b6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d3ba:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000d3c2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d3c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d3ce:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000d3d2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000d3d6:	89 c6                	mov    esi,eax
c000d3d8:	89 d7                	mov    edi,edx
c000d3da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d3dc:	89 c8                	mov    eax,ecx
c000d3de:	89 fa                	mov    edx,edi
c000d3e0:	89 f3                	mov    ebx,esi
c000d3e2:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000d3e6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000d3ea:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d3ee:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000d3f2:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000d3f6:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000d3fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d402:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d406:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000d40a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d40e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d412:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000d416:	25 ff 0f 00 00       	and    eax,0xfff
c000d41b:	89 c6                	mov    esi,eax
c000d41d:	8b 1d f0 f2 01 c0    	mov    ebx,DWORD PTR ds:0xc001f2f0
c000d423:	83 ec 0c             	sub    esp,0xc
c000d426:	6a 02                	push   0x2
c000d428:	e8 2c b2 ff ff       	call   c0008659 <Virt::allocateKernelVirtualPages(int)>
c000d42d:	83 c4 10             	add    esp,0x10
c000d430:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000d434:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d43a:	83 ec 0c             	sub    esp,0xc
c000d43d:	6a 01                	push   0x1
c000d43f:	6a 02                	push   0x2
c000d441:	50                   	push   eax
c000d442:	52                   	push   edx
c000d443:	53                   	push   ebx
c000d444:	e8 9f bb ff ff       	call   c0008fe8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d449:	83 c4 20             	add    esp,0x20
c000d44c:	09 f0                	or     eax,esi
c000d44e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000d452:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d456:	25 ff 0f 00 00       	and    eax,0xfff
c000d45b:	89 c6                	mov    esi,eax
c000d45d:	8b 1d f0 f2 01 c0    	mov    ebx,DWORD PTR ds:0xc001f2f0
c000d463:	83 ec 0c             	sub    esp,0xc
c000d466:	6a 02                	push   0x2
c000d468:	e8 ec b1 ff ff       	call   c0008659 <Virt::allocateKernelVirtualPages(int)>
c000d46d:	83 c4 10             	add    esp,0x10
c000d470:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000d474:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d47a:	83 ec 0c             	sub    esp,0xc
c000d47d:	6a 01                	push   0x1
c000d47f:	6a 02                	push   0x2
c000d481:	50                   	push   eax
c000d482:	52                   	push   edx
c000d483:	53                   	push   ebx
c000d484:	e8 5f bb ff ff       	call   c0008fe8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d489:	83 c4 20             	add    esp,0x20
c000d48c:	09 f0                	or     eax,esi
c000d48e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d492:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000d497:	75 13                	jne    c000d4ac <findRSDT(unsigned char*)+0x124>
c000d499:	c6 05 00 1a 02 c0 00 	mov    BYTE PTR ds:0xc0021a00,0x0
c000d4a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d4a4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d4a8:	eb 22                	jmp    c000d4cc <findRSDT(unsigned char*)+0x144>
c000d4aa:	66 90                	xchg   ax,ax
c000d4ac:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000d4b1:	75 11                	jne    c000d4c4 <findRSDT(unsigned char*)+0x13c>
c000d4b3:	c6 05 00 1a 02 c0 01 	mov    BYTE PTR ds:0xc0021a00,0x1
c000d4ba:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000d4be:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d4c2:	eb 08                	jmp    c000d4cc <findRSDT(unsigned char*)+0x144>
c000d4c4:	b8 00 00 00 00       	mov    eax,0x0
c000d4c9:	eb 05                	jmp    c000d4d0 <findRSDT(unsigned char*)+0x148>
c000d4cb:	90                   	nop
c000d4cc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d4d0:	83 c4 50             	add    esp,0x50
c000d4d3:	5b                   	pop    ebx
c000d4d4:	5e                   	pop    esi
c000d4d5:	5f                   	pop    edi
c000d4d6:	c3                   	ret    
c000d4d7:	90                   	nop

c000d4d8 <findDataTable(unsigned char*, char*)>:
c000d4d8:	83 ec 1c             	sub    esp,0x1c
c000d4db:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c000d4e0:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000d4e6:	83 e0 04             	and    eax,0x4
c000d4e9:	84 c0                	test   al,al
c000d4eb:	75 07                	jne    c000d4f4 <findDataTable(unsigned char*, char*)+0x1c>
c000d4ed:	b8 00 00 00 00       	mov    eax,0x0
c000d4f2:	eb 58                	jmp    c000d54c <findDataTable(unsigned char*, char*)+0x74>
c000d4f4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000d4fc:	a1 ec 17 02 c0       	mov    eax,ds:0xc00217ec
c000d501:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000d505:	7d 3d                	jge    c000d544 <findDataTable(unsigned char*, char*)+0x6c>
c000d507:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d50b:	c1 e0 03             	shl    eax,0x3
c000d50e:	05 00 18 02 c0       	add    eax,0xc0021800
c000d513:	83 ec 04             	sub    esp,0x4
c000d516:	6a 04                	push   0x4
c000d518:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d51c:	50                   	push   eax
c000d51d:	e8 8e 2e ff ff       	call   c00003b0 <memcmp>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	85 c0                	test   eax,eax
c000d527:	0f 94 c0             	sete   al
c000d52a:	84 c0                	test   al,al
c000d52c:	74 0e                	je     c000d53c <findDataTable(unsigned char*, char*)+0x64>
c000d52e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d532:	8b 04 c5 04 18 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffde7fc]
c000d539:	eb 11                	jmp    c000d54c <findDataTable(unsigned char*, char*)+0x74>
c000d53b:	90                   	nop
c000d53c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000d540:	eb ba                	jmp    c000d4fc <findDataTable(unsigned char*, char*)+0x24>
c000d542:	66 90                	xchg   ax,ax
c000d544:	b8 00 00 00 00       	mov    eax,0x0
c000d549:	8d 76 00             	lea    esi,[esi+0x0]
c000d54c:	83 c4 1c             	add    esp,0x1c
c000d54f:	c3                   	ret    

c000d550 <scanMADT()>:
c000d550:	53                   	push   ebx
c000d551:	83 ec 38             	sub    esp,0x38
c000d554:	a1 20 f2 01 c0       	mov    eax,ds:0xc001f220
c000d559:	25 00 04 00 00       	and    eax,0x400
c000d55e:	74 14                	je     c000d574 <scanMADT()+0x24>
c000d560:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c000d565:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000d56b:	83 e2 fb             	and    edx,0xfffffffb
c000d56e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000d574:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c000d579:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000d57f:	83 e0 04             	and    eax,0x4
c000d582:	84 c0                	test   al,al
c000d584:	0f 84 8a 04 00 00    	je     c000da14 <scanMADT()+0x4c4>
c000d58a:	e8 05 fb ff ff       	call   c000d094 <findRSDP()>
c000d58f:	a3 0c 1a 02 c0       	mov    ds:0xc0021a0c,eax
c000d594:	a1 0c 1a 02 c0       	mov    eax,ds:0xc0021a0c
c000d599:	85 c0                	test   eax,eax
c000d59b:	75 1b                	jne    c000d5b8 <scanMADT()+0x68>
c000d59d:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c000d5a2:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000d5a8:	83 e2 fb             	and    edx,0xfffffffb
c000d5ab:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000d5b1:	e9 66 04 00 00       	jmp    c000da1c <scanMADT()+0x4cc>
c000d5b6:	66 90                	xchg   ax,ax
c000d5b8:	a1 0c 1a 02 c0       	mov    eax,ds:0xc0021a0c
c000d5bd:	83 ec 0c             	sub    esp,0xc
c000d5c0:	50                   	push   eax
c000d5c1:	e8 c2 fd ff ff       	call   c000d388 <findRSDT(unsigned char*)>
c000d5c6:	83 c4 10             	add    esp,0x10
c000d5c9:	a3 08 1a 02 c0       	mov    ds:0xc0021a08,eax
c000d5ce:	a1 08 1a 02 c0       	mov    eax,ds:0xc0021a08
c000d5d3:	85 c0                	test   eax,eax
c000d5d5:	75 19                	jne    c000d5f0 <scanMADT()+0xa0>
c000d5d7:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c000d5dc:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000d5e2:	83 e2 fb             	and    edx,0xfffffffb
c000d5e5:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000d5eb:	e9 2c 04 00 00       	jmp    c000da1c <scanMADT()+0x4cc>
c000d5f0:	a1 08 1a 02 c0       	mov    eax,ds:0xc0021a08
c000d5f5:	83 ec 0c             	sub    esp,0xc
c000d5f8:	50                   	push   eax
c000d5f9:	e8 26 fb ff ff       	call   c000d124 <loadACPITables(unsigned char*)>
c000d5fe:	83 c4 10             	add    esp,0x10
c000d601:	a1 08 1a 02 c0       	mov    eax,ds:0xc0021a08
c000d606:	83 ec 08             	sub    esp,0x8
c000d609:	68 48 d7 01 c0       	push   0xc001d748
c000d60e:	50                   	push   eax
c000d60f:	e8 c4 fe ff ff       	call   c000d4d8 <findDataTable(unsigned char*, char*)>
c000d614:	83 c4 10             	add    esp,0x10
c000d617:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d61b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000d620:	75 1a                	jne    c000d63c <scanMADT()+0xec>
c000d622:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c000d627:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000d62d:	83 e2 fe             	and    edx,0xfffffffe
c000d630:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000d636:	e9 e1 03 00 00       	jmp    c000da1c <scanMADT()+0x4cc>
c000d63b:	90                   	nop
c000d63c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000d644:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d648:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d64b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000d64f:	0f 87 c7 03 00 00    	ja     c000da1c <scanMADT()+0x4cc>
c000d655:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000d65d:	0f 87 b9 03 00 00    	ja     c000da1c <scanMADT()+0x4cc>
c000d663:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d667:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d66b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d66f:	8d 50 01             	lea    edx,[eax+0x1]
c000d672:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d676:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d67a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d67e:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000d682:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d686:	8d 50 01             	lea    edx,[eax+0x1]
c000d689:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d68d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d691:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d695:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000d699:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000d69e:	0f 86 74 03 00 00    	jbe    c000da18 <scanMADT()+0x4c8>
c000d6a4:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000d6a9:	75 5d                	jne    c000d708 <scanMADT()+0x1b8>
c000d6ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d6af:	8d 50 01             	lea    edx,[eax+0x1]
c000d6b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6b6:	8a 15 00 1c 02 c0    	mov    dl,BYTE PTR ds:0xc0021c00
c000d6bc:	81 e2 ff 00 00 00    	and    edx,0xff
c000d6c2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000d6c6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000d6ca:	88 82 40 1c 02 c0    	mov    BYTE PTR [edx-0x3ffde3c0],al
c000d6d0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d6d4:	8d 42 01             	lea    eax,[edx+0x1]
c000d6d7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d6db:	a0 00 1c 02 c0       	mov    al,ds:0xc0021c00
c000d6e0:	8d 48 01             	lea    ecx,[eax+0x1]
c000d6e3:	88 0d 00 1c 02 c0    	mov    BYTE PTR ds:0xc0021c00,cl
c000d6e9:	25 ff 00 00 00       	and    eax,0xff
c000d6ee:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000d6f2:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000d6f6:	88 90 20 1c 02 c0    	mov    BYTE PTR [eax-0x3ffde3e0],dl
c000d6fc:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d701:	e9 f6 02 00 00       	jmp    c000d9fc <scanMADT()+0x4ac>
c000d706:	66 90                	xchg   ax,ax
c000d708:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000d70d:	0f 85 29 01 00 00    	jne    c000d83c <scanMADT()+0x2ec>
c000d713:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d717:	8d 50 01             	lea    edx,[eax+0x1]
c000d71a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d71e:	8a 15 c0 1a 02 c0    	mov    dl,BYTE PTR ds:0xc0021ac0
c000d724:	81 e2 ff 00 00 00    	and    edx,0xff
c000d72a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000d72e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000d732:	88 82 e0 1a 02 c0    	mov    BYTE PTR [edx-0x3ffde520],al
c000d738:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000d73c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d740:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d744:	01 d0                	add    eax,edx
c000d746:	83 c0 2c             	add    eax,0x2c
c000d749:	8a 00                	mov    al,BYTE PTR [eax]
c000d74b:	31 d2                	xor    edx,edx
c000d74d:	88 c2                	mov    dl,al
c000d74f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d753:	8d 48 01             	lea    ecx,[eax+0x1]
c000d756:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d75a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d75e:	25 ff 00 00 00       	and    eax,0xff
c000d763:	c1 e0 08             	shl    eax,0x8
c000d766:	89 d1                	mov    ecx,edx
c000d768:	09 c1                	or     ecx,eax
c000d76a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d76e:	8d 50 02             	lea    edx,[eax+0x2]
c000d771:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d775:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d779:	25 ff 00 00 00       	and    eax,0xff
c000d77e:	c1 e0 10             	shl    eax,0x10
c000d781:	09 c1                	or     ecx,eax
c000d783:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d787:	8d 50 03             	lea    edx,[eax+0x3]
c000d78a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d78e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d792:	25 ff 00 00 00       	and    eax,0xff
c000d797:	c1 e0 18             	shl    eax,0x18
c000d79a:	09 c1                	or     ecx,eax
c000d79c:	89 ca                	mov    edx,ecx
c000d79e:	a0 c0 1a 02 c0       	mov    al,ds:0xc0021ac0
c000d7a3:	25 ff 00 00 00       	and    eax,0xff
c000d7a8:	89 14 85 00 1b 02 c0 	mov    DWORD PTR [eax*4-0x3ffde500],edx
c000d7af:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d7b4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d7b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d7bc:	01 d0                	add    eax,edx
c000d7be:	83 c0 2c             	add    eax,0x2c
c000d7c1:	8a 00                	mov    al,BYTE PTR [eax]
c000d7c3:	31 d2                	xor    edx,edx
c000d7c5:	88 c2                	mov    dl,al
c000d7c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d7cb:	8d 48 01             	lea    ecx,[eax+0x1]
c000d7ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d7d2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d7d6:	25 ff 00 00 00       	and    eax,0xff
c000d7db:	c1 e0 08             	shl    eax,0x8
c000d7de:	89 d1                	mov    ecx,edx
c000d7e0:	09 c1                	or     ecx,eax
c000d7e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d7e6:	8d 50 02             	lea    edx,[eax+0x2]
c000d7e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d7ed:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d7f1:	25 ff 00 00 00       	and    eax,0xff
c000d7f6:	c1 e0 10             	shl    eax,0x10
c000d7f9:	09 c1                	or     ecx,eax
c000d7fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d7ff:	8d 50 03             	lea    edx,[eax+0x3]
c000d802:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d806:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d80a:	25 ff 00 00 00       	and    eax,0xff
c000d80f:	c1 e0 18             	shl    eax,0x18
c000d812:	09 c1                	or     ecx,eax
c000d814:	89 ca                	mov    edx,ecx
c000d816:	a0 c0 1a 02 c0       	mov    al,ds:0xc0021ac0
c000d81b:	25 ff 00 00 00       	and    eax,0xff
c000d820:	89 14 85 80 1b 02 c0 	mov    DWORD PTR [eax*4-0x3ffde480],edx
c000d827:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d82c:	a0 c0 1a 02 c0       	mov    al,ds:0xc0021ac0
c000d831:	40                   	inc    eax
c000d832:	a2 c0 1a 02 c0       	mov    ds:0xc0021ac0,al
c000d837:	e9 c0 01 00 00       	jmp    c000d9fc <scanMADT()+0x4ac>
c000d83c:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000d841:	0f 85 fd 00 00 00    	jne    c000d944 <scanMADT()+0x3f4>
c000d847:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d84b:	8d 50 01             	lea    edx,[eax+0x1]
c000d84e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d852:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d856:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d85a:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000d85e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d862:	8d 50 01             	lea    edx,[eax+0x1]
c000d865:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d869:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d86d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d871:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000d875:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d879:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d87d:	01 d0                	add    eax,edx
c000d87f:	83 c0 2c             	add    eax,0x2c
c000d882:	8a 00                	mov    al,BYTE PTR [eax]
c000d884:	31 d2                	xor    edx,edx
c000d886:	88 c2                	mov    dl,al
c000d888:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d88c:	8d 48 01             	lea    ecx,[eax+0x1]
c000d88f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d893:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d897:	25 ff 00 00 00       	and    eax,0xff
c000d89c:	c1 e0 08             	shl    eax,0x8
c000d89f:	89 d1                	mov    ecx,edx
c000d8a1:	09 c1                	or     ecx,eax
c000d8a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d8a7:	8d 50 02             	lea    edx,[eax+0x2]
c000d8aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d8ae:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d8b2:	25 ff 00 00 00       	and    eax,0xff
c000d8b7:	c1 e0 10             	shl    eax,0x10
c000d8ba:	09 c1                	or     ecx,eax
c000d8bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d8c0:	8d 50 03             	lea    edx,[eax+0x3]
c000d8c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d8c7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d8cb:	25 ff 00 00 00       	and    eax,0xff
c000d8d0:	c1 e0 18             	shl    eax,0x18
c000d8d3:	09 c8                	or     eax,ecx
c000d8d5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d8d9:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d8de:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d8e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d8e6:	01 d0                	add    eax,edx
c000d8e8:	83 c0 2c             	add    eax,0x2c
c000d8eb:	8a 00                	mov    al,BYTE PTR [eax]
c000d8ed:	25 ff 00 00 00       	and    eax,0xff
c000d8f2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d8f6:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d8f9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d8fd:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000d901:	81 e2 ff 00 00 00    	and    edx,0xff
c000d907:	c1 e2 08             	shl    edx,0x8
c000d90a:	09 d0                	or     eax,edx
c000d90c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000d911:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000d916:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000d91a:	25 ff 00 00 00       	and    eax,0xff
c000d91f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d923:	88 90 c0 eb 01 c0    	mov    BYTE PTR [eax-0x3ffe1440],dl
c000d929:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000d92d:	31 d2                	xor    edx,edx
c000d92f:	88 c2                	mov    dl,al
c000d931:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000d936:	66 89 84 12 a0 1a 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffde560],ax
c000d93e:	e9 b9 00 00 00       	jmp    c000d9fc <scanMADT()+0x4ac>
c000d943:	90                   	nop
c000d944:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000d949:	0f 85 a1 00 00 00    	jne    c000d9f0 <scanMADT()+0x4a0>
c000d94f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d953:	8d 50 01             	lea    edx,[eax+0x1]
c000d956:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d95a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d95e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d962:	25 ff 00 00 00       	and    eax,0xff
c000d967:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d96b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d96f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d973:	01 d0                	add    eax,edx
c000d975:	83 c0 2c             	add    eax,0x2c
c000d978:	8a 00                	mov    al,BYTE PTR [eax]
c000d97a:	31 d2                	xor    edx,edx
c000d97c:	88 c2                	mov    dl,al
c000d97e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d982:	8d 48 01             	lea    ecx,[eax+0x1]
c000d985:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d989:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d98d:	25 ff 00 00 00       	and    eax,0xff
c000d992:	c1 e0 08             	shl    eax,0x8
c000d995:	09 d0                	or     eax,edx
c000d997:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d99b:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000d9a0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d9a4:	8d 50 01             	lea    edx,[eax+0x1]
c000d9a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9ab:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d9af:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d9b3:	25 ff 00 00 00       	and    eax,0xff
c000d9b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d9bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9c0:	c1 e0 08             	shl    eax,0x8
c000d9c3:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d9c7:	89 c1                	mov    ecx,eax
c000d9c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d9cd:	c1 e0 18             	shl    eax,0x18
c000d9d0:	89 c3                	mov    ebx,eax
c000d9d2:	a1 10 1a 02 c0       	mov    eax,ds:0xc0021a10
c000d9d7:	8d 50 01             	lea    edx,[eax+0x1]
c000d9da:	89 15 10 1a 02 c0    	mov    DWORD PTR ds:0xc0021a10,edx
c000d9e0:	09 d9                	or     ecx,ebx
c000d9e2:	89 ca                	mov    edx,ecx
c000d9e4:	89 14 85 20 1a 02 c0 	mov    DWORD PTR [eax*4-0x3ffde5e0],edx
c000d9eb:	eb 0f                	jmp    c000d9fc <scanMADT()+0x4ac>
c000d9ed:	8d 76 00             	lea    esi,[esi+0x0]
c000d9f0:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000d9f5:	75 05                	jne    c000d9fc <scanMADT()+0x4ac>
c000d9f7:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000d9fc:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000da00:	31 d2                	xor    edx,edx
c000da02:	88 c2                	mov    dl,al
c000da04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000da08:	01 d0                	add    eax,edx
c000da0a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000da0e:	e9 31 fc ff ff       	jmp    c000d644 <scanMADT()+0xf4>
c000da13:	90                   	nop
c000da14:	90                   	nop
c000da15:	eb 05                	jmp    c000da1c <scanMADT()+0x4cc>
c000da17:	90                   	nop
c000da18:	90                   	nop
c000da19:	8d 76 00             	lea    esi,[esi+0x0]
c000da1c:	83 c4 38             	add    esp,0x38
c000da1f:	5b                   	pop    ebx
c000da20:	c3                   	ret    
c000da21:	90                   	nop
c000da22:	66 90                	xchg   ax,ax

c000da24 <ACPI::ACPI()>:
c000da24:	83 ec 0c             	sub    esp,0xc
c000da27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da2b:	83 ec 08             	sub    esp,0x8
c000da2e:	68 4d d7 01 c0       	push   0xc001d74d
c000da33:	50                   	push   eax
c000da34:	e8 4b d4 ff ff       	call   c000ae84 <Device::Device(char const*)>
c000da39:	83 c4 10             	add    esp,0x10
c000da3c:	ba 84 d8 01 c0       	mov    edx,0xc001d884
c000da41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da45:	89 10                	mov    DWORD PTR [eax],edx
c000da47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da4b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000da52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da56:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000da60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da64:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000da6e:	e8 dd fa ff ff       	call   c000d550 <scanMADT()>
c000da73:	90                   	nop
c000da74:	83 c4 0c             	add    esp,0xc
c000da77:	c3                   	ret    

c000da78 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000da78:	83 ec 2c             	sub    esp,0x2c
c000da7b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000da7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000da83:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000da87:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000da8b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000da90:	88 d0                	mov    al,dl
c000da92:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000da96:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000da9b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000daa3:	90                   	nop
c000daa4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000daa8:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000daae:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000dab2:	0f 8d 9c 00 00 00    	jge    c000db54 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000dab8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dabc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000dac0:	83 c2 2a             	add    edx,0x2a
c000dac3:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000dac7:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000dacc:	75 7a                	jne    c000db48 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000dace:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dad2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000dad6:	83 c2 2a             	add    edx,0x2a
c000dad9:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000dadd:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000dae1:	75 65                	jne    c000db48 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000dae3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000dae8:	74 3a                	je     c000db24 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000daea:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000daee:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000daf2:	83 c2 2a             	add    edx,0x2a
c000daf5:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000daf9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dafd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db00:	39 c2                	cmp    edx,eax
c000db02:	74 10                	je     c000db14 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000db04:	83 ec 0c             	sub    esp,0xc
c000db07:	68 c8 d6 01 c0       	push   0xc001d6c8
c000db0c:	e8 ea 18 00 00       	call   c000f3fb <Krnl::panic(char const*)>
c000db11:	83 c4 10             	add    esp,0x10
c000db14:	83 ec 0c             	sub    esp,0xc
c000db17:	68 52 d7 01 c0       	push   0xc001d752
c000db1c:	e8 da 18 00 00       	call   c000f3fb <Krnl::panic(char const*)>
c000db21:	83 c4 10             	add    esp,0x10
c000db24:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000db28:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db2c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000db30:	83 c2 2a             	add    edx,0x2a
c000db33:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000db37:	8b 02                	mov    eax,DWORD PTR [edx]
c000db39:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000db3c:	89 01                	mov    DWORD PTR [ecx],eax
c000db3e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000db41:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000db46:	66 90                	xchg   ax,ax
c000db48:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000db4c:	e9 53 ff ff ff       	jmp    c000daa4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000db51:	8d 76 00             	lea    esi,[esi+0x0]
c000db54:	90                   	nop
c000db55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000db59:	83 c4 2c             	add    esp,0x2c
c000db5c:	c2 04 00             	ret    0x4
c000db5f:	90                   	nop

c000db60 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000db60:	83 ec 1c             	sub    esp,0x1c
c000db63:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000db67:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000db6b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000db6f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000db74:	88 c8                	mov    al,cl
c000db76:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000db7a:	88 d0                	mov    al,dl
c000db7c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000db80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db84:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000db8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db8e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000db91:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000db95:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000db99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db9d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000dba3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dba7:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000dbaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dbae:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000dbb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbb7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000dbbd:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000dbc1:	8d 48 01             	lea    ecx,[eax+0x1]
c000dbc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbc8:	83 c2 2a             	add    edx,0x2a
c000dbcb:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000dbcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbd3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000dbd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbdd:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000dbe0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000dbe4:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000dbe8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbec:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000dbf2:	8d 50 01             	lea    edx,[eax+0x1]
c000dbf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbf9:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000dbff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc03:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000dc09:	3d 00 02 00 00       	cmp    eax,0x200
c000dc0e:	75 10                	jne    c000dc20 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000dc10:	83 ec 0c             	sub    esp,0xc
c000dc13:	68 61 d7 01 c0       	push   0xc001d761
c000dc18:	e8 de 17 00 00       	call   c000f3fb <Krnl::panic(char const*)>
c000dc1d:	83 c4 10             	add    esp,0x10
c000dc20:	90                   	nop
c000dc21:	83 c4 1c             	add    esp,0x1c
c000dc24:	c3                   	ret    
c000dc25:	90                   	nop
c000dc26:	66 90                	xchg   ax,ax

c000dc28 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000dc28:	b8 00 00 00 00       	mov    eax,0x0
c000dc2d:	c3                   	ret    
c000dc2e:	66 90                	xchg   ax,ax

c000dc30 <ACPI::detectPCI()>:
c000dc30:	53                   	push   ebx
c000dc31:	83 ec 28             	sub    esp,0x28
c000dc34:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000dc39:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000dc3e:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c000dc43:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dc49:	83 e0 04             	and    eax,0x4
c000dc4c:	84 c0                	test   al,al
c000dc4e:	74 2c                	je     c000dc7c <ACPI::detectPCI()+0x4c>
c000dc50:	a1 08 1a 02 c0       	mov    eax,ds:0xc0021a08
c000dc55:	83 ec 08             	sub    esp,0x8
c000dc58:	68 7e d7 01 c0       	push   0xc001d77e
c000dc5d:	50                   	push   eax
c000dc5e:	e8 75 f8 ff ff       	call   c000d4d8 <findDataTable(unsigned char*, char*)>
c000dc63:	83 c4 10             	add    esp,0x10
c000dc66:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc6a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000dc6f:	74 0b                	je     c000dc7c <ACPI::detectPCI()+0x4c>
c000dc71:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000dc76:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000dc7b:	90                   	nop
c000dc7c:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000dc84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dc88:	8a 00                	mov    al,BYTE PTR [eax]
c000dc8a:	3c 01                	cmp    al,0x1
c000dc8c:	75 0e                	jne    c000dc9c <ACPI::detectPCI()+0x6c>
c000dc8e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000dc93:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000dc98:	eb 2a                	jmp    c000dcc4 <ACPI::detectPCI()+0x94>
c000dc9a:	66 90                	xchg   ax,ax
c000dc9c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dca0:	8a 00                	mov    al,BYTE PTR [eax]
c000dca2:	3c 02                	cmp    al,0x2
c000dca4:	75 1e                	jne    c000dcc4 <ACPI::detectPCI()+0x94>
c000dca6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000dcab:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000dcb0:	74 12                	je     c000dcc4 <ACPI::detectPCI()+0x94>
c000dcb2:	83 ec 0c             	sub    esp,0xc
c000dcb5:	68 f8 d6 01 c0       	push   0xc001d6f8
c000dcba:	e8 3c 17 00 00       	call   c000f3fb <Krnl::panic(char const*)>
c000dcbf:	83 c4 10             	add    esp,0x10
c000dcc2:	66 90                	xchg   ax,ax
c000dcc4:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000dcc8:	83 f0 01             	xor    eax,0x1
c000dccb:	84 c0                	test   al,al
c000dccd:	74 41                	je     c000dd10 <ACPI::detectPCI()+0xe0>
c000dccf:	e8 7c 24 ff ff       	call   c0000150 <manualPCIProbe>
c000dcd4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dcd8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000dcdd:	75 0d                	jne    c000dcec <ACPI::detectPCI()+0xbc>
c000dcdf:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000dce4:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000dce9:	eb 25                	jmp    c000dd10 <ACPI::detectPCI()+0xe0>
c000dceb:	90                   	nop
c000dcec:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000dcf1:	75 1d                	jne    c000dd10 <ACPI::detectPCI()+0xe0>
c000dcf3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000dcf8:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000dcfd:	74 11                	je     c000dd10 <ACPI::detectPCI()+0xe0>
c000dcff:	83 ec 0c             	sub    esp,0xc
c000dd02:	68 f8 d6 01 c0       	push   0xc001d6f8
c000dd07:	e8 ef 16 00 00       	call   c000f3fb <Krnl::panic(char const*)>
c000dd0c:	83 c4 10             	add    esp,0x10
c000dd0f:	90                   	nop
c000dd10:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000dd15:	0f 84 85 00 00 00    	je     c000dda0 <ACPI::detectPCI()+0x170>
c000dd1b:	83 ec 0c             	sub    esp,0xc
c000dd1e:	68 83 d7 01 c0       	push   0xc001d783
c000dd23:	e8 4f 8e ff ff       	call   c0006b77 <Krnl::setBootMessage(char const*)>
c000dd28:	83 c4 10             	add    esp,0x10
c000dd2b:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000dd33:	83 ec 0c             	sub    esp,0xc
c000dd36:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dd3a:	e8 de 8d ff ff       	call   c0006b1d <malloc>
c000dd3f:	83 c4 10             	add    esp,0x10
c000dd42:	89 c3                	mov    ebx,eax
c000dd44:	83 ec 0c             	sub    esp,0xc
c000dd47:	53                   	push   ebx
c000dd48:	e8 11 9b 00 00       	call   c001785e <PCI::PCI()>
c000dd4d:	83 c4 10             	add    esp,0x10
c000dd50:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000dd54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dd58:	83 ec 08             	sub    esp,0x8
c000dd5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd5f:	50                   	push   eax
c000dd60:	e8 87 cf ff ff       	call   c000acec <Device::addChild(Device*)>
c000dd65:	83 c4 10             	add    esp,0x10
c000dd68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dd6c:	8b 00                	mov    eax,DWORD PTR [eax]
c000dd6e:	83 c0 08             	add    eax,0x8
c000dd71:	8b 00                	mov    eax,DWORD PTR [eax]
c000dd73:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000dd78:	74 0a                	je     c000dd84 <ACPI::detectPCI()+0x154>
c000dd7a:	ba 01 00 00 00       	mov    edx,0x1
c000dd7f:	eb 0b                	jmp    c000dd8c <ACPI::detectPCI()+0x15c>
c000dd81:	8d 76 00             	lea    esi,[esi+0x0]
c000dd84:	ba 02 00 00 00       	mov    edx,0x2
c000dd89:	8d 76 00             	lea    esi,[esi+0x0]
c000dd8c:	6a 00                	push   0x0
c000dd8e:	6a 00                	push   0x0
c000dd90:	52                   	push   edx
c000dd91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dd95:	ff d0                	call   eax
c000dd97:	83 c4 10             	add    esp,0x10
c000dd9a:	e9 91 00 00 00       	jmp    c000de30 <ACPI::detectPCI()+0x200>
c000dd9f:	90                   	nop
c000dda0:	83 ec 0c             	sub    esp,0xc
c000dda3:	68 9b d7 01 c0       	push   0xc001d79b
c000dda8:	e8 ca 8d ff ff       	call   c0006b77 <Krnl::setBootMessage(char const*)>
c000ddad:	83 c4 10             	add    esp,0x10
c000ddb0:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000ddb7:	83 ec 0c             	sub    esp,0xc
c000ddba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ddbe:	e8 5a 8d ff ff       	call   c0006b1d <malloc>
c000ddc3:	83 c4 10             	add    esp,0x10
c000ddc6:	89 c3                	mov    ebx,eax
c000ddc8:	83 ec 0c             	sub    esp,0xc
c000ddcb:	53                   	push   ebx
c000ddcc:	e8 b9 a5 00 00       	call   c001838a <IDE::IDE()>
c000ddd1:	83 c4 10             	add    esp,0x10
c000ddd4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000ddd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dddc:	83 ec 08             	sub    esp,0x8
c000dddf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dde3:	50                   	push   eax
c000dde4:	e8 03 cf ff ff       	call   c000acec <Device::addChild(Device*)>
c000dde9:	83 c4 10             	add    esp,0x10
c000ddec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ddf0:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000ddfa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ddfe:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000de07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000de0b:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000de14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000de18:	8b 00                	mov    eax,DWORD PTR [eax]
c000de1a:	83 c0 08             	add    eax,0x8
c000de1d:	8b 00                	mov    eax,DWORD PTR [eax]
c000de1f:	6a 00                	push   0x0
c000de21:	6a 00                	push   0x0
c000de23:	6a 00                	push   0x0
c000de25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de29:	ff d0                	call   eax
c000de2b:	83 c4 10             	add    esp,0x10
c000de2e:	66 90                	xchg   ax,ax
c000de30:	90                   	nop
c000de31:	83 c4 28             	add    esp,0x28
c000de34:	5b                   	pop    ebx
c000de35:	c3                   	ret    
c000de36:	66 90                	xchg   ax,ax

c000de38 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000de38:	83 ec 1c             	sub    esp,0x1c
c000de3b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000de3f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000de42:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000de46:	8b 15 08 f2 01 c0    	mov    edx,DWORD PTR ds:0xc001f208
c000de4c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000de50:	25 ff 00 00 00       	and    eax,0xff
c000de55:	83 ec 08             	sub    esp,0x8
c000de58:	50                   	push   eax
c000de59:	52                   	push   edx
c000de5a:	e8 af 83 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c000de5f:	83 c4 10             	add    esp,0x10
c000de62:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000de66:	8b 15 08 f2 01 c0    	mov    edx,DWORD PTR ds:0xc001f208
c000de6c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000de70:	25 ff 00 00 00       	and    eax,0xff
c000de75:	83 ec 04             	sub    esp,0x4
c000de78:	6a 01                	push   0x1
c000de7a:	50                   	push   eax
c000de7b:	52                   	push   edx
c000de7c:	e8 a3 84 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c000de81:	83 c4 10             	add    esp,0x10
c000de84:	90                   	nop
c000de85:	83 c4 1c             	add    esp,0x1c
c000de88:	c3                   	ret    
c000de89:	90                   	nop
c000de8a:	66 90                	xchg   ax,ax

c000de8c <ACPI::sleep()>:
c000de8c:	83 ec 0c             	sub    esp,0xc
c000de8f:	a1 e0 17 02 c0       	mov    eax,ds:0xc00217e0
c000de94:	85 c0                	test   eax,eax
c000de96:	74 08                	je     c000dea0 <ACPI::sleep()+0x14>
c000de98:	a1 e0 17 02 c0       	mov    eax,ds:0xc00217e0
c000de9d:	ff d0                	call   eax
c000de9f:	90                   	nop
c000dea0:	90                   	nop
c000dea1:	83 c4 0c             	add    esp,0xc
c000dea4:	c3                   	ret    
c000dea5:	90                   	nop
c000dea6:	66 90                	xchg   ax,ax

c000dea8 <ACPI::open(int, int, void*)>:
c000dea8:	57                   	push   edi
c000dea9:	56                   	push   esi
c000deaa:	53                   	push   ebx
c000deab:	81 ec 70 01 00 00    	sub    esp,0x170
c000deb1:	83 ec 0c             	sub    esp,0xc
c000deb4:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000debb:	e8 70 fd ff ff       	call   c000dc30 <ACPI::detectPCI()>
c000dec0:	83 c4 10             	add    esp,0x10
c000dec3:	83 ec 0c             	sub    esp,0xc
c000dec6:	68 20 d7 01 c0       	push   0xc001d720
c000decb:	e8 a7 8c ff ff       	call   c0006b77 <Krnl::setBootMessage(char const*)>
c000ded0:	83 c4 10             	add    esp,0x10
c000ded3:	83 ec 0c             	sub    esp,0xc
c000ded6:	68 b0 d7 01 c0       	push   0xc001d7b0
c000dedb:	e8 07 34 00 00       	call   c00112e7 <Thr::loadKernelSymbolTable(char const*)>
c000dee0:	83 c4 10             	add    esp,0x10
c000dee3:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000deeb:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000def6:	83 ec 0c             	sub    esp,0xc
c000def9:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000df00:	e8 18 8c ff ff       	call   c0006b1d <malloc>
c000df05:	83 c4 10             	add    esp,0x10
c000df08:	89 c3                	mov    ebx,eax
c000df0a:	a1 f0 26 02 c0       	mov    eax,ds:0xc00226f0
c000df0f:	83 ec 04             	sub    esp,0x4
c000df12:	50                   	push   eax
c000df13:	68 ce d7 01 c0       	push   0xc001d7ce
c000df18:	53                   	push   ebx
c000df19:	e8 04 bf ff ff       	call   c0009e22 <File::File(char const*, Process*)>
c000df1e:	83 c4 10             	add    esp,0x10
c000df21:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000df28:	83 ec 08             	sub    esp,0x8
c000df2b:	6a 01                	push   0x1
c000df2d:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000df34:	e8 a9 bf ff ff       	call   c0009ee2 <File::open(FileOpenMode)>
c000df39:	83 c4 10             	add    esp,0x10
c000df3c:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000df43:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000df4b:	75 17                	jne    c000df64 <ACPI::open(int, int, void*)+0xbc>
c000df4d:	83 ec 0c             	sub    esp,0xc
c000df50:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000df57:	e8 e4 bf ff ff       	call   c0009f40 <File::close()>
c000df5c:	83 c4 10             	add    esp,0x10
c000df5f:	eb 0b                	jmp    c000df6c <ACPI::open(int, int, void*)+0xc4>
c000df61:	8d 76 00             	lea    esi,[esi+0x0]
c000df64:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000df6c:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000df74:	74 1e                	je     c000df94 <ACPI::open(int, int, void*)+0xec>
c000df76:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000df7d:	8b 00                	mov    eax,DWORD PTR [eax]
c000df7f:	83 c0 08             	add    eax,0x8
c000df82:	8b 00                	mov    eax,DWORD PTR [eax]
c000df84:	83 ec 0c             	sub    esp,0xc
c000df87:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000df8e:	ff d0                	call   eax
c000df90:	83 c4 10             	add    esp,0x10
c000df93:	90                   	nop
c000df94:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000df9b:	83 f0 01             	xor    eax,0x1
c000df9e:	84 c0                	test   al,al
c000dfa0:	74 42                	je     c000dfe4 <ACPI::open(int, int, void*)+0x13c>
c000dfa2:	83 ec 0c             	sub    esp,0xc
c000dfa5:	68 ec d7 01 c0       	push   0xc001d7ec
c000dfaa:	e8 c8 8b ff ff       	call   c0006b77 <Krnl::setBootMessage(char const*)>
c000dfaf:	83 c4 10             	add    esp,0x10
c000dfb2:	83 ec 04             	sub    esp,0x4
c000dfb5:	6a 0c                	push   0xc
c000dfb7:	68 07 d8 01 c0       	push   0xc001d807
c000dfbc:	68 18 d8 01 c0       	push   0xc001d818
c000dfc1:	e8 20 1b 00 00       	call   c000fae6 <Reg::readIntWithDefault(char*, char*, int)>
c000dfc6:	83 c4 10             	add    esp,0x10
c000dfc9:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000dfd0:	83 ec 0c             	sub    esp,0xc
c000dfd3:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000dfda:	e8 84 a8 ff ff       	call   c0008863 <Virt::setupPageSwapping(int)>
c000dfdf:	83 c4 10             	add    esp,0x10
c000dfe2:	66 90                	xchg   ax,ax
c000dfe4:	83 ec 0c             	sub    esp,0xc
c000dfe7:	68 8f c8 01 c0       	push   0xc001c88f
c000dfec:	e8 86 8b ff ff       	call   c0006b77 <Krnl::setBootMessage(char const*)>
c000dff1:	83 c4 10             	add    esp,0x10
c000dff4:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000dffb:	83 ec 08             	sub    esp,0x8
c000dffe:	6a 12                	push   0x12
c000e000:	50                   	push   eax
c000e001:	e8 fe cf ff ff       	call   c000b004 <getDevicesOfType(DeviceType)>
c000e006:	83 c4 0c             	add    esp,0xc
c000e009:	8d 76 00             	lea    esi,[esi+0x0]
c000e00c:	83 ec 0c             	sub    esp,0xc
c000e00f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000e016:	50                   	push   eax
c000e017:	e8 80 dc 00 00       	call   c001bc9c <LinkedList<Device>::isEmpty()>
c000e01c:	83 c4 10             	add    esp,0x10
c000e01f:	83 f0 01             	xor    eax,0x1
c000e022:	84 c0                	test   al,al
c000e024:	0f 84 46 01 00 00    	je     c000e170 <ACPI::open(int, int, void*)+0x2c8>
c000e02a:	83 ec 0c             	sub    esp,0xc
c000e02d:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000e034:	50                   	push   eax
c000e035:	e8 7e dc 00 00       	call   c001bcb8 <LinkedList<Device>::getFirstElement()>
c000e03a:	83 c4 10             	add    esp,0x10
c000e03d:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000e044:	83 ec 0c             	sub    esp,0xc
c000e047:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000e04e:	50                   	push   eax
c000e04f:	e8 6c dc 00 00       	call   c001bcc0 <LinkedList<Device>::removeFirst()>
c000e054:	83 c4 10             	add    esp,0x10
c000e057:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000e05e:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000e065:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000e06c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e070:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000e076:	ba 09 00 00 00       	mov    edx,0x9
c000e07b:	fc                   	cld    
c000e07c:	89 c7                	mov    edi,eax
c000e07e:	89 de                	mov    esi,ebx
c000e080:	89 d1                	mov    ecx,edx
c000e082:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e084:	83 ec 08             	sub    esp,0x8
c000e087:	8d 44 24 38          	lea    eax,[esp+0x38]
c000e08b:	50                   	push   eax
c000e08c:	83 ec 24             	sub    esp,0x24
c000e08f:	89 e0                	mov    eax,esp
c000e091:	89 c3                	mov    ebx,eax
c000e093:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000e097:	ba 09 00 00 00       	mov    edx,0x9
c000e09c:	89 df                	mov    edi,ebx
c000e09e:	89 c6                	mov    esi,eax
c000e0a0:	89 d1                	mov    ecx,edx
c000e0a2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e0a4:	e8 97 9c 00 00       	call   c0017d40 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000e0a9:	83 c4 30             	add    esp,0x30
c000e0ac:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000e0b3:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000e0bb:	0f 84 4b ff ff ff    	je     c000e00c <ACPI::open(int, int, void*)+0x164>
c000e0c1:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000e0cc:	83 ec 0c             	sub    esp,0xc
c000e0cf:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000e0d6:	e8 42 8a ff ff       	call   c0006b1d <malloc>
c000e0db:	83 c4 10             	add    esp,0x10
c000e0de:	89 c3                	mov    ebx,eax
c000e0e0:	a1 f0 26 02 c0       	mov    eax,ds:0xc00226f0
c000e0e5:	83 ec 04             	sub    esp,0x4
c000e0e8:	50                   	push   eax
c000e0e9:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000e0f0:	53                   	push   ebx
c000e0f1:	e8 2c bd ff ff       	call   c0009e22 <File::File(char const*, Process*)>
c000e0f6:	83 c4 10             	add    esp,0x10
c000e0f9:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000e100:	83 ec 0c             	sub    esp,0xc
c000e103:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000e10a:	e8 41 c0 ff ff       	call   c000a150 <File::exists()>
c000e10f:	83 c4 10             	add    esp,0x10
c000e112:	84 c0                	test   al,al
c000e114:	74 2a                	je     c000e140 <ACPI::open(int, int, void*)+0x298>
c000e116:	83 ec 08             	sub    esp,0x8
c000e119:	6a 01                	push   0x1
c000e11b:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000e122:	e8 37 3c 00 00       	call   c0011d5e <Thr::loadDLL(char const*, bool)>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	83 ec 08             	sub    esp,0x8
c000e12d:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000e134:	50                   	push   eax
c000e135:	e8 55 3e 00 00       	call   c0011f8f <Thr::executeDLL(unsigned long, void*)>
c000e13a:	83 c4 10             	add    esp,0x10
c000e13d:	8d 76 00             	lea    esi,[esi+0x0]
c000e140:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000e148:	0f 84 be fe ff ff    	je     c000e00c <ACPI::open(int, int, void*)+0x164>
c000e14e:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000e155:	8b 00                	mov    eax,DWORD PTR [eax]
c000e157:	83 c0 08             	add    eax,0x8
c000e15a:	8b 00                	mov    eax,DWORD PTR [eax]
c000e15c:	83 ec 0c             	sub    esp,0xc
c000e15f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000e166:	ff d0                	call   eax
c000e168:	83 c4 10             	add    esp,0x10
c000e16b:	e9 9c fe ff ff       	jmp    c000e00c <ACPI::open(int, int, void*)+0x164>
c000e170:	83 ec 0c             	sub    esp,0xc
c000e173:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000e17a:	50                   	push   eax
c000e17b:	e8 18 db 00 00       	call   c001bc98 <LinkedList<Device>::~LinkedList()>
c000e180:	83 c4 10             	add    esp,0x10
c000e183:	8b 1d 08 f2 01 c0    	mov    ebx,DWORD PTR ds:0xc001f208
c000e189:	83 ec 08             	sub    esp,0x8
c000e18c:	6a 01                	push   0x1
c000e18e:	68 1f d8 01 c0       	push   0xc001d81f
c000e193:	e8 c6 3b 00 00       	call   c0011d5e <Thr::loadDLL(char const*, bool)>
c000e198:	83 c4 10             	add    esp,0x10
c000e19b:	83 ec 08             	sub    esp,0x8
c000e19e:	53                   	push   ebx
c000e19f:	50                   	push   eax
c000e1a0:	e8 ea 3d 00 00       	call   c0011f8f <Thr::executeDLL(unsigned long, void*)>
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c000e1ad:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e1b3:	83 e0 04             	and    eax,0x4
c000e1b6:	84 c0                	test   al,al
c000e1b8:	0f 84 16 01 00 00    	je     c000e2d4 <ACPI::open(int, int, void*)+0x42c>
c000e1be:	83 ec 0c             	sub    esp,0xc
c000e1c1:	68 3c d8 01 c0       	push   0xc001d83c
c000e1c6:	e8 ac 89 ff ff       	call   c0006b77 <Krnl::setBootMessage(char const*)>
c000e1cb:	83 c4 10             	add    esp,0x10
c000e1ce:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000e1d9:	83 ec 0c             	sub    esp,0xc
c000e1dc:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000e1e3:	e8 35 89 ff ff       	call   c0006b1d <malloc>
c000e1e8:	83 c4 10             	add    esp,0x10
c000e1eb:	89 c3                	mov    ebx,eax
c000e1ed:	a1 f0 26 02 c0       	mov    eax,ds:0xc00226f0
c000e1f2:	83 ec 04             	sub    esp,0x4
c000e1f5:	50                   	push   eax
c000e1f6:	68 59 d8 01 c0       	push   0xc001d859
c000e1fb:	53                   	push   ebx
c000e1fc:	e8 21 bc ff ff       	call   c0009e22 <File::File(char const*, Process*)>
c000e201:	83 c4 10             	add    esp,0x10
c000e204:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000e20b:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000e213:	74 1b                	je     c000e230 <ACPI::open(int, int, void*)+0x388>
c000e215:	83 ec 0c             	sub    esp,0xc
c000e218:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000e21f:	e8 2c bf ff ff       	call   c000a150 <File::exists()>
c000e224:	83 c4 10             	add    esp,0x10
c000e227:	84 c0                	test   al,al
c000e229:	74 05                	je     c000e230 <ACPI::open(int, int, void*)+0x388>
c000e22b:	b0 01                	mov    al,0x1
c000e22d:	eb 05                	jmp    c000e234 <ACPI::open(int, int, void*)+0x38c>
c000e22f:	90                   	nop
c000e230:	b0 00                	mov    al,0x0
c000e232:	66 90                	xchg   ax,ax
c000e234:	84 c0                	test   al,al
c000e236:	74 28                	je     c000e260 <ACPI::open(int, int, void*)+0x3b8>
c000e238:	83 ec 08             	sub    esp,0x8
c000e23b:	6a 01                	push   0x1
c000e23d:	68 59 d8 01 c0       	push   0xc001d859
c000e242:	e8 17 3b 00 00       	call   c0011d5e <Thr::loadDLL(char const*, bool)>
c000e247:	83 c4 10             	add    esp,0x10
c000e24a:	83 ec 08             	sub    esp,0x8
c000e24d:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000e254:	50                   	push   eax
c000e255:	e8 35 3d 00 00       	call   c0011f8f <Thr::executeDLL(unsigned long, void*)>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	8d 76 00             	lea    esi,[esi+0x0]
c000e260:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000e268:	74 2a                	je     c000e294 <ACPI::open(int, int, void*)+0x3ec>
c000e26a:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000e272:	74 20                	je     c000e294 <ACPI::open(int, int, void*)+0x3ec>
c000e274:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000e27b:	8b 00                	mov    eax,DWORD PTR [eax]
c000e27d:	83 c0 08             	add    eax,0x8
c000e280:	8b 00                	mov    eax,DWORD PTR [eax]
c000e282:	83 ec 0c             	sub    esp,0xc
c000e285:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000e28c:	ff d0                	call   eax
c000e28e:	83 c4 10             	add    esp,0x10
c000e291:	8d 76 00             	lea    esi,[esi+0x0]
c000e294:	a1 08 1a 02 c0       	mov    eax,ds:0xc0021a08
c000e299:	83 ec 08             	sub    esp,0x8
c000e29c:	68 76 d8 01 c0       	push   0xc001d876
c000e2a1:	50                   	push   eax
c000e2a2:	e8 31 f2 ff ff       	call   c000d4d8 <findDataTable(unsigned char*, char*)>
c000e2a7:	83 c4 10             	add    esp,0x10
c000e2aa:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000e2b1:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000e2b9:	74 19                	je     c000e2d4 <ACPI::open(int, int, void*)+0x42c>
c000e2bb:	83 ec 08             	sub    esp,0x8
c000e2be:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000e2c5:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000e2cc:	e8 67 fb ff ff       	call   c000de38 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000e2d1:	83 c4 10             	add    esp,0x10
c000e2d4:	b8 00 00 00 00       	mov    eax,0x0
c000e2d9:	81 c4 70 01 00 00    	add    esp,0x170
c000e2df:	5b                   	pop    ebx
c000e2e0:	5e                   	pop    esi
c000e2e1:	5f                   	pop    edi
c000e2e2:	c3                   	ret    
c000e2e3:	90                   	nop

c000e2e4 <CPU::close(int, int, void*)>:
c000e2e4:	31 c0                	xor    eax,eax
c000e2e6:	c3                   	ret    
c000e2e7:	90                   	nop

c000e2e8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000e2e8:	60                   	pusha  
c000e2e9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e2ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e2f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e2f5:	9c                   	pushf  
c000e2f6:	fa                   	cli    
c000e2f7:	0f 09                	wbinvd 
c000e2f9:	0f 30                	wrmsr  
c000e2fb:	9d                   	popf   
c000e2fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e300:	89 02                	mov    DWORD PTR [edx],eax
c000e302:	61                   	popa   
c000e303:	c3                   	ret    

c000e304 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000e304:	60                   	pusha  
c000e305:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e309:	9c                   	pushf  
c000e30a:	fa                   	cli    
c000e30b:	0f 09                	wbinvd 
c000e30d:	31 c0                	xor    eax,eax
c000e30f:	31 d2                	xor    edx,edx
c000e311:	0f 32                	rdmsr  
c000e313:	9d                   	popf   
c000e314:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e318:	89 02                	mov    DWORD PTR [edx],eax
c000e31a:	61                   	popa   
c000e31b:	c3                   	ret    

c000e31c <CPU::AMD_K6_writeback(int, int, int)>:
c000e31c:	56                   	push   esi
c000e31d:	53                   	push   ebx
c000e31e:	83 ec 10             	sub    esp,0x10
c000e321:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e325:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000e32a:	75 5d                	jne    c000e389 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000e32c:	83 f8 08             	cmp    eax,0x8
c000e32f:	75 09                	jne    c000e33a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000e331:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000e336:	7e 13                	jle    c000e34b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000e338:	eb 30                	jmp    c000e36a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000e33a:	83 f8 06             	cmp    eax,0x6
c000e33d:	7c 4a                	jl     c000e389 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000e33f:	83 f8 07             	cmp    eax,0x7
c000e342:	7e 07                	jle    c000e34b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000e344:	83 f8 09             	cmp    eax,0x9
c000e347:	74 21                	je     c000e36a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000e349:	eb 3e                	jmp    c000e389 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000e34b:	89 e6                	mov    esi,esp
c000e34d:	8b 1d 2c f2 01 c0    	mov    ebx,DWORD PTR ds:0xc001f22c
c000e353:	56                   	push   esi
c000e354:	c1 eb 15             	shr    ebx,0x15
c000e357:	68 82 00 00 c0       	push   0xc0000082
c000e35c:	83 e3 7e             	and    ebx,0x7e
c000e35f:	e8 a0 ff ff ff       	call   c000e304 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000e364:	56                   	push   esi
c000e365:	6a 00                	push   0x0
c000e367:	53                   	push   ebx
c000e368:	eb 12                	jmp    c000e37c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000e36a:	89 e3                	mov    ebx,esp
c000e36c:	53                   	push   ebx
c000e36d:	68 82 00 00 c0       	push   0xc0000082
c000e372:	e8 8d ff ff ff       	call   c000e304 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000e377:	53                   	push   ebx
c000e378:	6a 00                	push   0x0
c000e37a:	6a 00                	push   0x0
c000e37c:	68 82 00 00 c0       	push   0xc0000082
c000e381:	e8 62 ff ff ff       	call   c000e2e8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000e386:	83 c4 18             	add    esp,0x18
c000e389:	83 c4 10             	add    esp,0x10
c000e38c:	5b                   	pop    ebx
c000e38d:	5e                   	pop    esi
c000e38e:	c3                   	ret    
c000e38f:	90                   	nop

c000e390 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000e390:	55                   	push   ebp
c000e391:	57                   	push   edi
c000e392:	56                   	push   esi
c000e393:	53                   	push   ebx
c000e394:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e398:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e39c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e3a0:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000e3a4:	39 05 d0 eb 01 c0    	cmp    DWORD PTR ds:0xc001ebd0,eax
c000e3aa:	75 23                	jne    c000e3cf <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000e3ac:	a1 6c 1c 02 c0       	mov    eax,ds:0xc0021c6c
c000e3b1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e3b5:	89 06                	mov    DWORD PTR [esi],eax
c000e3b7:	a1 68 1c 02 c0       	mov    eax,ds:0xc0021c68
c000e3bc:	89 07                	mov    DWORD PTR [edi],eax
c000e3be:	a1 64 1c 02 c0       	mov    eax,ds:0xc0021c64
c000e3c3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e3c6:	a1 60 1c 02 c0       	mov    eax,ds:0xc0021c60
c000e3cb:	89 02                	mov    DWORD PTR [edx],eax
c000e3cd:	eb 3f                	jmp    c000e40e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000e3cf:	31 c9                	xor    ecx,ecx
c000e3d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e3d5:	0f a2                	cpuid  
c000e3d7:	89 06                	mov    DWORD PTR [esi],eax
c000e3d9:	89 1f                	mov    DWORD PTR [edi],ebx
c000e3db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e3df:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000e3e2:	89 10                	mov    DWORD PTR [eax],edx
c000e3e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e3e8:	a3 d0 eb 01 c0       	mov    ds:0xc001ebd0,eax
c000e3ed:	8b 06                	mov    eax,DWORD PTR [esi]
c000e3ef:	a3 6c 1c 02 c0       	mov    ds:0xc0021c6c,eax
c000e3f4:	8b 07                	mov    eax,DWORD PTR [edi]
c000e3f6:	a3 68 1c 02 c0       	mov    ds:0xc0021c68,eax
c000e3fb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e3fe:	a3 64 1c 02 c0       	mov    ds:0xc0021c64,eax
c000e403:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e407:	8b 00                	mov    eax,DWORD PTR [eax]
c000e409:	a3 60 1c 02 c0       	mov    ds:0xc0021c60,eax
c000e40e:	5b                   	pop    ebx
c000e40f:	5e                   	pop    esi
c000e410:	5f                   	pop    edi
c000e411:	5d                   	pop    ebp
c000e412:	c3                   	ret    
c000e413:	90                   	nop

c000e414 <CPU::cpuidCheckEDX(unsigned int)>:
c000e414:	83 ec 10             	sub    esp,0x10
c000e417:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e41b:	50                   	push   eax
c000e41c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e420:	50                   	push   eax
c000e421:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e425:	50                   	push   eax
c000e426:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e42a:	50                   	push   eax
c000e42b:	6a 01                	push   0x1
c000e42d:	e8 5e ff ff ff       	call   c000e390 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e432:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e436:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000e43a:	0f 95 c0             	setne  al
c000e43d:	83 c4 24             	add    esp,0x24
c000e440:	c3                   	ret    
c000e441:	90                   	nop

c000e442 <CPU::cpuidCheckECX(unsigned int)>:
c000e442:	83 ec 10             	sub    esp,0x10
c000e445:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e449:	50                   	push   eax
c000e44a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e44e:	50                   	push   eax
c000e44f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e453:	50                   	push   eax
c000e454:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e458:	50                   	push   eax
c000e459:	6a 01                	push   0x1
c000e45b:	e8 30 ff ff ff       	call   c000e390 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e460:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e464:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000e468:	0f 95 c0             	setne  al
c000e46b:	83 c4 24             	add    esp,0x24
c000e46e:	c3                   	ret    
c000e46f:	90                   	nop

c000e470 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000e470:	83 ec 10             	sub    esp,0x10
c000e473:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e477:	50                   	push   eax
c000e478:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e47c:	50                   	push   eax
c000e47d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e481:	50                   	push   eax
c000e482:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e486:	50                   	push   eax
c000e487:	6a 07                	push   0x7
c000e489:	e8 02 ff ff ff       	call   c000e390 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e48e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e492:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000e496:	0f 95 c0             	setne  al
c000e499:	83 c4 24             	add    esp,0x24
c000e49c:	c3                   	ret    
c000e49d:	90                   	nop

c000e49e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000e49e:	83 ec 10             	sub    esp,0x10
c000e4a1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e4a5:	50                   	push   eax
c000e4a6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e4aa:	50                   	push   eax
c000e4ab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e4af:	50                   	push   eax
c000e4b0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e4b4:	50                   	push   eax
c000e4b5:	6a 07                	push   0x7
c000e4b7:	e8 d4 fe ff ff       	call   c000e390 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e4bc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4c0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000e4c4:	0f 95 c0             	setne  al
c000e4c7:	83 c4 24             	add    esp,0x24
c000e4ca:	c3                   	ret    
c000e4cb:	90                   	nop

c000e4cc <CPU::CPU()>:
c000e4cc:	83 ec 0c             	sub    esp,0xc
c000e4cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4d3:	83 ec 08             	sub    esp,0x8
c000e4d6:	68 99 d9 01 c0       	push   0xc001d999
c000e4db:	50                   	push   eax
c000e4dc:	e8 a3 c9 ff ff       	call   c000ae84 <Device::Device(char const*)>
c000e4e1:	83 c4 10             	add    esp,0x10
c000e4e4:	ba 20 da 01 c0       	mov    edx,0xc001da20
c000e4e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4ed:	89 10                	mov    DWORD PTR [eax],edx
c000e4ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4f3:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000e4fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e501:	05 78 01 00 00       	add    eax,0x178
c000e506:	83 ec 0c             	sub    esp,0xc
c000e509:	50                   	push   eax
c000e50a:	e8 d3 7e ff ff       	call   c00063e2 <GDT::GDT()>
c000e50f:	83 c4 10             	add    esp,0x10
c000e512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e516:	05 7c 09 00 00       	add    eax,0x97c
c000e51b:	83 ec 0c             	sub    esp,0xc
c000e51e:	50                   	push   eax
c000e51f:	e8 f4 80 ff ff       	call   c0006618 <IDT::IDT()>
c000e524:	83 c4 10             	add    esp,0x10
c000e527:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e52b:	05 7c 11 00 00       	add    eax,0x117c
c000e530:	83 ec 0c             	sub    esp,0xc
c000e533:	50                   	push   eax
c000e534:	e8 63 9a ff ff       	call   c0007f9c <TSS::TSS()>
c000e539:	83 c4 10             	add    esp,0x10
c000e53c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e540:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000e547:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e54b:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000e555:	90                   	nop
c000e556:	83 c4 0c             	add    esp,0xc
c000e559:	c3                   	ret    

c000e55a <CPU::displayFeatures()>:
c000e55a:	c3                   	ret    
c000e55b:	90                   	nop

c000e55c <CPU::detectFeatures()>:
c000e55c:	55                   	push   ebp
c000e55d:	57                   	push   edi
c000e55e:	56                   	push   esi
c000e55f:	53                   	push   ebx
c000e560:	83 ec 30             	sub    esp,0x30
c000e563:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000e567:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000e571:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000e578:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000e57e:	6a 0d                	push   0xd
c000e580:	6a 00                	push   0x0
c000e582:	55                   	push   ebp
c000e583:	e8 68 1f ff ff       	call   c00004f0 <memset>
c000e588:	83 c4 10             	add    esp,0x10
c000e58b:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c000e590:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000e597:	0f 84 d5 05 00 00    	je     c000eb72 <CPU::detectFeatures()+0x616>
c000e59d:	83 ec 0c             	sub    esp,0xc
c000e5a0:	89 ef                	mov    edi,ebp
c000e5a2:	6a 10                	push   0x10
c000e5a4:	e8 6b fe ff ff       	call   c000e414 <CPU::cpuidCheckEDX(unsigned int)>
c000e5a9:	83 e0 01             	and    eax,0x1
c000e5ac:	8d 14 00             	lea    edx,[eax+eax*1]
c000e5af:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e5b5:	83 e0 fd             	and    eax,0xfffffffd
c000e5b8:	09 d0                	or     eax,edx
c000e5ba:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e5c0:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000e5c7:	e8 48 fe ff ff       	call   c000e414 <CPU::cpuidCheckEDX(unsigned int)>
c000e5cc:	83 e0 01             	and    eax,0x1
c000e5cf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e5d6:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e5dc:	83 e0 fb             	and    eax,0xfffffffb
c000e5df:	09 d0                	or     eax,edx
c000e5e1:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e5e7:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000e5ee:	e8 21 fe ff ff       	call   c000e414 <CPU::cpuidCheckEDX(unsigned int)>
c000e5f3:	83 e0 01             	and    eax,0x1
c000e5f6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e5fd:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e603:	83 e0 f7             	and    eax,0xfffffff7
c000e606:	09 d0                	or     eax,edx
c000e608:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e60e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000e615:	e8 fa fd ff ff       	call   c000e414 <CPU::cpuidCheckEDX(unsigned int)>
c000e61a:	83 e0 01             	and    eax,0x1
c000e61d:	c1 e0 04             	shl    eax,0x4
c000e620:	88 c2                	mov    dl,al
c000e622:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e628:	83 e0 ef             	and    eax,0xffffffef
c000e62b:	09 d0                	or     eax,edx
c000e62d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e633:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000e63a:	e8 d5 fd ff ff       	call   c000e414 <CPU::cpuidCheckEDX(unsigned int)>
c000e63f:	83 e0 01             	and    eax,0x1
c000e642:	c1 e0 05             	shl    eax,0x5
c000e645:	88 c2                	mov    dl,al
c000e647:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e64d:	83 e0 df             	and    eax,0xffffffdf
c000e650:	09 d0                	or     eax,edx
c000e652:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e658:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000e65f:	e8 b0 fd ff ff       	call   c000e414 <CPU::cpuidCheckEDX(unsigned int)>
c000e664:	83 e0 01             	and    eax,0x1
c000e667:	8d 14 00             	lea    edx,[eax+eax*1]
c000e66a:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000e670:	83 e0 fd             	and    eax,0xfffffffd
c000e673:	09 d0                	or     eax,edx
c000e675:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000e67b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000e682:	e8 8d fd ff ff       	call   c000e414 <CPU::cpuidCheckEDX(unsigned int)>
c000e687:	83 e0 01             	and    eax,0x1
c000e68a:	c1 e0 06             	shl    eax,0x6
c000e68d:	88 c2                	mov    dl,al
c000e68f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000e695:	83 e0 bf             	and    eax,0xffffffbf
c000e698:	09 d0                	or     eax,edx
c000e69a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000e6a0:	58                   	pop    eax
c000e6a1:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e6a5:	50                   	push   eax
c000e6a6:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e6aa:	50                   	push   eax
c000e6ab:	8d 74 24 28          	lea    esi,[esp+0x28]
c000e6af:	56                   	push   esi
c000e6b0:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e6b4:	50                   	push   eax
c000e6b5:	6a 00                	push   0x0
c000e6b7:	e8 d4 fc ff ff       	call   c000e390 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e6bc:	b8 04 00 00 00       	mov    eax,0x4
c000e6c1:	89 c1                	mov    ecx,eax
c000e6c3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e6c5:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000e6cb:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000e6cf:	89 c1                	mov    ecx,eax
c000e6d1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e6d3:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000e6d9:	8d 74 24 38          	lea    esi,[esp+0x38]
c000e6dd:	89 c1                	mov    ecx,eax
c000e6df:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e6e1:	83 c4 18             	add    esp,0x18
c000e6e4:	68 a8 d8 01 c0       	push   0xc001d8a8
c000e6e9:	55                   	push   ebp
c000e6ea:	e8 11 20 ff ff       	call   c0000700 <strcmp>
c000e6ef:	83 c4 10             	add    esp,0x10
c000e6f2:	85 c0                	test   eax,eax
c000e6f4:	75 0f                	jne    c000e705 <CPU::detectFeatures()+0x1a9>
c000e6f6:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000e700:	e9 22 02 00 00       	jmp    c000e927 <CPU::detectFeatures()+0x3cb>
c000e705:	50                   	push   eax
c000e706:	50                   	push   eax
c000e707:	68 b5 d8 01 c0       	push   0xc001d8b5
c000e70c:	55                   	push   ebp
c000e70d:	e8 ee 1f ff ff       	call   c0000700 <strcmp>
c000e712:	83 c4 10             	add    esp,0x10
c000e715:	85 c0                	test   eax,eax
c000e717:	74 dd                	je     c000e6f6 <CPU::detectFeatures()+0x19a>
c000e719:	50                   	push   eax
c000e71a:	50                   	push   eax
c000e71b:	68 c2 d8 01 c0       	push   0xc001d8c2
c000e720:	55                   	push   ebp
c000e721:	e8 da 1f ff ff       	call   c0000700 <strcmp>
c000e726:	83 c4 10             	add    esp,0x10
c000e729:	85 c0                	test   eax,eax
c000e72b:	74 2a                	je     c000e757 <CPU::detectFeatures()+0x1fb>
c000e72d:	50                   	push   eax
c000e72e:	50                   	push   eax
c000e72f:	68 cf d8 01 c0       	push   0xc001d8cf
c000e734:	55                   	push   ebp
c000e735:	e8 c6 1f ff ff       	call   c0000700 <strcmp>
c000e73a:	83 c4 10             	add    esp,0x10
c000e73d:	85 c0                	test   eax,eax
c000e73f:	74 16                	je     c000e757 <CPU::detectFeatures()+0x1fb>
c000e741:	50                   	push   eax
c000e742:	50                   	push   eax
c000e743:	68 dc d8 01 c0       	push   0xc001d8dc
c000e748:	55                   	push   ebp
c000e749:	e8 b2 1f ff ff       	call   c0000700 <strcmp>
c000e74e:	83 c4 10             	add    esp,0x10
c000e751:	85 c0                	test   eax,eax
c000e753:	74 48                	je     c000e79d <CPU::detectFeatures()+0x241>
c000e755:	eb 0f                	jmp    c000e766 <CPU::detectFeatures()+0x20a>
c000e757:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000e761:	e9 c1 01 00 00       	jmp    c000e927 <CPU::detectFeatures()+0x3cb>
c000e766:	50                   	push   eax
c000e767:	50                   	push   eax
c000e768:	68 e9 d8 01 c0       	push   0xc001d8e9
c000e76d:	55                   	push   ebp
c000e76e:	e8 8d 1f ff ff       	call   c0000700 <strcmp>
c000e773:	83 c4 10             	add    esp,0x10
c000e776:	85 c0                	test   eax,eax
c000e778:	74 23                	je     c000e79d <CPU::detectFeatures()+0x241>
c000e77a:	57                   	push   edi
c000e77b:	57                   	push   edi
c000e77c:	68 f6 d8 01 c0       	push   0xc001d8f6
c000e781:	55                   	push   ebp
c000e782:	e8 79 1f ff ff       	call   c0000700 <strcmp>
c000e787:	83 c4 10             	add    esp,0x10
c000e78a:	85 c0                	test   eax,eax
c000e78c:	75 1e                	jne    c000e7ac <CPU::detectFeatures()+0x250>
c000e78e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000e798:	e9 8a 01 00 00       	jmp    c000e927 <CPU::detectFeatures()+0x3cb>
c000e79d:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000e7a7:	e9 7b 01 00 00       	jmp    c000e927 <CPU::detectFeatures()+0x3cb>
c000e7ac:	56                   	push   esi
c000e7ad:	56                   	push   esi
c000e7ae:	68 03 d9 01 c0       	push   0xc001d903
c000e7b3:	55                   	push   ebp
c000e7b4:	e8 47 1f ff ff       	call   c0000700 <strcmp>
c000e7b9:	83 c4 10             	add    esp,0x10
c000e7bc:	85 c0                	test   eax,eax
c000e7be:	75 0f                	jne    c000e7cf <CPU::detectFeatures()+0x273>
c000e7c0:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000e7ca:	e9 58 01 00 00       	jmp    c000e927 <CPU::detectFeatures()+0x3cb>
c000e7cf:	51                   	push   ecx
c000e7d0:	51                   	push   ecx
c000e7d1:	68 c2 d8 01 c0       	push   0xc001d8c2
c000e7d6:	55                   	push   ebp
c000e7d7:	e8 24 1f ff ff       	call   c0000700 <strcmp>
c000e7dc:	83 c4 10             	add    esp,0x10
c000e7df:	85 c0                	test   eax,eax
c000e7e1:	75 0f                	jne    c000e7f2 <CPU::detectFeatures()+0x296>
c000e7e3:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000e7ed:	e9 35 01 00 00       	jmp    c000e927 <CPU::detectFeatures()+0x3cb>
c000e7f2:	52                   	push   edx
c000e7f3:	52                   	push   edx
c000e7f4:	68 10 d9 01 c0       	push   0xc001d910
c000e7f9:	55                   	push   ebp
c000e7fa:	e8 01 1f ff ff       	call   c0000700 <strcmp>
c000e7ff:	83 c4 10             	add    esp,0x10
c000e802:	85 c0                	test   eax,eax
c000e804:	75 0f                	jne    c000e815 <CPU::detectFeatures()+0x2b9>
c000e806:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000e810:	e9 12 01 00 00       	jmp    c000e927 <CPU::detectFeatures()+0x3cb>
c000e815:	50                   	push   eax
c000e816:	50                   	push   eax
c000e817:	68 1d d9 01 c0       	push   0xc001d91d
c000e81c:	55                   	push   ebp
c000e81d:	e8 de 1e ff ff       	call   c0000700 <strcmp>
c000e822:	83 c4 10             	add    esp,0x10
c000e825:	85 c0                	test   eax,eax
c000e827:	75 0f                	jne    c000e838 <CPU::detectFeatures()+0x2dc>
c000e829:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000e833:	e9 ef 00 00 00       	jmp    c000e927 <CPU::detectFeatures()+0x3cb>
c000e838:	50                   	push   eax
c000e839:	50                   	push   eax
c000e83a:	68 2a d9 01 c0       	push   0xc001d92a
c000e83f:	55                   	push   ebp
c000e840:	e8 bb 1e ff ff       	call   c0000700 <strcmp>
c000e845:	83 c4 10             	add    esp,0x10
c000e848:	85 c0                	test   eax,eax
c000e84a:	75 0f                	jne    c000e85b <CPU::detectFeatures()+0x2ff>
c000e84c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000e856:	e9 cc 00 00 00       	jmp    c000e927 <CPU::detectFeatures()+0x3cb>
c000e85b:	50                   	push   eax
c000e85c:	50                   	push   eax
c000e85d:	68 37 d9 01 c0       	push   0xc001d937
c000e862:	55                   	push   ebp
c000e863:	e8 98 1e ff ff       	call   c0000700 <strcmp>
c000e868:	83 c4 10             	add    esp,0x10
c000e86b:	85 c0                	test   eax,eax
c000e86d:	75 0f                	jne    c000e87e <CPU::detectFeatures()+0x322>
c000e86f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000e879:	e9 a9 00 00 00       	jmp    c000e927 <CPU::detectFeatures()+0x3cb>
c000e87e:	50                   	push   eax
c000e87f:	50                   	push   eax
c000e880:	68 44 d9 01 c0       	push   0xc001d944
c000e885:	55                   	push   ebp
c000e886:	e8 75 1e ff ff       	call   c0000700 <strcmp>
c000e88b:	83 c4 10             	add    esp,0x10
c000e88e:	85 c0                	test   eax,eax
c000e890:	75 0f                	jne    c000e8a1 <CPU::detectFeatures()+0x345>
c000e892:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000e89c:	e9 86 00 00 00       	jmp    c000e927 <CPU::detectFeatures()+0x3cb>
c000e8a1:	50                   	push   eax
c000e8a2:	50                   	push   eax
c000e8a3:	68 51 d9 01 c0       	push   0xc001d951
c000e8a8:	55                   	push   ebp
c000e8a9:	e8 52 1e ff ff       	call   c0000700 <strcmp>
c000e8ae:	83 c4 10             	add    esp,0x10
c000e8b1:	85 c0                	test   eax,eax
c000e8b3:	75 0c                	jne    c000e8c1 <CPU::detectFeatures()+0x365>
c000e8b5:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000e8bf:	eb 66                	jmp    c000e927 <CPU::detectFeatures()+0x3cb>
c000e8c1:	50                   	push   eax
c000e8c2:	50                   	push   eax
c000e8c3:	68 5e d9 01 c0       	push   0xc001d95e
c000e8c8:	55                   	push   ebp
c000e8c9:	e8 32 1e ff ff       	call   c0000700 <strcmp>
c000e8ce:	83 c4 10             	add    esp,0x10
c000e8d1:	85 c0                	test   eax,eax
c000e8d3:	75 0c                	jne    c000e8e1 <CPU::detectFeatures()+0x385>
c000e8d5:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000e8df:	eb 46                	jmp    c000e927 <CPU::detectFeatures()+0x3cb>
c000e8e1:	57                   	push   edi
c000e8e2:	57                   	push   edi
c000e8e3:	68 6b d9 01 c0       	push   0xc001d96b
c000e8e8:	55                   	push   ebp
c000e8e9:	e8 12 1e ff ff       	call   c0000700 <strcmp>
c000e8ee:	83 c4 10             	add    esp,0x10
c000e8f1:	85 c0                	test   eax,eax
c000e8f3:	74 e0                	je     c000e8d5 <CPU::detectFeatures()+0x379>
c000e8f5:	56                   	push   esi
c000e8f6:	56                   	push   esi
c000e8f7:	68 78 d9 01 c0       	push   0xc001d978
c000e8fc:	55                   	push   ebp
c000e8fd:	e8 fe 1d ff ff       	call   c0000700 <strcmp>
c000e902:	83 c4 10             	add    esp,0x10
c000e905:	85 c0                	test   eax,eax
c000e907:	74 cc                	je     c000e8d5 <CPU::detectFeatures()+0x379>
c000e909:	51                   	push   ecx
c000e90a:	51                   	push   ecx
c000e90b:	68 85 d9 01 c0       	push   0xc001d985
c000e910:	55                   	push   ebp
c000e911:	e8 ea 1d ff ff       	call   c0000700 <strcmp>
c000e916:	83 c4 10             	add    esp,0x10
c000e919:	85 c0                	test   eax,eax
c000e91b:	74 b8                	je     c000e8d5 <CPU::detectFeatures()+0x379>
c000e91d:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000e927:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000e92c:	0f 86 be 00 00 00    	jbe    c000e9f0 <CPU::detectFeatures()+0x494>
c000e932:	83 ec 0c             	sub    esp,0xc
c000e935:	68 80 00 00 00       	push   0x80
c000e93a:	e8 31 fb ff ff       	call   c000e470 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000e93f:	83 e0 01             	and    eax,0x1
c000e942:	c1 e0 06             	shl    eax,0x6
c000e945:	88 c2                	mov    dl,al
c000e947:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e94d:	83 e0 bf             	and    eax,0xffffffbf
c000e950:	09 d0                	or     eax,edx
c000e952:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e958:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000e95f:	e8 0c fb ff ff       	call   c000e470 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000e964:	83 e0 01             	and    eax,0x1
c000e967:	c1 e0 04             	shl    eax,0x4
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000e972:	83 e0 ef             	and    eax,0xffffffef
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000e97d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000e984:	e8 e7 fa ff ff       	call   c000e470 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000e989:	c1 e0 07             	shl    eax,0x7
c000e98c:	88 c2                	mov    dl,al
c000e98e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e994:	83 e0 7f             	and    eax,0x7f
c000e997:	09 d0                	or     eax,edx
c000e999:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e99f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000e9a6:	e8 f3 fa ff ff       	call   c000e49e <CPU::cpuidCheckExtendedECX(unsigned int)>
c000e9ab:	83 e0 01             	and    eax,0x1
c000e9ae:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9b5:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000e9bb:	83 e0 f7             	and    eax,0xfffffff7
c000e9be:	09 d0                	or     eax,edx
c000e9c0:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000e9c6:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000e9cd:	e8 cc fa ff ff       	call   c000e49e <CPU::cpuidCheckExtendedECX(unsigned int)>
c000e9d2:	83 c4 10             	add    esp,0x10
c000e9d5:	83 e0 01             	and    eax,0x1
c000e9d8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e9df:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000e9e5:	83 e0 fb             	and    eax,0xfffffffb
c000e9e8:	09 d0                	or     eax,edx
c000e9ea:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000e9f0:	83 ec 0c             	sub    esp,0xc
c000e9f3:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e9f7:	50                   	push   eax
c000e9f8:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e9fc:	50                   	push   eax
c000e9fd:	8d 74 24 28          	lea    esi,[esp+0x28]
c000ea01:	56                   	push   esi
c000ea02:	8d 44 24 28          	lea    eax,[esp+0x28]
c000ea06:	50                   	push   eax
c000ea07:	6a 01                	push   0x1
c000ea09:	e8 82 f9 ff ff       	call   c000e390 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea0e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ea12:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000ea18:	88 ca                	mov    dl,cl
c000ea1a:	83 e0 f0             	and    eax,0xfffffff0
c000ea1d:	83 e2 0f             	and    edx,0xf
c000ea20:	09 d0                	or     eax,edx
c000ea22:	88 ca                	mov    dl,cl
c000ea24:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000ea2a:	c0 ea 04             	shr    dl,0x4
c000ea2d:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000ea31:	0f b6 c2             	movzx  eax,dl
c000ea34:	83 c4 20             	add    esp,0x20
c000ea37:	c1 e0 06             	shl    eax,0x6
c000ea3a:	89 c7                	mov    edi,eax
c000ea3c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ea42:	66 25 3f c0          	and    ax,0xc03f
c000ea46:	09 f8                	or     eax,edi
c000ea48:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000ea4f:	89 c8                	mov    eax,ecx
c000ea51:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000ea58:	c1 e8 08             	shr    eax,0x8
c000ea5b:	83 e5 3f             	and    ebp,0x3f
c000ea5e:	83 e0 0f             	and    eax,0xf
c000ea61:	89 c7                	mov    edi,eax
c000ea63:	c1 e7 06             	shl    edi,0x6
c000ea66:	09 ef                	or     edi,ebp
c000ea68:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000ea6f:	89 fa                	mov    edx,edi
c000ea71:	83 e5 c0             	and    ebp,0xffffffc0
c000ea74:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000ea7a:	88 c2                	mov    dl,al
c000ea7c:	c0 ea 02             	shr    dl,0x2
c000ea7f:	89 d7                	mov    edi,edx
c000ea81:	09 ef                	or     edi,ebp
c000ea83:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000ea89:	89 fa                	mov    edx,edi
c000ea8b:	83 e5 cf             	and    ebp,0xffffffcf
c000ea8e:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000ea94:	89 cf                	mov    edi,ecx
c000ea96:	c1 ef 0c             	shr    edi,0xc
c000ea99:	83 e7 03             	and    edi,0x3
c000ea9c:	c1 e7 04             	shl    edi,0x4
c000ea9f:	09 ef                	or     edi,ebp
c000eaa1:	3c 06                	cmp    al,0x6
c000eaa3:	89 fa                	mov    edx,edi
c000eaa5:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000eaab:	74 04                	je     c000eab1 <CPU::detectFeatures()+0x555>
c000eaad:	3c 0f                	cmp    al,0xf
c000eaaf:	75 5c                	jne    c000eb0d <CPU::detectFeatures()+0x5b1>
c000eab1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000eab5:	89 cf                	mov    edi,ecx
c000eab7:	c1 ef 10             	shr    edi,0x10
c000eaba:	c1 e7 04             	shl    edi,0x4
c000eabd:	09 fa                	or     edx,edi
c000eabf:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000eac5:	0f b6 d2             	movzx  edx,dl
c000eac8:	66 81 e7 3f c0       	and    di,0xc03f
c000eacd:	c1 e2 06             	shl    edx,0x6
c000ead0:	09 fa                	or     edx,edi
c000ead2:	3c 0f                	cmp    al,0xf
c000ead4:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000eadb:	75 30                	jne    c000eb0d <CPU::detectFeatures()+0x5b1>
c000eadd:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000eae3:	c1 e9 14             	shr    ecx,0x14
c000eae6:	83 e0 3f             	and    eax,0x3f
c000eae9:	83 c1 0f             	add    ecx,0xf
c000eaec:	88 ca                	mov    dl,cl
c000eaee:	c0 e9 02             	shr    cl,0x2
c000eaf1:	c1 e2 06             	shl    edx,0x6
c000eaf4:	09 d0                	or     eax,edx
c000eaf6:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000eafc:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000eb02:	83 e0 c0             	and    eax,0xffffffc0
c000eb05:	09 c1                	or     ecx,eax
c000eb07:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000eb0d:	83 ec 0c             	sub    esp,0xc
c000eb10:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000eb17:	8d 44 24 28          	lea    eax,[esp+0x28]
c000eb1b:	50                   	push   eax
c000eb1c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000eb20:	55                   	push   ebp
c000eb21:	56                   	push   esi
c000eb22:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000eb26:	57                   	push   edi
c000eb27:	68 00 00 00 80       	push   0x80000000
c000eb2c:	e8 5f f8 ff ff       	call   c000e390 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eb31:	83 c4 20             	add    esp,0x20
c000eb34:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000eb3c:	76 22                	jbe    c000eb60 <CPU::detectFeatures()+0x604>
c000eb3e:	83 ec 0c             	sub    esp,0xc
c000eb41:	8d 44 24 28          	lea    eax,[esp+0x28]
c000eb45:	50                   	push   eax
c000eb46:	55                   	push   ebp
c000eb47:	56                   	push   esi
c000eb48:	57                   	push   edi
c000eb49:	68 01 00 00 80       	push   0x80000001
c000eb4e:	e8 3d f8 ff ff       	call   c000e390 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eb53:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000eb5d:	83 c4 20             	add    esp,0x20
c000eb60:	52                   	push   edx
c000eb61:	52                   	push   edx
c000eb62:	68 91 d9 01 c0       	push   0xc001d991
c000eb67:	53                   	push   ebx
c000eb68:	e8 09 c3 ff ff       	call   c000ae76 <Device::setName(char const*)>
c000eb6d:	83 c4 10             	add    esp,0x10
c000eb70:	eb 67                	jmp    c000ebd9 <CPU::detectFeatures()+0x67d>
c000eb72:	50                   	push   eax
c000eb73:	50                   	push   eax
c000eb74:	68 f6 d8 01 c0       	push   0xc001d8f6
c000eb79:	55                   	push   ebp
c000eb7a:	e8 a1 1a ff ff       	call   c0000620 <strcpy>
c000eb7f:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000eb89:	e8 55 16 ff ff       	call   c00001e3 <is486>
c000eb8e:	83 c4 10             	add    esp,0x10
c000eb91:	85 c0                	test   eax,eax
c000eb93:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000eb99:	74 1d                	je     c000ebb8 <CPU::detectFeatures()+0x65c>
c000eb9b:	83 c8 07             	or     eax,0x7
c000eb9e:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000eba4:	0f 20 c0             	mov    eax,cr0
c000eba7:	83 e0 14             	and    eax,0x14
c000ebaa:	83 f8 04             	cmp    eax,0x4
c000ebad:	75 0e                	jne    c000ebbd <CPU::detectFeatures()+0x661>
c000ebaf:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000ebb6:	eb 21                	jmp    c000ebd9 <CPU::detectFeatures()+0x67d>
c000ebb8:	83 e0 f8             	and    eax,0xfffffff8
c000ebbb:	eb e1                	jmp    c000eb9e <CPU::detectFeatures()+0x642>
c000ebbd:	e8 fc 15 ff ff       	call   c00001be <hasLegacyFPU>
c000ebc2:	83 e0 01             	and    eax,0x1
c000ebc5:	8d 14 00             	lea    edx,[eax+eax*1]
c000ebc8:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ebce:	83 e0 fd             	and    eax,0xfffffffd
c000ebd1:	09 d0                	or     eax,edx
c000ebd3:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ebd9:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000ebe0:	74 0e                	je     c000ebf0 <CPU::detectFeatures()+0x694>
c000ebe2:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c000ebe7:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000ebee:	eb 20                	jmp    c000ec10 <CPU::detectFeatures()+0x6b4>
c000ebf0:	e8 c9 15 ff ff       	call   c00001be <hasLegacyFPU>
c000ebf5:	83 e0 01             	and    eax,0x1
c000ebf8:	8d 14 00             	lea    edx,[eax+eax*1]
c000ebfb:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ec01:	83 e0 fd             	and    eax,0xfffffffd
c000ec04:	09 d0                	or     eax,edx
c000ec06:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ec0c:	a8 02                	test   al,0x2
c000ec0e:	75 d2                	jne    c000ebe2 <CPU::detectFeatures()+0x686>
c000ec10:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000ec17:	83 c4 2c             	add    esp,0x2c
c000ec1a:	5b                   	pop    ebx
c000ec1b:	5e                   	pop    esi
c000ec1c:	5f                   	pop    edi
c000ec1d:	5d                   	pop    ebp
c000ec1e:	c3                   	ret    
c000ec1f:	90                   	nop

c000ec20 <CPU::setupSMEP()>:
c000ec20:	0f 20 e0             	mov    eax,cr4
c000ec23:	0d 00 00 10 00       	or     eax,0x100000
c000ec28:	0f 22 e0             	mov    cr4,eax
c000ec2b:	c3                   	ret    

c000ec2c <CPU::setupUMIP()>:
c000ec2c:	0f 20 e0             	mov    eax,cr4
c000ec2f:	80 cc 08             	or     ah,0x8
c000ec32:	0f 22 e0             	mov    cr4,eax
c000ec35:	c3                   	ret    

c000ec36 <CPU::setupTSC()>:
c000ec36:	0f 20 e0             	mov    eax,cr4
c000ec39:	83 c8 04             	or     eax,0x4
c000ec3c:	0f 22 e0             	mov    cr4,eax
c000ec3f:	c3                   	ret    

c000ec40 <CPU::setupLargePages()>:
c000ec40:	0f 20 e0             	mov    eax,cr4
c000ec43:	83 c8 10             	or     eax,0x10
c000ec46:	0f 22 e0             	mov    cr4,eax
c000ec49:	c3                   	ret    

c000ec4a <CPU::setupPAT()>:
c000ec4a:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c000ec4f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000ec56:	74 2c                	je     c000ec84 <CPU::setupPAT()+0x3a>
c000ec58:	53                   	push   ebx
c000ec59:	83 ec 10             	sub    esp,0x10
c000ec5c:	68 77 02 00 00       	push   0x277
c000ec61:	50                   	push   eax
c000ec62:	e8 f3 74 ff ff       	call   c000615a <Computer::rdmsr(unsigned int)>
c000ec67:	83 e2 f8             	and    edx,0xfffffff8
c000ec6a:	83 ca 01             	or     edx,0x1
c000ec6d:	52                   	push   edx
c000ec6e:	50                   	push   eax
c000ec6f:	68 77 02 00 00       	push   0x277
c000ec74:	ff 35 08 f2 01 c0    	push   DWORD PTR ds:0xc001f208
c000ec7a:	e8 07 75 ff ff       	call   c0006186 <Computer::wrmsr(unsigned int, unsigned long long)>
c000ec7f:	83 c4 28             	add    esp,0x28
c000ec82:	5b                   	pop    ebx
c000ec83:	c3                   	ret    
c000ec84:	c3                   	ret    
c000ec85:	90                   	nop

c000ec86 <CPU::setupMTRR()>:
c000ec86:	c3                   	ret    
c000ec87:	90                   	nop

c000ec88 <CPU::setupGlobalPages()>:
c000ec88:	0f 20 e0             	mov    eax,cr4
c000ec8b:	0c 80                	or     al,0x80
c000ec8d:	0f 22 e0             	mov    cr4,eax
c000ec90:	c3                   	ret    
c000ec91:	90                   	nop

c000ec92 <CPU::allowUsermodeDataAccess()>:
c000ec92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec96:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ec9d:	74 03                	je     c000eca2 <CPU::allowUsermodeDataAccess()+0x10>
c000ec9f:	0f 01 cb             	stac   
c000eca2:	c3                   	ret    
c000eca3:	90                   	nop

c000eca4 <CPU::prohibitUsermodeDataAccess()>:
c000eca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eca8:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ecaf:	74 03                	je     c000ecb4 <CPU::prohibitUsermodeDataAccess()+0x10>
c000ecb1:	0f 01 ca             	clac   
c000ecb4:	c3                   	ret    
c000ecb5:	90                   	nop

c000ecb6 <CPU::setupSMAP()>:
c000ecb6:	0f 20 e0             	mov    eax,cr4
c000ecb9:	0d 00 00 20 00       	or     eax,0x200000
c000ecbe:	0f 22 e0             	mov    cr4,eax
c000ecc1:	eb e1                	jmp    c000eca4 <CPU::prohibitUsermodeDataAccess()>
c000ecc3:	90                   	nop

c000ecc4 <CPU::setupFeatures()>:
c000ecc4:	53                   	push   ebx
c000ecc5:	83 ec 08             	sub    esp,0x8
c000ecc8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eccc:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000ecd3:	74 18                	je     c000eced <CPU::setupFeatures()+0x29>
c000ecd5:	83 ec 0c             	sub    esp,0xc
c000ecd8:	68 9d d9 01 c0       	push   0xc001d99d
c000ecdd:	e8 ca ab ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c000ece2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ece5:	e8 42 ff ff ff       	call   c000ec2c <CPU::setupUMIP()>
c000ecea:	83 c4 10             	add    esp,0x10
c000eced:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000ecf4:	74 18                	je     c000ed0e <CPU::setupFeatures()+0x4a>
c000ecf6:	83 ec 0c             	sub    esp,0xc
c000ecf9:	68 a7 d9 01 c0       	push   0xc001d9a7
c000ecfe:	e8 a9 ab ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c000ed03:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ed06:	e8 2b ff ff ff       	call   c000ec36 <CPU::setupTSC()>
c000ed0b:	83 c4 10             	add    esp,0x10
c000ed0e:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000ed15:	74 18                	je     c000ed2f <CPU::setupFeatures()+0x6b>
c000ed17:	83 ec 0c             	sub    esp,0xc
c000ed1a:	68 b0 d9 01 c0       	push   0xc001d9b0
c000ed1f:	e8 88 ab ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c000ed24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ed27:	e8 14 ff ff ff       	call   c000ec40 <CPU::setupLargePages()>
c000ed2c:	83 c4 10             	add    esp,0x10
c000ed2f:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000ed36:	74 18                	je     c000ed50 <CPU::setupFeatures()+0x8c>
c000ed38:	83 ec 0c             	sub    esp,0xc
c000ed3b:	68 b9 d9 01 c0       	push   0xc001d9b9
c000ed40:	e8 67 ab ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c000ed45:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ed48:	e8 3b ff ff ff       	call   c000ec88 <CPU::setupGlobalPages()>
c000ed4d:	83 c4 10             	add    esp,0x10
c000ed50:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000ed57:	74 18                	je     c000ed71 <CPU::setupFeatures()+0xad>
c000ed59:	83 ec 0c             	sub    esp,0xc
c000ed5c:	68 cb d9 01 c0       	push   0xc001d9cb
c000ed61:	e8 46 ab ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c000ed66:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ed69:	e8 dc fe ff ff       	call   c000ec4a <CPU::setupPAT()>
c000ed6e:	83 c4 10             	add    esp,0x10
c000ed71:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000ed78:	74 11                	je     c000ed8b <CPU::setupFeatures()+0xc7>
c000ed7a:	c7 44 24 10 d4 d9 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d9d4
c000ed82:	83 c4 08             	add    esp,0x8
c000ed85:	5b                   	pop    ebx
c000ed86:	e9 21 ab ff ff       	jmp    c00098ac <Dbg::kprintf(char const*, ...)>
c000ed8b:	83 c4 08             	add    esp,0x8
c000ed8e:	5b                   	pop    ebx
c000ed8f:	c3                   	ret    

c000ed90 <CPU::open(int, int, void*)>:
c000ed90:	57                   	push   edi
c000ed91:	56                   	push   esi
c000ed92:	53                   	push   ebx
c000ed93:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ed97:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ed9b:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000eda1:	83 ec 0c             	sub    esp,0xc
c000eda4:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000edaa:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000edb0:	50                   	push   eax
c000edb1:	e8 8e 76 ff ff       	call   c0006444 <GDT::setup()>
c000edb6:	83 c4 0c             	add    esp,0xc
c000edb9:	6a 00                	push   0x0
c000edbb:	68 ef be ad de       	push   0xdeadbeef
c000edc0:	57                   	push   edi
c000edc1:	e8 1a 92 ff ff       	call   c0007fe0 <TSS::setup(unsigned long, unsigned long)>
c000edc6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000edc9:	e8 f2 91 ff ff       	call   c0007fc0 <TSS::flush()>
c000edce:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000edd4:	89 04 24             	mov    DWORD PTR [esp],eax
c000edd7:	e8 b2 78 ff ff       	call   c000668e <IDT::setup()>
c000eddc:	b8 00 04 00 00       	mov    eax,0x400
c000ede1:	0f 23 f8             	mov    db7,eax
c000ede4:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000edee:	e8 f7 80 ff ff       	call   c0006eea <Phys::allocatePage()>
c000edf3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000edf9:	89 30                	mov    DWORD PTR [eax],esi
c000edfb:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000ee01:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000ee04:	58                   	pop    eax
c000ee05:	5a                   	pop    edx
c000ee06:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000ee0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee10:	e8 b5 a1 ff ff       	call   c0008fca <VAS::setCPUSpecific(unsigned long)>
c000ee15:	c7 04 24 de d9 01 c0 	mov    DWORD PTR [esp],0xc001d9de
c000ee1c:	e8 56 7d ff ff       	call   c0006b77 <Krnl::setBootMessage(char const*)>
c000ee21:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee24:	e8 33 f7 ff ff       	call   c000e55c <CPU::detectFeatures()>
c000ee29:	c7 04 24 01 da 01 c0 	mov    DWORD PTR [esp],0xc001da01
c000ee30:	e8 42 7d ff ff       	call   c0006b77 <Krnl::setBootMessage(char const*)>
c000ee35:	e8 b8 56 00 00       	call   c00144f2 <HalInitialise()>
c000ee3a:	a1 20 f2 01 c0       	mov    eax,ds:0xc001f220
c000ee3f:	83 e0 10             	and    eax,0x10
c000ee42:	83 f8 01             	cmp    eax,0x1
c000ee45:	19 c0                	sbb    eax,eax
c000ee47:	83 e0 46             	and    eax,0x46
c000ee4a:	83 c0 1e             	add    eax,0x1e
c000ee4d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ee50:	e8 f0 d6 ff ff       	call   c000c545 <setupTimer(int)>
c000ee55:	83 c4 10             	add    esp,0x10
c000ee58:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000ee5e:	f6 05 20 f2 01 c0 20 	test   BYTE PTR ds:0xc001f220,0x20
c000ee65:	74 0c                	je     c000ee73 <CPU::open(int, int, void*)+0xe3>
c000ee67:	83 ec 0c             	sub    esp,0xc
c000ee6a:	53                   	push   ebx
c000ee6b:	e8 54 fe ff ff       	call   c000ecc4 <CPU::setupFeatures()>
c000ee70:	83 c4 10             	add    esp,0x10
c000ee73:	5b                   	pop    ebx
c000ee74:	31 c0                	xor    eax,eax
c000ee76:	5e                   	pop    esi
c000ee77:	5f                   	pop    edi
c000ee78:	c3                   	ret    
c000ee79:	90                   	nop

c000ee7a <EnvVarContainer::getEnv(char const*)>:
c000ee7a:	57                   	push   edi
c000ee7b:	56                   	push   esi
c000ee7c:	53                   	push   ebx
c000ee7d:	31 db                	xor    ebx,ebx
c000ee7f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ee83:	39 1e                	cmp    DWORD PTR [esi],ebx
c000ee85:	7e 2b                	jle    c000eeb2 <EnvVarContainer::getEnv(char const*)+0x38>
c000ee87:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000ee8e:	50                   	push   eax
c000ee8f:	50                   	push   eax
c000ee90:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ee93:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ee96:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee9a:	e8 61 18 ff ff       	call   c0000700 <strcmp>
c000ee9f:	83 c4 10             	add    esp,0x10
c000eea2:	85 c0                	test   eax,eax
c000eea4:	75 09                	jne    c000eeaf <EnvVarContainer::getEnv(char const*)+0x35>
c000eea6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000eea9:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000eead:	eb 05                	jmp    c000eeb4 <EnvVarContainer::getEnv(char const*)+0x3a>
c000eeaf:	43                   	inc    ebx
c000eeb0:	eb d1                	jmp    c000ee83 <EnvVarContainer::getEnv(char const*)+0x9>
c000eeb2:	31 c0                	xor    eax,eax
c000eeb4:	5b                   	pop    ebx
c000eeb5:	5e                   	pop    esi
c000eeb6:	5f                   	pop    edi
c000eeb7:	c3                   	ret    

c000eeb8 <EnvVarContainer::setEnv(char const*, char const*)>:
c000eeb8:	55                   	push   ebp
c000eeb9:	57                   	push   edi
c000eeba:	56                   	push   esi
c000eebb:	53                   	push   ebx
c000eebc:	83 ec 28             	sub    esp,0x28
c000eebf:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000eec3:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000eec7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000eecb:	56                   	push   esi
c000eecc:	e8 8f 16 ff ff       	call   c0000560 <strlen>
c000eed1:	40                   	inc    eax
c000eed2:	89 04 24             	mov    DWORD PTR [esp],eax
c000eed5:	e8 43 7c ff ff       	call   c0006b1d <malloc>
c000eeda:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eedd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eee1:	e8 7a 16 ff ff       	call   c0000560 <strlen>
c000eee6:	40                   	inc    eax
c000eee7:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeea:	e8 2e 7c ff ff       	call   c0006b1d <malloc>
c000eeef:	89 34 24             	mov    DWORD PTR [esp],esi
c000eef2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eef6:	e8 65 16 ff ff       	call   c0000560 <strlen>
c000eefb:	83 c4 0c             	add    esp,0xc
c000eefe:	40                   	inc    eax
c000eeff:	50                   	push   eax
c000ef00:	6a 00                	push   0x0
c000ef02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ef06:	e8 e5 15 ff ff       	call   c00004f0 <memset>
c000ef0b:	89 34 24             	mov    DWORD PTR [esp],esi
c000ef0e:	e8 4d 16 ff ff       	call   c0000560 <strlen>
c000ef13:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000ef17:	8d 48 01             	lea    ecx,[eax+0x1]
c000ef1a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ef1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef1f:	89 de                	mov    esi,ebx
c000ef21:	e8 3a 16 ff ff       	call   c0000560 <strlen>
c000ef26:	83 c4 0c             	add    esp,0xc
c000ef29:	40                   	inc    eax
c000ef2a:	50                   	push   eax
c000ef2b:	6a 00                	push   0x0
c000ef2d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ef31:	e8 ba 15 ff ff       	call   c00004f0 <memset>
c000ef36:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef39:	e8 22 16 ff ff       	call   c0000560 <strlen>
c000ef3e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ef42:	8d 48 01             	lea    ecx,[eax+0x1]
c000ef45:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ef47:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ef4a:	40                   	inc    eax
c000ef4b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ef4e:	c1 e0 03             	shl    eax,0x3
c000ef51:	5a                   	pop    edx
c000ef52:	59                   	pop    ecx
c000ef53:	50                   	push   eax
c000ef54:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ef57:	e8 ad 7b ff ff       	call   c0006b09 <realloc>
c000ef5c:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ef60:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000ef63:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000ef66:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000ef6a:	b9 08 00 00 00       	mov    ecx,0x8
c000ef6f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ef71:	83 c4 2c             	add    esp,0x2c
c000ef74:	5b                   	pop    ebx
c000ef75:	5e                   	pop    esi
c000ef76:	5f                   	pop    edi
c000ef77:	5d                   	pop    ebp
c000ef78:	c3                   	ret    
c000ef79:	90                   	nop

c000ef7a <EnvVarContainer::deleteEnv(char const*)>:
c000ef7a:	c3                   	ret    
c000ef7b:	90                   	nop

c000ef7c <EnvVarContainer::loadFrom(char const*, char const*)>:
c000ef7c:	55                   	push   ebp
c000ef7d:	57                   	push   edi
c000ef7e:	56                   	push   esi
c000ef7f:	53                   	push   ebx
c000ef80:	81 ec 38 01 00 00    	sub    esp,0x138
c000ef86:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000ef8d:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000ef94:	68 14 01 00 00       	push   0x114
c000ef99:	e8 7f 7b ff ff       	call   c0006b1d <malloc>
c000ef9e:	83 c4 0c             	add    esp,0xc
c000efa1:	89 c3                	mov    ebx,eax
c000efa3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000efa6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000efad:	50                   	push   eax
c000efae:	e8 6f ae ff ff       	call   c0009e22 <File::File(char const*, Process*)>
c000efb3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000efb6:	e8 95 b1 ff ff       	call   c000a150 <File::exists()>
c000efbb:	83 c4 10             	add    esp,0x10
c000efbe:	84 c0                	test   al,al
c000efc0:	75 31                	jne    c000eff3 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000efc2:	50                   	push   eax
c000efc3:	50                   	push   eax
c000efc4:	6a 12                	push   0x12
c000efc6:	53                   	push   ebx
c000efc7:	e8 16 af ff ff       	call   c0009ee2 <File::open(FileOpenMode)>
c000efcc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000efce:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000efd1:	89 34 24             	mov    DWORD PTR [esp],esi
c000efd4:	e8 87 15 ff ff       	call   c0000560 <strlen>
c000efd9:	5a                   	pop    edx
c000efda:	31 d2                	xor    edx,edx
c000efdc:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000efe0:	51                   	push   ecx
c000efe1:	56                   	push   esi
c000efe2:	52                   	push   edx
c000efe3:	50                   	push   eax
c000efe4:	53                   	push   ebx
c000efe5:	ff d7                	call   edi
c000efe7:	83 c4 14             	add    esp,0x14
c000efea:	53                   	push   ebx
c000efeb:	e8 50 af ff ff       	call   c0009f40 <File::close()>
c000eff0:	83 c4 10             	add    esp,0x10
c000eff3:	56                   	push   esi
c000eff4:	31 f6                	xor    esi,esi
c000eff6:	68 00 01 00 00       	push   0x100
c000effb:	6a 00                	push   0x0
c000effd:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000f001:	50                   	push   eax
c000f002:	e8 e9 14 ff ff       	call   c00004f0 <memset>
c000f007:	5f                   	pop    edi
c000f008:	58                   	pop    eax
c000f009:	6a 01                	push   0x1
c000f00b:	53                   	push   ebx
c000f00c:	e8 d1 ae ff ff       	call   c0009ee2 <File::open(FileOpenMode)>
c000f011:	83 c4 10             	add    esp,0x10
c000f014:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000f01c:	83 ec 0c             	sub    esp,0xc
c000f01f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f021:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000f025:	51                   	push   ecx
c000f026:	8d 54 24 23          	lea    edx,[esp+0x23]
c000f02a:	52                   	push   edx
c000f02b:	6a 00                	push   0x0
c000f02d:	6a 01                	push   0x1
c000f02f:	53                   	push   ebx
c000f030:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000f033:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000f037:	83 c4 20             	add    esp,0x20
c000f03a:	3c 0d                	cmp    al,0xd
c000f03c:	0f 84 09 01 00 00    	je     c000f14b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000f042:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000f047:	0f 84 ef 00 00 00    	je     c000f13c <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000f04d:	3c 0a                	cmp    al,0xa
c000f04f:	74 13                	je     c000f064 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000f051:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000f056:	74 0c                	je     c000f064 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000f058:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000f05e:	0f 8e d8 00 00 00    	jle    c000f13c <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000f064:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f068:	83 ec 0c             	sub    esp,0xc
c000f06b:	8d 78 01             	lea    edi,[eax+0x1]
c000f06e:	57                   	push   edi
c000f06f:	e8 a9 7a ff ff       	call   c0006b1d <malloc>
c000f074:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000f078:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f07c:	8d 56 04             	lea    edx,[esi+0x4]
c000f07f:	89 14 24             	mov    DWORD PTR [esp],edx
c000f082:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f086:	e8 92 7a ff ff       	call   c0006b1d <malloc>
c000f08b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f08f:	83 c4 0c             	add    esp,0xc
c000f092:	57                   	push   edi
c000f093:	6a 00                	push   0x0
c000f095:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f099:	e8 52 14 ff ff       	call   c00004f0 <memset>
c000f09e:	8d 74 24 30          	lea    esi,[esp+0x30]
c000f0a2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000f0a6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f0aa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f0ac:	83 c4 0c             	add    esp,0xc
c000f0af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f0b3:	52                   	push   edx
c000f0b4:	6a 00                	push   0x0
c000f0b6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f0ba:	e8 31 14 ff ff       	call   c00004f0 <memset>
c000f0bf:	8d 74 24 30          	lea    esi,[esp+0x30]
c000f0c3:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000f0c7:	89 34 24             	mov    DWORD PTR [esp],esi
c000f0ca:	e8 91 14 ff ff       	call   c0000560 <strlen>
c000f0cf:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000f0d3:	89 c1                	mov    ecx,eax
c000f0d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f0d7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f0da:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000f0dd:	40                   	inc    eax
c000f0de:	83 c4 10             	add    esp,0x10
c000f0e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f0e4:	85 d2                	test   edx,edx
c000f0e6:	75 0c                	jne    c000f0f4 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000f0e8:	83 ec 0c             	sub    esp,0xc
c000f0eb:	6a 08                	push   0x8
c000f0ed:	e8 2b 7a ff ff       	call   c0006b1d <malloc>
c000f0f2:	eb 0c                	jmp    c000f100 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000f0f4:	c1 e0 03             	shl    eax,0x3
c000f0f7:	51                   	push   ecx
c000f0f8:	51                   	push   ecx
c000f0f9:	50                   	push   eax
c000f0fa:	52                   	push   edx
c000f0fb:	e8 09 7a ff ff       	call   c0006b09 <realloc>
c000f100:	83 c4 10             	add    esp,0x10
c000f103:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000f106:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000f109:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000f10c:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f110:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000f114:	b9 08 00 00 00       	mov    ecx,0x8
c000f119:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f11b:	31 f6                	xor    esi,esi
c000f11d:	50                   	push   eax
c000f11e:	68 00 01 00 00       	push   0x100
c000f123:	6a 00                	push   0x0
c000f125:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000f129:	50                   	push   eax
c000f12a:	e8 c1 13 ff ff       	call   c00004f0 <memset>
c000f12f:	83 c4 10             	add    esp,0x10
c000f132:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000f13a:	eb 0f                	jmp    c000f14b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000f13c:	3c 3d                	cmp    al,0x3d
c000f13e:	74 07                	je     c000f147 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000f140:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000f144:	46                   	inc    esi
c000f145:	eb 04                	jmp    c000f14b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000f147:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000f14b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000f150:	0f 85 c6 fe ff ff    	jne    c000f01c <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000f156:	81 c4 2c 01 00 00    	add    esp,0x12c
c000f15c:	5b                   	pop    ebx
c000f15d:	5e                   	pop    esi
c000f15e:	5f                   	pop    edi
c000f15f:	5d                   	pop    ebp
c000f160:	c3                   	ret    
c000f161:	90                   	nop

c000f162 <EnvVarContainer::__loadSystem()>:
c000f162:	83 ec 10             	sub    esp,0x10
c000f165:	68 e0 eb 01 c0       	push   0xc001ebe0
c000f16a:	68 44 da 01 c0       	push   0xc001da44
c000f16f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f173:	e8 04 fe ff ff       	call   c000ef7c <EnvVarContainer::loadFrom(char const*, char const*)>
c000f178:	83 c4 1c             	add    esp,0x1c
c000f17b:	c3                   	ret    

c000f17c <EnvVarContainer::__loadUser()>:
c000f17c:	c3                   	ret    
c000f17d:	90                   	nop

c000f17e <EnvVarContainer::EnvVarContainer(Process*)>:
c000f17e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f182:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f18c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f190:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000f193:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f197:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000f19e:	90                   	nop
c000f19f:	c3                   	ret    

c000f1a0 <EnvVarContainer::~EnvVarContainer()>:
c000f1a0:	83 ec 0c             	sub    esp,0xc
c000f1a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1a7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f1aa:	85 c0                	test   eax,eax
c000f1ac:	74 1d                	je     c000f1cb <EnvVarContainer::~EnvVarContainer()+0x2b>
c000f1ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1b4:	85 c0                	test   eax,eax
c000f1b6:	74 13                	je     c000f1cb <EnvVarContainer::~EnvVarContainer()+0x2b>
c000f1b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f1bf:	83 ec 0c             	sub    esp,0xc
c000f1c2:	50                   	push   eax
c000f1c3:	e8 65 79 ff ff       	call   c0006b2d <free>
c000f1c8:	83 c4 10             	add    esp,0x10
c000f1cb:	90                   	nop
c000f1cc:	83 c4 0c             	add    esp,0xc
c000f1cf:	c3                   	ret    

c000f1d0 <Krnl::getEnv(Process*, char const*)>:
c000f1d0:	53                   	push   ebx
c000f1d1:	83 ec 08             	sub    esp,0x8
c000f1d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1d8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f1dc:	39 05 f0 26 02 c0    	cmp    DWORD PTR ds:0xc00226f0,eax
c000f1e2:	74 04                	je     c000f1e8 <Krnl::getEnv(Process*, char const*)+0x18>
c000f1e4:	85 c0                	test   eax,eax
c000f1e6:	75 0b                	jne    c000f1f3 <Krnl::getEnv(Process*, char const*)+0x23>
c000f1e8:	a1 70 1c 02 c0       	mov    eax,ds:0xc0021c70
c000f1ed:	85 c0                	test   eax,eax
c000f1ef:	75 19                	jne    c000f20a <Krnl::getEnv(Process*, char const*)+0x3a>
c000f1f1:	eb 27                	jmp    c000f21a <Krnl::getEnv(Process*, char const*)+0x4a>
c000f1f3:	52                   	push   edx
c000f1f4:	52                   	push   edx
c000f1f5:	53                   	push   ebx
c000f1f6:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000f1fc:	e8 79 fc ff ff       	call   c000ee7a <EnvVarContainer::getEnv(char const*)>
c000f201:	83 c4 10             	add    esp,0x10
c000f204:	85 c0                	test   eax,eax
c000f206:	75 28                	jne    c000f230 <Krnl::getEnv(Process*, char const*)+0x60>
c000f208:	eb de                	jmp    c000f1e8 <Krnl::getEnv(Process*, char const*)+0x18>
c000f20a:	52                   	push   edx
c000f20b:	52                   	push   edx
c000f20c:	53                   	push   ebx
c000f20d:	50                   	push   eax
c000f20e:	e8 67 fc ff ff       	call   c000ee7a <EnvVarContainer::getEnv(char const*)>
c000f213:	83 c4 10             	add    esp,0x10
c000f216:	85 c0                	test   eax,eax
c000f218:	75 16                	jne    c000f230 <Krnl::getEnv(Process*, char const*)+0x60>
c000f21a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000f21e:	a1 74 1c 02 c0       	mov    eax,ds:0xc0021c74
c000f223:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f227:	83 c4 08             	add    esp,0x8
c000f22a:	5b                   	pop    ebx
c000f22b:	e9 4a fc ff ff       	jmp    c000ee7a <EnvVarContainer::getEnv(char const*)>
c000f230:	83 c4 08             	add    esp,0x8
c000f233:	5b                   	pop    ebx
c000f234:	c3                   	ret    

c000f235 <Krnl::setEnvSystem(char const*, char const*)>:
c000f235:	83 ec 10             	sub    esp,0x10
c000f238:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f23c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f240:	ff 35 74 1c 02 c0    	push   DWORD PTR ds:0xc0021c74
c000f246:	e8 6d fc ff ff       	call   c000eeb8 <EnvVarContainer::setEnv(char const*, char const*)>
c000f24b:	83 c4 1c             	add    esp,0x1c
c000f24e:	c3                   	ret    

c000f24f <Krnl::setEnvUser(char const*, char const*)>:
c000f24f:	a1 70 1c 02 c0       	mov    eax,ds:0xc0021c70
c000f254:	85 c0                	test   eax,eax
c000f256:	74 15                	je     c000f26d <Krnl::setEnvUser(char const*, char const*)+0x1e>
c000f258:	83 ec 10             	sub    esp,0x10
c000f25b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f25f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f263:	50                   	push   eax
c000f264:	e8 4f fc ff ff       	call   c000eeb8 <EnvVarContainer::setEnv(char const*, char const*)>
c000f269:	83 c4 1c             	add    esp,0x1c
c000f26c:	c3                   	ret    
c000f26d:	c3                   	ret    

c000f26e <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c000f26e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f272:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000f278:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f27c:	e9 37 fc ff ff       	jmp    c000eeb8 <EnvVarContainer::setEnv(char const*, char const*)>

c000f281 <Krnl::deleteEnvSystem(char const*)>:
c000f281:	c3                   	ret    

c000f282 <Krnl::deleteEnvUser(char const*)>:
c000f282:	c3                   	ret    

c000f283 <Krnl::deleteEnvProcess(Process*, char const*)>:
c000f283:	c3                   	ret    

c000f284 <Krnl::newProcessEnv(Process*)>:
c000f284:	83 ec 28             	sub    esp,0x28
c000f287:	6a 0c                	push   0xc
c000f289:	e8 8f 78 ff ff       	call   c0006b1d <malloc>
c000f28e:	5a                   	pop    edx
c000f28f:	59                   	pop    ecx
c000f290:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f294:	50                   	push   eax
c000f295:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f299:	e8 e0 fe ff ff       	call   c000f17e <EnvVarContainer::EnvVarContainer(Process*)>
c000f29e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f2a2:	83 c4 2c             	add    esp,0x2c
c000f2a5:	c3                   	ret    

c000f2a6 <Krnl::copyProcessEnv(Process*, Process*)>:
c000f2a6:	57                   	push   edi
c000f2a7:	56                   	push   esi
c000f2a8:	53                   	push   ebx
c000f2a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2ad:	83 ec 0c             	sub    esp,0xc
c000f2b0:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000f2b6:	6a 0c                	push   0xc
c000f2b8:	e8 60 78 ff ff       	call   c0006b1d <malloc>
c000f2bd:	89 c3                	mov    ebx,eax
c000f2bf:	58                   	pop    eax
c000f2c0:	5a                   	pop    edx
c000f2c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f2c5:	53                   	push   ebx
c000f2c6:	e8 b3 fe ff ff       	call   c000f17e <EnvVarContainer::EnvVarContainer(Process*)>
c000f2cb:	8b 07                	mov    eax,DWORD PTR [edi]
c000f2cd:	89 03                	mov    DWORD PTR [ebx],eax
c000f2cf:	c1 e0 03             	shl    eax,0x3
c000f2d2:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2d5:	e8 43 78 ff ff       	call   c0006b1d <malloc>
c000f2da:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000f2dd:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000f2df:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000f2e2:	c1 e1 03             	shl    ecx,0x3
c000f2e5:	89 c7                	mov    edi,eax
c000f2e7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2e9:	83 c4 10             	add    esp,0x10
c000f2ec:	89 d8                	mov    eax,ebx
c000f2ee:	5b                   	pop    ebx
c000f2ef:	5e                   	pop    esi
c000f2f0:	5f                   	pop    edi
c000f2f1:	c3                   	ret    

c000f2f2 <Krnl::loadSystemEnv()>:
c000f2f2:	53                   	push   ebx
c000f2f3:	83 ec 14             	sub    esp,0x14
c000f2f6:	6a 0c                	push   0xc
c000f2f8:	e8 20 78 ff ff       	call   c0006b1d <malloc>
c000f2fd:	89 c3                	mov    ebx,eax
c000f2ff:	58                   	pop    eax
c000f300:	5a                   	pop    edx
c000f301:	ff 35 f0 26 02 c0    	push   DWORD PTR ds:0xc00226f0
c000f307:	53                   	push   ebx
c000f308:	e8 71 fe ff ff       	call   c000f17e <EnvVarContainer::EnvVarContainer(Process*)>
c000f30d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f310:	89 1d 74 1c 02 c0    	mov    DWORD PTR ds:0xc0021c74,ebx
c000f316:	e8 47 fe ff ff       	call   c000f162 <EnvVarContainer::__loadSystem()>
c000f31b:	83 c4 18             	add    esp,0x18
c000f31e:	5b                   	pop    ebx
c000f31f:	c3                   	ret    

c000f320 <Krnl::loadUserEnv()>:
c000f320:	53                   	push   ebx
c000f321:	83 ec 14             	sub    esp,0x14
c000f324:	6a 0c                	push   0xc
c000f326:	e8 f2 77 ff ff       	call   c0006b1d <malloc>
c000f32b:	89 c3                	mov    ebx,eax
c000f32d:	58                   	pop    eax
c000f32e:	5a                   	pop    edx
c000f32f:	ff 35 f0 26 02 c0    	push   DWORD PTR ds:0xc00226f0
c000f335:	53                   	push   ebx
c000f336:	e8 43 fe ff ff       	call   c000f17e <EnvVarContainer::EnvVarContainer(Process*)>
c000f33b:	89 1d 70 1c 02 c0    	mov    DWORD PTR ds:0xc0021c70,ebx
c000f341:	83 c4 18             	add    esp,0x18
c000f344:	5b                   	pop    ebx
c000f345:	c3                   	ret    

c000f346 <Krnl::flushEnv()>:
c000f346:	c3                   	ret    

c000f347 <Krnl::getProcessTotalEnvCount(Process*)>:
c000f347:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f34b:	8b 15 70 1c 02 c0    	mov    edx,DWORD PTR ds:0xc0021c70
c000f351:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000f357:	a1 74 1c 02 c0       	mov    eax,ds:0xc0021c74
c000f35c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f35e:	03 01                	add    eax,DWORD PTR [ecx]
c000f360:	85 d2                	test   edx,edx
c000f362:	74 02                	je     c000f366 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c000f364:	03 02                	add    eax,DWORD PTR [edx]
c000f366:	c3                   	ret    

c000f367 <Krnl::getProcessEnvPair(Process*, int)>:
c000f367:	57                   	push   edi
c000f368:	56                   	push   esi
c000f369:	8b 35 70 1c 02 c0    	mov    esi,DWORD PTR ds:0xc0021c70
c000f36f:	53                   	push   ebx
c000f370:	85 f6                	test   esi,esi
c000f372:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f376:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f37a:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000f380:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f384:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f386:	75 16                	jne    c000f39e <Krnl::getProcessEnvPair(Process*, int)+0x37>
c000f388:	39 c2                	cmp    edx,eax
c000f38a:	7c 16                	jl     c000f3a2 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c000f38c:	8b 0d 74 1c 02 c0    	mov    ecx,DWORD PTR ds:0xc0021c74
c000f392:	8b 31                	mov    esi,DWORD PTR [ecx]
c000f394:	01 c6                	add    esi,eax
c000f396:	39 d6                	cmp    esi,edx
c000f398:	7e 3c                	jle    c000f3d6 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c000f39a:	29 c2                	sub    edx,eax
c000f39c:	eb 04                	jmp    c000f3a2 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c000f39e:	39 c2                	cmp    edx,eax
c000f3a0:	7d 05                	jge    c000f3a7 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c000f3a2:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000f3a5:	eb 20                	jmp    c000f3c7 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c000f3a7:	8b 3e                	mov    edi,DWORD PTR [esi]
c000f3a9:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000f3ac:	39 d1                	cmp    ecx,edx
c000f3ae:	7e 04                	jle    c000f3b4 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c000f3b0:	29 c2                	sub    edx,eax
c000f3b2:	eb 10                	jmp    c000f3c4 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c000f3b4:	8b 35 74 1c 02 c0    	mov    esi,DWORD PTR ds:0xc0021c74
c000f3ba:	03 0e                	add    ecx,DWORD PTR [esi]
c000f3bc:	39 d1                	cmp    ecx,edx
c000f3be:	7e 16                	jle    c000f3d6 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c000f3c0:	29 c2                	sub    edx,eax
c000f3c2:	29 fa                	sub    edx,edi
c000f3c4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000f3c7:	8d 14 d0             	lea    edx,[eax+edx*8]
c000f3ca:	8b 02                	mov    eax,DWORD PTR [edx]
c000f3cc:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f3cf:	89 03                	mov    DWORD PTR [ebx],eax
c000f3d1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000f3d4:	eb 1d                	jmp    c000f3f3 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c000f3d6:	83 ec 0c             	sub    esp,0xc
c000f3d9:	68 66 da 01 c0       	push   0xc001da66
c000f3de:	e8 18 00 00 00       	call   c000f3fb <Krnl::panic(char const*)>
c000f3e3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000f3e9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000f3f0:	83 c4 10             	add    esp,0x10
c000f3f3:	89 d8                	mov    eax,ebx
c000f3f5:	5b                   	pop    ebx
c000f3f6:	5e                   	pop    esi
c000f3f7:	5f                   	pop    edi
c000f3f8:	c2 04 00             	ret    0x4

c000f3fb <Krnl::panic(char const*)>:
c000f3fb:	53                   	push   ebx
c000f3fc:	83 ec 10             	sub    esp,0x10
c000f3ff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f403:	fa                   	cli    
c000f404:	c6 05 80 1c 02 c0 01 	mov    BYTE PTR ds:0xc0021c80,0x1
c000f40b:	53                   	push   ebx
c000f40c:	68 80 da 01 c0       	push   0xc001da80
c000f411:	e8 96 a4 ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c000f416:	83 c4 0c             	add    esp,0xc
c000f419:	a1 54 f2 01 c0       	mov    eax,ds:0xc001f254
c000f41e:	6a 01                	push   0x1
c000f420:	6a 0f                	push   0xf
c000f422:	50                   	push   eax
c000f423:	e8 78 82 ff ff       	call   c00076a0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000f428:	5a                   	pop    edx
c000f429:	8b 0d 54 f2 01 c0    	mov    ecx,DWORD PTR ds:0xc001f254
c000f42f:	51                   	push   ecx
c000f430:	e8 63 84 ff ff       	call   c0007898 <VgaText::clearScreen()>
c000f435:	58                   	pop    eax
c000f436:	8b 0d 54 f2 01 c0    	mov    ecx,DWORD PTR ds:0xc001f254
c000f43c:	5a                   	pop    edx
c000f43d:	68 b1 da 01 c0       	push   0xc001dab1
c000f442:	51                   	push   ecx
c000f443:	e8 90 82 ff ff       	call   c00076d8 <VgaText::setTitle(char*)>
c000f448:	83 c4 0c             	add    esp,0xc
c000f44b:	a1 54 f2 01 c0       	mov    eax,ds:0xc001f254
c000f450:	6a 01                	push   0x1
c000f452:	6a 0f                	push   0xf
c000f454:	50                   	push   eax
c000f455:	e8 46 82 ff ff       	call   c00076a0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000f45a:	58                   	pop    eax
c000f45b:	8b 0d 54 f2 01 c0    	mov    ecx,DWORD PTR ds:0xc001f254
c000f461:	5a                   	pop    edx
c000f462:	68 99 da 01 c0       	push   0xc001da99
c000f467:	51                   	push   ecx
c000f468:	e8 1f 87 ff ff       	call   c0007b8c <VgaText::puts(char const*)>
c000f46d:	83 c4 0c             	add    esp,0xc
c000f470:	a1 54 f2 01 c0       	mov    eax,ds:0xc001f254
c000f475:	6a 0f                	push   0xf
c000f477:	6a 01                	push   0x1
c000f479:	50                   	push   eax
c000f47a:	e8 21 82 ff ff       	call   c00076a0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000f47f:	58                   	pop    eax
c000f480:	8b 0d 54 f2 01 c0    	mov    ecx,DWORD PTR ds:0xc001f254
c000f486:	5a                   	pop    edx
c000f487:	68 a2 da 01 c0       	push   0xc001daa2
c000f48c:	51                   	push   ecx
c000f48d:	e8 fa 86 ff ff       	call   c0007b8c <VgaText::puts(char const*)>
c000f492:	83 c4 0c             	add    esp,0xc
c000f495:	a1 54 f2 01 c0       	mov    eax,ds:0xc001f254
c000f49a:	6a 01                	push   0x1
c000f49c:	6a 0f                	push   0xf
c000f49e:	50                   	push   eax
c000f49f:	e8 fc 81 ff ff       	call   c00076a0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000f4a4:	58                   	pop    eax
c000f4a5:	8b 0d 54 f2 01 c0    	mov    ecx,DWORD PTR ds:0xc001f254
c000f4ab:	5a                   	pop    edx
c000f4ac:	68 af da 01 c0       	push   0xc001daaf
c000f4b1:	51                   	push   ecx
c000f4b2:	e8 d5 86 ff ff       	call   c0007b8c <VgaText::puts(char const*)>
c000f4b7:	58                   	pop    eax
c000f4b8:	8b 0d 54 f2 01 c0    	mov    ecx,DWORD PTR ds:0xc001f254
c000f4be:	5a                   	pop    edx
c000f4bf:	68 c0 da 01 c0       	push   0xc001dac0
c000f4c4:	51                   	push   ecx
c000f4c5:	e8 c2 86 ff ff       	call   c0007b8c <VgaText::puts(char const*)>
c000f4ca:	58                   	pop    eax
c000f4cb:	8b 0d 54 f2 01 c0    	mov    ecx,DWORD PTR ds:0xc001f254
c000f4d1:	5a                   	pop    edx
c000f4d2:	68 b2 da 01 c0       	push   0xc001dab2
c000f4d7:	51                   	push   ecx
c000f4d8:	e8 af 86 ff ff       	call   c0007b8c <VgaText::puts(char const*)>
c000f4dd:	58                   	pop    eax
c000f4de:	8b 0d 54 f2 01 c0    	mov    ecx,DWORD PTR ds:0xc001f254
c000f4e4:	5a                   	pop    edx
c000f4e5:	53                   	push   ebx
c000f4e6:	51                   	push   ecx
c000f4e7:	e8 a0 86 ff ff       	call   c0007b8c <VgaText::puts(char const*)>
c000f4ec:	5b                   	pop    ebx
c000f4ed:	58                   	pop    eax
c000f4ee:	a1 54 f2 01 c0       	mov    eax,ds:0xc001f254
c000f4f3:	68 af da 01 c0       	push   0xc001daaf
c000f4f8:	50                   	push   eax
c000f4f9:	e8 8e 86 ff ff       	call   c0007b8c <VgaText::puts(char const*)>
c000f4fe:	83 c4 10             	add    esp,0x10
c000f501:	eb fe                	jmp    c000f501 <Krnl::panic(char const*)+0x106>

c000f503 <Krnl::powerThread(void*)>:
c000f503:	83 ec 0c             	sub    esp,0xc
c000f506:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c000f50b:	48                   	dec    eax
c000f50c:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c000f511:	75 01                	jne    c000f514 <Krnl::powerThread(void*)+0x11>
c000f513:	fb                   	sti    
c000f514:	83 ec 0c             	sub    esp,0xc
c000f517:	c6 05 a0 1c 02 c0 00 	mov    BYTE PTR ds:0xc0021ca0,0x0
c000f51e:	6a 0a                	push   0xa
c000f520:	e8 3b 35 00 00       	call   c0012a60 <sleep(unsigned int)>
c000f525:	83 05 e4 1c 02 c0 0a 	add    DWORD PTR ds:0xc0021ce4,0xa
c000f52c:	83 c4 10             	add    esp,0x10
c000f52f:	eb e3                	jmp    c000f514 <Krnl::powerThread(void*)+0x11>

c000f531 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c000f531:	57                   	push   edi
c000f532:	b9 09 00 00 00       	mov    ecx,0x9
c000f537:	56                   	push   esi
c000f538:	bf c0 1c 02 c0       	mov    edi,0xc0021cc0
c000f53d:	fc                   	cld    
c000f53e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f542:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f544:	5e                   	pop    esi
c000f545:	5f                   	pop    edi
c000f546:	c3                   	ret    

c000f547 <Krnl::userIOReceived()>:
c000f547:	c7 05 e4 1c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021ce4,0x0
c000f551:	c3                   	ret    

c000f552 <Krnl::handlePowerButton()>:
c000f552:	83 ec 0c             	sub    esp,0xc
c000f555:	a1 c0 1c 02 c0       	mov    eax,ds:0xc0021cc0
c000f55a:	83 f8 02             	cmp    eax,0x2
c000f55d:	75 10                	jne    c000f56f <Krnl::handlePowerButton()+0x1d>
c000f55f:	83 ec 0c             	sub    esp,0xc
c000f562:	ff 35 08 f2 01 c0    	push   DWORD PTR ds:0xc001f208
c000f568:	e8 51 6c ff ff       	call   c00061be <Computer::shutdown()>
c000f56d:	eb 11                	jmp    c000f580 <Krnl::handlePowerButton()+0x2e>
c000f56f:	48                   	dec    eax
c000f570:	75 11                	jne    c000f583 <Krnl::handlePowerButton()+0x31>
c000f572:	83 ec 0c             	sub    esp,0xc
c000f575:	ff 35 08 f2 01 c0    	push   DWORD PTR ds:0xc001f208
c000f57b:	e8 6e 6c ff ff       	call   c00061ee <Computer::sleep()>
c000f580:	83 c4 10             	add    esp,0x10
c000f583:	83 c4 0c             	add    esp,0xc
c000f586:	c3                   	ret    

c000f587 <Krnl::handleSleepButton()>:
c000f587:	83 ec 0c             	sub    esp,0xc
c000f58a:	a1 c4 1c 02 c0       	mov    eax,ds:0xc0021cc4
c000f58f:	83 f8 02             	cmp    eax,0x2
c000f592:	75 10                	jne    c000f5a4 <Krnl::handleSleepButton()+0x1d>
c000f594:	83 ec 0c             	sub    esp,0xc
c000f597:	ff 35 08 f2 01 c0    	push   DWORD PTR ds:0xc001f208
c000f59d:	e8 1c 6c ff ff       	call   c00061be <Computer::shutdown()>
c000f5a2:	eb 11                	jmp    c000f5b5 <Krnl::handleSleepButton()+0x2e>
c000f5a4:	48                   	dec    eax
c000f5a5:	75 11                	jne    c000f5b8 <Krnl::handleSleepButton()+0x31>
c000f5a7:	83 ec 0c             	sub    esp,0xc
c000f5aa:	ff 35 08 f2 01 c0    	push   DWORD PTR ds:0xc001f208
c000f5b0:	e8 39 6c ff ff       	call   c00061ee <Computer::sleep()>
c000f5b5:	83 c4 10             	add    esp,0x10
c000f5b8:	83 c4 0c             	add    esp,0xc
c000f5bb:	c3                   	ret    

c000f5bc <Krnl::setupPowerManager()>:
c000f5bc:	83 ec 0c             	sub    esp,0xc
c000f5bf:	c7 05 e4 1c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021ce4,0x0
c000f5c9:	68 f0 00 00 00       	push   0xf0
c000f5ce:	c6 05 a0 1c 02 c0 00 	mov    BYTE PTR ds:0xc0021ca0,0x0
c000f5d5:	6a 00                	push   0x0
c000f5d7:	68 03 f5 00 c0       	push   0xc000f503
c000f5dc:	ff 35 f0 26 02 c0    	push   DWORD PTR ds:0xc00226f0
c000f5e2:	e8 49 2f 00 00       	call   c0012530 <Process::createThread(void (*)(void*), void*, int)>
c000f5e7:	c7 05 c0 1c 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0021cc0,0x2
c000f5f1:	c7 05 c4 1c 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0021cc4,0x1
c000f5fb:	c7 05 c8 1c 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0021cc8,0x3
c000f605:	c7 05 cc 1c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021ccc,0x0
c000f60f:	c7 05 d8 1c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021cd8,0x0
c000f619:	c7 05 d0 1c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021cd0,0x0
c000f623:	c7 05 dc 1c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021cdc,0x0
c000f62d:	c7 05 d4 1c 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0021cd4,0x3c
c000f637:	c7 05 e0 1c 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0021ce0,0x3c
c000f641:	83 c4 1c             	add    esp,0x1c
c000f644:	c3                   	ret    

c000f645 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c000f645:	55                   	push   ebp
c000f646:	57                   	push   edi
c000f647:	56                   	push   esi
c000f648:	53                   	push   ebx
c000f649:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000f64f:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c000f656:	8a 1e                	mov    bl,BYTE PTR [esi]
c000f658:	8d 6e 01             	lea    ebp,[esi+0x1]
c000f65b:	80 fb 40             	cmp    bl,0x40
c000f65e:	75 1b                	jne    c000f67b <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c000f660:	8a 16                	mov    dl,BYTE PTR [esi]
c000f662:	84 d2                	test   dl,dl
c000f664:	0f 84 f1 00 00 00    	je     c000f75b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f66a:	8d 46 01             	lea    eax,[esi+0x1]
c000f66d:	80 fa 3a             	cmp    dl,0x3a
c000f670:	74 04                	je     c000f676 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c000f672:	89 c6                	mov    esi,eax
c000f674:	eb ea                	jmp    c000f660 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c000f676:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000f679:	89 c6                	mov    esi,eax
c000f67b:	50                   	push   eax
c000f67c:	6a 40                	push   0x40
c000f67e:	6a 00                	push   0x0
c000f680:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f684:	50                   	push   eax
c000f685:	e8 66 0e ff ff       	call   c00004f0 <memset>
c000f68a:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c000f691:	31 c0                	xor    eax,eax
c000f693:	83 c4 10             	add    esp,0x10
c000f696:	8a 0f                	mov    cl,BYTE PTR [edi]
c000f698:	84 c9                	test   cl,cl
c000f69a:	0f 84 bb 00 00 00    	je     c000f75b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f6a0:	3d c7 00 00 00       	cmp    eax,0xc7
c000f6a5:	0f 8f b0 00 00 00    	jg     c000f75b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f6ab:	80 f9 0a             	cmp    cl,0xa
c000f6ae:	0f 85 98 00 00 00    	jne    c000f74c <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c000f6b4:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c000f6b9:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c000f6bd:	a8 df                	test   al,0xdf
c000f6bf:	0f 94 c1             	sete   cl
c000f6c2:	3c 23                	cmp    al,0x23
c000f6c4:	0f 94 c2             	sete   dl
c000f6c7:	08 d1                	or     cl,dl
c000f6c9:	75 4a                	jne    c000f715 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000f6cb:	8d 50 f7             	lea    edx,[eax-0x9]
c000f6ce:	80 fa 01             	cmp    dl,0x1
c000f6d1:	76 42                	jbe    c000f715 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000f6d3:	3c 5b                	cmp    al,0x5b
c000f6d5:	75 42                	jne    c000f719 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c000f6d7:	80 fb 40             	cmp    bl,0x40
c000f6da:	75 39                	jne    c000f715 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000f6dc:	83 ec 0c             	sub    esp,0xc
c000f6df:	8d 54 24 65          	lea    edx,[esp+0x65]
c000f6e3:	52                   	push   edx
c000f6e4:	e8 77 0e ff ff       	call   c0000560 <strlen>
c000f6e9:	83 c4 10             	add    esp,0x10
c000f6ec:	83 f8 3f             	cmp    eax,0x3f
c000f6ef:	77 6a                	ja     c000f75b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f6f1:	50                   	push   eax
c000f6f2:	50                   	push   eax
c000f6f3:	8d 54 24 61          	lea    edx,[esp+0x61]
c000f6f7:	52                   	push   edx
c000f6f8:	8d 54 24 24          	lea    edx,[esp+0x24]
c000f6fc:	52                   	push   edx
c000f6fd:	e8 1e 0f ff ff       	call   c0000620 <strcpy>
c000f702:	58                   	pop    eax
c000f703:	8d 54 24 24          	lea    edx,[esp+0x24]
c000f707:	52                   	push   edx
c000f708:	e8 53 0e ff ff       	call   c0000560 <strlen>
c000f70d:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c000f712:	83 c4 10             	add    esp,0x10
c000f715:	31 d2                	xor    edx,edx
c000f717:	eb 3a                	jmp    c000f753 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c000f719:	80 fb 40             	cmp    bl,0x40
c000f71c:	74 06                	je     c000f724 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c000f71e:	8d 44 24 58          	lea    eax,[esp+0x58]
c000f722:	eb 20                	jmp    c000f744 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c000f724:	50                   	push   eax
c000f725:	50                   	push   eax
c000f726:	55                   	push   ebp
c000f727:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f72b:	50                   	push   eax
c000f72c:	e8 cf 0f ff ff       	call   c0000700 <strcmp>
c000f731:	83 c4 10             	add    esp,0x10
c000f734:	85 c0                	test   eax,eax
c000f736:	75 dd                	jne    c000f715 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000f738:	eb e4                	jmp    c000f71e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c000f73a:	8d 50 01             	lea    edx,[eax+0x1]
c000f73d:	80 f9 3d             	cmp    cl,0x3d
c000f740:	74 1d                	je     c000f75f <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c000f742:	89 d0                	mov    eax,edx
c000f744:	8a 08                	mov    cl,BYTE PTR [eax]
c000f746:	84 c9                	test   cl,cl
c000f748:	75 f0                	jne    c000f73a <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c000f74a:	eb 0f                	jmp    c000f75b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f74c:	8d 50 01             	lea    edx,[eax+0x1]
c000f74f:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c000f753:	47                   	inc    edi
c000f754:	89 d0                	mov    eax,edx
c000f756:	e9 3b ff ff ff       	jmp    c000f696 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c000f75b:	31 c0                	xor    eax,eax
c000f75d:	eb 33                	jmp    c000f792 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c000f75f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f763:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f766:	50                   	push   eax
c000f767:	50                   	push   eax
c000f768:	8d 44 24 60          	lea    eax,[esp+0x60]
c000f76c:	50                   	push   eax
c000f76d:	56                   	push   esi
c000f76e:	e8 8d 0f ff ff       	call   c0000700 <strcmp>
c000f773:	83 c4 10             	add    esp,0x10
c000f776:	85 c0                	test   eax,eax
c000f778:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f77c:	75 97                	jne    c000f715 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000f77e:	51                   	push   ecx
c000f77f:	51                   	push   ecx
c000f780:	52                   	push   edx
c000f781:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c000f788:	e8 93 0e ff ff       	call   c0000620 <strcpy>
c000f78d:	83 c4 10             	add    esp,0x10
c000f790:	b0 01                	mov    al,0x1
c000f792:	81 c4 2c 01 00 00    	add    esp,0x12c
c000f798:	5b                   	pop    ebx
c000f799:	5e                   	pop    esi
c000f79a:	5f                   	pop    edi
c000f79b:	5d                   	pop    ebp
c000f79c:	c3                   	ret    

c000f79d <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c000f79d:	57                   	push   edi
c000f79e:	56                   	push   esi
c000f79f:	53                   	push   ebx
c000f7a0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000f7a6:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c000f7ad:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c000f7b4:	53                   	push   ebx
c000f7b5:	e8 a6 0d ff ff       	call   c0000560 <strlen>
c000f7ba:	89 34 24             	mov    DWORD PTR [esp],esi
c000f7bd:	89 c7                	mov    edi,eax
c000f7bf:	e8 9c 0d ff ff       	call   c0000560 <strlen>
c000f7c4:	83 c4 10             	add    esp,0x10
c000f7c7:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c000f7cb:	3d ff 00 00 00       	cmp    eax,0xff
c000f7d0:	0f 87 d3 00 00 00    	ja     c000f8a9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c000f7d6:	57                   	push   edi
c000f7d7:	57                   	push   edi
c000f7d8:	56                   	push   esi
c000f7d9:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000f7dd:	56                   	push   esi
c000f7de:	e8 3d 0e ff ff       	call   c0000620 <strcpy>
c000f7e3:	58                   	pop    eax
c000f7e4:	5a                   	pop    edx
c000f7e5:	68 df dd 01 c0       	push   0xc001dddf
c000f7ea:	56                   	push   esi
c000f7eb:	e8 f0 0f ff ff       	call   c00007e0 <strcat>
c000f7f0:	59                   	pop    ecx
c000f7f1:	5f                   	pop    edi
c000f7f2:	53                   	push   ebx
c000f7f3:	56                   	push   esi
c000f7f4:	e8 e7 0f ff ff       	call   c00007e0 <strcat>
c000f7f9:	58                   	pop    eax
c000f7fa:	5a                   	pop    edx
c000f7fb:	68 fa da 01 c0       	push   0xc001dafa
c000f800:	56                   	push   esi
c000f801:	e8 da 0f ff ff       	call   c00007e0 <strcat>
c000f806:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000f80d:	e8 0b 73 ff ff       	call   c0006b1d <malloc>
c000f812:	83 c4 0c             	add    esp,0xc
c000f815:	89 c3                	mov    ebx,eax
c000f817:	ff 35 f0 26 02 c0    	push   DWORD PTR ds:0xc00226f0
c000f81d:	56                   	push   esi
c000f81e:	50                   	push   eax
c000f81f:	e8 fe a5 ff ff       	call   c0009e22 <File::File(char const*, Process*)>
c000f824:	83 c4 10             	add    esp,0x10
c000f827:	85 db                	test   ebx,ebx
c000f829:	74 7e                	je     c000f8a9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c000f82b:	51                   	push   ecx
c000f82c:	51                   	push   ecx
c000f82d:	6a 01                	push   0x1
c000f82f:	53                   	push   ebx
c000f830:	e8 ad a6 ff ff       	call   c0009ee2 <File::open(FileOpenMode)>
c000f835:	83 c4 10             	add    esp,0x10
c000f838:	85 c0                	test   eax,eax
c000f83a:	74 08                	je     c000f844 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c000f83c:	83 ec 0c             	sub    esp,0xc
c000f83f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f841:	53                   	push   ebx
c000f842:	eb 5f                	jmp    c000f8a3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c000f844:	52                   	push   edx
c000f845:	8d 44 24 17          	lea    eax,[esp+0x17]
c000f849:	50                   	push   eax
c000f84a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000f84e:	50                   	push   eax
c000f84f:	53                   	push   ebx
c000f850:	e8 39 a9 ff ff       	call   c000a18e <File::stat(unsigned long long*, bool*)>
c000f855:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f859:	83 c4 10             	add    esp,0x10
c000f85c:	89 c1                	mov    ecx,eax
c000f85e:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c000f862:	74 31                	je     c000f895 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c000f864:	83 ec 0c             	sub    esp,0xc
c000f867:	50                   	push   eax
c000f868:	e8 b0 72 ff ff       	call   c0006b1d <malloc>
c000f86d:	89 c6                	mov    esi,eax
c000f86f:	58                   	pop    eax
c000f870:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f872:	8d 54 24 20          	lea    edx,[esp+0x20]
c000f876:	52                   	push   edx
c000f877:	56                   	push   esi
c000f878:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f87c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f880:	53                   	push   ebx
c000f881:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000f884:	83 c4 20             	add    esp,0x20
c000f887:	85 c0                	test   eax,eax
c000f889:	75 0a                	jne    c000f895 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c000f88b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f88f:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f893:	74 18                	je     c000f8ad <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c000f895:	83 ec 0c             	sub    esp,0xc
c000f898:	53                   	push   ebx
c000f899:	e8 a2 a6 ff ff       	call   c0009f40 <File::close()>
c000f89e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f8a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f8a3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f8a6:	83 c4 10             	add    esp,0x10
c000f8a9:	31 c0                	xor    eax,eax
c000f8ab:	eb 3b                	jmp    c000f8e8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c000f8ad:	83 ec 0c             	sub    esp,0xc
c000f8b0:	53                   	push   ebx
c000f8b1:	e8 8a a6 ff ff       	call   c0009f40 <File::close()>
c000f8b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f8b8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f8bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f8be:	83 c4 0c             	add    esp,0xc
c000f8c1:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c000f8c8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c000f8cf:	56                   	push   esi
c000f8d0:	e8 70 fd ff ff       	call   c000f645 <Reg::findLineFromLoadedData(char*, char*, char*)>
c000f8d5:	89 34 24             	mov    DWORD PTR [esp],esi
c000f8d8:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000f8dc:	e8 4c 72 ff ff       	call   c0006b2d <free>
c000f8e1:	83 c4 10             	add    esp,0x10
c000f8e4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f8e8:	81 c4 20 01 00 00    	add    esp,0x120
c000f8ee:	5b                   	pop    ebx
c000f8ef:	5e                   	pop    esi
c000f8f0:	5f                   	pop    edi
c000f8f1:	c3                   	ret    

c000f8f2 <Reg::getLine(char*, char*, char*)>:
c000f8f2:	57                   	push   edi
c000f8f3:	56                   	push   esi
c000f8f4:	53                   	push   ebx
c000f8f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8f9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8fd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000f901:	57                   	push   edi
c000f902:	56                   	push   esi
c000f903:	53                   	push   ebx
c000f904:	68 ff da 01 c0       	push   0xc001daff
c000f909:	e8 8f fe ff ff       	call   c000f79d <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c000f90e:	83 c4 10             	add    esp,0x10
c000f911:	84 c0                	test   al,al
c000f913:	75 10                	jne    c000f925 <Reg::getLine(char*, char*, char*)+0x33>
c000f915:	57                   	push   edi
c000f916:	56                   	push   esi
c000f917:	53                   	push   ebx
c000f918:	68 24 db 01 c0       	push   0xc001db24
c000f91d:	e8 7b fe ff ff       	call   c000f79d <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c000f922:	83 c4 10             	add    esp,0x10
c000f925:	5b                   	pop    ebx
c000f926:	5e                   	pop    esi
c000f927:	5f                   	pop    edi
c000f928:	c3                   	ret    

c000f929 <Reg::readInt(char*, char*, int*)>:
c000f929:	55                   	push   ebp
c000f92a:	57                   	push   edi
c000f92b:	56                   	push   esi
c000f92c:	53                   	push   ebx
c000f92d:	81 ec f0 00 00 00    	sub    esp,0xf0
c000f933:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000f937:	57                   	push   edi
c000f938:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c000f93f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c000f946:	e8 a7 ff ff ff       	call   c000f8f2 <Reg::getLine(char*, char*, char*)>
c000f94b:	83 c4 10             	add    esp,0x10
c000f94e:	84 c0                	test   al,al
c000f950:	0f 84 b3 00 00 00    	je     c000fa09 <Reg::readInt(char*, char*, int*)+0xe0>
c000f956:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c000f95a:	80 fa 2b             	cmp    dl,0x2b
c000f95d:	74 0c                	je     c000f96b <Reg::readInt(char*, char*, int*)+0x42>
c000f95f:	80 fa 2d             	cmp    dl,0x2d
c000f962:	75 0e                	jne    c000f972 <Reg::readInt(char*, char*, int*)+0x49>
c000f964:	ba 01 00 00 00       	mov    edx,0x1
c000f969:	eb 0b                	jmp    c000f976 <Reg::readInt(char*, char*, int*)+0x4d>
c000f96b:	ba 01 00 00 00       	mov    edx,0x1
c000f970:	eb 02                	jmp    c000f974 <Reg::readInt(char*, char*, int*)+0x4b>
c000f972:	31 d2                	xor    edx,edx
c000f974:	31 c0                	xor    eax,eax
c000f976:	be 0a 00 00 00       	mov    esi,0xa
c000f97b:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c000f980:	75 20                	jne    c000f9a2 <Reg::readInt(char*, char*, int*)+0x79>
c000f982:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c000f986:	80 f9 78             	cmp    cl,0x78
c000f989:	75 0a                	jne    c000f995 <Reg::readInt(char*, char*, int*)+0x6c>
c000f98b:	83 c2 02             	add    edx,0x2
c000f98e:	be 10 00 00 00       	mov    esi,0x10
c000f993:	eb 0d                	jmp    c000f9a2 <Reg::readInt(char*, char*, int*)+0x79>
c000f995:	80 f9 62             	cmp    cl,0x62
c000f998:	75 08                	jne    c000f9a2 <Reg::readInt(char*, char*, int*)+0x79>
c000f99a:	83 c2 02             	add    edx,0x2
c000f99d:	be 02 00 00 00       	mov    esi,0x2
c000f9a2:	01 d7                	add    edi,edx
c000f9a4:	31 d2                	xor    edx,edx
c000f9a6:	8a 1f                	mov    bl,BYTE PTR [edi]
c000f9a8:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c000f9ac:	80 fb 0d             	cmp    bl,0xd
c000f9af:	0f 94 c3             	sete   bl
c000f9b2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000f9b7:	0f 94 c1             	sete   cl
c000f9ba:	08 cb                	or     bl,cl
c000f9bc:	75 3a                	jne    c000f9f8 <Reg::readInt(char*, char*, int*)+0xcf>
c000f9be:	0f af d6             	imul   edx,esi
c000f9c1:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c000f9c6:	83 fe 10             	cmp    esi,0x10
c000f9c9:	75 26                	jne    c000f9f1 <Reg::readInt(char*, char*, int*)+0xc8>
c000f9cb:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000f9cf:	8d 69 bf             	lea    ebp,[ecx-0x41]
c000f9d2:	89 e9                	mov    ecx,ebp
c000f9d4:	80 f9 05             	cmp    cl,0x5
c000f9d7:	77 06                	ja     c000f9df <Reg::readInt(char*, char*, int*)+0xb6>
c000f9d9:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c000f9dd:	eb 16                	jmp    c000f9f5 <Reg::readInt(char*, char*, int*)+0xcc>
c000f9df:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000f9e3:	83 e9 61             	sub    ecx,0x61
c000f9e6:	80 f9 05             	cmp    cl,0x5
c000f9e9:	77 06                	ja     c000f9f1 <Reg::readInt(char*, char*, int*)+0xc8>
c000f9eb:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c000f9ef:	eb 04                	jmp    c000f9f5 <Reg::readInt(char*, char*, int*)+0xcc>
c000f9f1:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c000f9f5:	47                   	inc    edi
c000f9f6:	eb ae                	jmp    c000f9a6 <Reg::readInt(char*, char*, int*)+0x7d>
c000f9f8:	84 c0                	test   al,al
c000f9fa:	74 02                	je     c000f9fe <Reg::readInt(char*, char*, int*)+0xd5>
c000f9fc:	f7 da                	neg    edx
c000f9fe:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c000fa05:	89 10                	mov    DWORD PTR [eax],edx
c000fa07:	88 d8                	mov    al,bl
c000fa09:	81 c4 ec 00 00 00    	add    esp,0xec
c000fa0f:	5b                   	pop    ebx
c000fa10:	5e                   	pop    esi
c000fa11:	5f                   	pop    edi
c000fa12:	5d                   	pop    ebp
c000fa13:	c3                   	ret    

c000fa14 <Reg::readString(char*, char*, char*, int)>:
c000fa14:	57                   	push   edi
c000fa15:	56                   	push   esi
c000fa16:	53                   	push   ebx
c000fa17:	81 ec d4 00 00 00    	sub    esp,0xd4
c000fa1d:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c000fa24:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c000fa28:	57                   	push   edi
c000fa29:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c000fa30:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c000fa37:	e8 b6 fe ff ff       	call   c000f8f2 <Reg::getLine(char*, char*, char*)>
c000fa3c:	83 c4 10             	add    esp,0x10
c000fa3f:	89 c6                	mov    esi,eax
c000fa41:	84 c0                	test   al,al
c000fa43:	74 44                	je     c000fa89 <Reg::readString(char*, char*, char*, int)+0x75>
c000fa45:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c000fa4c:	31 c0                	xor    eax,eax
c000fa4e:	4a                   	dec    edx
c000fa4f:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c000fa52:	84 c9                	test   cl,cl
c000fa54:	74 0f                	je     c000fa65 <Reg::readString(char*, char*, char*, int)+0x51>
c000fa56:	39 c2                	cmp    edx,eax
c000fa58:	7e 0b                	jle    c000fa65 <Reg::readString(char*, char*, char*, int)+0x51>
c000fa5a:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000fa5d:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c000fa62:	40                   	inc    eax
c000fa63:	eb ea                	jmp    c000fa4f <Reg::readString(char*, char*, char*, int)+0x3b>
c000fa65:	83 ec 0c             	sub    esp,0xc
c000fa68:	53                   	push   ebx
c000fa69:	e8 f2 0a ff ff       	call   c0000560 <strlen>
c000fa6e:	83 c4 10             	add    esp,0x10
c000fa71:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c000fa76:	75 11                	jne    c000fa89 <Reg::readString(char*, char*, char*, int)+0x75>
c000fa78:	83 ec 0c             	sub    esp,0xc
c000fa7b:	53                   	push   ebx
c000fa7c:	e8 df 0a ff ff       	call   c0000560 <strlen>
c000fa81:	83 c4 10             	add    esp,0x10
c000fa84:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000fa89:	81 c4 d0 00 00 00    	add    esp,0xd0
c000fa8f:	89 f0                	mov    eax,esi
c000fa91:	5b                   	pop    ebx
c000fa92:	5e                   	pop    esi
c000fa93:	5f                   	pop    edi
c000fa94:	c3                   	ret    

c000fa95 <Reg::readBool(char*, char*, bool*)>:
c000fa95:	83 ec 20             	sub    esp,0x20
c000fa98:	8d 44 24 10          	lea    eax,[esp+0x10]
c000fa9c:	50                   	push   eax
c000fa9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000faa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000faa5:	e8 7f fe ff ff       	call   c000f929 <Reg::readInt(char*, char*, int*)>
c000faaa:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000faaf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fab3:	0f 95 02             	setne  BYTE PTR [edx]
c000fab6:	83 c4 2c             	add    esp,0x2c
c000fab9:	c3                   	ret    

c000faba <Reg::readBoolWithDefault(char*, char*, bool)>:
c000faba:	53                   	push   ebx
c000fabb:	83 ec 1c             	sub    esp,0x1c
c000fabe:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c000fac2:	8d 44 24 13          	lea    eax,[esp+0x13]
c000fac6:	50                   	push   eax
c000fac7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000facb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000facf:	e8 c1 ff ff ff       	call   c000fa95 <Reg::readBool(char*, char*, bool*)>
c000fad4:	83 c4 10             	add    esp,0x10
c000fad7:	84 c0                	test   al,al
c000fad9:	74 04                	je     c000fadf <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c000fadb:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c000fadf:	88 d8                	mov    al,bl
c000fae1:	83 c4 18             	add    esp,0x18
c000fae4:	5b                   	pop    ebx
c000fae5:	c3                   	ret    

c000fae6 <Reg::readIntWithDefault(char*, char*, int)>:
c000fae6:	53                   	push   ebx
c000fae7:	83 ec 1c             	sub    esp,0x1c
c000faea:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000faee:	8d 44 24 10          	lea    eax,[esp+0x10]
c000faf2:	50                   	push   eax
c000faf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000faf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fafb:	e8 29 fe ff ff       	call   c000f929 <Reg::readInt(char*, char*, int*)>
c000fb00:	83 c4 10             	add    esp,0x10
c000fb03:	84 c0                	test   al,al
c000fb05:	74 04                	je     c000fb0b <Reg::readIntWithDefault(char*, char*, int)+0x25>
c000fb07:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fb0b:	89 d8                	mov    eax,ebx
c000fb0d:	83 c4 18             	add    esp,0x18
c000fb10:	5b                   	pop    ebx
c000fb11:	c3                   	ret    

c000fb12 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c000fb12:	57                   	push   edi
c000fb13:	56                   	push   esi
c000fb14:	56                   	push   esi
c000fb15:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fb19:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000fb1d:	56                   	push   esi
c000fb1e:	57                   	push   edi
c000fb1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb27:	e8 e8 fe ff ff       	call   c000fa14 <Reg::readString(char*, char*, char*, int)>
c000fb2c:	83 c4 10             	add    esp,0x10
c000fb2f:	84 c0                	test   al,al
c000fb31:	75 1a                	jne    c000fb4d <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c000fb33:	51                   	push   ecx
c000fb34:	56                   	push   esi
c000fb35:	6a 00                	push   0x0
c000fb37:	57                   	push   edi
c000fb38:	e8 b3 09 ff ff       	call   c00004f0 <memset>
c000fb3d:	8d 4e ff             	lea    ecx,[esi-0x1]
c000fb40:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000fb44:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fb46:	83 c4 10             	add    esp,0x10
c000fb49:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000fb4d:	89 f8                	mov    eax,edi
c000fb4f:	5a                   	pop    edx
c000fb50:	5e                   	pop    esi
c000fb51:	5f                   	pop    edi
c000fb52:	c3                   	ret    

c000fb53 <Sys::eject(regs*)>:
c000fb53:	83 ec 0c             	sub    esp,0xc
c000fb56:	83 ca ff             	or     edx,0xffffffff
c000fb59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb5d:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c000fb60:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000fb65:	83 e9 41             	sub    ecx,0x41
c000fb68:	83 f9 19             	cmp    ecx,0x19
c000fb6b:	77 18                	ja     c000fb85 <Sys::eject(regs*)+0x32>
c000fb6d:	8b 0c 8d 60 17 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde8a0]
c000fb74:	85 c9                	test   ecx,ecx
c000fb76:	74 0d                	je     c000fb85 <Sys::eject(regs*)+0x32>
c000fb78:	83 ec 0c             	sub    esp,0xc
c000fb7b:	51                   	push   ecx
c000fb7c:	e8 a9 c3 ff ff       	call   c000bf2a <LogicalDisk::eject()>
c000fb81:	83 c4 10             	add    esp,0x10
c000fb84:	99                   	cdq    
c000fb85:	83 c4 0c             	add    esp,0xc
c000fb88:	c3                   	ret    

c000fb89 <Sys::exit(regs*)>:
c000fb89:	83 ec 18             	sub    esp,0x18
c000fb8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fb90:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000fb93:	e8 dc 34 00 00       	call   c0013074 <terminateTask(int)>
c000fb98:	83 c8 ff             	or     eax,0xffffffff
c000fb9b:	83 c4 1c             	add    esp,0x1c
c000fb9e:	89 c2                	mov    edx,eax
c000fba0:	c3                   	ret    

c000fba1 <Sys::getCwd(regs*)>:
c000fba1:	83 ec 10             	sub    esp,0x10
c000fba4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fba8:	ff 70 28             	push   DWORD PTR [eax+0x28]
c000fbab:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000fbae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fbb3:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c000fbb6:	e8 69 a0 ff ff       	call   c0009c24 <Fs::getcwd(Process*, char*, int)>
c000fbbb:	83 c4 1c             	add    esp,0x1c
c000fbbe:	99                   	cdq    
c000fbbf:	c3                   	ret    

c000fbc0 <Sys::getPID(regs*)>:
c000fbc0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fbc5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fbc8:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbca:	99                   	cdq    
c000fbcb:	c3                   	ret    

c000fbcc <Sys::getRAMData(regs*)>:
c000fbcc:	8b 0d 38 f2 01 c0    	mov    ecx,DWORD PTR ds:0xc001f238
c000fbd2:	69 05 34 f2 01 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc001f234,0xc8
c000fbdc:	99                   	cdq    
c000fbdd:	f7 f9                	idiv   ecx
c000fbdf:	c1 e0 18             	shl    eax,0x18
c000fbe2:	09 c8                	or     eax,ecx
c000fbe4:	99                   	cdq    
c000fbe5:	c3                   	ret    

c000fbe6 <Sys::getVGAPtr(regs*)>:
c000fbe6:	55                   	push   ebp
c000fbe7:	57                   	push   edi
c000fbe8:	56                   	push   esi
c000fbe9:	53                   	push   ebx
c000fbea:	83 ec 18             	sub    esp,0x18
c000fbed:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000fbf1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000fbf4:	e8 7b 2f 00 00       	call   c0012b74 <Thr::processFromPID(int)>
c000fbf9:	83 c4 10             	add    esp,0x10
c000fbfc:	89 c1                	mov    ecx,eax
c000fbfe:	b8 01 00 00 00       	mov    eax,0x1
c000fc03:	85 c9                	test   ecx,ecx
c000fc05:	74 57                	je     c000fc5e <Sys::getVGAPtr(regs*)+0x78>
c000fc07:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c000fc0d:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c000fc11:	74 0c                	je     c000fc1f <Sys::getVGAPtr(regs*)+0x39>
c000fc13:	83 ec 0c             	sub    esp,0xc
c000fc16:	55                   	push   ebp
c000fc17:	e8 31 7c ff ff       	call   c000784d <setActiveTerminal(VgaText*)>
c000fc1c:	83 c4 10             	add    esp,0x10
c000fc1f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c000fc22:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c000fc25:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c000fc2a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc2c:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000fc2f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000fc32:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c000fc38:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000fc3b:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000fc3e:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c000fc44:	50                   	push   eax
c000fc45:	50                   	push   eax
c000fc46:	68 3f db 01 c0       	push   0xc001db3f
c000fc4b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000fc4e:	05 a8 0f 00 00       	add    eax,0xfa8
c000fc53:	50                   	push   eax
c000fc54:	e8 c7 09 ff ff       	call   c0000620 <strcpy>
c000fc59:	83 c4 10             	add    esp,0x10
c000fc5c:	31 c0                	xor    eax,eax
c000fc5e:	83 c4 0c             	add    esp,0xc
c000fc61:	31 d2                	xor    edx,edx
c000fc63:	5b                   	pop    ebx
c000fc64:	5e                   	pop    esi
c000fc65:	5f                   	pop    edi
c000fc66:	5d                   	pop    ebp
c000fc67:	c3                   	ret    

c000fc68 <Sys::loadDLL(regs*)>:
c000fc68:	56                   	push   esi
c000fc69:	53                   	push   ebx
c000fc6a:	31 d2                	xor    edx,edx
c000fc6c:	51                   	push   ecx
c000fc6d:	b8 01 00 00 00       	mov    eax,0x1
c000fc72:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fc76:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c000fc7a:	0f 84 8c 00 00 00    	je     c000fd0c <Sys::loadDLL(regs*)+0xa4>
c000fc80:	83 ec 0c             	sub    esp,0xc
c000fc83:	68 14 01 00 00       	push   0x114
c000fc88:	e8 90 6e ff ff       	call   c0006b1d <malloc>
c000fc8d:	83 c4 0c             	add    esp,0xc
c000fc90:	89 c3                	mov    ebx,eax
c000fc92:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fc97:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c000fc9a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000fc9d:	53                   	push   ebx
c000fc9e:	e8 7f a1 ff ff       	call   c0009e22 <File::File(char const*, Process*)>
c000fca3:	83 c4 10             	add    esp,0x10
c000fca6:	31 d2                	xor    edx,edx
c000fca8:	b8 02 00 00 00       	mov    eax,0x2
c000fcad:	85 db                	test   ebx,ebx
c000fcaf:	74 5b                	je     c000fd0c <Sys::loadDLL(regs*)+0xa4>
c000fcb1:	83 ec 0c             	sub    esp,0xc
c000fcb4:	53                   	push   ebx
c000fcb5:	e8 96 a4 ff ff       	call   c000a150 <File::exists()>
c000fcba:	83 c4 10             	add    esp,0x10
c000fcbd:	84 c0                	test   al,al
c000fcbf:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fcc1:	75 11                	jne    c000fcd4 <Sys::loadDLL(regs*)+0x6c>
c000fcc3:	83 ec 0c             	sub    esp,0xc
c000fcc6:	53                   	push   ebx
c000fcc7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000fcca:	83 c4 10             	add    esp,0x10
c000fccd:	b8 03 00 00 00       	mov    eax,0x3
c000fcd2:	eb 36                	jmp    c000fd0a <Sys::loadDLL(regs*)+0xa2>
c000fcd4:	83 ec 0c             	sub    esp,0xc
c000fcd7:	53                   	push   ebx
c000fcd8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000fcdb:	58                   	pop    eax
c000fcdc:	5a                   	pop    edx
c000fcdd:	6a 00                	push   0x0
c000fcdf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000fce2:	e8 77 20 00 00       	call   c0011d5e <Thr::loadDLL(char const*, bool)>
c000fce7:	83 c4 10             	add    esp,0x10
c000fcea:	89 c1                	mov    ecx,eax
c000fcec:	31 d2                	xor    edx,edx
c000fcee:	b8 04 00 00 00       	mov    eax,0x4
c000fcf3:	85 c9                	test   ecx,ecx
c000fcf5:	74 15                	je     c000fd0c <Sys::loadDLL(regs*)+0xa4>
c000fcf7:	53                   	push   ebx
c000fcf8:	53                   	push   ebx
c000fcf9:	ff 35 08 f2 01 c0    	push   DWORD PTR ds:0xc001f208
c000fcff:	51                   	push   ecx
c000fd00:	e8 8a 22 00 00       	call   c0011f8f <Thr::executeDLL(unsigned long, void*)>
c000fd05:	83 c4 10             	add    esp,0x10
c000fd08:	31 c0                	xor    eax,eax
c000fd0a:	31 d2                	xor    edx,edx
c000fd0c:	59                   	pop    ecx
c000fd0d:	5b                   	pop    ebx
c000fd0e:	5e                   	pop    esi
c000fd0f:	c3                   	ret    

c000fd10 <Sys::read(regs*)>:
c000fd10:	57                   	push   edi
c000fd11:	56                   	push   esi
c000fd12:	53                   	push   ebx
c000fd13:	83 ec 10             	sub    esp,0x10
c000fd16:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000fd1a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000fd1d:	83 f8 02             	cmp    eax,0x2
c000fd20:	77 10                	ja     c000fd32 <Sys::read(regs*)+0x22>
c000fd22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fd27:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fd2a:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c000fd30:	eb 0e                	jmp    c000fd40 <Sys::read(regs*)+0x30>
c000fd32:	83 ec 0c             	sub    esp,0xc
c000fd35:	50                   	push   eax
c000fd36:	e8 c8 87 ff ff       	call   c0008503 <getFromFileDescriptor(int)>
c000fd3b:	83 c4 10             	add    esp,0x10
c000fd3e:	89 c1                	mov    ecx,eax
c000fd40:	83 c8 ff             	or     eax,0xffffffff
c000fd43:	85 c9                	test   ecx,ecx
c000fd45:	89 c2                	mov    edx,eax
c000fd47:	74 28                	je     c000fd71 <Sys::read(regs*)+0x61>
c000fd49:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fd51:	31 ff                	xor    edi,edi
c000fd53:	83 ec 0c             	sub    esp,0xc
c000fd56:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd58:	8d 54 24 18          	lea    edx,[esp+0x18]
c000fd5c:	52                   	push   edx
c000fd5d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000fd60:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c000fd63:	57                   	push   edi
c000fd64:	56                   	push   esi
c000fd65:	51                   	push   ecx
c000fd66:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fd69:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000fd6d:	83 c4 20             	add    esp,0x20
c000fd70:	99                   	cdq    
c000fd71:	83 c4 10             	add    esp,0x10
c000fd74:	5b                   	pop    ebx
c000fd75:	5e                   	pop    esi
c000fd76:	5f                   	pop    edi
c000fd77:	c3                   	ret    

c000fd78 <Sys::sbrk(regs*)>:
c000fd78:	56                   	push   esi
c000fd79:	53                   	push   ebx
c000fd7a:	50                   	push   eax
c000fd7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fd80:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd84:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fd87:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c000fd8a:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c000fd90:	85 db                	test   ebx,ebx
c000fd92:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c000fd95:	74 02                	je     c000fd99 <Sys::sbrk(regs*)+0x21>
c000fd97:	79 06                	jns    c000fd9f <Sys::sbrk(regs*)+0x27>
c000fd99:	89 f0                	mov    eax,esi
c000fd9b:	31 d2                	xor    edx,edx
c000fd9d:	eb 2a                	jmp    c000fdc9 <Sys::sbrk(regs*)+0x51>
c000fd9f:	83 c8 ff             	or     eax,0xffffffff
c000fda2:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c000fda8:	89 c2                	mov    edx,eax
c000fdaa:	77 1d                	ja     c000fdc9 <Sys::sbrk(regs*)+0x51>
c000fdac:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c000fdb2:	50                   	push   eax
c000fdb3:	c1 ea 0c             	shr    edx,0xc
c000fdb6:	68 07 0c 00 00       	push   0xc07
c000fdbb:	52                   	push   edx
c000fdbc:	51                   	push   ecx
c000fdbd:	e8 30 90 ff ff       	call   c0008df2 <VAS::allocatePages(int, int)>
c000fdc2:	89 f0                	mov    eax,esi
c000fdc4:	31 d2                	xor    edx,edx
c000fdc6:	83 c4 10             	add    esp,0x10
c000fdc9:	59                   	pop    ecx
c000fdca:	5b                   	pop    ebx
c000fdcb:	5e                   	pop    esi
c000fdcc:	c3                   	ret    

c000fdcd <Sys::setCwd(regs*)>:
c000fdcd:	83 ec 14             	sub    esp,0x14
c000fdd0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fdd4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000fdd7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fddc:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c000fddf:	e8 0b a4 ff ff       	call   c000a1ef <Fs::setcwd(Process*, char*)>
c000fde4:	83 c4 1c             	add    esp,0x1c
c000fde7:	99                   	cdq    
c000fde8:	c3                   	ret    

c000fde9 <Sys::setTime(regs*)>:
c000fde9:	55                   	push   ebp
c000fdea:	31 c9                	xor    ecx,ecx
c000fdec:	57                   	push   edi
c000fded:	bd 0c 00 00 00       	mov    ebp,0xc
c000fdf2:	56                   	push   esi
c000fdf3:	53                   	push   ebx
c000fdf4:	31 db                	xor    ebx,ebx
c000fdf6:	83 ec 10             	sub    esp,0x10
c000fdf9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fdfd:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c000fe00:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000fe03:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c000fe06:	89 c2                	mov    edx,eax
c000fe08:	66 81 ef 6c 07       	sub    di,0x76c
c000fe0d:	83 e2 1f             	and    edx,0x1f
c000fe10:	c1 e7 10             	shl    edi,0x10
c000fe13:	42                   	inc    edx
c000fe14:	c1 e8 05             	shr    eax,0x5
c000fe17:	88 d1                	mov    cl,dl
c000fe19:	31 d2                	xor    edx,edx
c000fe1b:	f7 f5                	div    ebp
c000fe1d:	89 dd                	mov    ebp,ebx
c000fe1f:	88 d5                	mov    ch,dl
c000fe21:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c000fe27:	0f b7 c1             	movzx  eax,cx
c000fe2a:	31 d2                	xor    edx,edx
c000fe2c:	09 f8                	or     eax,edi
c000fe2e:	bf 3c 00 00 00       	mov    edi,0x3c
c000fe33:	89 c1                	mov    ecx,eax
c000fe35:	89 f0                	mov    eax,esi
c000fe37:	f7 f7                	div    edi
c000fe39:	c1 e2 10             	shl    edx,0x10
c000fe3c:	09 d5                	or     ebp,edx
c000fe3e:	31 d2                	xor    edx,edx
c000fe40:	89 eb                	mov    ebx,ebp
c000fe42:	f7 f7                	div    edi
c000fe44:	bf 10 0e 00 00       	mov    edi,0xe10
c000fe49:	88 d7                	mov    bh,dl
c000fe4b:	89 f0                	mov    eax,esi
c000fe4d:	31 d2                	xor    edx,edx
c000fe4f:	f7 f7                	div    edi
c000fe51:	bf 18 00 00 00       	mov    edi,0x18
c000fe56:	31 d2                	xor    edx,edx
c000fe58:	f7 f7                	div    edi
c000fe5a:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c000fe5f:	88 d3                	mov    bl,dl
c000fe61:	53                   	push   ebx
c000fe62:	51                   	push   ecx
c000fe63:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000fe69:	e8 92 ab ff ff       	call   c000aa00 <Clock::setTimeInDatetimeLocal(datetime_t)>
c000fe6e:	83 c4 1c             	add    esp,0x1c
c000fe71:	83 f0 01             	xor    eax,0x1
c000fe74:	5b                   	pop    ebx
c000fe75:	0f b6 c0             	movzx  eax,al
c000fe78:	5e                   	pop    esi
c000fe79:	31 d2                	xor    edx,edx
c000fe7b:	5f                   	pop    edi
c000fe7c:	5d                   	pop    ebp
c000fe7d:	c3                   	ret    

c000fe7e <Sys::timezone(regs*)>:
c000fe7e:	53                   	push   ebx
c000fe7f:	83 ec 08             	sub    esp,0x8
c000fe82:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe86:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c000fe8a:	75 17                	jne    c000fea3 <Sys::timezone(regs*)+0x25>
c000fe8c:	83 ec 0c             	sub    esp,0xc
c000fe8f:	68 49 db 01 c0       	push   0xc001db49
c000fe94:	e8 13 9a ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c000fe99:	83 c8 ff             	or     eax,0xffffffff
c000fe9c:	83 c4 10             	add    esp,0x10
c000fe9f:	89 c2                	mov    edx,eax
c000fea1:	eb 20                	jmp    c000fec3 <Sys::timezone(regs*)+0x45>
c000fea3:	83 ec 0c             	sub    esp,0xc
c000fea6:	68 5e db 01 c0       	push   0xc001db5e
c000feab:	e8 fc 99 ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c000feb0:	58                   	pop    eax
c000feb1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000feb4:	e8 a3 a8 ff ff       	call   c000a75c <User::loadClockSettings(int)>
c000feb9:	83 c4 10             	add    esp,0x10
c000febc:	b8 01 00 00 00       	mov    eax,0x1
c000fec1:	31 d2                	xor    edx,edx
c000fec3:	83 c4 08             	add    esp,0x8
c000fec6:	5b                   	pop    ebx
c000fec7:	c3                   	ret    

c000fec8 <Sys::write(regs*)>:
c000fec8:	57                   	push   edi
c000fec9:	56                   	push   esi
c000feca:	53                   	push   ebx
c000fecb:	83 ec 10             	sub    esp,0x10
c000fece:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000fed2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000fed5:	83 f8 02             	cmp    eax,0x2
c000fed8:	77 10                	ja     c000feea <Sys::write(regs*)+0x22>
c000feda:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fedf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fee2:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c000fee8:	eb 0e                	jmp    c000fef8 <Sys::write(regs*)+0x30>
c000feea:	83 ec 0c             	sub    esp,0xc
c000feed:	50                   	push   eax
c000feee:	e8 10 86 ff ff       	call   c0008503 <getFromFileDescriptor(int)>
c000fef3:	83 c4 10             	add    esp,0x10
c000fef6:	89 c1                	mov    ecx,eax
c000fef8:	83 c8 ff             	or     eax,0xffffffff
c000fefb:	85 c9                	test   ecx,ecx
c000fefd:	89 c2                	mov    edx,eax
c000feff:	74 28                	je     c000ff29 <Sys::write(regs*)+0x61>
c000ff01:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ff09:	31 ff                	xor    edi,edi
c000ff0b:	83 ec 0c             	sub    esp,0xc
c000ff0e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ff10:	8d 54 24 18          	lea    edx,[esp+0x18]
c000ff14:	52                   	push   edx
c000ff15:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000ff18:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c000ff1b:	57                   	push   edi
c000ff1c:	56                   	push   esi
c000ff1d:	51                   	push   ecx
c000ff1e:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ff21:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ff25:	83 c4 20             	add    esp,0x20
c000ff28:	99                   	cdq    
c000ff29:	83 c4 10             	add    esp,0x10
c000ff2c:	5b                   	pop    ebx
c000ff2d:	5e                   	pop    esi
c000ff2e:	5f                   	pop    edi
c000ff2f:	c3                   	ret    

c000ff30 <Sys::wsbe(regs*)>:
c000ff30:	57                   	push   edi
c000ff31:	b9 0b 00 00 00       	mov    ecx,0xb
c000ff36:	56                   	push   esi
c000ff37:	be 9d db 01 c0       	mov    esi,0xc001db9d
c000ff3c:	53                   	push   ebx
c000ff3d:	83 ec 30             	sub    esp,0x30
c000ff40:	8d 7c 24 04          	lea    edi,[esp+0x4]
c000ff44:	fc                   	cld    
c000ff45:	83 ec 0c             	sub    esp,0xc
c000ff48:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ff4a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000ff4e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff53:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ff56:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c000ff5c:	8b 06                	mov    eax,DWORD PTR [esi]
c000ff5e:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c000ff61:	57                   	push   edi
c000ff62:	e8 f9 05 ff ff       	call   c0000560 <strlen>
c000ff67:	5a                   	pop    edx
c000ff68:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000ff6c:	52                   	push   edx
c000ff6d:	31 d2                	xor    edx,edx
c000ff6f:	57                   	push   edi
c000ff70:	52                   	push   edx
c000ff71:	50                   	push   eax
c000ff72:	56                   	push   esi
c000ff73:	ff d3                	call   ebx
c000ff75:	83 c4 14             	add    esp,0x14
c000ff78:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ff7c:	ff 70 24             	push   DWORD PTR [eax+0x24]
c000ff7f:	e8 f0 30 00 00       	call   c0013074 <terminateTask(int)>
c000ff84:	83 c4 40             	add    esp,0x40
c000ff87:	b8 ef be ad de       	mov    eax,0xdeadbeef
c000ff8c:	5b                   	pop    ebx
c000ff8d:	31 d2                	xor    edx,edx
c000ff8f:	5e                   	pop    esi
c000ff90:	5f                   	pop    edi
c000ff91:	c3                   	ret    

c000ff92 <Sys::yield(regs*)>:
c000ff92:	83 ec 0c             	sub    esp,0xc
c000ff95:	fa                   	cli    
c000ff96:	ff 05 c8 26 02 c0    	inc    DWORD PTR ds:0xc00226c8
c000ff9c:	e8 af 27 00 00       	call   c0012750 <schedule()>
c000ffa1:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c000ffa6:	48                   	dec    eax
c000ffa7:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c000ffac:	75 01                	jne    c000ffaf <Sys::yield(regs*)+0x1d>
c000ffae:	fb                   	sti    
c000ffaf:	31 c0                	xor    eax,eax
c000ffb1:	31 d2                	xor    edx,edx
c000ffb3:	83 c4 0c             	add    esp,0xc
c000ffb6:	c3                   	ret    

c000ffb7 <sysCallSeekDir(regs*)>:
c000ffb7:	31 c0                	xor    eax,eax
c000ffb9:	31 d2                	xor    edx,edx
c000ffbb:	c3                   	ret    

c000ffbc <sysCallTellDir(regs*)>:
c000ffbc:	31 c0                	xor    eax,eax
c000ffbe:	31 d2                	xor    edx,edx
c000ffc0:	c3                   	ret    

c000ffc1 <sysCallVerify(regs*)>:
c000ffc1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffc5:	31 d2                	xor    edx,edx
c000ffc7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ffca:	c3                   	ret    

c000ffcb <sysCallGetArgc(regs*)>:
c000ffcb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffd0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ffd3:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c000ffd9:	99                   	cdq    
c000ffda:	c3                   	ret    

c000ffdb <sysCallTTYName(regs*)>:
c000ffdb:	b8 01 00 00 00       	mov    eax,0x1
c000ffe0:	31 d2                	xor    edx,edx
c000ffe2:	c3                   	ret    

c000ffe3 <sysFormatDisk(regs*)>:
c000ffe3:	56                   	push   esi
c000ffe4:	53                   	push   ebx
c000ffe5:	50                   	push   eax
c000ffe6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ffea:	8b 1d f4 f2 01 c0    	mov    ebx,DWORD PTR ds:0xc001f2f4
c000fff0:	eb 28                	jmp    c001001a <sysFormatDisk(regs*)+0x37>
c000fff2:	83 ec 0c             	sub    esp,0xc
c000fff5:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000fff8:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c000fffb:	8b 13                	mov    edx,DWORD PTR [ebx]
c000fffd:	51                   	push   ecx
c000fffe:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010001:	51                   	push   ecx
c0010002:	50                   	push   eax
c0010003:	8b 04 85 60 17 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde8a0]
c001000a:	50                   	push   eax
c001000b:	53                   	push   ebx
c001000c:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001000f:	83 c4 20             	add    esp,0x20
c0010012:	83 f8 08             	cmp    eax,0x8
c0010015:	75 12                	jne    c0010029 <sysFormatDisk(regs*)+0x46>
c0010017:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001001a:	85 db                	test   ebx,ebx
c001001c:	75 d4                	jne    c000fff2 <sysFormatDisk(regs*)+0xf>
c001001e:	59                   	pop    ecx
c001001f:	b8 03 00 00 00       	mov    eax,0x3
c0010024:	31 d2                	xor    edx,edx
c0010026:	5b                   	pop    ebx
c0010027:	5e                   	pop    esi
c0010028:	c3                   	ret    
c0010029:	85 c0                	test   eax,eax
c001002b:	74 1b                	je     c0010048 <sysFormatDisk(regs*)+0x65>
c001002d:	83 f8 09             	cmp    eax,0x9
c0010030:	74 0b                	je     c001003d <sysFormatDisk(regs*)+0x5a>
c0010032:	59                   	pop    ecx
c0010033:	b8 02 00 00 00       	mov    eax,0x2
c0010038:	31 d2                	xor    edx,edx
c001003a:	5b                   	pop    ebx
c001003b:	5e                   	pop    esi
c001003c:	c3                   	ret    
c001003d:	59                   	pop    ecx
c001003e:	b8 01 00 00 00       	mov    eax,0x1
c0010043:	31 d2                	xor    edx,edx
c0010045:	5b                   	pop    ebx
c0010046:	5e                   	pop    esi
c0010047:	c3                   	ret    
c0010048:	59                   	pop    ecx
c0010049:	31 c0                	xor    eax,eax
c001004b:	31 d2                	xor    edx,edx
c001004d:	5b                   	pop    ebx
c001004e:	5e                   	pop    esi
c001004f:	c3                   	ret    

c0010050 <sysSetDiskVolumeLabel(regs*)>:
c0010050:	56                   	push   esi
c0010051:	53                   	push   ebx
c0010052:	53                   	push   ebx
c0010053:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010057:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001005a:	83 f8 19             	cmp    eax,0x19
c001005d:	77 2d                	ja     c001008c <sysSetDiskVolumeLabel(regs*)+0x3c>
c001005f:	8b 0c 85 60 17 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde8a0]
c0010066:	85 c9                	test   ecx,ecx
c0010068:	74 22                	je     c001008c <sysSetDiskVolumeLabel(regs*)+0x3c>
c001006a:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001006d:	85 db                	test   ebx,ebx
c001006f:	74 1b                	je     c001008c <sysSetDiskVolumeLabel(regs*)+0x3c>
c0010071:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0010077:	85 d2                	test   edx,edx
c0010079:	74 11                	je     c001008c <sysSetDiskVolumeLabel(regs*)+0x3c>
c001007b:	8b 32                	mov    esi,DWORD PTR [edx]
c001007d:	53                   	push   ebx
c001007e:	50                   	push   eax
c001007f:	51                   	push   ecx
c0010080:	52                   	push   edx
c0010081:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010084:	83 c4 10             	add    esp,0x10
c0010087:	99                   	cdq    
c0010088:	59                   	pop    ecx
c0010089:	5b                   	pop    ebx
c001008a:	5e                   	pop    esi
c001008b:	c3                   	ret    
c001008c:	59                   	pop    ecx
c001008d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010092:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010097:	5b                   	pop    ebx
c0010098:	5e                   	pop    esi
c0010099:	c3                   	ret    

c001009a <sysGetDiskVolumeLabel(regs*)>:
c001009a:	57                   	push   edi
c001009b:	56                   	push   esi
c001009c:	53                   	push   ebx
c001009d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100a1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00100a4:	83 fa 19             	cmp    edx,0x19
c00100a7:	77 38                	ja     c00100e1 <sysGetDiskVolumeLabel(regs*)+0x47>
c00100a9:	8b 0c 95 60 17 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffde8a0]
c00100b0:	85 c9                	test   ecx,ecx
c00100b2:	74 2d                	je     c00100e1 <sysGetDiskVolumeLabel(regs*)+0x47>
c00100b4:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00100b7:	85 db                	test   ebx,ebx
c00100b9:	74 26                	je     c00100e1 <sysGetDiskVolumeLabel(regs*)+0x47>
c00100bb:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00100be:	85 f6                	test   esi,esi
c00100c0:	74 1f                	je     c00100e1 <sysGetDiskVolumeLabel(regs*)+0x47>
c00100c2:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c00100c8:	85 c0                	test   eax,eax
c00100ca:	74 15                	je     c00100e1 <sysGetDiskVolumeLabel(regs*)+0x47>
c00100cc:	83 ec 0c             	sub    esp,0xc
c00100cf:	8b 38                	mov    edi,DWORD PTR [eax]
c00100d1:	56                   	push   esi
c00100d2:	53                   	push   ebx
c00100d3:	52                   	push   edx
c00100d4:	51                   	push   ecx
c00100d5:	50                   	push   eax
c00100d6:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00100d9:	83 c4 20             	add    esp,0x20
c00100dc:	99                   	cdq    
c00100dd:	5b                   	pop    ebx
c00100de:	5e                   	pop    esi
c00100df:	5f                   	pop    edi
c00100e0:	c3                   	ret    
c00100e1:	5b                   	pop    ebx
c00100e2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00100e7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00100ec:	5e                   	pop    esi
c00100ed:	5f                   	pop    edi
c00100ee:	c3                   	ret    

c00100ef <sysShutdown(regs*)>:
c00100ef:	83 ec 0c             	sub    esp,0xc
c00100f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100f6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00100f9:	85 c0                	test   eax,eax
c00100fb:	74 18                	je     c0010115 <sysShutdown(regs*)+0x26>
c00100fd:	83 f8 01             	cmp    eax,0x1
c0010100:	74 38                	je     c001013a <sysShutdown(regs*)+0x4b>
c0010102:	83 f8 02             	cmp    eax,0x2
c0010105:	74 24                	je     c001012b <sysShutdown(regs*)+0x3c>
c0010107:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001010c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010111:	83 c4 0c             	add    esp,0xc
c0010114:	c3                   	ret    
c0010115:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c001011a:	8b 10                	mov    edx,DWORD PTR [eax]
c001011c:	6a 00                	push   0x0
c001011e:	6a 00                	push   0x0
c0010120:	6a 00                	push   0x0
c0010122:	50                   	push   eax
c0010123:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010126:	83 c4 10             	add    esp,0x10
c0010129:	eb dc                	jmp    c0010107 <sysShutdown(regs*)+0x18>
c001012b:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c0010130:	8b 10                	mov    edx,DWORD PTR [eax]
c0010132:	6a 00                	push   0x0
c0010134:	6a 00                	push   0x0
c0010136:	6a 01                	push   0x1
c0010138:	eb e8                	jmp    c0010122 <sysShutdown(regs*)+0x33>
c001013a:	a1 e0 17 02 c0       	mov    eax,ds:0xc00217e0
c001013f:	85 c0                	test   eax,eax
c0010141:	74 02                	je     c0010145 <sysShutdown(regs*)+0x56>
c0010143:	ff d0                	call   eax
c0010145:	31 c0                	xor    eax,eax
c0010147:	31 d2                	xor    edx,edx
c0010149:	83 c4 0c             	add    esp,0xc
c001014c:	c3                   	ret    

c001014d <sysCallRealpath(regs*)>:
c001014d:	83 ec 0c             	sub    esp,0xc
c0010150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010154:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010157:	85 d2                	test   edx,edx
c0010159:	74 07                	je     c0010162 <sysCallRealpath(regs*)+0x15>
c001015b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001015e:	85 c0                	test   eax,eax
c0010160:	75 0b                	jne    c001016d <sysCallRealpath(regs*)+0x20>
c0010162:	b8 01 00 00 00       	mov    eax,0x1
c0010167:	31 d2                	xor    edx,edx
c0010169:	83 c4 0c             	add    esp,0xc
c001016c:	c3                   	ret    
c001016d:	51                   	push   ecx
c001016e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010174:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010177:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001017d:	51                   	push   ecx
c001017e:	52                   	push   edx
c001017f:	50                   	push   eax
c0010180:	e8 f3 9a ff ff       	call   c0009c78 <Fs::standardiseFiles(char*, char const*, char const*)>
c0010185:	83 c4 10             	add    esp,0x10
c0010188:	31 c0                	xor    eax,eax
c001018a:	31 d2                	xor    edx,edx
c001018c:	83 c4 0c             	add    esp,0xc
c001018f:	c3                   	ret    

c0010190 <sysCallReadDir(regs*)>:
c0010190:	53                   	push   ebx
c0010191:	83 ec 18             	sub    esp,0x18
c0010194:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010198:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001019b:	83 f8 02             	cmp    eax,0x2
c001019e:	76 61                	jbe    c0010201 <sysCallReadDir(regs*)+0x71>
c00101a0:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00101a7:	77 49                	ja     c00101f2 <sysCallReadDir(regs*)+0x62>
c00101a9:	83 ec 0c             	sub    esp,0xc
c00101ac:	50                   	push   eax
c00101ad:	e8 51 83 ff ff       	call   c0008503 <getFromFileDescriptor(int)>
c00101b2:	83 c4 10             	add    esp,0x10
c00101b5:	85 c0                	test   eax,eax
c00101b7:	74 39                	je     c00101f2 <sysCallReadDir(regs*)+0x62>
c00101b9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00101c1:	83 ec 0c             	sub    esp,0xc
c00101c4:	8b 10                	mov    edx,DWORD PTR [eax]
c00101c6:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00101ca:	51                   	push   ecx
c00101cb:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00101ce:	51                   	push   ecx
c00101cf:	6a 00                	push   0x0
c00101d1:	68 10 01 00 00       	push   0x110
c00101d6:	50                   	push   eax
c00101d7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00101da:	83 c4 20             	add    esp,0x20
c00101dd:	85 c0                	test   eax,eax
c00101df:	74 29                	je     c001020a <sysCallReadDir(regs*)+0x7a>
c00101e1:	83 f8 07             	cmp    eax,0x7
c00101e4:	74 1b                	je     c0010201 <sysCallReadDir(regs*)+0x71>
c00101e6:	b8 02 00 00 00       	mov    eax,0x2
c00101eb:	31 d2                	xor    edx,edx
c00101ed:	83 c4 18             	add    esp,0x18
c00101f0:	5b                   	pop    ebx
c00101f1:	c3                   	ret    
c00101f2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00101f7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00101fc:	83 c4 18             	add    esp,0x18
c00101ff:	5b                   	pop    ebx
c0010200:	c3                   	ret    
c0010201:	b8 01 00 00 00       	mov    eax,0x1
c0010206:	31 d2                	xor    edx,edx
c0010208:	eb e3                	jmp    c00101ed <sysCallReadDir(regs*)+0x5d>
c001020a:	31 c0                	xor    eax,eax
c001020c:	31 d2                	xor    edx,edx
c001020e:	eb dd                	jmp    c00101ed <sysCallReadDir(regs*)+0x5d>

c0010210 <sysCallIsATTY(regs*)>:
c0010210:	83 ec 0c             	sub    esp,0xc
c0010213:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010217:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001021a:	83 f8 02             	cmp    eax,0x2
c001021d:	76 07                	jbe    c0010226 <sysCallIsATTY(regs*)+0x16>
c001021f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010224:	75 28                	jne    c001024e <sysCallIsATTY(regs*)+0x3e>
c0010226:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001022b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001022e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010234:	85 c0                	test   eax,eax
c0010236:	74 26                	je     c001025e <sysCallIsATTY(regs*)+0x4e>
c0010238:	83 ec 0c             	sub    esp,0xc
c001023b:	8b 10                	mov    edx,DWORD PTR [eax]
c001023d:	50                   	push   eax
c001023e:	ff 12                	call   DWORD PTR [edx]
c0010240:	31 d2                	xor    edx,edx
c0010242:	25 ff 00 00 00       	and    eax,0xff
c0010247:	83 c4 10             	add    esp,0x10
c001024a:	83 c4 0c             	add    esp,0xc
c001024d:	c3                   	ret    
c001024e:	83 ec 0c             	sub    esp,0xc
c0010251:	50                   	push   eax
c0010252:	e8 ac 82 ff ff       	call   c0008503 <getFromFileDescriptor(int)>
c0010257:	83 c4 10             	add    esp,0x10
c001025a:	85 c0                	test   eax,eax
c001025c:	75 da                	jne    c0010238 <sysCallIsATTY(regs*)+0x28>
c001025e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010263:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010268:	83 c4 0c             	add    esp,0xc
c001026b:	c3                   	ret    

c001026c <sysCallSeek(regs*)>:
c001026c:	53                   	push   ebx
c001026d:	83 ec 08             	sub    esp,0x8
c0010270:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010274:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010277:	8d 50 fd             	lea    edx,[eax-0x3]
c001027a:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010280:	77 34                	ja     c00102b6 <sysCallSeek(regs*)+0x4a>
c0010282:	83 ec 0c             	sub    esp,0xc
c0010285:	50                   	push   eax
c0010286:	e8 78 82 ff ff       	call   c0008503 <getFromFileDescriptor(int)>
c001028b:	83 c4 0c             	add    esp,0xc
c001028e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010291:	31 db                	xor    ebx,ebx
c0010293:	53                   	push   ebx
c0010294:	51                   	push   ecx
c0010295:	50                   	push   eax
c0010296:	e8 05 9d ff ff       	call   c0009fa0 <File::seek(unsigned long long)>
c001029b:	83 c4 10             	add    esp,0x10
c001029e:	85 c0                	test   eax,eax
c00102a0:	0f 95 c0             	setne  al
c00102a3:	31 d2                	xor    edx,edx
c00102a5:	25 ff 00 00 00       	and    eax,0xff
c00102aa:	f7 d8                	neg    eax
c00102ac:	83 d2 00             	adc    edx,0x0
c00102af:	83 c4 08             	add    esp,0x8
c00102b2:	f7 da                	neg    edx
c00102b4:	5b                   	pop    ebx
c00102b5:	c3                   	ret    
c00102b6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00102bb:	ba ff ff ff ff       	mov    edx,0xffffffff
c00102c0:	83 c4 08             	add    esp,0x8
c00102c3:	5b                   	pop    ebx
c00102c4:	c3                   	ret    

c00102c5 <sysCallTell(regs*)>:
c00102c5:	53                   	push   ebx
c00102c6:	83 ec 08             	sub    esp,0x8
c00102c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00102cd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00102d0:	83 f8 02             	cmp    eax,0x2
c00102d3:	76 50                	jbe    c0010325 <sysCallTell(regs*)+0x60>
c00102d5:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00102da:	76 19                	jbe    c00102f5 <sysCallTell(regs*)+0x30>
c00102dc:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00102df:	31 d2                	xor    edx,edx
c00102e1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00102e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00102ee:	31 c0                	xor    eax,eax
c00102f0:	83 c4 08             	add    esp,0x8
c00102f3:	5b                   	pop    ebx
c00102f4:	c3                   	ret    
c00102f5:	83 ec 0c             	sub    esp,0xc
c00102f8:	50                   	push   eax
c00102f9:	e8 05 82 ff ff       	call   c0008503 <getFromFileDescriptor(int)>
c00102fe:	5a                   	pop    edx
c00102ff:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010302:	59                   	pop    ecx
c0010303:	53                   	push   ebx
c0010304:	50                   	push   eax
c0010305:	e8 ec 9c ff ff       	call   c0009ff6 <File::tell(unsigned long long*)>
c001030a:	83 c4 10             	add    esp,0x10
c001030d:	85 c0                	test   eax,eax
c001030f:	0f 95 c0             	setne  al
c0010312:	31 d2                	xor    edx,edx
c0010314:	25 ff 00 00 00       	and    eax,0xff
c0010319:	f7 d8                	neg    eax
c001031b:	83 d2 00             	adc    edx,0x0
c001031e:	83 c4 08             	add    esp,0x8
c0010321:	f7 da                	neg    edx
c0010323:	5b                   	pop    ebx
c0010324:	c3                   	ret    
c0010325:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001032a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001032f:	83 c4 08             	add    esp,0x8
c0010332:	5b                   	pop    ebx
c0010333:	c3                   	ret    

c0010334 <sysCallSize(regs*)>:
c0010334:	53                   	push   ebx
c0010335:	83 ec 18             	sub    esp,0x18
c0010338:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001033c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001033f:	83 f8 02             	cmp    eax,0x2
c0010342:	76 56                	jbe    c001039a <sysCallSize(regs*)+0x66>
c0010344:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010349:	76 19                	jbe    c0010364 <sysCallSize(regs*)+0x30>
c001034b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001034e:	31 d2                	xor    edx,edx
c0010350:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010356:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001035d:	31 c0                	xor    eax,eax
c001035f:	83 c4 18             	add    esp,0x18
c0010362:	5b                   	pop    ebx
c0010363:	c3                   	ret    
c0010364:	83 ec 0c             	sub    esp,0xc
c0010367:	50                   	push   eax
c0010368:	e8 96 81 ff ff       	call   c0008503 <getFromFileDescriptor(int)>
c001036d:	83 c4 0c             	add    esp,0xc
c0010370:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010374:	52                   	push   edx
c0010375:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010378:	52                   	push   edx
c0010379:	50                   	push   eax
c001037a:	e8 0f 9e ff ff       	call   c000a18e <File::stat(unsigned long long*, bool*)>
c001037f:	83 c4 10             	add    esp,0x10
c0010382:	85 c0                	test   eax,eax
c0010384:	0f 95 c0             	setne  al
c0010387:	31 d2                	xor    edx,edx
c0010389:	25 ff 00 00 00       	and    eax,0xff
c001038e:	f7 d8                	neg    eax
c0010390:	83 d2 00             	adc    edx,0x0
c0010393:	83 c4 18             	add    esp,0x18
c0010396:	f7 da                	neg    edx
c0010398:	5b                   	pop    ebx
c0010399:	c3                   	ret    
c001039a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001039f:	ba ff ff ff ff       	mov    edx,0xffffffff
c00103a4:	83 c4 18             	add    esp,0x18
c00103a7:	5b                   	pop    ebx
c00103a8:	c3                   	ret    

c00103a9 <sysCallSizeFromFilename(regs*)>:
c00103a9:	57                   	push   edi
c00103aa:	56                   	push   esi
c00103ab:	53                   	push   ebx
c00103ac:	83 ec 20             	sub    esp,0x20
c00103af:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00103b3:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00103b6:	83 fb 02             	cmp    ebx,0x2
c00103b9:	0f 86 8c 00 00 00    	jbe    c001044b <sysCallSizeFromFilename(regs*)+0xa2>
c00103bf:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00103c5:	76 1b                	jbe    c00103e2 <sysCallSizeFromFilename(regs*)+0x39>
c00103c7:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00103ca:	31 d2                	xor    edx,edx
c00103cc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00103d2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00103d9:	83 c4 20             	add    esp,0x20
c00103dc:	31 c0                	xor    eax,eax
c00103de:	5b                   	pop    ebx
c00103df:	5e                   	pop    esi
c00103e0:	5f                   	pop    edi
c00103e1:	c3                   	ret    
c00103e2:	83 ec 0c             	sub    esp,0xc
c00103e5:	68 14 01 00 00       	push   0x114
c00103ea:	e8 2e 67 ff ff       	call   c0006b1d <malloc>
c00103ef:	83 c4 0c             	add    esp,0xc
c00103f2:	89 c7                	mov    edi,eax
c00103f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00103f9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00103fc:	50                   	push   eax
c00103fd:	53                   	push   ebx
c00103fe:	57                   	push   edi
c00103ff:	e8 1e 9a ff ff       	call   c0009e22 <File::File(char const*, Process*)>
c0010404:	83 c4 0c             	add    esp,0xc
c0010407:	8d 44 24 23          	lea    eax,[esp+0x23]
c001040b:	50                   	push   eax
c001040c:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c001040f:	52                   	push   edx
c0010410:	57                   	push   edi
c0010411:	e8 78 9d ff ff       	call   c000a18e <File::stat(unsigned long long*, bool*)>
c0010416:	83 c4 10             	add    esp,0x10
c0010419:	85 ff                	test   edi,edi
c001041b:	74 14                	je     c0010431 <sysCallSizeFromFilename(regs*)+0x88>
c001041d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010421:	8b 17                	mov    edx,DWORD PTR [edi]
c0010423:	83 ec 0c             	sub    esp,0xc
c0010426:	57                   	push   edi
c0010427:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001042a:	83 c4 10             	add    esp,0x10
c001042d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010431:	85 c0                	test   eax,eax
c0010433:	0f 95 c0             	setne  al
c0010436:	31 d2                	xor    edx,edx
c0010438:	25 ff 00 00 00       	and    eax,0xff
c001043d:	f7 d8                	neg    eax
c001043f:	83 d2 00             	adc    edx,0x0
c0010442:	83 c4 20             	add    esp,0x20
c0010445:	f7 da                	neg    edx
c0010447:	5b                   	pop    ebx
c0010448:	5e                   	pop    esi
c0010449:	5f                   	pop    edi
c001044a:	c3                   	ret    
c001044b:	83 c4 20             	add    esp,0x20
c001044e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010453:	5b                   	pop    ebx
c0010454:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010459:	5e                   	pop    esi
c001045a:	5f                   	pop    edi
c001045b:	c3                   	ret    

c001045c <sysCallClose(regs*)>:
c001045c:	53                   	push   ebx
c001045d:	83 ec 08             	sub    esp,0x8
c0010460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010464:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010467:	83 f8 02             	cmp    eax,0x2
c001046a:	76 41                	jbe    c00104ad <sysCallClose(regs*)+0x51>
c001046c:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010472:	83 fa 01             	cmp    edx,0x1
c0010475:	76 2d                	jbe    c00104a4 <sysCallClose(regs*)+0x48>
c0010477:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001047c:	77 2f                	ja     c00104ad <sysCallClose(regs*)+0x51>
c001047e:	83 ec 0c             	sub    esp,0xc
c0010481:	50                   	push   eax
c0010482:	e8 7c 80 ff ff       	call   c0008503 <getFromFileDescriptor(int)>
c0010487:	89 c3                	mov    ebx,eax
c0010489:	89 04 24             	mov    DWORD PTR [esp],eax
c001048c:	e8 af 9a ff ff       	call   c0009f40 <File::close()>
c0010491:	83 c4 10             	add    esp,0x10
c0010494:	85 db                	test   ebx,ebx
c0010496:	74 0c                	je     c00104a4 <sysCallClose(regs*)+0x48>
c0010498:	83 ec 0c             	sub    esp,0xc
c001049b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001049d:	53                   	push   ebx
c001049e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00104a1:	83 c4 10             	add    esp,0x10
c00104a4:	31 c0                	xor    eax,eax
c00104a6:	31 d2                	xor    edx,edx
c00104a8:	83 c4 08             	add    esp,0x8
c00104ab:	5b                   	pop    ebx
c00104ac:	c3                   	ret    
c00104ad:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00104b2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00104b7:	83 c4 08             	add    esp,0x8
c00104ba:	5b                   	pop    ebx
c00104bb:	c3                   	ret    

c00104bc <sysCallOpenDir(regs*)>:
c00104bc:	56                   	push   esi
c00104bd:	53                   	push   ebx
c00104be:	50                   	push   eax
c00104bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00104c3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00104c6:	85 c0                	test   eax,eax
c00104c8:	74 5b                	je     c0010525 <sysCallOpenDir(regs*)+0x69>
c00104ca:	83 ec 0c             	sub    esp,0xc
c00104cd:	68 14 01 00 00       	push   0x114
c00104d2:	e8 46 66 ff ff       	call   c0006b1d <malloc>
c00104d7:	83 c4 0c             	add    esp,0xc
c00104da:	89 c6                	mov    esi,eax
c00104dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00104e1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00104e4:	50                   	push   eax
c00104e5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00104e8:	50                   	push   eax
c00104e9:	56                   	push   esi
c00104ea:	e8 5d 9e ff ff       	call   c000a34c <Directory::Directory(char const*, Process*)>
c00104ef:	83 c4 10             	add    esp,0x10
c00104f2:	85 f6                	test   esi,esi
c00104f4:	74 2f                	je     c0010525 <sysCallOpenDir(regs*)+0x69>
c00104f6:	83 ec 0c             	sub    esp,0xc
c00104f9:	56                   	push   esi
c00104fa:	e8 0d 9f ff ff       	call   c000a40c <Directory::open()>
c00104ff:	83 c4 10             	add    esp,0x10
c0010502:	85 c0                	test   eax,eax
c0010504:	75 1f                	jne    c0010525 <sysCallOpenDir(regs*)+0x69>
c0010506:	83 ec 0c             	sub    esp,0xc
c0010509:	56                   	push   esi
c001050a:	e8 ff 7c ff ff       	call   c000820e <UnixFile::getFileDescriptor()>
c001050f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010512:	83 c4 10             	add    esp,0x10
c0010515:	89 02                	mov    DWORD PTR [edx],eax
c0010517:	c1 f8 1f             	sar    eax,0x1f
c001051a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001051d:	31 c0                	xor    eax,eax
c001051f:	59                   	pop    ecx
c0010520:	31 d2                	xor    edx,edx
c0010522:	5b                   	pop    ebx
c0010523:	5e                   	pop    esi
c0010524:	c3                   	ret    
c0010525:	59                   	pop    ecx
c0010526:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001052b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010530:	5b                   	pop    ebx
c0010531:	5e                   	pop    esi
c0010532:	c3                   	ret    

c0010533 <sysCallCloseDir(regs*)>:
c0010533:	53                   	push   ebx
c0010534:	83 ec 08             	sub    esp,0x8
c0010537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001053b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001053e:	8d 50 fd             	lea    edx,[eax-0x3]
c0010541:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010547:	77 2f                	ja     c0010578 <sysCallCloseDir(regs*)+0x45>
c0010549:	83 ec 0c             	sub    esp,0xc
c001054c:	50                   	push   eax
c001054d:	e8 b1 7f ff ff       	call   c0008503 <getFromFileDescriptor(int)>
c0010552:	89 c3                	mov    ebx,eax
c0010554:	89 04 24             	mov    DWORD PTR [esp],eax
c0010557:	e8 0c 9f ff ff       	call   c000a468 <Directory::close()>
c001055c:	83 c4 10             	add    esp,0x10
c001055f:	85 db                	test   ebx,ebx
c0010561:	74 0c                	je     c001056f <sysCallCloseDir(regs*)+0x3c>
c0010563:	83 ec 0c             	sub    esp,0xc
c0010566:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010568:	53                   	push   ebx
c0010569:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001056c:	83 c4 10             	add    esp,0x10
c001056f:	31 c0                	xor    eax,eax
c0010571:	31 d2                	xor    edx,edx
c0010573:	83 c4 08             	add    esp,0x8
c0010576:	5b                   	pop    ebx
c0010577:	c3                   	ret    
c0010578:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001057d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010582:	83 c4 08             	add    esp,0x8
c0010585:	5b                   	pop    ebx
c0010586:	c3                   	ret    

c0010587 <sysCallMakeDir(regs*)>:
c0010587:	56                   	push   esi
c0010588:	53                   	push   ebx
c0010589:	83 ec 10             	sub    esp,0x10
c001058c:	68 14 01 00 00       	push   0x114
c0010591:	e8 87 65 ff ff       	call   c0006b1d <malloc>
c0010596:	83 c4 0c             	add    esp,0xc
c0010599:	89 c3                	mov    ebx,eax
c001059b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00105a0:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c00105a3:	56                   	push   esi
c00105a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00105a8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00105ab:	50                   	push   eax
c00105ac:	53                   	push   ebx
c00105ad:	e8 9a 9d ff ff       	call   c000a34c <Directory::Directory(char const*, Process*)>
c00105b2:	83 c4 10             	add    esp,0x10
c00105b5:	85 db                	test   ebx,ebx
c00105b7:	74 32                	je     c00105eb <sysCallMakeDir(regs*)+0x64>
c00105b9:	83 ec 0c             	sub    esp,0xc
c00105bc:	53                   	push   ebx
c00105bd:	e8 2a a0 ff ff       	call   c000a5ec <Directory::create()>
c00105c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00105c5:	89 c6                	mov    esi,eax
c00105c7:	e8 9c 9e ff ff       	call   c000a468 <Directory::close()>
c00105cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00105ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00105d1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00105d4:	83 c4 10             	add    esp,0x10
c00105d7:	31 c0                	xor    eax,eax
c00105d9:	59                   	pop    ecx
c00105da:	85 f6                	test   esi,esi
c00105dc:	5b                   	pop    ebx
c00105dd:	0f 95 c0             	setne  al
c00105e0:	5e                   	pop    esi
c00105e1:	31 d2                	xor    edx,edx
c00105e3:	f7 d8                	neg    eax
c00105e5:	83 d2 00             	adc    edx,0x0
c00105e8:	f7 da                	neg    edx
c00105ea:	c3                   	ret    
c00105eb:	59                   	pop    ecx
c00105ec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00105f1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00105f6:	5b                   	pop    ebx
c00105f7:	5e                   	pop    esi
c00105f8:	c3                   	ret    

c00105f9 <sysCallWait(regs*)>:
c00105f9:	83 ec 10             	sub    esp,0x10
c00105fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010600:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010603:	52                   	push   edx
c0010604:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010607:	51                   	push   ecx
c0010608:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001060b:	50                   	push   eax
c001060c:	e8 6b 23 00 00       	call   c001297c <waitTask(int, int*, int)>
c0010611:	83 c4 1c             	add    esp,0x1c
c0010614:	99                   	cdq    
c0010615:	c3                   	ret    

c0010616 <sysCallNotImpl(regs*)>:
c0010616:	83 ec 18             	sub    esp,0x18
c0010619:	68 c9 db 01 c0       	push   0xc001dbc9
c001061e:	e8 d8 ed ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c0010623:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010628:	ba ff ff ff ff       	mov    edx,0xffffffff
c001062d:	83 c4 1c             	add    esp,0x1c
c0010630:	c3                   	ret    

c0010631 <sysPanic(regs*)>:
c0010631:	83 ec 18             	sub    esp,0x18
c0010634:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010638:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001063b:	50                   	push   eax
c001063c:	e8 ba ed ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c0010641:	b8 01 00 00 00       	mov    eax,0x1
c0010646:	31 d2                	xor    edx,edx
c0010648:	83 c4 1c             	add    esp,0x1c
c001064b:	c3                   	ret    

c001064c <sysCallRmdir(regs*)>:
c001064c:	56                   	push   esi
c001064d:	53                   	push   ebx
c001064e:	83 ec 20             	sub    esp,0x20
c0010651:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010655:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010658:	68 14 01 00 00       	push   0x114
c001065d:	e8 bb 64 ff ff       	call   c0006b1d <malloc>
c0010662:	83 c4 0c             	add    esp,0xc
c0010665:	89 c3                	mov    ebx,eax
c0010667:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001066c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001066f:	50                   	push   eax
c0010670:	56                   	push   esi
c0010671:	53                   	push   ebx
c0010672:	e8 ab 97 ff ff       	call   c0009e22 <File::File(char const*, Process*)>
c0010677:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001067a:	e8 db 99 ff ff       	call   c000a05a <File::unlink()>
c001067f:	83 c4 10             	add    esp,0x10
c0010682:	85 db                	test   ebx,ebx
c0010684:	74 14                	je     c001069a <sysCallRmdir(regs*)+0x4e>
c0010686:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001068a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001068c:	83 ec 0c             	sub    esp,0xc
c001068f:	53                   	push   ebx
c0010690:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010693:	83 c4 10             	add    esp,0x10
c0010696:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001069a:	85 c0                	test   eax,eax
c001069c:	0f 95 c0             	setne  al
c001069f:	31 d2                	xor    edx,edx
c00106a1:	25 ff 00 00 00       	and    eax,0xff
c00106a6:	f7 d8                	neg    eax
c00106a8:	83 d2 00             	adc    edx,0x0
c00106ab:	83 c4 14             	add    esp,0x14
c00106ae:	f7 da                	neg    edx
c00106b0:	5b                   	pop    ebx
c00106b1:	5e                   	pop    esi
c00106b2:	c3                   	ret    

c00106b3 <sysCallUnlink(regs*)>:
c00106b3:	56                   	push   esi
c00106b4:	53                   	push   ebx
c00106b5:	83 ec 20             	sub    esp,0x20
c00106b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00106bc:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00106bf:	68 14 01 00 00       	push   0x114
c00106c4:	e8 54 64 ff ff       	call   c0006b1d <malloc>
c00106c9:	83 c4 0c             	add    esp,0xc
c00106cc:	89 c3                	mov    ebx,eax
c00106ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00106d3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00106d6:	50                   	push   eax
c00106d7:	56                   	push   esi
c00106d8:	53                   	push   ebx
c00106d9:	e8 44 97 ff ff       	call   c0009e22 <File::File(char const*, Process*)>
c00106de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00106e1:	e8 74 99 ff ff       	call   c000a05a <File::unlink()>
c00106e6:	83 c4 10             	add    esp,0x10
c00106e9:	85 db                	test   ebx,ebx
c00106eb:	74 14                	je     c0010701 <sysCallUnlink(regs*)+0x4e>
c00106ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00106f1:	8b 13                	mov    edx,DWORD PTR [ebx]
c00106f3:	83 ec 0c             	sub    esp,0xc
c00106f6:	53                   	push   ebx
c00106f7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00106fa:	83 c4 10             	add    esp,0x10
c00106fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010701:	85 c0                	test   eax,eax
c0010703:	0f 95 c0             	setne  al
c0010706:	31 d2                	xor    edx,edx
c0010708:	25 ff 00 00 00       	and    eax,0xff
c001070d:	f7 d8                	neg    eax
c001070f:	83 d2 00             	adc    edx,0x0
c0010712:	83 c4 14             	add    esp,0x14
c0010715:	f7 da                	neg    edx
c0010717:	5b                   	pop    ebx
c0010718:	5e                   	pop    esi
c0010719:	c3                   	ret    

c001071a <sysCallGetArgv(regs*)>:
c001071a:	83 ec 0c             	sub    esp,0xc
c001071d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010721:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010724:	85 c0                	test   eax,eax
c0010726:	78 2c                	js     c0010754 <sysCallGetArgv(regs*)+0x3a>
c0010728:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001072e:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010731:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010737:	7d 1b                	jge    c0010754 <sysCallGetArgv(regs*)+0x3a>
c0010739:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010740:	85 c0                	test   eax,eax
c0010742:	74 18                	je     c001075c <sysCallGetArgv(regs*)+0x42>
c0010744:	83 ec 08             	sub    esp,0x8
c0010747:	50                   	push   eax
c0010748:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001074b:	50                   	push   eax
c001074c:	e8 cf fe fe ff       	call   c0000620 <strcpy>
c0010751:	83 c4 10             	add    esp,0x10
c0010754:	31 c0                	xor    eax,eax
c0010756:	31 d2                	xor    edx,edx
c0010758:	83 c4 0c             	add    esp,0xc
c001075b:	c3                   	ret    
c001075c:	b8 01 00 00 00       	mov    eax,0x1
c0010761:	31 d2                	xor    edx,edx
c0010763:	83 c4 0c             	add    esp,0xc
c0010766:	c3                   	ret    

c0010767 <sysCallUSleep(regs*)>:
c0010767:	83 ec 1c             	sub    esp,0x1c
c001076a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001076e:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010771:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010774:	6a 00                	push   0x0
c0010776:	6a 64                	push   0x64
c0010778:	52                   	push   edx
c0010779:	50                   	push   eax
c001077a:	e8 41 ad 00 00       	call   c001b4c0 <__udivdi3>
c001077f:	83 c4 14             	add    esp,0x14
c0010782:	50                   	push   eax
c0010783:	e8 c8 22 00 00       	call   c0012a50 <milliTenthSleep(unsigned int)>
c0010788:	31 c0                	xor    eax,eax
c001078a:	31 d2                	xor    edx,edx
c001078c:	83 c4 1c             	add    esp,0x1c
c001078f:	c3                   	ret    

c0010790 <sysCallSpawn(regs*)>:
c0010790:	56                   	push   esi
c0010791:	53                   	push   ebx
c0010792:	50                   	push   eax
c0010793:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010797:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001079a:	85 c0                	test   eax,eax
c001079c:	75 08                	jne    c00107a6 <sysCallSpawn(regs*)+0x16>
c001079e:	59                   	pop    ecx
c001079f:	31 c0                	xor    eax,eax
c00107a1:	31 d2                	xor    edx,edx
c00107a3:	5b                   	pop    ebx
c00107a4:	5e                   	pop    esi
c00107a5:	c3                   	ret    
c00107a6:	83 ec 0c             	sub    esp,0xc
c00107a9:	68 1f 07 00 00       	push   0x71f
c00107ae:	e8 6a 63 ff ff       	call   c0006b1d <malloc>
c00107b3:	83 c4 10             	add    esp,0x10
c00107b6:	89 c6                	mov    esi,eax
c00107b8:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00107bb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00107be:	85 c0                	test   eax,eax
c00107c0:	75 33                	jne    c00107f5 <sysCallSpawn(regs*)+0x65>
c00107c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00107c7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00107ca:	52                   	push   edx
c00107cb:	50                   	push   eax
c00107cc:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c00107cf:	53                   	push   ebx
c00107d0:	56                   	push   esi
c00107d1:	e8 5e 19 00 00       	call   c0012134 <Process::Process(char const*, Process*, char**)>
c00107d6:	83 c4 10             	add    esp,0x10
c00107d9:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00107e0:	75 bc                	jne    c001079e <sysCallSpawn(regs*)+0xe>
c00107e2:	83 ec 0c             	sub    esp,0xc
c00107e5:	56                   	push   esi
c00107e6:	e8 3d 1e 00 00       	call   c0012628 <Process::createUserThread()>
c00107eb:	8b 06                	mov    eax,DWORD PTR [esi]
c00107ed:	83 c4 10             	add    esp,0x10
c00107f0:	99                   	cdq    
c00107f1:	59                   	pop    ecx
c00107f2:	5b                   	pop    ebx
c00107f3:	5e                   	pop    esi
c00107f4:	c3                   	ret    
c00107f5:	31 c0                	xor    eax,eax
c00107f7:	eb d1                	jmp    c00107ca <sysCallSpawn(regs*)+0x3a>

c00107f9 <sysCallGetEnv(regs*)>:
c00107f9:	57                   	push   edi
c00107fa:	56                   	push   esi
c00107fb:	53                   	push   ebx
c00107fc:	83 ec 1c             	sub    esp,0x1c
c00107ff:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010803:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010808:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001080b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001080e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010811:	50                   	push   eax
c0010812:	e8 30 eb ff ff       	call   c000f347 <Krnl::getProcessTotalEnvCount(Process*)>
c0010817:	83 c4 10             	add    esp,0x10
c001081a:	39 c7                	cmp    edi,eax
c001081c:	7c 14                	jl     c0010832 <sysCallGetEnv(regs*)+0x39>
c001081e:	85 f6                	test   esi,esi
c0010820:	75 0b                	jne    c001082d <sysCallGetEnv(regs*)+0x34>
c0010822:	83 c4 10             	add    esp,0x10
c0010825:	31 c0                	xor    eax,eax
c0010827:	5b                   	pop    ebx
c0010828:	31 d2                	xor    edx,edx
c001082a:	5e                   	pop    esi
c001082b:	5f                   	pop    edi
c001082c:	c3                   	ret    
c001082d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010830:	eb f0                	jmp    c0010822 <sysCallGetEnv(regs*)+0x29>
c0010832:	8d 44 24 08          	lea    eax,[esp+0x8]
c0010836:	52                   	push   edx
c0010837:	57                   	push   edi
c0010838:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001083e:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0010841:	51                   	push   ecx
c0010842:	50                   	push   eax
c0010843:	e8 1f eb ff ff       	call   c000f367 <Krnl::getProcessEnvPair(Process*, int)>
c0010848:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001084b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001084f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010853:	83 c4 0c             	add    esp,0xc
c0010856:	85 db                	test   ebx,ebx
c0010858:	75 23                	jne    c001087d <sysCallGetEnv(regs*)+0x84>
c001085a:	83 ec 0c             	sub    esp,0xc
c001085d:	50                   	push   eax
c001085e:	e8 fd fc fe ff       	call   c0000560 <strlen>
c0010863:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010866:	89 c3                	mov    ebx,eax
c0010868:	e8 f3 fc fe ff       	call   c0000560 <strlen>
c001086d:	31 d2                	xor    edx,edx
c001086f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0010873:	83 c4 10             	add    esp,0x10
c0010876:	83 c4 10             	add    esp,0x10
c0010879:	5b                   	pop    ebx
c001087a:	5e                   	pop    esi
c001087b:	5f                   	pop    edi
c001087c:	c3                   	ret    
c001087d:	83 ec 08             	sub    esp,0x8
c0010880:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010883:	50                   	push   eax
c0010884:	56                   	push   esi
c0010885:	e8 96 fd fe ff       	call   c0000620 <strcpy>
c001088a:	58                   	pop    eax
c001088b:	5a                   	pop    edx
c001088c:	68 e3 db 01 c0       	push   0xc001dbe3
c0010891:	56                   	push   esi
c0010892:	e8 49 ff fe ff       	call   c00007e0 <strcat>
c0010897:	59                   	pop    ecx
c0010898:	5b                   	pop    ebx
c0010899:	57                   	push   edi
c001089a:	56                   	push   esi
c001089b:	e8 40 ff fe ff       	call   c00007e0 <strcat>
c00108a0:	83 c4 10             	add    esp,0x10
c00108a3:	e9 7a ff ff ff       	jmp    c0010822 <sysCallGetEnv(regs*)+0x29>

c00108a8 <sysSetFatAttrib(regs*)>:
c00108a8:	57                   	push   edi
c00108a9:	56                   	push   esi
c00108aa:	53                   	push   ebx
c00108ab:	83 ec 1c             	sub    esp,0x1c
c00108ae:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00108b2:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00108b5:	68 14 01 00 00       	push   0x114
c00108ba:	e8 5e 62 ff ff       	call   c0006b1d <malloc>
c00108bf:	83 c4 0c             	add    esp,0xc
c00108c2:	89 c3                	mov    ebx,eax
c00108c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00108c9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00108cc:	50                   	push   eax
c00108cd:	57                   	push   edi
c00108ce:	53                   	push   ebx
c00108cf:	e8 4e 95 ff ff       	call   c0009e22 <File::File(char const*, Process*)>
c00108d4:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00108d7:	83 c4 0c             	add    esp,0xc
c00108da:	0f b6 d4             	movzx  edx,ah
c00108dd:	25 ff 00 00 00       	and    eax,0xff
c00108e2:	52                   	push   edx
c00108e3:	50                   	push   eax
c00108e4:	53                   	push   ebx
c00108e5:	e8 0a 98 ff ff       	call   c000a0f4 <File::chfatattr(unsigned char, unsigned char)>
c00108ea:	83 c4 10             	add    esp,0x10
c00108ed:	85 db                	test   ebx,ebx
c00108ef:	74 14                	je     c0010905 <sysSetFatAttrib(regs*)+0x5d>
c00108f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00108f5:	8b 13                	mov    edx,DWORD PTR [ebx]
c00108f7:	83 ec 0c             	sub    esp,0xc
c00108fa:	53                   	push   ebx
c00108fb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00108fe:	83 c4 10             	add    esp,0x10
c0010901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010905:	85 c0                	test   eax,eax
c0010907:	0f 95 c0             	setne  al
c001090a:	31 d2                	xor    edx,edx
c001090c:	25 ff 00 00 00       	and    eax,0xff
c0010911:	f7 d8                	neg    eax
c0010913:	83 d2 00             	adc    edx,0x0
c0010916:	83 c4 10             	add    esp,0x10
c0010919:	f7 da                	neg    edx
c001091b:	5b                   	pop    ebx
c001091c:	5e                   	pop    esi
c001091d:	5f                   	pop    edi
c001091e:	c3                   	ret    

c001091f <sysPipe(regs*)>:
c001091f:	57                   	push   edi
c0010920:	56                   	push   esi
c0010921:	53                   	push   ebx
c0010922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010926:	83 ec 0c             	sub    esp,0xc
c0010929:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001092c:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001092f:	6a 20                	push   0x20
c0010931:	e8 e7 61 ff ff       	call   c0006b1d <malloc>
c0010936:	89 c3                	mov    ebx,eax
c0010938:	58                   	pop    eax
c0010939:	5a                   	pop    edx
c001093a:	68 00 50 00 00       	push   0x5000
c001093f:	53                   	push   ebx
c0010940:	e8 cf 6b ff ff       	call   c0007514 <Pipe::Pipe(int)>
c0010945:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010948:	e8 c1 78 ff ff       	call   c000820e <UnixFile::getFileDescriptor()>
c001094d:	89 07                	mov    DWORD PTR [edi],eax
c001094f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010952:	e8 b7 78 ff ff       	call   c000820e <UnixFile::getFileDescriptor()>
c0010957:	83 c4 10             	add    esp,0x10
c001095a:	89 06                	mov    DWORD PTR [esi],eax
c001095c:	31 d2                	xor    edx,edx
c001095e:	5b                   	pop    ebx
c001095f:	31 c0                	xor    eax,eax
c0010961:	5e                   	pop    esi
c0010962:	5f                   	pop    edi
c0010963:	c3                   	ret    

c0010964 <sysGetUnixTime(regs*)>:
c0010964:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c0010969:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001096f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010973:	e9 ba 9e ff ff       	jmp    c000a832 <Clock::timeInSecondsLocal()>

c0010978 <string_ends_with(char const*, char const*)>:
c0010978:	57                   	push   edi
c0010979:	56                   	push   esi
c001097a:	53                   	push   ebx
c001097b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001097f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0010983:	83 ec 0c             	sub    esp,0xc
c0010986:	53                   	push   ebx
c0010987:	e8 d4 fb fe ff       	call   c0000560 <strlen>
c001098c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001098f:	89 c6                	mov    esi,eax
c0010991:	e8 ca fb fe ff       	call   c0000560 <strlen>
c0010996:	83 c4 10             	add    esp,0x10
c0010999:	39 c6                	cmp    esi,eax
c001099b:	7d 06                	jge    c00109a3 <string_ends_with(char const*, char const*)+0x2b>
c001099d:	5b                   	pop    ebx
c001099e:	31 c0                	xor    eax,eax
c00109a0:	5e                   	pop    esi
c00109a1:	5f                   	pop    edi
c00109a2:	c3                   	ret    
c00109a3:	83 ec 08             	sub    esp,0x8
c00109a6:	29 c6                	sub    esi,eax
c00109a8:	57                   	push   edi
c00109a9:	01 f3                	add    ebx,esi
c00109ab:	53                   	push   ebx
c00109ac:	e8 4f fd fe ff       	call   c0000700 <strcmp>
c00109b1:	83 c4 10             	add    esp,0x10
c00109b4:	85 c0                	test   eax,eax
c00109b6:	5b                   	pop    ebx
c00109b7:	0f 94 c0             	sete   al
c00109ba:	5e                   	pop    esi
c00109bb:	25 ff 00 00 00       	and    eax,0xff
c00109c0:	5f                   	pop    edi
c00109c1:	c3                   	ret    

c00109c2 <sysCallOpen(regs*)>:
c00109c2:	56                   	push   esi
c00109c3:	53                   	push   ebx
c00109c4:	81 ec 04 01 00 00    	sub    esp,0x104
c00109ca:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00109d1:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00109d4:	85 c9                	test   ecx,ecx
c00109d6:	0f 84 b9 01 00 00    	je     c0010b95 <sysCallOpen(regs*)+0x1d3>
c00109dc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00109df:	85 c0                	test   eax,eax
c00109e1:	0f 84 ae 01 00 00    	je     c0010b95 <sysCallOpen(regs*)+0x1d3>
c00109e7:	52                   	push   edx
c00109e8:	68 e5 db 01 c0       	push   0xc001dbe5
c00109ed:	50                   	push   eax
c00109ee:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00109f2:	56                   	push   esi
c00109f3:	e8 80 92 ff ff       	call   c0009c78 <Fs::standardiseFiles(char*, char const*, char const*)>
c00109f8:	89 34 24             	mov    DWORD PTR [esp],esi
c00109fb:	e8 60 fb fe ff       	call   c0000560 <strlen>
c0010a00:	83 c4 10             	add    esp,0x10
c0010a03:	48                   	dec    eax
c0010a04:	74 1d                	je     c0010a23 <sysCallOpen(regs*)+0x61>
c0010a06:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0010a09:	eb 0f                	jmp    c0010a1a <sysCallOpen(regs*)+0x58>
c0010a0b:	80 fa 3a             	cmp    dl,0x3a
c0010a0e:	74 0f                	je     c0010a1f <sysCallOpen(regs*)+0x5d>
c0010a10:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0010a14:	48                   	dec    eax
c0010a15:	74 0c                	je     c0010a23 <sysCallOpen(regs*)+0x61>
c0010a17:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0010a1a:	80 fa 2e             	cmp    dl,0x2e
c0010a1d:	75 ec                	jne    c0010a0b <sysCallOpen(regs*)+0x49>
c0010a1f:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0010a23:	83 ec 08             	sub    esp,0x8
c0010a26:	68 e9 db 01 c0       	push   0xc001dbe9
c0010a2b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010a2e:	50                   	push   eax
c0010a2f:	e8 44 ff ff ff       	call   c0010978 <string_ends_with(char const*, char const*)>
c0010a34:	83 c4 10             	add    esp,0x10
c0010a37:	85 c0                	test   eax,eax
c0010a39:	74 1d                	je     c0010a58 <sysCallOpen(regs*)+0x96>
c0010a3b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010a3e:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0010a44:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010a4b:	81 c4 04 01 00 00    	add    esp,0x104
c0010a51:	31 c0                	xor    eax,eax
c0010a53:	31 d2                	xor    edx,edx
c0010a55:	5b                   	pop    ebx
c0010a56:	5e                   	pop    esi
c0010a57:	c3                   	ret    
c0010a58:	83 ec 08             	sub    esp,0x8
c0010a5b:	68 ee db 01 c0       	push   0xc001dbee
c0010a60:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010a63:	50                   	push   eax
c0010a64:	e8 0f ff ff ff       	call   c0010978 <string_ends_with(char const*, char const*)>
c0010a69:	83 c4 10             	add    esp,0x10
c0010a6c:	85 c0                	test   eax,eax
c0010a6e:	75 cb                	jne    c0010a3b <sysCallOpen(regs*)+0x79>
c0010a70:	83 ec 08             	sub    esp,0x8
c0010a73:	68 ea db 01 c0       	push   0xc001dbea
c0010a78:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010a7b:	50                   	push   eax
c0010a7c:	e8 7f fc fe ff       	call   c0000700 <strcmp>
c0010a81:	83 c4 10             	add    esp,0x10
c0010a84:	85 c0                	test   eax,eax
c0010a86:	74 b3                	je     c0010a3b <sysCallOpen(regs*)+0x79>
c0010a88:	83 ec 08             	sub    esp,0x8
c0010a8b:	68 e9 db 01 c0       	push   0xc001dbe9
c0010a90:	56                   	push   esi
c0010a91:	e8 e2 fe ff ff       	call   c0010978 <string_ends_with(char const*, char const*)>
c0010a96:	83 c4 10             	add    esp,0x10
c0010a99:	85 c0                	test   eax,eax
c0010a9b:	75 9e                	jne    c0010a3b <sysCallOpen(regs*)+0x79>
c0010a9d:	83 ec 08             	sub    esp,0x8
c0010aa0:	68 f3 db 01 c0       	push   0xc001dbf3
c0010aa5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010aa8:	50                   	push   eax
c0010aa9:	e8 ca fe ff ff       	call   c0010978 <string_ends_with(char const*, char const*)>
c0010aae:	83 c4 10             	add    esp,0x10
c0010ab1:	85 c0                	test   eax,eax
c0010ab3:	0f 85 ef 00 00 00    	jne    c0010ba8 <sysCallOpen(regs*)+0x1e6>
c0010ab9:	83 ec 08             	sub    esp,0x8
c0010abc:	68 f8 db 01 c0       	push   0xc001dbf8
c0010ac1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010ac4:	50                   	push   eax
c0010ac5:	e8 ae fe ff ff       	call   c0010978 <string_ends_with(char const*, char const*)>
c0010aca:	83 c4 10             	add    esp,0x10
c0010acd:	85 c0                	test   eax,eax
c0010acf:	0f 85 d3 00 00 00    	jne    c0010ba8 <sysCallOpen(regs*)+0x1e6>
c0010ad5:	83 ec 08             	sub    esp,0x8
c0010ad8:	68 f4 db 01 c0       	push   0xc001dbf4
c0010add:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010ae0:	51                   	push   ecx
c0010ae1:	e8 1a fc fe ff       	call   c0000700 <strcmp>
c0010ae6:	83 c4 10             	add    esp,0x10
c0010ae9:	85 c0                	test   eax,eax
c0010aeb:	0f 84 b7 00 00 00    	je     c0010ba8 <sysCallOpen(regs*)+0x1e6>
c0010af1:	83 ec 08             	sub    esp,0x8
c0010af4:	68 f3 db 01 c0       	push   0xc001dbf3
c0010af9:	56                   	push   esi
c0010afa:	e8 79 fe ff ff       	call   c0010978 <string_ends_with(char const*, char const*)>
c0010aff:	83 c4 10             	add    esp,0x10
c0010b02:	85 c0                	test   eax,eax
c0010b04:	0f 85 9e 00 00 00    	jne    c0010ba8 <sysCallOpen(regs*)+0x1e6>
c0010b0a:	83 ec 0c             	sub    esp,0xc
c0010b0d:	68 14 01 00 00       	push   0x114
c0010b12:	e8 06 60 ff ff       	call   c0006b1d <malloc>
c0010b17:	83 c4 0c             	add    esp,0xc
c0010b1a:	89 c6                	mov    esi,eax
c0010b1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010b21:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010b24:	50                   	push   eax
c0010b25:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0010b28:	52                   	push   edx
c0010b29:	56                   	push   esi
c0010b2a:	e8 f3 92 ff ff       	call   c0009e22 <File::File(char const*, Process*)>
c0010b2f:	83 c4 10             	add    esp,0x10
c0010b32:	85 f6                	test   esi,esi
c0010b34:	74 5f                	je     c0010b95 <sysCallOpen(regs*)+0x1d3>
c0010b36:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010b39:	89 d0                	mov    eax,edx
c0010b3b:	25 ff 00 00 00       	and    eax,0xff
c0010b40:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0010b43:	89 d0                	mov    eax,edx
c0010b45:	83 e0 01             	and    eax,0x1
c0010b48:	f6 c2 02             	test   dl,0x2
c0010b4b:	74 03                	je     c0010b50 <sysCallOpen(regs*)+0x18e>
c0010b4d:	83 c8 02             	or     eax,0x2
c0010b50:	f6 c2 04             	test   dl,0x4
c0010b53:	74 03                	je     c0010b58 <sysCallOpen(regs*)+0x196>
c0010b55:	83 c8 04             	or     eax,0x4
c0010b58:	f6 c2 08             	test   dl,0x8
c0010b5b:	74 03                	je     c0010b60 <sysCallOpen(regs*)+0x19e>
c0010b5d:	83 c8 0a             	or     eax,0xa
c0010b60:	83 e2 10             	and    edx,0x10
c0010b63:	74 03                	je     c0010b68 <sysCallOpen(regs*)+0x1a6>
c0010b65:	83 c8 12             	or     eax,0x12
c0010b68:	83 ec 08             	sub    esp,0x8
c0010b6b:	50                   	push   eax
c0010b6c:	56                   	push   esi
c0010b6d:	e8 70 93 ff ff       	call   c0009ee2 <File::open(FileOpenMode)>
c0010b72:	83 c4 10             	add    esp,0x10
c0010b75:	85 c0                	test   eax,eax
c0010b77:	75 1c                	jne    c0010b95 <sysCallOpen(regs*)+0x1d3>
c0010b79:	83 ec 0c             	sub    esp,0xc
c0010b7c:	56                   	push   esi
c0010b7d:	e8 8c 76 ff ff       	call   c000820e <UnixFile::getFileDescriptor()>
c0010b82:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010b85:	83 c4 10             	add    esp,0x10
c0010b88:	89 02                	mov    DWORD PTR [edx],eax
c0010b8a:	c1 f8 1f             	sar    eax,0x1f
c0010b8d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010b90:	e9 b6 fe ff ff       	jmp    c0010a4b <sysCallOpen(regs*)+0x89>
c0010b95:	81 c4 04 01 00 00    	add    esp,0x104
c0010b9b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010ba0:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ba5:	5b                   	pop    ebx
c0010ba6:	5e                   	pop    esi
c0010ba7:	c3                   	ret    
c0010ba8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010bab:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0010bb1:	e9 8e fe ff ff       	jmp    c0010a44 <sysCallOpen(regs*)+0x82>

c0010bb6 <Sys::loadSyscalls()>:
c0010bb6:	c7 05 00 1d 02 c0 92 ff 00 c0 	mov    DWORD PTR ds:0xc0021d00,0xc000ff92
c0010bc0:	c7 05 04 1d 02 c0 89 fb 00 c0 	mov    DWORD PTR ds:0xc0021d04,0xc000fb89
c0010bca:	c7 05 08 1d 02 c0 78 fd 00 c0 	mov    DWORD PTR ds:0xc0021d08,0xc000fd78
c0010bd4:	c7 05 0c 1d 02 c0 c8 fe 00 c0 	mov    DWORD PTR ds:0xc0021d0c,0xc000fec8
c0010bde:	c7 05 10 1d 02 c0 10 fd 00 c0 	mov    DWORD PTR ds:0xc0021d10,0xc000fd10
c0010be8:	c7 05 14 1d 02 c0 c0 fb 00 c0 	mov    DWORD PTR ds:0xc0021d14,0xc000fbc0
c0010bf2:	c7 05 18 1d 02 c0 a1 fb 00 c0 	mov    DWORD PTR ds:0xc0021d18,0xc000fba1
c0010bfc:	c7 05 1c 1d 02 c0 cd fd 00 c0 	mov    DWORD PTR ds:0xc0021d1c,0xc000fdcd
c0010c06:	c7 05 24 1d 02 c0 5c 04 01 c0 	mov    DWORD PTR ds:0xc0021d24,0xc001045c
c0010c10:	c7 05 20 1d 02 c0 c2 09 01 c0 	mov    DWORD PTR ds:0xc0021d20,0xc00109c2
c0010c1a:	c7 05 28 1d 02 c0 bc 04 01 c0 	mov    DWORD PTR ds:0xc0021d28,0xc00104bc
c0010c24:	c7 05 2c 1d 02 c0 90 01 01 c0 	mov    DWORD PTR ds:0xc0021d2c,0xc0010190
c0010c2e:	c7 05 30 1d 02 c0 b7 ff 00 c0 	mov    DWORD PTR ds:0xc0021d30,0xc000ffb7
c0010c38:	c7 05 34 1d 02 c0 bc ff 00 c0 	mov    DWORD PTR ds:0xc0021d34,0xc000ffbc
c0010c42:	c7 05 38 1d 02 c0 87 05 01 c0 	mov    DWORD PTR ds:0xc0021d38,0xc0010587
c0010c4c:	c7 05 3c 1d 02 c0 33 05 01 c0 	mov    DWORD PTR ds:0xc0021d3c,0xc0010533
c0010c56:	c7 05 40 1d 02 c0 6c 02 01 c0 	mov    DWORD PTR ds:0xc0021d40,0xc001026c
c0010c60:	c7 05 44 1d 02 c0 c5 02 01 c0 	mov    DWORD PTR ds:0xc0021d44,0xc00102c5
c0010c6a:	c7 05 48 1d 02 c0 34 03 01 c0 	mov    DWORD PTR ds:0xc0021d48,0xc0010334
c0010c74:	c7 05 4c 1d 02 c0 c1 ff 00 c0 	mov    DWORD PTR ds:0xc0021d4c,0xc000ffc1
c0010c7e:	c7 05 50 1d 02 c0 f9 05 01 c0 	mov    DWORD PTR ds:0xc0021d50,0xc00105f9
c0010c88:	c7 05 54 1d 02 c0 16 06 01 c0 	mov    DWORD PTR ds:0xc0021d54,0xc0010616
c0010c92:	c7 05 58 1d 02 c0 16 06 01 c0 	mov    DWORD PTR ds:0xc0021d58,0xc0010616
c0010c9c:	c7 05 5c 1d 02 c0 4c 06 01 c0 	mov    DWORD PTR ds:0xc0021d5c,0xc001064c
c0010ca6:	c7 05 60 1d 02 c0 b3 06 01 c0 	mov    DWORD PTR ds:0xc0021d60,0xc00106b3
c0010cb0:	c7 05 64 1d 02 c0 cb ff 00 c0 	mov    DWORD PTR ds:0xc0021d64,0xc000ffcb
c0010cba:	c7 05 68 1d 02 c0 1a 07 01 c0 	mov    DWORD PTR ds:0xc0021d68,0xc001071a
c0010cc4:	c7 05 6c 1d 02 c0 4d 01 01 c0 	mov    DWORD PTR ds:0xc0021d6c,0xc001014d
c0010cce:	c7 05 70 1d 02 c0 db ff 00 c0 	mov    DWORD PTR ds:0xc0021d70,0xc000ffdb
c0010cd8:	c7 05 74 1d 02 c0 10 02 01 c0 	mov    DWORD PTR ds:0xc0021d74,0xc0010210
c0010ce2:	c7 05 78 1d 02 c0 67 07 01 c0 	mov    DWORD PTR ds:0xc0021d78,0xc0010767
c0010cec:	c7 05 7c 1d 02 c0 a9 03 01 c0 	mov    DWORD PTR ds:0xc0021d7c,0xc00103a9
c0010cf6:	c7 05 80 1d 02 c0 90 07 01 c0 	mov    DWORD PTR ds:0xc0021d80,0xc0010790
c0010d00:	c7 05 84 1d 02 c0 f9 07 01 c0 	mov    DWORD PTR ds:0xc0021d84,0xc00107f9
c0010d0a:	c7 05 8c 1d 02 c0 e3 ff 00 c0 	mov    DWORD PTR ds:0xc0021d8c,0xc000ffe3
c0010d14:	c7 05 90 1d 02 c0 50 00 01 c0 	mov    DWORD PTR ds:0xc0021d90,0xc0010050
c0010d1e:	c7 05 94 1d 02 c0 9a 00 01 c0 	mov    DWORD PTR ds:0xc0021d94,0xc001009a
c0010d28:	c7 05 98 1d 02 c0 a8 08 01 c0 	mov    DWORD PTR ds:0xc0021d98,0xc00108a8
c0010d32:	c7 05 9c 1d 02 c0 31 06 01 c0 	mov    DWORD PTR ds:0xc0021d9c,0xc0010631
c0010d3c:	c7 05 a0 1d 02 c0 ef 00 01 c0 	mov    DWORD PTR ds:0xc0021da0,0xc00100ef
c0010d46:	c7 05 a4 1d 02 c0 1f 09 01 c0 	mov    DWORD PTR ds:0xc0021da4,0xc001091f
c0010d50:	c7 05 a8 1d 02 c0 64 09 01 c0 	mov    DWORD PTR ds:0xc0021da8,0xc0010964
c0010d5a:	c7 05 ac 1d 02 c0 68 fc 00 c0 	mov    DWORD PTR ds:0xc0021dac,0xc000fc68
c0010d64:	c7 05 b0 1d 02 c0 e9 fd 00 c0 	mov    DWORD PTR ds:0xc0021db0,0xc000fde9
c0010d6e:	c7 05 b4 1d 02 c0 7e fe 00 c0 	mov    DWORD PTR ds:0xc0021db4,0xc000fe7e
c0010d78:	c7 05 b8 1d 02 c0 53 fb 00 c0 	mov    DWORD PTR ds:0xc0021db8,0xc000fb53
c0010d82:	c7 05 bc 1d 02 c0 30 ff 00 c0 	mov    DWORD PTR ds:0xc0021dbc,0xc000ff30
c0010d8c:	c7 05 c0 1d 02 c0 cc fb 00 c0 	mov    DWORD PTR ds:0xc0021dc0,0xc000fbcc
c0010d96:	c7 05 c4 1d 02 c0 e6 fb 00 c0 	mov    DWORD PTR ds:0xc0021dc4,0xc000fbe6
c0010da0:	c3                   	ret    

c0010da1 <Sys::systemCall(regs*, void*)>:
c0010da1:	53                   	push   ebx
c0010da2:	83 ec 08             	sub    esp,0x8
c0010da5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010da9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010dac:	83 f8 7f             	cmp    eax,0x7f
c0010daf:	77 16                	ja     c0010dc7 <Sys::systemCall(regs*, void*)+0x26>
c0010db1:	8b 14 85 00 1d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffde300]
c0010db8:	85 d2                	test   edx,edx
c0010dba:	74 0b                	je     c0010dc7 <Sys::systemCall(regs*, void*)+0x26>
c0010dbc:	83 ec 0c             	sub    esp,0xc
c0010dbf:	53                   	push   ebx
c0010dc0:	ff d2                	call   edx
c0010dc2:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0010dc5:	eb 0d                	jmp    c0010dd4 <Sys::systemCall(regs*, void*)+0x33>
c0010dc7:	52                   	push   edx
c0010dc8:	52                   	push   edx
c0010dc9:	50                   	push   eax
c0010dca:	68 fd db 01 c0       	push   0xc001dbfd
c0010dcf:	e8 d8 8a ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c0010dd4:	83 c4 10             	add    esp,0x10
c0010dd7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0010ddc:	31 d2                	xor    edx,edx
c0010dde:	83 c4 08             	add    esp,0x8
c0010de1:	5b                   	pop    ebx
c0010de2:	c3                   	ret    

c0010de3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0010de3:	55                   	push   ebp
c0010de4:	57                   	push   edi
c0010de5:	56                   	push   esi
c0010de6:	53                   	push   ebx
c0010de7:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0010ded:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0010df5:	0f 95 c2             	setne  dl
c0010df8:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0010e00:	0f 94 c0             	sete   al
c0010e03:	84 c2                	test   dl,al
c0010e05:	74 34                	je     c0010e3b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0010e07:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0010e12:	74 27                	je     c0010e3b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0010e14:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0010e1b:	05 00 10 00 00       	add    eax,0x1000
c0010e20:	89 c1                	mov    ecx,eax
c0010e22:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010e27:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0010e2d:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0010e34:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0010e3b:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0010e42:	83 ec 0c             	sub    esp,0xc
c0010e45:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0010e4b:	6a 01                	push   0x1
c0010e4d:	e8 07 78 ff ff       	call   c0008659 <Virt::allocateKernelVirtualPages(int)>
c0010e52:	83 c4 10             	add    esp,0x10
c0010e55:	89 c3                	mov    ebx,eax
c0010e57:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0010e5d:	0f 86 25 01 00 00    	jbe    c0010f88 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0010e63:	c1 ee 0c             	shr    esi,0xc
c0010e66:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0010e6d:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010e71:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010e79:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0010e80:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010e84:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0010e8b:	29 ef                	sub    edi,ebp
c0010e8d:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0010e91:	0f 83 f8 00 00 00    	jae    c0010f8f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0010e97:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0010e9d:	76 05                	jbe    c0010ea4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0010e9f:	bf 00 10 00 00       	mov    edi,0x1000
c0010ea4:	83 ec 0c             	sub    esp,0xc
c0010ea7:	31 d2                	xor    edx,edx
c0010ea9:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0010eb0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0010eb2:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010eb6:	50                   	push   eax
c0010eb7:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010ebb:	56                   	push   esi
c0010ebc:	52                   	push   edx
c0010ebd:	57                   	push   edi
c0010ebe:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0010ec5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0010ec8:	83 c4 20             	add    esp,0x20
c0010ecb:	85 c0                	test   eax,eax
c0010ecd:	75 06                	jne    c0010ed5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0010ecf:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0010ed3:	74 13                	je     c0010ee8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0010ed5:	83 ec 0c             	sub    esp,0xc
c0010ed8:	53                   	push   ebx
c0010ed9:	e8 ab 7a ff ff       	call   c0008989 <Virt::freeKernelVirtualPages(unsigned long)>
c0010ede:	83 c4 10             	add    esp,0x10
c0010ee1:	31 c0                	xor    eax,eax
c0010ee3:	e9 7c 01 00 00       	jmp    c0011064 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0010ee8:	fa                   	cli    
c0010ee9:	ff 05 c8 26 02 c0    	inc    DWORD PTR ds:0xc00226c8
c0010eef:	e8 f6 5f ff ff       	call   c0006eea <Phys::allocatePage()>
c0010ef4:	6a 07                	push   0x7
c0010ef6:	89 c7                	mov    edi,eax
c0010ef8:	53                   	push   ebx
c0010ef9:	50                   	push   eax
c0010efa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010eff:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f02:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0010f08:	e8 e1 7d ff ff       	call   c0008cee <VAS::mapPage(unsigned long, unsigned long, int)>
c0010f0d:	83 c4 0c             	add    esp,0xc
c0010f10:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0010f17:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0010f1d:	6a 00                	push   0x0
c0010f1f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f24:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f27:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0010f2d:	e8 2e 7c ff ff       	call   c0008b60 <VAS::mapOtherVASIn(bool, VAS*)>
c0010f32:	58                   	pop    eax
c0010f33:	5a                   	pop    edx
c0010f34:	68 07 0c 00 00       	push   0xc07
c0010f39:	55                   	push   ebp
c0010f3a:	57                   	push   edi
c0010f3b:	89 df                	mov    edi,ebx
c0010f3d:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0010f44:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0010f4a:	6a 00                	push   0x0
c0010f4c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f51:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f54:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0010f5a:	e8 4f 81 ff ff       	call   c00090ae <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0010f5f:	b9 00 10 00 00       	mov    ecx,0x1000
c0010f64:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f66:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c0010f6b:	83 c4 20             	add    esp,0x20
c0010f6e:	48                   	dec    eax
c0010f6f:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c0010f74:	85 c0                	test   eax,eax
c0010f76:	75 01                	jne    c0010f79 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0010f78:	fb                   	sti    
c0010f79:	81 c5 00 10 00 00    	add    ebp,0x1000
c0010f7f:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0010f83:	e9 f1 fe ff ff       	jmp    c0010e79 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0010f88:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0010f8f:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0010f96:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0010f9c:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0010fa2:	0f 86 ae 00 00 00    	jbe    c0011056 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0010fa8:	fa                   	cli    
c0010fa9:	ff 05 c8 26 02 c0    	inc    DWORD PTR ds:0xc00226c8
c0010faf:	c1 ee 0c             	shr    esi,0xc
c0010fb2:	51                   	push   ecx
c0010fb3:	31 ff                	xor    edi,edi
c0010fb5:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0010fbc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0010fc2:	6a 00                	push   0x0
c0010fc4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010fc9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010fcc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0010fd2:	e8 89 7b ff ff       	call   c0008b60 <VAS::mapOtherVASIn(bool, VAS*)>
c0010fd7:	83 c4 10             	add    esp,0x10
c0010fda:	e8 0b 5f ff ff       	call   c0006eea <Phys::allocatePage()>
c0010fdf:	47                   	inc    edi
c0010fe0:	6a 07                	push   0x7
c0010fe2:	53                   	push   ebx
c0010fe3:	50                   	push   eax
c0010fe4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010fe8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010fee:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0010ff1:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0010ff7:	e8 f2 7c ff ff       	call   c0008cee <VAS::mapPage(unsigned long, unsigned long, int)>
c0010ffc:	58                   	pop    eax
c0010ffd:	5a                   	pop    edx
c0010ffe:	68 07 0c 00 00       	push   0xc07
c0011003:	55                   	push   ebp
c0011004:	81 c5 00 10 00 00    	add    ebp,0x1000
c001100a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001100e:	50                   	push   eax
c001100f:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011016:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001101c:	6a 00                	push   0x0
c001101e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011023:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011026:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001102c:	e8 7d 80 ff ff       	call   c00090ae <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011031:	83 c4 1c             	add    esp,0x1c
c0011034:	68 00 10 00 00       	push   0x1000
c0011039:	6a 00                	push   0x0
c001103b:	53                   	push   ebx
c001103c:	e8 af f4 fe ff       	call   c00004f0 <memset>
c0011041:	83 c4 10             	add    esp,0x10
c0011044:	39 fe                	cmp    esi,edi
c0011046:	77 92                	ja     c0010fda <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0011048:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c001104d:	48                   	dec    eax
c001104e:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c0011053:	75 01                	jne    c0011056 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011055:	fb                   	sti    
c0011056:	83 ec 0c             	sub    esp,0xc
c0011059:	53                   	push   ebx
c001105a:	e8 2a 79 ff ff       	call   c0008989 <Virt::freeKernelVirtualPages(unsigned long)>
c001105f:	83 c4 10             	add    esp,0x10
c0011062:	b0 01                	mov    al,0x1
c0011064:	81 c4 2c 10 00 00    	add    esp,0x102c
c001106a:	5b                   	pop    ebx
c001106b:	5e                   	pop    esi
c001106c:	5f                   	pop    edi
c001106d:	5d                   	pop    ebp
c001106e:	c3                   	ret    

c001106f <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001106f:	55                   	push   ebp
c0011070:	57                   	push   edi
c0011071:	56                   	push   esi
c0011072:	53                   	push   ebx
c0011073:	83 ec 48             	sub    esp,0x48
c0011076:	68 14 01 00 00       	push   0x114
c001107b:	e8 9d 5a ff ff       	call   c0006b1d <malloc>
c0011080:	83 c4 0c             	add    esp,0xc
c0011083:	89 c6                	mov    esi,eax
c0011085:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011089:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001108d:	50                   	push   eax
c001108e:	e8 8f 8d ff ff       	call   c0009e22 <File::File(char const*, Process*)>
c0011093:	58                   	pop    eax
c0011094:	5a                   	pop    edx
c0011095:	6a 01                	push   0x1
c0011097:	56                   	push   esi
c0011098:	e8 45 8e ff ff       	call   c0009ee2 <File::open(FileOpenMode)>
c001109d:	83 c4 10             	add    esp,0x10
c00110a0:	85 c0                	test   eax,eax
c00110a2:	0f 85 47 01 00 00    	jne    c00111ef <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00110a8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00110b0:	83 ec 0c             	sub    esp,0xc
c00110b3:	6a 34                	push   0x34
c00110b5:	e8 63 5a ff ff       	call   c0006b1d <malloc>
c00110ba:	89 c3                	mov    ebx,eax
c00110bc:	58                   	pop    eax
c00110bd:	8b 06                	mov    eax,DWORD PTR [esi]
c00110bf:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00110c3:	57                   	push   edi
c00110c4:	53                   	push   ebx
c00110c5:	6a 00                	push   0x0
c00110c7:	6a 34                	push   0x34
c00110c9:	56                   	push   esi
c00110ca:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00110cd:	83 c4 20             	add    esp,0x20
c00110d0:	85 c0                	test   eax,eax
c00110d2:	0f 85 17 01 00 00    	jne    c00111ef <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00110d8:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00110de:	0f 85 0b 01 00 00    	jne    c00111ef <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00110e4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00110e7:	85 c0                	test   eax,eax
c00110e9:	0f 84 00 01 00 00    	je     c00111ef <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00110ef:	31 d2                	xor    edx,edx
c00110f1:	55                   	push   ebp
c00110f2:	52                   	push   edx
c00110f3:	50                   	push   eax
c00110f4:	56                   	push   esi
c00110f5:	e8 a6 8e ff ff       	call   c0009fa0 <File::seek(unsigned long long)>
c00110fa:	83 c4 10             	add    esp,0x10
c00110fd:	85 c0                	test   eax,eax
c00110ff:	0f 85 ea 00 00 00    	jne    c00111ef <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011105:	83 ec 0c             	sub    esp,0xc
c0011108:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001110b:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001110f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011113:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0011117:	0f af c2             	imul   eax,edx
c001111a:	50                   	push   eax
c001111b:	e8 fd 59 ff ff       	call   c0006b1d <malloc>
c0011120:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011122:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011126:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011129:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001112d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0011131:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0011135:	0f af c2             	imul   eax,edx
c0011138:	99                   	cdq    
c0011139:	52                   	push   edx
c001113a:	50                   	push   eax
c001113b:	56                   	push   esi
c001113c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001113f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0011142:	83 c4 20             	add    esp,0x20
c0011145:	85 c0                	test   eax,eax
c0011147:	0f 84 a2 00 00 00    	je     c00111ef <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001114d:	31 d2                	xor    edx,edx
c001114f:	51                   	push   ecx
c0011150:	52                   	push   edx
c0011151:	50                   	push   eax
c0011152:	56                   	push   esi
c0011153:	e8 48 8e ff ff       	call   c0009fa0 <File::seek(unsigned long long)>
c0011158:	83 c4 10             	add    esp,0x10
c001115b:	85 c0                	test   eax,eax
c001115d:	0f 85 8c 00 00 00    	jne    c00111ef <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011163:	83 ec 0c             	sub    esp,0xc
c0011166:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001116a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001116e:	31 ed                	xor    ebp,ebp
c0011170:	0f af c2             	imul   eax,edx
c0011173:	50                   	push   eax
c0011174:	e8 a4 59 ff ff       	call   c0006b1d <malloc>
c0011179:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001117b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001117f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011186:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001118a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001118e:	0f af c2             	imul   eax,edx
c0011191:	99                   	cdq    
c0011192:	52                   	push   edx
c0011193:	50                   	push   eax
c0011194:	56                   	push   esi
c0011195:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011198:	83 c4 20             	add    esp,0x20
c001119b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00111a3:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00111a7:	0f 86 80 00 00 00    	jbe    c001122d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00111ad:	0f b7 fd             	movzx  edi,bp
c00111b0:	c1 e7 05             	shl    edi,0x5
c00111b3:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00111b7:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00111ba:	75 6b                	jne    c0011227 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00111bc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00111bf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00111c3:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00111c6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00111ca:	52                   	push   edx
c00111cb:	31 d2                	xor    edx,edx
c00111cd:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00111d0:	52                   	push   edx
c00111d1:	50                   	push   eax
c00111d2:	56                   	push   esi
c00111d3:	e8 c8 8d ff ff       	call   c0009fa0 <File::seek(unsigned long long)>
c00111d8:	83 c4 10             	add    esp,0x10
c00111db:	85 c0                	test   eax,eax
c00111dd:	74 17                	je     c00111f6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00111df:	83 ec 0c             	sub    esp,0xc
c00111e2:	68 11 dc 01 c0       	push   0xc001dc11
c00111e7:	e8 c0 86 ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c00111ec:	83 c4 10             	add    esp,0x10
c00111ef:	31 c0                	xor    eax,eax
c00111f1:	e9 87 00 00 00       	jmp    c001127d <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00111f6:	83 ec 0c             	sub    esp,0xc
c00111f9:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00111fc:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00111ff:	50                   	push   eax
c0011200:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011204:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011208:	56                   	push   esi
c0011209:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001120d:	e8 d1 fb ff ff       	call   c0010de3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0011212:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011216:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001121a:	83 c4 20             	add    esp,0x20
c001121d:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0011221:	73 04                	jae    c0011227 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0011223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011227:	45                   	inc    ebp
c0011228:	e9 76 ff ff ff       	jmp    c00111a3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001122d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0011231:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011235:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011239:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c001123f:	83 ec 0c             	sub    esp,0xc
c0011242:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0011248:	25 00 f0 ff ff       	and    eax,0xfffff000
c001124d:	05 00 10 00 00       	add    eax,0x1000
c0011252:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011255:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011259:	e8 cf 58 ff ff       	call   c0006b2d <free>
c001125e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011261:	e8 c7 58 ff ff       	call   c0006b2d <free>
c0011266:	58                   	pop    eax
c0011267:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001126b:	e8 bd 58 ff ff       	call   c0006b2d <free>
c0011270:	89 34 24             	mov    DWORD PTR [esp],esi
c0011273:	e8 c8 8c ff ff       	call   c0009f40 <File::close()>
c0011278:	83 c4 10             	add    esp,0x10
c001127b:	b0 01                	mov    al,0x1
c001127d:	83 c4 3c             	add    esp,0x3c
c0011280:	5b                   	pop    ebx
c0011281:	5e                   	pop    esi
c0011282:	5f                   	pop    edi
c0011283:	5d                   	pop    ebp
c0011284:	c3                   	ret    

c0011285 <Thr::runtimeReferenceHelper()>:
c0011285:	83 ec 18             	sub    esp,0x18
c0011288:	68 19 dc 01 c0       	push   0xc001dc19
c001128d:	e8 1a 86 ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c0011292:	fa                   	cli    
c0011293:	83 c4 10             	add    esp,0x10
c0011296:	eb fe                	jmp    c0011296 <Thr::runtimeReferenceHelper()+0x11>

c0011298 <Thr::getAddressOfKernelSymbol(char const*)>:
c0011298:	57                   	push   edi
c0011299:	56                   	push   esi
c001129a:	53                   	push   ebx
c001129b:	31 db                	xor    ebx,ebx
c001129d:	39 1d a0 26 02 c0    	cmp    DWORD PTR ds:0xc00226a0,ebx
c00112a3:	7e 3c                	jle    c00112e1 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00112a5:	8b 34 9d 20 26 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdd9e0]
c00112ac:	31 ff                	xor    edi,edi
c00112ae:	39 3c 9d 20 25 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffddae0],edi
c00112b5:	7e 27                	jle    c00112de <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00112b7:	50                   	push   eax
c00112b8:	50                   	push   eax
c00112b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00112bd:	8b 06                	mov    eax,DWORD PTR [esi]
c00112bf:	03 04 9d a0 25 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdda60]
c00112c6:	50                   	push   eax
c00112c7:	e8 34 f4 fe ff       	call   c0000700 <strcmp>
c00112cc:	83 c4 10             	add    esp,0x10
c00112cf:	85 c0                	test   eax,eax
c00112d1:	75 05                	jne    c00112d8 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00112d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00112d6:	eb 0b                	jmp    c00112e3 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00112d8:	83 c6 10             	add    esi,0x10
c00112db:	47                   	inc    edi
c00112dc:	eb d0                	jmp    c00112ae <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00112de:	43                   	inc    ebx
c00112df:	eb bc                	jmp    c001129d <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00112e1:	31 c0                	xor    eax,eax
c00112e3:	5b                   	pop    ebx
c00112e4:	5e                   	pop    esi
c00112e5:	5f                   	pop    edi
c00112e6:	c3                   	ret    

c00112e7 <Thr::loadKernelSymbolTable(char const*)>:
c00112e7:	55                   	push   ebp
c00112e8:	57                   	push   edi
c00112e9:	56                   	push   esi
c00112ea:	53                   	push   ebx
c00112eb:	83 ec 68             	sub    esp,0x68
c00112ee:	8b 35 f0 26 02 c0    	mov    esi,DWORD PTR ds:0xc00226f0
c00112f4:	68 14 01 00 00       	push   0x114
c00112f9:	e8 1f 58 ff ff       	call   c0006b1d <malloc>
c00112fe:	83 c4 0c             	add    esp,0xc
c0011301:	89 c3                	mov    ebx,eax
c0011303:	56                   	push   esi
c0011304:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0011308:	50                   	push   eax
c0011309:	e8 14 8b ff ff       	call   c0009e22 <File::File(char const*, Process*)>
c001130e:	5e                   	pop    esi
c001130f:	5f                   	pop    edi
c0011310:	6a 01                	push   0x1
c0011312:	53                   	push   ebx
c0011313:	e8 ca 8b ff ff       	call   c0009ee2 <File::open(FileOpenMode)>
c0011318:	83 c4 10             	add    esp,0x10
c001131b:	85 c0                	test   eax,eax
c001131d:	74 0a                	je     c0011329 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001131f:	83 ec 0c             	sub    esp,0xc
c0011322:	68 3b dc 01 c0       	push   0xc001dc3b
c0011327:	eb 34                	jmp    c001135d <Thr::loadKernelSymbolTable(char const*)+0x76>
c0011329:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0011331:	83 ec 0c             	sub    esp,0xc
c0011334:	6a 34                	push   0x34
c0011336:	e8 e2 57 ff ff       	call   c0006b1d <malloc>
c001133b:	59                   	pop    ecx
c001133c:	89 c7                	mov    edi,eax
c001133e:	8d 74 24 34          	lea    esi,[esp+0x34]
c0011342:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011344:	56                   	push   esi
c0011345:	57                   	push   edi
c0011346:	6a 00                	push   0x0
c0011348:	6a 34                	push   0x34
c001134a:	53                   	push   ebx
c001134b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001134e:	83 c4 20             	add    esp,0x20
c0011351:	85 c0                	test   eax,eax
c0011353:	74 17                	je     c001136c <Thr::loadKernelSymbolTable(char const*)+0x85>
c0011355:	83 ec 0c             	sub    esp,0xc
c0011358:	68 52 dc 01 c0       	push   0xc001dc52
c001135d:	e8 99 e0 ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c0011362:	83 c4 10             	add    esp,0x10
c0011365:	31 c0                	xor    eax,eax
c0011367:	e9 31 02 00 00       	jmp    c001159d <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001136c:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0011372:	75 e1                	jne    c0011355 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0011374:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0011377:	85 c0                	test   eax,eax
c0011379:	74 da                	je     c0011355 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001137b:	52                   	push   edx
c001137c:	31 d2                	xor    edx,edx
c001137e:	52                   	push   edx
c001137f:	50                   	push   eax
c0011380:	53                   	push   ebx
c0011381:	e8 1a 8c ff ff       	call   c0009fa0 <File::seek(unsigned long long)>
c0011386:	83 c4 10             	add    esp,0x10
c0011389:	85 c0                	test   eax,eax
c001138b:	75 c8                	jne    c0011355 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001138d:	83 ec 0c             	sub    esp,0xc
c0011390:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0011394:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011398:	31 ed                	xor    ebp,ebp
c001139a:	0f af c2             	imul   eax,edx
c001139d:	50                   	push   eax
c001139e:	e8 7a 57 ff ff       	call   c0006b1d <malloc>
c00113a3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00113a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00113a9:	89 34 24             	mov    DWORD PTR [esp],esi
c00113ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113b0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00113b4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00113b8:	0f af c2             	imul   eax,edx
c00113bb:	99                   	cdq    
c00113bc:	52                   	push   edx
c00113bd:	50                   	push   eax
c00113be:	53                   	push   ebx
c00113bf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00113c2:	83 c4 20             	add    esp,0x20
c00113c5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00113cd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00113d5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00113dd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00113e5:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c00113e9:	0f 86 aa 00 00 00    	jbe    c0011499 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00113ef:	0f b7 f5             	movzx  esi,bp
c00113f2:	6b f6 28             	imul   esi,esi,0x28
c00113f5:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00113f9:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00113fc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011400:	50                   	push   eax
c0011401:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011405:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0011409:	8b 16                	mov    edx,DWORD PTR [esi]
c001140b:	6b c0 28             	imul   eax,eax,0x28
c001140e:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0011412:	89 d0                	mov    eax,edx
c0011414:	31 d2                	xor    edx,edx
c0011416:	52                   	push   edx
c0011417:	50                   	push   eax
c0011418:	53                   	push   ebx
c0011419:	e8 82 8b ff ff       	call   c0009fa0 <File::seek(unsigned long long)>
c001141e:	83 c4 0c             	add    esp,0xc
c0011421:	6a 20                	push   0x20
c0011423:	6a 00                	push   0x0
c0011425:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0011429:	52                   	push   edx
c001142a:	e8 c1 f0 fe ff       	call   c00004f0 <memset>
c001142f:	58                   	pop    eax
c0011430:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011432:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0011436:	51                   	push   ecx
c0011437:	8d 54 24 40          	lea    edx,[esp+0x40]
c001143b:	52                   	push   edx
c001143c:	6a 00                	push   0x0
c001143e:	6a 1f                	push   0x1f
c0011440:	53                   	push   ebx
c0011441:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011444:	83 c4 18             	add    esp,0x18
c0011447:	68 69 dc 01 c0       	push   0xc001dc69
c001144c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0011450:	52                   	push   edx
c0011451:	e8 aa f2 fe ff       	call   c0000700 <strcmp>
c0011456:	83 c4 10             	add    esp,0x10
c0011459:	85 c0                	test   eax,eax
c001145b:	75 0f                	jne    c001146c <Thr::loadKernelSymbolTable(char const*)+0x185>
c001145d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011460:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011464:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011468:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001146c:	50                   	push   eax
c001146d:	50                   	push   eax
c001146e:	68 71 dc 01 c0       	push   0xc001dc71
c0011473:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0011477:	50                   	push   eax
c0011478:	e8 83 f2 fe ff       	call   c0000700 <strcmp>
c001147d:	83 c4 10             	add    esp,0x10
c0011480:	85 c0                	test   eax,eax
c0011482:	75 0f                	jne    c0011493 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0011484:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011487:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001148b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001148f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011493:	45                   	inc    ebp
c0011494:	e9 4c ff ff ff       	jmp    c00113e5 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0011499:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001149e:	75 10                	jne    c00114b0 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00114a0:	83 ec 0c             	sub    esp,0xc
c00114a3:	68 79 dc 01 c0       	push   0xc001dc79
c00114a8:	e8 4e df ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c00114ad:	83 c4 10             	add    esp,0x10
c00114b0:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00114b5:	75 10                	jne    c00114c7 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00114b7:	83 ec 0c             	sub    esp,0xc
c00114ba:	68 79 dc 01 c0       	push   0xc001dc79
c00114bf:	e8 37 df ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c00114c4:	83 c4 10             	add    esp,0x10
c00114c7:	31 d2                	xor    edx,edx
c00114c9:	50                   	push   eax
c00114ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114ce:	52                   	push   edx
c00114cf:	50                   	push   eax
c00114d0:	53                   	push   ebx
c00114d1:	e8 ca 8a ff ff       	call   c0009fa0 <File::seek(unsigned long long)>
c00114d6:	5a                   	pop    edx
c00114d7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00114db:	e8 3d 56 ff ff       	call   c0006b1d <malloc>
c00114e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00114e4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114e8:	31 c9                	xor    ecx,ecx
c00114ea:	5e                   	pop    esi
c00114eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114ed:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00114f1:	55                   	push   ebp
c00114f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114f6:	51                   	push   ecx
c00114f7:	52                   	push   edx
c00114f8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00114fc:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0011500:	53                   	push   ebx
c0011501:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011504:	83 c4 14             	add    esp,0x14
c0011507:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001150b:	e8 0d 56 ff ff       	call   c0006b1d <malloc>
c0011510:	89 c6                	mov    esi,eax
c0011512:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011514:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011517:	56                   	push   esi
c0011518:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001151c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011520:	51                   	push   ecx
c0011521:	52                   	push   edx
c0011522:	53                   	push   ebx
c0011523:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011526:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001152a:	8b 15 a0 26 02 c0    	mov    edx,DWORD PTR ds:0xc00226a0
c0011530:	83 c4 1c             	add    esp,0x1c
c0011533:	c1 e8 04             	shr    eax,0x4
c0011536:	89 04 95 20 25 02 c0 	mov    DWORD PTR [edx*4-0x3ffddae0],eax
c001153d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011541:	31 d2                	xor    edx,edx
c0011543:	52                   	push   edx
c0011544:	50                   	push   eax
c0011545:	53                   	push   ebx
c0011546:	e8 55 8a ff ff       	call   c0009fa0 <File::seek(unsigned long long)>
c001154b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001154d:	31 d2                	xor    edx,edx
c001154f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011552:	56                   	push   esi
c0011553:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011557:	52                   	push   edx
c0011558:	50                   	push   eax
c0011559:	53                   	push   ebx
c001155a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001155d:	83 c4 14             	add    esp,0x14
c0011560:	53                   	push   ebx
c0011561:	e8 da 89 ff ff       	call   c0009f40 <File::close()>
c0011566:	5d                   	pop    ebp
c0011567:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001156b:	e8 bd 55 ff ff       	call   c0006b2d <free>
c0011570:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011573:	e8 b5 55 ff ff       	call   c0006b2d <free>
c0011578:	a1 a0 26 02 c0       	mov    eax,ds:0xc00226a0
c001157d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0011581:	8d 50 01             	lea    edx,[eax+0x1]
c0011584:	89 0c 85 20 26 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd9e0],ecx
c001158b:	89 34 85 a0 25 02 c0 	mov    DWORD PTR [eax*4-0x3ffdda60],esi
c0011592:	89 15 a0 26 02 c0    	mov    DWORD PTR ds:0xc00226a0,edx
c0011598:	83 c4 10             	add    esp,0x10
c001159b:	b0 01                	mov    al,0x1
c001159d:	83 c4 5c             	add    esp,0x5c
c00115a0:	5b                   	pop    ebx
c00115a1:	5e                   	pop    esi
c00115a2:	5f                   	pop    edi
c00115a3:	5d                   	pop    ebp
c00115a4:	c3                   	ret    

c00115a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00115a5:	55                   	push   ebp
c00115a6:	57                   	push   edi
c00115a7:	56                   	push   esi
c00115a8:	53                   	push   ebx
c00115a9:	81 ec 68 03 00 00    	sub    esp,0x368
c00115af:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00115b6:	8b 1d f0 26 02 c0    	mov    ebx,DWORD PTR ds:0xc00226f0
c00115bc:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00115c0:	68 14 01 00 00       	push   0x114
c00115c5:	e8 53 55 ff ff       	call   c0006b1d <malloc>
c00115ca:	83 c4 0c             	add    esp,0xc
c00115cd:	89 c5                	mov    ebp,eax
c00115cf:	53                   	push   ebx
c00115d0:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00115d7:	50                   	push   eax
c00115d8:	e8 45 88 ff ff       	call   c0009e22 <File::File(char const*, Process*)>
c00115dd:	5e                   	pop    esi
c00115de:	5f                   	pop    edi
c00115df:	6a 01                	push   0x1
c00115e1:	55                   	push   ebp
c00115e2:	e8 fb 88 ff ff       	call   c0009ee2 <File::open(FileOpenMode)>
c00115e7:	83 c4 10             	add    esp,0x10
c00115ea:	85 c0                	test   eax,eax
c00115ec:	0f 85 a7 06 00 00    	jne    c0011c99 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00115f2:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00115fa:	83 ec 0c             	sub    esp,0xc
c00115fd:	6a 34                	push   0x34
c00115ff:	e8 19 55 ff ff       	call   c0006b1d <malloc>
c0011604:	5b                   	pop    ebx
c0011605:	89 c7                	mov    edi,eax
c0011607:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001160b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001160e:	53                   	push   ebx
c001160f:	57                   	push   edi
c0011610:	6a 00                	push   0x0
c0011612:	6a 34                	push   0x34
c0011614:	55                   	push   ebp
c0011615:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011618:	83 c4 20             	add    esp,0x20
c001161b:	85 c0                	test   eax,eax
c001161d:	0f 85 76 06 00 00    	jne    c0011c99 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011623:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0011629:	0f 85 6a 06 00 00    	jne    c0011c99 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001162f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0011632:	85 c0                	test   eax,eax
c0011634:	0f 84 5f 06 00 00    	je     c0011c99 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001163a:	31 d2                	xor    edx,edx
c001163c:	51                   	push   ecx
c001163d:	52                   	push   edx
c001163e:	50                   	push   eax
c001163f:	55                   	push   ebp
c0011640:	e8 5b 89 ff ff       	call   c0009fa0 <File::seek(unsigned long long)>
c0011645:	83 c4 10             	add    esp,0x10
c0011648:	85 c0                	test   eax,eax
c001164a:	0f 85 49 06 00 00    	jne    c0011c99 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011650:	83 ec 0c             	sub    esp,0xc
c0011653:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0011656:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001165a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001165e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011662:	0f af c2             	imul   eax,edx
c0011665:	50                   	push   eax
c0011666:	e8 b2 54 ff ff       	call   c0006b1d <malloc>
c001166b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001166e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011672:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011675:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011679:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001167d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011681:	0f af c2             	imul   eax,edx
c0011684:	99                   	cdq    
c0011685:	52                   	push   edx
c0011686:	50                   	push   eax
c0011687:	55                   	push   ebp
c0011688:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001168b:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001168e:	83 c4 20             	add    esp,0x20
c0011691:	85 c0                	test   eax,eax
c0011693:	0f 84 00 06 00 00    	je     c0011c99 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011699:	52                   	push   edx
c001169a:	31 d2                	xor    edx,edx
c001169c:	52                   	push   edx
c001169d:	50                   	push   eax
c001169e:	55                   	push   ebp
c001169f:	e8 fc 88 ff ff       	call   c0009fa0 <File::seek(unsigned long long)>
c00116a4:	83 c4 10             	add    esp,0x10
c00116a7:	85 c0                	test   eax,eax
c00116a9:	0f 85 ea 05 00 00    	jne    c0011c99 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00116af:	83 ec 0c             	sub    esp,0xc
c00116b2:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00116b6:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00116ba:	31 f6                	xor    esi,esi
c00116bc:	0f af c2             	imul   eax,edx
c00116bf:	50                   	push   eax
c00116c0:	e8 58 54 ff ff       	call   c0006b1d <malloc>
c00116c5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00116c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00116cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116cf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00116d3:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00116d7:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00116db:	0f af c2             	imul   eax,edx
c00116de:	99                   	cdq    
c00116df:	52                   	push   edx
c00116e0:	50                   	push   eax
c00116e1:	55                   	push   ebp
c00116e2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00116e5:	83 c4 20             	add    esp,0x20
c00116e8:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c00116ec:	0f 86 8a 00 00 00    	jbe    c001177c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00116f2:	0f b7 de             	movzx  ebx,si
c00116f5:	c1 e3 05             	shl    ebx,0x5
c00116f8:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00116fc:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00116ff:	75 75                	jne    c0011776 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0011701:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011704:	31 d2                	xor    edx,edx
c0011706:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001170a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001170d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011711:	50                   	push   eax
c0011712:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0011715:	52                   	push   edx
c0011716:	50                   	push   eax
c0011717:	55                   	push   ebp
c0011718:	e8 83 88 ff ff       	call   c0009fa0 <File::seek(unsigned long long)>
c001171d:	83 c4 10             	add    esp,0x10
c0011720:	85 c0                	test   eax,eax
c0011722:	0f 85 71 05 00 00    	jne    c0011c99 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011728:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001172f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011732:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0011736:	31 d2                	xor    edx,edx
c0011738:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001173c:	83 ec 0c             	sub    esp,0xc
c001173f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011743:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001174a:	50                   	push   eax
c001174b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001174f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011753:	52                   	push   edx
c0011754:	50                   	push   eax
c0011755:	55                   	push   ebp
c0011756:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011759:	83 c4 1c             	add    esp,0x1c
c001175c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001175f:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0011762:	50                   	push   eax
c0011763:	6a 00                	push   0x0
c0011765:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011769:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001176d:	50                   	push   eax
c001176e:	e8 7d ed fe ff       	call   c00004f0 <memset>
c0011773:	83 c4 10             	add    esp,0x10
c0011776:	46                   	inc    esi
c0011777:	e9 6c ff ff ff       	jmp    c00116e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001177c:	53                   	push   ebx
c001177d:	31 db                	xor    ebx,ebx
c001177f:	68 00 01 00 00       	push   0x100
c0011784:	6a 00                	push   0x0
c0011786:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001178a:	50                   	push   eax
c001178b:	e8 60 ed fe ff       	call   c00004f0 <memset>
c0011790:	83 c4 0c             	add    esp,0xc
c0011793:	68 00 01 00 00       	push   0x100
c0011798:	6a 00                	push   0x0
c001179a:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00117a1:	50                   	push   eax
c00117a2:	e8 49 ed fe ff       	call   c00004f0 <memset>
c00117a7:	83 c4 10             	add    esp,0x10
c00117aa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00117b2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00117ba:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00117c2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00117ca:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00117d2:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c00117d6:	0f 86 30 01 00 00    	jbe    c001190c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00117dc:	0f b7 f3             	movzx  esi,bx
c00117df:	6b f6 28             	imul   esi,esi,0x28
c00117e2:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00117e6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00117e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00117ed:	52                   	push   edx
c00117ee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00117f2:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00117f6:	8b 06                	mov    eax,DWORD PTR [esi]
c00117f8:	6b d2 28             	imul   edx,edx,0x28
c00117fb:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00117ff:	31 d2                	xor    edx,edx
c0011801:	52                   	push   edx
c0011802:	50                   	push   eax
c0011803:	55                   	push   ebp
c0011804:	e8 97 87 ff ff       	call   c0009fa0 <File::seek(unsigned long long)>
c0011809:	83 c4 0c             	add    esp,0xc
c001180c:	6a 20                	push   0x20
c001180e:	6a 00                	push   0x0
c0011810:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0011817:	51                   	push   ecx
c0011818:	e8 d3 ec fe ff       	call   c00004f0 <memset>
c001181d:	59                   	pop    ecx
c001181e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011821:	8d 54 24 58          	lea    edx,[esp+0x58]
c0011825:	52                   	push   edx
c0011826:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001182d:	51                   	push   ecx
c001182e:	6a 00                	push   0x0
c0011830:	6a 1f                	push   0x1f
c0011832:	55                   	push   ebp
c0011833:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011836:	83 c4 1c             	add    esp,0x1c
c0011839:	6a 09                	push   0x9
c001183b:	68 93 dc 01 c0       	push   0xc001dc93
c0011840:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0011847:	51                   	push   ecx
c0011848:	e8 63 eb fe ff       	call   c00003b0 <memcmp>
c001184d:	83 c4 10             	add    esp,0x10
c0011850:	85 c0                	test   eax,eax
c0011852:	75 21                	jne    c0011875 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0011854:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011858:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001185c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0011860:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0011864:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011867:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001186e:	89 d0                	mov    eax,edx
c0011870:	40                   	inc    eax
c0011871:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011875:	50                   	push   eax
c0011876:	6a 09                	push   0x9
c0011878:	68 9d dc 01 c0       	push   0xc001dc9d
c001187d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011884:	50                   	push   eax
c0011885:	e8 26 eb fe ff       	call   c00003b0 <memcmp>
c001188a:	83 c4 10             	add    esp,0x10
c001188d:	85 c0                	test   eax,eax
c001188f:	75 21                	jne    c00118b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0011891:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011895:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011899:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001189d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00118a1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00118a4:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00118ab:	89 d0                	mov    eax,edx
c00118ad:	40                   	inc    eax
c00118ae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00118b2:	50                   	push   eax
c00118b3:	50                   	push   eax
c00118b4:	68 69 dc 01 c0       	push   0xc001dc69
c00118b9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00118c0:	50                   	push   eax
c00118c1:	e8 3a ee fe ff       	call   c0000700 <strcmp>
c00118c6:	83 c4 10             	add    esp,0x10
c00118c9:	85 c0                	test   eax,eax
c00118cb:	75 0f                	jne    c00118dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00118cd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00118d0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00118d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00118dc:	50                   	push   eax
c00118dd:	50                   	push   eax
c00118de:	68 71 dc 01 c0       	push   0xc001dc71
c00118e3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00118ea:	50                   	push   eax
c00118eb:	e8 10 ee fe ff       	call   c0000700 <strcmp>
c00118f0:	83 c4 10             	add    esp,0x10
c00118f3:	85 c0                	test   eax,eax
c00118f5:	75 0f                	jne    c0011906 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00118f7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00118fa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00118fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011902:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011906:	43                   	inc    ebx
c0011907:	e9 c6 fe ff ff       	jmp    c00117d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001190c:	31 d2                	xor    edx,edx
c001190e:	50                   	push   eax
c001190f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011913:	52                   	push   edx
c0011914:	50                   	push   eax
c0011915:	55                   	push   ebp
c0011916:	e8 85 86 ff ff       	call   c0009fa0 <File::seek(unsigned long long)>
c001191b:	58                   	pop    eax
c001191c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011920:	e8 f8 51 ff ff       	call   c0006b1d <malloc>
c0011925:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011928:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001192c:	31 d2                	xor    edx,edx
c001192e:	58                   	pop    eax
c001192f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0011933:	53                   	push   ebx
c0011934:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011938:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001193c:	52                   	push   edx
c001193d:	50                   	push   eax
c001193e:	55                   	push   ebp
c001193f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011942:	83 c4 14             	add    esp,0x14
c0011945:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011949:	e8 cf 51 ff ff       	call   c0006b1d <malloc>
c001194e:	31 d2                	xor    edx,edx
c0011950:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011954:	83 c4 0c             	add    esp,0xc
c0011957:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001195b:	52                   	push   edx
c001195c:	50                   	push   eax
c001195d:	55                   	push   ebp
c001195e:	e8 3d 86 ff ff       	call   c0009fa0 <File::seek(unsigned long long)>
c0011963:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011966:	31 d2                	xor    edx,edx
c0011968:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001196b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001196f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011973:	52                   	push   edx
c0011974:	50                   	push   eax
c0011975:	55                   	push   ebp
c0011976:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011979:	83 c4 20             	add    esp,0x20
c001197c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011984:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011988:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001198c:	0f 84 0b 03 00 00    	je     c0011c9d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0011992:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0011999:	31 d2                	xor    edx,edx
c001199b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001199f:	c1 e8 03             	shr    eax,0x3
c00119a2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00119a6:	51                   	push   ecx
c00119a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00119ab:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00119af:	52                   	push   edx
c00119b0:	50                   	push   eax
c00119b1:	55                   	push   ebp
c00119b2:	e8 e9 85 ff ff       	call   c0009fa0 <File::seek(unsigned long long)>
c00119b7:	5b                   	pop    ebx
c00119b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00119bc:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00119c3:	e8 55 51 ff ff       	call   c0006b1d <malloc>
c00119c8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00119cb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00119cf:	31 d2                	xor    edx,edx
c00119d1:	5e                   	pop    esi
c00119d2:	8d 44 24 58          	lea    eax,[esp+0x58]
c00119d6:	50                   	push   eax
c00119d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00119df:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00119e6:	52                   	push   edx
c00119e7:	50                   	push   eax
c00119e8:	55                   	push   ebp
c00119e9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00119ec:	83 c4 20             	add    esp,0x20
c00119ef:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00119f7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00119fb:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c00119ff:	0f 8d 7c 02 00 00    	jge    c0011c81 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0011a05:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011a09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a0d:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0011a12:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0011a15:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011a19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a1d:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0011a21:	89 d8                	mov    eax,ebx
c0011a23:	c1 e8 08             	shr    eax,0x8
c0011a26:	89 c6                	mov    esi,eax
c0011a28:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011a2c:	c1 e6 04             	shl    esi,0x4
c0011a2f:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0011a33:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0011a36:	85 d2                	test   edx,edx
c0011a38:	0f 85 bf 00 00 00    	jne    c0011afd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0011a3e:	83 ec 0c             	sub    esp,0xc
c0011a41:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011a45:	03 06                	add    eax,DWORD PTR [esi]
c0011a47:	50                   	push   eax
c0011a48:	e8 4b f8 ff ff       	call   c0011298 <Thr::getAddressOfKernelSymbol(char const*)>
c0011a4d:	83 c4 10             	add    esp,0x10
c0011a50:	89 c2                	mov    edx,eax
c0011a52:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0011a57:	85 c0                	test   eax,eax
c0011a59:	0f 85 9e 00 00 00    	jne    c0011afd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0011a5f:	83 ec 0c             	sub    esp,0xc
c0011a62:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011a66:	03 06                	add    eax,DWORD PTR [esi]
c0011a68:	50                   	push   eax
c0011a69:	e8 96 41 ff ff       	call   c0005c04 <Krnl::resolveCompatibilitySymbol(char*)>
c0011a6e:	83 c4 10             	add    esp,0x10
c0011a71:	89 c2                	mov    edx,eax
c0011a73:	85 c0                	test   eax,eax
c0011a75:	0f 85 82 00 00 00    	jne    c0011afd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0011a7b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011a7f:	50                   	push   eax
c0011a80:	50                   	push   eax
c0011a81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011a85:	03 06                	add    eax,DWORD PTR [esi]
c0011a87:	50                   	push   eax
c0011a88:	68 a7 dc 01 c0       	push   0xc001dca7
c0011a8d:	e8 1a 7e ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c0011a92:	58                   	pop    eax
c0011a93:	5a                   	pop    edx
c0011a94:	68 c1 dc 01 c0       	push   0xc001dcc1
c0011a99:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011aa0:	50                   	push   eax
c0011aa1:	e8 7a eb fe ff       	call   c0000620 <strcpy>
c0011aa6:	59                   	pop    ecx
c0011aa7:	58                   	pop    eax
c0011aa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011aac:	03 06                	add    eax,DWORD PTR [esi]
c0011aae:	50                   	push   eax
c0011aaf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011ab6:	50                   	push   eax
c0011ab7:	e8 24 ed fe ff       	call   c00007e0 <strcat>
c0011abc:	58                   	pop    eax
c0011abd:	5a                   	pop    edx
c0011abe:	68 57 dd 01 c0       	push   0xc001dd57
c0011ac3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011aca:	50                   	push   eax
c0011acb:	e8 10 ed fe ff       	call   c00007e0 <strcat>
c0011ad0:	83 c4 10             	add    esp,0x10
c0011ad3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011ad8:	0f 84 5d 01 00 00    	je     c0011c3b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0011ade:	83 ec 0c             	sub    esp,0xc
c0011ae1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011ae8:	50                   	push   eax
c0011ae9:	e8 0d d9 ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c0011aee:	83 c4 10             	add    esp,0x10
c0011af1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011af5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0011af9:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0011afd:	80 fb 01             	cmp    bl,0x1
c0011b00:	0f 85 88 00 00 00    	jne    c0011b8e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0011b06:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0011b0d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011b11:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0011b15:	01 ce                	add    esi,ecx
c0011b17:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0011b1d:	0f 94 c0             	sete   al
c0011b20:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0011b26:	0f 94 c3             	sete   bl
c0011b29:	09 c3                	or     ebx,eax
c0011b2b:	8b 06                	mov    eax,DWORD PTR [esi]
c0011b2d:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0011b32:	74 41                	je     c0011b75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0011b34:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0011b37:	84 db                	test   bl,bl
c0011b39:	75 15                	jne    c0011b50 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0011b3b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011b3f:	66 83 f8 0c          	cmp    ax,0xc
c0011b43:	76 05                	jbe    c0011b4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0011b45:	b8 0c 00 00 00       	mov    eax,0xc
c0011b4a:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0011b4e:	76 37                	jbe    c0011b87 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0011b50:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0011b54:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011b59:	0f 84 dc 00 00 00    	je     c0011c3b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0011b5f:	83 ec 0c             	sub    esp,0xc
c0011b62:	68 d8 dc 01 c0       	push   0xc001dcd8
c0011b67:	e8 8f d8 ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c0011b6c:	83 c4 10             	add    esp,0x10
c0011b6f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011b73:	eb 12                	jmp    c0011b87 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0011b75:	01 c1                	add    ecx,eax
c0011b77:	84 db                	test   bl,bl
c0011b79:	75 0c                	jne    c0011b87 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0011b7b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011b7f:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0011b83:	77 02                	ja     c0011b87 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0011b85:	01 d1                	add    ecx,edx
c0011b87:	89 0e                	mov    DWORD PTR [esi],ecx
c0011b89:	e9 ea 00 00 00       	jmp    c0011c78 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0011b8e:	80 fb 02             	cmp    bl,0x2
c0011b91:	75 7c                	jne    c0011c0f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0011b93:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0011b9a:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0011b9e:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0011ba2:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0011ba8:	74 20                	je     c0011bca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0011baa:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0011bb0:	74 18                	je     c0011bca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0011bb2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011bb6:	b9 0a 00 00 00       	mov    ecx,0xa
c0011bbb:	66 83 f8 0e          	cmp    ax,0xe
c0011bbf:	77 03                	ja     c0011bc4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0011bc1:	8d 48 fc             	lea    ecx,[eax-0x4]
c0011bc4:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0011bc8:	76 1f                	jbe    c0011be9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0011bca:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0011bce:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011bd3:	74 66                	je     c0011c3b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0011bd5:	83 ec 0c             	sub    esp,0xc
c0011bd8:	68 f4 dc 01 c0       	push   0xc001dcf4
c0011bdd:	e8 19 d8 ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c0011be2:	83 c4 10             	add    esp,0x10
c0011be5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011be9:	8b 06                	mov    eax,DWORD PTR [esi]
c0011beb:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0011bf0:	74 13                	je     c0011c05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0011bf2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011bf6:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0011bfd:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0011c01:	01 c8                	add    eax,ecx
c0011c03:	eb 04                	jmp    c0011c09 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0011c05:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0011c09:	01 c2                	add    edx,eax
c0011c0b:	89 16                	mov    DWORD PTR [esi],edx
c0011c0d:	eb 69                	jmp    c0011c78 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0011c0f:	0f b6 db             	movzx  ebx,bl
c0011c12:	50                   	push   eax
c0011c13:	50                   	push   eax
c0011c14:	53                   	push   ebx
c0011c15:	68 10 dd 01 c0       	push   0xc001dd10
c0011c1a:	e8 8d 7c ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c0011c1f:	83 c4 10             	add    esp,0x10
c0011c22:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011c27:	74 12                	je     c0011c3b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0011c29:	83 ec 0c             	sub    esp,0xc
c0011c2c:	68 1b dd 01 c0       	push   0xc001dd1b
c0011c31:	e8 c5 d7 ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c0011c36:	83 c4 10             	add    esp,0x10
c0011c39:	eb 3d                	jmp    c0011c78 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0011c3b:	83 ec 0c             	sub    esp,0xc
c0011c3e:	55                   	push   ebp
c0011c3f:	e8 fc 82 ff ff       	call   c0009f40 <File::close()>
c0011c44:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011c47:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011c4a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011c4d:	59                   	pop    ecx
c0011c4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011c52:	e8 d6 4e ff ff       	call   c0006b2d <free>
c0011c57:	5b                   	pop    ebx
c0011c58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011c5c:	e8 cc 4e ff ff       	call   c0006b2d <free>
c0011c61:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011c64:	e8 c4 4e ff ff       	call   c0006b2d <free>
c0011c69:	5e                   	pop    esi
c0011c6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c6e:	e8 ba 4e ff ff       	call   c0006b2d <free>
c0011c73:	83 c4 10             	add    esp,0x10
c0011c76:	eb 21                	jmp    c0011c99 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011c78:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0011c7c:	e9 76 fd ff ff       	jmp    c00119f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0011c81:	83 ec 0c             	sub    esp,0xc
c0011c84:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011c88:	e8 a0 4e ff ff       	call   c0006b2d <free>
c0011c8d:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0011c91:	83 c4 10             	add    esp,0x10
c0011c94:	e9 eb fc ff ff       	jmp    c0011984 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0011c99:	31 c0                	xor    eax,eax
c0011c9b:	eb 33                	jmp    c0011cd0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0011c9d:	83 ec 0c             	sub    esp,0xc
c0011ca0:	55                   	push   ebp
c0011ca1:	e8 9a 82 ff ff       	call   c0009f40 <File::close()>
c0011ca6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011ca9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011cac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011caf:	58                   	pop    eax
c0011cb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011cb4:	e8 74 4e ff ff       	call   c0006b2d <free>
c0011cb9:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011cbc:	e8 6c 4e ff ff       	call   c0006b2d <free>
c0011cc1:	5a                   	pop    edx
c0011cc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011cc6:	e8 62 4e ff ff       	call   c0006b2d <free>
c0011ccb:	83 c4 10             	add    esp,0x10
c0011cce:	b0 01                	mov    al,0x1
c0011cd0:	81 c4 5c 03 00 00    	add    esp,0x35c
c0011cd6:	5b                   	pop    ebx
c0011cd7:	5e                   	pop    esi
c0011cd8:	5f                   	pop    edi
c0011cd9:	5d                   	pop    ebp
c0011cda:	c3                   	ret    

c0011cdb <Thr::getDriverBaseFromAddress(unsigned long)>:
c0011cdb:	56                   	push   esi
c0011cdc:	31 d2                	xor    edx,edx
c0011cde:	53                   	push   ebx
c0011cdf:	8b 1d 00 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021f00
c0011ce5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011ce9:	39 d3                	cmp    ebx,edx
c0011ceb:	7e 1b                	jle    c0011d08 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0011ced:	8b 04 95 20 21 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffddee0]
c0011cf4:	39 c8                	cmp    eax,ecx
c0011cf6:	77 0d                	ja     c0011d05 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0011cf8:	8b 34 95 20 1f 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffde0e0]
c0011cff:	01 c6                	add    esi,eax
c0011d01:	39 ce                	cmp    esi,ecx
c0011d03:	77 05                	ja     c0011d0a <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0011d05:	42                   	inc    edx
c0011d06:	eb e1                	jmp    c0011ce9 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0011d08:	31 c0                	xor    eax,eax
c0011d0a:	5b                   	pop    ebx
c0011d0b:	5e                   	pop    esi
c0011d0c:	c3                   	ret    

c0011d0d <Thr::getDriverNameFromAddress(unsigned long)>:
c0011d0d:	53                   	push   ebx
c0011d0e:	31 c0                	xor    eax,eax
c0011d10:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011d14:	8b 1d 00 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021f00
c0011d1a:	39 c3                	cmp    ebx,eax
c0011d1c:	7e 22                	jle    c0011d40 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0011d1e:	8b 14 85 20 21 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffddee0]
c0011d25:	39 ca                	cmp    edx,ecx
c0011d27:	77 14                	ja     c0011d3d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0011d29:	03 14 85 20 1f 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffde0e0]
c0011d30:	39 ca                	cmp    edx,ecx
c0011d32:	76 09                	jbe    c0011d3d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0011d34:	8b 04 85 20 23 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffddce0]
c0011d3b:	eb 05                	jmp    c0011d42 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0011d3d:	40                   	inc    eax
c0011d3e:	eb da                	jmp    c0011d1a <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0011d40:	31 c0                	xor    eax,eax
c0011d42:	5b                   	pop    ebx
c0011d43:	c3                   	ret    

c0011d44 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0011d44:	53                   	push   ebx
c0011d45:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0011d49:	53                   	push   ebx
c0011d4a:	e8 8c ff ff ff       	call   c0011cdb <Thr::getDriverBaseFromAddress(unsigned long)>
c0011d4f:	5a                   	pop    edx
c0011d50:	31 d2                	xor    edx,edx
c0011d52:	85 c0                	test   eax,eax
c0011d54:	74 04                	je     c0011d5a <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0011d56:	89 da                	mov    edx,ebx
c0011d58:	29 c2                	sub    edx,eax
c0011d5a:	89 d0                	mov    eax,edx
c0011d5c:	5b                   	pop    ebx
c0011d5d:	c3                   	ret    

c0011d5e <Thr::loadDLL(char const*, bool)>:
c0011d5e:	55                   	push   ebp
c0011d5f:	57                   	push   edi
c0011d60:	56                   	push   esi
c0011d61:	53                   	push   ebx
c0011d62:	81 ec 34 01 00 00    	sub    esp,0x134
c0011d68:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0011d6f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0011d76:	56                   	push   esi
c0011d77:	68 33 dd 01 c0       	push   0xc001dd33
c0011d7c:	e8 2b 7b ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c0011d81:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011d88:	e8 90 4d ff ff       	call   c0006b1d <malloc>
c0011d8d:	83 c4 0c             	add    esp,0xc
c0011d90:	89 c3                	mov    ebx,eax
c0011d92:	ff 35 f0 26 02 c0    	push   DWORD PTR ds:0xc00226f0
c0011d98:	56                   	push   esi
c0011d99:	50                   	push   eax
c0011d9a:	e8 83 80 ff ff       	call   c0009e22 <File::File(char const*, Process*)>
c0011d9f:	83 c4 10             	add    esp,0x10
c0011da2:	85 db                	test   ebx,ebx
c0011da4:	75 3c                	jne    c0011de2 <Thr::loadDLL(char const*, bool)+0x84>
c0011da6:	89 f8                	mov    eax,edi
c0011da8:	84 c0                	test   al,al
c0011daa:	0f 84 d2 01 00 00    	je     c0011f82 <Thr::loadDLL(char const*, bool)+0x224>
c0011db0:	55                   	push   ebp
c0011db1:	55                   	push   ebp
c0011db2:	68 44 dd 01 c0       	push   0xc001dd44
c0011db7:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0011dbb:	55                   	push   ebp
c0011dbc:	e8 5f e8 fe ff       	call   c0000620 <strcpy>
c0011dc1:	58                   	pop    eax
c0011dc2:	5a                   	pop    edx
c0011dc3:	56                   	push   esi
c0011dc4:	55                   	push   ebp
c0011dc5:	e8 16 ea fe ff       	call   c00007e0 <strcat>
c0011dca:	59                   	pop    ecx
c0011dcb:	58                   	pop    eax
c0011dcc:	68 57 dd 01 c0       	push   0xc001dd57
c0011dd1:	55                   	push   ebp
c0011dd2:	e8 09 ea fe ff       	call   c00007e0 <strcat>
c0011dd7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011dda:	e8 1c d6 ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c0011ddf:	83 c4 10             	add    esp,0x10
c0011de2:	51                   	push   ecx
c0011de3:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0011de7:	50                   	push   eax
c0011de8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0011dec:	50                   	push   eax
c0011ded:	53                   	push   ebx
c0011dee:	e8 9b 83 ff ff       	call   c000a18e <File::stat(unsigned long long*, bool*)>
c0011df3:	83 c4 10             	add    esp,0x10
c0011df6:	85 db                	test   ebx,ebx
c0011df8:	74 0c                	je     c0011e06 <Thr::loadDLL(char const*, bool)+0xa8>
c0011dfa:	83 ec 0c             	sub    esp,0xc
c0011dfd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011dff:	53                   	push   ebx
c0011e00:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011e03:	83 c4 10             	add    esp,0x10
c0011e06:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0011e0b:	75 0a                	jne    c0011e17 <Thr::loadDLL(char const*, bool)+0xb9>
c0011e0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011e11:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0011e15:	75 3c                	jne    c0011e53 <Thr::loadDLL(char const*, bool)+0xf5>
c0011e17:	89 f8                	mov    eax,edi
c0011e19:	84 c0                	test   al,al
c0011e1b:	0f 84 49 01 00 00    	je     c0011f6a <Thr::loadDLL(char const*, bool)+0x20c>
c0011e21:	51                   	push   ecx
c0011e22:	51                   	push   ecx
c0011e23:	68 44 dd 01 c0       	push   0xc001dd44
c0011e28:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0011e2c:	53                   	push   ebx
c0011e2d:	e8 ee e7 fe ff       	call   c0000620 <strcpy>
c0011e32:	5d                   	pop    ebp
c0011e33:	58                   	pop    eax
c0011e34:	56                   	push   esi
c0011e35:	53                   	push   ebx
c0011e36:	e8 a5 e9 fe ff       	call   c00007e0 <strcat>
c0011e3b:	58                   	pop    eax
c0011e3c:	5a                   	pop    edx
c0011e3d:	68 57 dd 01 c0       	push   0xc001dd57
c0011e42:	53                   	push   ebx
c0011e43:	e8 98 e9 fe ff       	call   c00007e0 <strcat>
c0011e48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011e4b:	e8 ab d5 ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c0011e50:	83 c4 10             	add    esp,0x10
c0011e53:	52                   	push   edx
c0011e54:	6a 03                	push   0x3
c0011e56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011e5a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011e5e:	05 ff 0f 00 00       	add    eax,0xfff
c0011e63:	83 d2 00             	adc    edx,0x0
c0011e66:	0f ac d0 0c          	shrd   eax,edx,0xc
c0011e6a:	50                   	push   eax
c0011e6b:	ff 35 f0 f2 01 c0    	push   DWORD PTR ds:0xc001f2f0
c0011e71:	e8 7c 6f ff ff       	call   c0008df2 <VAS::allocatePages(int, int)>
c0011e76:	59                   	pop    ecx
c0011e77:	89 c3                	mov    ebx,eax
c0011e79:	5d                   	pop    ebp
c0011e7a:	50                   	push   eax
c0011e7b:	68 2e cb 01 c0       	push   0xc001cb2e
c0011e80:	e8 27 7a ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c0011e85:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e88:	e8 d3 e6 fe ff       	call   c0000560 <strlen>
c0011e8d:	8b 2d 00 1f 02 c0    	mov    ebp,DWORD PTR ds:0xc0021f00
c0011e93:	40                   	inc    eax
c0011e94:	89 04 24             	mov    DWORD PTR [esp],eax
c0011e97:	e8 81 4c ff ff       	call   c0006b1d <malloc>
c0011e9c:	89 04 ad 20 23 02 c0 	mov    DWORD PTR [ebp*4-0x3ffddce0],eax
c0011ea3:	58                   	pop    eax
c0011ea4:	a1 00 1f 02 c0       	mov    eax,ds:0xc0021f00
c0011ea9:	5a                   	pop    edx
c0011eaa:	56                   	push   esi
c0011eab:	ff 34 85 20 23 02 c0 	push   DWORD PTR [eax*4-0x3ffddce0]
c0011eb2:	e8 69 e7 fe ff       	call   c0000620 <strcpy>
c0011eb7:	a1 00 1f 02 c0       	mov    eax,ds:0xc0021f00
c0011ebc:	8d 50 01             	lea    edx,[eax+0x1]
c0011ebf:	89 1c 85 20 21 02 c0 	mov    DWORD PTR [eax*4-0x3ffddee0],ebx
c0011ec6:	89 15 00 1f 02 c0    	mov    DWORD PTR ds:0xc0021f00,edx
c0011ecc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011ed0:	83 c4 0c             	add    esp,0xc
c0011ed3:	89 14 85 20 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde0e0],edx
c0011eda:	6a 01                	push   0x1
c0011edc:	53                   	push   ebx
c0011edd:	56                   	push   esi
c0011ede:	e8 c2 f6 ff ff       	call   c00115a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0011ee3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011ee7:	83 c4 10             	add    esp,0x10
c0011eea:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011eef:	0f 85 89 00 00 00    	jne    c0011f7e <Thr::loadDLL(char const*, bool)+0x220>
c0011ef5:	89 f8                	mov    eax,edi
c0011ef7:	84 c0                	test   al,al
c0011ef9:	74 73                	je     c0011f6e <Thr::loadDLL(char const*, bool)+0x210>
c0011efb:	83 ec 0c             	sub    esp,0xc
c0011efe:	68 59 dd 01 c0       	push   0xc001dd59
c0011f03:	e8 f3 d4 ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c0011f08:	83 c4 10             	add    esp,0x10
c0011f0b:	eb 61                	jmp    c0011f6e <Thr::loadDLL(char const*, bool)+0x210>
c0011f0d:	50                   	push   eax
c0011f0e:	50                   	push   eax
c0011f0f:	89 e8                	mov    eax,ebp
c0011f11:	c1 e0 0c             	shl    eax,0xc
c0011f14:	01 d8                	add    eax,ebx
c0011f16:	50                   	push   eax
c0011f17:	ff 35 f0 f2 01 c0    	push   DWORD PTR ds:0xc001f2f0
c0011f1d:	e8 48 6a ff ff       	call   c000896a <VAS::getPageTableEntry(unsigned long)>
c0011f22:	83 c4 10             	add    esp,0x10
c0011f25:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f27:	a8 60                	test   al,0x60
c0011f29:	75 11                	jne    c0011f3c <Thr::loadDLL(char const*, bool)+0x1de>
c0011f2b:	83 ec 0c             	sub    esp,0xc
c0011f2e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f33:	50                   	push   eax
c0011f34:	e8 4f 4f ff ff       	call   c0006e88 <Phys::freePage(unsigned long)>
c0011f39:	83 c4 10             	add    esp,0x10
c0011f3c:	45                   	inc    ebp
c0011f3d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f41:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011f45:	05 ff 0f 00 00       	add    eax,0xfff
c0011f4a:	bf 00 00 00 00       	mov    edi,0x0
c0011f4f:	83 d2 00             	adc    edx,0x0
c0011f52:	0f ac d0 0c          	shrd   eax,edx,0xc
c0011f56:	c1 ea 0c             	shr    edx,0xc
c0011f59:	39 c5                	cmp    ebp,eax
c0011f5b:	89 d1                	mov    ecx,edx
c0011f5d:	89 f8                	mov    eax,edi
c0011f5f:	19 c8                	sbb    eax,ecx
c0011f61:	72 aa                	jb     c0011f0d <Thr::loadDLL(char const*, bool)+0x1af>
c0011f63:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011f68:	75 18                	jne    c0011f82 <Thr::loadDLL(char const*, bool)+0x224>
c0011f6a:	31 db                	xor    ebx,ebx
c0011f6c:	eb 14                	jmp    c0011f82 <Thr::loadDLL(char const*, bool)+0x224>
c0011f6e:	83 ec 0c             	sub    esp,0xc
c0011f71:	68 78 dd 01 c0       	push   0xc001dd78
c0011f76:	e8 80 d4 ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c0011f7b:	83 c4 10             	add    esp,0x10
c0011f7e:	31 ed                	xor    ebp,ebp
c0011f80:	eb bb                	jmp    c0011f3d <Thr::loadDLL(char const*, bool)+0x1df>
c0011f82:	81 c4 2c 01 00 00    	add    esp,0x12c
c0011f88:	89 d8                	mov    eax,ebx
c0011f8a:	5b                   	pop    ebx
c0011f8b:	5e                   	pop    esi
c0011f8c:	5f                   	pop    edi
c0011f8d:	5d                   	pop    ebp
c0011f8e:	c3                   	ret    

c0011f8f <Thr::executeDLL(unsigned long, void*)>:
c0011f8f:	56                   	push   esi
c0011f90:	53                   	push   ebx
c0011f91:	52                   	push   edx
c0011f92:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011f96:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0011f9a:	85 db                	test   ebx,ebx
c0011f9c:	75 10                	jne    c0011fae <Thr::executeDLL(unsigned long, void*)+0x1f>
c0011f9e:	83 ec 0c             	sub    esp,0xc
c0011fa1:	68 94 dd 01 c0       	push   0xc001dd94
c0011fa6:	e8 50 d4 ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c0011fab:	83 c4 10             	add    esp,0x10
c0011fae:	50                   	push   eax
c0011faf:	50                   	push   eax
c0011fb0:	53                   	push   ebx
c0011fb1:	68 be dd 01 c0       	push   0xc001ddbe
c0011fb6:	e8 f1 78 ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c0011fbb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0011fbf:	89 d8                	mov    eax,ebx
c0011fc1:	83 c4 14             	add    esp,0x14
c0011fc4:	5b                   	pop    ebx
c0011fc5:	5e                   	pop    esi
c0011fc6:	ff e0                	jmp    eax

c0011fc8 <userModeEntryPoint(void*)>:
c0011fc8:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c0011fcd:	48                   	dec    eax
c0011fce:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c0011fd3:	75 03                	jne    c0011fd8 <userModeEntryPoint(void*)+0x10>
c0011fd5:	fb                   	sti    
c0011fd6:	66 90                	xchg   ax,ax
c0011fd8:	fb                   	sti    
c0011fd9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011fde:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011fe1:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0011fe7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011feb:	e9 6f e2 fe ff       	jmp    c000025f <goToUsermode>

c0011ff0 <changeTSS>:
c0011ff0:	83 ec 14             	sub    esp,0x14
c0011ff3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ff8:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0011ffb:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0012000:	c1 e2 15             	shl    edx,0x15
c0012003:	29 d0                	sub    eax,edx
c0012005:	50                   	push   eax
c0012006:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c001200b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012011:	05 7c 11 00 00       	add    eax,0x117c
c0012016:	50                   	push   eax
c0012017:	e8 90 5f ff ff       	call   c0007fac <TSS::setESP(unsigned long)>
c001201c:	83 c4 1c             	add    esp,0x1c
c001201f:	c3                   	ret    

c0012020 <switchToThread(ThreadControlBlock*)>:
c0012020:	57                   	push   edi
c0012021:	a1 c4 26 02 c0       	mov    eax,ds:0xc00226c4
c0012026:	56                   	push   esi
c0012027:	85 c0                	test   eax,eax
c0012029:	53                   	push   ebx
c001202a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001202e:	0f 85 90 00 00 00    	jne    c00120c4 <switchToThread(ThreadControlBlock*)+0xa4>
c0012034:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c0012037:	80 fa ff             	cmp    dl,0xff
c001203a:	0f 84 80 00 00 00    	je     c00120c0 <switchToThread(ThreadControlBlock*)+0xa0>
c0012040:	81 e2 ff 00 00 00    	and    edx,0xff
c0012046:	b8 00 04 00 00       	mov    eax,0x400
c001204b:	29 d0                	sub    eax,edx
c001204d:	d1 f8                	sar    eax,1
c001204f:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c0012052:	66 90                	xchg   ax,ax
c0012054:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0012057:	e8 7b 24 00 00       	call   c00144d7 <HalQueryPerformanceCounter()>
c001205c:	a3 08 27 02 c0       	mov    ds:0xc0022708,eax
c0012061:	89 15 0c 27 02 c0    	mov    DWORD PTR ds:0xc002270c,edx
c0012067:	89 c6                	mov    esi,eax
c0012069:	89 d7                	mov    edi,edx
c001206b:	2b 35 f8 26 02 c0    	sub    esi,DWORD PTR ds:0xc00226f8
c0012071:	a3 f8 26 02 c0       	mov    ds:0xc00226f8,eax
c0012076:	1b 3d fc 26 02 c0    	sbb    edi,DWORD PTR ds:0xc00226fc
c001207c:	89 35 00 27 02 c0    	mov    DWORD PTR ds:0xc0022700,esi
c0012082:	89 3d 04 27 02 c0    	mov    DWORD PTR ds:0xc0022704,edi
c0012088:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001208e:	89 15 fc 26 02 c0    	mov    DWORD PTR ds:0xc00226fc,edx
c0012094:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0012097:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c001209a:	01 c6                	add    esi,eax
c001209c:	11 d7                	adc    edi,edx
c001209e:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00120a1:	83 ec 0c             	sub    esp,0xc
c00120a4:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00120a7:	53                   	push   ebx
c00120a8:	e8 ea e1 fe ff       	call   c0000297 <switchToThreadASM>
c00120ad:	0f 20 c0             	mov    eax,cr0
c00120b0:	83 c8 08             	or     eax,0x8
c00120b3:	0f 22 c0             	mov    cr0,eax
c00120b6:	83 c4 10             	add    esp,0x10
c00120b9:	5b                   	pop    ebx
c00120ba:	5e                   	pop    esi
c00120bb:	5f                   	pop    edi
c00120bc:	c3                   	ret    
c00120bd:	8d 76 00             	lea    esi,[esi+0x0]
c00120c0:	31 c0                	xor    eax,eax
c00120c2:	eb 90                	jmp    c0012054 <switchToThread(ThreadControlBlock*)+0x34>
c00120c4:	5b                   	pop    ebx
c00120c5:	c7 05 c0 26 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00226c0,0x1
c00120cf:	5e                   	pop    esi
c00120d0:	5f                   	pop    edi
c00120d1:	c3                   	ret    
c00120d2:	66 90                	xchg   ax,ax

c00120d4 <Process::addArgs(char**)>:
c00120d4:	57                   	push   edi
c00120d5:	56                   	push   esi
c00120d6:	53                   	push   ebx
c00120d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00120db:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00120df:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00120e9:	85 ff                	test   edi,edi
c00120eb:	74 43                	je     c0012130 <Process::addArgs(char**)+0x5c>
c00120ed:	8b 07                	mov    eax,DWORD PTR [edi]
c00120ef:	85 c0                	test   eax,eax
c00120f1:	74 3d                	je     c0012130 <Process::addArgs(char**)+0x5c>
c00120f3:	31 db                	xor    ebx,ebx
c00120f5:	8d 76 00             	lea    esi,[esi+0x0]
c00120f8:	83 ec 0c             	sub    esp,0xc
c00120fb:	50                   	push   eax
c00120fc:	e8 5f e4 fe ff       	call   c0000560 <strlen>
c0012101:	40                   	inc    eax
c0012102:	89 04 24             	mov    DWORD PTR [esp],eax
c0012105:	e8 13 4a ff ff       	call   c0006b1d <malloc>
c001210a:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0012111:	5a                   	pop    edx
c0012112:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0012115:	59                   	pop    ecx
c0012116:	43                   	inc    ebx
c0012117:	52                   	push   edx
c0012118:	50                   	push   eax
c0012119:	e8 02 e5 fe ff       	call   c0000620 <strcpy>
c001211e:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0012124:	83 c4 10             	add    esp,0x10
c0012127:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001212a:	85 c0                	test   eax,eax
c001212c:	75 ca                	jne    c00120f8 <Process::addArgs(char**)+0x24>
c001212e:	66 90                	xchg   ax,ax
c0012130:	5b                   	pop    ebx
c0012131:	5e                   	pop    esi
c0012132:	5f                   	pop    edi
c0012133:	c3                   	ret    

c0012134 <Process::Process(char const*, Process*, char**)>:
c0012134:	56                   	push   esi
c0012135:	53                   	push   ebx
c0012136:	83 ec 14             	sub    esp,0x14
c0012139:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001213d:	05 0c 02 00 00       	add    eax,0x20c
c0012142:	bb 07 00 00 00       	mov    ebx,0x7
c0012147:	89 c6                	mov    esi,eax
c0012149:	8d 76 00             	lea    esi,[esi+0x0]
c001214c:	85 db                	test   ebx,ebx
c001214e:	78 14                	js     c0012164 <Process::Process(char const*, Process*, char**)+0x30>
c0012150:	83 ec 0c             	sub    esp,0xc
c0012153:	56                   	push   esi
c0012154:	e8 73 9c 00 00       	call   c001bdcc <ThreadControlBlock::ThreadControlBlock()>
c0012159:	83 c4 10             	add    esp,0x10
c001215c:	83 c6 5f             	add    esi,0x5f
c001215f:	4b                   	dec    ebx
c0012160:	eb ea                	jmp    c001214c <Process::Process(char const*, Process*, char**)+0x18>
c0012162:	66 90                	xchg   ax,ax
c0012164:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012168:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001216f:	83 ec 0c             	sub    esp,0xc
c0012172:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012176:	e8 09 d1 ff ff       	call   c000f284 <Krnl::newProcessEnv(Process*)>
c001217b:	83 c4 10             	add    esp,0x10
c001217e:	89 c2                	mov    edx,eax
c0012180:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012184:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001218a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001218e:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0012197:	a1 30 ec 01 c0       	mov    eax,ds:0xc001ec30
c001219c:	8d 50 01             	lea    edx,[eax+0x1]
c001219f:	89 15 30 ec 01 c0    	mov    DWORD PTR ds:0xc001ec30,edx
c00121a5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00121a9:	89 02                	mov    DWORD PTR [edx],eax
c00121ab:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00121b3:	83 ec 0c             	sub    esp,0xc
c00121b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121ba:	e8 5e 49 ff ff       	call   c0006b1d <malloc>
c00121bf:	83 c4 10             	add    esp,0x10
c00121c2:	89 c3                	mov    ebx,eax
c00121c4:	83 ec 08             	sub    esp,0x8
c00121c7:	6a 00                	push   0x0
c00121c9:	53                   	push   ebx
c00121ca:	e8 cd 6f ff ff       	call   c000919c <VAS::VAS(bool)>
c00121cf:	83 c4 10             	add    esp,0x10
c00121d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00121d6:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00121dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00121e0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00121ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00121ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00121f2:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00121f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00121fc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012202:	85 c0                	test   eax,eax
c0012204:	74 42                	je     c0012248 <Process::Process(char const*, Process*, char**)+0x114>
c0012206:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001220a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012210:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0012216:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001221a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0012220:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012224:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001222a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012230:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012234:	05 0c 01 00 00       	add    eax,0x10c
c0012239:	83 ec 08             	sub    esp,0x8
c001223c:	52                   	push   edx
c001223d:	50                   	push   eax
c001223e:	e8 dd e3 fe ff       	call   c0000620 <strcpy>
c0012243:	83 c4 10             	add    esp,0x10
c0012246:	eb 64                	jmp    c00122ac <Process::Process(char const*, Process*, char**)+0x178>
c0012248:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c0012250:	83 ec 0c             	sub    esp,0xc
c0012253:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012257:	e8 c1 48 ff ff       	call   c0006b1d <malloc>
c001225c:	83 c4 10             	add    esp,0x10
c001225f:	89 c3                	mov    ebx,eax
c0012261:	83 ec 08             	sub    esp,0x8
c0012264:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012268:	53                   	push   ebx
c0012269:	e8 e2 5a ff ff       	call   c0007d50 <VgaText::VgaText(char const*)>
c001226e:	83 c4 10             	add    esp,0x10
c0012271:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012275:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001227b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001227f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0012285:	83 ec 0c             	sub    esp,0xc
c0012288:	50                   	push   eax
c0012289:	e8 62 53 ff ff       	call   c00075f0 <addToTerminalCycle(VgaText*)>
c001228e:	83 c4 10             	add    esp,0x10
c0012291:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012295:	05 0c 01 00 00       	add    eax,0x10c
c001229a:	83 ec 08             	sub    esp,0x8
c001229d:	68 dd dd 01 c0       	push   0xc001dddd
c00122a2:	50                   	push   eax
c00122a3:	e8 78 e3 fe ff       	call   c0000620 <strcpy>
c00122a8:	83 c4 10             	add    esp,0x10
c00122ab:	90                   	nop
c00122ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00122b0:	83 c0 0c             	add    eax,0xc
c00122b3:	83 ec 08             	sub    esp,0x8
c00122b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00122ba:	50                   	push   eax
c00122bb:	e8 60 e3 fe ff       	call   c0000620 <strcpy>
c00122c0:	83 c4 10             	add    esp,0x10
c00122c3:	83 ec 08             	sub    esp,0x8
c00122c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00122ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00122ce:	e8 01 fe ff ff       	call   c00120d4 <Process::addArgs(char**)>
c00122d3:	83 c4 10             	add    esp,0x10
c00122d6:	83 ec 08             	sub    esp,0x8
c00122d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00122dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00122e1:	e8 89 ed ff ff       	call   c001106f <Thr::loadProgramIntoMemory(Process*, char const*)>
c00122e6:	83 c4 10             	add    esp,0x10
c00122e9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00122ed:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00122f1:	83 f0 01             	xor    eax,0x1
c00122f4:	88 c2                	mov    dl,al
c00122f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00122fa:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0012300:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012304:	25 ff 00 00 00       	and    eax,0xff
c0012309:	83 ec 08             	sub    esp,0x8
c001230c:	50                   	push   eax
c001230d:	68 34 de 01 c0       	push   0xc001de34
c0012312:	e8 95 75 ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c0012317:	83 c4 10             	add    esp,0x10
c001231a:	90                   	nop
c001231b:	83 c4 14             	add    esp,0x14
c001231e:	5b                   	pop    ebx
c001231f:	5e                   	pop    esi
c0012320:	c3                   	ret    
c0012321:	90                   	nop
c0012322:	66 90                	xchg   ax,ax

c0012324 <Process::Process(bool, char const*, Process*, char**)>:
c0012324:	56                   	push   esi
c0012325:	53                   	push   ebx
c0012326:	83 ec 24             	sub    esp,0x24
c0012329:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001232d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012331:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012335:	05 0c 02 00 00       	add    eax,0x20c
c001233a:	bb 07 00 00 00       	mov    ebx,0x7
c001233f:	89 c6                	mov    esi,eax
c0012341:	8d 76 00             	lea    esi,[esi+0x0]
c0012344:	85 db                	test   ebx,ebx
c0012346:	78 14                	js     c001235c <Process::Process(bool, char const*, Process*, char**)+0x38>
c0012348:	83 ec 0c             	sub    esp,0xc
c001234b:	56                   	push   esi
c001234c:	e8 7b 9a 00 00       	call   c001bdcc <ThreadControlBlock::ThreadControlBlock()>
c0012351:	83 c4 10             	add    esp,0x10
c0012354:	83 c6 5f             	add    esi,0x5f
c0012357:	4b                   	dec    ebx
c0012358:	eb ea                	jmp    c0012344 <Process::Process(bool, char const*, Process*, char**)+0x20>
c001235a:	66 90                	xchg   ax,ax
c001235c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012360:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0012367:	83 ec 0c             	sub    esp,0xc
c001236a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001236e:	e8 11 cf ff ff       	call   c000f284 <Krnl::newProcessEnv(Process*)>
c0012373:	83 c4 10             	add    esp,0x10
c0012376:	89 c2                	mov    edx,eax
c0012378:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001237c:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0012382:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012386:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001238f:	a1 30 ec 01 c0       	mov    eax,ds:0xc001ec30
c0012394:	8d 50 01             	lea    edx,[eax+0x1]
c0012397:	89 15 30 ec 01 c0    	mov    DWORD PTR ds:0xc001ec30,edx
c001239d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00123a1:	89 02                	mov    DWORD PTR [edx],eax
c00123a3:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00123ab:	83 ec 0c             	sub    esp,0xc
c00123ae:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00123b2:	e8 66 47 ff ff       	call   c0006b1d <malloc>
c00123b7:	83 c4 10             	add    esp,0x10
c00123ba:	89 c3                	mov    ebx,eax
c00123bc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00123c0:	25 ff 00 00 00       	and    eax,0xff
c00123c5:	83 ec 08             	sub    esp,0x8
c00123c8:	50                   	push   eax
c00123c9:	53                   	push   ebx
c00123ca:	e8 cd 6d ff ff       	call   c000919c <VAS::VAS(bool)>
c00123cf:	83 c4 10             	add    esp,0x10
c00123d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123d6:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00123dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123e0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00123ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123ee:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00123f2:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00123f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123fc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012402:	85 c0                	test   eax,eax
c0012404:	74 42                	je     c0012448 <Process::Process(bool, char const*, Process*, char**)+0x124>
c0012406:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001240a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012410:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0012416:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001241a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0012420:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012424:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001242a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012430:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012434:	05 0c 01 00 00       	add    eax,0x10c
c0012439:	83 ec 08             	sub    esp,0x8
c001243c:	52                   	push   edx
c001243d:	50                   	push   eax
c001243e:	e8 dd e1 fe ff       	call   c0000620 <strcpy>
c0012443:	83 c4 10             	add    esp,0x10
c0012446:	eb 64                	jmp    c00124ac <Process::Process(bool, char const*, Process*, char**)+0x188>
c0012448:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c0012450:	83 ec 0c             	sub    esp,0xc
c0012453:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012457:	e8 c1 46 ff ff       	call   c0006b1d <malloc>
c001245c:	83 c4 10             	add    esp,0x10
c001245f:	89 c3                	mov    ebx,eax
c0012461:	83 ec 08             	sub    esp,0x8
c0012464:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012468:	53                   	push   ebx
c0012469:	e8 e2 58 ff ff       	call   c0007d50 <VgaText::VgaText(char const*)>
c001246e:	83 c4 10             	add    esp,0x10
c0012471:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012475:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001247b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001247f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0012485:	83 ec 0c             	sub    esp,0xc
c0012488:	50                   	push   eax
c0012489:	e8 62 51 ff ff       	call   c00075f0 <addToTerminalCycle(VgaText*)>
c001248e:	83 c4 10             	add    esp,0x10
c0012491:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012495:	05 0c 01 00 00       	add    eax,0x10c
c001249a:	83 ec 08             	sub    esp,0x8
c001249d:	68 dd dd 01 c0       	push   0xc001dddd
c00124a2:	50                   	push   eax
c00124a3:	e8 78 e1 fe ff       	call   c0000620 <strcpy>
c00124a8:	83 c4 10             	add    esp,0x10
c00124ab:	90                   	nop
c00124ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124b0:	83 c0 0c             	add    eax,0xc
c00124b3:	83 ec 08             	sub    esp,0x8
c00124b6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00124ba:	50                   	push   eax
c00124bb:	e8 60 e1 fe ff       	call   c0000620 <strcpy>
c00124c0:	83 c4 10             	add    esp,0x10
c00124c3:	83 ec 08             	sub    esp,0x8
c00124c6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00124ca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00124ce:	e8 01 fc ff ff       	call   c00120d4 <Process::addArgs(char**)>
c00124d3:	83 c4 10             	add    esp,0x10
c00124d6:	90                   	nop
c00124d7:	83 c4 24             	add    esp,0x24
c00124da:	5b                   	pop    ebx
c00124db:	5e                   	pop    esi
c00124dc:	c3                   	ret    
c00124dd:	8d 76 00             	lea    esi,[esi+0x0]

c00124e0 <taskStartupFunction>:
c00124e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00124e5:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00124e8:	c3                   	ret    
c00124e9:	90                   	nop
c00124ea:	66 90                	xchg   ax,ax

c00124ec <Semaphore::Semaphore(int)>:
c00124ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00124f4:	89 10                	mov    DWORD PTR [eax],edx
c00124f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124fa:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0012501:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012505:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001250c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012510:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012517:	90                   	nop
c0012518:	c3                   	ret    
c0012519:	90                   	nop
c001251a:	66 90                	xchg   ax,ax

c001251c <Mutex::Mutex()>:
c001251c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012520:	6a 01                	push   0x1
c0012522:	50                   	push   eax
c0012523:	e8 c4 ff ff ff       	call   c00124ec <Semaphore::Semaphore(int)>
c0012528:	83 c4 08             	add    esp,0x8
c001252b:	90                   	nop
c001252c:	c3                   	ret    
c001252d:	90                   	nop
c001252e:	66 90                	xchg   ax,ax

c0012530 <Process::createThread(void (*)(void*), void*, int)>:
c0012530:	57                   	push   edi
c0012531:	31 c9                	xor    ecx,ecx
c0012533:	56                   	push   esi
c0012534:	53                   	push   ebx
c0012535:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012539:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0012540:	89 f2                	mov    edx,esi
c0012542:	66 90                	xchg   ax,ax
c0012544:	31 c0                	xor    eax,eax
c0012546:	66 89 d0             	mov    ax,dx
c0012549:	83 e2 01             	and    edx,0x1
c001254c:	74 12                	je     c0012560 <Process::createThread(void (*)(void*), void*, int)+0x30>
c001254e:	d1 f8                	sar    eax,1
c0012550:	41                   	inc    ecx
c0012551:	89 c2                	mov    edx,eax
c0012553:	83 f9 10             	cmp    ecx,0x10
c0012556:	75 ec                	jne    c0012544 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0012558:	31 db                	xor    ebx,ebx
c001255a:	89 d8                	mov    eax,ebx
c001255c:	5b                   	pop    ebx
c001255d:	5e                   	pop    esi
c001255e:	5f                   	pop    edi
c001255f:	c3                   	ret    
c0012560:	b8 01 00 00 00       	mov    eax,0x1
c0012565:	d3 e0                	shl    eax,cl
c0012567:	09 c6                	or     esi,eax
c0012569:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001256c:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0012573:	01 c0                	add    eax,eax
c0012575:	01 c8                	add    eax,ecx
c0012577:	8d 04 80             	lea    eax,[eax+eax*4]
c001257a:	01 d8                	add    eax,ebx
c001257c:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0012583:	75 0b                	jne    c0012590 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0012585:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c001258f:	90                   	nop
c0012590:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0012596:	83 ec 08             	sub    esp,0x8
c0012599:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001259c:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001259f:	01 c0                	add    eax,eax
c00125a1:	01 c8                	add    eax,ecx
c00125a3:	8d 3c 80             	lea    edi,[eax+eax*4]
c00125a6:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00125a9:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00125af:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00125b5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00125b9:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00125bf:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00125c5:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00125cc:	89 ca                	mov    edx,ecx
c00125ce:	f7 da                	neg    edx
c00125d0:	c1 e2 15             	shl    edx,0x15
c00125d3:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00125d9:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00125df:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00125e3:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00125ed:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00125f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00125f7:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00125fd:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0012607:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0012611:	53                   	push   ebx
c0012612:	68 e4 26 02 c0       	push   0xc00226e4
c0012617:	e8 50 95 00 00       	call   c001bb6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001261c:	83 c4 10             	add    esp,0x10
c001261f:	89 d8                	mov    eax,ebx
c0012621:	5b                   	pop    ebx
c0012622:	5e                   	pop    esi
c0012623:	5f                   	pop    edi
c0012624:	c3                   	ret    
c0012625:	90                   	nop
c0012626:	66 90                	xchg   ax,ax

c0012628 <Process::createUserThread()>:
c0012628:	83 ec 0c             	sub    esp,0xc
c001262b:	68 80 00 00 00       	push   0x80
c0012630:	6a 00                	push   0x0
c0012632:	68 c8 1f 01 c0       	push   0xc0011fc8
c0012637:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001263b:	50                   	push   eax
c001263c:	e8 ef fe ff ff       	call   c0012530 <Process::createThread(void (*)(void*), void*, int)>
c0012641:	83 c4 1c             	add    esp,0x1c
c0012644:	c3                   	ret    
c0012645:	8d 76 00             	lea    esi,[esi+0x0]

c0012648 <setupMultitasking(void (*)())>:
c0012648:	56                   	push   esi
c0012649:	53                   	push   ebx
c001264a:	53                   	push   ebx
c001264b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001264f:	eb 13                	jmp    c0012664 <setupMultitasking(void (*)())+0x1c>
c0012651:	8d 76 00             	lea    esi,[esi+0x0]
c0012654:	83 ec 0c             	sub    esp,0xc
c0012657:	68 e4 26 02 c0       	push   0xc00226e4
c001265c:	e8 53 94 00 00       	call   c001bab4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012661:	83 c4 10             	add    esp,0x10
c0012664:	83 ec 0c             	sub    esp,0xc
c0012667:	68 e4 26 02 c0       	push   0xc00226e4
c001266c:	e8 1f 94 00 00       	call   c001ba90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012671:	83 c4 10             	add    esp,0x10
c0012674:	84 c0                	test   al,al
c0012676:	74 dc                	je     c0012654 <setupMultitasking(void (*)())+0xc>
c0012678:	83 ec 0c             	sub    esp,0xc
c001267b:	68 1f 07 00 00       	push   0x71f
c0012680:	e8 98 44 ff ff       	call   c0006b1d <malloc>
c0012685:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001268c:	89 c3                	mov    ebx,eax
c001268e:	6a 00                	push   0x0
c0012690:	68 e1 dd 01 c0       	push   0xc001dde1
c0012695:	6a 01                	push   0x1
c0012697:	50                   	push   eax
c0012698:	e8 87 fc ff ff       	call   c0012324 <Process::Process(bool, char const*, Process*, char**)>
c001269d:	83 c4 14             	add    esp,0x14
c00126a0:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00126a6:	89 1d f0 26 02 c0    	mov    DWORD PTR ds:0xc00226f0,ebx
c00126ac:	50                   	push   eax
c00126ad:	e8 9b 51 ff ff       	call   c000784d <setActiveTerminal(VgaText*)>
c00126b2:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c00126ba:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00126c4:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00126ca:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00126cd:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00126d7:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00126dd:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00126e3:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00126ed:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00126f7:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0012701:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0012707:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001270d:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0012717:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001271d:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0012727:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001272d:	5a                   	pop    edx
c001272e:	59                   	pop    ecx
c001272f:	68 dd dd 01 c0       	push   0xc001dddd
c0012734:	50                   	push   eax
c0012735:	e8 e6 de fe ff       	call   c0000620 <strcpy>
c001273a:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0012741:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0012745:	83 c4 14             	add    esp,0x14
c0012748:	5b                   	pop    ebx
c0012749:	5e                   	pop    esi
c001274a:	e9 3a db fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c001274f:	90                   	nop

c0012750 <schedule()>:
c0012750:	8b 15 c4 26 02 c0    	mov    edx,DWORD PTR ds:0xc00226c4
c0012756:	85 d2                	test   edx,edx
c0012758:	74 0e                	je     c0012768 <schedule()+0x18>
c001275a:	c7 05 c0 26 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00226c0,0x1
c0012764:	c3                   	ret    
c0012765:	8d 76 00             	lea    esi,[esi+0x0]
c0012768:	53                   	push   ebx
c0012769:	83 ec 14             	sub    esp,0x14
c001276c:	68 e4 26 02 c0       	push   0xc00226e4
c0012771:	e8 1a 93 00 00       	call   c001ba90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012776:	83 c4 10             	add    esp,0x10
c0012779:	84 c0                	test   al,al
c001277b:	75 3b                	jne    c00127b8 <schedule()+0x68>
c001277d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012782:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0012785:	4a                   	dec    edx
c0012786:	74 38                	je     c00127c0 <schedule()+0x70>
c0012788:	83 ec 0c             	sub    esp,0xc
c001278b:	68 e4 26 02 c0       	push   0xc00226e4
c0012790:	e8 17 93 00 00       	call   c001baac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012795:	c7 04 24 e4 26 02 c0 	mov    DWORD PTR [esp],0xc00226e4
c001279c:	89 c3                	mov    ebx,eax
c001279e:	e8 11 93 00 00       	call   c001bab4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00127a3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00127aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00127ad:	e8 6e f8 ff ff       	call   c0012020 <switchToThread(ThreadControlBlock*)>
c00127b2:	83 c4 10             	add    esp,0x10
c00127b5:	8d 76 00             	lea    esi,[esi+0x0]
c00127b8:	83 c4 08             	add    esp,0x8
c00127bb:	5b                   	pop    ebx
c00127bc:	c3                   	ret    
c00127bd:	8d 76 00             	lea    esi,[esi+0x0]
c00127c0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00127c7:	83 ec 08             	sub    esp,0x8
c00127ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00127cf:	50                   	push   eax
c00127d0:	68 e4 26 02 c0       	push   0xc00226e4
c00127d5:	e8 92 93 00 00       	call   c001bb6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00127da:	83 c4 10             	add    esp,0x10
c00127dd:	eb a9                	jmp    c0012788 <schedule()+0x38>
c00127df:	90                   	nop

c00127e0 <Semaphore::tryAcquire()>:
c00127e0:	53                   	push   ebx
c00127e1:	83 ec 08             	sub    esp,0x8
c00127e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00127e8:	fa                   	cli    
c00127e9:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c00127ee:	8d 50 01             	lea    edx,[eax+0x1]
c00127f1:	89 15 c8 26 02 c0    	mov    DWORD PTR ds:0xc00226c8,edx
c00127f7:	8b 15 c4 26 02 c0    	mov    edx,DWORD PTR ds:0xc00226c4
c00127fd:	8d 5a 01             	lea    ebx,[edx+0x1]
c0012800:	89 1d c4 26 02 c0    	mov    DWORD PTR ds:0xc00226c4,ebx
c0012806:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0012809:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001280b:	7c 33                	jl     c0012840 <Semaphore::tryAcquire()+0x60>
c001280d:	89 15 c4 26 02 c0    	mov    DWORD PTR ds:0xc00226c4,edx
c0012813:	85 d2                	test   edx,edx
c0012815:	75 0d                	jne    c0012824 <Semaphore::tryAcquire()+0x44>
c0012817:	8b 15 c0 26 02 c0    	mov    edx,DWORD PTR ds:0xc00226c0
c001281d:	85 d2                	test   edx,edx
c001281f:	75 6b                	jne    c001288c <Semaphore::tryAcquire()+0xac>
c0012821:	8d 76 00             	lea    esi,[esi+0x0]
c0012824:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c0012829:	85 c0                	test   eax,eax
c001282b:	74 0b                	je     c0012838 <Semaphore::tryAcquire()+0x58>
c001282d:	8d 76 00             	lea    esi,[esi+0x0]
c0012830:	31 c0                	xor    eax,eax
c0012832:	83 c4 08             	add    esp,0x8
c0012835:	5b                   	pop    ebx
c0012836:	c3                   	ret    
c0012837:	90                   	nop
c0012838:	fb                   	sti    
c0012839:	83 c4 08             	add    esp,0x8
c001283c:	5b                   	pop    ebx
c001283d:	c3                   	ret    
c001283e:	66 90                	xchg   ax,ax
c0012840:	43                   	inc    ebx
c0012841:	89 15 c4 26 02 c0    	mov    DWORD PTR ds:0xc00226c4,edx
c0012847:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001284a:	85 d2                	test   edx,edx
c001284c:	75 22                	jne    c0012870 <Semaphore::tryAcquire()+0x90>
c001284e:	8b 0d c0 26 02 c0    	mov    ecx,DWORD PTR ds:0xc00226c0
c0012854:	85 c9                	test   ecx,ecx
c0012856:	74 18                	je     c0012870 <Semaphore::tryAcquire()+0x90>
c0012858:	c7 05 c0 26 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00226c0,0x0
c0012862:	e8 e9 fe ff ff       	call   c0012750 <schedule()>
c0012867:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c001286c:	48                   	dec    eax
c001286d:	8d 76 00             	lea    esi,[esi+0x0]
c0012870:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c0012875:	85 c0                	test   eax,eax
c0012877:	75 0b                	jne    c0012884 <Semaphore::tryAcquire()+0xa4>
c0012879:	fb                   	sti    
c001287a:	b0 01                	mov    al,0x1
c001287c:	83 c4 08             	add    esp,0x8
c001287f:	5b                   	pop    ebx
c0012880:	c3                   	ret    
c0012881:	8d 76 00             	lea    esi,[esi+0x0]
c0012884:	b0 01                	mov    al,0x1
c0012886:	83 c4 08             	add    esp,0x8
c0012889:	5b                   	pop    ebx
c001288a:	c3                   	ret    
c001288b:	90                   	nop
c001288c:	c7 05 c0 26 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00226c0,0x0
c0012896:	e8 b5 fe ff ff       	call   c0012750 <schedule()>
c001289b:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c00128a0:	48                   	dec    eax
c00128a1:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c00128a6:	85 c0                	test   eax,eax
c00128a8:	75 86                	jne    c0012830 <Semaphore::tryAcquire()+0x50>
c00128aa:	eb 8c                	jmp    c0012838 <Semaphore::tryAcquire()+0x58>

c00128ac <Semaphore::assertLocked(char const*)>:
c00128ac:	83 ec 0c             	sub    esp,0xc
c00128af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00128b3:	fa                   	cli    
c00128b4:	ff 05 c8 26 02 c0    	inc    DWORD PTR ds:0xc00226c8
c00128ba:	a1 c4 26 02 c0       	mov    eax,ds:0xc00226c4
c00128bf:	8d 48 01             	lea    ecx,[eax+0x1]
c00128c2:	89 0d c4 26 02 c0    	mov    DWORD PTR ds:0xc00226c4,ecx
c00128c8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00128ca:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00128cd:	7c 29                	jl     c00128f8 <Semaphore::assertLocked(char const*)+0x4c>
c00128cf:	90                   	nop
c00128d0:	a3 c4 26 02 c0       	mov    ds:0xc00226c4,eax
c00128d5:	85 c0                	test   eax,eax
c00128d7:	75 0b                	jne    c00128e4 <Semaphore::assertLocked(char const*)+0x38>
c00128d9:	a1 c0 26 02 c0       	mov    eax,ds:0xc00226c0
c00128de:	85 c0                	test   eax,eax
c00128e0:	75 2e                	jne    c0012910 <Semaphore::assertLocked(char const*)+0x64>
c00128e2:	66 90                	xchg   ax,ax
c00128e4:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c00128e9:	48                   	dec    eax
c00128ea:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c00128ef:	75 03                	jne    c00128f4 <Semaphore::assertLocked(char const*)+0x48>
c00128f1:	fb                   	sti    
c00128f2:	66 90                	xchg   ax,ax
c00128f4:	83 c4 0c             	add    esp,0xc
c00128f7:	c3                   	ret    
c00128f8:	83 ec 0c             	sub    esp,0xc
c00128fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00128ff:	52                   	push   edx
c0012900:	e8 f6 ca ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c0012905:	a1 c4 26 02 c0       	mov    eax,ds:0xc00226c4
c001290a:	83 c4 10             	add    esp,0x10
c001290d:	48                   	dec    eax
c001290e:	eb c0                	jmp    c00128d0 <Semaphore::assertLocked(char const*)+0x24>
c0012910:	c7 05 c0 26 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00226c0,0x0
c001291a:	e8 31 fe ff ff       	call   c0012750 <schedule()>
c001291f:	eb c3                	jmp    c00128e4 <Semaphore::assertLocked(char const*)+0x38>
c0012921:	8d 76 00             	lea    esi,[esi+0x0]

c0012924 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0012924:	83 ec 0c             	sub    esp,0xc
c0012927:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001292c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012930:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0012933:	e8 18 fe ff ff       	call   c0012750 <schedule()>
c0012938:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c001293d:	48                   	dec    eax
c001293e:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c0012943:	75 03                	jne    c0012948 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0012945:	fb                   	sti    
c0012946:	66 90                	xchg   ax,ax
c0012948:	83 c4 0c             	add    esp,0xc
c001294b:	c3                   	ret    

c001294c <blockTask(TaskState)>:
c001294c:	83 ec 0c             	sub    esp,0xc
c001294f:	fa                   	cli    
c0012950:	ff 05 c8 26 02 c0    	inc    DWORD PTR ds:0xc00226c8
c0012956:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001295a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001295f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0012962:	e8 e9 fd ff ff       	call   c0012750 <schedule()>
c0012967:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c001296c:	48                   	dec    eax
c001296d:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c0012972:	75 04                	jne    c0012978 <blockTask(TaskState)+0x2c>
c0012974:	fb                   	sti    
c0012975:	8d 76 00             	lea    esi,[esi+0x0]
c0012978:	83 c4 0c             	add    esp,0xc
c001297b:	c3                   	ret    

c001297c <waitTask(int, int*, int)>:
c001297c:	83 ec 18             	sub    esp,0x18
c001297f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012984:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012988:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001298b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001298f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012994:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0012997:	6a 07                	push   0x7
c0012999:	e8 ae ff ff ff       	call   c001294c <blockTask(TaskState)>
c001299e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00129a3:	83 c4 10             	add    esp,0x10
c00129a6:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00129a9:	85 d2                	test   edx,edx
c00129ab:	74 0b                	je     c00129b8 <waitTask(int, int*, int)+0x3c>
c00129ad:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00129b0:	89 02                	mov    DWORD PTR [edx],eax
c00129b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00129b7:	90                   	nop
c00129b8:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00129bb:	83 c4 0c             	add    esp,0xc
c00129be:	c3                   	ret    
c00129bf:	90                   	nop

c00129c0 <milliTenthSleepUntil(unsigned int)>:
c00129c0:	83 ec 0c             	sub    esp,0xc
c00129c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129c7:	39 05 cc 17 02 c0    	cmp    DWORD PTR ds:0xc00217cc,eax
c00129cd:	76 05                	jbe    c00129d4 <milliTenthSleepUntil(unsigned int)+0x14>
c00129cf:	90                   	nop
c00129d0:	83 c4 0c             	add    esp,0xc
c00129d3:	c3                   	ret    
c00129d4:	fa                   	cli    
c00129d5:	ff 05 c8 26 02 c0    	inc    DWORD PTR ds:0xc00226c8
c00129db:	83 ec 08             	sub    esp,0x8
c00129de:	ff 05 c4 26 02 c0    	inc    DWORD PTR ds:0xc00226c4
c00129e4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00129ea:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00129ed:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00129f3:	52                   	push   edx
c00129f4:	68 d8 26 02 c0       	push   0xc00226d8
c00129f9:	e8 6e 91 00 00       	call   c001bb6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00129fe:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012a05:	e8 42 ff ff ff       	call   c001294c <blockTask(TaskState)>
c0012a0a:	a1 c4 26 02 c0       	mov    eax,ds:0xc00226c4
c0012a0f:	83 c4 10             	add    esp,0x10
c0012a12:	48                   	dec    eax
c0012a13:	a3 c4 26 02 c0       	mov    ds:0xc00226c4,eax
c0012a18:	85 c0                	test   eax,eax
c0012a1a:	75 0c                	jne    c0012a28 <milliTenthSleepUntil(unsigned int)+0x68>
c0012a1c:	a1 c0 26 02 c0       	mov    eax,ds:0xc00226c0
c0012a21:	85 c0                	test   eax,eax
c0012a23:	75 17                	jne    c0012a3c <milliTenthSleepUntil(unsigned int)+0x7c>
c0012a25:	8d 76 00             	lea    esi,[esi+0x0]
c0012a28:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c0012a2d:	48                   	dec    eax
c0012a2e:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c0012a33:	75 9b                	jne    c00129d0 <milliTenthSleepUntil(unsigned int)+0x10>
c0012a35:	fb                   	sti    
c0012a36:	83 c4 0c             	add    esp,0xc
c0012a39:	c3                   	ret    
c0012a3a:	66 90                	xchg   ax,ax
c0012a3c:	c7 05 c0 26 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00226c0,0x0
c0012a46:	e8 05 fd ff ff       	call   c0012750 <schedule()>
c0012a4b:	eb db                	jmp    c0012a28 <milliTenthSleepUntil(unsigned int)+0x68>
c0012a4d:	8d 76 00             	lea    esi,[esi+0x0]

c0012a50 <milliTenthSleep(unsigned int)>:
c0012a50:	a1 cc 17 02 c0       	mov    eax,ds:0xc00217cc
c0012a55:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0012a59:	e9 62 ff ff ff       	jmp    c00129c0 <milliTenthSleepUntil(unsigned int)>
c0012a5e:	66 90                	xchg   ax,ax

c0012a60 <sleep(unsigned int)>:
c0012a60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a64:	8d 04 80             	lea    eax,[eax+eax*4]
c0012a67:	8d 04 80             	lea    eax,[eax+eax*4]
c0012a6a:	8d 04 80             	lea    eax,[eax+eax*4]
c0012a6d:	8d 04 80             	lea    eax,[eax+eax*4]
c0012a70:	c1 e0 04             	shl    eax,0x4
c0012a73:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012a77:	eb d7                	jmp    c0012a50 <milliTenthSleep(unsigned int)>
c0012a79:	90                   	nop
c0012a7a:	66 90                	xchg   ax,ax

c0012a7c <Semaphore::acquire()>:
c0012a7c:	83 ec 0c             	sub    esp,0xc
c0012a7f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a83:	fa                   	cli    
c0012a84:	a1 c4 26 02 c0       	mov    eax,ds:0xc00226c4
c0012a89:	ff 05 c8 26 02 c0    	inc    DWORD PTR ds:0xc00226c8
c0012a8f:	8d 48 01             	lea    ecx,[eax+0x1]
c0012a92:	89 0d c4 26 02 c0    	mov    DWORD PTR ds:0xc00226c4,ecx
c0012a98:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0012a9b:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0012a9d:	7d 2d                	jge    c0012acc <Semaphore::acquire()+0x50>
c0012a9f:	41                   	inc    ecx
c0012aa0:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0012aa3:	90                   	nop
c0012aa4:	a3 c4 26 02 c0       	mov    ds:0xc00226c4,eax
c0012aa9:	85 c0                	test   eax,eax
c0012aab:	75 0b                	jne    c0012ab8 <Semaphore::acquire()+0x3c>
c0012aad:	a1 c0 26 02 c0       	mov    eax,ds:0xc00226c0
c0012ab2:	85 c0                	test   eax,eax
c0012ab4:	75 62                	jne    c0012b18 <Semaphore::acquire()+0x9c>
c0012ab6:	66 90                	xchg   ax,ax
c0012ab8:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c0012abd:	48                   	dec    eax
c0012abe:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c0012ac3:	75 03                	jne    c0012ac8 <Semaphore::acquire()+0x4c>
c0012ac5:	fb                   	sti    
c0012ac6:	66 90                	xchg   ax,ax
c0012ac8:	83 c4 0c             	add    esp,0xc
c0012acb:	c3                   	ret    
c0012acc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012ad1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0012ad8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0012adb:	85 c9                	test   ecx,ecx
c0012add:	74 4d                	je     c0012b2c <Semaphore::acquire()+0xb0>
c0012adf:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0012ae2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012ae8:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0012aeb:	90                   	nop
c0012aec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012af1:	83 ec 0c             	sub    esp,0xc
c0012af4:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0012af7:	68 5c de 01 c0       	push   0xc001de5c
c0012afc:	e8 ab 6d ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c0012b01:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0012b08:	e8 3f fe ff ff       	call   c001294c <blockTask(TaskState)>
c0012b0d:	a1 c4 26 02 c0       	mov    eax,ds:0xc00226c4
c0012b12:	83 c4 10             	add    esp,0x10
c0012b15:	48                   	dec    eax
c0012b16:	eb 8c                	jmp    c0012aa4 <Semaphore::acquire()+0x28>
c0012b18:	c7 05 c0 26 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00226c0,0x0
c0012b22:	e8 29 fc ff ff       	call   c0012750 <schedule()>
c0012b27:	eb 8f                	jmp    c0012ab8 <Semaphore::acquire()+0x3c>
c0012b29:	8d 76 00             	lea    esi,[esi+0x0]
c0012b2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b31:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012b34:	eb b6                	jmp    c0012aec <Semaphore::acquire()+0x70>
c0012b36:	66 90                	xchg   ax,ax

c0012b38 <taskReturned>:
c0012b38:	83 ec 18             	sub    esp,0x18
c0012b3b:	68 7c de 01 c0       	push   0xc001de7c
c0012b40:	e8 b6 c8 ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c0012b45:	83 c4 10             	add    esp,0x10
c0012b48:	83 ec 0c             	sub    esp,0xc
c0012b4b:	6a 02                	push   0x2
c0012b4d:	e8 fa fd ff ff       	call   c001294c <blockTask(TaskState)>
c0012b52:	fa                   	cli    
c0012b53:	ff 05 c8 26 02 c0    	inc    DWORD PTR ds:0xc00226c8
c0012b59:	e8 f2 fb ff ff       	call   c0012750 <schedule()>
c0012b5e:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c0012b63:	83 c4 10             	add    esp,0x10
c0012b66:	48                   	dec    eax
c0012b67:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c0012b6c:	85 c0                	test   eax,eax
c0012b6e:	75 d8                	jne    c0012b48 <taskReturned+0x10>
c0012b70:	fb                   	sti    
c0012b71:	eb d5                	jmp    c0012b48 <taskReturned+0x10>
c0012b73:	90                   	nop

c0012b74 <Thr::processFromPID(int)>:
c0012b74:	57                   	push   edi
c0012b75:	56                   	push   esi
c0012b76:	53                   	push   ebx
c0012b77:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012b7b:	fa                   	cli    
c0012b7c:	ff 05 c8 26 02 c0    	inc    DWORD PTR ds:0xc00226c8
c0012b82:	83 ec 0c             	sub    esp,0xc
c0012b85:	68 e4 26 02 c0       	push   0xc00226e4
c0012b8a:	e8 1d 8f 00 00       	call   c001baac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012b8f:	83 c4 10             	add    esp,0x10
c0012b92:	89 c7                	mov    edi,eax
c0012b94:	eb 16                	jmp    c0012bac <Thr::processFromPID(int)+0x38>
c0012b96:	66 90                	xchg   ax,ax
c0012b98:	83 ec 0c             	sub    esp,0xc
c0012b9b:	68 e4 26 02 c0       	push   0xc00226e4
c0012ba0:	e8 07 8f 00 00       	call   c001baac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012ba5:	83 c4 10             	add    esp,0x10
c0012ba8:	39 f8                	cmp    eax,edi
c0012baa:	74 4c                	je     c0012bf8 <Thr::processFromPID(int)+0x84>
c0012bac:	83 ec 0c             	sub    esp,0xc
c0012baf:	68 e4 26 02 c0       	push   0xc00226e4
c0012bb4:	e8 f3 8e 00 00       	call   c001baac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012bb9:	c7 04 24 e4 26 02 c0 	mov    DWORD PTR [esp],0xc00226e4
c0012bc0:	89 c3                	mov    ebx,eax
c0012bc2:	e8 ed 8e 00 00       	call   c001bab4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012bc7:	58                   	pop    eax
c0012bc8:	5a                   	pop    edx
c0012bc9:	53                   	push   ebx
c0012bca:	68 e4 26 02 c0       	push   0xc00226e4
c0012bcf:	e8 98 8f 00 00       	call   c001bb6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012bd4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012bd7:	83 c4 10             	add    esp,0x10
c0012bda:	39 30                	cmp    DWORD PTR [eax],esi
c0012bdc:	75 ba                	jne    c0012b98 <Thr::processFromPID(int)+0x24>
c0012bde:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c0012be3:	48                   	dec    eax
c0012be4:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c0012be9:	74 09                	je     c0012bf4 <Thr::processFromPID(int)+0x80>
c0012beb:	90                   	nop
c0012bec:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012bef:	5b                   	pop    ebx
c0012bf0:	5e                   	pop    esi
c0012bf1:	5f                   	pop    edi
c0012bf2:	c3                   	ret    
c0012bf3:	90                   	nop
c0012bf4:	fb                   	sti    
c0012bf5:	eb f5                	jmp    c0012bec <Thr::processFromPID(int)+0x78>
c0012bf7:	90                   	nop
c0012bf8:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c0012bfd:	48                   	dec    eax
c0012bfe:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c0012c03:	75 07                	jne    c0012c0c <Thr::processFromPID(int)+0x98>
c0012c05:	fb                   	sti    
c0012c06:	5b                   	pop    ebx
c0012c07:	5e                   	pop    esi
c0012c08:	5f                   	pop    edi
c0012c09:	c3                   	ret    
c0012c0a:	66 90                	xchg   ax,ax
c0012c0c:	5b                   	pop    ebx
c0012c0d:	31 c0                	xor    eax,eax
c0012c0f:	5e                   	pop    esi
c0012c10:	5f                   	pop    edi
c0012c11:	c3                   	ret    
c0012c12:	66 90                	xchg   ax,ax

c0012c14 <unblockTask(ThreadControlBlock*)>:
c0012c14:	53                   	push   ebx
c0012c15:	83 ec 08             	sub    esp,0x8
c0012c18:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012c1c:	fa                   	cli    
c0012c1d:	ff 05 c8 26 02 c0    	inc    DWORD PTR ds:0xc00226c8
c0012c23:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012c26:	85 c0                	test   eax,eax
c0012c28:	74 66                	je     c0012c90 <unblockTask(ThreadControlBlock*)+0x7c>
c0012c2a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012c2d:	48                   	dec    eax
c0012c2e:	74 38                	je     c0012c68 <unblockTask(ThreadControlBlock*)+0x54>
c0012c30:	83 ec 0c             	sub    esp,0xc
c0012c33:	68 e4 26 02 c0       	push   0xc00226e4
c0012c38:	e8 6f 8e 00 00       	call   c001baac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012c3d:	83 c4 10             	add    esp,0x10
c0012c40:	85 c0                	test   eax,eax
c0012c42:	75 1c                	jne    c0012c60 <unblockTask(ThreadControlBlock*)+0x4c>
c0012c44:	eb 5e                	jmp    c0012ca4 <unblockTask(ThreadControlBlock*)+0x90>
c0012c46:	66 90                	xchg   ax,ax
c0012c48:	83 ec 08             	sub    esp,0x8
c0012c4b:	50                   	push   eax
c0012c4c:	68 e4 26 02 c0       	push   0xc00226e4
c0012c51:	e8 06 92 00 00       	call   c001be5c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0012c56:	83 c4 10             	add    esp,0x10
c0012c59:	85 c0                	test   eax,eax
c0012c5b:	74 47                	je     c0012ca4 <unblockTask(ThreadControlBlock*)+0x90>
c0012c5d:	8d 76 00             	lea    esi,[esi+0x0]
c0012c60:	39 c3                	cmp    ebx,eax
c0012c62:	75 e4                	jne    c0012c48 <unblockTask(ThreadControlBlock*)+0x34>
c0012c64:	eb 12                	jmp    c0012c78 <unblockTask(ThreadControlBlock*)+0x64>
c0012c66:	66 90                	xchg   ax,ax
c0012c68:	83 ec 0c             	sub    esp,0xc
c0012c6b:	68 ff dd 01 c0       	push   0xc001ddff
c0012c70:	e8 37 6c ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c0012c75:	83 c4 10             	add    esp,0x10
c0012c78:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c0012c7d:	48                   	dec    eax
c0012c7e:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c0012c83:	75 03                	jne    c0012c88 <unblockTask(ThreadControlBlock*)+0x74>
c0012c85:	fb                   	sti    
c0012c86:	66 90                	xchg   ax,ax
c0012c88:	83 c4 08             	add    esp,0x8
c0012c8b:	5b                   	pop    ebx
c0012c8c:	c3                   	ret    
c0012c8d:	8d 76 00             	lea    esi,[esi+0x0]
c0012c90:	83 ec 0c             	sub    esp,0xc
c0012c93:	68 e8 dd 01 c0       	push   0xc001dde8
c0012c98:	e8 0f 6c ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c0012c9d:	83 c4 10             	add    esp,0x10
c0012ca0:	eb d6                	jmp    c0012c78 <unblockTask(ThreadControlBlock*)+0x64>
c0012ca2:	66 90                	xchg   ax,ax
c0012ca4:	83 ec 08             	sub    esp,0x8
c0012ca7:	53                   	push   ebx
c0012ca8:	68 e4 26 02 c0       	push   0xc00226e4
c0012cad:	e8 ba 8e 00 00       	call   c001bb6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012cb2:	83 c4 10             	add    esp,0x10
c0012cb5:	eb c1                	jmp    c0012c78 <unblockTask(ThreadControlBlock*)+0x64>
c0012cb7:	90                   	nop

c0012cb8 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0012cb8:	55                   	push   ebp
c0012cb9:	57                   	push   edi
c0012cba:	56                   	push   esi
c0012cbb:	53                   	push   ebx
c0012cbc:	83 ec 1c             	sub    esp,0x1c
c0012cbf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0012cc3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012cc6:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0012ccc:	85 ed                	test   ebp,ebp
c0012cce:	7e 24                	jle    c0012cf4 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0012cd0:	31 f6                	xor    esi,esi
c0012cd2:	66 90                	xchg   ax,ax
c0012cd4:	83 ec 0c             	sub    esp,0xc
c0012cd7:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0012cde:	46                   	inc    esi
c0012cdf:	57                   	push   edi
c0012ce0:	e8 48 3e ff ff       	call   c0006b2d <free>
c0012ce5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012ce8:	83 c4 10             	add    esp,0x10
c0012ceb:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0012cf1:	7f e1                	jg     c0012cd4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0012cf3:	90                   	nop
c0012cf4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0012cfe:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0012d03:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0012d06:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0012d09:	d3 c0                	rol    eax,cl
c0012d0b:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0012d12:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0012d15:	89 f7                	mov    edi,esi
c0012d17:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0012d1f:	0f 85 77 01 00 00    	jne    c0012e9c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0012d25:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0012d2b:	85 ed                	test   ebp,ebp
c0012d2d:	74 1d                	je     c0012d4c <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0012d2f:	83 ec 0c             	sub    esp,0xc
c0012d32:	55                   	push   ebp
c0012d33:	e8 68 c4 ff ff       	call   c000f1a0 <EnvVarContainer::~EnvVarContainer()>
c0012d38:	59                   	pop    ecx
c0012d39:	5e                   	pop    esi
c0012d3a:	6a 0c                	push   0xc
c0012d3c:	55                   	push   ebp
c0012d3d:	e8 74 6a ff ff       	call   c00097b6 <operator delete(void*, unsigned long)>
c0012d42:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0012d45:	83 c4 10             	add    esp,0x10
c0012d48:	89 f7                	mov    edi,esi
c0012d4a:	66 90                	xchg   ax,ax
c0012d4c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0012d52:	85 c0                	test   eax,eax
c0012d54:	0f 84 b6 00 00 00    	je     c0012e10 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0012d5a:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0012d5d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0012d61:	31 c9                	xor    ecx,ecx
c0012d63:	eb 17                	jmp    c0012d7c <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0012d65:	8d 76 00             	lea    esi,[esi+0x0]
c0012d68:	41                   	inc    ecx
c0012d69:	83 f9 10             	cmp    ecx,0x10
c0012d6c:	0f 84 9e 00 00 00    	je     c0012e10 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0012d72:	66 90                	xchg   ax,ax
c0012d74:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0012d7a:	66 90                	xchg   ax,ax
c0012d7c:	31 d2                	xor    edx,edx
c0012d7e:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0012d85:	d3 fa                	sar    edx,cl
c0012d87:	83 e2 01             	and    edx,0x1
c0012d8a:	74 dc                	je     c0012d68 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0012d8c:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0012d8f:	01 d2                	add    edx,edx
c0012d91:	01 ca                	add    edx,ecx
c0012d93:	8d 14 92             	lea    edx,[edx+edx*4]
c0012d96:	01 d0                	add    eax,edx
c0012d98:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0012d9e:	83 fd 07             	cmp    ebp,0x7
c0012da1:	75 c5                	jne    c0012d68 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0012da3:	05 40 02 00 00       	add    eax,0x240
c0012da8:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0012dab:	83 fd ff             	cmp    ebp,0xffffffff
c0012dae:	0f 8c f0 00 00 00    	jl     c0012ea4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0012db4:	0f 84 ae 01 00 00    	je     c0012f68 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0012dba:	85 ed                	test   ebp,ebp
c0012dbc:	0f 84 92 01 00 00    	je     c0012f54 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0012dc2:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0012dc4:	75 a2                	jne    c0012d68 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0012dc6:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0012dcc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0012dd0:	01 d0                	add    eax,edx
c0012dd2:	66 90                	xchg   ax,ax
c0012dd4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0012dd8:	83 ec 0c             	sub    esp,0xc
c0012ddb:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0012de1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012de4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012dea:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0012df1:	50                   	push   eax
c0012df2:	e8 1d fe ff ff       	call   c0012c14 <unblockTask(ThreadControlBlock*)>
c0012df7:	83 c4 10             	add    esp,0x10
c0012dfa:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0012dfd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012e01:	89 f7                	mov    edi,esi
c0012e03:	41                   	inc    ecx
c0012e04:	83 f9 10             	cmp    ecx,0x10
c0012e07:	0f 85 67 ff ff ff    	jne    c0012d74 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0012e0d:	8d 76 00             	lea    esi,[esi+0x0]
c0012e10:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0012e16:	85 c0                	test   eax,eax
c0012e18:	74 62                	je     c0012e7c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0012e1a:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0012e20:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0012e26:	74 54                	je     c0012e7c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0012e28:	83 ec 0c             	sub    esp,0xc
c0012e2b:	68 e4 26 02 c0       	push   0xc00226e4
c0012e30:	e8 77 8c 00 00       	call   c001baac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012e35:	c7 04 24 e4 26 02 c0 	mov    DWORD PTR [esp],0xc00226e4
c0012e3c:	89 c7                	mov    edi,eax
c0012e3e:	e8 4d 8c 00 00       	call   c001ba90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012e43:	83 c4 10             	add    esp,0x10
c0012e46:	84 c0                	test   al,al
c0012e48:	0f 84 ce 00 00 00    	je     c0012f1c <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0012e4e:	66 90                	xchg   ax,ax
c0012e50:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012e53:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0012e59:	85 d2                	test   edx,edx
c0012e5b:	74 0f                	je     c0012e6c <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0012e5d:	83 ec 0c             	sub    esp,0xc
c0012e60:	8b 02                	mov    eax,DWORD PTR [edx]
c0012e62:	52                   	push   edx
c0012e63:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012e66:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012e69:	83 c4 10             	add    esp,0x10
c0012e6c:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0012e76:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0012e79:	8d 76 00             	lea    esi,[esi+0x0]
c0012e7c:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0012e82:	85 db                	test   ebx,ebx
c0012e84:	74 16                	je     c0012e9c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0012e86:	83 ec 0c             	sub    esp,0xc
c0012e89:	53                   	push   ebx
c0012e8a:	e8 fb 5c ff ff       	call   c0008b8a <VAS::~VAS()>
c0012e8f:	58                   	pop    eax
c0012e90:	5a                   	pop    edx
c0012e91:	6a 14                	push   0x14
c0012e93:	53                   	push   ebx
c0012e94:	e8 1d 69 ff ff       	call   c00097b6 <operator delete(void*, unsigned long)>
c0012e99:	83 c4 10             	add    esp,0x10
c0012e9c:	83 c4 1c             	add    esp,0x1c
c0012e9f:	5b                   	pop    ebx
c0012ea0:	5e                   	pop    esi
c0012ea1:	5f                   	pop    edi
c0012ea2:	5d                   	pop    ebp
c0012ea3:	c3                   	ret    
c0012ea4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0012ea8:	83 ec 0c             	sub    esp,0xc
c0012eab:	68 b0 de 01 c0       	push   0xc001deb0
c0012eb0:	e8 46 c5 ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c0012eb5:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0012eb8:	83 c4 10             	add    esp,0x10
c0012ebb:	89 f7                	mov    edi,esi
c0012ebd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012ec1:	e9 a2 fe ff ff       	jmp    c0012d68 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0012ec6:	66 90                	xchg   ax,ax
c0012ec8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0012ece:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0012ed4:	75 1e                	jne    c0012ef4 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0012ed6:	83 ec 0c             	sub    esp,0xc
c0012ed9:	68 18 df 01 c0       	push   0xc001df18
c0012ede:	e8 c9 69 ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c0012ee3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0012eea:	e8 5d fa ff ff       	call   c001294c <blockTask(TaskState)>
c0012eef:	83 c4 10             	add    esp,0x10
c0012ef2:	66 90                	xchg   ax,ax
c0012ef4:	83 ec 08             	sub    esp,0x8
c0012ef7:	56                   	push   esi
c0012ef8:	68 e4 26 02 c0       	push   0xc00226e4
c0012efd:	e8 6a 8c 00 00       	call   c001bb6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012f02:	c7 04 24 e4 26 02 c0 	mov    DWORD PTR [esp],0xc00226e4
c0012f09:	e8 9e 8b 00 00       	call   c001baac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012f0e:	83 c4 10             	add    esp,0x10
c0012f11:	39 f8                	cmp    eax,edi
c0012f13:	0f 84 37 ff ff ff    	je     c0012e50 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0012f19:	8d 76 00             	lea    esi,[esi+0x0]
c0012f1c:	83 ec 0c             	sub    esp,0xc
c0012f1f:	68 e4 26 02 c0       	push   0xc00226e4
c0012f24:	e8 83 8b 00 00       	call   c001baac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012f29:	c7 04 24 e4 26 02 c0 	mov    DWORD PTR [esp],0xc00226e4
c0012f30:	89 c6                	mov    esi,eax
c0012f32:	e8 7d 8b 00 00       	call   c001bab4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012f37:	83 c4 10             	add    esp,0x10
c0012f3a:	39 f3                	cmp    ebx,esi
c0012f3c:	74 b6                	je     c0012ef4 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0012f3e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0012f41:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012f44:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0012f4a:	75 a8                	jne    c0012ef4 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0012f4c:	e9 77 ff ff ff       	jmp    c0012ec8 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0012f51:	8d 76 00             	lea    esi,[esi+0x0]
c0012f54:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0012f58:	83 ec 0c             	sub    esp,0xc
c0012f5b:	68 e4 de 01 c0       	push   0xc001dee4
c0012f60:	e9 4b ff ff ff       	jmp    c0012eb0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0012f65:	8d 76 00             	lea    esi,[esi+0x0]
c0012f68:	8b 36                	mov    esi,DWORD PTR [esi]
c0012f6a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0012f6e:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0012f71:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012f74:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0012f7a:	01 d7                	add    edi,edx
c0012f7c:	89 f8                	mov    eax,edi
c0012f7e:	e9 51 fe ff ff       	jmp    c0012dd4 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0012f83:	90                   	nop

c0012f84 <cleanerTaskFunction(void*)>:
c0012f84:	53                   	push   ebx
c0012f85:	83 ec 08             	sub    esp,0x8
c0012f88:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c0012f8d:	48                   	dec    eax
c0012f8e:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c0012f93:	75 03                	jne    c0012f98 <cleanerTaskFunction(void*)+0x14>
c0012f95:	fb                   	sti    
c0012f96:	66 90                	xchg   ax,ax
c0012f98:	fa                   	cli    
c0012f99:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c0012f9e:	80 3d ac 26 02 c0 00 	cmp    BYTE PTR ds:0xc00226ac,0x0
c0012fa5:	8d 50 01             	lea    edx,[eax+0x1]
c0012fa8:	89 15 c8 26 02 c0    	mov    DWORD PTR ds:0xc00226c8,edx
c0012fae:	0f 84 ac 00 00 00    	je     c0013060 <cleanerTaskFunction(void*)+0xdc>
c0012fb4:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c0012fb9:	85 c0                	test   eax,eax
c0012fbb:	75 03                	jne    c0012fc0 <cleanerTaskFunction(void*)+0x3c>
c0012fbd:	fb                   	sti    
c0012fbe:	66 90                	xchg   ax,ax
c0012fc0:	c6 05 ac 26 02 c0 00 	mov    BYTE PTR ds:0xc00226ac,0x0
c0012fc7:	fa                   	cli    
c0012fc8:	ff 05 c8 26 02 c0    	inc    DWORD PTR ds:0xc00226c8
c0012fce:	ff 05 c4 26 02 c0    	inc    DWORD PTR ds:0xc00226c4
c0012fd4:	fa                   	cli    
c0012fd5:	ff 05 c8 26 02 c0    	inc    DWORD PTR ds:0xc00226c8
c0012fdb:	eb 2b                	jmp    c0013008 <cleanerTaskFunction(void*)+0x84>
c0012fdd:	8d 76 00             	lea    esi,[esi+0x0]
c0012fe0:	83 ec 0c             	sub    esp,0xc
c0012fe3:	68 cc 26 02 c0       	push   0xc00226cc
c0012fe8:	e8 bf 8a 00 00       	call   c001baac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012fed:	c7 04 24 cc 26 02 c0 	mov    DWORD PTR [esp],0xc00226cc
c0012ff4:	89 c3                	mov    ebx,eax
c0012ff6:	e8 b9 8a 00 00       	call   c001bab4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012ffb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012ffe:	e8 b5 fc ff ff       	call   c0012cb8 <cleanupTerminatedTask(ThreadControlBlock*)>
c0013003:	83 c4 10             	add    esp,0x10
c0013006:	66 90                	xchg   ax,ax
c0013008:	83 ec 0c             	sub    esp,0xc
c001300b:	68 cc 26 02 c0       	push   0xc00226cc
c0013010:	e8 7b 8a 00 00       	call   c001ba90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013015:	83 c4 10             	add    esp,0x10
c0013018:	84 c0                	test   al,al
c001301a:	74 c4                	je     c0012fe0 <cleanerTaskFunction(void*)+0x5c>
c001301c:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c0013021:	48                   	dec    eax
c0013022:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c0013027:	75 03                	jne    c001302c <cleanerTaskFunction(void*)+0xa8>
c0013029:	fb                   	sti    
c001302a:	66 90                	xchg   ax,ax
c001302c:	a1 c4 26 02 c0       	mov    eax,ds:0xc00226c4
c0013031:	48                   	dec    eax
c0013032:	a3 c4 26 02 c0       	mov    ds:0xc00226c4,eax
c0013037:	0f 85 4b ff ff ff    	jne    c0012f88 <cleanerTaskFunction(void*)+0x4>
c001303d:	a1 c0 26 02 c0       	mov    eax,ds:0xc00226c0
c0013042:	85 c0                	test   eax,eax
c0013044:	0f 84 3e ff ff ff    	je     c0012f88 <cleanerTaskFunction(void*)+0x4>
c001304a:	c7 05 c0 26 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00226c0,0x0
c0013054:	e8 f7 f6 ff ff       	call   c0012750 <schedule()>
c0013059:	e9 2a ff ff ff       	jmp    c0012f88 <cleanerTaskFunction(void*)+0x4>
c001305e:	66 90                	xchg   ax,ax
c0013060:	83 ec 0c             	sub    esp,0xc
c0013063:	6a 02                	push   0x2
c0013065:	e8 ba f8 ff ff       	call   c0012924 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001306a:	83 c4 10             	add    esp,0x10
c001306d:	e9 4e ff ff ff       	jmp    c0012fc0 <cleanerTaskFunction(void*)+0x3c>
c0013072:	66 90                	xchg   ax,ax

c0013074 <terminateTask(int)>:
c0013074:	83 ec 14             	sub    esp,0x14
c0013077:	fa                   	cli    
c0013078:	ff 05 c8 26 02 c0    	inc    DWORD PTR ds:0xc00226c8
c001307e:	ff 05 c4 26 02 c0    	inc    DWORD PTR ds:0xc00226c4
c0013084:	fa                   	cli    
c0013085:	ff 05 c8 26 02 c0    	inc    DWORD PTR ds:0xc00226c8
c001308b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001308f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013094:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0013097:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001309c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001309f:	50                   	push   eax
c00130a0:	68 cc 26 02 c0       	push   0xc00226cc
c00130a5:	e8 c2 8a 00 00       	call   c001bb6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00130aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00130af:	83 c4 10             	add    esp,0x10
c00130b2:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00130b9:	a1 a8 26 02 c0       	mov    eax,ds:0xc00226a8
c00130be:	85 c0                	test   eax,eax
c00130c0:	74 5e                	je     c0013120 <terminateTask(int)+0xac>
c00130c2:	83 ec 0c             	sub    esp,0xc
c00130c5:	c6 05 ac 26 02 c0 01 	mov    BYTE PTR ds:0xc00226ac,0x1
c00130cc:	50                   	push   eax
c00130cd:	e8 42 fb ff ff       	call   c0012c14 <unblockTask(ThreadControlBlock*)>
c00130d2:	83 c4 10             	add    esp,0x10
c00130d5:	8d 76 00             	lea    esi,[esi+0x0]
c00130d8:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c00130dd:	48                   	dec    eax
c00130de:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c00130e3:	75 03                	jne    c00130e8 <terminateTask(int)+0x74>
c00130e5:	fb                   	sti    
c00130e6:	66 90                	xchg   ax,ax
c00130e8:	a1 c4 26 02 c0       	mov    eax,ds:0xc00226c4
c00130ed:	48                   	dec    eax
c00130ee:	a3 c4 26 02 c0       	mov    ds:0xc00226c4,eax
c00130f3:	75 0b                	jne    c0013100 <terminateTask(int)+0x8c>
c00130f5:	83 3d c0 26 02 c0 00 	cmp    DWORD PTR ds:0xc00226c0,0x0
c00130fc:	75 36                	jne    c0013134 <terminateTask(int)+0xc0>
c00130fe:	66 90                	xchg   ax,ax
c0013100:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c0013105:	48                   	dec    eax
c0013106:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c001310b:	75 03                	jne    c0013110 <terminateTask(int)+0x9c>
c001310d:	fb                   	sti    
c001310e:	66 90                	xchg   ax,ax
c0013110:	fa                   	cli    
c0013111:	ff 05 c8 26 02 c0    	inc    DWORD PTR ds:0xc00226c8
c0013117:	90                   	nop
c0013118:	e8 33 f6 ff ff       	call   c0012750 <schedule()>
c001311d:	eb e1                	jmp    c0013100 <terminateTask(int)+0x8c>
c001311f:	90                   	nop
c0013120:	83 ec 0c             	sub    esp,0xc
c0013123:	68 16 de 01 c0       	push   0xc001de16
c0013128:	e8 7f 67 ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c001312d:	83 c4 10             	add    esp,0x10
c0013130:	eb a6                	jmp    c00130d8 <terminateTask(int)+0x64>
c0013132:	66 90                	xchg   ax,ax
c0013134:	c7 05 c0 26 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00226c0,0x0
c001313e:	eb d8                	jmp    c0013118 <terminateTask(int)+0xa4>

c0013140 <Thr::terminateFromIRQ(int)>:
c0013140:	83 ec 18             	sub    esp,0x18
c0013143:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013147:	50                   	push   eax
c0013148:	e8 27 ff ff ff       	call   c0013074 <terminateTask(int)>
c001314d:	90                   	nop
c001314e:	66 90                	xchg   ax,ax

c0013150 <Semaphore::release()>:
c0013150:	83 ec 0c             	sub    esp,0xc
c0013153:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013157:	fa                   	cli    
c0013158:	a1 c4 26 02 c0       	mov    eax,ds:0xc00226c4
c001315d:	ff 05 c8 26 02 c0    	inc    DWORD PTR ds:0xc00226c8
c0013163:	8d 48 01             	lea    ecx,[eax+0x1]
c0013166:	89 0d c4 26 02 c0    	mov    DWORD PTR ds:0xc00226c4,ecx
c001316c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001316f:	85 c9                	test   ecx,ecx
c0013171:	74 41                	je     c00131b4 <Semaphore::release()+0x64>
c0013173:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0013176:	83 ec 0c             	sub    esp,0xc
c0013179:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001317c:	51                   	push   ecx
c001317d:	e8 92 fa ff ff       	call   c0012c14 <unblockTask(ThreadControlBlock*)>
c0013182:	a1 c4 26 02 c0       	mov    eax,ds:0xc00226c4
c0013187:	83 c4 10             	add    esp,0x10
c001318a:	48                   	dec    eax
c001318b:	90                   	nop
c001318c:	a3 c4 26 02 c0       	mov    ds:0xc00226c4,eax
c0013191:	85 c0                	test   eax,eax
c0013193:	75 0b                	jne    c00131a0 <Semaphore::release()+0x50>
c0013195:	a1 c0 26 02 c0       	mov    eax,ds:0xc00226c0
c001319a:	85 c0                	test   eax,eax
c001319c:	75 1e                	jne    c00131bc <Semaphore::release()+0x6c>
c001319e:	66 90                	xchg   ax,ax
c00131a0:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c00131a5:	48                   	dec    eax
c00131a6:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c00131ab:	75 03                	jne    c00131b0 <Semaphore::release()+0x60>
c00131ad:	fb                   	sti    
c00131ae:	66 90                	xchg   ax,ax
c00131b0:	83 c4 0c             	add    esp,0xc
c00131b3:	c3                   	ret    
c00131b4:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c00131b7:	eb d3                	jmp    c001318c <Semaphore::release()+0x3c>
c00131b9:	8d 76 00             	lea    esi,[esi+0x0]
c00131bc:	c7 05 c0 26 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00226c0,0x0
c00131c6:	e8 85 f5 ff ff       	call   c0012750 <schedule()>
c00131cb:	eb d3                	jmp    c00131a0 <Semaphore::release()+0x50>
c00131cd:	8d 76 00             	lea    esi,[esi+0x0]

c00131d0 <__static_initialization_and_destruction_0(int, int)>:
c00131d0:	83 ec 0c             	sub    esp,0xc
c00131d3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00131d8:	0f 85 8e 00 00 00    	jne    c001326c <__static_initialization_and_destruction_0(int, int)+0x9c>
c00131de:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00131e6:	0f 85 80 00 00 00    	jne    c001326c <__static_initialization_and_destruction_0(int, int)+0x9c>
c00131ec:	83 ec 0c             	sub    esp,0xc
c00131ef:	68 e4 26 02 c0       	push   0xc00226e4
c00131f4:	e8 1f 8c 00 00       	call   c001be18 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00131f9:	83 c4 10             	add    esp,0x10
c00131fc:	83 ec 04             	sub    esp,0x4
c00131ff:	68 d0 e9 01 c0       	push   0xc001e9d0
c0013204:	68 e4 26 02 c0       	push   0xc00226e4
c0013209:	68 c8 bd 01 c0       	push   0xc001bdc8
c001320e:	e8 53 65 ff ff       	call   c0009766 <__cxa_atexit>
c0013213:	83 c4 10             	add    esp,0x10
c0013216:	83 ec 0c             	sub    esp,0xc
c0013219:	68 d8 26 02 c0       	push   0xc00226d8
c001321e:	e8 f5 8b 00 00       	call   c001be18 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013223:	83 c4 10             	add    esp,0x10
c0013226:	83 ec 04             	sub    esp,0x4
c0013229:	68 d0 e9 01 c0       	push   0xc001e9d0
c001322e:	68 d8 26 02 c0       	push   0xc00226d8
c0013233:	68 c8 bd 01 c0       	push   0xc001bdc8
c0013238:	e8 29 65 ff ff       	call   c0009766 <__cxa_atexit>
c001323d:	83 c4 10             	add    esp,0x10
c0013240:	83 ec 0c             	sub    esp,0xc
c0013243:	68 cc 26 02 c0       	push   0xc00226cc
c0013248:	e8 cb 8b 00 00       	call   c001be18 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001324d:	83 c4 10             	add    esp,0x10
c0013250:	83 ec 04             	sub    esp,0x4
c0013253:	68 d0 e9 01 c0       	push   0xc001e9d0
c0013258:	68 cc 26 02 c0       	push   0xc00226cc
c001325d:	68 c8 bd 01 c0       	push   0xc001bdc8
c0013262:	e8 ff 64 ff ff       	call   c0009766 <__cxa_atexit>
c0013267:	83 c4 10             	add    esp,0x10
c001326a:	66 90                	xchg   ax,ax
c001326c:	90                   	nop
c001326d:	83 c4 0c             	add    esp,0xc
c0013270:	c3                   	ret    
c0013271:	8d 76 00             	lea    esi,[esi+0x0]

c0013274 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0013274:	83 ec 0c             	sub    esp,0xc
c0013277:	83 ec 08             	sub    esp,0x8
c001327a:	68 ff ff 00 00       	push   0xffff
c001327f:	6a 01                	push   0x1
c0013281:	e8 4a ff ff ff       	call   c00131d0 <__static_initialization_and_destruction_0(int, int)>
c0013286:	83 c4 10             	add    esp,0x10
c0013289:	83 c4 0c             	add    esp,0xc
c001328c:	c3                   	ret    

c001328d <Vm::inbv(unsigned short)>:
c001328d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013291:	66 81 fa fe fe       	cmp    dx,0xfefe
c0013296:	75 06                	jne    c001329e <Vm::inbv(unsigned short)+0x11>
c0013298:	a0 2c 27 02 c0       	mov    al,ds:0xc002272c
c001329d:	c3                   	ret    
c001329e:	ec                   	in     al,dx
c001329f:	c3                   	ret    

c00132a0 <Vm::outbv(unsigned short, unsigned char)>:
c00132a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00132a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00132a8:	66 81 fa fe fe       	cmp    dx,0xfefe
c00132ad:	75 25                	jne    c00132d4 <Vm::outbv(unsigned short, unsigned char)+0x34>
c00132af:	8b 0d 2c 27 02 c0    	mov    ecx,DWORD PTR ds:0xc002272c
c00132b5:	8d 51 01             	lea    edx,[ecx+0x1]
c00132b8:	88 81 40 27 02 c0    	mov    BYTE PTR [ecx-0x3ffdd8c0],al
c00132be:	89 15 2c 27 02 c0    	mov    DWORD PTR ds:0xc002272c,edx
c00132c4:	83 fa 20             	cmp    edx,0x20
c00132c7:	75 0c                	jne    c00132d5 <Vm::outbv(unsigned short, unsigned char)+0x35>
c00132c9:	c7 05 2c 27 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002272c,0x1f
c00132d3:	c3                   	ret    
c00132d4:	ee                   	out    dx,al
c00132d5:	c3                   	ret    

c00132d6 <Vm::realToLinear(unsigned short, unsigned short)>:
c00132d6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00132db:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00132e0:	c1 e0 04             	shl    eax,0x4
c00132e3:	01 d0                	add    eax,edx
c00132e5:	c3                   	ret    

c00132e6 <Vm::getSegment(unsigned int)>:
c00132e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132ea:	c1 e8 10             	shr    eax,0x10
c00132ed:	c3                   	ret    

c00132ee <Vm::getOffset(unsigned int)>:
c00132ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132f2:	c3                   	ret    

c00132f3 <Vm::mainloop2()>:
c00132f3:	83 ec 18             	sub    esp,0x18
c00132f6:	fa                   	cli    
c00132f7:	ff 05 c8 26 02 c0    	inc    DWORD PTR ds:0xc00226c8
c00132fd:	6a 02                	push   0x2
c00132ff:	c6 05 25 27 02 c0 01 	mov    BYTE PTR ds:0xc0022725,0x1
c0013306:	e8 19 f6 ff ff       	call   c0012924 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001330b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013310:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0013314:	52                   	push   edx
c0013315:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0013319:	52                   	push   edx
c001331a:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c001331e:	52                   	push   edx
c001331f:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0013323:	50                   	push   eax
c0013324:	e8 06 cf fe ff       	call   c000022f <goToVM86>
c0013329:	83 c4 2c             	add    esp,0x2c
c001332c:	c3                   	ret    

c001332d <Vm::mainVm8086Loop(void*)>:
c001332d:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c0013332:	48                   	dec    eax
c0013333:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c0013338:	75 01                	jne    c001333b <Vm::mainVm8086Loop(void*)+0xe>
c001333a:	fb                   	sti    
c001333b:	eb b6                	jmp    c00132f3 <Vm::mainloop2()>

c001333d <Vm::mainloop3(unsigned long)>:
c001333d:	83 ec 18             	sub    esp,0x18
c0013340:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013344:	fa                   	cli    
c0013345:	ff 05 c8 26 02 c0    	inc    DWORD PTR ds:0xc00226c8
c001334b:	6a 02                	push   0x2
c001334d:	c6 05 24 27 02 c0 01 	mov    BYTE PTR ds:0xc0022724,0x1
c0013354:	a3 20 27 02 c0       	mov    ds:0xc0022720,eax
c0013359:	e8 c6 f5 ff ff       	call   c0012924 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001335e:	83 c4 1c             	add    esp,0x1c
c0013361:	eb 90                	jmp    c00132f3 <Vm::mainloop2()>

c0013363 <Vm::initialise8086()>:
c0013363:	83 ec 0c             	sub    esp,0xc
c0013366:	68 80 00 00 00       	push   0x80
c001336b:	6a 00                	push   0x0
c001336d:	68 2d 33 01 c0       	push   0xc001332d
c0013372:	ff 35 f0 26 02 c0    	push   DWORD PTR ds:0xc00226f0
c0013378:	e8 b3 f1 ff ff       	call   c0012530 <Process::createThread(void (*)(void*), void*, int)>
c001337d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0013384:	a3 28 27 02 c0       	mov    ds:0xc0022728,eax
c0013389:	68 00 01 00 00       	push   0x100
c001338e:	a1 f0 26 02 c0       	mov    eax,ds:0xc00226f0
c0013393:	6a 00                	push   0x0
c0013395:	6a 00                	push   0x0
c0013397:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001339d:	e8 46 5c ff ff       	call   c0008fe8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00133a2:	83 c4 2c             	add    esp,0x2c
c00133a5:	c3                   	ret    

c00133a6 <Vm::finish8086()>:
c00133a6:	53                   	push   ebx
c00133a7:	83 ec 08             	sub    esp,0x8
c00133aa:	fa                   	cli    
c00133ab:	ff 05 c8 26 02 c0    	inc    DWORD PTR ds:0xc00226c8
c00133b1:	80 3d 24 27 02 c0 00 	cmp    BYTE PTR ds:0xc0022724,0x0
c00133b8:	75 15                	jne    c00133cf <Vm::finish8086()+0x29>
c00133ba:	e8 91 f3 ff ff       	call   c0012750 <schedule()>
c00133bf:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c00133c4:	48                   	dec    eax
c00133c5:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c00133ca:	75 de                	jne    c00133aa <Vm::finish8086()+0x4>
c00133cc:	fb                   	sti    
c00133cd:	eb db                	jmp    c00133aa <Vm::finish8086()+0x4>
c00133cf:	83 ec 0c             	sub    esp,0xc
c00133d2:	8b 1d 20 27 02 c0    	mov    ebx,DWORD PTR ds:0xc0022720
c00133d8:	ff 35 28 27 02 c0    	push   DWORD PTR ds:0xc0022728
c00133de:	c6 05 24 27 02 c0 00 	mov    BYTE PTR ds:0xc0022724,0x0
c00133e5:	e8 2a f8 ff ff       	call   c0012c14 <unblockTask(ThreadControlBlock*)>
c00133ea:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c00133ef:	83 c4 10             	add    esp,0x10
c00133f2:	8d 50 ff             	lea    edx,[eax-0x1]
c00133f5:	89 15 c8 26 02 c0    	mov    DWORD PTR ds:0xc00226c8,edx
c00133fb:	85 d2                	test   edx,edx
c00133fd:	75 01                	jne    c0013400 <Vm::finish8086()+0x5a>
c00133ff:	fb                   	sti    
c0013400:	89 d8                	mov    eax,ebx
c0013402:	83 c4 08             	add    esp,0x8
c0013405:	5b                   	pop    ebx
c0013406:	c3                   	ret    

c0013407 <Vm::getOutput8086(unsigned char*)>:
c0013407:	57                   	push   edi
c0013408:	8b 0d 2c 27 02 c0    	mov    ecx,DWORD PTR ds:0xc002272c
c001340e:	56                   	push   esi
c001340f:	be 40 27 02 c0       	mov    esi,0xc0022740
c0013414:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013418:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001341a:	a1 2c 27 02 c0       	mov    eax,ds:0xc002272c
c001341f:	5e                   	pop    esi
c0013420:	c7 05 2c 27 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002272c,0x0
c001342a:	5f                   	pop    edi
c001342b:	c3                   	ret    

c001342c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001342c:	55                   	push   ebp
c001342d:	57                   	push   edi
c001342e:	56                   	push   esi
c001342f:	53                   	push   ebx
c0013430:	83 ec 0c             	sub    esp,0xc
c0013433:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013437:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001343b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001343f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0013443:	fa                   	cli    
c0013444:	ff 05 c8 26 02 c0    	inc    DWORD PTR ds:0xc00226c8
c001344a:	80 3d 25 27 02 c0 00 	cmp    BYTE PTR ds:0xc0022725,0x0
c0013451:	75 15                	jne    c0013468 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0013453:	e8 f8 f2 ff ff       	call   c0012750 <schedule()>
c0013458:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c001345d:	48                   	dec    eax
c001345e:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c0013463:	75 de                	jne    c0013443 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0013465:	fb                   	sti    
c0013466:	eb db                	jmp    c0013443 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0013468:	a1 28 27 02 c0       	mov    eax,ds:0xc0022728
c001346d:	c7 05 2c 27 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002272c,0x0
c0013477:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001347b:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001347f:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0013483:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0013487:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001348b:	0f b7 ff             	movzx  edi,di
c001348e:	0f b7 f6             	movzx  esi,si
c0013491:	50                   	push   eax
c0013492:	6a 20                	push   0x20
c0013494:	6a 00                	push   0x0
c0013496:	68 40 27 02 c0       	push   0xc0022740
c001349b:	e8 50 d0 fe ff       	call   c00004f0 <memset>
c00134a0:	5a                   	pop    edx
c00134a1:	59                   	pop    ecx
c00134a2:	57                   	push   edi
c00134a3:	56                   	push   esi
c00134a4:	e8 2d fe ff ff       	call   c00132d6 <Vm::realToLinear(unsigned short, unsigned short)>
c00134a9:	83 c4 10             	add    esp,0x10
c00134ac:	89 c7                	mov    edi,eax
c00134ae:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00134b2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00134b6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00134b8:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c00134bd:	c6 05 25 27 02 c0 00 	mov    BYTE PTR ds:0xc0022725,0x0
c00134c4:	48                   	dec    eax
c00134c5:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c00134ca:	75 01                	jne    c00134cd <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00134cc:	fb                   	sti    
c00134cd:	83 ec 0c             	sub    esp,0xc
c00134d0:	ff 35 28 27 02 c0    	push   DWORD PTR ds:0xc0022728
c00134d6:	e8 39 f7 ff ff       	call   c0012c14 <unblockTask(ThreadControlBlock*)>
c00134db:	83 c4 1c             	add    esp,0x1c
c00134de:	b0 01                	mov    al,0x1
c00134e0:	5b                   	pop    ebx
c00134e1:	5e                   	pop    esi
c00134e2:	5f                   	pop    edi
c00134e3:	5d                   	pop    ebp
c00134e4:	c3                   	ret    

c00134e5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00134e5:	55                   	push   ebp
c00134e6:	57                   	push   edi
c00134e7:	56                   	push   esi
c00134e8:	53                   	push   ebx
c00134e9:	83 ec 2c             	sub    esp,0x2c
c00134ec:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00134f0:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00134f4:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00134f8:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00134fc:	fa                   	cli    
c00134fd:	ff 05 c8 26 02 c0    	inc    DWORD PTR ds:0xc00226c8
c0013503:	0f b6 35 25 27 02 c0 	movzx  esi,BYTE PTR ds:0xc0022725
c001350a:	89 f0                	mov    eax,esi
c001350c:	84 c0                	test   al,al
c001350e:	75 1d                	jne    c001352d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0013510:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013514:	e8 37 f2 ff ff       	call   c0012750 <schedule()>
c0013519:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c001351e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013522:	48                   	dec    eax
c0013523:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c0013528:	75 d2                	jne    c00134fc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001352a:	fb                   	sti    
c001352b:	eb cf                	jmp    c00134fc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001352d:	a1 28 27 02 c0       	mov    eax,ds:0xc0022728
c0013532:	c7 05 2c 27 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002272c,0x0
c001353c:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0013540:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0013544:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0013548:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c001354c:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0013550:	50                   	push   eax
c0013551:	6a 20                	push   0x20
c0013553:	6a 00                	push   0x0
c0013555:	68 40 27 02 c0       	push   0xc0022740
c001355a:	e8 91 cf fe ff       	call   c00004f0 <memset>
c001355f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013566:	e8 b2 35 ff ff       	call   c0006b1d <malloc>
c001356b:	83 c4 0c             	add    esp,0xc
c001356e:	89 c3                	mov    ebx,eax
c0013570:	ff 35 f0 26 02 c0    	push   DWORD PTR ds:0xc00226f0
c0013576:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001357a:	50                   	push   eax
c001357b:	e8 a2 68 ff ff       	call   c0009e22 <File::File(char const*, Process*)>
c0013580:	83 c4 10             	add    esp,0x10
c0013583:	85 db                	test   ebx,ebx
c0013585:	75 0a                	jne    c0013591 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0013587:	83 ec 0c             	sub    esp,0xc
c001358a:	68 40 df 01 c0       	push   0xc001df40
c001358f:	eb 3e                	jmp    c00135cf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0013591:	50                   	push   eax
c0013592:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013596:	50                   	push   eax
c0013597:	8d 44 24 20          	lea    eax,[esp+0x20]
c001359b:	50                   	push   eax
c001359c:	53                   	push   ebx
c001359d:	e8 ec 6b ff ff       	call   c000a18e <File::stat(unsigned long long*, bool*)>
c00135a2:	83 c4 10             	add    esp,0x10
c00135a5:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00135aa:	74 0a                	je     c00135b6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c00135ac:	83 ec 0c             	sub    esp,0xc
c00135af:	68 54 df 01 c0       	push   0xc001df54
c00135b4:	eb 19                	jmp    c00135cf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00135b6:	51                   	push   ecx
c00135b7:	51                   	push   ecx
c00135b8:	6a 01                	push   0x1
c00135ba:	53                   	push   ebx
c00135bb:	e8 22 69 ff ff       	call   c0009ee2 <File::open(FileOpenMode)>
c00135c0:	83 c4 10             	add    esp,0x10
c00135c3:	85 c0                	test   eax,eax
c00135c5:	74 24                	je     c00135eb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c00135c7:	83 ec 0c             	sub    esp,0xc
c00135ca:	68 6d df 01 c0       	push   0xc001df6d
c00135cf:	e8 27 be ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c00135d4:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c00135d9:	83 c4 10             	add    esp,0x10
c00135dc:	48                   	dec    eax
c00135dd:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c00135e2:	85 c0                	test   eax,eax
c00135e4:	75 01                	jne    c00135e7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c00135e6:	fb                   	sti    
c00135e7:	31 f6                	xor    esi,esi
c00135e9:	eb 58                	jmp    c0013643 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c00135eb:	0f b7 ed             	movzx  ebp,bp
c00135ee:	50                   	push   eax
c00135ef:	0f b7 ff             	movzx  edi,di
c00135f2:	50                   	push   eax
c00135f3:	55                   	push   ebp
c00135f4:	57                   	push   edi
c00135f5:	e8 dc fc ff ff       	call   c00132d6 <Vm::realToLinear(unsigned short, unsigned short)>
c00135fa:	5a                   	pop    edx
c00135fb:	8b 13                	mov    edx,DWORD PTR [ebx]
c00135fd:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0013601:	51                   	push   ecx
c0013602:	50                   	push   eax
c0013603:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013607:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001360b:	53                   	push   ebx
c001360c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001360f:	83 c4 14             	add    esp,0x14
c0013612:	53                   	push   ebx
c0013613:	e8 28 69 ff ff       	call   c0009f40 <File::close()>
c0013618:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c001361d:	83 c4 10             	add    esp,0x10
c0013620:	48                   	dec    eax
c0013621:	c6 05 25 27 02 c0 00 	mov    BYTE PTR ds:0xc0022725,0x0
c0013628:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c001362d:	85 c0                	test   eax,eax
c001362f:	75 01                	jne    c0013632 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0013631:	fb                   	sti    
c0013632:	83 ec 0c             	sub    esp,0xc
c0013635:	ff 35 28 27 02 c0    	push   DWORD PTR ds:0xc0022728
c001363b:	e8 d4 f5 ff ff       	call   c0012c14 <unblockTask(ThreadControlBlock*)>
c0013640:	83 c4 10             	add    esp,0x10
c0013643:	83 c4 2c             	add    esp,0x2c
c0013646:	89 f0                	mov    eax,esi
c0013648:	5b                   	pop    ebx
c0013649:	5e                   	pop    esi
c001364a:	5f                   	pop    edi
c001364b:	5d                   	pop    ebp
c001364c:	c3                   	ret    

c001364d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001364d:	57                   	push   edi
c001364e:	56                   	push   esi
c001364f:	53                   	push   ebx
c0013650:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013654:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013658:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001365c:	83 e8 06             	sub    eax,0x6
c001365f:	0f b7 c0             	movzx  eax,ax
c0013662:	50                   	push   eax
c0013663:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0013668:	50                   	push   eax
c0013669:	e8 68 fc ff ff       	call   c00132d6 <Vm::realToLinear(unsigned short, unsigned short)>
c001366e:	5a                   	pop    edx
c001366f:	5e                   	pop    esi
c0013670:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0013673:	8d 56 fa             	lea    edx,[esi-0x6]
c0013676:	81 e2 ff ff 00 00    	and    edx,0xffff
c001367c:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001367f:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0013682:	83 c2 02             	add    edx,0x2
c0013685:	66 89 10             	mov    WORD PTR [eax],dx
c0013688:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001368b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001368f:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0013692:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0013696:	89 d6                	mov    esi,edx
c0013698:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001369e:	66 81 e6 ff fd       	and    si,0xfdff
c00136a3:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c00136a7:	74 07                	je     c00136b0 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00136a9:	89 d6                	mov    esi,edx
c00136ab:	66 81 ce 00 02       	or     si,0x200
c00136b0:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00136b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136b9:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00136bd:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c00136c5:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00136c8:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c00136d0:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00136d3:	5b                   	pop    ebx
c00136d4:	5e                   	pop    esi
c00136d5:	5f                   	pop    edi
c00136d6:	c3                   	ret    

c00136d7 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00136d7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00136dc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00136e1:	c1 e0 04             	shl    eax,0x4
c00136e4:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00136e7:	c3                   	ret    

c00136e8 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00136e8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00136ed:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00136f2:	c1 e0 04             	shl    eax,0x4
c00136f5:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00136f9:	c3                   	ret    

c00136fa <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00136fa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00136ff:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013704:	c1 e0 04             	shl    eax,0x4
c0013707:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001370a:	c3                   	ret    

c001370b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001370b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013710:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013715:	c1 e0 04             	shl    eax,0x4
c0013718:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001371c:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001371f:	c3                   	ret    

c0013720 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0013720:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013725:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001372a:	c1 e0 04             	shl    eax,0x4
c001372d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013731:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0013735:	c3                   	ret    

c0013736 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0013736:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001373b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013740:	c1 e0 04             	shl    eax,0x4
c0013743:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013747:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001374a:	c3                   	ret    

c001374b <Vm::faultHandler(regs*)>:
c001374b:	55                   	push   ebp
c001374c:	57                   	push   edi
c001374d:	56                   	push   esi
c001374e:	53                   	push   ebx
c001374f:	83 ec 1c             	sub    esp,0x1c
c0013752:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013756:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013759:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001375d:	0f b7 f8             	movzx  edi,ax
c0013760:	52                   	push   edx
c0013761:	0f b7 c0             	movzx  eax,ax
c0013764:	50                   	push   eax
c0013765:	e8 6c fb ff ff       	call   c00132d6 <Vm::realToLinear(unsigned short, unsigned short)>
c001376a:	5a                   	pop    edx
c001376b:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001376e:	59                   	pop    ecx
c001376f:	89 c1                	mov    ecx,eax
c0013771:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0013774:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013778:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001377d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013781:	0f b7 c5             	movzx  eax,bp
c0013784:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013788:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001378c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013790:	e8 41 fb ff ff       	call   c00132d6 <Vm::realToLinear(unsigned short, unsigned short)>
c0013795:	5e                   	pop    esi
c0013796:	be 06 00 00 00       	mov    esi,0x6
c001379b:	5a                   	pop    edx
c001379c:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00137a1:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00137a6:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00137a9:	80 fa 9d             	cmp    dl,0x9d
c00137ac:	0f 84 2c 02 00 00    	je     c00139de <Vm::faultHandler(regs*)+0x293>
c00137b2:	0f 87 91 00 00 00    	ja     c0013849 <Vm::faultHandler(regs*)+0xfe>
c00137b8:	80 fa 66             	cmp    dl,0x66
c00137bb:	0f 84 98 01 00 00    	je     c0013959 <Vm::faultHandler(regs*)+0x20e>
c00137c1:	77 47                	ja     c001380a <Vm::faultHandler(regs*)+0xbf>
c00137c3:	80 fa 36             	cmp    dl,0x36
c00137c6:	0f 84 80 01 00 00    	je     c001394c <Vm::faultHandler(regs*)+0x201>
c00137cc:	77 1a                	ja     c00137e8 <Vm::faultHandler(regs*)+0x9d>
c00137ce:	80 fa 26             	cmp    dl,0x26
c00137d1:	0f 84 4e 01 00 00    	je     c0013925 <Vm::faultHandler(regs*)+0x1da>
c00137d7:	80 fa 2e             	cmp    dl,0x2e
c00137da:	0f 85 e2 05 00 00    	jne    c0013dc2 <Vm::faultHandler(regs*)+0x677>
c00137e0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00137e3:	31 f6                	xor    esi,esi
c00137e5:	41                   	inc    ecx
c00137e6:	eb be                	jmp    c00137a6 <Vm::faultHandler(regs*)+0x5b>
c00137e8:	80 fa 64             	cmp    dl,0x64
c00137eb:	0f 84 41 01 00 00    	je     c0013932 <Vm::faultHandler(regs*)+0x1e7>
c00137f1:	0f 87 48 01 00 00    	ja     c001393f <Vm::faultHandler(regs*)+0x1f4>
c00137f7:	80 fa 3e             	cmp    dl,0x3e
c00137fa:	0f 85 c2 05 00 00    	jne    c0013dc2 <Vm::faultHandler(regs*)+0x677>
c0013800:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013803:	be 01 00 00 00       	mov    esi,0x1
c0013808:	eb db                	jmp    c00137e5 <Vm::faultHandler(regs*)+0x9a>
c001380a:	80 fa 6d             	cmp    dl,0x6d
c001380d:	0f 84 ec 02 00 00    	je     c0013aff <Vm::faultHandler(regs*)+0x3b4>
c0013813:	77 17                	ja     c001382c <Vm::faultHandler(regs*)+0xe1>
c0013815:	80 fa 67             	cmp    dl,0x67
c0013818:	0f 84 48 01 00 00    	je     c0013966 <Vm::faultHandler(regs*)+0x21b>
c001381e:	80 fa 6c             	cmp    dl,0x6c
c0013821:	0f 84 69 02 00 00    	je     c0013a90 <Vm::faultHandler(regs*)+0x345>
c0013827:	e9 96 05 00 00       	jmp    c0013dc2 <Vm::faultHandler(regs*)+0x677>
c001382c:	80 fa 6f             	cmp    dl,0x6f
c001382f:	0f 84 f4 03 00 00    	je     c0013c29 <Vm::faultHandler(regs*)+0x4de>
c0013835:	0f 82 59 03 00 00    	jb     c0013b94 <Vm::faultHandler(regs*)+0x449>
c001383b:	80 fa 9c             	cmp    dl,0x9c
c001383e:	0f 84 2f 01 00 00    	je     c0013973 <Vm::faultHandler(regs*)+0x228>
c0013844:	e9 79 05 00 00       	jmp    c0013dc2 <Vm::faultHandler(regs*)+0x677>
c0013849:	80 fa ec             	cmp    dl,0xec
c001384c:	0f 84 14 05 00 00    	je     c0013d66 <Vm::faultHandler(regs*)+0x61b>
c0013852:	77 7b                	ja     c00138cf <Vm::faultHandler(regs*)+0x184>
c0013854:	80 fa e4             	cmp    dl,0xe4
c0013857:	0f 84 93 04 00 00    	je     c0013cf0 <Vm::faultHandler(regs*)+0x5a5>
c001385d:	77 53                	ja     c00138b2 <Vm::faultHandler(regs*)+0x167>
c001385f:	80 fa cd             	cmp    dl,0xcd
c0013862:	0f 84 d9 01 00 00    	je     c0013a41 <Vm::faultHandler(regs*)+0x2f6>
c0013868:	80 fa cf             	cmp    dl,0xcf
c001386b:	0f 85 51 05 00 00    	jne    c0013dc2 <Vm::faultHandler(regs*)+0x677>
c0013871:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0013874:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0013877:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001387b:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001387e:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0013882:	81 ca 00 02 02 00    	or     edx,0x20200
c0013888:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001388b:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001388f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013895:	66 c1 e8 09          	shr    ax,0x9
c0013899:	83 e0 01             	and    eax,0x1
c001389c:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001389f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00138a2:	83 c0 06             	add    eax,0x6
c00138a5:	25 ff ff 00 00       	and    eax,0xffff
c00138aa:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00138ad:	e9 0c 05 00 00       	jmp    c0013dbe <Vm::faultHandler(regs*)+0x673>
c00138b2:	80 fa e6             	cmp    dl,0xe6
c00138b5:	0f 84 7f 04 00 00    	je     c0013d3a <Vm::faultHandler(regs*)+0x5ef>
c00138bb:	0f 82 4b 04 00 00    	jb     c0013d0c <Vm::faultHandler(regs*)+0x5c1>
c00138c1:	80 fa e7             	cmp    dl,0xe7
c00138c4:	0f 84 87 04 00 00    	je     c0013d51 <Vm::faultHandler(regs*)+0x606>
c00138ca:	e9 f3 04 00 00       	jmp    c0013dc2 <Vm::faultHandler(regs*)+0x677>
c00138cf:	80 fa ef             	cmp    dl,0xef
c00138d2:	0f 84 d1 04 00 00    	je     c0013da9 <Vm::faultHandler(regs*)+0x65e>
c00138d8:	77 28                	ja     c0013902 <Vm::faultHandler(regs*)+0x1b7>
c00138da:	80 fa ed             	cmp    dl,0xed
c00138dd:	0f 84 9f 04 00 00    	je     c0013d82 <Vm::faultHandler(regs*)+0x637>
c00138e3:	80 fa ee             	cmp    dl,0xee
c00138e6:	0f 85 d6 04 00 00    	jne    c0013dc2 <Vm::faultHandler(regs*)+0x677>
c00138ec:	50                   	push   eax
c00138ed:	50                   	push   eax
c00138ee:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00138f2:	50                   	push   eax
c00138f3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00138f7:	50                   	push   eax
c00138f8:	e8 a3 f9 ff ff       	call   c00132a0 <Vm::outbv(unsigned short, unsigned char)>
c00138fd:	e9 9f 04 00 00       	jmp    c0013da1 <Vm::faultHandler(regs*)+0x656>
c0013902:	80 fa fa             	cmp    dl,0xfa
c0013905:	0f 84 69 01 00 00    	je     c0013a74 <Vm::faultHandler(regs*)+0x329>
c001390b:	80 fa fb             	cmp    dl,0xfb
c001390e:	0f 84 6e 01 00 00    	je     c0013a82 <Vm::faultHandler(regs*)+0x337>
c0013914:	80 fa f3             	cmp    dl,0xf3
c0013917:	0f 85 a5 04 00 00    	jne    c0013dc2 <Vm::faultHandler(regs*)+0x677>
c001391d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013920:	e9 c0 fe ff ff       	jmp    c00137e5 <Vm::faultHandler(regs*)+0x9a>
c0013925:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013928:	be 02 00 00 00       	mov    esi,0x2
c001392d:	e9 b3 fe ff ff       	jmp    c00137e5 <Vm::faultHandler(regs*)+0x9a>
c0013932:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013935:	be 03 00 00 00       	mov    esi,0x3
c001393a:	e9 a6 fe ff ff       	jmp    c00137e5 <Vm::faultHandler(regs*)+0x9a>
c001393f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013942:	be 04 00 00 00       	mov    esi,0x4
c0013947:	e9 99 fe ff ff       	jmp    c00137e5 <Vm::faultHandler(regs*)+0x9a>
c001394c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001394f:	be 05 00 00 00       	mov    esi,0x5
c0013954:	e9 8c fe ff ff       	jmp    c00137e5 <Vm::faultHandler(regs*)+0x9a>
c0013959:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001395c:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0013961:	e9 7f fe ff ff       	jmp    c00137e5 <Vm::faultHandler(regs*)+0x9a>
c0013966:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013969:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001396e:	e9 72 fe ff ff       	jmp    c00137e5 <Vm::faultHandler(regs*)+0x9a>
c0013973:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0013976:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001397a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001397f:	74 30                	je     c00139b1 <Vm::faultHandler(regs*)+0x266>
c0013981:	83 e9 04             	sub    ecx,0x4
c0013984:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001398a:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0013990:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0013993:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0013996:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001399c:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00139a0:	0f 84 15 04 00 00    	je     c0013dbb <Vm::faultHandler(regs*)+0x670>
c00139a6:	80 ce 02             	or     dh,0x2
c00139a9:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00139ac:	e9 0a 04 00 00       	jmp    c0013dbb <Vm::faultHandler(regs*)+0x670>
c00139b1:	83 e9 02             	sub    ecx,0x2
c00139b4:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00139ba:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00139bd:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00139c1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00139c7:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00139cb:	74 05                	je     c00139d2 <Vm::faultHandler(regs*)+0x287>
c00139cd:	80 ce 02             	or     dh,0x2
c00139d0:	eb 03                	jmp    c00139d5 <Vm::faultHandler(regs*)+0x28a>
c00139d2:	80 e6 fd             	and    dh,0xfd
c00139d5:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00139d9:	e9 dd 03 00 00       	jmp    c0013dbb <Vm::faultHandler(regs*)+0x670>
c00139de:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00139e3:	74 2a                	je     c0013a0f <Vm::faultHandler(regs*)+0x2c4>
c00139e5:	8b 10                	mov    edx,DWORD PTR [eax]
c00139e7:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00139ed:	81 ca 00 02 02 00    	or     edx,0x20200
c00139f3:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00139f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00139f8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00139fe:	c1 e8 09             	shr    eax,0x9
c0013a01:	83 e0 01             	and    eax,0x1
c0013a04:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0013a07:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0013a0a:	83 c0 04             	add    eax,0x4
c0013a0d:	eb 25                	jmp    c0013a34 <Vm::faultHandler(regs*)+0x2e9>
c0013a0f:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0013a12:	81 ca 00 02 02 00    	or     edx,0x20200
c0013a18:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0013a1b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013a1e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013a24:	66 c1 e8 09          	shr    ax,0x9
c0013a28:	83 e0 01             	and    eax,0x1
c0013a2b:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0013a2e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0013a31:	83 c0 02             	add    eax,0x2
c0013a34:	25 ff ff 00 00       	and    eax,0xffff
c0013a39:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0013a3c:	e9 7a 03 00 00       	jmp    c0013dbb <Vm::faultHandler(regs*)+0x670>
c0013a41:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013a45:	3c ee                	cmp    al,0xee
c0013a47:	75 10                	jne    c0013a59 <Vm::faultHandler(regs*)+0x30e>
c0013a49:	83 ec 0c             	sub    esp,0xc
c0013a4c:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0013a4f:	e8 e9 f8 ff ff       	call   c001333d <Vm::mainloop3(unsigned long)>
c0013a54:	e9 4b 03 00 00       	jmp    c0013da4 <Vm::faultHandler(regs*)+0x659>
c0013a59:	83 ec 0c             	sub    esp,0xc
c0013a5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013a60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a64:	51                   	push   ecx
c0013a65:	50                   	push   eax
c0013a66:	53                   	push   ebx
c0013a67:	e8 e1 fb ff ff       	call   c001364d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0013a6c:	83 c4 20             	add    esp,0x20
c0013a6f:	e9 4a 03 00 00       	jmp    c0013dbe <Vm::faultHandler(regs*)+0x673>
c0013a74:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a79:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0013a7d:	e9 39 03 00 00       	jmp    c0013dbb <Vm::faultHandler(regs*)+0x670>
c0013a82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a87:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0013a8b:	e9 2b 03 00 00       	jmp    c0013dbb <Vm::faultHandler(regs*)+0x670>
c0013a90:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0013a93:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0013a98:	74 2b                	je     c0013ac5 <Vm::faultHandler(regs*)+0x37a>
c0013a9a:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0013aa1:	76 22                	jbe    c0013ac5 <Vm::faultHandler(regs*)+0x37a>
c0013aa3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013aa7:	50                   	push   eax
c0013aa8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013aac:	50                   	push   eax
c0013aad:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013ab1:	50                   	push   eax
c0013ab2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013ab6:	50                   	push   eax
c0013ab7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013abb:	50                   	push   eax
c0013abc:	6a 6c                	push   0x6c
c0013abe:	6a 6c                	push   0x6c
c0013ac0:	e9 b9 01 00 00       	jmp    c0013c7e <Vm::faultHandler(regs*)+0x533>
c0013ac5:	83 ec 0c             	sub    esp,0xc
c0013ac8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0013acc:	0f b7 f6             	movzx  esi,si
c0013acf:	50                   	push   eax
c0013ad0:	e8 b8 f7 ff ff       	call   c001328d <Vm::inbv(unsigned short)>
c0013ad5:	83 c4 0c             	add    esp,0xc
c0013ad8:	0f b6 c0             	movzx  eax,al
c0013adb:	50                   	push   eax
c0013adc:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0013ae0:	50                   	push   eax
c0013ae1:	56                   	push   esi
c0013ae2:	e8 24 fc ff ff       	call   c001370b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0013ae7:	83 c4 10             	add    esp,0x10
c0013aea:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013aed:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0013af1:	74 03                	je     c0013af6 <Vm::faultHandler(regs*)+0x3ab>
c0013af3:	48                   	dec    eax
c0013af4:	eb 01                	jmp    c0013af7 <Vm::faultHandler(regs*)+0x3ac>
c0013af6:	40                   	inc    eax
c0013af7:	0f b7 c0             	movzx  eax,ax
c0013afa:	e9 8d 00 00 00       	jmp    c0013b8c <Vm::faultHandler(regs*)+0x441>
c0013aff:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0013b02:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013b05:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0013b0a:	74 29                	je     c0013b35 <Vm::faultHandler(regs*)+0x3ea>
c0013b0c:	3d ff ff 00 00       	cmp    eax,0xffff
c0013b11:	76 22                	jbe    c0013b35 <Vm::faultHandler(regs*)+0x3ea>
c0013b13:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013b17:	50                   	push   eax
c0013b18:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013b1c:	50                   	push   eax
c0013b1d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013b21:	50                   	push   eax
c0013b22:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013b26:	50                   	push   eax
c0013b27:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013b2b:	50                   	push   eax
c0013b2c:	6a 6d                	push   0x6d
c0013b2e:	6a 6d                	push   0x6d
c0013b30:	e9 49 01 00 00       	jmp    c0013c7e <Vm::faultHandler(regs*)+0x533>
c0013b35:	0f b7 c8             	movzx  ecx,ax
c0013b38:	0f b7 f6             	movzx  esi,si
c0013b3b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0013b3e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013b43:	74 20                	je     c0013b65 <Vm::faultHandler(regs*)+0x41a>
c0013b45:	ed                   	in     eax,dx
c0013b46:	55                   	push   ebp
c0013b47:	50                   	push   eax
c0013b48:	51                   	push   ecx
c0013b49:	56                   	push   esi
c0013b4a:	e8 e7 fb ff ff       	call   c0013736 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0013b4f:	83 c4 10             	add    esp,0x10
c0013b52:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013b55:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0013b59:	74 05                	je     c0013b60 <Vm::faultHandler(regs*)+0x415>
c0013b5b:	83 e8 04             	sub    eax,0x4
c0013b5e:	eb 27                	jmp    c0013b87 <Vm::faultHandler(regs*)+0x43c>
c0013b60:	83 c0 04             	add    eax,0x4
c0013b63:	eb 22                	jmp    c0013b87 <Vm::faultHandler(regs*)+0x43c>
c0013b65:	66 ed                	in     ax,dx
c0013b67:	0f b7 c0             	movzx  eax,ax
c0013b6a:	57                   	push   edi
c0013b6b:	50                   	push   eax
c0013b6c:	51                   	push   ecx
c0013b6d:	56                   	push   esi
c0013b6e:	e8 ad fb ff ff       	call   c0013720 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0013b73:	83 c4 10             	add    esp,0x10
c0013b76:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013b79:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0013b7d:	74 05                	je     c0013b84 <Vm::faultHandler(regs*)+0x439>
c0013b7f:	83 e8 02             	sub    eax,0x2
c0013b82:	eb 03                	jmp    c0013b87 <Vm::faultHandler(regs*)+0x43c>
c0013b84:	83 c0 02             	add    eax,0x2
c0013b87:	25 ff ff 00 00       	and    eax,0xffff
c0013b8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0013b8f:	e9 27 02 00 00       	jmp    c0013dbb <Vm::faultHandler(regs*)+0x670>
c0013b94:	8d 46 ff             	lea    eax,[esi-0x1]
c0013b97:	3c 05                	cmp    al,0x5
c0013b99:	77 24                	ja     c0013bbf <Vm::faultHandler(regs*)+0x474>
c0013b9b:	0f b6 c0             	movzx  eax,al
c0013b9e:	ff 24 85 e0 df 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe2020]
c0013ba5:	0f b7 fd             	movzx  edi,bp
c0013ba8:	eb 15                	jmp    c0013bbf <Vm::faultHandler(regs*)+0x474>
c0013baa:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0013bae:	eb 0f                	jmp    c0013bbf <Vm::faultHandler(regs*)+0x474>
c0013bb0:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0013bb4:	eb 09                	jmp    c0013bbf <Vm::faultHandler(regs*)+0x474>
c0013bb6:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0013bba:	eb 03                	jmp    c0013bbf <Vm::faultHandler(regs*)+0x474>
c0013bbc:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0013bbf:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0013bc2:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0013bc7:	74 29                	je     c0013bf2 <Vm::faultHandler(regs*)+0x4a7>
c0013bc9:	3d ff ff 00 00       	cmp    eax,0xffff
c0013bce:	76 22                	jbe    c0013bf2 <Vm::faultHandler(regs*)+0x4a7>
c0013bd0:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013bd4:	50                   	push   eax
c0013bd5:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013bd9:	50                   	push   eax
c0013bda:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013bde:	50                   	push   eax
c0013bdf:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013be3:	50                   	push   eax
c0013be4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013be8:	50                   	push   eax
c0013be9:	6a 6e                	push   0x6e
c0013beb:	6a 6e                	push   0x6e
c0013bed:	e9 8c 00 00 00       	jmp    c0013c7e <Vm::faultHandler(regs*)+0x533>
c0013bf2:	0f b7 c0             	movzx  eax,ax
c0013bf5:	52                   	push   edx
c0013bf6:	52                   	push   edx
c0013bf7:	50                   	push   eax
c0013bf8:	57                   	push   edi
c0013bf9:	e8 d9 fa ff ff       	call   c00136d7 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0013bfe:	59                   	pop    ecx
c0013bff:	0f b6 c0             	movzx  eax,al
c0013c02:	5e                   	pop    esi
c0013c03:	50                   	push   eax
c0013c04:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0013c08:	50                   	push   eax
c0013c09:	e8 92 f6 ff ff       	call   c00132a0 <Vm::outbv(unsigned short, unsigned char)>
c0013c0e:	83 c4 10             	add    esp,0x10
c0013c11:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0013c14:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0013c18:	74 03                	je     c0013c1d <Vm::faultHandler(regs*)+0x4d2>
c0013c1a:	48                   	dec    eax
c0013c1b:	eb 01                	jmp    c0013c1e <Vm::faultHandler(regs*)+0x4d3>
c0013c1d:	40                   	inc    eax
c0013c1e:	0f b7 c0             	movzx  eax,ax
c0013c21:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0013c24:	e9 92 01 00 00       	jmp    c0013dbb <Vm::faultHandler(regs*)+0x670>
c0013c29:	8d 46 ff             	lea    eax,[esi-0x1]
c0013c2c:	3c 05                	cmp    al,0x5
c0013c2e:	77 1f                	ja     c0013c4f <Vm::faultHandler(regs*)+0x504>
c0013c30:	0f b6 c0             	movzx  eax,al
c0013c33:	ff 24 85 f8 df 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe2008]
c0013c3a:	89 ef                	mov    edi,ebp
c0013c3c:	eb 11                	jmp    c0013c4f <Vm::faultHandler(regs*)+0x504>
c0013c3e:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0013c41:	eb 0c                	jmp    c0013c4f <Vm::faultHandler(regs*)+0x504>
c0013c43:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0013c46:	eb 07                	jmp    c0013c4f <Vm::faultHandler(regs*)+0x504>
c0013c48:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0013c4b:	eb 02                	jmp    c0013c4f <Vm::faultHandler(regs*)+0x504>
c0013c4d:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0013c4f:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0013c52:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0013c57:	74 37                	je     c0013c90 <Vm::faultHandler(regs*)+0x545>
c0013c59:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0013c5f:	76 2f                	jbe    c0013c90 <Vm::faultHandler(regs*)+0x545>
c0013c61:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013c65:	50                   	push   eax
c0013c66:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013c6a:	50                   	push   eax
c0013c6b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013c6f:	50                   	push   eax
c0013c70:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013c74:	50                   	push   eax
c0013c75:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013c79:	50                   	push   eax
c0013c7a:	6a 6f                	push   0x6f
c0013c7c:	6a 6f                	push   0x6f
c0013c7e:	68 86 df 01 c0       	push   0xc001df86
c0013c83:	e8 24 5c ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c0013c88:	83 c4 20             	add    esp,0x20
c0013c8b:	e9 86 01 00 00       	jmp    c0013e16 <Vm::faultHandler(regs*)+0x6cb>
c0013c90:	0f b7 d7             	movzx  edx,di
c0013c93:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0013c96:	0f b7 c6             	movzx  eax,si
c0013c99:	81 e1 00 04 00 00    	and    ecx,0x400
c0013c9f:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0013ca2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013ca7:	74 1d                	je     c0013cc6 <Vm::faultHandler(regs*)+0x57b>
c0013ca9:	55                   	push   ebp
c0013caa:	55                   	push   ebp
c0013cab:	50                   	push   eax
c0013cac:	52                   	push   edx
c0013cad:	e8 48 fa ff ff       	call   c00136fa <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0013cb2:	83 c4 10             	add    esp,0x10
c0013cb5:	89 fa                	mov    edx,edi
c0013cb7:	ef                   	out    dx,eax
c0013cb8:	85 c9                	test   ecx,ecx
c0013cba:	74 05                	je     c0013cc1 <Vm::faultHandler(regs*)+0x576>
c0013cbc:	83 ee 04             	sub    esi,0x4
c0013cbf:	eb 21                	jmp    c0013ce2 <Vm::faultHandler(regs*)+0x597>
c0013cc1:	83 c6 04             	add    esi,0x4
c0013cc4:	eb 1c                	jmp    c0013ce2 <Vm::faultHandler(regs*)+0x597>
c0013cc6:	55                   	push   ebp
c0013cc7:	55                   	push   ebp
c0013cc8:	50                   	push   eax
c0013cc9:	52                   	push   edx
c0013cca:	e8 19 fa ff ff       	call   c00136e8 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0013ccf:	83 c4 10             	add    esp,0x10
c0013cd2:	89 fa                	mov    edx,edi
c0013cd4:	66 ef                	out    dx,ax
c0013cd6:	85 c9                	test   ecx,ecx
c0013cd8:	74 05                	je     c0013cdf <Vm::faultHandler(regs*)+0x594>
c0013cda:	83 ee 02             	sub    esi,0x2
c0013cdd:	eb 03                	jmp    c0013ce2 <Vm::faultHandler(regs*)+0x597>
c0013cdf:	83 c6 02             	add    esi,0x2
c0013ce2:	81 e6 ff ff 00 00    	and    esi,0xffff
c0013ce8:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0013ceb:	e9 cb 00 00 00       	jmp    c0013dbb <Vm::faultHandler(regs*)+0x670>
c0013cf0:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0013cf7:	83 ec 0c             	sub    esp,0xc
c0013cfa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013cfe:	50                   	push   eax
c0013cff:	e8 89 f5 ff ff       	call   c001328d <Vm::inbv(unsigned short)>
c0013d04:	0f b6 c0             	movzx  eax,al
c0013d07:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0013d0a:	eb 3f                	jmp    c0013d4b <Vm::faultHandler(regs*)+0x600>
c0013d0c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013d11:	74 07                	je     c0013d1a <Vm::faultHandler(regs*)+0x5cf>
c0013d13:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0013d17:	ed                   	in     eax,dx
c0013d18:	eb 14                	jmp    c0013d2e <Vm::faultHandler(regs*)+0x5e3>
c0013d1a:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0013d1d:	66 31 f6             	xor    si,si
c0013d20:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0013d23:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0013d27:	66 ed                	in     ax,dx
c0013d29:	0f b7 c0             	movzx  eax,ax
c0013d2c:	09 f0                	or     eax,esi
c0013d2e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0013d31:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0013d35:	e9 84 00 00 00       	jmp    c0013dbe <Vm::faultHandler(regs*)+0x673>
c0013d3a:	52                   	push   edx
c0013d3b:	52                   	push   edx
c0013d3c:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0013d40:	50                   	push   eax
c0013d41:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013d45:	50                   	push   eax
c0013d46:	e8 55 f5 ff ff       	call   c00132a0 <Vm::outbv(unsigned short, unsigned char)>
c0013d4b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0013d4f:	eb 53                	jmp    c0013da4 <Vm::faultHandler(regs*)+0x659>
c0013d51:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0013d54:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0013d58:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013d5d:	74 03                	je     c0013d62 <Vm::faultHandler(regs*)+0x617>
c0013d5f:	ef                   	out    dx,eax
c0013d60:	eb cf                	jmp    c0013d31 <Vm::faultHandler(regs*)+0x5e6>
c0013d62:	66 ef                	out    dx,ax
c0013d64:	eb cb                	jmp    c0013d31 <Vm::faultHandler(regs*)+0x5e6>
c0013d66:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0013d6d:	83 ec 0c             	sub    esp,0xc
c0013d70:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0013d74:	50                   	push   eax
c0013d75:	e8 13 f5 ff ff       	call   c001328d <Vm::inbv(unsigned short)>
c0013d7a:	0f b6 c0             	movzx  eax,al
c0013d7d:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0013d80:	eb 1f                	jmp    c0013da1 <Vm::faultHandler(regs*)+0x656>
c0013d82:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0013d85:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013d8a:	74 03                	je     c0013d8f <Vm::faultHandler(regs*)+0x644>
c0013d8c:	ed                   	in     eax,dx
c0013d8d:	eb 0d                	jmp    c0013d9c <Vm::faultHandler(regs*)+0x651>
c0013d8f:	66 ed                	in     ax,dx
c0013d91:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0013d94:	0f b7 c0             	movzx  eax,ax
c0013d97:	66 31 d2             	xor    dx,dx
c0013d9a:	09 d0                	or     eax,edx
c0013d9c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0013d9f:	eb 1a                	jmp    c0013dbb <Vm::faultHandler(regs*)+0x670>
c0013da1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013da4:	83 c4 10             	add    esp,0x10
c0013da7:	eb 15                	jmp    c0013dbe <Vm::faultHandler(regs*)+0x673>
c0013da9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0013dac:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0013daf:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013db4:	74 03                	je     c0013db9 <Vm::faultHandler(regs*)+0x66e>
c0013db6:	ef                   	out    dx,eax
c0013db7:	eb 02                	jmp    c0013dbb <Vm::faultHandler(regs*)+0x670>
c0013db9:	66 ef                	out    dx,ax
c0013dbb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013dbe:	b0 01                	mov    al,0x1
c0013dc0:	eb 56                	jmp    c0013e18 <Vm::faultHandler(regs*)+0x6cd>
c0013dc2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013dc6:	50                   	push   eax
c0013dc7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013dcb:	50                   	push   eax
c0013dcc:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013dd0:	50                   	push   eax
c0013dd1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013dd5:	50                   	push   eax
c0013dd6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013dda:	50                   	push   eax
c0013ddb:	52                   	push   edx
c0013ddc:	52                   	push   edx
c0013ddd:	68 b3 df 01 c0       	push   0xc001dfb3
c0013de2:	e8 c5 5a ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c0013de7:	83 c4 20             	add    esp,0x20
c0013dea:	83 ec 0c             	sub    esp,0xc
c0013ded:	6a 60                	push   0x60
c0013def:	e8 99 f4 ff ff       	call   c001328d <Vm::inbv(unsigned short)>
c0013df4:	83 c4 10             	add    esp,0x10
c0013df7:	3c 1c                	cmp    al,0x1c
c0013df9:	74 04                	je     c0013dff <Vm::faultHandler(regs*)+0x6b4>
c0013dfb:	3c 5a                	cmp    al,0x5a
c0013dfd:	75 eb                	jne    c0013dea <Vm::faultHandler(regs*)+0x69f>
c0013dff:	3c 5a                	cmp    al,0x5a
c0013e01:	74 04                	je     c0013e07 <Vm::faultHandler(regs*)+0x6bc>
c0013e03:	3c 1c                	cmp    al,0x1c
c0013e05:	75 0f                	jne    c0013e16 <Vm::faultHandler(regs*)+0x6cb>
c0013e07:	83 ec 0c             	sub    esp,0xc
c0013e0a:	6a 60                	push   0x60
c0013e0c:	e8 7c f4 ff ff       	call   c001328d <Vm::inbv(unsigned short)>
c0013e11:	83 c4 10             	add    esp,0x10
c0013e14:	eb e9                	jmp    c0013dff <Vm::faultHandler(regs*)+0x6b4>
c0013e16:	31 c0                	xor    eax,eax
c0013e18:	83 c4 1c             	add    esp,0x1c
c0013e1b:	5b                   	pop    ebx
c0013e1c:	5e                   	pop    esi
c0013e1d:	5f                   	pop    edi
c0013e1e:	5d                   	pop    ebp
c0013e1f:	c3                   	ret    

c0013e20 <noCopro(unsigned long)>:
c0013e20:	c3                   	ret    

c0013e21 <nmiHandler(regs*, void*)>:
c0013e21:	83 ec 0c             	sub    esp,0xc
c0013e24:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c0013e29:	83 ec 0c             	sub    esp,0xc
c0013e2c:	50                   	push   eax
c0013e2d:	e8 10 25 ff ff       	call   c0006342 <Computer::handleNMI()>
c0013e32:	83 c4 10             	add    esp,0x10
c0013e35:	90                   	nop
c0013e36:	83 c4 0c             	add    esp,0xc
c0013e39:	c3                   	ret    

c0013e3a <doubleFault(regs*, void*)>:
c0013e3a:	55                   	push   ebp
c0013e3b:	89 e5                	mov    ebp,esp
c0013e3d:	83 ec 08             	sub    esp,0x8
c0013e40:	83 ec 0c             	sub    esp,0xc
c0013e43:	68 10 e0 01 c0       	push   0xc001e010
c0013e48:	e8 ae b5 ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c0013e4d:	83 c4 10             	add    esp,0x10
c0013e50:	90                   	nop
c0013e51:	c9                   	leave  
c0013e52:	c3                   	ret    

c0013e53 <displayDebugInfo(regs*)>:
c0013e53:	83 ec 1c             	sub    esp,0x1c
c0013e56:	0f 20 c0             	mov    eax,cr0
c0013e59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013e5d:	0f 20 d0             	mov    eax,cr2
c0013e60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013e64:	0f 20 d8             	mov    eax,cr3
c0013e67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013e6b:	0f 20 e0             	mov    eax,cr4
c0013e6e:	89 04 24             	mov    DWORD PTR [esp],eax
c0013e71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e75:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0013e78:	83 ec 08             	sub    esp,0x8
c0013e7b:	50                   	push   eax
c0013e7c:	68 2c e0 01 c0       	push   0xc001e02c
c0013e81:	e8 26 5a ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c0013e86:	83 c4 10             	add    esp,0x10
c0013e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e8d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0013e90:	83 ec 08             	sub    esp,0x8
c0013e93:	50                   	push   eax
c0013e94:	68 1d e0 01 c0       	push   0xc001e01d
c0013e99:	e8 0e 5a ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c0013e9e:	83 c4 10             	add    esp,0x10
c0013ea1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ea5:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0013ea8:	83 ec 08             	sub    esp,0x8
c0013eab:	50                   	push   eax
c0013eac:	68 28 e0 01 c0       	push   0xc001e028
c0013eb1:	e8 f6 59 ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c0013eb6:	83 c4 10             	add    esp,0x10
c0013eb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ebd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0013ec0:	83 ec 08             	sub    esp,0x8
c0013ec3:	50                   	push   eax
c0013ec4:	68 37 e0 01 c0       	push   0xc001e037
c0013ec9:	e8 de 59 ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c0013ece:	83 c4 10             	add    esp,0x10
c0013ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ed5:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0013ed8:	83 ec 08             	sub    esp,0x8
c0013edb:	50                   	push   eax
c0013edc:	68 42 e0 01 c0       	push   0xc001e042
c0013ee1:	e8 c6 59 ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c0013ee6:	83 c4 10             	add    esp,0x10
c0013ee9:	83 ec 08             	sub    esp,0x8
c0013eec:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013ef0:	68 4d e0 01 c0       	push   0xc001e04d
c0013ef5:	e8 b2 59 ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c0013efa:	83 c4 10             	add    esp,0x10
c0013efd:	83 ec 08             	sub    esp,0x8
c0013f00:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0013f04:	68 58 e0 01 c0       	push   0xc001e058
c0013f09:	e8 9e 59 ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c0013f0e:	83 c4 10             	add    esp,0x10
c0013f11:	a1 f0 26 02 c0       	mov    eax,ds:0xc00226f0
c0013f16:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013f1c:	83 ec 0c             	sub    esp,0xc
c0013f1f:	50                   	push   eax
c0013f20:	e8 28 39 ff ff       	call   c000784d <setActiveTerminal(VgaText*)>
c0013f25:	83 c4 10             	add    esp,0x10
c0013f28:	a1 f0 26 02 c0       	mov    eax,ds:0xc00226f0
c0013f2d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013f33:	83 ec 08             	sub    esp,0x8
c0013f36:	68 63 e0 01 c0       	push   0xc001e063
c0013f3b:	50                   	push   eax
c0013f3c:	e8 4b 3c ff ff       	call   c0007b8c <VgaText::puts(char const*)>
c0013f41:	83 c4 10             	add    esp,0x10
c0013f44:	a1 f0 26 02 c0       	mov    eax,ds:0xc00226f0
c0013f49:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013f4f:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0013f54:	8b 12                	mov    edx,DWORD PTR [edx]
c0013f56:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0013f59:	83 c2 0c             	add    edx,0xc
c0013f5c:	83 ec 08             	sub    esp,0x8
c0013f5f:	52                   	push   edx
c0013f60:	50                   	push   eax
c0013f61:	e8 26 3c ff ff       	call   c0007b8c <VgaText::puts(char const*)>
c0013f66:	83 c4 10             	add    esp,0x10
c0013f69:	a1 f0 26 02 c0       	mov    eax,ds:0xc00226f0
c0013f6e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013f74:	83 ec 08             	sub    esp,0x8
c0013f77:	68 6c e0 01 c0       	push   0xc001e06c
c0013f7c:	50                   	push   eax
c0013f7d:	e8 0a 3c ff ff       	call   c0007b8c <VgaText::puts(char const*)>
c0013f82:	83 c4 10             	add    esp,0x10
c0013f85:	a1 f0 26 02 c0       	mov    eax,ds:0xc00226f0
c0013f8a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013f90:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013f94:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0013f97:	83 ec 08             	sub    esp,0x8
c0013f9a:	52                   	push   edx
c0013f9b:	50                   	push   eax
c0013f9c:	e8 a5 3b ff ff       	call   c0007b46 <VgaText::putx(unsigned int)>
c0013fa1:	83 c4 10             	add    esp,0x10
c0013fa4:	a1 f0 26 02 c0       	mov    eax,ds:0xc00226f0
c0013fa9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013faf:	83 ec 08             	sub    esp,0x8
c0013fb2:	68 74 e0 01 c0       	push   0xc001e074
c0013fb7:	50                   	push   eax
c0013fb8:	e8 cf 3b ff ff       	call   c0007b8c <VgaText::puts(char const*)>
c0013fbd:	83 c4 10             	add    esp,0x10
c0013fc0:	a1 f0 26 02 c0       	mov    eax,ds:0xc00226f0
c0013fc5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013fcb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013fcf:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0013fd2:	83 ec 08             	sub    esp,0x8
c0013fd5:	52                   	push   edx
c0013fd6:	50                   	push   eax
c0013fd7:	e8 6a 3b ff ff       	call   c0007b46 <VgaText::putx(unsigned int)>
c0013fdc:	83 c4 10             	add    esp,0x10
c0013fdf:	a1 f0 26 02 c0       	mov    eax,ds:0xc00226f0
c0013fe4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013fea:	83 ec 08             	sub    esp,0x8
c0013fed:	68 7c e0 01 c0       	push   0xc001e07c
c0013ff2:	50                   	push   eax
c0013ff3:	e8 94 3b ff ff       	call   c0007b8c <VgaText::puts(char const*)>
c0013ff8:	83 c4 10             	add    esp,0x10
c0013ffb:	a1 f0 26 02 c0       	mov    eax,ds:0xc00226f0
c0014000:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014006:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001400a:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c001400d:	83 ec 08             	sub    esp,0x8
c0014010:	52                   	push   edx
c0014011:	50                   	push   eax
c0014012:	e8 2f 3b ff ff       	call   c0007b46 <VgaText::putx(unsigned int)>
c0014017:	83 c4 10             	add    esp,0x10
c001401a:	a1 f0 26 02 c0       	mov    eax,ds:0xc00226f0
c001401f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014025:	83 ec 08             	sub    esp,0x8
c0014028:	68 84 e0 01 c0       	push   0xc001e084
c001402d:	50                   	push   eax
c001402e:	e8 59 3b ff ff       	call   c0007b8c <VgaText::puts(char const*)>
c0014033:	83 c4 10             	add    esp,0x10
c0014036:	a1 f0 26 02 c0       	mov    eax,ds:0xc00226f0
c001403b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014041:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014045:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014048:	83 ec 08             	sub    esp,0x8
c001404b:	52                   	push   edx
c001404c:	50                   	push   eax
c001404d:	e8 f4 3a ff ff       	call   c0007b46 <VgaText::putx(unsigned int)>
c0014052:	83 c4 10             	add    esp,0x10
c0014055:	a1 f0 26 02 c0       	mov    eax,ds:0xc00226f0
c001405a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014060:	83 ec 08             	sub    esp,0x8
c0014063:	68 8c e0 01 c0       	push   0xc001e08c
c0014068:	50                   	push   eax
c0014069:	e8 1e 3b ff ff       	call   c0007b8c <VgaText::puts(char const*)>
c001406e:	83 c4 10             	add    esp,0x10
c0014071:	a1 f0 26 02 c0       	mov    eax,ds:0xc00226f0
c0014076:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001407c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014080:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0014083:	83 ec 08             	sub    esp,0x8
c0014086:	52                   	push   edx
c0014087:	50                   	push   eax
c0014088:	e8 b9 3a ff ff       	call   c0007b46 <VgaText::putx(unsigned int)>
c001408d:	83 c4 10             	add    esp,0x10
c0014090:	a1 f0 26 02 c0       	mov    eax,ds:0xc00226f0
c0014095:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001409b:	83 ec 08             	sub    esp,0x8
c001409e:	68 94 e0 01 c0       	push   0xc001e094
c00140a3:	50                   	push   eax
c00140a4:	e8 e3 3a ff ff       	call   c0007b8c <VgaText::puts(char const*)>
c00140a9:	83 c4 10             	add    esp,0x10
c00140ac:	a1 f0 26 02 c0       	mov    eax,ds:0xc00226f0
c00140b1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00140b7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00140bb:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00140be:	83 ec 08             	sub    esp,0x8
c00140c1:	52                   	push   edx
c00140c2:	50                   	push   eax
c00140c3:	e8 7e 3a ff ff       	call   c0007b46 <VgaText::putx(unsigned int)>
c00140c8:	83 c4 10             	add    esp,0x10
c00140cb:	a1 f0 26 02 c0       	mov    eax,ds:0xc00226f0
c00140d0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00140d6:	83 ec 08             	sub    esp,0x8
c00140d9:	68 9c e0 01 c0       	push   0xc001e09c
c00140de:	50                   	push   eax
c00140df:	e8 a8 3a ff ff       	call   c0007b8c <VgaText::puts(char const*)>
c00140e4:	83 c4 10             	add    esp,0x10
c00140e7:	a1 f0 26 02 c0       	mov    eax,ds:0xc00226f0
c00140ec:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00140f2:	83 ec 08             	sub    esp,0x8
c00140f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00140f9:	50                   	push   eax
c00140fa:	e8 47 3a ff ff       	call   c0007b46 <VgaText::putx(unsigned int)>
c00140ff:	83 c4 10             	add    esp,0x10
c0014102:	a1 f0 26 02 c0       	mov    eax,ds:0xc00226f0
c0014107:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001410d:	83 ec 08             	sub    esp,0x8
c0014110:	68 a5 e0 01 c0       	push   0xc001e0a5
c0014115:	50                   	push   eax
c0014116:	e8 71 3a ff ff       	call   c0007b8c <VgaText::puts(char const*)>
c001411b:	83 c4 10             	add    esp,0x10
c001411e:	a1 f0 26 02 c0       	mov    eax,ds:0xc00226f0
c0014123:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014129:	83 ec 08             	sub    esp,0x8
c001412c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014130:	50                   	push   eax
c0014131:	e8 10 3a ff ff       	call   c0007b46 <VgaText::putx(unsigned int)>
c0014136:	83 c4 10             	add    esp,0x10
c0014139:	a1 f0 26 02 c0       	mov    eax,ds:0xc00226f0
c001413e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014144:	83 ec 08             	sub    esp,0x8
c0014147:	68 ad e0 01 c0       	push   0xc001e0ad
c001414c:	50                   	push   eax
c001414d:	e8 3a 3a ff ff       	call   c0007b8c <VgaText::puts(char const*)>
c0014152:	83 c4 10             	add    esp,0x10
c0014155:	a1 f0 26 02 c0       	mov    eax,ds:0xc00226f0
c001415a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014160:	83 ec 08             	sub    esp,0x8
c0014163:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014167:	50                   	push   eax
c0014168:	e8 d9 39 ff ff       	call   c0007b46 <VgaText::putx(unsigned int)>
c001416d:	83 c4 10             	add    esp,0x10
c0014170:	fa                   	cli    
c0014171:	f4                   	hlt    
c0014172:	eb fe                	jmp    c0014172 <displayDebugInfo(regs*)+0x31f>

c0014174 <displayProgramFault(char const*)>:
c0014174:	83 ec 0c             	sub    esp,0xc
c0014177:	83 ec 0c             	sub    esp,0xc
c001417a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001417e:	e8 29 57 ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c0014183:	83 c4 10             	add    esp,0x10
c0014186:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001418b:	8b 00                	mov    eax,DWORD PTR [eax]
c001418d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014190:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014196:	85 c0                	test   eax,eax
c0014198:	74 21                	je     c00141bb <displayProgramFault(char const*)+0x47>
c001419a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001419f:	8b 00                	mov    eax,DWORD PTR [eax]
c00141a1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00141a4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00141aa:	6a 04                	push   0x4
c00141ac:	6a 0f                	push   0xf
c00141ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00141b2:	50                   	push   eax
c00141b3:	e8 46 3a ff ff       	call   c0007bfe <VgaText::puts(char const*, VgaColour, VgaColour)>
c00141b8:	83 c4 10             	add    esp,0x10
c00141bb:	90                   	nop
c00141bc:	83 c4 0c             	add    esp,0xc
c00141bf:	c3                   	ret    

c00141c0 <gpFault(regs*, void*)>:
c00141c0:	83 ec 1c             	sub    esp,0x1c
c00141c3:	c7 05 70 27 02 c0 4b 37 01 c0 	mov    DWORD PTR ds:0xc0022770,0xc001374b
c00141cd:	a1 70 27 02 c0       	mov    eax,ds:0xc0022770
c00141d2:	85 c0                	test   eax,eax
c00141d4:	74 1c                	je     c00141f2 <gpFault(regs*, void*)+0x32>
c00141d6:	a1 70 27 02 c0       	mov    eax,ds:0xc0022770
c00141db:	83 ec 0c             	sub    esp,0xc
c00141de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00141e2:	ff d0                	call   eax
c00141e4:	83 c4 10             	add    esp,0x10
c00141e7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00141eb:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00141f0:	75 2e                	jne    c0014220 <gpFault(regs*, void*)+0x60>
c00141f2:	83 ec 0c             	sub    esp,0xc
c00141f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00141f9:	e8 55 fc ff ff       	call   c0013e53 <displayDebugInfo(regs*)>
c00141fe:	83 c4 10             	add    esp,0x10
c0014201:	83 ec 0c             	sub    esp,0xc
c0014204:	68 b5 e0 01 c0       	push   0xc001e0b5
c0014209:	e8 66 ff ff ff       	call   c0014174 <displayProgramFault(char const*)>
c001420e:	83 c4 10             	add    esp,0x10
c0014211:	83 ec 0c             	sub    esp,0xc
c0014214:	6a 00                	push   0x0
c0014216:	e8 25 ef ff ff       	call   c0013140 <Thr::terminateFromIRQ(int)>
c001421b:	83 c4 10             	add    esp,0x10
c001421e:	eb 01                	jmp    c0014221 <gpFault(regs*, void*)+0x61>
c0014220:	90                   	nop
c0014221:	83 c4 1c             	add    esp,0x1c
c0014224:	c3                   	ret    

c0014225 <pgFault(regs*, void*)>:
c0014225:	83 ec 1c             	sub    esp,0x1c
c0014228:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001422c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001422f:	0f 20 d0             	mov    eax,cr2
c0014232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014236:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001423a:	83 ec 04             	sub    esp,0x4
c001423d:	52                   	push   edx
c001423e:	50                   	push   eax
c001423f:	68 20 e1 01 c0       	push   0xc001e120
c0014244:	e8 63 56 ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c0014249:	83 c4 10             	add    esp,0x10
c001424c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014251:	8b 00                	mov    eax,DWORD PTR [eax]
c0014253:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014256:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001425c:	0f 20 d2             	mov    edx,cr2
c001425f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014263:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014267:	83 ec 08             	sub    esp,0x8
c001426a:	52                   	push   edx
c001426b:	50                   	push   eax
c001426c:	e8 6d 52 ff ff       	call   c00094de <VAS::tryLoadBackOffDisk(unsigned long)>
c0014271:	83 c4 10             	add    esp,0x10
c0014274:	84 c0                	test   al,al
c0014276:	75 2e                	jne    c00142a6 <pgFault(regs*, void*)+0x81>
c0014278:	83 ec 0c             	sub    esp,0xc
c001427b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001427f:	e8 cf fb ff ff       	call   c0013e53 <displayDebugInfo(regs*)>
c0014284:	83 c4 10             	add    esp,0x10
c0014287:	83 ec 0c             	sub    esp,0xc
c001428a:	68 ce e0 01 c0       	push   0xc001e0ce
c001428f:	e8 e0 fe ff ff       	call   c0014174 <displayProgramFault(char const*)>
c0014294:	83 c4 10             	add    esp,0x10
c0014297:	83 ec 0c             	sub    esp,0xc
c001429a:	6a 00                	push   0x0
c001429c:	e8 9f ee ff ff       	call   c0013140 <Thr::terminateFromIRQ(int)>
c00142a1:	83 c4 10             	add    esp,0x10
c00142a4:	eb 01                	jmp    c00142a7 <pgFault(regs*, void*)+0x82>
c00142a6:	90                   	nop
c00142a7:	83 c4 1c             	add    esp,0x1c
c00142aa:	c3                   	ret    

c00142ab <otherISRHandler(regs*, void*)>:
c00142ab:	83 ec 0c             	sub    esp,0xc
c00142ae:	83 ec 0c             	sub    esp,0xc
c00142b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142b5:	e8 99 fb ff ff       	call   c0013e53 <displayDebugInfo(regs*)>
c00142ba:	83 c4 10             	add    esp,0x10
c00142bd:	83 ec 0c             	sub    esp,0xc
c00142c0:	68 48 e1 01 c0       	push   0xc001e148
c00142c5:	e8 aa fe ff ff       	call   c0014174 <displayProgramFault(char const*)>
c00142ca:	83 c4 10             	add    esp,0x10
c00142cd:	83 ec 0c             	sub    esp,0xc
c00142d0:	6a 00                	push   0x0
c00142d2:	e8 69 ee ff ff       	call   c0013140 <Thr::terminateFromIRQ(int)>
c00142d7:	83 c4 10             	add    esp,0x10
c00142da:	90                   	nop
c00142db:	83 c4 0c             	add    esp,0xc
c00142de:	c3                   	ret    

c00142df <opcodeFault(regs*, void*)>:
c00142df:	55                   	push   ebp
c00142e0:	89 e5                	mov    ebp,esp
c00142e2:	83 ec 08             	sub    esp,0x8
c00142e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00142e8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00142eb:	83 ec 08             	sub    esp,0x8
c00142ee:	50                   	push   eax
c00142ef:	68 d9 e0 01 c0       	push   0xc001e0d9
c00142f4:	e8 b3 55 ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c00142f9:	83 c4 10             	add    esp,0x10
c00142fc:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c0014301:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014307:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001430d:	84 c0                	test   al,al
c001430f:	74 21                	je     c0014332 <opcodeFault(regs*, void*)+0x53>
c0014311:	83 ec 0c             	sub    esp,0xc
c0014314:	68 70 e1 01 c0       	push   0xc001e170
c0014319:	e8 8e 55 ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c001431e:	83 c4 10             	add    esp,0x10
c0014321:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014324:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014327:	8d 50 19             	lea    edx,[eax+0x19]
c001432a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001432d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014330:	eb 2b                	jmp    c001435d <opcodeFault(regs*, void*)+0x7e>
c0014332:	83 ec 0c             	sub    esp,0xc
c0014335:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014338:	e8 16 fb ff ff       	call   c0013e53 <displayDebugInfo(regs*)>
c001433d:	83 c4 10             	add    esp,0x10
c0014340:	83 ec 0c             	sub    esp,0xc
c0014343:	68 e7 e0 01 c0       	push   0xc001e0e7
c0014348:	e8 27 fe ff ff       	call   c0014174 <displayProgramFault(char const*)>
c001434d:	83 c4 10             	add    esp,0x10
c0014350:	83 ec 0c             	sub    esp,0xc
c0014353:	6a 00                	push   0x0
c0014355:	e8 e6 ed ff ff       	call   c0013140 <Thr::terminateFromIRQ(int)>
c001435a:	83 c4 10             	add    esp,0x10
c001435d:	c9                   	leave  
c001435e:	c3                   	ret    

c001435f <i386SaveCoprocessor(void*)>:
c001435f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014363:	83 c0 3f             	add    eax,0x3f
c0014366:	83 e0 c0             	and    eax,0xffffffc0
c0014369:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001436d:	ff 25 6c 27 02 c0    	jmp    DWORD PTR ds:0xc002276c

c0014373 <i386LoadCoprocessor(void*)>:
c0014373:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014377:	83 c0 3f             	add    eax,0x3f
c001437a:	83 e0 c0             	and    eax,0xffffffc0
c001437d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014381:	ff 25 68 27 02 c0    	jmp    DWORD PTR ds:0xc0022768

c0014387 <x87EmulHandler(regs*, void*)>:
c0014387:	53                   	push   ebx
c0014388:	83 ec 08             	sub    esp,0x8
c001438b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014390:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0014394:	74 10                	je     c00143a6 <x87EmulHandler(regs*, void*)+0x1f>
c0014396:	83 ec 0c             	sub    esp,0xc
c0014399:	68 f4 e0 01 c0       	push   0xc001e0f4
c001439e:	e8 58 b0 ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c00143a3:	83 c4 10             	add    esp,0x10
c00143a6:	0f 20 c0             	mov    eax,cr0
c00143a9:	a8 08                	test   al,0x8
c00143ab:	74 59                	je     c0014406 <x87EmulHandler(regs*, void*)+0x7f>
c00143ad:	0f 06                	clts   
c00143af:	a1 64 27 02 c0       	mov    eax,ds:0xc0022764
c00143b4:	85 c0                	test   eax,eax
c00143b6:	74 0e                	je     c00143c6 <x87EmulHandler(regs*, void*)+0x3f>
c00143b8:	83 ec 0c             	sub    esp,0xc
c00143bb:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00143be:	e8 9c ff ff ff       	call   c001435f <i386SaveCoprocessor(void*)>
c00143c3:	83 c4 10             	add    esp,0x10
c00143c6:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00143cc:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00143d0:	75 12                	jne    c00143e4 <x87EmulHandler(regs*, void*)+0x5d>
c00143d2:	83 ec 0c             	sub    esp,0xc
c00143d5:	68 40 02 00 00       	push   0x240
c00143da:	e8 3e 27 ff ff       	call   c0006b1d <malloc>
c00143df:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00143e2:	eb 10                	jmp    c00143f4 <x87EmulHandler(regs*, void*)+0x6d>
c00143e4:	83 ec 0c             	sub    esp,0xc
c00143e7:	a1 64 27 02 c0       	mov    eax,ds:0xc0022764
c00143ec:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00143ef:	e8 7f ff ff ff       	call   c0014373 <i386LoadCoprocessor(void*)>
c00143f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143f9:	83 c4 10             	add    esp,0x10
c00143fc:	a3 64 27 02 c0       	mov    ds:0xc0022764,eax
c0014401:	83 c4 08             	add    esp,0x8
c0014404:	5b                   	pop    ebx
c0014405:	c3                   	ret    
c0014406:	83 ec 0c             	sub    esp,0xc
c0014409:	68 08 e1 01 c0       	push   0xc001e108
c001440e:	e8 99 54 ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c0014413:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001441b:	83 c4 18             	add    esp,0x18
c001441e:	5b                   	pop    ebx
c001441f:	e9 1c ed ff ff       	jmp    c0013140 <Thr::terminateFromIRQ(int)>

c0014424 <HalInitialiseCoprocessor()>:
c0014424:	83 ec 10             	sub    esp,0x10
c0014427:	c7 05 64 27 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022764,0x0
c0014431:	6a 00                	push   0x0
c0014433:	68 87 43 01 c0       	push   0xc0014387
c0014438:	6a 07                	push   0x7
c001443a:	e8 e1 6d ff ff       	call   c000b220 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001443f:	e8 7c 6a 00 00       	call   c001aec0 <avxDetect>
c0014444:	83 c4 10             	add    esp,0x10
c0014447:	85 c0                	test   eax,eax
c0014449:	74 1c                	je     c0014467 <HalInitialiseCoprocessor()+0x43>
c001444b:	c7 05 6c 27 02 c0 ea ae 01 c0 	mov    DWORD PTR ds:0xc002276c,0xc001aeea
c0014455:	c7 05 68 27 02 c0 fb ae 01 c0 	mov    DWORD PTR ds:0xc0022768,0xc001aefb
c001445f:	83 c4 0c             	add    esp,0xc
c0014462:	e9 a5 6a 00 00       	jmp    c001af0c <avxInit>
c0014467:	e8 d4 6c 00 00       	call   c001b140 <absolutelyNoChanceInHell>
c001446c:	85 c0                	test   eax,eax
c001446e:	74 1c                	je     c001448c <HalInitialiseCoprocessor()+0x68>
c0014470:	c7 05 6c 27 02 c0 58 b1 01 c0 	mov    DWORD PTR ds:0xc002276c,0xc001b158
c001447a:	c7 05 68 27 02 c0 60 b1 01 c0 	mov    DWORD PTR ds:0xc0022768,0xc001b160
c0014484:	83 c4 0c             	add    esp,0xc
c0014487:	e9 dc 6c 00 00       	jmp    c001b168 <sseInit>
c001448c:	e8 f5 6c 00 00       	call   c001b186 <x87Detect>
c0014491:	85 c0                	test   eax,eax
c0014493:	74 1c                	je     c00144b1 <HalInitialiseCoprocessor()+0x8d>
c0014495:	c7 05 6c 27 02 c0 a1 b1 01 c0 	mov    DWORD PTR ds:0xc002276c,0xc001b1a1
c001449f:	c7 05 68 27 02 c0 a8 b1 01 c0 	mov    DWORD PTR ds:0xc0022768,0xc001b1a8
c00144a9:	83 c4 0c             	add    esp,0xc
c00144ac:	e9 fe 6c 00 00       	jmp    c001b1af <x87Init>
c00144b1:	c7 05 6c 27 02 c0 20 3e 01 c0 	mov    DWORD PTR ds:0xc002276c,0xc0013e20
c00144bb:	c7 05 68 27 02 c0 20 3e 01 c0 	mov    DWORD PTR ds:0xc0022768,0xc0013e20
c00144c5:	0f 20 c0             	mov    eax,cr0
c00144c8:	83 c8 04             	or     eax,0x4
c00144cb:	0f 22 c0             	mov    cr0,eax
c00144ce:	83 c4 0c             	add    esp,0xc
c00144d1:	c3                   	ret    

c00144d2 <HalPanic(char const*)>:
c00144d2:	e9 24 af ff ff       	jmp    c000f3fb <Krnl::panic(char const*)>

c00144d7 <HalQueryPerformanceCounter()>:
c00144d7:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c00144dc:	31 d2                	xor    edx,edx
c00144de:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00144e4:	31 c0                	xor    eax,eax
c00144e6:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00144ed:	74 02                	je     c00144f1 <HalQueryPerformanceCounter()+0x1a>
c00144ef:	0f 31                	rdtsc  
c00144f1:	c3                   	ret    

c00144f2 <HalInitialise()>:
c00144f2:	53                   	push   ebx
c00144f3:	83 ec 08             	sub    esp,0x8
c00144f6:	e8 58 6f ff ff       	call   c000b453 <setupINTS()>
c00144fb:	80 3d c0 1a 02 c0 00 	cmp    BYTE PTR ds:0xc0021ac0,0x0
c0014502:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c0014507:	75 07                	jne    c0014510 <HalInitialise()+0x1e>
c0014509:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0014510:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c0014516:	83 e0 01             	and    eax,0x1
c0014519:	a2 60 27 02 c0       	mov    ds:0xc0022760,al
c001451e:	e8 a9 02 00 00       	call   c00147cc <picOpen()>
c0014523:	80 3d 60 27 02 c0 00 	cmp    BYTE PTR ds:0xc0022760,0x0
c001452a:	74 0a                	je     c0014536 <HalInitialise()+0x44>
c001452c:	e8 e3 01 00 00       	call   c0014714 <picDisable()>
c0014531:	e8 02 63 00 00       	call   c001a838 <apicOpen()>
c0014536:	bb 0f 00 00 00       	mov    ebx,0xf
c001453b:	50                   	push   eax
c001453c:	6a 00                	push   0x0
c001453e:	68 ab 42 01 c0       	push   0xc00142ab
c0014543:	6a 00                	push   0x0
c0014545:	e8 d6 6c ff ff       	call   c000b220 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001454a:	83 c4 0c             	add    esp,0xc
c001454d:	6a 00                	push   0x0
c001454f:	68 ab 42 01 c0       	push   0xc00142ab
c0014554:	6a 01                	push   0x1
c0014556:	e8 c5 6c ff ff       	call   c000b220 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001455b:	83 c4 0c             	add    esp,0xc
c001455e:	6a 00                	push   0x0
c0014560:	68 21 3e 01 c0       	push   0xc0013e21
c0014565:	6a 02                	push   0x2
c0014567:	e8 b4 6c ff ff       	call   c000b220 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001456c:	83 c4 0c             	add    esp,0xc
c001456f:	6a 00                	push   0x0
c0014571:	68 ab 42 01 c0       	push   0xc00142ab
c0014576:	6a 03                	push   0x3
c0014578:	e8 a3 6c ff ff       	call   c000b220 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001457d:	83 c4 0c             	add    esp,0xc
c0014580:	6a 00                	push   0x0
c0014582:	68 ab 42 01 c0       	push   0xc00142ab
c0014587:	6a 04                	push   0x4
c0014589:	e8 92 6c ff ff       	call   c000b220 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001458e:	83 c4 0c             	add    esp,0xc
c0014591:	6a 00                	push   0x0
c0014593:	68 ab 42 01 c0       	push   0xc00142ab
c0014598:	6a 05                	push   0x5
c001459a:	e8 81 6c ff ff       	call   c000b220 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001459f:	83 c4 0c             	add    esp,0xc
c00145a2:	6a 00                	push   0x0
c00145a4:	68 df 42 01 c0       	push   0xc00142df
c00145a9:	6a 06                	push   0x6
c00145ab:	e8 70 6c ff ff       	call   c000b220 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00145b0:	83 c4 0c             	add    esp,0xc
c00145b3:	6a 00                	push   0x0
c00145b5:	68 3a 3e 01 c0       	push   0xc0013e3a
c00145ba:	6a 08                	push   0x8
c00145bc:	e8 5f 6c ff ff       	call   c000b220 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00145c1:	83 c4 0c             	add    esp,0xc
c00145c4:	6a 00                	push   0x0
c00145c6:	68 ab 42 01 c0       	push   0xc00142ab
c00145cb:	6a 09                	push   0x9
c00145cd:	e8 4e 6c ff ff       	call   c000b220 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00145d2:	83 c4 0c             	add    esp,0xc
c00145d5:	6a 00                	push   0x0
c00145d7:	68 ab 42 01 c0       	push   0xc00142ab
c00145dc:	6a 0a                	push   0xa
c00145de:	e8 3d 6c ff ff       	call   c000b220 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00145e3:	83 c4 0c             	add    esp,0xc
c00145e6:	6a 00                	push   0x0
c00145e8:	68 ab 42 01 c0       	push   0xc00142ab
c00145ed:	6a 0b                	push   0xb
c00145ef:	e8 2c 6c ff ff       	call   c000b220 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00145f4:	83 c4 0c             	add    esp,0xc
c00145f7:	6a 00                	push   0x0
c00145f9:	68 c0 41 01 c0       	push   0xc00141c0
c00145fe:	6a 0d                	push   0xd
c0014600:	e8 1b 6c ff ff       	call   c000b220 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014605:	83 c4 0c             	add    esp,0xc
c0014608:	6a 00                	push   0x0
c001460a:	68 25 42 01 c0       	push   0xc0014225
c001460f:	6a 0e                	push   0xe
c0014611:	e8 0a 6c ff ff       	call   c000b220 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014616:	83 c4 10             	add    esp,0x10
c0014619:	50                   	push   eax
c001461a:	6a 00                	push   0x0
c001461c:	68 ab 42 01 c0       	push   0xc00142ab
c0014621:	53                   	push   ebx
c0014622:	43                   	inc    ebx
c0014623:	e8 f8 6b ff ff       	call   c000b220 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014628:	83 c4 10             	add    esp,0x10
c001462b:	83 fb 1e             	cmp    ebx,0x1e
c001462e:	75 e9                	jne    c0014619 <HalInitialise()+0x127>
c0014630:	50                   	push   eax
c0014631:	6a 00                	push   0x0
c0014633:	68 a1 0d 01 c0       	push   0xc0010da1
c0014638:	6a 60                	push   0x60
c001463a:	e8 e1 6b ff ff       	call   c000b220 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001463f:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c0014644:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001464e:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0014655:	e8 c3 24 ff ff       	call   c0006b1d <malloc>
c001465a:	89 04 24             	mov    DWORD PTR [esp],eax
c001465d:	89 c3                	mov    ebx,eax
c001465f:	e8 30 09 00 00       	call   c0014f94 <RTC::RTC()>
c0014664:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001466e:	5a                   	pop    edx
c001466f:	59                   	pop    ecx
c0014670:	53                   	push   ebx
c0014671:	ff 35 08 f2 01 c0    	push   DWORD PTR ds:0xc001f208
c0014677:	e8 70 66 ff ff       	call   c000acec <Device::addChild(Device*)>
c001467c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001467e:	6a 00                	push   0x0
c0014680:	6a 00                	push   0x0
c0014682:	6a 00                	push   0x0
c0014684:	53                   	push   ebx
c0014685:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014688:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c001468d:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0014693:	83 c4 28             	add    esp,0x28
c0014696:	5b                   	pop    ebx
c0014697:	c3                   	ret    

c0014698 <HalMakeBeep(int)>:
c0014698:	53                   	push   ebx
c0014699:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001469d:	85 db                	test   ebx,ebx
c001469f:	75 07                	jne    c00146a8 <HalMakeBeep(int)+0x10>
c00146a1:	e4 61                	in     al,0x61
c00146a3:	83 e0 fc             	and    eax,0xfffffffc
c00146a6:	eb 26                	jmp    c00146ce <HalMakeBeep(int)+0x36>
c00146a8:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00146ad:	99                   	cdq    
c00146ae:	f7 fb                	idiv   ebx
c00146b0:	89 c1                	mov    ecx,eax
c00146b2:	b0 b6                	mov    al,0xb6
c00146b4:	e6 43                	out    0x43,al
c00146b6:	88 c8                	mov    al,cl
c00146b8:	e6 42                	out    0x42,al
c00146ba:	89 c8                	mov    eax,ecx
c00146bc:	c1 e8 08             	shr    eax,0x8
c00146bf:	e6 42                	out    0x42,al
c00146c1:	e4 61                	in     al,0x61
c00146c3:	88 c2                	mov    dl,al
c00146c5:	83 ca 03             	or     edx,0x3
c00146c8:	38 c2                	cmp    dl,al
c00146ca:	74 04                	je     c00146d0 <HalMakeBeep(int)+0x38>
c00146cc:	88 d0                	mov    al,dl
c00146ce:	e6 61                	out    0x61,al
c00146d0:	5b                   	pop    ebx
c00146d1:	c3                   	ret    

c00146d2 <HalGetRand()>:
c00146d2:	31 c0                	xor    eax,eax
c00146d4:	c3                   	ret    

c00146d5 <HalEndOfInterrupt(int)>:
c00146d5:	80 3d 60 27 02 c0 00 	cmp    BYTE PTR ds:0xc0022760,0x0
c00146dc:	74 23                	je     c0014701 <HalEndOfInterrupt(int)+0x2c>
c00146de:	83 ec 14             	sub    esp,0x14
c00146e1:	6a 1b                	push   0x1b
c00146e3:	ff 35 08 f2 01 c0    	push   DWORD PTR ds:0xc001f208
c00146e9:	e8 6c 1a ff ff       	call   c000615a <Computer::rdmsr(unsigned int)>
c00146ee:	25 00 f0 ff ff       	and    eax,0xfffff000
c00146f3:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00146fd:	83 c4 1c             	add    esp,0x1c
c0014700:	c3                   	ret    
c0014701:	e9 56 02 00 00       	jmp    c001495c <picEOI(int)>

c0014706 <HalRestart()>:
c0014706:	c3                   	ret    

c0014707 <HalShutdown()>:
c0014707:	c3                   	ret    

c0014708 <HalSleep()>:
c0014708:	c3                   	ret    
c0014709:	66 90                	xchg   ax,ax
c001470b:	90                   	nop

c001470c <picIoWait()>:
c001470c:	eb 00                	jmp    c001470e <picIoWait()+0x2>
c001470e:	eb 00                	jmp    c0014710 <picIoWait()+0x4>
c0014710:	90                   	nop
c0014711:	c3                   	ret    
c0014712:	66 90                	xchg   ax,ax

c0014714 <picDisable()>:
c0014714:	83 ec 10             	sub    esp,0x10
c0014717:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001471e:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0014723:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0014727:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001472c:	ee                   	out    dx,al
c001472d:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0014734:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0014739:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001473d:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0014742:	ee                   	out    dx,al
c0014743:	90                   	nop
c0014744:	83 c4 10             	add    esp,0x10
c0014747:	c3                   	ret    

c0014748 <picGetIRQReg(int)>:
c0014748:	83 ec 10             	sub    esp,0x10
c001474b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001474f:	25 ff 00 00 00       	and    eax,0xff
c0014754:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001475b:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001475f:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0014763:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0014768:	ee                   	out    dx,al
c0014769:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001476d:	25 ff 00 00 00       	and    eax,0xff
c0014772:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0014779:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001477d:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0014781:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0014786:	ee                   	out    dx,al
c0014787:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001478e:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0014793:	89 c2                	mov    edx,eax
c0014795:	ec                   	in     al,dx
c0014796:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001479a:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001479e:	25 ff 00 00 00       	and    eax,0xff
c00147a3:	c1 e0 08             	shl    eax,0x8
c00147a6:	89 c1                	mov    ecx,eax
c00147a8:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00147af:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00147b4:	89 c2                	mov    edx,eax
c00147b6:	ec                   	in     al,dx
c00147b7:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00147bb:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00147bf:	25 ff 00 00 00       	and    eax,0xff
c00147c4:	09 c8                	or     eax,ecx
c00147c6:	83 c4 10             	add    esp,0x10
c00147c9:	c3                   	ret    
c00147ca:	66 90                	xchg   ax,ax

c00147cc <picOpen()>:
c00147cc:	83 ec 50             	sub    esp,0x50
c00147cf:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00147d6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00147db:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00147df:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00147e3:	ee                   	out    dx,al
c00147e4:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00147eb:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00147f0:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00147f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00147f8:	ee                   	out    dx,al
c00147f9:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0014801:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0014809:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0014810:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014814:	89 c2                	mov    edx,eax
c0014816:	ec                   	in     al,dx
c0014817:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001481b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001481f:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0014823:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001482a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001482e:	89 c2                	mov    edx,eax
c0014830:	ec                   	in     al,dx
c0014831:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0014835:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0014839:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001483d:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0014844:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0014849:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001484d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014851:	ee                   	out    dx,al
c0014852:	e8 b5 fe ff ff       	call   c001470c <picIoWait()>
c0014857:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001485e:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0014863:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0014867:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001486b:	ee                   	out    dx,al
c001486c:	e8 9b fe ff ff       	call   c001470c <picIoWait()>
c0014871:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014875:	25 ff 00 00 00       	and    eax,0xff
c001487a:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0014881:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0014885:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0014889:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001488d:	ee                   	out    dx,al
c001488e:	e8 79 fe ff ff       	call   c001470c <picIoWait()>
c0014893:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0014897:	25 ff 00 00 00       	and    eax,0xff
c001489c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c00148a3:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00148a7:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c00148ab:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00148af:	ee                   	out    dx,al
c00148b0:	e8 57 fe ff ff       	call   c001470c <picIoWait()>
c00148b5:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c00148bc:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00148c1:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c00148c5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00148c9:	ee                   	out    dx,al
c00148ca:	e8 3d fe ff ff       	call   c001470c <picIoWait()>
c00148cf:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00148d6:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00148db:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00148df:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00148e3:	ee                   	out    dx,al
c00148e4:	e8 23 fe ff ff       	call   c001470c <picIoWait()>
c00148e9:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00148f0:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00148f5:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00148f9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00148fd:	ee                   	out    dx,al
c00148fe:	e8 09 fe ff ff       	call   c001470c <picIoWait()>
c0014903:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001490a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001490f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0014913:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014917:	ee                   	out    dx,al
c0014918:	e8 ef fd ff ff       	call   c001470c <picIoWait()>
c001491d:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0014921:	25 ff 00 00 00       	and    eax,0xff
c0014926:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001492d:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0014931:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0014935:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0014939:	ee                   	out    dx,al
c001493a:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c001493e:	25 ff 00 00 00       	and    eax,0xff
c0014943:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001494a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001494e:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0014952:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0014956:	ee                   	out    dx,al
c0014957:	90                   	nop
c0014958:	83 c4 50             	add    esp,0x50
c001495b:	c3                   	ret    

c001495c <picEOI(int)>:
c001495c:	83 ec 10             	sub    esp,0x10
c001495f:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0014964:	75 22                	jne    c0014988 <picEOI(int)+0x2c>
c0014966:	6a 0b                	push   0xb
c0014968:	e8 db fd ff ff       	call   c0014748 <picGetIRQReg(int)>
c001496d:	83 c4 04             	add    esp,0x4
c0014970:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0014975:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001497a:	25 ff ff 00 00       	and    eax,0xffff
c001497f:	25 80 00 00 00       	and    eax,0x80
c0014984:	74 72                	je     c00149f8 <picEOI(int)+0x9c>
c0014986:	66 90                	xchg   ax,ax
c0014988:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001498d:	75 31                	jne    c00149c0 <picEOI(int)+0x64>
c001498f:	6a 0b                	push   0xb
c0014991:	e8 b2 fd ff ff       	call   c0014748 <picGetIRQReg(int)>
c0014996:	83 c4 04             	add    esp,0x4
c0014999:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001499e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00149a2:	66 85 c0             	test   ax,ax
c00149a5:	78 19                	js     c00149c0 <picEOI(int)+0x64>
c00149a7:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c00149ae:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00149b3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00149b7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00149bc:	ee                   	out    dx,al
c00149bd:	eb 3d                	jmp    c00149fc <picEOI(int)+0xa0>
c00149bf:	90                   	nop
c00149c0:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00149c5:	7e 19                	jle    c00149e0 <picEOI(int)+0x84>
c00149c7:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00149ce:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00149d3:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00149d7:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00149dc:	ee                   	out    dx,al
c00149dd:	8d 76 00             	lea    esi,[esi+0x0]
c00149e0:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00149e7:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00149ec:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00149f0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00149f5:	ee                   	out    dx,al
c00149f6:	eb 04                	jmp    c00149fc <picEOI(int)+0xa0>
c00149f8:	90                   	nop
c00149f9:	8d 76 00             	lea    esi,[esi+0x0]
c00149fc:	83 c4 10             	add    esp,0x10
c00149ff:	c3                   	ret    

c0014a00 <RTC::open(int, int, void*)>:
c0014a00:	31 c0                	xor    eax,eax
c0014a02:	c3                   	ret    
c0014a03:	90                   	nop

c0014a04 <RTC::close(int, int, void*)>:
c0014a04:	31 c0                	xor    eax,eax
c0014a06:	c3                   	ret    
c0014a07:	90                   	nop

c0014a08 <RTC::timeInSecondsUTC()>:
c0014a08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a0c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0014a12:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0014a18:	c3                   	ret    
c0014a19:	90                   	nop

c0014a1a <RTC::timeInDatetimeUTC()>:
c0014a1a:	53                   	push   ebx
c0014a1b:	83 ec 14             	sub    esp,0x14
c0014a1e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014a22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a26:	8b 10                	mov    edx,DWORD PTR [eax]
c0014a28:	50                   	push   eax
c0014a29:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0014a2c:	83 c4 0c             	add    esp,0xc
c0014a2f:	52                   	push   edx
c0014a30:	50                   	push   eax
c0014a31:	53                   	push   ebx
c0014a32:	e8 29 60 ff ff       	call   c000aa60 <secondsToDatetime(unsigned long long)>
c0014a37:	89 d8                	mov    eax,ebx
c0014a39:	83 c4 14             	add    esp,0x14
c0014a3c:	5b                   	pop    ebx
c0014a3d:	c2 04 00             	ret    0x4

c0014a40 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0014a40:	56                   	push   esi
c0014a41:	53                   	push   ebx
c0014a42:	83 ec 14             	sub    esp,0x14
c0014a45:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014a49:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014a4b:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0014a4e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014a52:	52                   	push   edx
c0014a53:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014a57:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014a5b:	50                   	push   eax
c0014a5c:	e8 ff 5f ff ff       	call   c000aa60 <secondsToDatetime(unsigned long long)>
c0014a61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a65:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014a69:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014a6d:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0014a71:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014a75:	89 f0                	mov    eax,esi
c0014a77:	83 c4 20             	add    esp,0x20
c0014a7a:	5b                   	pop    ebx
c0014a7b:	5e                   	pop    esi
c0014a7c:	ff e0                	jmp    eax

c0014a7e <RTC::~RTC()>:
c0014a7e:	83 ec 0c             	sub    esp,0xc
c0014a81:	ba b0 e1 01 c0       	mov    edx,0xc001e1b0
c0014a86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014a8a:	89 10                	mov    DWORD PTR [eax],edx
c0014a8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014a90:	83 ec 0c             	sub    esp,0xc
c0014a93:	50                   	push   eax
c0014a94:	e8 4b 5d ff ff       	call   c000a7e4 <Clock::~Clock()>
c0014a99:	83 c4 10             	add    esp,0x10
c0014a9c:	90                   	nop
c0014a9d:	83 c4 0c             	add    esp,0xc
c0014aa0:	c3                   	ret    
c0014aa1:	90                   	nop

c0014aa2 <RTC::~RTC()>:
c0014aa2:	83 ec 0c             	sub    esp,0xc
c0014aa5:	83 ec 0c             	sub    esp,0xc
c0014aa8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014aac:	e8 cd ff ff ff       	call   c0014a7e <RTC::~RTC()>
c0014ab1:	83 c4 10             	add    esp,0x10
c0014ab4:	83 ec 08             	sub    esp,0x8
c0014ab7:	68 60 01 00 00       	push   0x160
c0014abc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ac0:	e8 f1 4c ff ff       	call   c00097b6 <operator delete(void*, unsigned long)>
c0014ac5:	83 c4 10             	add    esp,0x10
c0014ac8:	83 c4 0c             	add    esp,0xc
c0014acb:	c3                   	ret    

c0014acc <RTC::get_update_in_progress_flag()>:
c0014acc:	83 ec 14             	sub    esp,0x14
c0014acf:	6a 0a                	push   0xa
c0014ad1:	ff 35 08 f2 01 c0    	push   DWORD PTR ds:0xc001f208
c0014ad7:	e8 32 17 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014adc:	83 c4 1c             	add    esp,0x1c
c0014adf:	c0 e8 07             	shr    al,0x7
c0014ae2:	c3                   	ret    
c0014ae3:	90                   	nop

c0014ae4 <RTC::completeRTCRefresh()>:
c0014ae4:	55                   	push   ebp
c0014ae5:	57                   	push   edi
c0014ae6:	56                   	push   esi
c0014ae7:	53                   	push   ebx
c0014ae8:	83 ec 2c             	sub    esp,0x2c
c0014aeb:	8b 1d cc 17 02 c0    	mov    ebx,DWORD PTR ds:0xc00217cc
c0014af1:	83 ec 0c             	sub    esp,0xc
c0014af4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0014af8:	e8 cf ff ff ff       	call   c0014acc <RTC::get_update_in_progress_flag()>
c0014afd:	83 c4 10             	add    esp,0x10
c0014b00:	84 c0                	test   al,al
c0014b02:	74 0e                	je     c0014b12 <RTC::completeRTCRefresh()+0x2e>
c0014b04:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0014b0a:	3b 05 cc 17 02 c0    	cmp    eax,DWORD PTR ds:0xc00217cc
c0014b10:	73 df                	jae    c0014af1 <RTC::completeRTCRefresh()+0xd>
c0014b12:	55                   	push   ebp
c0014b13:	55                   	push   ebp
c0014b14:	6a 00                	push   0x0
c0014b16:	ff 35 08 f2 01 c0    	push   DWORD PTR ds:0xc001f208
c0014b1c:	e8 ed 16 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014b21:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0014b25:	58                   	pop    eax
c0014b26:	5a                   	pop    edx
c0014b27:	6a 02                	push   0x2
c0014b29:	ff 35 08 f2 01 c0    	push   DWORD PTR ds:0xc001f208
c0014b2f:	e8 da 16 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014b34:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0014b38:	59                   	pop    ecx
c0014b39:	5b                   	pop    ebx
c0014b3a:	6a 04                	push   0x4
c0014b3c:	ff 35 08 f2 01 c0    	push   DWORD PTR ds:0xc001f208
c0014b42:	e8 c7 16 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014b47:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0014b4b:	5e                   	pop    esi
c0014b4c:	5f                   	pop    edi
c0014b4d:	6a 07                	push   0x7
c0014b4f:	ff 35 08 f2 01 c0    	push   DWORD PTR ds:0xc001f208
c0014b55:	e8 b4 16 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014b5a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0014b5e:	5d                   	pop    ebp
c0014b5f:	58                   	pop    eax
c0014b60:	6a 08                	push   0x8
c0014b62:	ff 35 08 f2 01 c0    	push   DWORD PTR ds:0xc001f208
c0014b68:	e8 a1 16 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014b6d:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0014b71:	58                   	pop    eax
c0014b72:	5a                   	pop    edx
c0014b73:	6a 09                	push   0x9
c0014b75:	ff 35 08 f2 01 c0    	push   DWORD PTR ds:0xc001f208
c0014b7b:	e8 8e 16 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014b80:	83 c4 10             	add    esp,0x10
c0014b83:	0f b6 e8             	movzx  ebp,al
c0014b86:	8b 1d cc 17 02 c0    	mov    ebx,DWORD PTR ds:0xc00217cc
c0014b8c:	83 ec 0c             	sub    esp,0xc
c0014b8f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0014b93:	e8 34 ff ff ff       	call   c0014acc <RTC::get_update_in_progress_flag()>
c0014b98:	83 c4 10             	add    esp,0x10
c0014b9b:	84 c0                	test   al,al
c0014b9d:	74 0e                	je     c0014bad <RTC::completeRTCRefresh()+0xc9>
c0014b9f:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0014ba5:	3b 05 cc 17 02 c0    	cmp    eax,DWORD PTR ds:0xc00217cc
c0014bab:	73 df                	jae    c0014b8c <RTC::completeRTCRefresh()+0xa8>
c0014bad:	50                   	push   eax
c0014bae:	50                   	push   eax
c0014baf:	6a 00                	push   0x0
c0014bb1:	ff 35 08 f2 01 c0    	push   DWORD PTR ds:0xc001f208
c0014bb7:	e8 52 16 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014bbc:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0014bc0:	58                   	pop    eax
c0014bc1:	5a                   	pop    edx
c0014bc2:	6a 02                	push   0x2
c0014bc4:	ff 35 08 f2 01 c0    	push   DWORD PTR ds:0xc001f208
c0014bca:	e8 3f 16 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014bcf:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014bd3:	59                   	pop    ecx
c0014bd4:	5b                   	pop    ebx
c0014bd5:	6a 04                	push   0x4
c0014bd7:	ff 35 08 f2 01 c0    	push   DWORD PTR ds:0xc001f208
c0014bdd:	e8 2c 16 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014be2:	5e                   	pop    esi
c0014be3:	88 c3                	mov    bl,al
c0014be5:	5f                   	pop    edi
c0014be6:	6a 07                	push   0x7
c0014be8:	ff 35 08 f2 01 c0    	push   DWORD PTR ds:0xc001f208
c0014bee:	e8 1b 16 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014bf3:	89 c6                	mov    esi,eax
c0014bf5:	58                   	pop    eax
c0014bf6:	5a                   	pop    edx
c0014bf7:	6a 08                	push   0x8
c0014bf9:	ff 35 08 f2 01 c0    	push   DWORD PTR ds:0xc001f208
c0014bff:	e8 0a 16 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014c04:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0014c08:	59                   	pop    ecx
c0014c09:	5f                   	pop    edi
c0014c0a:	6a 09                	push   0x9
c0014c0c:	ff 35 08 f2 01 c0    	push   DWORD PTR ds:0xc001f208
c0014c12:	e8 f7 15 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014c17:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0014c1b:	0f b6 f8             	movzx  edi,al
c0014c1e:	83 c4 10             	add    esp,0x10
c0014c21:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0014c25:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0014c29:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0014c2d:	89 f1                	mov    ecx,esi
c0014c2f:	0f 94 c0             	sete   al
c0014c32:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0014c36:	0f 94 c2             	sete   dl
c0014c39:	21 d0                	and    eax,edx
c0014c3b:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0014c3f:	0f 94 c2             	sete   dl
c0014c42:	21 c2                	and    edx,eax
c0014c44:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0014c48:	0f 94 c0             	sete   al
c0014c4b:	21 d0                	and    eax,edx
c0014c4d:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0014c51:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0014c55:	0f 94 c1             	sete   cl
c0014c58:	84 c8                	test   al,cl
c0014c5a:	75 29                	jne    c0014c85 <RTC::completeRTCRefresh()+0x1a1>
c0014c5c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0014c60:	89 fd                	mov    ebp,edi
c0014c62:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0014c66:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0014c6a:	89 f0                	mov    eax,esi
c0014c6c:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0014c70:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0014c74:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014c78:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014c7c:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0014c80:	e9 01 ff ff ff       	jmp    c0014b86 <RTC::completeRTCRefresh()+0xa2>
c0014c85:	39 fd                	cmp    ebp,edi
c0014c87:	75 d3                	jne    c0014c5c <RTC::completeRTCRefresh()+0x178>
c0014c89:	55                   	push   ebp
c0014c8a:	55                   	push   ebp
c0014c8b:	6a 0b                	push   0xb
c0014c8d:	ff 35 08 f2 01 c0    	push   DWORD PTR ds:0xc001f208
c0014c93:	e8 76 15 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014c98:	83 c4 10             	add    esp,0x10
c0014c9b:	89 c5                	mov    ebp,eax
c0014c9d:	a8 04                	test   al,0x4
c0014c9f:	75 78                	jne    c0014d19 <RTC::completeRTCRefresh()+0x235>
c0014ca1:	b1 0a                	mov    cl,0xa
c0014ca3:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0014ca7:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014cab:	83 e2 0f             	and    edx,0xf
c0014cae:	c0 e8 04             	shr    al,0x4
c0014cb1:	c1 ef 04             	shr    edi,0x4
c0014cb4:	f6 e1                	mul    cl
c0014cb6:	6b ff 0a             	imul   edi,edi,0xa
c0014cb9:	01 d0                	add    eax,edx
c0014cbb:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0014cbf:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0014cc3:	83 e2 0f             	and    edx,0xf
c0014cc6:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0014cca:	c0 e8 04             	shr    al,0x4
c0014ccd:	f6 e1                	mul    cl
c0014ccf:	01 d0                	add    eax,edx
c0014cd1:	88 da                	mov    dl,bl
c0014cd3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014cd7:	83 e2 0f             	and    edx,0xf
c0014cda:	88 d8                	mov    al,bl
c0014cdc:	83 e3 80             	and    ebx,0xffffff80
c0014cdf:	c0 e8 04             	shr    al,0x4
c0014ce2:	83 e0 07             	and    eax,0x7
c0014ce5:	f6 e1                	mul    cl
c0014ce7:	01 d0                	add    eax,edx
c0014ce9:	89 f2                	mov    edx,esi
c0014ceb:	09 c3                	or     ebx,eax
c0014ced:	83 e2 0f             	and    edx,0xf
c0014cf0:	89 f0                	mov    eax,esi
c0014cf2:	c0 e8 04             	shr    al,0x4
c0014cf5:	f6 e1                	mul    cl
c0014cf7:	8d 34 02             	lea    esi,[edx+eax*1]
c0014cfa:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0014cfe:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0014d02:	83 e2 0f             	and    edx,0xf
c0014d05:	c0 e8 04             	shr    al,0x4
c0014d08:	f6 e1                	mul    cl
c0014d0a:	01 d0                	add    eax,edx
c0014d0c:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0014d10:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014d14:	83 e0 0f             	and    eax,0xf
c0014d17:	01 c7                	add    edi,eax
c0014d19:	83 e5 02             	and    ebp,0x2
c0014d1c:	75 14                	jne    c0014d32 <RTC::completeRTCRefresh()+0x24e>
c0014d1e:	84 db                	test   bl,bl
c0014d20:	79 10                	jns    c0014d32 <RTC::completeRTCRefresh()+0x24e>
c0014d22:	83 e3 7f             	and    ebx,0x7f
c0014d25:	b9 18 00 00 00       	mov    ecx,0x18
c0014d2a:	8d 43 0c             	lea    eax,[ebx+0xc]
c0014d2d:	99                   	cdq    
c0014d2e:	f7 f9                	idiv   ecx
c0014d30:	88 d3                	mov    bl,dl
c0014d32:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0014d38:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0014d3e:	77 06                	ja     c0014d46 <RTC::completeRTCRefresh()+0x262>
c0014d40:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0014d46:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0014d4b:	31 d2                	xor    edx,edx
c0014d4d:	c1 e1 10             	shl    ecx,0x10
c0014d50:	89 d7                	mov    edi,edx
c0014d52:	c1 e5 10             	shl    ebp,0x10
c0014d55:	31 c0                	xor    eax,eax
c0014d57:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0014d5d:	09 cf                	or     edi,ecx
c0014d5f:	89 fa                	mov    edx,edi
c0014d61:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0014d65:	88 da                	mov    dl,bl
c0014d67:	89 f3                	mov    ebx,esi
c0014d69:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0014d6d:	88 d8                	mov    al,bl
c0014d6f:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0014d73:	0f b7 c8             	movzx  ecx,ax
c0014d76:	09 e9                	or     ecx,ebp
c0014d78:	89 c8                	mov    eax,ecx
c0014d7a:	51                   	push   ecx
c0014d7b:	51                   	push   ecx
c0014d7c:	52                   	push   edx
c0014d7d:	50                   	push   eax
c0014d7e:	e8 50 5b ff ff       	call   c000a8d3 <datetimeToSeconds(datetime_t)>
c0014d83:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0014d87:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0014d8d:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0014d93:	83 c4 3c             	add    esp,0x3c
c0014d96:	5b                   	pop    ebx
c0014d97:	5e                   	pop    esi
c0014d98:	5f                   	pop    edi
c0014d99:	5d                   	pop    ebp
c0014d9a:	c3                   	ret    
c0014d9b:	90                   	nop

c0014d9c <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0014d9c:	55                   	push   ebp
c0014d9d:	57                   	push   edi
c0014d9e:	56                   	push   esi
c0014d9f:	53                   	push   ebx
c0014da0:	83 ec 30             	sub    esp,0x30
c0014da3:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0014da7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0014dab:	6a 00                	push   0x0
c0014dad:	6a 00                	push   0x0
c0014daf:	ff 35 08 f2 01 c0    	push   DWORD PTR ds:0xc001f208
c0014db5:	e8 6a 15 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c0014dba:	83 c4 0c             	add    esp,0xc
c0014dbd:	6a 00                	push   0x0
c0014dbf:	6a 02                	push   0x2
c0014dc1:	ff 35 08 f2 01 c0    	push   DWORD PTR ds:0xc001f208
c0014dc7:	e8 58 15 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c0014dcc:	31 d2                	xor    edx,edx
c0014dce:	89 f9                	mov    ecx,edi
c0014dd0:	89 f8                	mov    eax,edi
c0014dd2:	c1 e9 10             	shr    ecx,0x10
c0014dd5:	0f b6 c4             	movzx  eax,ah
c0014dd8:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0014ddc:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0014de0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014de4:	b9 64 00 00 00       	mov    ecx,0x64
c0014de9:	89 f0                	mov    eax,esi
c0014deb:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0014def:	89 f0                	mov    eax,esi
c0014df1:	0f b6 c4             	movzx  eax,ah
c0014df4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014df8:	89 f0                	mov    eax,esi
c0014dfa:	c1 e8 10             	shr    eax,0x10
c0014dfd:	66 f7 f1             	div    cx
c0014e00:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0014e05:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0014e0a:	59                   	pop    ecx
c0014e0b:	5b                   	pop    ebx
c0014e0c:	89 fb                	mov    ebx,edi
c0014e0e:	6a 0b                	push   0xb
c0014e10:	ff 35 08 f2 01 c0    	push   DWORD PTR ds:0xc001f208
c0014e16:	e8 f3 13 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014e1b:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0014e1f:	83 c4 10             	add    esp,0x10
c0014e22:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0014e27:	75 74                	jne    c0014e9d <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0014e29:	b2 0a                	mov    dl,0xa
c0014e2b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014e2f:	0f b6 c1             	movzx  eax,cl
c0014e32:	f6 f2                	div    dl
c0014e34:	88 c3                	mov    bl,al
c0014e36:	88 e0                	mov    al,ah
c0014e38:	c1 e3 04             	shl    ebx,0x4
c0014e3b:	09 c3                	or     ebx,eax
c0014e3d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0014e42:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0014e46:	f6 f2                	div    dl
c0014e48:	88 c1                	mov    cl,al
c0014e4a:	88 e0                	mov    al,ah
c0014e4c:	c1 e1 04             	shl    ecx,0x4
c0014e4f:	09 c1                	or     ecx,eax
c0014e51:	89 f8                	mov    eax,edi
c0014e53:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0014e57:	0f b6 c0             	movzx  eax,al
c0014e5a:	f6 f2                	div    dl
c0014e5c:	88 c3                	mov    bl,al
c0014e5e:	88 e0                	mov    al,ah
c0014e60:	c1 e3 04             	shl    ebx,0x4
c0014e63:	09 c3                	or     ebx,eax
c0014e65:	89 f0                	mov    eax,esi
c0014e67:	0f b6 c0             	movzx  eax,al
c0014e6a:	f6 f2                	div    dl
c0014e6c:	88 c1                	mov    cl,al
c0014e6e:	88 e0                	mov    al,ah
c0014e70:	c1 e1 04             	shl    ecx,0x4
c0014e73:	09 c1                	or     ecx,eax
c0014e75:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0014e7a:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c0014e7e:	f6 f2                	div    dl
c0014e80:	88 c1                	mov    cl,al
c0014e82:	88 e0                	mov    al,ah
c0014e84:	c1 e1 04             	shl    ecx,0x4
c0014e87:	09 c1                	or     ecx,eax
c0014e89:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c0014e8e:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0014e92:	f6 f2                	div    dl
c0014e94:	89 c5                	mov    ebp,eax
c0014e96:	88 e0                	mov    al,ah
c0014e98:	c1 e5 04             	shl    ebp,0x4
c0014e9b:	09 c5                	or     ebp,eax
c0014e9d:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c0014ea2:	75 17                	jne    c0014ebb <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0014ea4:	80 fb 0b             	cmp    bl,0xb
c0014ea7:	76 0c                	jbe    c0014eb5 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c0014ea9:	80 eb 0c             	sub    bl,0xc
c0014eac:	75 02                	jne    c0014eb0 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0014eae:	b3 0c                	mov    bl,0xc
c0014eb0:	83 cb 80             	or     ebx,0xffffff80
c0014eb3:	eb 06                	jmp    c0014ebb <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0014eb5:	84 db                	test   bl,bl
c0014eb7:	75 02                	jne    c0014ebb <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0014eb9:	b3 0c                	mov    bl,0xc
c0014ebb:	0f b6 db             	movzx  ebx,bl
c0014ebe:	50                   	push   eax
c0014ebf:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0014ec4:	50                   	push   eax
c0014ec5:	6a 00                	push   0x0
c0014ec7:	ff 35 08 f2 01 c0    	push   DWORD PTR ds:0xc001f208
c0014ecd:	e8 52 14 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c0014ed2:	83 c4 0c             	add    esp,0xc
c0014ed5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0014eda:	50                   	push   eax
c0014edb:	6a 02                	push   0x2
c0014edd:	ff 35 08 f2 01 c0    	push   DWORD PTR ds:0xc001f208
c0014ee3:	e8 3c 14 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c0014ee8:	83 c4 0c             	add    esp,0xc
c0014eeb:	53                   	push   ebx
c0014eec:	6a 04                	push   0x4
c0014eee:	ff 35 08 f2 01 c0    	push   DWORD PTR ds:0xc001f208
c0014ef4:	e8 2b 14 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c0014ef9:	83 c4 0c             	add    esp,0xc
c0014efc:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0014f01:	50                   	push   eax
c0014f02:	6a 07                	push   0x7
c0014f04:	ff 35 08 f2 01 c0    	push   DWORD PTR ds:0xc001f208
c0014f0a:	e8 15 14 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c0014f0f:	83 c4 0c             	add    esp,0xc
c0014f12:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0014f17:	50                   	push   eax
c0014f18:	6a 08                	push   0x8
c0014f1a:	ff 35 08 f2 01 c0    	push   DWORD PTR ds:0xc001f208
c0014f20:	e8 ff 13 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c0014f25:	83 c4 0c             	add    esp,0xc
c0014f28:	89 e8                	mov    eax,ebp
c0014f2a:	0f b6 e8             	movzx  ebp,al
c0014f2d:	55                   	push   ebp
c0014f2e:	6a 09                	push   0x9
c0014f30:	ff 35 08 f2 01 c0    	push   DWORD PTR ds:0xc001f208
c0014f36:	e8 e9 13 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c0014f3b:	5a                   	pop    edx
c0014f3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0014f40:	e8 9f fb ff ff       	call   c0014ae4 <RTC::completeRTCRefresh()>
c0014f45:	83 c4 3c             	add    esp,0x3c
c0014f48:	b0 01                	mov    al,0x1
c0014f4a:	5b                   	pop    ebx
c0014f4b:	5e                   	pop    esi
c0014f4c:	5f                   	pop    edi
c0014f4d:	5d                   	pop    ebp
c0014f4e:	c3                   	ret    

c0014f4f <rtcIRQHandler(regs*, void*)>:
c0014f4f:	53                   	push   ebx
c0014f50:	83 ec 10             	sub    esp,0x10
c0014f53:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014f57:	6a 0c                	push   0xc
c0014f59:	ff 35 08 f2 01 c0    	push   DWORD PTR ds:0xc001f208
c0014f5f:	e8 aa 12 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014f64:	83 c4 10             	add    esp,0x10
c0014f67:	84 c0                	test   al,al
c0014f69:	79 24                	jns    c0014f8f <rtcIRQHandler(regs*, void*)+0x40>
c0014f6b:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0014f72:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0014f79:	66 ff 05 74 27 02 c0 	inc    WORD PTR ds:0xc0022774
c0014f80:	75 0d                	jne    c0014f8f <rtcIRQHandler(regs*, void*)+0x40>
c0014f82:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0014f86:	83 c4 08             	add    esp,0x8
c0014f89:	5b                   	pop    ebx
c0014f8a:	e9 55 fb ff ff       	jmp    c0014ae4 <RTC::completeRTCRefresh()>
c0014f8f:	83 c4 08             	add    esp,0x8
c0014f92:	5b                   	pop    ebx
c0014f93:	c3                   	ret    

c0014f94 <RTC::RTC()>:
c0014f94:	83 ec 1c             	sub    esp,0x1c
c0014f97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f9b:	83 ec 08             	sub    esp,0x8
c0014f9e:	68 93 e1 01 c0       	push   0xc001e193
c0014fa3:	50                   	push   eax
c0014fa4:	e8 05 58 ff ff       	call   c000a7ae <Clock::Clock(char const*)>
c0014fa9:	83 c4 10             	add    esp,0x10
c0014fac:	ba b0 e1 01 c0       	mov    edx,0xc001e1b0
c0014fb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fb5:	89 10                	mov    DWORD PTR [eax],edx
c0014fb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fbb:	83 ec 0c             	sub    esp,0xc
c0014fbe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014fc2:	6a 01                	push   0x1
c0014fc4:	68 4f 4f 01 c0       	push   0xc0014f4f
c0014fc9:	6a 08                	push   0x8
c0014fcb:	50                   	push   eax
c0014fcc:	e8 c7 5c ff ff       	call   c000ac98 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0014fd1:	83 c4 20             	add    esp,0x20
c0014fd4:	89 c2                	mov    edx,eax
c0014fd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fda:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0014fe0:	fa                   	cli    
c0014fe1:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c0014fe6:	40                   	inc    eax
c0014fe7:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c0014fec:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c0014ff1:	83 ec 08             	sub    esp,0x8
c0014ff4:	6a 0b                	push   0xb
c0014ff6:	50                   	push   eax
c0014ff7:	e8 12 12 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014ffc:	83 c4 10             	add    esp,0x10
c0014fff:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015003:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c0015008:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001500c:	83 ca 10             	or     edx,0x10
c001500f:	81 e2 ff 00 00 00    	and    edx,0xff
c0015015:	83 ec 04             	sub    esp,0x4
c0015018:	52                   	push   edx
c0015019:	6a 0b                	push   0xb
c001501b:	50                   	push   eax
c001501c:	e8 03 13 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015021:	83 c4 10             	add    esp,0x10
c0015024:	83 ec 0c             	sub    esp,0xc
c0015027:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001502b:	e8 b4 fa ff ff       	call   c0014ae4 <RTC::completeRTCRefresh()>
c0015030:	83 c4 10             	add    esp,0x10
c0015033:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c0015038:	48                   	dec    eax
c0015039:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c001503e:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c0015043:	85 c0                	test   eax,eax
c0015045:	75 01                	jne    c0015048 <RTC::RTC()+0xb4>
c0015047:	fb                   	sti    
c0015048:	90                   	nop
c0015049:	83 c4 1c             	add    esp,0x1c
c001504c:	c3                   	ret    
c001504d:	66 90                	xchg   ax,ax
c001504f:	90                   	nop

c0015050 <HalConsoleScroll(int, int)>:
c0015050:	83 ec 10             	sub    esp,0x10
c0015053:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001505b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0015063:	90                   	nop
c0015064:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0015069:	0f 8f e1 00 00 00    	jg     c0015150 <HalConsoleScroll(int, int)+0x100>
c001506f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015077:	90                   	nop
c0015078:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0015080:	0f 8f be 00 00 00    	jg     c0015144 <HalConsoleScroll(int, int)+0xf4>
c0015086:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001508a:	89 d0                	mov    eax,edx
c001508c:	c1 e0 02             	shl    eax,0x2
c001508f:	01 d0                	add    eax,edx
c0015091:	c1 e0 05             	shl    eax,0x5
c0015094:	89 c2                	mov    edx,eax
c0015096:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001509a:	01 d0                	add    eax,edx
c001509c:	89 c2                	mov    edx,eax
c001509e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00150a2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00150a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00150a9:	89 d0                	mov    eax,edx
c00150ab:	c1 e0 02             	shl    eax,0x2
c00150ae:	01 d0                	add    eax,edx
c00150b0:	c1 e0 05             	shl    eax,0x5
c00150b3:	89 c2                	mov    edx,eax
c00150b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00150b9:	01 d0                	add    eax,edx
c00150bb:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c00150c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00150c5:	01 c2                	add    edx,eax
c00150c7:	8a 01                	mov    al,BYTE PTR [ecx]
c00150c9:	88 02                	mov    BYTE PTR [edx],al
c00150cb:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00150d0:	75 66                	jne    c0015138 <HalConsoleScroll(int, int)+0xe8>
c00150d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00150d6:	83 e0 01             	and    eax,0x1
c00150d9:	74 39                	je     c0015114 <HalConsoleScroll(int, int)+0xc4>
c00150db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00150df:	83 e0 0f             	and    eax,0xf
c00150e2:	88 c2                	mov    dl,al
c00150e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150e8:	c1 e0 04             	shl    eax,0x4
c00150eb:	88 d1                	mov    cl,dl
c00150ed:	09 c1                	or     ecx,eax
c00150ef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00150f3:	89 d0                	mov    eax,edx
c00150f5:	c1 e0 02             	shl    eax,0x2
c00150f8:	01 d0                	add    eax,edx
c00150fa:	c1 e0 05             	shl    eax,0x5
c00150fd:	89 c2                	mov    edx,eax
c00150ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015103:	01 d0                	add    eax,edx
c0015105:	89 c2                	mov    edx,eax
c0015107:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001510b:	01 d0                	add    eax,edx
c001510d:	88 ca                	mov    dl,cl
c001510f:	88 10                	mov    BYTE PTR [eax],dl
c0015111:	eb 25                	jmp    c0015138 <HalConsoleScroll(int, int)+0xe8>
c0015113:	90                   	nop
c0015114:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015118:	89 d0                	mov    eax,edx
c001511a:	c1 e0 02             	shl    eax,0x2
c001511d:	01 d0                	add    eax,edx
c001511f:	c1 e0 05             	shl    eax,0x5
c0015122:	89 c2                	mov    edx,eax
c0015124:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015128:	01 d0                	add    eax,edx
c001512a:	89 c2                	mov    edx,eax
c001512c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015130:	01 d0                	add    eax,edx
c0015132:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0015135:	8d 76 00             	lea    esi,[esi+0x0]
c0015138:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001513c:	e9 37 ff ff ff       	jmp    c0015078 <HalConsoleScroll(int, int)+0x28>
c0015141:	8d 76 00             	lea    esi,[esi+0x0]
c0015144:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0015148:	e9 17 ff ff ff       	jmp    c0015064 <HalConsoleScroll(int, int)+0x14>
c001514d:	8d 76 00             	lea    esi,[esi+0x0]
c0015150:	90                   	nop
c0015151:	83 c4 10             	add    esp,0x10
c0015154:	c3                   	ret    
c0015155:	8d 76 00             	lea    esi,[esi+0x0]

c0015158 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0015158:	83 ec 14             	sub    esp,0x14
c001515b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001515f:	88 04 24             	mov    BYTE PTR [esp],al
c0015162:	8a 04 24             	mov    al,BYTE PTR [esp]
c0015165:	25 ff 00 00 00       	and    eax,0xff
c001516a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001516e:	89 d1                	mov    ecx,edx
c0015170:	83 e1 0f             	and    ecx,0xf
c0015173:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015177:	c1 e2 04             	shl    edx,0x4
c001517a:	81 e2 ff 00 00 00    	and    edx,0xff
c0015180:	09 ca                	or     edx,ecx
c0015182:	c1 e2 08             	shl    edx,0x8
c0015185:	09 d0                	or     eax,edx
c0015187:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001518c:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0015194:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015198:	89 d0                	mov    eax,edx
c001519a:	c1 e0 02             	shl    eax,0x2
c001519d:	01 d0                	add    eax,edx
c001519f:	c1 e0 04             	shl    eax,0x4
c00151a2:	89 c2                	mov    edx,eax
c00151a4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00151a8:	01 d0                	add    eax,edx
c00151aa:	01 c0                	add    eax,eax
c00151ac:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00151b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00151b4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00151b9:	66 89 02             	mov    WORD PTR [edx],ax
c00151bc:	90                   	nop
c00151bd:	83 c4 14             	add    esp,0x14
c00151c0:	c3                   	ret    
c00151c1:	8d 76 00             	lea    esi,[esi+0x0]

c00151c4 <HalConsoleCursorUpdate(int, int)>:
c00151c4:	83 ec 20             	sub    esp,0x20
c00151c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00151cb:	89 c2                	mov    edx,eax
c00151cd:	89 d0                	mov    eax,edx
c00151cf:	c1 e0 02             	shl    eax,0x2
c00151d2:	01 d0                	add    eax,edx
c00151d4:	c1 e0 04             	shl    eax,0x4
c00151d7:	89 c2                	mov    edx,eax
c00151d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00151dd:	01 d0                	add    eax,edx
c00151df:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00151e4:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00151eb:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c00151f0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00151f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00151f8:	ee                   	out    dx,al
c00151f9:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00151fe:	25 ff 00 00 00       	and    eax,0xff
c0015203:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001520a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001520e:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015212:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015216:	ee                   	out    dx,al
c0015217:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001521e:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0015223:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015227:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001522b:	ee                   	out    dx,al
c001522c:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0015231:	66 c1 e8 08          	shr    ax,0x8
c0015235:	25 ff 00 00 00       	and    eax,0xff
c001523a:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0015241:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015245:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015249:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001524d:	ee                   	out    dx,al
c001524e:	90                   	nop
c001524f:	83 c4 20             	add    esp,0x20
c0015252:	c3                   	ret    
c0015253:	90                   	nop

c0015254 <FAT::getName()>:
c0015254:	b8 e4 e1 01 c0       	mov    eax,0xc001e1e4
c0015259:	c3                   	ret    
c001525a:	66 90                	xchg   ax,ax

c001525c <FAT::tell(void*, unsigned long long*)>:
c001525c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0015261:	75 09                	jne    c001526c <FAT::tell(void*, unsigned long long*)+0x10>
c0015263:	b8 04 00 00 00       	mov    eax,0x4
c0015268:	c3                   	ret    
c0015269:	8d 76 00             	lea    esi,[esi+0x0]
c001526c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015271:	75 09                	jne    c001527c <FAT::tell(void*, unsigned long long*)+0x20>
c0015273:	b8 04 00 00 00       	mov    eax,0x4
c0015278:	c3                   	ret    
c0015279:	8d 76 00             	lea    esi,[esi+0x0]
c001527c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015280:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015283:	ba 00 00 00 00       	mov    edx,0x0
c0015288:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001528c:	89 01                	mov    DWORD PTR [ecx],eax
c001528e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015291:	b8 00 00 00 00       	mov    eax,0x0
c0015296:	c3                   	ret    
c0015297:	90                   	nop

c0015298 <FAT::stat(void*, unsigned long long*)>:
c0015298:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001529d:	75 09                	jne    c00152a8 <FAT::stat(void*, unsigned long long*)+0x10>
c001529f:	b8 04 00 00 00       	mov    eax,0x4
c00152a4:	c3                   	ret    
c00152a5:	8d 76 00             	lea    esi,[esi+0x0]
c00152a8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00152ad:	75 09                	jne    c00152b8 <FAT::stat(void*, unsigned long long*)+0x20>
c00152af:	b8 04 00 00 00       	mov    eax,0x4
c00152b4:	c3                   	ret    
c00152b5:	8d 76 00             	lea    esi,[esi+0x0]
c00152b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00152bc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00152bf:	ba 00 00 00 00       	mov    edx,0x0
c00152c4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00152c8:	89 01                	mov    DWORD PTR [ecx],eax
c00152ca:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00152cd:	b8 00 00 00 00       	mov    eax,0x0
c00152d2:	c3                   	ret    
c00152d3:	90                   	nop

c00152d4 <FAT::~FAT()>:
c00152d4:	83 ec 0c             	sub    esp,0xc
c00152d7:	ba 30 e2 01 c0       	mov    edx,0xc001e230
c00152dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00152e0:	89 10                	mov    DWORD PTR [eax],edx
c00152e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00152e6:	83 ec 0c             	sub    esp,0xc
c00152e9:	50                   	push   eax
c00152ea:	e8 03 49 ff ff       	call   c0009bf2 <Filesystem::~Filesystem()>
c00152ef:	83 c4 10             	add    esp,0x10
c00152f2:	90                   	nop
c00152f3:	83 c4 0c             	add    esp,0xc
c00152f6:	c3                   	ret    
c00152f7:	90                   	nop

c00152f8 <FAT::~FAT()>:
c00152f8:	83 ec 0c             	sub    esp,0xc
c00152fb:	83 ec 0c             	sub    esp,0xc
c00152fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015302:	e8 cd ff ff ff       	call   c00152d4 <FAT::~FAT()>
c0015307:	83 c4 10             	add    esp,0x10
c001530a:	83 ec 08             	sub    esp,0x8
c001530d:	6a 08                	push   0x8
c001530f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015313:	e8 9e 44 ff ff       	call   c00097b6 <operator delete(void*, unsigned long)>
c0015318:	83 c4 10             	add    esp,0x10
c001531b:	83 c4 0c             	add    esp,0xc
c001531e:	c3                   	ret    
c001531f:	90                   	nop

c0015320 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0015320:	83 ec 1c             	sub    esp,0x1c
c0015323:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001532a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001532f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015333:	8b 04 85 a0 27 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd860]
c001533a:	83 f8 ff             	cmp    eax,0xffffffff
c001533d:	75 35                	jne    c0015374 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001533f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015343:	88 c2                	mov    dl,al
c0015345:	a1 80 27 02 c0       	mov    eax,ds:0xc0022780
c001534a:	01 d0                	add    eax,edx
c001534c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0015350:	8b 15 80 27 02 c0    	mov    edx,DWORD PTR ds:0xc0022780
c0015356:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001535a:	89 14 85 a0 27 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd860],edx
c0015361:	a1 80 27 02 c0       	mov    eax,ds:0xc0022780
c0015366:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001536a:	89 14 85 20 28 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd7e0],edx
c0015371:	eb 19                	jmp    c001538c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0015373:	90                   	nop
c0015374:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015378:	88 c2                	mov    dl,al
c001537a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001537e:	8b 04 85 a0 27 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd860]
c0015385:	01 d0                	add    eax,edx
c0015387:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001538b:	90                   	nop
c001538c:	83 ec 04             	sub    esp,0x4
c001538f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015397:	8d 44 24 15          	lea    eax,[esp+0x15]
c001539b:	50                   	push   eax
c001539c:	e8 e0 f8 fe ff       	call   c0004c81 <f_getlabel>
c00153a1:	83 c4 10             	add    esp,0x10
c00153a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00153a8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00153ad:	75 09                	jne    c00153b8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00153af:	b8 00 00 00 00       	mov    eax,0x0
c00153b4:	eb 0a                	jmp    c00153c0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00153b6:	66 90                	xchg   ax,ax
c00153b8:	b8 01 00 00 00       	mov    eax,0x1
c00153bd:	8d 76 00             	lea    esi,[esi+0x0]
c00153c0:	83 c4 1c             	add    esp,0x1c
c00153c3:	c3                   	ret    

c00153c4 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00153c4:	57                   	push   edi
c00153c5:	83 ec 58             	sub    esp,0x58
c00153c8:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00153d0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00153d4:	b8 00 00 00 00       	mov    eax,0x0
c00153d9:	b9 0f 00 00 00       	mov    ecx,0xf
c00153de:	fc                   	cld    
c00153df:	89 d7                	mov    edi,edx
c00153e1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00153e3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00153e7:	8b 04 85 a0 27 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd860]
c00153ee:	83 f8 ff             	cmp    eax,0xffffffff
c00153f1:	75 35                	jne    c0015428 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c00153f3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00153f7:	88 c2                	mov    dl,al
c00153f9:	a1 80 27 02 c0       	mov    eax,ds:0xc0022780
c00153fe:	01 d0                	add    eax,edx
c0015400:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015404:	8b 15 80 27 02 c0    	mov    edx,DWORD PTR ds:0xc0022780
c001540a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001540e:	89 14 85 a0 27 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd860],edx
c0015415:	a1 80 27 02 c0       	mov    eax,ds:0xc0022780
c001541a:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001541e:	89 14 85 20 28 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd7e0],edx
c0015425:	eb 19                	jmp    c0015440 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0015427:	90                   	nop
c0015428:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001542c:	88 c2                	mov    dl,al
c001542e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0015432:	8b 04 85 a0 27 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd860]
c0015439:	01 d0                	add    eax,edx
c001543b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001543f:	90                   	nop
c0015440:	83 ec 08             	sub    esp,0x8
c0015443:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0015447:	8d 44 24 18          	lea    eax,[esp+0x18]
c001544b:	50                   	push   eax
c001544c:	e8 8f b3 fe ff       	call   c00007e0 <strcat>
c0015451:	83 c4 10             	add    esp,0x10
c0015454:	83 ec 0c             	sub    esp,0xc
c0015457:	8d 44 24 18          	lea    eax,[esp+0x18]
c001545b:	50                   	push   eax
c001545c:	e8 71 f9 fe ff       	call   c0004dd2 <f_setlabel>
c0015461:	83 c4 10             	add    esp,0x10
c0015464:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0015468:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001546d:	75 09                	jne    c0015478 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001546f:	b8 00 00 00 00       	mov    eax,0x0
c0015474:	eb 0a                	jmp    c0015480 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0015476:	66 90                	xchg   ax,ax
c0015478:	b8 01 00 00 00       	mov    eax,0x1
c001547d:	8d 76 00             	lea    esi,[esi+0x0]
c0015480:	83 c4 58             	add    esp,0x58
c0015483:	5f                   	pop    edi
c0015484:	c3                   	ret    
c0015485:	90                   	nop
c0015486:	66 90                	xchg   ax,ax

c0015488 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0015488:	83 ec 2c             	sub    esp,0x2c
c001548b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0015493:	83 ec 08             	sub    esp,0x8
c0015496:	68 08 e2 01 c0       	push   0xc001e208
c001549b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001549f:	e8 5c b2 fe ff       	call   c0000700 <strcmp>
c00154a4:	83 c4 10             	add    esp,0x10
c00154a7:	85 c0                	test   eax,eax
c00154a9:	0f 94 c0             	sete   al
c00154ac:	84 c0                	test   al,al
c00154ae:	74 10                	je     c00154c0 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00154b0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00154b8:	e9 b3 00 00 00       	jmp    c0015570 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00154bd:	8d 76 00             	lea    esi,[esi+0x0]
c00154c0:	83 ec 08             	sub    esp,0x8
c00154c3:	68 fa e1 01 c0       	push   0xc001e1fa
c00154c8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00154cc:	e8 2f b2 fe ff       	call   c0000700 <strcmp>
c00154d1:	83 c4 10             	add    esp,0x10
c00154d4:	85 c0                	test   eax,eax
c00154d6:	0f 94 c0             	sete   al
c00154d9:	84 c0                	test   al,al
c00154db:	74 0f                	je     c00154ec <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c00154dd:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00154e5:	e9 86 00 00 00       	jmp    c0015570 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00154ea:	66 90                	xchg   ax,ax
c00154ec:	83 ec 08             	sub    esp,0x8
c00154ef:	68 00 e2 01 c0       	push   0xc001e200
c00154f4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00154f8:	e8 03 b2 fe ff       	call   c0000700 <strcmp>
c00154fd:	83 c4 10             	add    esp,0x10
c0015500:	85 c0                	test   eax,eax
c0015502:	0f 94 c0             	sete   al
c0015505:	84 c0                	test   al,al
c0015507:	74 0b                	je     c0015514 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c0015509:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0015511:	eb 5d                	jmp    c0015570 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0015513:	90                   	nop
c0015514:	83 ec 08             	sub    esp,0x8
c0015517:	68 bc c2 01 c0       	push   0xc001c2bc
c001551c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015520:	e8 db b1 fe ff       	call   c0000700 <strcmp>
c0015525:	83 c4 10             	add    esp,0x10
c0015528:	85 c0                	test   eax,eax
c001552a:	0f 94 c0             	sete   al
c001552d:	84 c0                	test   al,al
c001552f:	74 0b                	je     c001553c <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0015531:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0015539:	eb 35                	jmp    c0015570 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001553b:	90                   	nop
c001553c:	83 ec 08             	sub    esp,0x8
c001553f:	68 06 e2 01 c0       	push   0xc001e206
c0015544:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015548:	e8 b3 b1 fe ff       	call   c0000700 <strcmp>
c001554d:	83 c4 10             	add    esp,0x10
c0015550:	85 c0                	test   eax,eax
c0015552:	0f 94 c0             	sete   al
c0015555:	84 c0                	test   al,al
c0015557:	74 0b                	je     c0015564 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c0015559:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0015561:	eb 0d                	jmp    c0015570 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0015563:	90                   	nop
c0015564:	b8 08 00 00 00       	mov    eax,0x8
c0015569:	e9 ea 00 00 00       	jmp    c0015658 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001556e:	66 90                	xchg   ax,ax
c0015570:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0015577:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001557c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015580:	8b 04 85 a0 27 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd860]
c0015587:	83 f8 ff             	cmp    eax,0xffffffff
c001558a:	75 34                	jne    c00155c0 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001558c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0015590:	88 c2                	mov    dl,al
c0015592:	a1 80 27 02 c0       	mov    eax,ds:0xc0022780
c0015597:	01 d0                	add    eax,edx
c0015599:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001559d:	8b 15 80 27 02 c0    	mov    edx,DWORD PTR ds:0xc0022780
c00155a3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00155a7:	89 14 85 a0 27 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd860],edx
c00155ae:	a1 80 27 02 c0       	mov    eax,ds:0xc0022780
c00155b3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00155b7:	89 14 85 20 28 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd7e0],edx
c00155be:	eb 18                	jmp    c00155d8 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c00155c0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00155c4:	88 c2                	mov    dl,al
c00155c6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00155ca:	8b 04 85 a0 27 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd860]
c00155d1:	01 d0                	add    eax,edx
c00155d3:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00155d7:	90                   	nop
c00155d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00155dc:	88 04 24             	mov    BYTE PTR [esp],al
c00155df:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00155e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00155e7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00155ef:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00155f4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00155fc:	83 ec 0c             	sub    esp,0xc
c00155ff:	68 00 20 00 00       	push   0x2000
c0015604:	e8 14 15 ff ff       	call   c0006b1d <malloc>
c0015609:	83 c4 10             	add    esp,0x10
c001560c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015610:	68 00 20 00 00       	push   0x2000
c0015615:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015619:	8d 44 24 08          	lea    eax,[esp+0x8]
c001561d:	50                   	push   eax
c001561e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0015622:	50                   	push   eax
c0015623:	e8 9a fa fe ff       	call   c00050c2 <f_mkfs>
c0015628:	83 c4 10             	add    esp,0x10
c001562b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001562f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0015634:	75 0a                	jne    c0015640 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c0015636:	b8 00 00 00 00       	mov    eax,0x0
c001563b:	eb 1b                	jmp    c0015658 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001563d:	8d 76 00             	lea    esi,[esi+0x0]
c0015640:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0015645:	75 09                	jne    c0015650 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0015647:	b8 09 00 00 00       	mov    eax,0x9
c001564c:	eb 0a                	jmp    c0015658 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001564e:	66 90                	xchg   ax,ax
c0015650:	b8 01 00 00 00       	mov    eax,0x1
c0015655:	8d 76 00             	lea    esi,[esi+0x0]
c0015658:	83 c4 2c             	add    esp,0x2c
c001565b:	c3                   	ret    

c001565c <FAT::tryMount(LogicalDisk*, int)>:
c001565c:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0015662:	a1 80 27 02 c0       	mov    eax,ds:0xc0022780
c0015667:	83 f8 14             	cmp    eax,0x14
c001566a:	75 18                	jne    c0015684 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001566c:	83 ec 0c             	sub    esp,0xc
c001566f:	68 0c e2 01 c0       	push   0xc001e20c
c0015674:	e8 82 9d ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c0015679:	83 c4 10             	add    esp,0x10
c001567c:	b0 00                	mov    al,0x0
c001567e:	e9 e9 01 00 00       	jmp    c001586c <FAT::tryMount(LogicalDisk*, int)+0x210>
c0015683:	90                   	nop
c0015684:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001568b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0015691:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015697:	3d 00 02 00 00       	cmp    eax,0x200
c001569c:	74 0a                	je     c00156a8 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001569e:	b0 00                	mov    al,0x0
c00156a0:	e9 c7 01 00 00       	jmp    c001586c <FAT::tryMount(LogicalDisk*, int)+0x210>
c00156a5:	8d 76 00             	lea    esi,[esi+0x0]
c00156a8:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00156b0:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00156b7:	8b 04 85 a0 27 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd860]
c00156be:	83 f8 ff             	cmp    eax,0xffffffff
c00156c1:	74 09                	je     c00156cc <FAT::tryMount(LogicalDisk*, int)+0x70>
c00156c3:	b0 01                	mov    al,0x1
c00156c5:	e9 a2 01 00 00       	jmp    c001586c <FAT::tryMount(LogicalDisk*, int)+0x210>
c00156ca:	66 90                	xchg   ax,ax
c00156cc:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00156d6:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00156de:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00156e5:	88 c2                	mov    dl,al
c00156e7:	a1 80 27 02 c0       	mov    eax,ds:0xc0022780
c00156ec:	01 d0                	add    eax,edx
c00156ee:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00156f5:	8b 15 80 27 02 c0    	mov    edx,DWORD PTR ds:0xc0022780
c00156fb:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0015702:	89 14 85 a0 27 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd860],edx
c0015709:	a1 80 27 02 c0       	mov    eax,ds:0xc0022780
c001570e:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0015715:	89 14 85 20 28 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd7e0],edx
c001571c:	83 ec 0c             	sub    esp,0xc
c001571f:	68 34 02 00 00       	push   0x234
c0015724:	e8 f4 13 ff ff       	call   c0006b1d <malloc>
c0015729:	83 c4 10             	add    esp,0x10
c001572c:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0015733:	83 ec 04             	sub    esp,0x4
c0015736:	6a 00                	push   0x0
c0015738:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001573f:	50                   	push   eax
c0015740:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0015747:	e8 9c e1 fe ff       	call   c00038e8 <f_mount>
c001574c:	83 c4 10             	add    esp,0x10
c001574f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0015756:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001575e:	74 1c                	je     c001577c <FAT::tryMount(LogicalDisk*, int)+0x120>
c0015760:	83 ec 0c             	sub    esp,0xc
c0015763:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001576a:	e8 ce 13 ff ff       	call   c0006b3d <rfree>
c001576f:	83 c4 10             	add    esp,0x10
c0015772:	b0 00                	mov    al,0x0
c0015774:	e9 f3 00 00 00       	jmp    c001586c <FAT::tryMount(LogicalDisk*, int)+0x210>
c0015779:	8d 76 00             	lea    esi,[esi+0x0]
c001577c:	83 ec 04             	sub    esp,0x4
c001577f:	68 00 01 00 00       	push   0x100
c0015784:	6a 00                	push   0x0
c0015786:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001578d:	50                   	push   eax
c001578e:	e8 5d ad fe ff       	call   c00004f0 <memset>
c0015793:	83 c4 10             	add    esp,0x10
c0015796:	83 ec 08             	sub    esp,0x8
c0015799:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00157a0:	50                   	push   eax
c00157a1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00157a8:	50                   	push   eax
c00157a9:	e8 32 b0 fe ff       	call   c00007e0 <strcat>
c00157ae:	83 c4 10             	add    esp,0x10
c00157b1:	83 ec 08             	sub    esp,0x8
c00157b4:	68 1a e2 01 c0       	push   0xc001e21a
c00157b9:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00157c0:	50                   	push   eax
c00157c1:	e8 1a b0 fe ff       	call   c00007e0 <strcat>
c00157c6:	83 c4 10             	add    esp,0x10
c00157c9:	83 ec 04             	sub    esp,0x4
c00157cc:	6a 01                	push   0x1
c00157ce:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00157d5:	50                   	push   eax
c00157d6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00157da:	50                   	push   eax
c00157db:	e8 6a e1 fe ff       	call   c000394a <f_open>
c00157e0:	83 c4 10             	add    esp,0x10
c00157e3:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00157ea:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00157f1:	85 c0                	test   eax,eax
c00157f3:	74 0b                	je     c0015800 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00157f5:	78 31                	js     c0015828 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00157f7:	83 e8 04             	sub    eax,0x4
c00157fa:	83 f8 01             	cmp    eax,0x1
c00157fd:	77 29                	ja     c0015828 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00157ff:	90                   	nop
c0015800:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0015808:	83 ec 0c             	sub    esp,0xc
c001580b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001580f:	50                   	push   eax
c0015810:	e8 e8 e8 fe ff       	call   c00040fd <f_close>
c0015815:	83 c4 10             	add    esp,0x10
c0015818:	90                   	nop
c0015819:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0015821:	74 41                	je     c0015864 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0015823:	eb 33                	jmp    c0015858 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0015825:	8d 76 00             	lea    esi,[esi+0x0]
c0015828:	83 ec 0c             	sub    esp,0xc
c001582b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0015832:	e8 06 13 ff ff       	call   c0006b3d <rfree>
c0015837:	83 c4 10             	add    esp,0x10
c001583a:	83 ec 04             	sub    esp,0x4
c001583d:	6a 00                	push   0x0
c001583f:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0015846:	50                   	push   eax
c0015847:	6a 00                	push   0x0
c0015849:	e8 9a e0 fe ff       	call   c00038e8 <f_mount>
c001584e:	83 c4 10             	add    esp,0x10
c0015851:	b0 00                	mov    al,0x0
c0015853:	eb 17                	jmp    c001586c <FAT::tryMount(LogicalDisk*, int)+0x210>
c0015855:	8d 76 00             	lea    esi,[esi+0x0]
c0015858:	a1 80 27 02 c0       	mov    eax,ds:0xc0022780
c001585d:	40                   	inc    eax
c001585e:	a3 80 27 02 c0       	mov    ds:0xc0022780,eax
c0015863:	90                   	nop
c0015864:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001586b:	90                   	nop
c001586c:	81 c4 4c 03 00 00    	add    esp,0x34c
c0015872:	c3                   	ret    
c0015873:	90                   	nop

c0015874 <FAT::allocateSwapfile(char const*, int)>:
c0015874:	55                   	push   ebp
c0015875:	57                   	push   edi
c0015876:	56                   	push   esi
c0015877:	53                   	push   ebx
c0015878:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001587e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0015889:	83 ec 0c             	sub    esp,0xc
c001588c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0015893:	e8 85 12 ff ff       	call   c0006b1d <malloc>
c0015898:	83 c4 10             	add    esp,0x10
c001589b:	89 c7                	mov    edi,eax
c001589d:	a1 f0 26 02 c0       	mov    eax,ds:0xc00226f0
c00158a2:	83 ec 04             	sub    esp,0x4
c00158a5:	50                   	push   eax
c00158a6:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c00158ad:	57                   	push   edi
c00158ae:	e8 6f 45 ff ff       	call   c0009e22 <File::File(char const*, Process*)>
c00158b3:	83 c4 10             	add    esp,0x10
c00158b6:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c00158bd:	83 ec 04             	sub    esp,0x4
c00158c0:	8d 44 24 13          	lea    eax,[esp+0x13]
c00158c4:	50                   	push   eax
c00158c5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00158c9:	50                   	push   eax
c00158ca:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00158d1:	e8 b8 48 ff ff       	call   c000a18e <File::stat(unsigned long long*, bool*)>
c00158d6:	83 c4 10             	add    esp,0x10
c00158d9:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00158e0:	c1 e0 14             	shl    eax,0x14
c00158e3:	89 c7                	mov    edi,eax
c00158e5:	89 c5                	mov    ebp,eax
c00158e7:	c1 fd 1f             	sar    ebp,0x1f
c00158ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158ee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00158f2:	89 f9                	mov    ecx,edi
c00158f4:	31 c1                	xor    ecx,eax
c00158f6:	89 cb                	mov    ebx,ecx
c00158f8:	89 e9                	mov    ecx,ebp
c00158fa:	31 d1                	xor    ecx,edx
c00158fc:	89 ce                	mov    esi,ecx
c00158fe:	89 f0                	mov    eax,esi
c0015900:	09 d8                	or     eax,ebx
c0015902:	0f 84 9c 00 00 00    	je     c00159a4 <FAT::allocateSwapfile(char const*, int)+0x130>
c0015908:	83 ec 0c             	sub    esp,0xc
c001590b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0015912:	e8 43 47 ff ff       	call   c000a05a <File::unlink()>
c0015917:	83 c4 10             	add    esp,0x10
c001591a:	83 ec 08             	sub    esp,0x8
c001591d:	6a 12                	push   0x12
c001591f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0015926:	e8 b7 45 ff ff       	call   c0009ee2 <File::open(FileOpenMode)>
c001592b:	83 c4 10             	add    esp,0x10
c001592e:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0015935:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001593b:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0015942:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0015949:	c1 e0 14             	shl    eax,0x14
c001594c:	83 ec 04             	sub    esp,0x4
c001594f:	6a 01                	push   0x1
c0015951:	50                   	push   eax
c0015952:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0015959:	e8 04 f6 fe ff       	call   c0004f62 <f_expand>
c001595e:	83 c4 10             	add    esp,0x10
c0015961:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0015968:	8b 00                	mov    eax,DWORD PTR [eax]
c001596a:	83 c0 10             	add    eax,0x10
c001596d:	8b 00                	mov    eax,DWORD PTR [eax]
c001596f:	83 ec 0c             	sub    esp,0xc
c0015972:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015976:	52                   	push   edx
c0015977:	8d 54 24 30          	lea    edx,[esp+0x30]
c001597b:	52                   	push   edx
c001597c:	6a 00                	push   0x0
c001597e:	68 00 04 00 00       	push   0x400
c0015983:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001598a:	ff d0                	call   eax
c001598c:	83 c4 20             	add    esp,0x20
c001598f:	83 ec 0c             	sub    esp,0xc
c0015992:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0015999:	e8 a2 45 ff ff       	call   c0009f40 <File::close()>
c001599e:	83 c4 10             	add    esp,0x10
c00159a1:	8d 76 00             	lea    esi,[esi+0x0]
c00159a4:	83 ec 08             	sub    esp,0x8
c00159a7:	6a 01                	push   0x1
c00159a9:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00159b0:	e8 2d 45 ff ff       	call   c0009ee2 <File::open(FileOpenMode)>
c00159b5:	83 c4 10             	add    esp,0x10
c00159b8:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00159bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00159c1:	83 c0 0c             	add    eax,0xc
c00159c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00159c6:	83 ec 0c             	sub    esp,0xc
c00159c9:	8d 54 24 24          	lea    edx,[esp+0x24]
c00159cd:	52                   	push   edx
c00159ce:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00159d2:	52                   	push   edx
c00159d3:	6a 00                	push   0x0
c00159d5:	6a 04                	push   0x4
c00159d7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00159de:	ff d0                	call   eax
c00159e0:	83 c4 20             	add    esp,0x20
c00159e3:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00159ea:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00159f0:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00159f7:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00159fe:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0015a01:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0015a08:	83 ec 0c             	sub    esp,0xc
c0015a0b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0015a12:	e8 29 45 ff ff       	call   c0009f40 <File::close()>
c0015a17:	83 c4 10             	add    esp,0x10
c0015a1a:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0015a21:	ba 00 00 00 00       	mov    edx,0x0
c0015a26:	81 c4 3c 04 00 00    	add    esp,0x43c
c0015a2c:	5b                   	pop    ebx
c0015a2d:	5e                   	pop    esi
c0015a2e:	5f                   	pop    edi
c0015a2f:	5d                   	pop    ebp
c0015a30:	c3                   	ret    
c0015a31:	90                   	nop
c0015a32:	66 90                	xchg   ax,ax

c0015a34 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0015a34:	57                   	push   edi
c0015a35:	56                   	push   esi
c0015a36:	53                   	push   ebx
c0015a37:	81 ec 50 02 00 00    	sub    esp,0x250
c0015a3d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0015a45:	74 0d                	je     c0015a54 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0015a47:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0015a4f:	75 0f                	jne    c0015a60 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0015a51:	8d 76 00             	lea    esi,[esi+0x0]
c0015a54:	b8 04 00 00 00       	mov    eax,0x4
c0015a59:	e9 36 01 00 00       	jmp    c0015b94 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0015a5e:	66 90                	xchg   ax,ax
c0015a60:	83 ec 08             	sub    esp,0x8
c0015a63:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0015a6a:	50                   	push   eax
c0015a6b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0015a72:	e8 49 e9 fe ff       	call   c00043c0 <f_readdir>
c0015a77:	83 c4 10             	add    esp,0x10
c0015a7a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0015a81:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0015a88:	83 ec 0c             	sub    esp,0xc
c0015a8b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0015a92:	83 c0 16             	add    eax,0x16
c0015a95:	50                   	push   eax
c0015a96:	e8 c5 aa fe ff       	call   c0000560 <strlen>
c0015a9b:	83 c4 10             	add    esp,0x10
c0015a9e:	ba 00 00 00 00       	mov    edx,0x0
c0015aa3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015aa7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0015aab:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0015ab2:	25 ff 00 00 00       	and    eax,0xff
c0015ab7:	83 e0 10             	and    eax,0x10
c0015aba:	74 08                	je     c0015ac4 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0015abc:	b8 02 00 00 00       	mov    eax,0x2
c0015ac1:	eb 09                	jmp    c0015acc <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0015ac3:	90                   	nop
c0015ac4:	b8 01 00 00 00       	mov    eax,0x1
c0015ac9:	8d 76 00             	lea    esi,[esi+0x0]
c0015acc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015ad0:	83 ec 08             	sub    esp,0x8
c0015ad3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0015ada:	83 c0 16             	add    eax,0x16
c0015add:	50                   	push   eax
c0015ade:	8d 44 24 14          	lea    eax,[esp+0x14]
c0015ae2:	83 c0 10             	add    eax,0x10
c0015ae5:	50                   	push   eax
c0015ae6:	e8 35 ab fe ff       	call   c0000620 <strcpy>
c0015aeb:	83 c4 10             	add    esp,0x10
c0015aee:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0015af5:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0015afc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015b00:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0015b07:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0015b0e:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0015b15:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0015b1c:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0015b23:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0015b2a:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0015b31:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0015b38:	89 c6                	mov    esi,eax
c0015b3a:	89 d7                	mov    edi,edx
c0015b3c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015b3e:	89 c8                	mov    eax,ecx
c0015b40:	89 fa                	mov    edx,edi
c0015b42:	89 f3                	mov    ebx,esi
c0015b44:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0015b4b:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0015b52:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0015b59:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0015b60:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0015b66:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0015b6d:	84 c0                	test   al,al
c0015b6f:	75 07                	jne    c0015b78 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0015b71:	b8 07 00 00 00       	mov    eax,0x7
c0015b76:	eb 1c                	jmp    c0015b94 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0015b78:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0015b7f:	85 c0                	test   eax,eax
c0015b81:	75 09                	jne    c0015b8c <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0015b83:	b8 00 00 00 00       	mov    eax,0x0
c0015b88:	eb 0a                	jmp    c0015b94 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0015b8a:	66 90                	xchg   ax,ax
c0015b8c:	b8 01 00 00 00       	mov    eax,0x1
c0015b91:	8d 76 00             	lea    esi,[esi+0x0]
c0015b94:	81 c4 50 02 00 00    	add    esp,0x250
c0015b9a:	5b                   	pop    ebx
c0015b9b:	5e                   	pop    esi
c0015b9c:	5f                   	pop    edi
c0015b9d:	c3                   	ret    
c0015b9e:	66 90                	xchg   ax,ax

c0015ba0 <FAT::read(void*, unsigned long, void*, int*)>:
c0015ba0:	83 ec 1c             	sub    esp,0x1c
c0015ba3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015ba8:	74 0a                	je     c0015bb4 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0015baa:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015baf:	75 0b                	jne    c0015bbc <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0015bb1:	8d 76 00             	lea    esi,[esi+0x0]
c0015bb4:	b8 04 00 00 00       	mov    eax,0x4
c0015bb9:	eb 41                	jmp    c0015bfc <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0015bbb:	90                   	nop
c0015bbc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015bc0:	50                   	push   eax
c0015bc1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015bc9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015bcd:	e8 43 e0 fe ff       	call   c0003c15 <f_read>
c0015bd2:	83 c4 10             	add    esp,0x10
c0015bd5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015bd9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015bdd:	89 c2                	mov    edx,eax
c0015bdf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015be3:	89 10                	mov    DWORD PTR [eax],edx
c0015be5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015be9:	85 c0                	test   eax,eax
c0015beb:	75 07                	jne    c0015bf4 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0015bed:	b8 00 00 00 00       	mov    eax,0x0
c0015bf2:	eb 08                	jmp    c0015bfc <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0015bf4:	b8 01 00 00 00       	mov    eax,0x1
c0015bf9:	8d 76 00             	lea    esi,[esi+0x0]
c0015bfc:	83 c4 1c             	add    esp,0x1c
c0015bff:	c3                   	ret    

c0015c00 <FAT::write(void*, unsigned long, void*, int*)>:
c0015c00:	83 ec 1c             	sub    esp,0x1c
c0015c03:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015c08:	74 0a                	je     c0015c14 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0015c0a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015c0f:	75 0b                	jne    c0015c1c <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0015c11:	8d 76 00             	lea    esi,[esi+0x0]
c0015c14:	b8 04 00 00 00       	mov    eax,0x4
c0015c19:	eb 41                	jmp    c0015c5c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0015c1b:	90                   	nop
c0015c1c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015c20:	50                   	push   eax
c0015c21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c25:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015c29:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015c2d:	e8 e2 e1 fe ff       	call   c0003e14 <f_write>
c0015c32:	83 c4 10             	add    esp,0x10
c0015c35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015c39:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c3d:	89 c2                	mov    edx,eax
c0015c3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c43:	89 10                	mov    DWORD PTR [eax],edx
c0015c45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015c49:	85 c0                	test   eax,eax
c0015c4b:	75 07                	jne    c0015c54 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0015c4d:	b8 00 00 00 00       	mov    eax,0x0
c0015c52:	eb 08                	jmp    c0015c5c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0015c54:	b8 01 00 00 00       	mov    eax,0x1
c0015c59:	8d 76 00             	lea    esi,[esi+0x0]
c0015c5c:	83 c4 1c             	add    esp,0x1c
c0015c5f:	c3                   	ret    

c0015c60 <FAT::close(void*)>:
c0015c60:	83 ec 1c             	sub    esp,0x1c
c0015c63:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015c68:	75 0a                	jne    c0015c74 <FAT::close(void*)+0x14>
c0015c6a:	b8 04 00 00 00       	mov    eax,0x4
c0015c6f:	eb 3f                	jmp    c0015cb0 <FAT::close(void*)+0x50>
c0015c71:	8d 76 00             	lea    esi,[esi+0x0]
c0015c74:	83 ec 0c             	sub    esp,0xc
c0015c77:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015c7b:	e8 7d e4 fe ff       	call   c00040fd <f_close>
c0015c80:	83 c4 10             	add    esp,0x10
c0015c83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015c87:	83 ec 0c             	sub    esp,0xc
c0015c8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015c8e:	e8 9a 0e ff ff       	call   c0006b2d <free>
c0015c93:	83 c4 10             	add    esp,0x10
c0015c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015c9a:	85 c0                	test   eax,eax
c0015c9c:	75 0a                	jne    c0015ca8 <FAT::close(void*)+0x48>
c0015c9e:	b8 00 00 00 00       	mov    eax,0x0
c0015ca3:	eb 0b                	jmp    c0015cb0 <FAT::close(void*)+0x50>
c0015ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0015ca8:	b8 01 00 00 00       	mov    eax,0x1
c0015cad:	8d 76 00             	lea    esi,[esi+0x0]
c0015cb0:	83 c4 1c             	add    esp,0x1c
c0015cb3:	c3                   	ret    

c0015cb4 <FAT::closeDir(void*)>:
c0015cb4:	83 ec 1c             	sub    esp,0x1c
c0015cb7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015cbc:	75 0a                	jne    c0015cc8 <FAT::closeDir(void*)+0x14>
c0015cbe:	b8 04 00 00 00       	mov    eax,0x4
c0015cc3:	eb 3f                	jmp    c0015d04 <FAT::closeDir(void*)+0x50>
c0015cc5:	8d 76 00             	lea    esi,[esi+0x0]
c0015cc8:	83 ec 0c             	sub    esp,0xc
c0015ccb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015ccf:	e8 ca e6 fe ff       	call   c000439e <f_closedir>
c0015cd4:	83 c4 10             	add    esp,0x10
c0015cd7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015cdb:	83 ec 0c             	sub    esp,0xc
c0015cde:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015ce2:	e8 46 0e ff ff       	call   c0006b2d <free>
c0015ce7:	83 c4 10             	add    esp,0x10
c0015cea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015cee:	85 c0                	test   eax,eax
c0015cf0:	75 0a                	jne    c0015cfc <FAT::closeDir(void*)+0x48>
c0015cf2:	b8 00 00 00 00       	mov    eax,0x0
c0015cf7:	eb 0b                	jmp    c0015d04 <FAT::closeDir(void*)+0x50>
c0015cf9:	8d 76 00             	lea    esi,[esi+0x0]
c0015cfc:	b8 01 00 00 00       	mov    eax,0x1
c0015d01:	8d 76 00             	lea    esi,[esi+0x0]
c0015d04:	83 c4 1c             	add    esp,0x1c
c0015d07:	c3                   	ret    

c0015d08 <FAT::seek(void*, unsigned long long)>:
c0015d08:	83 ec 2c             	sub    esp,0x2c
c0015d0b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015d0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015d13:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015d17:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d1b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0015d20:	75 0a                	jne    c0015d2c <FAT::seek(void*, unsigned long long)+0x24>
c0015d22:	b8 04 00 00 00       	mov    eax,0x4
c0015d27:	eb 33                	jmp    c0015d5c <FAT::seek(void*, unsigned long long)+0x54>
c0015d29:	8d 76 00             	lea    esi,[esi+0x0]
c0015d2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015d30:	83 ec 08             	sub    esp,0x8
c0015d33:	50                   	push   eax
c0015d34:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015d38:	e8 ef e3 fe ff       	call   c000412c <f_lseek>
c0015d3d:	83 c4 10             	add    esp,0x10
c0015d40:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015d44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015d48:	85 c0                	test   eax,eax
c0015d4a:	75 08                	jne    c0015d54 <FAT::seek(void*, unsigned long long)+0x4c>
c0015d4c:	b8 00 00 00 00       	mov    eax,0x0
c0015d51:	eb 09                	jmp    c0015d5c <FAT::seek(void*, unsigned long long)+0x54>
c0015d53:	90                   	nop
c0015d54:	b8 01 00 00 00       	mov    eax,0x1
c0015d59:	8d 76 00             	lea    esi,[esi+0x0]
c0015d5c:	83 c4 2c             	add    esp,0x2c
c0015d5f:	c3                   	ret    

c0015d60 <fatWrapperReadDisk>:
c0015d60:	53                   	push   ebx
c0015d61:	83 ec 18             	sub    esp,0x18
c0015d64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d68:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015d6c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015d70:	25 ff 00 00 00       	and    eax,0xff
c0015d75:	8b 0c 85 60 17 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde8a0]
c0015d7c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015d80:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015d84:	ba 00 00 00 00       	mov    edx,0x0
c0015d89:	83 ec 0c             	sub    esp,0xc
c0015d8c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015d90:	53                   	push   ebx
c0015d91:	52                   	push   edx
c0015d92:	50                   	push   eax
c0015d93:	51                   	push   ecx
c0015d94:	e8 fb 61 ff ff       	call   c000bf94 <LogicalDisk::read(unsigned long long, int, void*)>
c0015d99:	83 c4 20             	add    esp,0x20
c0015d9c:	83 c4 18             	add    esp,0x18
c0015d9f:	5b                   	pop    ebx
c0015da0:	c3                   	ret    
c0015da1:	8d 76 00             	lea    esi,[esi+0x0]

c0015da4 <fatWrapperWriteDisk>:
c0015da4:	53                   	push   ebx
c0015da5:	83 ec 18             	sub    esp,0x18
c0015da8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015dac:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015db0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015db4:	25 ff 00 00 00       	and    eax,0xff
c0015db9:	8b 0c 85 60 17 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde8a0]
c0015dc0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015dc4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015dc8:	ba 00 00 00 00       	mov    edx,0x0
c0015dcd:	83 ec 0c             	sub    esp,0xc
c0015dd0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015dd4:	53                   	push   ebx
c0015dd5:	52                   	push   edx
c0015dd6:	50                   	push   eax
c0015dd7:	51                   	push   ecx
c0015dd8:	e8 23 62 ff ff       	call   c000c000 <LogicalDisk::write(unsigned long long, int, void*)>
c0015ddd:	83 c4 20             	add    esp,0x20
c0015de0:	83 c4 18             	add    esp,0x18
c0015de3:	5b                   	pop    ebx
c0015de4:	c3                   	ret    
c0015de5:	8d 76 00             	lea    esi,[esi+0x0]

c0015de8 <fatWrapperIoctl>:
c0015de8:	53                   	push   ebx
c0015de9:	83 ec 28             	sub    esp,0x28
c0015dec:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015df0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015df4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0015df8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0015dfc:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0015e01:	75 35                	jne    c0015e38 <fatWrapperIoctl+0x50>
c0015e03:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015e07:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015e0b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015e0f:	25 ff 00 00 00       	and    eax,0xff
c0015e14:	8b 04 85 60 17 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde8a0]
c0015e1b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0015e21:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015e27:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015e2b:	66 89 02             	mov    WORD PTR [edx],ax
c0015e2e:	b8 00 00 00 00       	mov    eax,0x0
c0015e33:	e9 c4 00 00 00       	jmp    c0015efc <fatWrapperIoctl+0x114>
c0015e38:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0015e3d:	75 75                	jne    c0015eb4 <fatWrapperIoctl+0xcc>
c0015e3f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015e43:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015e47:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015e4b:	25 ff 00 00 00       	and    eax,0xff
c0015e50:	8b 04 85 60 17 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde8a0]
c0015e57:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0015e5d:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0015e63:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0015e69:	89 c8                	mov    eax,ecx
c0015e6b:	89 da                	mov    edx,ebx
c0015e6d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015e71:	c1 e0 0a             	shl    eax,0xa
c0015e74:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0015e78:	81 e1 ff 00 00 00    	and    ecx,0xff
c0015e7e:	8b 0c 8d 60 17 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde8a0]
c0015e85:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0015e8b:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0015e91:	89 cb                	mov    ebx,ecx
c0015e93:	c1 fb 1f             	sar    ebx,0x1f
c0015e96:	53                   	push   ebx
c0015e97:	51                   	push   ecx
c0015e98:	52                   	push   edx
c0015e99:	50                   	push   eax
c0015e9a:	e8 21 56 00 00       	call   c001b4c0 <__udivdi3>
c0015e9f:	83 c4 10             	add    esp,0x10
c0015ea2:	89 c2                	mov    edx,eax
c0015ea4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015ea8:	89 10                	mov    DWORD PTR [eax],edx
c0015eaa:	b8 00 00 00 00       	mov    eax,0x0
c0015eaf:	eb 4b                	jmp    c0015efc <fatWrapperIoctl+0x114>
c0015eb1:	8d 76 00             	lea    esi,[esi+0x0]
c0015eb4:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0015eb9:	75 09                	jne    c0015ec4 <fatWrapperIoctl+0xdc>
c0015ebb:	b8 00 00 00 00       	mov    eax,0x0
c0015ec0:	eb 3a                	jmp    c0015efc <fatWrapperIoctl+0x114>
c0015ec2:	66 90                	xchg   ax,ax
c0015ec4:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0015ec9:	75 19                	jne    c0015ee4 <fatWrapperIoctl+0xfc>
c0015ecb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015ecf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015ed3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015ed7:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0015edd:	b8 00 00 00 00       	mov    eax,0x0
c0015ee2:	eb 18                	jmp    c0015efc <fatWrapperIoctl+0x114>
c0015ee4:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0015ee9:	75 09                	jne    c0015ef4 <fatWrapperIoctl+0x10c>
c0015eeb:	b8 00 00 00 00       	mov    eax,0x0
c0015ef0:	eb 0a                	jmp    c0015efc <fatWrapperIoctl+0x114>
c0015ef2:	66 90                	xchg   ax,ax
c0015ef4:	b8 04 00 00 00       	mov    eax,0x4
c0015ef9:	8d 76 00             	lea    esi,[esi+0x0]
c0015efc:	83 c4 28             	add    esp,0x28
c0015eff:	5b                   	pop    ebx
c0015f00:	c3                   	ret    
c0015f01:	90                   	nop
c0015f02:	66 90                	xchg   ax,ax

c0015f04 <FAT::FAT()>:
c0015f04:	83 ec 1c             	sub    esp,0x1c
c0015f07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f0b:	83 ec 0c             	sub    esp,0xc
c0015f0e:	50                   	push   eax
c0015f0f:	e8 ba 3c ff ff       	call   c0009bce <Filesystem::Filesystem()>
c0015f14:	83 c4 10             	add    esp,0x10
c0015f17:	ba 30 e2 01 c0       	mov    edx,0xc001e230
c0015f1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f20:	89 10                	mov    DWORD PTR [eax],edx
c0015f22:	c7 05 80 27 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022780,0x0
c0015f2c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015f34:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0015f39:	7f 15                	jg     c0015f50 <FAT::FAT()+0x4c>
c0015f3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f3f:	c7 04 85 a0 27 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdd860],0xffffffff
c0015f4a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0015f4e:	eb e4                	jmp    c0015f34 <FAT::FAT()+0x30>
c0015f50:	90                   	nop
c0015f51:	83 c4 1c             	add    esp,0x1c
c0015f54:	c3                   	ret    
c0015f55:	90                   	nop
c0015f56:	66 90                	xchg   ax,ax

c0015f58 <FAT::fixFilepath(char*)>:
c0015f58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015f5c:	8a 00                	mov    al,BYTE PTR [eax]
c0015f5e:	3c 40                	cmp    al,0x40
c0015f60:	7e 2e                	jle    c0015f90 <FAT::fixFilepath(char*)+0x38>
c0015f62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015f66:	8a 00                	mov    al,BYTE PTR [eax]
c0015f68:	83 e8 41             	sub    eax,0x41
c0015f6b:	88 c2                	mov    dl,al
c0015f6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015f71:	88 10                	mov    BYTE PTR [eax],dl
c0015f73:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015f77:	8a 00                	mov    al,BYTE PTR [eax]
c0015f79:	0f be c0             	movsx  eax,al
c0015f7c:	8b 04 85 a0 27 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd860]
c0015f83:	83 c0 30             	add    eax,0x30
c0015f86:	88 c2                	mov    dl,al
c0015f88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015f8c:	88 10                	mov    BYTE PTR [eax],dl
c0015f8e:	66 90                	xchg   ax,ax
c0015f90:	90                   	nop
c0015f91:	c3                   	ret    
c0015f92:	66 90                	xchg   ax,ax

c0015f94 <FAT::open(char const*, void**, FileOpenMode)>:
c0015f94:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0015f9a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0015fa2:	74 0c                	je     c0015fb0 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0015fa4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0015fac:	75 0e                	jne    c0015fbc <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0015fae:	66 90                	xchg   ax,ax
c0015fb0:	b8 04 00 00 00       	mov    eax,0x4
c0015fb5:	e9 0a 01 00 00       	jmp    c00160c4 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0015fba:	66 90                	xchg   ax,ax
c0015fbc:	83 ec 08             	sub    esp,0x8
c0015fbf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0015fc6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0015fca:	50                   	push   eax
c0015fcb:	e8 50 a6 fe ff       	call   c0000620 <strcpy>
c0015fd0:	83 c4 10             	add    esp,0x10
c0015fd3:	83 ec 08             	sub    esp,0x8
c0015fd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015fda:	50                   	push   eax
c0015fdb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0015fe2:	e8 71 ff ff ff       	call   c0015f58 <FAT::fixFilepath(char*)>
c0015fe7:	83 c4 10             	add    esp,0x10
c0015fea:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0015ff2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0015ff9:	83 e0 01             	and    eax,0x1
c0015ffc:	74 0a                	je     c0016008 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0015ffe:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0016006:	66 90                	xchg   ax,ax
c0016008:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001600f:	83 e0 04             	and    eax,0x4
c0016012:	74 10                	je     c0016024 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0016014:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001601c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0016024:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001602b:	83 e0 02             	and    eax,0x2
c001602e:	74 08                	je     c0016038 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0016030:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0016038:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001603f:	83 e0 08             	and    eax,0x8
c0016042:	74 08                	je     c001604c <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0016044:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001604c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016053:	83 e0 10             	and    eax,0x10
c0016056:	74 08                	je     c0016060 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0016058:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0016060:	83 ec 0c             	sub    esp,0xc
c0016063:	68 28 02 00 00       	push   0x228
c0016068:	e8 b0 0a ff ff       	call   c0006b1d <malloc>
c001606d:	83 c4 10             	add    esp,0x10
c0016070:	89 c2                	mov    edx,eax
c0016072:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016079:	89 10                	mov    DWORD PTR [eax],edx
c001607b:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0016082:	31 d2                	xor    edx,edx
c0016084:	88 c2                	mov    dl,al
c0016086:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001608d:	8b 00                	mov    eax,DWORD PTR [eax]
c001608f:	83 ec 04             	sub    esp,0x4
c0016092:	52                   	push   edx
c0016093:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016097:	52                   	push   edx
c0016098:	50                   	push   eax
c0016099:	e8 ac d8 fe ff       	call   c000394a <f_open>
c001609e:	83 c4 10             	add    esp,0x10
c00160a1:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00160a8:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00160b0:	74 0a                	je     c00160bc <FAT::open(char const*, void**, FileOpenMode)+0x128>
c00160b2:	b8 01 00 00 00       	mov    eax,0x1
c00160b7:	eb 0b                	jmp    c00160c4 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00160b9:	8d 76 00             	lea    esi,[esi+0x0]
c00160bc:	b8 00 00 00 00       	mov    eax,0x0
c00160c1:	8d 76 00             	lea    esi,[esi+0x0]
c00160c4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00160ca:	c3                   	ret    
c00160cb:	90                   	nop

c00160cc <FAT::openDir(char const*, void**)>:
c00160cc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00160d2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00160da:	74 0c                	je     c00160e8 <FAT::openDir(char const*, void**)+0x1c>
c00160dc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00160e4:	75 0e                	jne    c00160f4 <FAT::openDir(char const*, void**)+0x28>
c00160e6:	66 90                	xchg   ax,ax
c00160e8:	b8 04 00 00 00       	mov    eax,0x4
c00160ed:	e9 82 00 00 00       	jmp    c0016174 <FAT::openDir(char const*, void**)+0xa8>
c00160f2:	66 90                	xchg   ax,ax
c00160f4:	83 ec 08             	sub    esp,0x8
c00160f7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00160fe:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016102:	50                   	push   eax
c0016103:	e8 18 a5 fe ff       	call   c0000620 <strcpy>
c0016108:	83 c4 10             	add    esp,0x10
c001610b:	83 ec 08             	sub    esp,0x8
c001610e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016112:	50                   	push   eax
c0016113:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001611a:	e8 39 fe ff ff       	call   c0015f58 <FAT::fixFilepath(char*)>
c001611f:	83 c4 10             	add    esp,0x10
c0016122:	83 ec 0c             	sub    esp,0xc
c0016125:	6a 30                	push   0x30
c0016127:	e8 f1 09 ff ff       	call   c0006b1d <malloc>
c001612c:	83 c4 10             	add    esp,0x10
c001612f:	89 c2                	mov    edx,eax
c0016131:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016138:	89 10                	mov    DWORD PTR [eax],edx
c001613a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016141:	8b 00                	mov    eax,DWORD PTR [eax]
c0016143:	83 ec 08             	sub    esp,0x8
c0016146:	8d 54 24 14          	lea    edx,[esp+0x14]
c001614a:	52                   	push   edx
c001614b:	50                   	push   eax
c001614c:	e8 82 e1 fe ff       	call   c00042d3 <f_opendir>
c0016151:	83 c4 10             	add    esp,0x10
c0016154:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001615b:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0016163:	74 07                	je     c001616c <FAT::openDir(char const*, void**)+0xa0>
c0016165:	b8 01 00 00 00       	mov    eax,0x1
c001616a:	eb 08                	jmp    c0016174 <FAT::openDir(char const*, void**)+0xa8>
c001616c:	b8 00 00 00 00       	mov    eax,0x0
c0016171:	8d 76 00             	lea    esi,[esi+0x0]
c0016174:	81 c4 1c 01 00 00    	add    esp,0x11c
c001617a:	c3                   	ret    
c001617b:	90                   	nop

c001617c <FAT::stat(char const*, unsigned long long*, bool*)>:
c001617c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0016182:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001618a:	75 0c                	jne    c0016198 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001618c:	b8 04 00 00 00       	mov    eax,0x4
c0016191:	e9 d6 00 00 00       	jmp    c001626c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016196:	66 90                	xchg   ax,ax
c0016198:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00161a0:	75 0a                	jne    c00161ac <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00161a2:	b8 04 00 00 00       	mov    eax,0x4
c00161a7:	e9 c0 00 00 00       	jmp    c001626c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00161ac:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00161b4:	75 0a                	jne    c00161c0 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c00161b6:	b8 04 00 00 00       	mov    eax,0x4
c00161bb:	e9 ac 00 00 00       	jmp    c001626c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00161c0:	83 ec 08             	sub    esp,0x8
c00161c3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00161ca:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00161d1:	50                   	push   eax
c00161d2:	e8 49 a4 fe ff       	call   c0000620 <strcpy>
c00161d7:	83 c4 10             	add    esp,0x10
c00161da:	83 ec 08             	sub    esp,0x8
c00161dd:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00161e4:	50                   	push   eax
c00161e5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00161ec:	e8 67 fd ff ff       	call   c0015f58 <FAT::fixFilepath(char*)>
c00161f1:	83 c4 10             	add    esp,0x10
c00161f4:	83 ec 08             	sub    esp,0x8
c00161f7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00161fb:	50                   	push   eax
c00161fc:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0016203:	50                   	push   eax
c0016204:	e8 49 e2 fe ff       	call   c0004452 <f_stat>
c0016209:	83 c4 10             	add    esp,0x10
c001620c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0016213:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001621a:	85 c0                	test   eax,eax
c001621c:	74 0a                	je     c0016228 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001621e:	83 f8 04             	cmp    eax,0x4
c0016221:	74 39                	je     c001625c <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0016223:	eb 3f                	jmp    c0016264 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0016225:	8d 76 00             	lea    esi,[esi+0x0]
c0016228:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001622c:	25 ff 00 00 00       	and    eax,0xff
c0016231:	83 e0 10             	and    eax,0x10
c0016234:	0f 95 c2             	setne  dl
c0016237:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001623e:	88 10                	mov    BYTE PTR [eax],dl
c0016240:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016244:	ba 00 00 00 00       	mov    edx,0x0
c0016249:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0016250:	89 01                	mov    DWORD PTR [ecx],eax
c0016252:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016255:	b8 00 00 00 00       	mov    eax,0x0
c001625a:	eb 10                	jmp    c001626c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001625c:	b8 02 00 00 00       	mov    eax,0x2
c0016261:	eb 09                	jmp    c001626c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016263:	90                   	nop
c0016264:	b8 01 00 00 00       	mov    eax,0x1
c0016269:	8d 76 00             	lea    esi,[esi+0x0]
c001626c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0016272:	c3                   	ret    
c0016273:	90                   	nop

c0016274 <FAT::unlink(char const*)>:
c0016274:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001627a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0016282:	75 08                	jne    c001628c <FAT::unlink(char const*)+0x18>
c0016284:	b8 04 00 00 00       	mov    eax,0x4
c0016289:	eb 61                	jmp    c00162ec <FAT::unlink(char const*)+0x78>
c001628b:	90                   	nop
c001628c:	83 ec 08             	sub    esp,0x8
c001628f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016296:	8d 44 24 18          	lea    eax,[esp+0x18]
c001629a:	50                   	push   eax
c001629b:	e8 80 a3 fe ff       	call   c0000620 <strcpy>
c00162a0:	83 c4 10             	add    esp,0x10
c00162a3:	83 ec 08             	sub    esp,0x8
c00162a6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00162aa:	50                   	push   eax
c00162ab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00162b2:	e8 a1 fc ff ff       	call   c0015f58 <FAT::fixFilepath(char*)>
c00162b7:	83 c4 10             	add    esp,0x10
c00162ba:	83 ec 0c             	sub    esp,0xc
c00162bd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00162c1:	50                   	push   eax
c00162c2:	e8 f0 e3 fe ff       	call   c00046b7 <f_unlink>
c00162c7:	83 c4 10             	add    esp,0x10
c00162ca:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00162d1:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00162d8:	85 c0                	test   eax,eax
c00162da:	75 08                	jne    c00162e4 <FAT::unlink(char const*)+0x70>
c00162dc:	b8 00 00 00 00       	mov    eax,0x0
c00162e1:	eb 09                	jmp    c00162ec <FAT::unlink(char const*)+0x78>
c00162e3:	90                   	nop
c00162e4:	b8 01 00 00 00       	mov    eax,0x1
c00162e9:	8d 76 00             	lea    esi,[esi+0x0]
c00162ec:	81 c4 1c 01 00 00    	add    esp,0x11c
c00162f2:	c3                   	ret    
c00162f3:	90                   	nop

c00162f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00162f4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00162fa:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0016301:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0016308:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001630c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016310:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0016318:	75 0a                	jne    c0016324 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001631a:	b8 04 00 00 00       	mov    eax,0x4
c001631f:	e9 54 01 00 00       	jmp    c0016478 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0016324:	83 ec 08             	sub    esp,0x8
c0016327:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001632e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0016332:	50                   	push   eax
c0016333:	e8 e8 a2 fe ff       	call   c0000620 <strcpy>
c0016338:	83 c4 10             	add    esp,0x10
c001633b:	83 ec 08             	sub    esp,0x8
c001633e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016342:	50                   	push   eax
c0016343:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001634a:	e8 09 fc ff ff       	call   c0015f58 <FAT::fixFilepath(char*)>
c001634f:	83 c4 10             	add    esp,0x10
c0016352:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001635a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0016362:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0016366:	25 ff 00 00 00       	and    eax,0xff
c001636b:	83 e0 01             	and    eax,0x1
c001636e:	74 08                	je     c0016378 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c0016370:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0016378:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001637c:	25 ff 00 00 00       	and    eax,0xff
c0016381:	83 e0 02             	and    eax,0x2
c0016384:	74 0a                	je     c0016390 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c0016386:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001638e:	66 90                	xchg   ax,ax
c0016390:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0016394:	25 ff 00 00 00       	and    eax,0xff
c0016399:	83 e0 04             	and    eax,0x4
c001639c:	74 0a                	je     c00163a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c001639e:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00163a6:	66 90                	xchg   ax,ax
c00163a8:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00163ac:	25 ff 00 00 00       	and    eax,0xff
c00163b1:	83 e0 08             	and    eax,0x8
c00163b4:	74 0a                	je     c00163c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c00163b6:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00163be:	66 90                	xchg   ax,ax
c00163c0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00163c4:	25 ff 00 00 00       	and    eax,0xff
c00163c9:	83 e0 01             	and    eax,0x1
c00163cc:	74 0a                	je     c00163d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c00163ce:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00163d6:	66 90                	xchg   ax,ax
c00163d8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00163dc:	25 ff 00 00 00       	and    eax,0xff
c00163e1:	83 e0 02             	and    eax,0x2
c00163e4:	74 0a                	je     c00163f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c00163e6:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00163ee:	66 90                	xchg   ax,ax
c00163f0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00163f4:	25 ff 00 00 00       	and    eax,0xff
c00163f9:	83 e0 04             	and    eax,0x4
c00163fc:	74 0a                	je     c0016408 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c00163fe:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0016406:	66 90                	xchg   ax,ax
c0016408:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001640c:	25 ff 00 00 00       	and    eax,0xff
c0016411:	83 e0 08             	and    eax,0x8
c0016414:	74 0a                	je     c0016420 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c0016416:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001641e:	66 90                	xchg   ax,ax
c0016420:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0016427:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001642e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0016435:	31 d2                	xor    edx,edx
c0016437:	88 c2                	mov    dl,al
c0016439:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0016440:	25 ff 00 00 00       	and    eax,0xff
c0016445:	83 ec 04             	sub    esp,0x4
c0016448:	52                   	push   edx
c0016449:	50                   	push   eax
c001644a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001644e:	50                   	push   eax
c001644f:	e8 d6 e6 fe ff       	call   c0004b2a <f_chmod>
c0016454:	83 c4 10             	add    esp,0x10
c0016457:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001645e:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0016465:	85 c0                	test   eax,eax
c0016467:	75 07                	jne    c0016470 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c0016469:	b8 00 00 00 00       	mov    eax,0x0
c001646e:	eb 08                	jmp    c0016478 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0016470:	b8 01 00 00 00       	mov    eax,0x1
c0016475:	8d 76 00             	lea    esi,[esi+0x0]
c0016478:	81 c4 2c 01 00 00    	add    esp,0x12c
c001647e:	c3                   	ret    
c001647f:	90                   	nop

c0016480 <FAT::rename(char const*, char const*)>:
c0016480:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0016486:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001648e:	74 0c                	je     c001649c <FAT::rename(char const*, char const*)+0x1c>
c0016490:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0016498:	75 0e                	jne    c00164a8 <FAT::rename(char const*, char const*)+0x28>
c001649a:	66 90                	xchg   ax,ax
c001649c:	b8 04 00 00 00       	mov    eax,0x4
c00164a1:	e9 9e 00 00 00       	jmp    c0016544 <FAT::rename(char const*, char const*)+0xc4>
c00164a6:	66 90                	xchg   ax,ax
c00164a8:	83 ec 08             	sub    esp,0x8
c00164ab:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00164b2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00164b9:	50                   	push   eax
c00164ba:	e8 61 a1 fe ff       	call   c0000620 <strcpy>
c00164bf:	83 c4 10             	add    esp,0x10
c00164c2:	83 ec 08             	sub    esp,0x8
c00164c5:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00164cc:	50                   	push   eax
c00164cd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00164d4:	e8 7f fa ff ff       	call   c0015f58 <FAT::fixFilepath(char*)>
c00164d9:	83 c4 10             	add    esp,0x10
c00164dc:	83 ec 08             	sub    esp,0x8
c00164df:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00164e6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00164ea:	50                   	push   eax
c00164eb:	e8 30 a1 fe ff       	call   c0000620 <strcpy>
c00164f0:	83 c4 10             	add    esp,0x10
c00164f3:	83 ec 08             	sub    esp,0x8
c00164f6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00164fa:	50                   	push   eax
c00164fb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0016502:	e8 51 fa ff ff       	call   c0015f58 <FAT::fixFilepath(char*)>
c0016507:	83 c4 10             	add    esp,0x10
c001650a:	83 ec 08             	sub    esp,0x8
c001650d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016511:	50                   	push   eax
c0016512:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0016519:	50                   	push   eax
c001651a:	e8 55 e4 fe ff       	call   c0004974 <f_rename>
c001651f:	83 c4 10             	add    esp,0x10
c0016522:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0016529:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0016530:	85 c0                	test   eax,eax
c0016532:	75 08                	jne    c001653c <FAT::rename(char const*, char const*)+0xbc>
c0016534:	b8 00 00 00 00       	mov    eax,0x0
c0016539:	eb 09                	jmp    c0016544 <FAT::rename(char const*, char const*)+0xc4>
c001653b:	90                   	nop
c001653c:	b8 01 00 00 00       	mov    eax,0x1
c0016541:	8d 76 00             	lea    esi,[esi+0x0]
c0016544:	81 c4 1c 02 00 00    	add    esp,0x21c
c001654a:	c3                   	ret    
c001654b:	90                   	nop

c001654c <FAT::mkdir(char const*)>:
c001654c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016552:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001655a:	75 08                	jne    c0016564 <FAT::mkdir(char const*)+0x18>
c001655c:	b8 04 00 00 00       	mov    eax,0x4
c0016561:	eb 61                	jmp    c00165c4 <FAT::mkdir(char const*)+0x78>
c0016563:	90                   	nop
c0016564:	83 ec 08             	sub    esp,0x8
c0016567:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001656e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016572:	50                   	push   eax
c0016573:	e8 a8 a0 fe ff       	call   c0000620 <strcpy>
c0016578:	83 c4 10             	add    esp,0x10
c001657b:	83 ec 08             	sub    esp,0x8
c001657e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016582:	50                   	push   eax
c0016583:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001658a:	e8 c9 f9 ff ff       	call   c0015f58 <FAT::fixFilepath(char*)>
c001658f:	83 c4 10             	add    esp,0x10
c0016592:	83 ec 0c             	sub    esp,0xc
c0016595:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016599:	50                   	push   eax
c001659a:	e8 3a e2 fe ff       	call   c00047d9 <f_mkdir>
c001659f:	83 c4 10             	add    esp,0x10
c00165a2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00165a9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00165b0:	85 c0                	test   eax,eax
c00165b2:	75 08                	jne    c00165bc <FAT::mkdir(char const*)+0x70>
c00165b4:	b8 00 00 00 00       	mov    eax,0x0
c00165b9:	eb 09                	jmp    c00165c4 <FAT::mkdir(char const*)+0x78>
c00165bb:	90                   	nop
c00165bc:	b8 01 00 00 00       	mov    eax,0x1
c00165c1:	8d 76 00             	lea    esi,[esi+0x0]
c00165c4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00165ca:	c3                   	ret    
c00165cb:	90                   	nop

c00165cc <FAT::exists(char const*)>:
c00165cc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00165d2:	83 ec 08             	sub    esp,0x8
c00165d5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00165dc:	8d 44 24 10          	lea    eax,[esp+0x10]
c00165e0:	50                   	push   eax
c00165e1:	e8 3a a0 fe ff       	call   c0000620 <strcpy>
c00165e6:	83 c4 10             	add    esp,0x10
c00165e9:	83 ec 08             	sub    esp,0x8
c00165ec:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00165f0:	50                   	push   eax
c00165f1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00165f8:	e8 5b f9 ff ff       	call   c0015f58 <FAT::fixFilepath(char*)>
c00165fd:	83 c4 10             	add    esp,0x10
c0016600:	83 ec 08             	sub    esp,0x8
c0016603:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001660a:	50                   	push   eax
c001660b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001660f:	50                   	push   eax
c0016610:	e8 3d de fe ff       	call   c0004452 <f_stat>
c0016615:	83 c4 10             	add    esp,0x10
c0016618:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001661f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0016626:	85 c0                	test   eax,eax
c0016628:	75 06                	jne    c0016630 <FAT::exists(char const*)+0x64>
c001662a:	b0 01                	mov    al,0x1
c001662c:	eb 06                	jmp    c0016634 <FAT::exists(char const*)+0x68>
c001662e:	66 90                	xchg   ax,ax
c0016630:	b0 00                	mov    al,0x0
c0016632:	66 90                	xchg   ax,ax
c0016634:	81 c4 2c 02 00 00    	add    esp,0x22c
c001663a:	c3                   	ret    
c001663b:	90                   	nop

c001663c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001663c:	b8 08 00 00 00       	mov    eax,0x8
c0016641:	c3                   	ret    

c0016642 <ISO9660::seek(void*, unsigned long long)>:
c0016642:	53                   	push   ebx
c0016643:	b8 04 00 00 00       	mov    eax,0x4
c0016648:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001664c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016650:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016654:	85 d2                	test   edx,edx
c0016656:	74 17                	je     c001666f <ISO9660::seek(void*, unsigned long long)+0x2d>
c0016658:	89 c8                	mov    eax,ecx
c001665a:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001665d:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0016660:	b8 01 00 00 00       	mov    eax,0x1
c0016665:	73 08                	jae    c001666f <ISO9660::seek(void*, unsigned long long)+0x2d>
c0016667:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001666a:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001666d:	31 c0                	xor    eax,eax
c001666f:	5b                   	pop    ebx
c0016670:	c3                   	ret    
c0016671:	90                   	nop

c0016672 <ISO9660::tell(void*, unsigned long long*)>:
c0016672:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016676:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001667a:	85 d2                	test   edx,edx
c001667c:	74 12                	je     c0016690 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001667e:	85 c0                	test   eax,eax
c0016680:	74 0e                	je     c0016690 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0016682:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0016685:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0016688:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001668b:	89 10                	mov    DWORD PTR [eax],edx
c001668d:	31 c0                	xor    eax,eax
c001668f:	c3                   	ret    
c0016690:	b8 04 00 00 00       	mov    eax,0x4
c0016695:	c3                   	ret    

c0016696 <ISO9660::getName()>:
c0016696:	b8 90 e2 01 c0       	mov    eax,0xc001e290
c001669b:	c3                   	ret    

c001669c <ISO9660::stat(void*, unsigned long long*)>:
c001669c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00166a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00166a4:	85 d2                	test   edx,edx
c00166a6:	74 12                	je     c00166ba <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00166a8:	85 c0                	test   eax,eax
c00166aa:	74 0e                	je     c00166ba <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00166ac:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00166af:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00166b2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00166b5:	89 10                	mov    DWORD PTR [eax],edx
c00166b7:	31 c0                	xor    eax,eax
c00166b9:	c3                   	ret    
c00166ba:	b8 04 00 00 00       	mov    eax,0x4
c00166bf:	c3                   	ret    

c00166c0 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00166c0:	b8 01 00 00 00       	mov    eax,0x1
c00166c5:	c3                   	ret    

c00166c6 <ISO9660::unlink(char const*)>:
c00166c6:	b8 01 00 00 00       	mov    eax,0x1
c00166cb:	c3                   	ret    

c00166cc <ISO9660::write(void*, unsigned long, void*, int*)>:
c00166cc:	b8 01 00 00 00       	mov    eax,0x1
c00166d1:	c3                   	ret    

c00166d2 <ISO9660::rename(char const*, char const*)>:
c00166d2:	b8 01 00 00 00       	mov    eax,0x1
c00166d7:	c3                   	ret    

c00166d8 <ISO9660::mkdir(char const*)>:
c00166d8:	b8 01 00 00 00       	mov    eax,0x1
c00166dd:	c3                   	ret    

c00166de <ISO9660::close(void*)>:
c00166de:	83 ec 0c             	sub    esp,0xc
c00166e1:	b8 04 00 00 00       	mov    eax,0x4
c00166e6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00166ea:	85 d2                	test   edx,edx
c00166ec:	74 0e                	je     c00166fc <ISO9660::close(void*)+0x1e>
c00166ee:	83 ec 0c             	sub    esp,0xc
c00166f1:	52                   	push   edx
c00166f2:	e8 36 04 ff ff       	call   c0006b2d <free>
c00166f7:	83 c4 10             	add    esp,0x10
c00166fa:	31 c0                	xor    eax,eax
c00166fc:	83 c4 0c             	add    esp,0xc
c00166ff:	c3                   	ret    

c0016700 <ISO9660::closeDir(void*)>:
c0016700:	83 ec 0c             	sub    esp,0xc
c0016703:	b8 04 00 00 00       	mov    eax,0x4
c0016708:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001670c:	85 d2                	test   edx,edx
c001670e:	74 0e                	je     c001671e <ISO9660::closeDir(void*)+0x1e>
c0016710:	83 ec 0c             	sub    esp,0xc
c0016713:	52                   	push   edx
c0016714:	e8 14 04 ff ff       	call   c0006b2d <free>
c0016719:	83 c4 10             	add    esp,0x10
c001671c:	31 c0                	xor    eax,eax
c001671e:	83 c4 0c             	add    esp,0xc
c0016721:	c3                   	ret    

c0016722 <ISO9660::~ISO9660()>:
c0016722:	83 ec 0c             	sub    esp,0xc
c0016725:	ba 08 e3 01 c0       	mov    edx,0xc001e308
c001672a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001672e:	89 10                	mov    DWORD PTR [eax],edx
c0016730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016734:	83 ec 0c             	sub    esp,0xc
c0016737:	50                   	push   eax
c0016738:	e8 b5 34 ff ff       	call   c0009bf2 <Filesystem::~Filesystem()>
c001673d:	83 c4 10             	add    esp,0x10
c0016740:	90                   	nop
c0016741:	83 c4 0c             	add    esp,0xc
c0016744:	c3                   	ret    
c0016745:	90                   	nop

c0016746 <ISO9660::~ISO9660()>:
c0016746:	83 ec 0c             	sub    esp,0xc
c0016749:	83 ec 0c             	sub    esp,0xc
c001674c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016750:	e8 cd ff ff ff       	call   c0016722 <ISO9660::~ISO9660()>
c0016755:	83 c4 10             	add    esp,0x10
c0016758:	83 ec 08             	sub    esp,0x8
c001675b:	6a 08                	push   0x8
c001675d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016761:	e8 50 30 ff ff       	call   c00097b6 <operator delete(void*, unsigned long)>
c0016766:	83 c4 10             	add    esp,0x10
c0016769:	83 c4 0c             	add    esp,0xc
c001676c:	c3                   	ret    

c001676d <__memmem(unsigned char*, int, unsigned char*, int)>:
c001676d:	55                   	push   ebp
c001676e:	31 c9                	xor    ecx,ecx
c0016770:	57                   	push   edi
c0016771:	56                   	push   esi
c0016772:	53                   	push   ebx
c0016773:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0016777:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001677b:	89 eb                	mov    ebx,ebp
c001677d:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0016781:	39 ce                	cmp    esi,ecx
c0016783:	7e 17                	jle    c001679c <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0016785:	31 d2                	xor    edx,edx
c0016787:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001678b:	7d 13                	jge    c00167a0 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001678d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0016791:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0016794:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0016797:	75 0d                	jne    c00167a6 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0016799:	42                   	inc    edx
c001679a:	eb eb                	jmp    c0016787 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001679c:	31 c0                	xor    eax,eax
c001679e:	eb 0a                	jmp    c00167aa <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00167a0:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00167a4:	eb 04                	jmp    c00167aa <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00167a6:	41                   	inc    ecx
c00167a7:	43                   	inc    ebx
c00167a8:	eb d7                	jmp    c0016781 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00167aa:	5b                   	pop    ebx
c00167ab:	5e                   	pop    esi
c00167ac:	5f                   	pop    edi
c00167ad:	5d                   	pop    ebp
c00167ae:	c3                   	ret    

c00167af <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00167af:	57                   	push   edi
c00167b0:	56                   	push   esi
c00167b1:	53                   	push   ebx
c00167b2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167b6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00167ba:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00167be:	39 35 80 28 02 c0    	cmp    DWORD PTR ds:0xc0022880,esi
c00167c4:	75 08                	jne    c00167ce <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c00167c6:	38 1d 34 ec 01 c0    	cmp    BYTE PTR ds:0xc001ec34,bl
c00167cc:	74 59                	je     c0016827 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x78>
c00167ce:	83 ec 0c             	sub    esp,0xc
c00167d1:	31 d2                	xor    edx,edx
c00167d3:	68 a0 28 02 c0       	push   0xc00228a0
c00167d8:	0f be c3             	movsx  eax,bl
c00167db:	6a 01                	push   0x1
c00167dd:	52                   	push   edx
c00167de:	56                   	push   esi
c00167df:	ff 34 85 5c 16 02 c0 	push   DWORD PTR [eax*4-0x3ffde9a4]
c00167e6:	e8 a9 57 ff ff       	call   c000bf94 <LogicalDisk::read(unsigned long long, int, void*)>
c00167eb:	83 c4 20             	add    esp,0x20
c00167ee:	85 c0                	test   eax,eax
c00167f0:	75 0e                	jne    c0016800 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c00167f2:	89 35 80 28 02 c0    	mov    DWORD PTR ds:0xc0022880,esi
c00167f8:	88 1d 34 ec 01 c0    	mov    BYTE PTR ds:0xc001ec34,bl
c00167fe:	eb 27                	jmp    c0016827 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x78>
c0016800:	83 ec 0c             	sub    esp,0xc
c0016803:	68 ab e2 01 c0       	push   0xc001e2ab
c0016808:	e8 9f 30 ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c001680d:	83 c4 0c             	add    esp,0xc
c0016810:	68 00 08 00 00       	push   0x800
c0016815:	6a 00                	push   0x0
c0016817:	57                   	push   edi
c0016818:	e8 d3 9c fe ff       	call   c00004f0 <memset>
c001681d:	83 c4 10             	add    esp,0x10
c0016820:	b8 01 00 00 00       	mov    eax,0x1
c0016825:	eb 0e                	jmp    c0016835 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x86>
c0016827:	be a0 28 02 c0       	mov    esi,0xc00228a0
c001682c:	b9 00 08 00 00       	mov    ecx,0x800
c0016831:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016833:	31 c0                	xor    eax,eax
c0016835:	5b                   	pop    ebx
c0016836:	5e                   	pop    esi
c0016837:	5f                   	pop    edi
c0016838:	c3                   	ret    
c0016839:	90                   	nop

c001683a <ISO9660::tryMount(LogicalDisk*, int)>:
c001683a:	81 ec 10 08 00 00    	sub    esp,0x810
c0016840:	c7 05 80 28 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0022880,0xdeadbeef
c001684a:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0016851:	83 c0 41             	add    eax,0x41
c0016854:	0f be c0             	movsx  eax,al
c0016857:	50                   	push   eax
c0016858:	8d 44 24 08          	lea    eax,[esp+0x8]
c001685c:	50                   	push   eax
c001685d:	6a 10                	push   0x10
c001685f:	e8 4b ff ff ff       	call   c00167af <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016864:	83 c4 10             	add    esp,0x10
c0016867:	31 d2                	xor    edx,edx
c0016869:	85 c0                	test   eax,eax
c001686b:	75 24                	jne    c0016891 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001686d:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0016872:	75 1d                	jne    c0016891 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c0016874:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0016879:	75 16                	jne    c0016891 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001687b:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0016880:	75 0f                	jne    c0016891 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c0016882:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0016887:	75 08                	jne    c0016891 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c0016889:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001688e:	0f 94 c2             	sete   dl
c0016891:	88 d0                	mov    al,dl
c0016893:	81 c4 0c 08 00 00    	add    esp,0x80c
c0016899:	c3                   	ret    

c001689a <ISO9660::read(void*, unsigned long, void*, int*)>:
c001689a:	55                   	push   ebp
c001689b:	57                   	push   edi
c001689c:	56                   	push   esi
c001689d:	53                   	push   ebx
c001689e:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00168a4:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00168ab:	85 ed                	test   ebp,ebp
c00168ad:	0f 84 da 01 00 00    	je     c0016a8d <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c00168b3:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00168bb:	0f 84 cc 01 00 00    	je     c0016a8d <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c00168c1:	b8 01 00 00 00       	mov    eax,0x1
c00168c6:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c00168ca:	0f 85 c2 01 00 00    	jne    c0016a92 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c00168d0:	31 d2                	xor    edx,edx
c00168d2:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00168d9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00168dc:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00168df:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00168e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00168e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00168e9:	01 c8                	add    eax,ecx
c00168eb:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00168ee:	11 da                	adc    edx,ebx
c00168f0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00168f4:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00168f8:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00168fc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016900:	19 d7                	sbb    edi,edx
c0016902:	72 11                	jb     c0016915 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0016904:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0016907:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001690b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001690f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016913:	eb 0c                	jmp    c0016921 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0016915:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0016919:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001691d:	29 ce                	sub    esi,ecx
c001691f:	19 df                	sbb    edi,ebx
c0016921:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016924:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0016927:	0f a4 c2 0b          	shld   edx,eax,0xb
c001692b:	c1 e0 0b             	shl    eax,0xb
c001692e:	01 c8                	add    eax,ecx
c0016930:	11 da                	adc    edx,ebx
c0016932:	89 04 24             	mov    DWORD PTR [esp],eax
c0016935:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016939:	51                   	push   ecx
c001693a:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001693e:	50                   	push   eax
c001693f:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0016943:	53                   	push   ebx
c0016944:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016948:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001694c:	0f ac d0 0b          	shrd   eax,edx,0xb
c0016950:	50                   	push   eax
c0016951:	e8 59 fe ff ff       	call   c00167af <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016956:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0016959:	b8 00 08 00 00       	mov    eax,0x800
c001695e:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0016964:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0016968:	29 d0                	sub    eax,edx
c001696a:	83 c4 10             	add    esp,0x10
c001696d:	89 f9                	mov    ecx,edi
c001696f:	39 c6                	cmp    esi,eax
c0016971:	83 d9 00             	sbb    ecx,0x0
c0016974:	7d 1b                	jge    c0016991 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0016976:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001697b:	75 12                	jne    c001698f <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001697d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0016984:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001698a:	e9 fa 00 00 00       	jmp    c0016a89 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001698f:	89 f0                	mov    eax,esi
c0016991:	01 d3                	add    ebx,edx
c0016993:	31 d2                	xor    edx,edx
c0016995:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016999:	39 c2                	cmp    edx,eax
c001699b:	7d 14                	jge    c00169b1 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001699d:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00169a4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00169a8:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00169ab:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00169ae:	42                   	inc    edx
c00169af:	eb e8                	jmp    c0016999 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c00169b1:	89 c2                	mov    edx,eax
c00169b3:	85 c0                	test   eax,eax
c00169b5:	79 02                	jns    c00169b9 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c00169b7:	31 d2                	xor    edx,edx
c00169b9:	01 c2                	add    edx,eax
c00169bb:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00169be:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c00169c5:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00169c9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00169cd:	99                   	cdq    
c00169ce:	01 c1                	add    ecx,eax
c00169d0:	11 d3                	adc    ebx,edx
c00169d2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00169d6:	29 c6                	sub    esi,eax
c00169d8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00169dc:	19 d7                	sbb    edi,edx
c00169de:	89 34 24             	mov    DWORD PTR [esp],esi
c00169e1:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00169e5:	b8 ff 07 00 00       	mov    eax,0x7ff
c00169ea:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00169ed:	b8 00 00 00 00       	mov    eax,0x0
c00169f2:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00169f6:	7d 43                	jge    c0016a3b <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c00169f8:	52                   	push   edx
c00169f9:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00169fd:	50                   	push   eax
c00169fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016a02:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016a06:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a0a:	0f ac d0 0b          	shrd   eax,edx,0xb
c0016a0e:	50                   	push   eax
c0016a0f:	e8 9b fd ff ff       	call   c00167af <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016a14:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0016a1c:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0016a21:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0016a29:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0016a31:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0016a36:	83 c4 10             	add    esp,0x10
c0016a39:	eb aa                	jmp    c00169e5 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0016a3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016a3f:	0b 04 24             	or     eax,DWORD PTR [esp]
c0016a42:	74 2a                	je     c0016a6e <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0016a44:	50                   	push   eax
c0016a45:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0016a49:	50                   	push   eax
c0016a4a:	8d 74 24 28          	lea    esi,[esp+0x28]
c0016a4e:	56                   	push   esi
c0016a4f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016a53:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016a57:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0016a5b:	51                   	push   ecx
c0016a5c:	e8 4e fd ff ff       	call   c00167af <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016a61:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016a65:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016a69:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016a6b:	83 c4 10             	add    esp,0x10
c0016a6e:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0016a75:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016a79:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016a7d:	89 18                	mov    DWORD PTR [eax],ebx
c0016a7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016a83:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0016a86:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0016a89:	31 c0                	xor    eax,eax
c0016a8b:	eb 05                	jmp    c0016a92 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0016a8d:	b8 04 00 00 00       	mov    eax,0x4
c0016a92:	81 c4 2c 08 00 00    	add    esp,0x82c
c0016a98:	5b                   	pop    ebx
c0016a99:	5e                   	pop    esi
c0016a9a:	5f                   	pop    edi
c0016a9b:	5d                   	pop    ebp
c0016a9c:	c3                   	ret    
c0016a9d:	90                   	nop

c0016a9e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0016a9e:	55                   	push   ebp
c0016a9f:	57                   	push   edi
c0016aa0:	56                   	push   esi
c0016aa1:	53                   	push   ebx
c0016aa2:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0016aa8:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0016aaf:	85 ed                	test   ebp,ebp
c0016ab1:	0f 84 4f 02 00 00    	je     c0016d06 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x268>
c0016ab7:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0016abf:	0f 84 41 02 00 00    	je     c0016d06 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x268>
c0016ac5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0016ac8:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0016acb:	75 0a                	jne    c0016ad7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0016acd:	b8 07 00 00 00       	mov    eax,0x7
c0016ad2:	e9 34 02 00 00       	jmp    c0016d0b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26d>
c0016ad7:	50                   	push   eax
c0016ad8:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0016adc:	50                   	push   eax
c0016add:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0016ae4:	53                   	push   ebx
c0016ae5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016ae8:	c1 e0 0b             	shl    eax,0xb
c0016aeb:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0016aee:	c1 e8 0b             	shr    eax,0xb
c0016af1:	50                   	push   eax
c0016af2:	e8 b8 fc ff ff       	call   c00167af <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016af7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016afa:	83 c4 10             	add    esp,0x10
c0016afd:	89 c1                	mov    ecx,eax
c0016aff:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0016b02:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0016b08:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0016b0b:	84 db                	test   bl,bl
c0016b0d:	0f 85 8b 00 00 00    	jne    c0016b9e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0016b13:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0016b19:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016b1c:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0016b22:	29 c6                	sub    esi,eax
c0016b24:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0016b28:	89 f3                	mov    ebx,esi
c0016b2a:	89 f1                	mov    ecx,esi
c0016b2c:	c1 fb 1f             	sar    ebx,0x1f
c0016b2f:	01 f0                	add    eax,esi
c0016b31:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0016b34:	11 da                	adc    edx,ebx
c0016b36:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b39:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016b3d:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0016b40:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0016b43:	89 d8                	mov    eax,ebx
c0016b45:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0016b49:	ba 00 00 00 00       	mov    edx,0x0
c0016b4e:	19 f8                	sbb    eax,edi
c0016b50:	b8 00 00 00 00       	mov    eax,0x0
c0016b55:	73 08                	jae    c0016b5f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0016b57:	89 f0                	mov    eax,esi
c0016b59:	89 fa                	mov    edx,edi
c0016b5b:	29 c8                	sub    eax,ecx
c0016b5d:	19 da                	sbb    edx,ebx
c0016b5f:	89 d7                	mov    edi,edx
c0016b61:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0016b64:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0016b67:	09 c7                	or     edi,eax
c0016b69:	0f 84 5e ff ff ff    	je     c0016acd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0016b6f:	57                   	push   edi
c0016b70:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0016b74:	50                   	push   eax
c0016b75:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0016b7c:	53                   	push   ebx
c0016b7d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016b80:	c1 e0 0b             	shl    eax,0xb
c0016b83:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016b87:	c1 e8 0b             	shr    eax,0xb
c0016b8a:	50                   	push   eax
c0016b8b:	e8 1f fc ff ff       	call   c00167af <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016b90:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016b93:	83 c4 10             	add    esp,0x10
c0016b96:	25 ff 07 00 00       	and    eax,0x7ff
c0016b9b:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0016b9e:	31 ff                	xor    edi,edi
c0016ba0:	56                   	push   esi
c0016ba1:	6a 28                	push   0x28
c0016ba3:	6a 00                	push   0x0
c0016ba5:	8d 44 24 24          	lea    eax,[esp+0x24]
c0016ba9:	50                   	push   eax
c0016baa:	e8 41 99 fe ff       	call   c00004f0 <memset>
c0016baf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016bb2:	25 ff 07 00 00       	and    eax,0x7ff
c0016bb7:	89 c6                	mov    esi,eax
c0016bb9:	83 c6 21             	add    esi,0x21
c0016bbc:	83 d7 00             	adc    edi,0x0
c0016bbf:	83 c4 10             	add    esp,0x10
c0016bc2:	31 c9                	xor    ecx,ecx
c0016bc4:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0016bcb:	83 f9 28             	cmp    ecx,0x28
c0016bce:	88 04 24             	mov    BYTE PTR [esp],al
c0016bd1:	0f 94 c2             	sete   dl
c0016bd4:	88 d0                	mov    al,dl
c0016bd6:	ba ff 07 00 00       	mov    edx,0x7ff
c0016bdb:	39 f2                	cmp    edx,esi
c0016bdd:	ba 00 00 00 00       	mov    edx,0x0
c0016be2:	19 fa                	sbb    edx,edi
c0016be4:	0f 92 c2             	setb   dl
c0016be7:	09 c2                	or     edx,eax
c0016be9:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0016bed:	0f 94 c0             	sete   al
c0016bf0:	08 d0                	or     al,dl
c0016bf2:	75 16                	jne    c0016c0a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0016bf4:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0016bf8:	74 10                	je     c0016c0a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0016bfa:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016bfd:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0016c01:	41                   	inc    ecx
c0016c02:	83 c6 01             	add    esi,0x1
c0016c05:	83 d7 00             	adc    edi,0x0
c0016c08:	eb ba                	jmp    c0016bc4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0016c0a:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0016c11:	83 ec 0c             	sub    esp,0xc
c0016c14:	8d 74 24 24          	lea    esi,[esp+0x24]
c0016c18:	56                   	push   esi
c0016c19:	e8 42 99 fe ff       	call   c0000560 <strlen>
c0016c1e:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0016c25:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0016c29:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0016c31:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016c34:	5a                   	pop    edx
c0016c35:	25 ff 07 00 00       	and    eax,0x7ff
c0016c3a:	59                   	pop    ecx
c0016c3b:	01 f8                	add    eax,edi
c0016c3d:	f6 80 19 f8 ff ff 02 	test   BYTE PTR [eax-0x7e7],0x2
c0016c44:	0f 95 c0             	setne  al
c0016c47:	0f b6 c0             	movzx  eax,al
c0016c4a:	40                   	inc    eax
c0016c4b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0016c4f:	56                   	push   esi
c0016c50:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0016c54:	50                   	push   eax
c0016c55:	e8 c6 99 fe ff       	call   c0000620 <strcpy>
c0016c5a:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0016c5e:	83 c4 10             	add    esp,0x10
c0016c61:	84 c0                	test   al,al
c0016c63:	75 21                	jne    c0016c86 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1e8>
c0016c65:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0016c6d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016c75:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0016c7d:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0016c84:	eb 28                	jmp    c0016cae <ISO9660::readDir(void*, unsigned long, void*, int*)+0x210>
c0016c86:	fe c8                	dec    al
c0016c88:	75 24                	jne    c0016cae <ISO9660::readDir(void*, unsigned long, void*, int*)+0x210>
c0016c8a:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0016c92:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016c9a:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0016ca2:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0016ca9:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0016cae:	8d 74 24 40          	lea    esi,[esp+0x40]
c0016cb2:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0016cb9:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0016cc0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016cc2:	0f b6 f3             	movzx  esi,bl
c0016cc5:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0016ccc:	31 db                	xor    ebx,ebx
c0016cce:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016cd4:	89 df                	mov    edi,ebx
c0016cd6:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0016cd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016cdc:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0016cdf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0016ce2:	39 c6                	cmp    esi,eax
c0016ce4:	19 d7                	sbb    edi,edx
c0016ce6:	72 10                	jb     c0016cf8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25a>
c0016ce8:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0016cef:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0016cf6:	eb 0a                	jmp    c0016d02 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x264>
c0016cf8:	29 f0                	sub    eax,esi
c0016cfa:	19 da                	sbb    edx,ebx
c0016cfc:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0016cff:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0016d02:	31 c0                	xor    eax,eax
c0016d04:	eb 05                	jmp    c0016d0b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26d>
c0016d06:	b8 04 00 00 00       	mov    eax,0x4
c0016d0b:	81 c4 5c 09 00 00    	add    esp,0x95c
c0016d11:	5b                   	pop    ebx
c0016d12:	5e                   	pop    esi
c0016d13:	5f                   	pop    edi
c0016d14:	5d                   	pop    ebp
c0016d15:	c3                   	ret    

c0016d16 <readRoot(unsigned int*, unsigned int*, char)>:
c0016d16:	57                   	push   edi
c0016d17:	56                   	push   esi
c0016d18:	81 ec 38 08 00 00    	sub    esp,0x838
c0016d1e:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0016d26:	50                   	push   eax
c0016d27:	8d 44 24 38          	lea    eax,[esp+0x38]
c0016d2b:	50                   	push   eax
c0016d2c:	6a 10                	push   0x10
c0016d2e:	e8 7c fa ff ff       	call   c00167af <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016d33:	83 c4 10             	add    esp,0x10
c0016d36:	85 c0                	test   eax,eax
c0016d38:	74 14                	je     c0016d4e <readRoot(unsigned int*, unsigned int*, char)+0x38>
c0016d3a:	83 ec 0c             	sub    esp,0xc
c0016d3d:	68 c6 e2 01 c0       	push   0xc001e2c6
c0016d42:	e8 65 2b ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c0016d47:	83 c4 10             	add    esp,0x10
c0016d4a:	31 c0                	xor    eax,eax
c0016d4c:	eb 2e                	jmp    c0016d7c <readRoot(unsigned int*, unsigned int*, char)+0x66>
c0016d4e:	8d b4 24 cc 00 00 00 	lea    esi,[esp+0xcc]
c0016d55:	8d 7c 24 0e          	lea    edi,[esp+0xe]
c0016d59:	b9 22 00 00 00       	mov    ecx,0x22
c0016d5e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016d60:	8b 84 24 40 08 00 00 	mov    eax,DWORD PTR [esp+0x840]
c0016d67:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016d6b:	89 10                	mov    DWORD PTR [eax],edx
c0016d6d:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c0016d74:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016d78:	89 10                	mov    DWORD PTR [eax],edx
c0016d7a:	b0 01                	mov    al,0x1
c0016d7c:	81 c4 34 08 00 00    	add    esp,0x834
c0016d82:	5e                   	pop    esi
c0016d83:	5f                   	pop    edi
c0016d84:	c3                   	ret    

c0016d85 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0016d85:	55                   	push   ebp
c0016d86:	57                   	push   edi
c0016d87:	56                   	push   esi
c0016d88:	53                   	push   ebx
c0016d89:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016d8f:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0016d96:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0016d9d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016da1:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0016da5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016da9:	31 c0                	xor    eax,eax
c0016dab:	85 db                	test   ebx,ebx
c0016dad:	0f 84 b0 01 00 00    	je     c0016f63 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1de>
c0016db3:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0016db6:	0f 84 a7 01 00 00    	je     c0016f63 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1de>
c0016dbc:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0016dc0:	75 03                	jne    c0016dc5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x40>
c0016dc2:	83 c3 02             	add    ebx,0x2
c0016dc5:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0016dc8:	75 03                	jne    c0016dcd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x48>
c0016dca:	43                   	inc    ebx
c0016dcb:	eb f8                	jmp    c0016dc5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x40>
c0016dcd:	52                   	push   edx
c0016dce:	68 00 01 00 00       	push   0x100
c0016dd3:	6a 00                	push   0x0
c0016dd5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0016dd9:	50                   	push   eax
c0016dda:	e8 11 97 fe ff       	call   c00004f0 <memset>
c0016ddf:	83 c4 10             	add    esp,0x10
c0016de2:	31 d2                	xor    edx,edx
c0016de4:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0016de7:	84 c0                	test   al,al
c0016de9:	74 21                	je     c0016e0c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x87>
c0016deb:	3c 2f                	cmp    al,0x2f
c0016ded:	75 0b                	jne    c0016dfa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x75>
c0016def:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0016df3:	bd 01 00 00 00       	mov    ebp,0x1
c0016df8:	eb 14                	jmp    c0016e0e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x89>
c0016dfa:	8d 48 9f             	lea    ecx,[eax-0x61]
c0016dfd:	80 f9 19             	cmp    cl,0x19
c0016e00:	77 03                	ja     c0016e05 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x80>
c0016e02:	83 e8 20             	sub    eax,0x20
c0016e05:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0016e09:	42                   	inc    edx
c0016e0a:	eb d8                	jmp    c0016de4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x5f>
c0016e0c:	31 ed                	xor    ebp,ebp
c0016e0e:	83 ec 0c             	sub    esp,0xc
c0016e11:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016e18:	e8 00 fd fe ff       	call   c0006b1d <malloc>
c0016e1d:	89 c6                	mov    esi,eax
c0016e1f:	89 c2                	mov    edx,eax
c0016e21:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0016e28:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0016e2e:	c1 ef 0b             	shr    edi,0xb
c0016e31:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0016e38:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0016e3c:	83 c4 10             	add    esp,0x10
c0016e3f:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0016e44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016e48:	3b 84 24 34 01 00 00 	cmp    eax,DWORD PTR [esp+0x134]
c0016e4f:	74 29                	je     c0016e7a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xf5>
c0016e51:	50                   	push   eax
c0016e52:	57                   	push   edi
c0016e53:	52                   	push   edx
c0016e54:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016e58:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0016e5f:	e8 4b f9 ff ff       	call   c00167af <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016e64:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016e68:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0016e6f:	81 c2 00 08 00 00    	add    edx,0x800
c0016e75:	83 c4 10             	add    esp,0x10
c0016e78:	eb ca                	jmp    c0016e44 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xbf>
c0016e7a:	83 ec 0c             	sub    esp,0xc
c0016e7d:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0016e81:	57                   	push   edi
c0016e82:	e8 d9 96 fe ff       	call   c0000560 <strlen>
c0016e87:	50                   	push   eax
c0016e88:	57                   	push   edi
c0016e89:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0016e90:	56                   	push   esi
c0016e91:	e8 d7 f8 ff ff       	call   c001676d <__memmem(unsigned char*, int, unsigned char*, int)>
c0016e96:	83 c4 20             	add    esp,0x20
c0016e99:	85 c0                	test   eax,eax
c0016e9b:	75 13                	jne    c0016eb0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x12b>
c0016e9d:	83 ec 0c             	sub    esp,0xc
c0016ea0:	56                   	push   esi
c0016ea1:	e8 87 fc fe ff       	call   c0006b2d <free>
c0016ea6:	83 c4 10             	add    esp,0x10
c0016ea9:	31 c0                	xor    eax,eax
c0016eab:	e9 b3 00 00 00       	jmp    c0016f63 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1de>
c0016eb0:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0016eb4:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0016eb8:	c1 e7 08             	shl    edi,0x8
c0016ebb:	c1 e2 10             	shl    edx,0x10
c0016ebe:	09 d7                	or     edi,edx
c0016ec0:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0016ec4:	09 d7                	or     edi,edx
c0016ec6:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0016eca:	c1 e2 18             	shl    edx,0x18
c0016ecd:	09 d7                	or     edi,edx
c0016ecf:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0016ed3:	89 d1                	mov    ecx,edx
c0016ed5:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0016ed9:	c1 e1 08             	shl    ecx,0x8
c0016edc:	c1 e2 10             	shl    edx,0x10
c0016edf:	09 ca                	or     edx,ecx
c0016ee1:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0016ee5:	09 ca                	or     edx,ecx
c0016ee7:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0016eeb:	c1 e1 18             	shl    ecx,0x18
c0016eee:	09 ca                	or     edx,ecx
c0016ef0:	89 e9                	mov    ecx,ebp
c0016ef2:	84 c9                	test   cl,cl
c0016ef4:	74 3c                	je     c0016f32 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1ad>
c0016ef6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0016efa:	83 ec 0c             	sub    esp,0xc
c0016efd:	56                   	push   esi
c0016efe:	e8 2a fc fe ff       	call   c0006b2d <free>
c0016f03:	83 c4 0c             	add    esp,0xc
c0016f06:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0016f0d:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0016f12:	50                   	push   eax
c0016f13:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0016f1a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0016f21:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016f25:	52                   	push   edx
c0016f26:	57                   	push   edi
c0016f27:	53                   	push   ebx
c0016f28:	e8 58 fe ff ff       	call   c0016d85 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0016f2d:	83 c4 20             	add    esp,0x20
c0016f30:	eb 31                	jmp    c0016f63 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1de>
c0016f32:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0016f35:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0016f3c:	d0 e8                	shr    al,1
c0016f3e:	89 3b                	mov    DWORD PTR [ebx],edi
c0016f40:	83 e0 01             	and    eax,0x1
c0016f43:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0016f4a:	83 ec 0c             	sub    esp,0xc
c0016f4d:	89 13                	mov    DWORD PTR [ebx],edx
c0016f4f:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0016f56:	89 03                	mov    DWORD PTR [ebx],eax
c0016f58:	56                   	push   esi
c0016f59:	e8 cf fb fe ff       	call   c0006b2d <free>
c0016f5e:	83 c4 10             	add    esp,0x10
c0016f61:	b0 01                	mov    al,0x1
c0016f63:	81 c4 1c 01 00 00    	add    esp,0x11c
c0016f69:	5b                   	pop    ebx
c0016f6a:	5e                   	pop    esi
c0016f6b:	5f                   	pop    edi
c0016f6c:	5d                   	pop    ebp
c0016f6d:	c3                   	ret    

c0016f6e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0016f6e:	55                   	push   ebp
c0016f6f:	57                   	push   edi
c0016f70:	56                   	push   esi
c0016f71:	53                   	push   ebx
c0016f72:	83 ec 20             	sub    esp,0x20
c0016f75:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0016f79:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016f7d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016f85:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016f8d:	c7 45 00 ff ff ff ff 	mov    DWORD PTR [ebp+0x0],0xffffffff
c0016f94:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0016f99:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0016f9f:	57                   	push   edi
c0016fa0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016fa4:	50                   	push   eax
c0016fa5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016fa9:	50                   	push   eax
c0016faa:	e8 67 fd ff ff       	call   c0016d16 <readRoot(unsigned int*, unsigned int*, char)>
c0016faf:	83 c4 10             	add    esp,0x10
c0016fb2:	88 c3                	mov    bl,al
c0016fb4:	84 c0                	test   al,al
c0016fb6:	75 12                	jne    c0016fca <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x5c>
c0016fb8:	83 ec 0c             	sub    esp,0xc
c0016fbb:	68 d6 e2 01 c0       	push   0xc001e2d6
c0016fc0:	e8 e7 28 ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c0016fc5:	83 c4 10             	add    esp,0x10
c0016fc8:	eb 4b                	jmp    c0017015 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0xa7>
c0016fca:	83 ec 0c             	sub    esp,0xc
c0016fcd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016fd1:	e8 8a 95 fe ff       	call   c0000560 <strlen>
c0016fd6:	83 c4 10             	add    esp,0x10
c0016fd9:	83 f8 03             	cmp    eax,0x3
c0016fdc:	77 19                	ja     c0016ff7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x89>
c0016fde:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016fe2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0016fe5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fe9:	89 06                	mov    DWORD PTR [esi],eax
c0016feb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016fef:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0016ff5:	eb 1e                	jmp    c0017015 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0xa7>
c0016ff7:	50                   	push   eax
c0016ff8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016ffc:	57                   	push   edi
c0016ffd:	56                   	push   esi
c0016ffe:	55                   	push   ebp
c0016fff:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017003:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017007:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001700b:	e8 75 fd ff ff       	call   c0016d85 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0017010:	83 c4 20             	add    esp,0x20
c0017013:	88 c3                	mov    bl,al
c0017015:	83 c4 1c             	add    esp,0x1c
c0017018:	88 d8                	mov    al,bl
c001701a:	5b                   	pop    ebx
c001701b:	5e                   	pop    esi
c001701c:	5f                   	pop    edi
c001701d:	5d                   	pop    ebp
c001701e:	c3                   	ret    
c001701f:	90                   	nop

c0017020 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0017020:	57                   	push   edi
c0017021:	56                   	push   esi
c0017022:	53                   	push   ebx
c0017023:	83 ec 10             	sub    esp,0x10
c0017026:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001702a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001702e:	85 ff                	test   edi,edi
c0017030:	0f 84 9f 00 00 00    	je     c00170d5 <ISO9660::open(char const*, void**, FileOpenMode)+0xb5>
c0017036:	85 f6                	test   esi,esi
c0017038:	0f 84 97 00 00 00    	je     c00170d5 <ISO9660::open(char const*, void**, FileOpenMode)+0xb5>
c001703e:	b8 03 00 00 00       	mov    eax,0x3
c0017043:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0017048:	0f 85 8c 00 00 00    	jne    c00170da <ISO9660::open(char const*, void**, FileOpenMode)+0xba>
c001704e:	83 ec 0c             	sub    esp,0xc
c0017051:	6a 1c                	push   0x1c
c0017053:	e8 c5 fa fe ff       	call   c0006b1d <malloc>
c0017058:	89 07                	mov    DWORD PTR [edi],eax
c001705a:	89 c3                	mov    ebx,eax
c001705c:	58                   	pop    eax
c001705d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017061:	50                   	push   eax
c0017062:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0017065:	50                   	push   eax
c0017066:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001706a:	50                   	push   eax
c001706b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001706f:	50                   	push   eax
c0017070:	56                   	push   esi
c0017071:	e8 f8 fe ff ff       	call   c0016f6e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0017076:	83 c4 20             	add    esp,0x20
c0017079:	84 c0                	test   al,al
c001707b:	74 07                	je     c0017084 <ISO9660::open(char const*, void**, FileOpenMode)+0x64>
c001707d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017082:	74 1b                	je     c001709f <ISO9660::open(char const*, void**, FileOpenMode)+0x7f>
c0017084:	83 ec 0c             	sub    esp,0xc
c0017087:	68 e9 e2 01 c0       	push   0xc001e2e9
c001708c:	e8 1b 28 ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c0017091:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0017095:	83 c4 10             	add    esp,0x10
c0017098:	b8 01 00 00 00       	mov    eax,0x1
c001709d:	eb 3b                	jmp    c00170da <ISO9660::open(char const*, void**, FileOpenMode)+0xba>
c001709f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170a3:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00170a7:	89 03                	mov    DWORD PTR [ebx],eax
c00170a9:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00170b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00170b4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00170bb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00170c2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00170c5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00170cc:	8a 06                	mov    al,BYTE PTR [esi]
c00170ce:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00170d1:	31 c0                	xor    eax,eax
c00170d3:	eb 05                	jmp    c00170da <ISO9660::open(char const*, void**, FileOpenMode)+0xba>
c00170d5:	b8 04 00 00 00       	mov    eax,0x4
c00170da:	83 c4 10             	add    esp,0x10
c00170dd:	5b                   	pop    ebx
c00170de:	5e                   	pop    esi
c00170df:	5f                   	pop    edi
c00170e0:	c3                   	ret    
c00170e1:	90                   	nop

c00170e2 <ISO9660::exists(char const*)>:
c00170e2:	83 ec 28             	sub    esp,0x28
c00170e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00170e9:	8d 54 24 18          	lea    edx,[esp+0x18]
c00170ed:	52                   	push   edx
c00170ee:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00170f1:	52                   	push   edx
c00170f2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00170f6:	52                   	push   edx
c00170f7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00170fb:	52                   	push   edx
c00170fc:	50                   	push   eax
c00170fd:	e8 6c fe ff ff       	call   c0016f6e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0017102:	83 c4 3c             	add    esp,0x3c
c0017105:	c3                   	ret    

c0017106 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017106:	56                   	push   esi
c0017107:	53                   	push   ebx
c0017108:	83 ec 14             	sub    esp,0x14
c001710b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001710f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0017113:	85 db                	test   ebx,ebx
c0017115:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0017119:	0f 94 c2             	sete   dl
c001711c:	85 f6                	test   esi,esi
c001711e:	0f 94 c0             	sete   al
c0017121:	08 c2                	or     dl,al
c0017123:	75 68                	jne    c001718d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0017125:	85 c9                	test   ecx,ecx
c0017127:	74 64                	je     c001718d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0017129:	83 ec 0c             	sub    esp,0xc
c001712c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001712f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017133:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0017139:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017140:	50                   	push   eax
c0017141:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0017144:	50                   	push   eax
c0017145:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017149:	50                   	push   eax
c001714a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001714e:	50                   	push   eax
c001714f:	51                   	push   ecx
c0017150:	e8 19 fe ff ff       	call   c0016f6e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0017155:	83 c4 20             	add    esp,0x20
c0017158:	ba 01 00 00 00       	mov    edx,0x1
c001715d:	84 c0                	test   al,al
c001715f:	74 31                	je     c0017192 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0017161:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017165:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001716c:	89 03                	mov    DWORD PTR [ebx],eax
c001716e:	ba 00 00 00 00       	mov    edx,0x0
c0017173:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017177:	85 c0                	test   eax,eax
c0017179:	0f 95 06             	setne  BYTE PTR [esi]
c001717c:	74 14                	je     c0017192 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001717e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0017184:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001718b:	eb 05                	jmp    c0017192 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001718d:	ba 04 00 00 00       	mov    edx,0x4
c0017192:	83 c4 14             	add    esp,0x14
c0017195:	89 d0                	mov    eax,edx
c0017197:	5b                   	pop    ebx
c0017198:	5e                   	pop    esi
c0017199:	c3                   	ret    

c001719a <ISO9660::openDir(char const*, void**)>:
c001719a:	57                   	push   edi
c001719b:	56                   	push   esi
c001719c:	53                   	push   ebx
c001719d:	83 ec 10             	sub    esp,0x10
c00171a0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00171a4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00171a8:	85 ff                	test   edi,edi
c00171aa:	74 7b                	je     c0017227 <ISO9660::openDir(char const*, void**)+0x8d>
c00171ac:	85 f6                	test   esi,esi
c00171ae:	74 77                	je     c0017227 <ISO9660::openDir(char const*, void**)+0x8d>
c00171b0:	83 ec 0c             	sub    esp,0xc
c00171b3:	6a 1c                	push   0x1c
c00171b5:	e8 63 f9 fe ff       	call   c0006b1d <malloc>
c00171ba:	89 07                	mov    DWORD PTR [edi],eax
c00171bc:	89 c3                	mov    ebx,eax
c00171be:	58                   	pop    eax
c00171bf:	8d 44 24 18          	lea    eax,[esp+0x18]
c00171c3:	50                   	push   eax
c00171c4:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00171c7:	50                   	push   eax
c00171c8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00171cc:	50                   	push   eax
c00171cd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00171d1:	50                   	push   eax
c00171d2:	56                   	push   esi
c00171d3:	e8 96 fd ff ff       	call   c0016f6e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00171d8:	83 c4 20             	add    esp,0x20
c00171db:	84 c0                	test   al,al
c00171dd:	74 07                	je     c00171e6 <ISO9660::openDir(char const*, void**)+0x4c>
c00171df:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00171e4:	75 0b                	jne    c00171f1 <ISO9660::openDir(char const*, void**)+0x57>
c00171e6:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00171ea:	b8 01 00 00 00       	mov    eax,0x1
c00171ef:	eb 3b                	jmp    c001722c <ISO9660::openDir(char const*, void**)+0x92>
c00171f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171f5:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00171f9:	89 03                	mov    DWORD PTR [ebx],eax
c00171fb:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0017202:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017206:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001720d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017214:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0017217:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001721e:	8a 06                	mov    al,BYTE PTR [esi]
c0017220:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0017223:	31 c0                	xor    eax,eax
c0017225:	eb 05                	jmp    c001722c <ISO9660::openDir(char const*, void**)+0x92>
c0017227:	b8 04 00 00 00       	mov    eax,0x4
c001722c:	83 c4 10             	add    esp,0x10
c001722f:	5b                   	pop    ebx
c0017230:	5e                   	pop    esi
c0017231:	5f                   	pop    edi
c0017232:	c3                   	ret    
c0017233:	90                   	nop

c0017234 <ISO9660::ISO9660()>:
c0017234:	83 ec 0c             	sub    esp,0xc
c0017237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001723b:	83 ec 0c             	sub    esp,0xc
c001723e:	50                   	push   eax
c001723f:	e8 8a 29 ff ff       	call   c0009bce <Filesystem::Filesystem()>
c0017244:	83 c4 10             	add    esp,0x10
c0017247:	ba 08 e3 01 c0       	mov    edx,0xc001e308
c001724c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017250:	89 10                	mov    DWORD PTR [eax],edx
c0017252:	90                   	nop
c0017253:	83 c4 0c             	add    esp,0xc
c0017256:	c3                   	ret    
c0017257:	90                   	nop

c0017258 <SoundCard::beginPlayback()>:
c0017258:	c7 44 24 04 68 e3 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e368
c0017260:	e9 96 81 ff ff       	jmp    c000f3fb <Krnl::panic(char const*)>
c0017265:	90                   	nop

c0017266 <SoundCard::stopPlayback()>:
c0017266:	c7 44 24 04 68 e3 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e368
c001726e:	e9 88 81 ff ff       	jmp    c000f3fb <Krnl::panic(char const*)>
c0017273:	90                   	nop

c0017274 <SoundCard::SoundCard(char const*)>:
c0017274:	83 ec 1c             	sub    esp,0x1c
c0017277:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001727b:	83 ec 08             	sub    esp,0x8
c001727e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017282:	50                   	push   eax
c0017283:	e8 fc 3b ff ff       	call   c000ae84 <Device::Device(char const*)>
c0017288:	83 c4 10             	add    esp,0x10
c001728b:	ba b4 e3 01 c0       	mov    edx,0xc001e3b4
c0017290:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017294:	89 10                	mov    DWORD PTR [eax],edx
c0017296:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001729a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c00172a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00172a5:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c00172af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00172b3:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c00172bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00172c1:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c00172cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00172cf:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00172d9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00172e1:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00172e6:	7f 19                	jg     c0017301 <SoundCard::SoundCard(char const*)+0x8d>
c00172e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00172ec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00172f0:	83 c2 54             	add    edx,0x54
c00172f3:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00172fb:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00172ff:	eb e0                	jmp    c00172e1 <SoundCard::SoundCard(char const*)+0x6d>
c0017301:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017305:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001730c:	90                   	nop
c001730d:	83 c4 1c             	add    esp,0x1c
c0017310:	c3                   	ret    
c0017311:	90                   	nop

c0017312 <SoundCard::~SoundCard()>:
c0017312:	83 ec 0c             	sub    esp,0xc
c0017315:	ba b4 e3 01 c0       	mov    edx,0xc001e3b4
c001731a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001731e:	89 10                	mov    DWORD PTR [eax],edx
c0017320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017324:	83 ec 0c             	sub    esp,0xc
c0017327:	50                   	push   eax
c0017328:	e8 c1 38 ff ff       	call   c000abee <Device::~Device()>
c001732d:	83 c4 10             	add    esp,0x10
c0017330:	90                   	nop
c0017331:	83 c4 0c             	add    esp,0xc
c0017334:	c3                   	ret    
c0017335:	90                   	nop

c0017336 <SoundCard::~SoundCard()>:
c0017336:	83 ec 0c             	sub    esp,0xc
c0017339:	83 ec 0c             	sub    esp,0xc
c001733c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017340:	e8 cd ff ff ff       	call   c0017312 <SoundCard::~SoundCard()>
c0017345:	83 c4 10             	add    esp,0x10
c0017348:	83 ec 08             	sub    esp,0x8
c001734b:	68 e8 01 00 00       	push   0x1e8
c0017350:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017354:	e8 5d 24 ff ff       	call   c00097b6 <operator delete(void*, unsigned long)>
c0017359:	83 c4 10             	add    esp,0x10
c001735c:	83 c4 0c             	add    esp,0xc
c001735f:	c3                   	ret    

c0017360 <SoundCard::configureRates(int, int, int)>:
c0017360:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017364:	31 c0                	xor    eax,eax
c0017366:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001736d:	75 20                	jne    c001738f <SoundCard::configureRates(int, int, int)+0x2f>
c001736f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017373:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0017379:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001737d:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0017383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017387:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001738d:	b0 01                	mov    al,0x1
c001738f:	c3                   	ret    

c0017390 <SoundCard::getSamples16(int, short*)>:
c0017390:	55                   	push   ebp
c0017391:	57                   	push   edi
c0017392:	31 ff                	xor    edi,edi
c0017394:	56                   	push   esi
c0017395:	53                   	push   ebx
c0017396:	31 db                	xor    ebx,ebx
c0017398:	83 ec 10             	sub    esp,0x10
c001739b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001739f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00173a3:	8d 04 36             	lea    eax,[esi+esi*1]
c00173a6:	50                   	push   eax
c00173a7:	6a 00                	push   0x0
c00173a9:	55                   	push   ebp
c00173aa:	e8 41 91 fe ff       	call   c00004f0 <memset>
c00173af:	83 c4 10             	add    esp,0x10
c00173b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173b6:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c00173bd:	85 c0                	test   eax,eax
c00173bf:	74 1b                	je     c00173dc <SoundCard::getSamples16(int, short*)+0x4c>
c00173c1:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c00173c5:	75 15                	jne    c00173dc <SoundCard::getSamples16(int, short*)+0x4c>
c00173c7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00173cb:	55                   	push   ebp
c00173cc:	56                   	push   esi
c00173cd:	50                   	push   eax
c00173ce:	e8 ed 02 00 00       	call   c00176c0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c00173d3:	83 c4 10             	add    esp,0x10
c00173d6:	39 c7                	cmp    edi,eax
c00173d8:	7d 02                	jge    c00173dc <SoundCard::getSamples16(int, short*)+0x4c>
c00173da:	89 c7                	mov    edi,eax
c00173dc:	43                   	inc    ebx
c00173dd:	83 fb 20             	cmp    ebx,0x20
c00173e0:	75 d0                	jne    c00173b2 <SoundCard::getSamples16(int, short*)+0x22>
c00173e2:	83 c4 0c             	add    esp,0xc
c00173e5:	89 f8                	mov    eax,edi
c00173e7:	5b                   	pop    ebx
c00173e8:	5e                   	pop    esi
c00173e9:	5f                   	pop    edi
c00173ea:	5d                   	pop    ebp
c00173eb:	c3                   	ret    

c00173ec <SoundCard::getSamples32(int, int*)>:
c00173ec:	55                   	push   ebp
c00173ed:	57                   	push   edi
c00173ee:	31 ff                	xor    edi,edi
c00173f0:	56                   	push   esi
c00173f1:	31 f6                	xor    esi,esi
c00173f3:	53                   	push   ebx
c00173f4:	83 ec 10             	sub    esp,0x10
c00173f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173fb:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00173ff:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017403:	c1 e0 02             	shl    eax,0x2
c0017406:	50                   	push   eax
c0017407:	6a 00                	push   0x0
c0017409:	55                   	push   ebp
c001740a:	e8 e1 90 fe ff       	call   c00004f0 <memset>
c001740f:	83 c4 10             	add    esp,0x10
c0017412:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0017419:	85 c0                	test   eax,eax
c001741b:	74 1b                	je     c0017438 <SoundCard::getSamples32(int, int*)+0x4c>
c001741d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017421:	75 15                	jne    c0017438 <SoundCard::getSamples32(int, int*)+0x4c>
c0017423:	53                   	push   ebx
c0017424:	55                   	push   ebp
c0017425:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017429:	50                   	push   eax
c001742a:	e8 55 03 00 00       	call   c0017784 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001742f:	83 c4 10             	add    esp,0x10
c0017432:	39 c6                	cmp    esi,eax
c0017434:	7d 02                	jge    c0017438 <SoundCard::getSamples32(int, int*)+0x4c>
c0017436:	89 c6                	mov    esi,eax
c0017438:	47                   	inc    edi
c0017439:	83 ff 20             	cmp    edi,0x20
c001743c:	75 d4                	jne    c0017412 <SoundCard::getSamples32(int, int*)+0x26>
c001743e:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0017444:	85 f6                	test   esi,esi
c0017446:	75 0f                	jne    c0017457 <SoundCard::getSamples32(int, int*)+0x6b>
c0017448:	84 c0                	test   al,al
c001744a:	74 1b                	je     c0017467 <SoundCard::getSamples32(int, int*)+0x7b>
c001744c:	83 ec 0c             	sub    esp,0xc
c001744f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017451:	53                   	push   ebx
c0017452:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0017455:	eb 0d                	jmp    c0017464 <SoundCard::getSamples32(int, int*)+0x78>
c0017457:	84 c0                	test   al,al
c0017459:	75 0c                	jne    c0017467 <SoundCard::getSamples32(int, int*)+0x7b>
c001745b:	83 ec 0c             	sub    esp,0xc
c001745e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017460:	53                   	push   ebx
c0017461:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017464:	83 c4 10             	add    esp,0x10
c0017467:	83 c4 0c             	add    esp,0xc
c001746a:	89 f0                	mov    eax,esi
c001746c:	5b                   	pop    ebx
c001746d:	5e                   	pop    esi
c001746e:	5f                   	pop    edi
c001746f:	5d                   	pop    ebp
c0017470:	c3                   	ret    
c0017471:	90                   	nop

c0017472 <SoundCard::addChannel(SoundPort*)>:
c0017472:	83 ec 0c             	sub    esp,0xc
c0017475:	31 c0                	xor    eax,eax
c0017477:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001747b:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0017483:	74 1b                	je     c00174a0 <SoundCard::addChannel(SoundPort*)+0x2e>
c0017485:	40                   	inc    eax
c0017486:	83 f8 20             	cmp    eax,0x20
c0017489:	75 f0                	jne    c001747b <SoundCard::addChannel(SoundPort*)+0x9>
c001748b:	83 ec 0c             	sub    esp,0xc
c001748e:	68 8d e3 01 c0       	push   0xc001e38d
c0017493:	e8 63 7f ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c0017498:	83 c4 10             	add    esp,0x10
c001749b:	83 c8 ff             	or     eax,0xffffffff
c001749e:	eb 0b                	jmp    c00174ab <SoundCard::addChannel(SoundPort*)+0x39>
c00174a0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00174a4:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c00174ab:	83 c4 0c             	add    esp,0xc
c00174ae:	c3                   	ret    
c00174af:	90                   	nop

c00174b0 <SoundCard::removeChannel(int)>:
c00174b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00174b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00174b8:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c00174c3:	c3                   	ret    

c00174c4 <SoundPort::SoundPort(int, int, int, int)>:
c00174c4:	83 ec 0c             	sub    esp,0xc
c00174c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174cb:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00174d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174d6:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00174da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00174e2:	89 10                	mov    DWORD PTR [eax],edx
c00174e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00174ec:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00174ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00174f7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00174fa:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c00174ff:	75 13                	jne    c0017514 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0017501:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017505:	8b 00                	mov    eax,DWORD PTR [eax]
c0017507:	05 a0 0f 00 00       	add    eax,0xfa0
c001750c:	01 c0                	add    eax,eax
c001750e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017512:	66 90                	xchg   ax,ax
c0017514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017518:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001751c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001751f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017523:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001752a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001752e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017531:	c1 e0 02             	shl    eax,0x2
c0017534:	83 ec 0c             	sub    esp,0xc
c0017537:	50                   	push   eax
c0017538:	e8 e0 f5 fe ff       	call   c0006b1d <malloc>
c001753d:	83 c4 10             	add    esp,0x10
c0017540:	89 c2                	mov    edx,eax
c0017542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017546:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017549:	90                   	nop
c001754a:	83 c4 0c             	add    esp,0xc
c001754d:	c3                   	ret    
c001754e:	66 90                	xchg   ax,ax

c0017550 <SoundPort::~SoundPort()>:
c0017550:	83 ec 0c             	sub    esp,0xc
c0017553:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017557:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001755a:	85 c0                	test   eax,eax
c001755c:	74 1e                	je     c001757c <SoundPort::~SoundPort()+0x2c>
c001755e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017562:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017565:	83 ec 0c             	sub    esp,0xc
c0017568:	50                   	push   eax
c0017569:	e8 bf f5 fe ff       	call   c0006b2d <free>
c001756e:	83 c4 10             	add    esp,0x10
c0017571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017575:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001757c:	90                   	nop
c001757d:	83 c4 0c             	add    esp,0xc
c0017580:	c3                   	ret    
c0017581:	90                   	nop
c0017582:	66 90                	xchg   ax,ax

c0017584 <SoundPort::unpause()>:
c0017584:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017588:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001758c:	c3                   	ret    
c001758d:	90                   	nop
c001758e:	66 90                	xchg   ax,ax

c0017590 <SoundPort::pause()>:
c0017590:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017594:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0017598:	c3                   	ret    
c0017599:	90                   	nop
c001759a:	66 90                	xchg   ax,ax

c001759c <SoundPort::getBufferUsed()>:
c001759c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175a0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00175a3:	c3                   	ret    

c00175a4 <SoundPort::getBufferSize()>:
c00175a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00175ab:	c3                   	ret    

c00175ac <SoundPort::buffer16(short*, int)>:
c00175ac:	55                   	push   ebp
c00175ad:	57                   	push   edi
c00175ae:	56                   	push   esi
c00175af:	53                   	push   ebx
c00175b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00175b4:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00175b8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00175bb:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c00175be:	74 68                	je     c0017628 <SoundPort::buffer16(short*, int)+0x7c>
c00175c0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00175c4:	85 c9                	test   ecx,ecx
c00175c6:	7e 60                	jle    c0017628 <SoundPort::buffer16(short*, int)+0x7c>
c00175c8:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c00175cc:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00175cf:	c1 e1 0f             	shl    ecx,0xf
c00175d2:	8d 70 01             	lea    esi,[eax+0x1]
c00175d5:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00175d8:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c00175db:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00175de:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00175e1:	74 4d                	je     c0017630 <SoundPort::buffer16(short*, int)+0x84>
c00175e3:	31 f6                	xor    esi,esi
c00175e5:	eb 21                	jmp    c0017608 <SoundPort::buffer16(short*, int)+0x5c>
c00175e7:	90                   	nop
c00175e8:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c00175ed:	8d 79 01             	lea    edi,[ecx+0x1]
c00175f0:	c1 e3 0f             	shl    ebx,0xf
c00175f3:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c00175f6:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c00175f9:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c00175fc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00175ff:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017602:	74 1c                	je     c0017620 <SoundPort::buffer16(short*, int)+0x74>
c0017604:	89 c6                	mov    esi,eax
c0017606:	66 90                	xchg   ax,ax
c0017608:	8d 46 01             	lea    eax,[esi+0x1]
c001760b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001760f:	75 d7                	jne    c00175e8 <SoundPort::buffer16(short*, int)+0x3c>
c0017611:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017615:	8d 76 00             	lea    esi,[esi+0x0]
c0017618:	5b                   	pop    ebx
c0017619:	5e                   	pop    esi
c001761a:	5f                   	pop    edi
c001761b:	5d                   	pop    ebp
c001761c:	c3                   	ret    
c001761d:	8d 76 00             	lea    esi,[esi+0x0]
c0017620:	5b                   	pop    ebx
c0017621:	8d 46 02             	lea    eax,[esi+0x2]
c0017624:	5e                   	pop    esi
c0017625:	5f                   	pop    edi
c0017626:	5d                   	pop    ebp
c0017627:	c3                   	ret    
c0017628:	5b                   	pop    ebx
c0017629:	31 c0                	xor    eax,eax
c001762b:	5e                   	pop    esi
c001762c:	5f                   	pop    edi
c001762d:	5d                   	pop    ebp
c001762e:	c3                   	ret    
c001762f:	90                   	nop
c0017630:	b8 01 00 00 00       	mov    eax,0x1
c0017635:	eb e1                	jmp    c0017618 <SoundPort::buffer16(short*, int)+0x6c>
c0017637:	90                   	nop

c0017638 <SoundPort::buffer32(int*, int)>:
c0017638:	55                   	push   ebp
c0017639:	57                   	push   edi
c001763a:	56                   	push   esi
c001763b:	53                   	push   ebx
c001763c:	51                   	push   ecx
c001763d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017641:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017645:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017648:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001764c:	89 04 24             	mov    DWORD PTR [esp],eax
c001764f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017652:	74 5c                	je     c00176b0 <SoundPort::buffer32(int*, int)+0x78>
c0017654:	85 c0                	test   eax,eax
c0017656:	7e 58                	jle    c00176b0 <SoundPort::buffer32(int*, int)+0x78>
c0017658:	8d 71 01             	lea    esi,[ecx+0x1]
c001765b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001765e:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0017661:	8b 37                	mov    esi,DWORD PTR [edi]
c0017663:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0017666:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017669:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001766c:	74 4a                	je     c00176b8 <SoundPort::buffer32(int*, int)+0x80>
c001766e:	31 f6                	xor    esi,esi
c0017670:	eb 1e                	jmp    c0017690 <SoundPort::buffer32(int*, int)+0x58>
c0017672:	66 90                	xchg   ax,ax
c0017674:	8d 69 01             	lea    ebp,[ecx+0x1]
c0017677:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001767a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001767d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0017680:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0017684:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017687:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001768a:	74 18                	je     c00176a4 <SoundPort::buffer32(int*, int)+0x6c>
c001768c:	89 de                	mov    esi,ebx
c001768e:	66 90                	xchg   ax,ax
c0017690:	8d 5e 01             	lea    ebx,[esi+0x1]
c0017693:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0017696:	75 dc                	jne    c0017674 <SoundPort::buffer32(int*, int)+0x3c>
c0017698:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001769b:	90                   	nop
c001769c:	5a                   	pop    edx
c001769d:	5b                   	pop    ebx
c001769e:	5e                   	pop    esi
c001769f:	5f                   	pop    edi
c00176a0:	5d                   	pop    ebp
c00176a1:	c3                   	ret    
c00176a2:	66 90                	xchg   ax,ax
c00176a4:	5a                   	pop    edx
c00176a5:	8d 46 02             	lea    eax,[esi+0x2]
c00176a8:	5b                   	pop    ebx
c00176a9:	5e                   	pop    esi
c00176aa:	5f                   	pop    edi
c00176ab:	5d                   	pop    ebp
c00176ac:	c3                   	ret    
c00176ad:	8d 76 00             	lea    esi,[esi+0x0]
c00176b0:	5a                   	pop    edx
c00176b1:	31 c0                	xor    eax,eax
c00176b3:	5b                   	pop    ebx
c00176b4:	5e                   	pop    esi
c00176b5:	5f                   	pop    edi
c00176b6:	5d                   	pop    ebp
c00176b7:	c3                   	ret    
c00176b8:	b8 01 00 00 00       	mov    eax,0x1
c00176bd:	eb dd                	jmp    c001769c <SoundPort::buffer32(int*, int)+0x64>
c00176bf:	90                   	nop

c00176c0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c00176c0:	57                   	push   edi
c00176c1:	56                   	push   esi
c00176c2:	53                   	push   ebx
c00176c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00176c7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00176cb:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c00176d1:	39 03                	cmp    DWORD PTR [ebx],eax
c00176d3:	74 13                	je     c00176e8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c00176d5:	83 ec 0c             	sub    esp,0xc
c00176d8:	68 e0 e3 01 c0       	push   0xc001e3e0
c00176dd:	e8 19 7d ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c00176e2:	83 c4 10             	add    esp,0x10
c00176e5:	8d 76 00             	lea    esi,[esi+0x0]
c00176e8:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c00176ee:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c00176f1:	74 11                	je     c0017704 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c00176f3:	83 ec 0c             	sub    esp,0xc
c00176f6:	68 1f e4 01 c0       	push   0xc001e41f
c00176fb:	e8 fb 7c ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c0017700:	83 c4 10             	add    esp,0x10
c0017703:	90                   	nop
c0017704:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001770a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001770d:	74 11                	je     c0017720 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001770f:	83 ec 0c             	sub    esp,0xc
c0017712:	68 1f e4 01 c0       	push   0xc001e41f
c0017717:	e8 df 7c ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c001771c:	83 c4 10             	add    esp,0x10
c001771f:	90                   	nop
c0017720:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017723:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0017727:	7e 07                	jle    c0017730 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0017729:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001772d:	8d 76 00             	lea    esi,[esi+0x0]
c0017730:	85 f6                	test   esi,esi
c0017732:	7e 2c                	jle    c0017760 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0017734:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017738:	8d 3c 36             	lea    edi,[esi+esi*1]
c001773b:	31 c9                	xor    ecx,ecx
c001773d:	01 d7                	add    edi,edx
c001773f:	90                   	nop
c0017740:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0017743:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0017746:	85 c0                	test   eax,eax
c0017748:	79 06                	jns    c0017750 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001774a:	05 ff 7f 00 00       	add    eax,0x7fff
c001774f:	90                   	nop
c0017750:	c1 f8 0f             	sar    eax,0xf
c0017753:	83 c1 04             	add    ecx,0x4
c0017756:	66 01 02             	add    WORD PTR [edx],ax
c0017759:	83 c2 02             	add    edx,0x2
c001775c:	39 d7                	cmp    edi,edx
c001775e:	75 e0                	jne    c0017740 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0017760:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0017763:	50                   	push   eax
c0017764:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017767:	29 f0                	sub    eax,esi
c0017769:	c1 e0 02             	shl    eax,0x2
c001776c:	50                   	push   eax
c001776d:	8d 04 b2             	lea    eax,[edx+esi*4]
c0017770:	50                   	push   eax
c0017771:	52                   	push   edx
c0017772:	e8 89 8c fe ff       	call   c0000400 <memmove>
c0017777:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001777a:	83 c4 10             	add    esp,0x10
c001777d:	89 f0                	mov    eax,esi
c001777f:	5b                   	pop    ebx
c0017780:	5e                   	pop    esi
c0017781:	5f                   	pop    edi
c0017782:	c3                   	ret    
c0017783:	90                   	nop

c0017784 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0017784:	57                   	push   edi
c0017785:	56                   	push   esi
c0017786:	53                   	push   ebx
c0017787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001778b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001778f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017793:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0017799:	39 06                	cmp    DWORD PTR [esi],eax
c001779b:	74 13                	je     c00177b0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001779d:	83 ec 0c             	sub    esp,0xc
c00177a0:	68 00 e4 01 c0       	push   0xc001e400
c00177a5:	e8 51 7c ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c00177aa:	83 c4 10             	add    esp,0x10
c00177ad:	8d 76 00             	lea    esi,[esi+0x0]
c00177b0:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c00177b6:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c00177b9:	74 11                	je     c00177cc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c00177bb:	83 ec 0c             	sub    esp,0xc
c00177be:	68 3b e4 01 c0       	push   0xc001e43b
c00177c3:	e8 33 7c ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c00177c8:	83 c4 10             	add    esp,0x10
c00177cb:	90                   	nop
c00177cc:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c00177d2:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c00177d5:	74 11                	je     c00177e8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c00177d7:	83 ec 0c             	sub    esp,0xc
c00177da:	68 3b e4 01 c0       	push   0xc001e43b
c00177df:	e8 17 7c ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c00177e4:	83 c4 10             	add    esp,0x10
c00177e7:	90                   	nop
c00177e8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00177eb:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c00177ef:	7e 07                	jle    c00177f8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c00177f1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00177f5:	8d 76 00             	lea    esi,[esi+0x0]
c00177f8:	85 ff                	test   edi,edi
c00177fa:	7e 1c                	jle    c0017818 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c00177fc:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0017803:	31 c0                	xor    eax,eax
c0017805:	8d 76 00             	lea    esi,[esi+0x0]
c0017808:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001780b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001780e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0017811:	83 c0 04             	add    eax,0x4
c0017814:	39 c1                	cmp    ecx,eax
c0017816:	75 f0                	jne    c0017808 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0017818:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001781b:	50                   	push   eax
c001781c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001781f:	29 f8                	sub    eax,edi
c0017821:	c1 e0 02             	shl    eax,0x2
c0017824:	50                   	push   eax
c0017825:	8d 04 ba             	lea    eax,[edx+edi*4]
c0017828:	50                   	push   eax
c0017829:	52                   	push   edx
c001782a:	e8 d1 8b fe ff       	call   c0000400 <memmove>
c001782f:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c0017832:	83 c4 10             	add    esp,0x10
c0017835:	89 f8                	mov    eax,edi
c0017837:	5b                   	pop    ebx
c0017838:	5e                   	pop    esi
c0017839:	5f                   	pop    edi
c001783a:	c3                   	ret    
c001783b:	90                   	nop

c001783c <PCI::open(int, int, void*)>:
c001783c:	83 ec 18             	sub    esp,0x18
c001783f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017843:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017847:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001784d:	8b 10                	mov    edx,DWORD PTR [eax]
c001784f:	50                   	push   eax
c0017850:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0017853:	31 c0                	xor    eax,eax
c0017855:	83 c4 1c             	add    esp,0x1c
c0017858:	c3                   	ret    
c0017859:	90                   	nop

c001785a <PCI::close(int, int, void*)>:
c001785a:	31 c0                	xor    eax,eax
c001785c:	c3                   	ret    
c001785d:	90                   	nop

c001785e <PCI::PCI()>:
c001785e:	83 ec 0c             	sub    esp,0xc
c0017861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017865:	83 ec 08             	sub    esp,0x8
c0017868:	68 57 e4 01 c0       	push   0xc001e457
c001786d:	50                   	push   eax
c001786e:	e8 cd 2d ff ff       	call   c000a640 <Bus::Bus(char const*)>
c0017873:	83 c4 10             	add    esp,0x10
c0017876:	ba 00 e5 01 c0       	mov    edx,0xc001e500
c001787b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001787f:	89 10                	mov    DWORD PTR [eax],edx
c0017881:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017885:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001788f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017893:	a3 a0 30 02 c0       	mov    ds:0xc00230a0,eax
c0017898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001789c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00178a2:	31 d2                	xor    edx,edx
c00178a4:	88 c2                	mov    dl,al
c00178a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178aa:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00178b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178b5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00178bb:	31 d2                	xor    edx,edx
c00178bd:	88 c2                	mov    dl,al
c00178bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178c3:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00178c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178cc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00178d2:	8d 50 01             	lea    edx,[eax+0x1]
c00178d5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00178d9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00178df:	31 d2                	xor    edx,edx
c00178e1:	88 c2                	mov    dl,al
c00178e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178e7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00178eb:	83 c9 c0             	or     ecx,0xffffffc0
c00178ee:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00178f2:	90                   	nop
c00178f3:	83 c4 0c             	add    esp,0xc
c00178f6:	c3                   	ret    
c00178f7:	90                   	nop

c00178f8 <PCI::readBAR8(unsigned int, int)>:
c00178f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00178fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017900:	f6 c2 01             	test   dl,0x1
c0017903:	74 07                	je     c001790c <PCI::readBAR8(unsigned int, int)+0x14>
c0017905:	83 e2 fc             	and    edx,0xfffffffc
c0017908:	01 c2                	add    edx,eax
c001790a:	ec                   	in     al,dx
c001790b:	c3                   	ret    
c001790c:	83 e2 f0             	and    edx,0xfffffff0
c001790f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0017912:	c3                   	ret    
c0017913:	90                   	nop

c0017914 <PCI::readBAR16(unsigned int, int)>:
c0017914:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017918:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001791c:	f6 c2 01             	test   dl,0x1
c001791f:	74 08                	je     c0017929 <PCI::readBAR16(unsigned int, int)+0x15>
c0017921:	83 e2 fc             	and    edx,0xfffffffc
c0017924:	01 c2                	add    edx,eax
c0017926:	66 ed                	in     ax,dx
c0017928:	c3                   	ret    
c0017929:	83 e2 f0             	and    edx,0xfffffff0
c001792c:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0017930:	c3                   	ret    
c0017931:	90                   	nop

c0017932 <PCI::readBAR32(unsigned int, int)>:
c0017932:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017936:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001793a:	f6 c2 01             	test   dl,0x1
c001793d:	74 07                	je     c0017946 <PCI::readBAR32(unsigned int, int)+0x14>
c001793f:	83 e2 fc             	and    edx,0xfffffffc
c0017942:	01 c2                	add    edx,eax
c0017944:	ed                   	in     eax,dx
c0017945:	c3                   	ret    
c0017946:	83 e2 f0             	and    edx,0xfffffff0
c0017949:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001794c:	c3                   	ret    
c001794d:	90                   	nop

c001794e <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001794e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017952:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017956:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001795a:	f6 c2 01             	test   dl,0x1
c001795d:	74 07                	je     c0017966 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001795f:	83 e2 fc             	and    edx,0xfffffffc
c0017962:	01 ca                	add    edx,ecx
c0017964:	ee                   	out    dx,al
c0017965:	c3                   	ret    
c0017966:	83 e2 f0             	and    edx,0xfffffff0
c0017969:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001796c:	c3                   	ret    
c001796d:	90                   	nop

c001796e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001796e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017972:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017976:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001797a:	f6 c2 01             	test   dl,0x1
c001797d:	74 08                	je     c0017987 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001797f:	83 e2 fc             	and    edx,0xfffffffc
c0017982:	01 ca                	add    edx,ecx
c0017984:	66 ef                	out    dx,ax
c0017986:	c3                   	ret    
c0017987:	83 e2 f0             	and    edx,0xfffffff0
c001798a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001798e:	c3                   	ret    
c001798f:	90                   	nop

c0017990 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0017990:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017994:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017998:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001799c:	f6 c2 01             	test   dl,0x1
c001799f:	74 07                	je     c00179a8 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00179a1:	83 e2 fc             	and    edx,0xfffffffc
c00179a4:	01 ca                	add    edx,ecx
c00179a6:	ef                   	out    dx,eax
c00179a7:	c3                   	ret    
c00179a8:	83 e2 f0             	and    edx,0xfffffff0
c00179ab:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00179ae:	c3                   	ret    
c00179af:	90                   	nop

c00179b0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00179b0:	55                   	push   ebp
c00179b1:	57                   	push   edi
c00179b2:	56                   	push   esi
c00179b3:	53                   	push   ebx
c00179b4:	83 ec 0c             	sub    esp,0xc
c00179b7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00179bb:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00179bf:	89 f0                	mov    eax,esi
c00179c1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00179c5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00179c9:	3c 07                	cmp    al,0x7
c00179cb:	76 10                	jbe    c00179dd <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00179cd:	83 ec 0c             	sub    esp,0xc
c00179d0:	68 5f e4 01 c0       	push   0xc001e45f
c00179d5:	e8 21 7a ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c00179da:	83 c4 10             	add    esp,0x10
c00179dd:	80 fb 0f             	cmp    bl,0xf
c00179e0:	76 10                	jbe    c00179f2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c00179e2:	83 ec 0c             	sub    esp,0xc
c00179e5:	68 8f e4 01 c0       	push   0xc001e48f
c00179ea:	e8 0c 7a ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c00179ef:	83 c4 10             	add    esp,0x10
c00179f2:	8d 04 36             	lea    eax,[esi+esi*1]
c00179f5:	ba f8 0c 00 00       	mov    edx,0xcf8
c00179fa:	83 c8 f0             	or     eax,0xfffffff0
c00179fd:	ee                   	out    dx,al
c00179fe:	ba fa 0c 00 00       	mov    edx,0xcfa
c0017a03:	89 e8                	mov    eax,ebp
c0017a05:	ee                   	out    dx,al
c0017a06:	83 c4 0c             	add    esp,0xc
c0017a09:	89 d8                	mov    eax,ebx
c0017a0b:	66 81 e7 fc 00       	and    di,0xfc
c0017a10:	5b                   	pop    ebx
c0017a11:	c1 e0 08             	shl    eax,0x8
c0017a14:	5e                   	pop    esi
c0017a15:	09 f8                	or     eax,edi
c0017a17:	5f                   	pop    edi
c0017a18:	66 0d 00 c0          	or     ax,0xc000
c0017a1c:	5d                   	pop    ebp
c0017a1d:	c3                   	ret    

c0017a1e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0017a1e:	57                   	push   edi
c0017a1f:	56                   	push   esi
c0017a20:	53                   	push   ebx
c0017a21:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017a25:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a29:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0017a2f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017a37:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017a3b:	83 ff 01             	cmp    edi,0x1
c0017a3e:	75 3e                	jne    c0017a7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0017a40:	89 de                	mov    esi,ebx
c0017a42:	0f b6 c0             	movzx  eax,al
c0017a45:	81 e6 fc 00 00 00    	and    esi,0xfc
c0017a4b:	c1 e0 10             	shl    eax,0x10
c0017a4e:	0f b6 c9             	movzx  ecx,cl
c0017a51:	09 f0                	or     eax,esi
c0017a53:	c1 e1 08             	shl    ecx,0x8
c0017a56:	0f b6 d2             	movzx  edx,dl
c0017a59:	09 c8                	or     eax,ecx
c0017a5b:	c1 e2 0b             	shl    edx,0xb
c0017a5e:	09 d0                	or     eax,edx
c0017a60:	ba f8 0c 00 00       	mov    edx,0xcf8
c0017a65:	0d 00 00 00 80       	or     eax,0x80000000
c0017a6a:	ef                   	out    dx,eax
c0017a6b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0017a70:	ed                   	in     eax,dx
c0017a71:	83 e3 02             	and    ebx,0x2
c0017a74:	0f b6 cb             	movzx  ecx,bl
c0017a77:	c1 e1 03             	shl    ecx,0x3
c0017a7a:	d3 e8                	shr    eax,cl
c0017a7c:	eb 43                	jmp    c0017ac1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0017a7e:	83 ff 02             	cmp    edi,0x2
c0017a81:	75 2c                	jne    c0017aaf <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0017a83:	83 ec 0c             	sub    esp,0xc
c0017a86:	0f b6 c9             	movzx  ecx,cl
c0017a89:	0f b6 d2             	movzx  edx,dl
c0017a8c:	0f b6 fb             	movzx  edi,bl
c0017a8f:	0f b6 c0             	movzx  eax,al
c0017a92:	57                   	push   edi
c0017a93:	51                   	push   ecx
c0017a94:	52                   	push   edx
c0017a95:	50                   	push   eax
c0017a96:	56                   	push   esi
c0017a97:	e8 14 ff ff ff       	call   c00179b0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017a9c:	89 c2                	mov    edx,eax
c0017a9e:	ed                   	in     eax,dx
c0017a9f:	83 e3 02             	and    ebx,0x2
c0017aa2:	83 c4 20             	add    esp,0x20
c0017aa5:	0f b6 cb             	movzx  ecx,bl
c0017aa8:	c1 e1 03             	shl    ecx,0x3
c0017aab:	d3 e8                	shr    eax,cl
c0017aad:	eb 12                	jmp    c0017ac1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0017aaf:	83 ec 0c             	sub    esp,0xc
c0017ab2:	68 bf e4 01 c0       	push   0xc001e4bf
c0017ab7:	e8 3f 79 ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c0017abc:	83 c4 10             	add    esp,0x10
c0017abf:	31 c0                	xor    eax,eax
c0017ac1:	5b                   	pop    ebx
c0017ac2:	5e                   	pop    esi
c0017ac3:	5f                   	pop    edi
c0017ac4:	c3                   	ret    
c0017ac5:	90                   	nop

c0017ac6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0017ac6:	83 ec 18             	sub    esp,0x18
c0017ac9:	6a 00                	push   0x0
c0017acb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017ad0:	50                   	push   eax
c0017ad1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017ad6:	50                   	push   eax
c0017ad7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017adc:	50                   	push   eax
c0017add:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ae1:	e8 38 ff ff ff       	call   c0017a1e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017ae6:	83 c4 2c             	add    esp,0x2c
c0017ae9:	c3                   	ret    

c0017aea <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0017aea:	83 ec 18             	sub    esp,0x18
c0017aed:	6a 0e                	push   0xe
c0017aef:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017af4:	50                   	push   eax
c0017af5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017afa:	50                   	push   eax
c0017afb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017b00:	50                   	push   eax
c0017b01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b05:	e8 14 ff ff ff       	call   c0017a1e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017b0a:	83 c4 2c             	add    esp,0x2c
c0017b0d:	0f b6 c0             	movzx  eax,al
c0017b10:	c3                   	ret    
c0017b11:	90                   	nop

c0017b12 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0017b12:	55                   	push   ebp
c0017b13:	57                   	push   edi
c0017b14:	56                   	push   esi
c0017b15:	53                   	push   ebx
c0017b16:	83 ec 18             	sub    esp,0x18
c0017b19:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0017b1e:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0017b23:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0017b28:	6a 0a                	push   0xa
c0017b2a:	56                   	push   esi
c0017b2b:	55                   	push   ebp
c0017b2c:	57                   	push   edi
c0017b2d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017b31:	e8 e8 fe ff ff       	call   c0017a1e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017b36:	83 c4 14             	add    esp,0x14
c0017b39:	89 c3                	mov    ebx,eax
c0017b3b:	6a 0a                	push   0xa
c0017b3d:	0f b6 db             	movzx  ebx,bl
c0017b40:	56                   	push   esi
c0017b41:	55                   	push   ebp
c0017b42:	57                   	push   edi
c0017b43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017b47:	e8 d2 fe ff ff       	call   c0017a1e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017b4c:	83 c4 2c             	add    esp,0x2c
c0017b4f:	25 00 ff 00 00       	and    eax,0xff00
c0017b54:	09 d8                	or     eax,ebx
c0017b56:	5b                   	pop    ebx
c0017b57:	5e                   	pop    esi
c0017b58:	5f                   	pop    edi
c0017b59:	5d                   	pop    ebp
c0017b5a:	c3                   	ret    
c0017b5b:	90                   	nop

c0017b5c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0017b5c:	83 ec 18             	sub    esp,0x18
c0017b5f:	6a 08                	push   0x8
c0017b61:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017b66:	50                   	push   eax
c0017b67:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017b6c:	50                   	push   eax
c0017b6d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017b72:	50                   	push   eax
c0017b73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b77:	e8 a2 fe ff ff       	call   c0017a1e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017b7c:	83 c4 2c             	add    esp,0x2c
c0017b7f:	0f b6 c4             	movzx  eax,ah
c0017b82:	c3                   	ret    
c0017b83:	90                   	nop

c0017b84 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0017b84:	83 ec 18             	sub    esp,0x18
c0017b87:	6a 08                	push   0x8
c0017b89:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017b8e:	50                   	push   eax
c0017b8f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017b94:	50                   	push   eax
c0017b95:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017b9a:	50                   	push   eax
c0017b9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b9f:	e8 7a fe ff ff       	call   c0017a1e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017ba4:	83 c4 2c             	add    esp,0x2c
c0017ba7:	c3                   	ret    

c0017ba8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0017ba8:	83 ec 18             	sub    esp,0x18
c0017bab:	6a 3c                	push   0x3c
c0017bad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017bb2:	50                   	push   eax
c0017bb3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017bb8:	50                   	push   eax
c0017bb9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017bbe:	50                   	push   eax
c0017bbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017bc3:	e8 56 fe ff ff       	call   c0017a1e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017bc8:	83 c4 2c             	add    esp,0x2c
c0017bcb:	c3                   	ret    

c0017bcc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0017bcc:	83 ec 18             	sub    esp,0x18
c0017bcf:	6a 18                	push   0x18
c0017bd1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017bd6:	50                   	push   eax
c0017bd7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017bdc:	50                   	push   eax
c0017bdd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017be2:	50                   	push   eax
c0017be3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017be7:	e8 32 fe ff ff       	call   c0017a1e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017bec:	83 c4 2c             	add    esp,0x2c
c0017bef:	0f b6 c4             	movzx  eax,ah
c0017bf2:	c3                   	ret    
c0017bf3:	90                   	nop

c0017bf4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0017bf4:	55                   	push   ebp
c0017bf5:	57                   	push   edi
c0017bf6:	56                   	push   esi
c0017bf7:	53                   	push   ebx
c0017bf8:	83 ec 28             	sub    esp,0x28
c0017bfb:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0017bff:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0017c04:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0017c09:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0017c0e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0017c15:	8d 43 12             	lea    eax,[ebx+0x12]
c0017c18:	83 c3 10             	add    ebx,0x10
c0017c1b:	0f b6 c0             	movzx  eax,al
c0017c1e:	0f b6 db             	movzx  ebx,bl
c0017c21:	50                   	push   eax
c0017c22:	51                   	push   ecx
c0017c23:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0017c27:	57                   	push   edi
c0017c28:	55                   	push   ebp
c0017c29:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017c2d:	e8 ec fd ff ff       	call   c0017a1e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017c32:	83 c4 14             	add    esp,0x14
c0017c35:	89 c6                	mov    esi,eax
c0017c37:	53                   	push   ebx
c0017c38:	c1 e6 10             	shl    esi,0x10
c0017c3b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017c3f:	51                   	push   ecx
c0017c40:	57                   	push   edi
c0017c41:	55                   	push   ebp
c0017c42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017c46:	e8 d3 fd ff ff       	call   c0017a1e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017c4b:	83 c4 3c             	add    esp,0x3c
c0017c4e:	0f b7 c0             	movzx  eax,ax
c0017c51:	5b                   	pop    ebx
c0017c52:	09 f0                	or     eax,esi
c0017c54:	5e                   	pop    esi
c0017c55:	5f                   	pop    edi
c0017c56:	5d                   	pop    ebp
c0017c57:	c3                   	ret    

c0017c58 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0017c58:	55                   	push   ebp
c0017c59:	57                   	push   edi
c0017c5a:	56                   	push   esi
c0017c5b:	53                   	push   ebx
c0017c5c:	83 ec 0c             	sub    esp,0xc
c0017c5f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0017c63:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0017c67:	89 f5                	mov    ebp,esi
c0017c69:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0017c6f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017c73:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c77:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017c7b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0017c7f:	83 f9 01             	cmp    ecx,0x1
c0017c82:	75 5d                	jne    c0017ce1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0017c84:	0f b6 c8             	movzx  ecx,al
c0017c87:	0f b6 d2             	movzx  edx,dl
c0017c8a:	c1 e1 10             	shl    ecx,0x10
c0017c8d:	c1 e2 0b             	shl    edx,0xb
c0017c90:	89 f0                	mov    eax,esi
c0017c92:	25 fc 00 00 00       	and    eax,0xfc
c0017c97:	09 c1                	or     ecx,eax
c0017c99:	89 e8                	mov    eax,ebp
c0017c9b:	0f b6 c0             	movzx  eax,al
c0017c9e:	c1 e0 08             	shl    eax,0x8
c0017ca1:	09 c1                	or     ecx,eax
c0017ca3:	09 d1                	or     ecx,edx
c0017ca5:	ba f8 0c 00 00       	mov    edx,0xcf8
c0017caa:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0017cb0:	89 c8                	mov    eax,ecx
c0017cb2:	ef                   	out    dx,eax
c0017cb3:	ba fc 0c 00 00       	mov    edx,0xcfc
c0017cb8:	ed                   	in     eax,dx
c0017cb9:	0f b7 db             	movzx  ebx,bx
c0017cbc:	83 e6 02             	and    esi,0x2
c0017cbf:	74 0a                	je     c0017ccb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0017cc1:	0f b7 d0             	movzx  edx,ax
c0017cc4:	c1 e3 10             	shl    ebx,0x10
c0017cc7:	09 d3                	or     ebx,edx
c0017cc9:	eb 05                	jmp    c0017cd0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0017ccb:	66 31 c0             	xor    ax,ax
c0017cce:	09 c3                	or     ebx,eax
c0017cd0:	ba f8 0c 00 00       	mov    edx,0xcf8
c0017cd5:	89 c8                	mov    eax,ecx
c0017cd7:	ef                   	out    dx,eax
c0017cd8:	ba fc 0c 00 00       	mov    edx,0xcfc
c0017cdd:	89 d8                	mov    eax,ebx
c0017cdf:	eb 41                	jmp    c0017d22 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0017ce1:	83 f9 02             	cmp    ecx,0x2
c0017ce4:	75 45                	jne    c0017d2b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0017ce6:	83 ec 0c             	sub    esp,0xc
c0017ce9:	0f b6 d2             	movzx  edx,dl
c0017cec:	89 f1                	mov    ecx,esi
c0017cee:	0f b6 c0             	movzx  eax,al
c0017cf1:	0f b6 f1             	movzx  esi,cl
c0017cf4:	89 e9                	mov    ecx,ebp
c0017cf6:	56                   	push   esi
c0017cf7:	0f b6 c9             	movzx  ecx,cl
c0017cfa:	51                   	push   ecx
c0017cfb:	52                   	push   edx
c0017cfc:	50                   	push   eax
c0017cfd:	57                   	push   edi
c0017cfe:	e8 ad fc ff ff       	call   c00179b0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017d03:	89 c2                	mov    edx,eax
c0017d05:	ed                   	in     eax,dx
c0017d06:	83 c4 20             	add    esp,0x20
c0017d09:	0f b7 db             	movzx  ebx,bx
c0017d0c:	f6 c2 02             	test   dl,0x2
c0017d0f:	74 0c                	je     c0017d1d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0017d11:	0f b7 c8             	movzx  ecx,ax
c0017d14:	89 d8                	mov    eax,ebx
c0017d16:	c1 e0 10             	shl    eax,0x10
c0017d19:	09 c8                	or     eax,ecx
c0017d1b:	eb 05                	jmp    c0017d22 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0017d1d:	66 31 c0             	xor    ax,ax
c0017d20:	09 d8                	or     eax,ebx
c0017d22:	ef                   	out    dx,eax
c0017d23:	83 c4 0c             	add    esp,0xc
c0017d26:	5b                   	pop    ebx
c0017d27:	5e                   	pop    esi
c0017d28:	5f                   	pop    edi
c0017d29:	5d                   	pop    ebp
c0017d2a:	c3                   	ret    
c0017d2b:	c7 44 24 20 bf e4 01 c0 	mov    DWORD PTR [esp+0x20],0xc001e4bf
c0017d33:	83 c4 0c             	add    esp,0xc
c0017d36:	5b                   	pop    ebx
c0017d37:	5e                   	pop    esi
c0017d38:	5f                   	pop    edi
c0017d39:	5d                   	pop    ebp
c0017d3a:	e9 bc 76 ff ff       	jmp    c000f3fb <Krnl::panic(char const*)>
c0017d3f:	90                   	nop

c0017d40 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0017d40:	55                   	push   ebp
c0017d41:	57                   	push   edi
c0017d42:	56                   	push   esi
c0017d43:	53                   	push   ebx
c0017d44:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0017d4a:	80 3d ac 30 02 c0 00 	cmp    BYTE PTR ds:0xc00230ac,0x0
c0017d51:	0f 85 84 00 00 00    	jne    c0017ddb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0017d57:	83 ec 0c             	sub    esp,0xc
c0017d5a:	68 14 01 00 00       	push   0x114
c0017d5f:	e8 b9 ed fe ff       	call   c0006b1d <malloc>
c0017d64:	83 c4 0c             	add    esp,0xc
c0017d67:	89 c3                	mov    ebx,eax
c0017d69:	ff 35 f0 26 02 c0    	push   DWORD PTR ds:0xc00226f0
c0017d6f:	68 c5 e4 01 c0       	push   0xc001e4c5
c0017d74:	50                   	push   eax
c0017d75:	e8 a8 20 ff ff       	call   c0009e22 <File::File(char const*, Process*)>
c0017d7a:	5a                   	pop    edx
c0017d7b:	59                   	pop    ecx
c0017d7c:	6a 01                	push   0x1
c0017d7e:	53                   	push   ebx
c0017d7f:	e8 5e 21 ff ff       	call   c0009ee2 <File::open(FileOpenMode)>
c0017d84:	83 c4 0c             	add    esp,0xc
c0017d87:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0017d8b:	50                   	push   eax
c0017d8c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0017d90:	50                   	push   eax
c0017d91:	53                   	push   ebx
c0017d92:	e8 f7 23 ff ff       	call   c000a18e <File::stat(unsigned long long*, bool*)>
c0017d97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d9b:	40                   	inc    eax
c0017d9c:	89 04 24             	mov    DWORD PTR [esp],eax
c0017d9f:	e8 79 ed fe ff       	call   c0006b1d <malloc>
c0017da4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017da8:	a3 a8 30 02 c0       	mov    ds:0xc00230a8,eax
c0017dad:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0017db1:	5e                   	pop    esi
c0017db2:	8b 13                	mov    edx,DWORD PTR [ebx]
c0017db4:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0017db8:	51                   	push   ecx
c0017db9:	50                   	push   eax
c0017dba:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017dbe:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017dc2:	53                   	push   ebx
c0017dc3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0017dc6:	83 c4 14             	add    esp,0x14
c0017dc9:	53                   	push   ebx
c0017dca:	e8 71 21 ff ff       	call   c0009f40 <File::close()>
c0017dcf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017dd3:	83 c4 10             	add    esp,0x10
c0017dd6:	a3 a4 30 02 c0       	mov    ds:0xc00230a4,eax
c0017ddb:	a1 a4 30 02 c0       	mov    eax,ds:0xc00230a4
c0017de0:	8b 15 a8 30 02 c0    	mov    edx,DWORD PTR ds:0xc00230a8
c0017de6:	89 04 24             	mov    DWORD PTR [esp],eax
c0017de9:	31 ff                	xor    edi,edi
c0017deb:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0017df3:	31 f6                	xor    esi,esi
c0017df5:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0017dfa:	31 db                	xor    ebx,ebx
c0017dfc:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0017e04:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017e09:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0017e10:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0017e14:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0017e1b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017e1f:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0017e22:	0f 8e 6b 01 00 00    	jle    c0017f93 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0017e28:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0017e2b:	d4 40                	aam    0x40
c0017e2d:	d5 39                	aad    0x39
c0017e2f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017e33:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0017e37:	d4 40                	aam    0x40
c0017e39:	d5 39                	aad    0x39
c0017e3b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017e3f:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0017e43:	d4 40                	aam    0x40
c0017e45:	d5 39                	aad    0x39
c0017e47:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017e4b:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0017e4f:	d4 40                	aam    0x40
c0017e51:	d5 39                	aad    0x39
c0017e53:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017e57:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0017e5b:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017e5f:	3c 56                	cmp    al,0x56
c0017e61:	74 45                	je     c0017ea8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0017e63:	d4 40                	aam    0x40
c0017e65:	d5 39                	aad    0x39
c0017e67:	8d 48 d0             	lea    ecx,[eax-0x30]
c0017e6a:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0017e6e:	0f b6 c9             	movzx  ecx,cl
c0017e71:	c1 e1 04             	shl    ecx,0x4
c0017e74:	d4 40                	aam    0x40
c0017e76:	d5 39                	aad    0x39
c0017e78:	8d 58 d0             	lea    ebx,[eax-0x30]
c0017e7b:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0017e7f:	0f b6 db             	movzx  ebx,bl
c0017e82:	09 cb                	or     ebx,ecx
c0017e84:	c1 e3 04             	shl    ebx,0x4
c0017e87:	d4 40                	aam    0x40
c0017e89:	d5 39                	aad    0x39
c0017e8b:	8d 48 d0             	lea    ecx,[eax-0x30]
c0017e8e:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0017e92:	0f b6 c9             	movzx  ecx,cl
c0017e95:	09 cb                	or     ebx,ecx
c0017e97:	c1 e3 04             	shl    ebx,0x4
c0017e9a:	89 d9                	mov    ecx,ebx
c0017e9c:	d4 40                	aam    0x40
c0017e9e:	d5 39                	aad    0x39
c0017ea0:	8d 58 d0             	lea    ebx,[eax-0x30]
c0017ea3:	0f b6 db             	movzx  ebx,bl
c0017ea6:	09 cb                	or     ebx,ecx
c0017ea8:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0017eac:	80 f9 44             	cmp    cl,0x44
c0017eaf:	74 47                	je     c0017ef8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0017eb1:	88 c8                	mov    al,cl
c0017eb3:	d4 40                	aam    0x40
c0017eb5:	d5 39                	aad    0x39
c0017eb7:	83 e8 30             	sub    eax,0x30
c0017eba:	0f b6 e8             	movzx  ebp,al
c0017ebd:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0017ec1:	c1 e5 04             	shl    ebp,0x4
c0017ec4:	d4 40                	aam    0x40
c0017ec6:	d5 39                	aad    0x39
c0017ec8:	83 e8 30             	sub    eax,0x30
c0017ecb:	0f b6 f0             	movzx  esi,al
c0017ece:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0017ed2:	09 ee                	or     esi,ebp
c0017ed4:	c1 e6 04             	shl    esi,0x4
c0017ed7:	d4 40                	aam    0x40
c0017ed9:	d5 39                	aad    0x39
c0017edb:	83 e8 30             	sub    eax,0x30
c0017ede:	0f b6 e8             	movzx  ebp,al
c0017ee1:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0017ee5:	09 ee                	or     esi,ebp
c0017ee7:	c1 e6 04             	shl    esi,0x4
c0017eea:	89 f5                	mov    ebp,esi
c0017eec:	d4 40                	aam    0x40
c0017eee:	d5 39                	aad    0x39
c0017ef0:	83 e8 30             	sub    eax,0x30
c0017ef3:	0f b6 f0             	movzx  esi,al
c0017ef6:	09 ee                	or     esi,ebp
c0017ef8:	83 c7 10             	add    edi,0x10
c0017efb:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0017eff:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0017f02:	3c 0a                	cmp    al,0xa
c0017f04:	74 09                	je     c0017f0f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0017f06:	45                   	inc    ebp
c0017f07:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0017f0a:	75 16                	jne    c0017f22 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0017f0c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0017f0f:	3c 0a                	cmp    al,0xa
c0017f11:	0f 94 c0             	sete   al
c0017f14:	0f b6 c0             	movzx  eax,al
c0017f17:	01 c7                	add    edi,eax
c0017f19:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0017f1e:	75 0c                	jne    c0017f2c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0017f20:	eb 15                	jmp    c0017f37 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0017f22:	47                   	inc    edi
c0017f23:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0017f26:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0017f2a:	eb d3                	jmp    c0017eff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0017f2c:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0017f31:	0f 85 e8 fe ff ff    	jne    c0017e1f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0017f37:	80 f9 44             	cmp    cl,0x44
c0017f3a:	74 0b                	je     c0017f47 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0017f3c:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0017f41:	0f 85 d8 fe ff ff    	jne    c0017e1f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0017f47:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017f4b:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017f4f:	c1 e1 04             	shl    ecx,0x4
c0017f52:	83 e8 30             	sub    eax,0x30
c0017f55:	09 c8                	or     eax,ecx
c0017f57:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0017f5b:	0f 85 be fe ff ff    	jne    c0017e1f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0017f61:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0017f65:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017f69:	c1 e1 04             	shl    ecx,0x4
c0017f6c:	83 e8 30             	sub    eax,0x30
c0017f6f:	09 c8                	or     eax,ecx
c0017f71:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0017f75:	0f 85 a4 fe ff ff    	jne    c0017e1f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0017f7b:	50                   	push   eax
c0017f7c:	50                   	push   eax
c0017f7d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0017f81:	50                   	push   eax
c0017f82:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0017f89:	e8 92 86 fe ff       	call   c0000620 <strcpy>
c0017f8e:	83 c4 10             	add    esp,0x10
c0017f91:	eb 15                	jmp    c0017fa8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0017f93:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0017f9a:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0017fa5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0017fa8:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0017faf:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017fb5:	5b                   	pop    ebx
c0017fb6:	5e                   	pop    esi
c0017fb7:	5f                   	pop    edi
c0017fb8:	5d                   	pop    ebp
c0017fb9:	c3                   	ret    

c0017fba <PCI::checkBus(unsigned char)>:
c0017fba:	56                   	push   esi
c0017fbb:	53                   	push   ebx
c0017fbc:	31 f6                	xor    esi,esi
c0017fbe:	51                   	push   ecx
c0017fbf:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0017fc3:	0f b6 c3             	movzx  eax,bl
c0017fc6:	52                   	push   edx
c0017fc7:	56                   	push   esi
c0017fc8:	46                   	inc    esi
c0017fc9:	50                   	push   eax
c0017fca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017fce:	e8 f3 02 00 00       	call   c00182c6 <PCI::checkDevice(unsigned char, unsigned char)>
c0017fd3:	83 c4 10             	add    esp,0x10
c0017fd6:	83 fe 20             	cmp    esi,0x20
c0017fd9:	75 e8                	jne    c0017fc3 <PCI::checkBus(unsigned char)+0x9>
c0017fdb:	58                   	pop    eax
c0017fdc:	5b                   	pop    ebx
c0017fdd:	5e                   	pop    esi
c0017fde:	c3                   	ret    
c0017fdf:	90                   	nop

c0017fe0 <PCI::foundDevice(PCIDeviceInfo)>:
c0017fe0:	55                   	push   ebp
c0017fe1:	57                   	push   edi
c0017fe2:	56                   	push   esi
c0017fe3:	53                   	push   ebx
c0017fe4:	83 ec 1c             	sub    esp,0x1c
c0017fe7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017feb:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0017ff1:	0f 84 52 01 00 00    	je     c0018149 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0017ff7:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0017ffb:	66 81 f9 06 04       	cmp    cx,0x406
c0018000:	75 2c                	jne    c001802e <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018002:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018007:	50                   	push   eax
c0018008:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001800d:	50                   	push   eax
c001800e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018013:	50                   	push   eax
c0018014:	56                   	push   esi
c0018015:	e8 b2 fb ff ff       	call   c0017bcc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001801a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001801e:	0f b6 c0             	movzx  eax,al
c0018021:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018025:	83 c4 2c             	add    esp,0x2c
c0018028:	5b                   	pop    ebx
c0018029:	5e                   	pop    esi
c001802a:	5f                   	pop    edi
c001802b:	5d                   	pop    ebp
c001802c:	eb 8c                	jmp    c0017fba <PCI::checkBus(unsigned char)>
c001802e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018032:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018038:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001803c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018040:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018044:	88 d3                	mov    bl,dl
c0018046:	85 c0                	test   eax,eax
c0018048:	74 33                	je     c001807d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001804a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001804d:	85 d2                	test   edx,edx
c001804f:	74 28                	je     c0018079 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018051:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018057:	31 ef                	xor    edi,ebp
c0018059:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001805f:	75 18                	jne    c0018079 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018061:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018065:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001806b:	75 0c                	jne    c0018079 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001806d:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018073:	0f 84 d0 00 00 00    	je     c0018149 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018079:	8b 00                	mov    eax,DWORD PTR [eax]
c001807b:	eb c9                	jmp    c0018046 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001807d:	66 81 f9 01 06       	cmp    cx,0x601
c0018082:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018086:	75 19                	jne    c00180a1 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018088:	83 ec 0c             	sub    esp,0xc
c001808b:	68 64 01 00 00       	push   0x164
c0018090:	e8 88 ea fe ff       	call   c0006b1d <malloc>
c0018095:	89 c5                	mov    ebp,eax
c0018097:	89 04 24             	mov    DWORD PTR [esp],eax
c001809a:	e8 47 0e 00 00       	call   c0018ee6 <SATABus::SATABus()>
c001809f:	eb 1e                	jmp    c00180bf <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c00180a1:	66 81 f9 01 01       	cmp    cx,0x101
c00180a6:	75 60                	jne    c0018108 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c00180a8:	83 ec 0c             	sub    esp,0xc
c00180ab:	68 70 02 00 00       	push   0x270
c00180b0:	e8 68 ea fe ff       	call   c0006b1d <malloc>
c00180b5:	89 c5                	mov    ebp,eax
c00180b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00180ba:	e8 cb 02 00 00       	call   c001838a <IDE::IDE()>
c00180bf:	58                   	pop    eax
c00180c0:	5a                   	pop    edx
c00180c1:	55                   	push   ebp
c00180c2:	56                   	push   esi
c00180c3:	e8 24 2c ff ff       	call   c000acec <Device::addChild(Device*)>
c00180c8:	83 ec 1c             	sub    esp,0x1c
c00180cb:	b9 09 00 00 00       	mov    ecx,0x9
c00180d0:	fc                   	cld    
c00180d1:	89 e7                	mov    edi,esp
c00180d3:	89 de                	mov    esi,ebx
c00180d5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00180d7:	55                   	push   ebp
c00180d8:	e8 55 2b ff ff       	call   c000ac32 <Device::preOpenPCI(PCIDeviceInfo)>
c00180dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00180e0:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c00180e4:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c00180ec:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c00180f4:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c00180fc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00180ff:	83 c4 4c             	add    esp,0x4c
c0018102:	5b                   	pop    ebx
c0018103:	5e                   	pop    esi
c0018104:	5f                   	pop    edi
c0018105:	5d                   	pop    ebp
c0018106:	ff e0                	jmp    eax
c0018108:	83 ec 0c             	sub    esp,0xc
c001810b:	68 58 01 00 00       	push   0x158
c0018110:	e8 08 ea fe ff       	call   c0006b1d <malloc>
c0018115:	89 c5                	mov    ebp,eax
c0018117:	58                   	pop    eax
c0018118:	5a                   	pop    edx
c0018119:	68 de e4 01 c0       	push   0xc001e4de
c001811e:	55                   	push   ebp
c001811f:	e8 66 2e ff ff       	call   c000af8a <DriverlessDevice::DriverlessDevice(char const*)>
c0018124:	59                   	pop    ecx
c0018125:	5f                   	pop    edi
c0018126:	55                   	push   ebp
c0018127:	56                   	push   esi
c0018128:	e8 bf 2b ff ff       	call   c000acec <Device::addChild(Device*)>
c001812d:	b9 09 00 00 00       	mov    ecx,0x9
c0018132:	fc                   	cld    
c0018133:	89 df                	mov    edi,ebx
c0018135:	89 de                	mov    esi,ebx
c0018137:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018139:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001813d:	83 c4 2c             	add    esp,0x2c
c0018140:	5b                   	pop    ebx
c0018141:	5e                   	pop    esi
c0018142:	5f                   	pop    edi
c0018143:	5d                   	pop    ebp
c0018144:	e9 e9 2a ff ff       	jmp    c000ac32 <Device::preOpenPCI(PCIDeviceInfo)>
c0018149:	83 c4 1c             	add    esp,0x1c
c001814c:	5b                   	pop    ebx
c001814d:	5e                   	pop    esi
c001814e:	5f                   	pop    edi
c001814f:	5d                   	pop    ebp
c0018150:	c3                   	ret    
c0018151:	90                   	nop

c0018152 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018152:	55                   	push   ebp
c0018153:	57                   	push   edi
c0018154:	56                   	push   esi
c0018155:	53                   	push   ebx
c0018156:	83 ec 68             	sub    esp,0x68
c0018159:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001815d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018164:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018168:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001816f:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018174:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018178:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001817f:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018184:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018188:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001818d:	6a 0c                	push   0xc
c001818f:	57                   	push   edi
c0018190:	53                   	push   ebx
c0018191:	56                   	push   esi
c0018192:	55                   	push   ebp
c0018193:	e8 86 f8 ff ff       	call   c0017a1e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018198:	83 c4 20             	add    esp,0x20
c001819b:	57                   	push   edi
c001819c:	53                   	push   ebx
c001819d:	56                   	push   esi
c001819e:	55                   	push   ebp
c001819f:	e8 6e f9 ff ff       	call   c0017b12 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c00181a4:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c00181a9:	57                   	push   edi
c00181aa:	53                   	push   ebx
c00181ab:	56                   	push   esi
c00181ac:	55                   	push   ebp
c00181ad:	e8 f6 f9 ff ff       	call   c0017ba8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c00181b2:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00181b6:	83 c4 14             	add    esp,0x14
c00181b9:	6a 3c                	push   0x3c
c00181bb:	57                   	push   edi
c00181bc:	53                   	push   ebx
c00181bd:	56                   	push   esi
c00181be:	55                   	push   ebp
c00181bf:	e8 5a f8 ff ff       	call   c0017a1e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00181c4:	0f b6 c4             	movzx  eax,ah
c00181c7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00181cb:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c00181cf:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c00181d3:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c00181d8:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c00181de:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c00181e4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00181e8:	83 c4 20             	add    esp,0x20
c00181eb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00181f0:	74 30                	je     c0018222 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c00181f2:	31 c0                	xor    eax,eax
c00181f4:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00181f8:	7e 28                	jle    c0018222 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c00181fa:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018202:	39 cb                	cmp    ebx,ecx
c0018204:	75 19                	jne    c001821f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018206:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001820e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018212:	75 0b                	jne    c001821f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018214:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001821b:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c001821f:	40                   	inc    eax
c0018220:	eb d2                	jmp    c00181f4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018222:	31 d2                	xor    edx,edx
c0018224:	83 ec 0c             	sub    esp,0xc
c0018227:	57                   	push   edi
c0018228:	53                   	push   ebx
c0018229:	56                   	push   esi
c001822a:	52                   	push   edx
c001822b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001822f:	55                   	push   ebp
c0018230:	e8 bf f9 ff ff       	call   c0017bf4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018235:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018239:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001823d:	42                   	inc    edx
c001823e:	83 c4 20             	add    esp,0x20
c0018241:	83 fa 06             	cmp    edx,0x6
c0018244:	75 de                	jne    c0018224 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018246:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001824b:	83 ec 0c             	sub    esp,0xc
c001824e:	86 e0                	xchg   al,ah
c0018250:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018255:	6a 02                	push   0x2
c0018257:	57                   	push   edi
c0018258:	53                   	push   ebx
c0018259:	56                   	push   esi
c001825a:	55                   	push   ebp
c001825b:	e8 be f7 ff ff       	call   c0017a1e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018260:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018265:	83 c4 20             	add    esp,0x20
c0018268:	57                   	push   edi
c0018269:	53                   	push   ebx
c001826a:	56                   	push   esi
c001826b:	55                   	push   ebp
c001826c:	e8 eb f8 ff ff       	call   c0017b5c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018271:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018275:	57                   	push   edi
c0018276:	53                   	push   ebx
c0018277:	56                   	push   esi
c0018278:	55                   	push   ebp
c0018279:	e8 48 f8 ff ff       	call   c0017ac6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001827e:	b9 09 00 00 00       	mov    ecx,0x9
c0018283:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018288:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c001828c:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018290:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018294:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018298:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001829c:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c00182a0:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c00182a4:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c00182a8:	83 ec 0c             	sub    esp,0xc
c00182ab:	fc                   	cld    
c00182ac:	89 e7                	mov    edi,esp
c00182ae:	8d 74 24 58          	lea    esi,[esp+0x58]
c00182b2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00182b4:	55                   	push   ebp
c00182b5:	e8 26 fd ff ff       	call   c0017fe0 <PCI::foundDevice(PCIDeviceInfo)>
c00182ba:	81 c4 8c 00 00 00    	add    esp,0x8c
c00182c0:	5b                   	pop    ebx
c00182c1:	5e                   	pop    esi
c00182c2:	5f                   	pop    edi
c00182c3:	5d                   	pop    ebp
c00182c4:	c3                   	ret    
c00182c5:	90                   	nop

c00182c6 <PCI::checkDevice(unsigned char, unsigned char)>:
c00182c6:	55                   	push   ebp
c00182c7:	57                   	push   edi
c00182c8:	56                   	push   esi
c00182c9:	53                   	push   ebx
c00182ca:	83 ec 0c             	sub    esp,0xc
c00182cd:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00182d1:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c00182d6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00182db:	6a 00                	push   0x0
c00182dd:	56                   	push   esi
c00182de:	57                   	push   edi
c00182df:	55                   	push   ebp
c00182e0:	e8 e1 f7 ff ff       	call   c0017ac6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00182e5:	6a 00                	push   0x0
c00182e7:	56                   	push   esi
c00182e8:	57                   	push   edi
c00182e9:	55                   	push   ebp
c00182ea:	e8 63 fe ff ff       	call   c0018152 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00182ef:	83 c4 20             	add    esp,0x20
c00182f2:	6a 00                	push   0x0
c00182f4:	56                   	push   esi
c00182f5:	57                   	push   edi
c00182f6:	55                   	push   ebp
c00182f7:	e8 ee f7 ff ff       	call   c0017aea <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00182fc:	83 c4 10             	add    esp,0x10
c00182ff:	84 c0                	test   al,al
c0018301:	79 27                	jns    c001832a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0018303:	bb 01 00 00 00       	mov    ebx,0x1
c0018308:	53                   	push   ebx
c0018309:	56                   	push   esi
c001830a:	57                   	push   edi
c001830b:	55                   	push   ebp
c001830c:	e8 b5 f7 ff ff       	call   c0017ac6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018311:	83 c4 10             	add    esp,0x10
c0018314:	66 40                	inc    ax
c0018316:	74 0c                	je     c0018324 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0018318:	53                   	push   ebx
c0018319:	56                   	push   esi
c001831a:	57                   	push   edi
c001831b:	55                   	push   ebp
c001831c:	e8 31 fe ff ff       	call   c0018152 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018321:	83 c4 10             	add    esp,0x10
c0018324:	43                   	inc    ebx
c0018325:	83 fb 08             	cmp    ebx,0x8
c0018328:	75 de                	jne    c0018308 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001832a:	83 c4 0c             	add    esp,0xc
c001832d:	5b                   	pop    ebx
c001832e:	5e                   	pop    esi
c001832f:	5f                   	pop    edi
c0018330:	5d                   	pop    ebp
c0018331:	c3                   	ret    

c0018332 <PCI::detect()>:
c0018332:	56                   	push   esi
c0018333:	53                   	push   ebx
c0018334:	53                   	push   ebx
c0018335:	31 db                	xor    ebx,ebx
c0018337:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001833b:	6a 00                	push   0x0
c001833d:	6a 00                	push   0x0
c001833f:	6a 00                	push   0x0
c0018341:	56                   	push   esi
c0018342:	e8 a3 f7 ff ff       	call   c0017aea <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018347:	83 c4 10             	add    esp,0x10
c001834a:	a8 80                	test   al,0x80
c001834c:	75 21                	jne    c001836f <PCI::detect()+0x3d>
c001834e:	51                   	push   ecx
c001834f:	51                   	push   ecx
c0018350:	6a 00                	push   0x0
c0018352:	56                   	push   esi
c0018353:	e8 62 fc ff ff       	call   c0017fba <PCI::checkBus(unsigned char)>
c0018358:	83 c4 10             	add    esp,0x10
c001835b:	eb 24                	jmp    c0018381 <PCI::detect()+0x4f>
c001835d:	52                   	push   edx
c001835e:	52                   	push   edx
c001835f:	53                   	push   ebx
c0018360:	43                   	inc    ebx
c0018361:	56                   	push   esi
c0018362:	e8 53 fc ff ff       	call   c0017fba <PCI::checkBus(unsigned char)>
c0018367:	83 c4 10             	add    esp,0x10
c001836a:	83 fb 08             	cmp    ebx,0x8
c001836d:	74 12                	je     c0018381 <PCI::detect()+0x4f>
c001836f:	53                   	push   ebx
c0018370:	6a 00                	push   0x0
c0018372:	6a 00                	push   0x0
c0018374:	56                   	push   esi
c0018375:	e8 4c f7 ff ff       	call   c0017ac6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001837a:	83 c4 10             	add    esp,0x10
c001837d:	66 40                	inc    ax
c001837f:	74 dc                	je     c001835d <PCI::detect()+0x2b>
c0018381:	58                   	pop    eax
c0018382:	5b                   	pop    ebx
c0018383:	5e                   	pop    esi
c0018384:	c3                   	ret    
c0018385:	90                   	nop

c0018386 <IDE::close(int, int, void*)>:
c0018386:	83 c8 ff             	or     eax,0xffffffff
c0018389:	c3                   	ret    

c001838a <IDE::IDE()>:
c001838a:	83 ec 0c             	sub    esp,0xc
c001838d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018391:	83 ec 08             	sub    esp,0x8
c0018394:	68 24 e5 01 c0       	push   0xc001e524
c0018399:	50                   	push   eax
c001839a:	e8 91 2c ff ff       	call   c000b030 <HardDiskController::HardDiskController(char const*)>
c001839f:	83 c4 10             	add    esp,0x10
c00183a2:	ba b4 e5 01 c0       	mov    edx,0xc001e5b4
c00183a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00183ab:	89 10                	mov    DWORD PTR [eax],edx
c00183ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00183b1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00183b8:	90                   	nop
c00183b9:	83 c4 0c             	add    esp,0xc
c00183bc:	c3                   	ret    
c00183bd:	90                   	nop

c00183be <IDE::prepareInterrupt(unsigned char)>:
c00183be:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00183c3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00183c7:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00183cf:	c3                   	ret    

c00183d0 <selectDrive(unsigned char, unsigned char)>:
c00183d0:	c3                   	ret    
c00183d1:	90                   	nop

c00183d2 <IDE::getBase(unsigned char)>:
c00183d2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00183d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00183db:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00183e3:	c3                   	ret    

c00183e4 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00183e4:	55                   	push   ebp
c00183e5:	57                   	push   edi
c00183e6:	56                   	push   esi
c00183e7:	53                   	push   ebx
c00183e8:	83 ec 1c             	sub    esp,0x1c
c00183eb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00183ef:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00183f3:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00183f6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00183fa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00183fe:	80 f9 03             	cmp    cl,0x3
c0018401:	77 51                	ja     c0018454 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0018403:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018407:	0f b6 f2             	movzx  esi,dl
c001840a:	0f b6 db             	movzx  ebx,bl
c001840d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0018410:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0018414:	83 ca 80             	or     edx,0xffffff80
c0018417:	0f b6 d2             	movzx  edx,dl
c001841a:	52                   	push   edx
c001841b:	6a 0c                	push   0xc
c001841d:	56                   	push   esi
c001841e:	57                   	push   edi
c001841f:	e8 c0 ff ff ff       	call   c00183e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018424:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0018429:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001842d:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0018431:	ee                   	out    dx,al
c0018432:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0018437:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001843b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001843f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018443:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001844b:	83 c4 2c             	add    esp,0x2c
c001844e:	5b                   	pop    ebx
c001844f:	5e                   	pop    esi
c0018450:	5f                   	pop    edi
c0018451:	5d                   	pop    ebp
c0018452:	eb 90                	jmp    c00183e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018454:	80 fb 07             	cmp    bl,0x7
c0018457:	77 12                	ja     c001846b <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0018459:	0f b6 d2             	movzx  edx,dl
c001845c:	0f b6 db             	movzx  ebx,bl
c001845f:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0018467:	89 da                	mov    edx,ebx
c0018469:	eb 2f                	jmp    c001849a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001846b:	80 fb 0d             	cmp    bl,0xd
c001846e:	77 13                	ja     c0018483 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0018470:	0f b6 d2             	movzx  edx,dl
c0018473:	0f b6 db             	movzx  ebx,bl
c0018476:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001847d:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0018481:	eb 17                	jmp    c001849a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0018483:	80 fb 15             	cmp    bl,0x15
c0018486:	77 13                	ja     c001849b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0018488:	0f b6 d2             	movzx  edx,dl
c001848b:	0f b6 db             	movzx  ebx,bl
c001848e:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0018496:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001849a:	ee                   	out    dx,al
c001849b:	83 c4 1c             	add    esp,0x1c
c001849e:	5b                   	pop    ebx
c001849f:	5e                   	pop    esi
c00184a0:	5f                   	pop    edi
c00184a1:	5d                   	pop    ebp
c00184a2:	c3                   	ret    
c00184a3:	90                   	nop

c00184a4 <IDE::read(unsigned char, unsigned char)>:
c00184a4:	55                   	push   ebp
c00184a5:	57                   	push   edi
c00184a6:	56                   	push   esi
c00184a7:	53                   	push   ebx
c00184a8:	83 ec 1c             	sub    esp,0x1c
c00184ab:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00184af:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00184b3:	8d 43 f8             	lea    eax,[ebx-0x8]
c00184b6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00184ba:	3c 03                	cmp    al,0x3
c00184bc:	77 43                	ja     c0018501 <IDE::read(unsigned char, unsigned char)+0x5d>
c00184be:	0f b6 f2             	movzx  esi,dl
c00184c1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00184c4:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00184c8:	83 c8 80             	or     eax,0xffffff80
c00184cb:	0f b6 c0             	movzx  eax,al
c00184ce:	50                   	push   eax
c00184cf:	6a 0c                	push   0xc
c00184d1:	56                   	push   esi
c00184d2:	57                   	push   edi
c00184d3:	e8 0c ff ff ff       	call   c00183e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00184d8:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00184dd:	0f b6 c3             	movzx  eax,bl
c00184e0:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00184e4:	ec                   	in     al,dx
c00184e5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00184e9:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00184ee:	52                   	push   edx
c00184ef:	6a 0c                	push   0xc
c00184f1:	56                   	push   esi
c00184f2:	57                   	push   edi
c00184f3:	e8 ec fe ff ff       	call   c00183e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00184f8:	83 c4 20             	add    esp,0x20
c00184fb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00184ff:	eb 49                	jmp    c001854a <IDE::read(unsigned char, unsigned char)+0xa6>
c0018501:	80 fb 07             	cmp    bl,0x7
c0018504:	77 12                	ja     c0018518 <IDE::read(unsigned char, unsigned char)+0x74>
c0018506:	0f b6 d2             	movzx  edx,dl
c0018509:	0f b6 c3             	movzx  eax,bl
c001850c:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0018514:	89 c2                	mov    edx,eax
c0018516:	eb 31                	jmp    c0018549 <IDE::read(unsigned char, unsigned char)+0xa5>
c0018518:	80 fb 0d             	cmp    bl,0xd
c001851b:	77 13                	ja     c0018530 <IDE::read(unsigned char, unsigned char)+0x8c>
c001851d:	0f b6 d2             	movzx  edx,dl
c0018520:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0018527:	0f b6 d3             	movzx  edx,bl
c001852a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001852e:	eb 19                	jmp    c0018549 <IDE::read(unsigned char, unsigned char)+0xa5>
c0018530:	31 c0                	xor    eax,eax
c0018532:	80 fb 15             	cmp    bl,0x15
c0018535:	77 13                	ja     c001854a <IDE::read(unsigned char, unsigned char)+0xa6>
c0018537:	0f b6 d2             	movzx  edx,dl
c001853a:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0018542:	0f b6 d3             	movzx  edx,bl
c0018545:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0018549:	ec                   	in     al,dx
c001854a:	83 c4 1c             	add    esp,0x1c
c001854d:	5b                   	pop    ebx
c001854e:	5e                   	pop    esi
c001854f:	5f                   	pop    edi
c0018550:	5d                   	pop    ebp
c0018551:	c3                   	ret    

c0018552 <IDE::waitInterrupt(unsigned char)>:
c0018552:	57                   	push   edi
c0018553:	56                   	push   esi
c0018554:	31 f6                	xor    esi,esi
c0018556:	53                   	push   ebx
c0018557:	83 ec 10             	sub    esp,0x10
c001855a:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001855e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018562:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018566:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001856b:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c0018572:	84 db                	test   bl,bl
c0018574:	75 33                	jne    c00185a9 <IDE::waitInterrupt(unsigned char)+0x57>
c0018576:	52                   	push   edx
c0018577:	6a 0c                	push   0xc
c0018579:	50                   	push   eax
c001857a:	57                   	push   edi
c001857b:	e8 24 ff ff ff       	call   c00184a4 <IDE::read(unsigned char, unsigned char)>
c0018580:	83 c4 10             	add    esp,0x10
c0018583:	a8 01                	test   al,0x1
c0018585:	75 2a                	jne    c00185b1 <IDE::waitInterrupt(unsigned char)+0x5f>
c0018587:	f7 c6 04 00 00 00    	test   esi,0x4
c001858d:	75 12                	jne    c00185a1 <IDE::waitInterrupt(unsigned char)+0x4f>
c001858f:	83 fe 32             	cmp    esi,0x32
c0018592:	7e 0d                	jle    c00185a1 <IDE::waitInterrupt(unsigned char)+0x4f>
c0018594:	83 ec 0c             	sub    esp,0xc
c0018597:	6a 64                	push   0x64
c0018599:	e8 b2 a4 ff ff       	call   c0012a50 <milliTenthSleep(unsigned int)>
c001859e:	83 c4 10             	add    esp,0x10
c00185a1:	83 fe 3c             	cmp    esi,0x3c
c00185a4:	74 0b                	je     c00185b1 <IDE::waitInterrupt(unsigned char)+0x5f>
c00185a6:	46                   	inc    esi
c00185a7:	eb bd                	jmp    c0018566 <IDE::waitInterrupt(unsigned char)+0x14>
c00185a9:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c00185b1:	83 c4 10             	add    esp,0x10
c00185b4:	88 d8                	mov    al,bl
c00185b6:	5b                   	pop    ebx
c00185b7:	5e                   	pop    esi
c00185b8:	5f                   	pop    edi
c00185b9:	c3                   	ret    

c00185ba <ideChannel0IRQHandler(regs*, void*)>:
c00185ba:	83 ec 10             	sub    esp,0x10
c00185bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00185c1:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00185c8:	6a 07                	push   0x7
c00185ca:	6a 00                	push   0x0
c00185cc:	50                   	push   eax
c00185cd:	e8 d2 fe ff ff       	call   c00184a4 <IDE::read(unsigned char, unsigned char)>
c00185d2:	83 c4 1c             	add    esp,0x1c
c00185d5:	c3                   	ret    

c00185d6 <ideChannel1IRQHandler(regs*, void*)>:
c00185d6:	83 ec 10             	sub    esp,0x10
c00185d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00185dd:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00185e4:	6a 07                	push   0x7
c00185e6:	6a 01                	push   0x1
c00185e8:	50                   	push   eax
c00185e9:	e8 b6 fe ff ff       	call   c00184a4 <IDE::read(unsigned char, unsigned char)>
c00185ee:	83 c4 1c             	add    esp,0x1c
c00185f1:	c3                   	ret    

c00185f2 <IDE::enableIRQs(unsigned char, bool)>:
c00185f2:	57                   	push   edi
c00185f3:	56                   	push   esi
c00185f4:	be 04 00 00 00       	mov    esi,0x4
c00185f9:	53                   	push   ebx
c00185fa:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00185ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018603:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0018608:	0f 94 c0             	sete   al
c001860b:	01 c0                	add    eax,eax
c001860d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0018614:	0f b6 c0             	movzx  eax,al
c0018617:	50                   	push   eax
c0018618:	6a 0c                	push   0xc
c001861a:	57                   	push   edi
c001861b:	53                   	push   ebx
c001861c:	e8 c3 fd ff ff       	call   c00183e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018621:	83 c4 10             	add    esp,0x10
c0018624:	50                   	push   eax
c0018625:	6a 0c                	push   0xc
c0018627:	57                   	push   edi
c0018628:	53                   	push   ebx
c0018629:	e8 76 fe ff ff       	call   c00184a4 <IDE::read(unsigned char, unsigned char)>
c001862e:	83 c4 10             	add    esp,0x10
c0018631:	4e                   	dec    esi
c0018632:	75 f0                	jne    c0018624 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0018634:	5b                   	pop    ebx
c0018635:	5e                   	pop    esi
c0018636:	5f                   	pop    edi
c0018637:	c3                   	ret    

c0018638 <IDE::open(int, int, void*)>:
c0018638:	55                   	push   ebp
c0018639:	57                   	push   edi
c001863a:	56                   	push   esi
c001863b:	53                   	push   ebx
c001863c:	83 ec 1c             	sub    esp,0x1c
c001863f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018643:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001864c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0018655:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001865c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0018663:	0f 85 b0 02 00 00    	jne    c0018919 <IDE::open(int, int, void*)+0x2e1>
c0018669:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001866f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0018673:	83 e0 7f             	and    eax,0x7f
c0018676:	3c 05                	cmp    al,0x5
c0018678:	74 04                	je     c001867e <IDE::open(int, int, void*)+0x46>
c001867a:	3c 0f                	cmp    al,0xf
c001867c:	75 32                	jne    c00186b0 <IDE::open(int, int, void*)+0x78>
c001867e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0018684:	83 e0 fc             	and    eax,0xfffffffc
c0018687:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001868e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0018694:	83 e0 fc             	and    eax,0xfffffffc
c0018697:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001869e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00186a4:	83 e0 fc             	and    eax,0xfffffffc
c00186a7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00186ae:	eb 14                	jmp    c00186c4 <IDE::open(int, int, void*)+0x8c>
c00186b0:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00186ba:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00186c4:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00186cb:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00186d2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00186d6:	89 c6                	mov    esi,eax
c00186d8:	bf f8 0c 00 00       	mov    edi,0xcf8
c00186dd:	c1 e6 10             	shl    esi,0x10
c00186e0:	89 e8                	mov    eax,ebp
c00186e2:	89 fa                	mov    edx,edi
c00186e4:	c1 e0 0b             	shl    eax,0xb
c00186e7:	09 f0                	or     eax,esi
c00186e9:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00186f0:	c1 e6 08             	shl    esi,0x8
c00186f3:	09 c6                	or     esi,eax
c00186f5:	89 f0                	mov    eax,esi
c00186f7:	0d 08 00 00 80       	or     eax,0x80000008
c00186fc:	ef                   	out    dx,eax
c00186fd:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0018702:	89 ca                	mov    edx,ecx
c0018704:	ed                   	in     eax,dx
c0018705:	c1 e8 10             	shr    eax,0x10
c0018708:	3d ff ff 00 00       	cmp    eax,0xffff
c001870d:	0f 84 f5 00 00 00    	je     c0018808 <IDE::open(int, int, void*)+0x1d0>
c0018713:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0018719:	89 fa                	mov    edx,edi
c001871b:	89 f0                	mov    eax,esi
c001871d:	ef                   	out    dx,eax
c001871e:	b0 fe                	mov    al,0xfe
c0018720:	89 ca                	mov    edx,ecx
c0018722:	ee                   	out    dx,al
c0018723:	89 f0                	mov    eax,esi
c0018725:	89 fa                	mov    edx,edi
c0018727:	ef                   	out    dx,eax
c0018728:	89 ca                	mov    edx,ecx
c001872a:	ed                   	in     eax,dx
c001872b:	3c fe                	cmp    al,0xfe
c001872d:	0f 85 a9 00 00 00    	jne    c00187dc <IDE::open(int, int, void*)+0x1a4>
c0018733:	8b 15 08 f2 01 c0    	mov    edx,DWORD PTR ds:0xc001f208
c0018739:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c0018740:	74 33                	je     c0018775 <IDE::open(int, int, void*)+0x13d>
c0018742:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0018748:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001874c:	40                   	inc    eax
c001874d:	83 ec 0c             	sub    esp,0xc
c0018750:	0f b6 c0             	movzx  eax,al
c0018753:	50                   	push   eax
c0018754:	55                   	push   ebp
c0018755:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018759:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001875f:	51                   	push   ecx
c0018760:	e8 13 53 ff ff       	call   c000da78 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0018765:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001876a:	83 c4 1c             	add    esp,0x1c
c001876d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0018773:	eb 0a                	jmp    c001877f <IDE::open(int, int, void*)+0x147>
c0018775:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001877f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0018786:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001878d:	c1 e1 10             	shl    ecx,0x10
c0018790:	c1 e0 08             	shl    eax,0x8
c0018793:	bf f8 0c 00 00       	mov    edi,0xcf8
c0018798:	09 c1                	or     ecx,eax
c001879a:	89 fa                	mov    edx,edi
c001879c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00187a3:	c1 e0 0b             	shl    eax,0xb
c00187a6:	09 c1                	or     ecx,eax
c00187a8:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00187ae:	89 c8                	mov    eax,ecx
c00187b0:	ef                   	out    dx,eax
c00187b1:	be fc 0c 00 00       	mov    esi,0xcfc
c00187b6:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00187bc:	89 f2                	mov    edx,esi
c00187be:	ee                   	out    dx,al
c00187bf:	89 c8                	mov    eax,ecx
c00187c1:	89 fa                	mov    edx,edi
c00187c3:	ef                   	out    dx,eax
c00187c4:	89 f2                	mov    edx,esi
c00187c6:	ed                   	in     eax,dx
c00187c7:	0f b6 c0             	movzx  eax,al
c00187ca:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00187d0:	74 46                	je     c0018818 <IDE::open(int, int, void*)+0x1e0>
c00187d2:	83 ec 0c             	sub    esp,0xc
c00187d5:	68 3c e5 01 c0       	push   0xc001e53c
c00187da:	eb 34                	jmp    c0018810 <IDE::open(int, int, void*)+0x1d8>
c00187dc:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00187e5:	75 17                	jne    c00187fe <IDE::open(int, int, void*)+0x1c6>
c00187e7:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00187ec:	74 07                	je     c00187f5 <IDE::open(int, int, void*)+0x1bd>
c00187ee:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00187f3:	75 09                	jne    c00187fe <IDE::open(int, int, void*)+0x1c6>
c00187f5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00187fc:	eb 1a                	jmp    c0018818 <IDE::open(int, int, void*)+0x1e0>
c00187fe:	83 ec 0c             	sub    esp,0xc
c0018801:	68 44 e5 01 c0       	push   0xc001e544
c0018806:	eb 08                	jmp    c0018810 <IDE::open(int, int, void*)+0x1d8>
c0018808:	83 ec 0c             	sub    esp,0xc
c001880b:	68 75 e5 01 c0       	push   0xc001e575
c0018810:	e8 e6 6b ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c0018815:	83 c4 10             	add    esp,0x10
c0018818:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001881f:	79 1a                	jns    c001883b <IDE::open(int, int, void*)+0x203>
c0018821:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0018827:	83 e0 fc             	and    eax,0xfffffffc
c001882a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0018831:	83 c0 08             	add    eax,0x8
c0018834:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001883b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018841:	89 c2                	mov    edx,eax
c0018843:	83 e2 0f             	and    edx,0xf
c0018846:	66 83 fa 08          	cmp    dx,0x8
c001884a:	75 0a                	jne    c0018856 <IDE::open(int, int, void*)+0x21e>
c001884c:	83 e8 02             	sub    eax,0x2
c001884f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018856:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001885c:	89 c2                	mov    edx,eax
c001885e:	83 e2 0f             	and    edx,0xf
c0018861:	66 83 fa 08          	cmp    dx,0x8
c0018865:	75 0a                	jne    c0018871 <IDE::open(int, int, void*)+0x239>
c0018867:	83 e8 02             	sub    eax,0x2
c001886a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0018871:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0018878:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001887f:	89 d0                	mov    eax,edx
c0018881:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018884:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0018888:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001888c:	8d 4a 01             	lea    ecx,[edx+0x1]
c001888f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018894:	0f b6 c9             	movzx  ecx,cl
c0018897:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001889e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00188a1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00188a5:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00188a9:	8d 50 02             	lea    edx,[eax+0x2]
c00188ac:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00188b1:	0f b6 d2             	movzx  edx,dl
c00188b4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00188ba:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00188bd:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00188c1:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00188c5:	8d 48 03             	lea    ecx,[eax+0x3]
c00188c8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00188cd:	0f b6 c9             	movzx  ecx,cl
c00188d0:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00188d6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00188d9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00188dd:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00188e1:	8d 50 04             	lea    edx,[eax+0x4]
c00188e4:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00188ea:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00188ef:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00188f6:	66 85 f6             	test   si,si
c00188f9:	74 5b                	je     c0018956 <IDE::open(int, int, void*)+0x31e>
c00188fb:	0f b6 d2             	movzx  edx,dl
c00188fe:	83 c0 05             	add    eax,0x5
c0018901:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018904:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0018908:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001890c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0018912:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018917:	eb 3d                	jmp    c0018956 <IDE::open(int, int, void*)+0x31e>
c0018919:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001891f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0018926:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001892d:	66 05 06 02          	add    ax,0x206
c0018931:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018938:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001893f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0018946:	66 05 06 02          	add    ax,0x206
c001894a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0018951:	e9 e5 fe ff ff       	jmp    c001883b <IDE::open(int, int, void*)+0x203>
c0018956:	50                   	push   eax
c0018957:	50                   	push   eax
c0018958:	6a 00                	push   0x0
c001895a:	53                   	push   ebx
c001895b:	e8 5e fa ff ff       	call   c00183be <IDE::prepareInterrupt(unsigned char)>
c0018960:	5a                   	pop    edx
c0018961:	59                   	pop    ecx
c0018962:	6a 01                	push   0x1
c0018964:	53                   	push   ebx
c0018965:	e8 54 fa ff ff       	call   c00183be <IDE::prepareInterrupt(unsigned char)>
c001896a:	83 c4 0c             	add    esp,0xc
c001896d:	6a 00                	push   0x0
c001896f:	6a 00                	push   0x0
c0018971:	53                   	push   ebx
c0018972:	e8 7b fc ff ff       	call   c00185f2 <IDE::enableIRQs(unsigned char, bool)>
c0018977:	83 c4 0c             	add    esp,0xc
c001897a:	6a 00                	push   0x0
c001897c:	6a 01                	push   0x1
c001897e:	53                   	push   ebx
c001897f:	e8 6e fc ff ff       	call   c00185f2 <IDE::enableIRQs(unsigned char, bool)>
c0018984:	83 c4 10             	add    esp,0x10
c0018987:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001898e:	74 34                	je     c00189c4 <IDE::open(int, int, void*)+0x38c>
c0018990:	83 ec 0c             	sub    esp,0xc
c0018993:	53                   	push   ebx
c0018994:	6a 01                	push   0x1
c0018996:	68 ba 85 01 c0       	push   0xc00185ba
c001899b:	6a 0e                	push   0xe
c001899d:	53                   	push   ebx
c001899e:	e8 f5 22 ff ff       	call   c000ac98 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00189a3:	83 c4 14             	add    esp,0x14
c00189a6:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00189ac:	53                   	push   ebx
c00189ad:	6a 01                	push   0x1
c00189af:	68 d6 85 01 c0       	push   0xc00185d6
c00189b4:	6a 0f                	push   0xf
c00189b6:	53                   	push   ebx
c00189b7:	e8 dc 22 ff ff       	call   c000ac98 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00189bc:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00189c2:	eb 38                	jmp    c00189fc <IDE::open(int, int, void*)+0x3c4>
c00189c4:	83 ec 0c             	sub    esp,0xc
c00189c7:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00189d1:	53                   	push   ebx
c00189d2:	6a 00                	push   0x0
c00189d4:	68 ba 85 01 c0       	push   0xc00185ba
c00189d9:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00189df:	53                   	push   ebx
c00189e0:	e8 b3 22 ff ff       	call   c000ac98 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00189e5:	83 c4 14             	add    esp,0x14
c00189e8:	53                   	push   ebx
c00189e9:	6a 00                	push   0x0
c00189eb:	68 d6 85 01 c0       	push   0xc00185d6
c00189f0:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00189f6:	53                   	push   ebx
c00189f7:	e8 9c 22 ff ff       	call   c000ac98 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00189fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00189fe:	83 c4 20             	add    esp,0x20
c0018a01:	83 ec 0c             	sub    esp,0xc
c0018a04:	53                   	push   ebx
c0018a05:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0018a08:	83 c4 0c             	add    esp,0xc
c0018a0b:	6a 07                	push   0x7
c0018a0d:	6a 00                	push   0x0
c0018a0f:	53                   	push   ebx
c0018a10:	e8 8f fa ff ff       	call   c00184a4 <IDE::read(unsigned char, unsigned char)>
c0018a15:	83 c4 0c             	add    esp,0xc
c0018a18:	6a 07                	push   0x7
c0018a1a:	6a 01                	push   0x1
c0018a1c:	53                   	push   ebx
c0018a1d:	e8 82 fa ff ff       	call   c00184a4 <IDE::read(unsigned char, unsigned char)>
c0018a22:	83 c4 0c             	add    esp,0xc
c0018a25:	6a 01                	push   0x1
c0018a27:	6a 00                	push   0x0
c0018a29:	53                   	push   ebx
c0018a2a:	e8 c3 fb ff ff       	call   c00185f2 <IDE::enableIRQs(unsigned char, bool)>
c0018a2f:	83 c4 0c             	add    esp,0xc
c0018a32:	6a 01                	push   0x1
c0018a34:	6a 01                	push   0x1
c0018a36:	53                   	push   ebx
c0018a37:	e8 b6 fb ff ff       	call   c00185f2 <IDE::enableIRQs(unsigned char, bool)>
c0018a3c:	83 c4 2c             	add    esp,0x2c
c0018a3f:	31 c0                	xor    eax,eax
c0018a41:	5b                   	pop    ebx
c0018a42:	5e                   	pop    esi
c0018a43:	5f                   	pop    edi
c0018a44:	5d                   	pop    ebp
c0018a45:	c3                   	ret    

c0018a46 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0018a46:	55                   	push   ebp
c0018a47:	57                   	push   edi
c0018a48:	56                   	push   esi
c0018a49:	53                   	push   ebx
c0018a4a:	83 ec 1c             	sub    esp,0x1c
c0018a4d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018a51:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018a55:	8d 50 f8             	lea    edx,[eax-0x8]
c0018a58:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0018a5c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0018a60:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0018a64:	80 fa 03             	cmp    dl,0x3
c0018a67:	77 5d                	ja     c0018ac6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0018a69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018a6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018a71:	0f b6 db             	movzx  ebx,bl
c0018a74:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0018a77:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0018a7b:	83 ca 80             	or     edx,0xffffff80
c0018a7e:	0f b6 d2             	movzx  edx,dl
c0018a81:	52                   	push   edx
c0018a82:	6a 0c                	push   0xc
c0018a84:	53                   	push   ebx
c0018a85:	56                   	push   esi
c0018a86:	e8 59 f9 ff ff       	call   c00183e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018a8b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0018a90:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018a94:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018a98:	0f b6 c0             	movzx  eax,al
c0018a9b:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0018a9f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0018aa1:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0018aa6:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0018aaa:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018aae:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018ab2:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0018aba:	83 c4 2c             	add    esp,0x2c
c0018abd:	5b                   	pop    ebx
c0018abe:	5e                   	pop    esi
c0018abf:	5f                   	pop    edi
c0018ac0:	5d                   	pop    ebp
c0018ac1:	e9 1e f9 ff ff       	jmp    c00183e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018ac6:	3c 07                	cmp    al,0x7
c0018ac8:	77 10                	ja     c0018ada <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0018aca:	0f b6 db             	movzx  ebx,bl
c0018acd:	0f b6 d0             	movzx  edx,al
c0018ad0:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0018ad8:	eb 2d                	jmp    c0018b07 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0018ada:	3c 0d                	cmp    al,0xd
c0018adc:	77 13                	ja     c0018af1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0018ade:	0f b6 db             	movzx  ebx,bl
c0018ae1:	0f b6 c0             	movzx  eax,al
c0018ae4:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0018aeb:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0018aef:	eb 16                	jmp    c0018b07 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0018af1:	3c 15                	cmp    al,0x15
c0018af3:	77 14                	ja     c0018b09 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0018af5:	0f b6 db             	movzx  ebx,bl
c0018af8:	0f b6 c0             	movzx  eax,al
c0018afb:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0018b03:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0018b07:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0018b09:	83 c4 1c             	add    esp,0x1c
c0018b0c:	5b                   	pop    ebx
c0018b0d:	5e                   	pop    esi
c0018b0e:	5f                   	pop    edi
c0018b0f:	5d                   	pop    ebp
c0018b10:	c3                   	ret    
c0018b11:	90                   	nop

c0018b12 <IDE::detect()>:
c0018b12:	55                   	push   ebp
c0018b13:	57                   	push   edi
c0018b14:	56                   	push   esi
c0018b15:	53                   	push   ebx
c0018b16:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0018b1c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0018b23:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0018b2a:	0f 85 97 02 00 00    	jne    c0018dc7 <IDE::detect()+0x2b5>
c0018b30:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0018b37:	31 f6                	xor    esi,esi
c0018b39:	31 ed                	xor    ebp,ebp
c0018b3b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018b43:	89 e8                	mov    eax,ebp
c0018b45:	c1 e0 06             	shl    eax,0x6
c0018b48:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0018b50:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0018b54:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018b58:	c1 e0 04             	shl    eax,0x4
c0018b5b:	83 c8 a0             	or     eax,0xffffffa0
c0018b5e:	0f b6 c0             	movzx  eax,al
c0018b61:	50                   	push   eax
c0018b62:	6a 06                	push   0x6
c0018b64:	56                   	push   esi
c0018b65:	53                   	push   ebx
c0018b66:	e8 79 f8 ff ff       	call   c00183e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018b6b:	83 c4 0c             	add    esp,0xc
c0018b6e:	6a 0c                	push   0xc
c0018b70:	56                   	push   esi
c0018b71:	53                   	push   ebx
c0018b72:	e8 2d f9 ff ff       	call   c00184a4 <IDE::read(unsigned char, unsigned char)>
c0018b77:	83 c4 0c             	add    esp,0xc
c0018b7a:	6a 0c                	push   0xc
c0018b7c:	56                   	push   esi
c0018b7d:	53                   	push   ebx
c0018b7e:	e8 21 f9 ff ff       	call   c00184a4 <IDE::read(unsigned char, unsigned char)>
c0018b83:	83 c4 0c             	add    esp,0xc
c0018b86:	6a 0c                	push   0xc
c0018b88:	56                   	push   esi
c0018b89:	53                   	push   ebx
c0018b8a:	e8 15 f9 ff ff       	call   c00184a4 <IDE::read(unsigned char, unsigned char)>
c0018b8f:	83 c4 0c             	add    esp,0xc
c0018b92:	6a 0c                	push   0xc
c0018b94:	56                   	push   esi
c0018b95:	53                   	push   ebx
c0018b96:	e8 09 f9 ff ff       	call   c00184a4 <IDE::read(unsigned char, unsigned char)>
c0018b9b:	68 ec 00 00 00       	push   0xec
c0018ba0:	6a 07                	push   0x7
c0018ba2:	56                   	push   esi
c0018ba3:	53                   	push   ebx
c0018ba4:	e8 3b f8 ff ff       	call   c00183e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018ba9:	83 c4 1c             	add    esp,0x1c
c0018bac:	6a 0c                	push   0xc
c0018bae:	56                   	push   esi
c0018baf:	53                   	push   ebx
c0018bb0:	e8 ef f8 ff ff       	call   c00184a4 <IDE::read(unsigned char, unsigned char)>
c0018bb5:	83 c4 0c             	add    esp,0xc
c0018bb8:	6a 0c                	push   0xc
c0018bba:	56                   	push   esi
c0018bbb:	53                   	push   ebx
c0018bbc:	e8 e3 f8 ff ff       	call   c00184a4 <IDE::read(unsigned char, unsigned char)>
c0018bc1:	83 c4 0c             	add    esp,0xc
c0018bc4:	6a 0c                	push   0xc
c0018bc6:	56                   	push   esi
c0018bc7:	53                   	push   ebx
c0018bc8:	e8 d7 f8 ff ff       	call   c00184a4 <IDE::read(unsigned char, unsigned char)>
c0018bcd:	83 c4 0c             	add    esp,0xc
c0018bd0:	6a 0c                	push   0xc
c0018bd2:	56                   	push   esi
c0018bd3:	53                   	push   ebx
c0018bd4:	e8 cb f8 ff ff       	call   c00184a4 <IDE::read(unsigned char, unsigned char)>
c0018bd9:	83 c4 0c             	add    esp,0xc
c0018bdc:	6a 0c                	push   0xc
c0018bde:	56                   	push   esi
c0018bdf:	53                   	push   ebx
c0018be0:	e8 bf f8 ff ff       	call   c00184a4 <IDE::read(unsigned char, unsigned char)>
c0018be5:	83 c4 10             	add    esp,0x10
c0018be8:	84 c0                	test   al,al
c0018bea:	0f 84 5f 01 00 00    	je     c0018d4f <IDE::detect()+0x23d>
c0018bf0:	31 ff                	xor    edi,edi
c0018bf2:	50                   	push   eax
c0018bf3:	6a 0c                	push   0xc
c0018bf5:	56                   	push   esi
c0018bf6:	53                   	push   ebx
c0018bf7:	e8 a8 f8 ff ff       	call   c00184a4 <IDE::read(unsigned char, unsigned char)>
c0018bfc:	83 c4 10             	add    esp,0x10
c0018bff:	a8 01                	test   al,0x1
c0018c01:	0f 85 69 01 00 00    	jne    c0018d70 <IDE::detect()+0x25e>
c0018c07:	84 c0                	test   al,al
c0018c09:	78 04                	js     c0018c0f <IDE::detect()+0xfd>
c0018c0b:	a8 08                	test   al,0x8
c0018c0d:	75 23                	jne    c0018c32 <IDE::detect()+0x120>
c0018c0f:	47                   	inc    edi
c0018c10:	81 ff 17 01 00 00    	cmp    edi,0x117
c0018c16:	7e da                	jle    c0018bf2 <IDE::detect()+0xe0>
c0018c18:	83 ec 0c             	sub    esp,0xc
c0018c1b:	6a 32                	push   0x32
c0018c1d:	e8 2e 9e ff ff       	call   c0012a50 <milliTenthSleep(unsigned int)>
c0018c22:	83 c4 10             	add    esp,0x10
c0018c25:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0018c2b:	75 c5                	jne    c0018bf2 <IDE::detect()+0xe0>
c0018c2d:	e9 3e 01 00 00       	jmp    c0018d70 <IDE::detect()+0x25e>
c0018c32:	31 c9                	xor    ecx,ecx
c0018c34:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0018c38:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0018c3c:	83 ec 0c             	sub    esp,0xc
c0018c3f:	68 80 00 00 00       	push   0x80
c0018c44:	57                   	push   edi
c0018c45:	6a 00                	push   0x0
c0018c47:	56                   	push   esi
c0018c48:	53                   	push   ebx
c0018c49:	e8 f8 fd ff ff       	call   c0018a46 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0018c4e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0018c53:	89 e8                	mov    eax,ebp
c0018c55:	89 d1                	mov    ecx,edx
c0018c57:	c1 e0 06             	shl    eax,0x6
c0018c5a:	01 d8                	add    eax,ebx
c0018c5c:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0018c63:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0018c6a:	89 f2                	mov    edx,esi
c0018c6c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0018c72:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0018c76:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0018c7c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018c80:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0018c87:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0018c8f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0018c96:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0018c9e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0018ca4:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0018cab:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0018cb1:	8d 54 24 58          	lea    edx,[esp+0x58]
c0018cb5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018cb9:	83 c4 20             	add    esp,0x20
c0018cbc:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0018cbf:	83 c0 02             	add    eax,0x2
c0018cc2:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0018cc8:	83 c7 02             	add    edi,0x2
c0018ccb:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0018cce:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0018cd4:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0018cd8:	75 e2                	jne    c0018cbc <IDE::detect()+0x1aa>
c0018cda:	89 e8                	mov    eax,ebp
c0018cdc:	c1 e0 06             	shl    eax,0x6
c0018cdf:	01 d8                	add    eax,ebx
c0018ce1:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0018ce7:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0018cee:	66 c1 ea 09          	shr    dx,0x9
c0018cf2:	83 e2 01             	and    edx,0x1
c0018cf5:	84 c9                	test   cl,cl
c0018cf7:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0018cfd:	75 22                	jne    c0018d21 <IDE::detect()+0x20f>
c0018cff:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0018d06:	74 46                	je     c0018d4e <IDE::detect()+0x23c>
c0018d08:	83 ec 0c             	sub    esp,0xc
c0018d0b:	68 7c 01 00 00       	push   0x17c
c0018d10:	e8 08 de fe ff       	call   c0006b1d <malloc>
c0018d15:	89 c7                	mov    edi,eax
c0018d17:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d1a:	e8 11 05 00 00       	call   c0019230 <ATA::ATA()>
c0018d1f:	eb 17                	jmp    c0018d38 <IDE::detect()+0x226>
c0018d21:	83 ec 0c             	sub    esp,0xc
c0018d24:	68 84 01 00 00       	push   0x184
c0018d29:	e8 ef dd fe ff       	call   c0006b1d <malloc>
c0018d2e:	89 c7                	mov    edi,eax
c0018d30:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d33:	e8 f0 0a 00 00       	call   c0019828 <ATAPI::ATAPI()>
c0018d38:	5a                   	pop    edx
c0018d39:	59                   	pop    ecx
c0018d3a:	57                   	push   edi
c0018d3b:	53                   	push   ebx
c0018d3c:	e8 ab 1f ff ff       	call   c000acec <Device::addChild(Device*)>
c0018d41:	8b 07                	mov    eax,DWORD PTR [edi]
c0018d43:	53                   	push   ebx
c0018d44:	55                   	push   ebp
c0018d45:	6a 00                	push   0x0
c0018d47:	57                   	push   edi
c0018d48:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018d4b:	83 c4 20             	add    esp,0x20
c0018d4e:	45                   	inc    ebp
c0018d4f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0018d54:	74 0d                	je     c0018d63 <IDE::detect()+0x251>
c0018d56:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0018d5e:	e9 e0 fd ff ff       	jmp    c0018b43 <IDE::detect()+0x31>
c0018d63:	4e                   	dec    esi
c0018d64:	74 61                	je     c0018dc7 <IDE::detect()+0x2b5>
c0018d66:	be 01 00 00 00       	mov    esi,0x1
c0018d6b:	e9 cb fd ff ff       	jmp    c0018b3b <IDE::detect()+0x29>
c0018d70:	50                   	push   eax
c0018d71:	6a 04                	push   0x4
c0018d73:	56                   	push   esi
c0018d74:	53                   	push   ebx
c0018d75:	e8 2a f7 ff ff       	call   c00184a4 <IDE::read(unsigned char, unsigned char)>
c0018d7a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0018d7e:	83 c4 0c             	add    esp,0xc
c0018d81:	6a 05                	push   0x5
c0018d83:	56                   	push   esi
c0018d84:	53                   	push   ebx
c0018d85:	e8 1a f7 ff ff       	call   c00184a4 <IDE::read(unsigned char, unsigned char)>
c0018d8a:	83 c4 10             	add    esp,0x10
c0018d8d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018d91:	80 fa 14             	cmp    dl,0x14
c0018d94:	75 04                	jne    c0018d9a <IDE::detect()+0x288>
c0018d96:	3c eb                	cmp    al,0xeb
c0018d98:	eb 07                	jmp    c0018da1 <IDE::detect()+0x28f>
c0018d9a:	3c 96                	cmp    al,0x96
c0018d9c:	75 b1                	jne    c0018d4f <IDE::detect()+0x23d>
c0018d9e:	80 fa 69             	cmp    dl,0x69
c0018da1:	75 ac                	jne    c0018d4f <IDE::detect()+0x23d>
c0018da3:	68 a1 00 00 00       	push   0xa1
c0018da8:	6a 07                	push   0x7
c0018daa:	56                   	push   esi
c0018dab:	53                   	push   ebx
c0018dac:	e8 33 f6 ff ff       	call   c00183e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018db1:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0018db8:	e8 93 9c ff ff       	call   c0012a50 <milliTenthSleep(unsigned int)>
c0018dbd:	83 c4 10             	add    esp,0x10
c0018dc0:	b1 01                	mov    cl,0x1
c0018dc2:	e9 6d fe ff ff       	jmp    c0018c34 <IDE::detect()+0x122>
c0018dc7:	81 c4 1c 02 00 00    	add    esp,0x21c
c0018dcd:	5b                   	pop    ebx
c0018dce:	5e                   	pop    esi
c0018dcf:	5f                   	pop    edi
c0018dd0:	5d                   	pop    ebp
c0018dd1:	c3                   	ret    

c0018dd2 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0018dd2:	55                   	push   ebp
c0018dd3:	57                   	push   edi
c0018dd4:	56                   	push   esi
c0018dd5:	53                   	push   ebx
c0018dd6:	83 ec 1c             	sub    esp,0x1c
c0018dd9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018ddd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018de1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0018de5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0018de9:	88 c3                	mov    bl,al
c0018deb:	84 c0                	test   al,al
c0018ded:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018df1:	0f 84 81 00 00 00    	je     c0018e78 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0018df7:	83 ec 0c             	sub    esp,0xc
c0018dfa:	68 9f e5 01 c0       	push   0xc001e59f
c0018dff:	e8 a8 0a ff ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c0018e04:	83 c4 10             	add    esp,0x10
c0018e07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018e0b:	3c 01                	cmp    al,0x1
c0018e0d:	74 63                	je     c0018e72 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0018e0f:	3c 02                	cmp    al,0x2
c0018e11:	75 53                	jne    c0018e66 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0018e13:	01 f6                	add    esi,esi
c0018e15:	09 ee                	or     esi,ebp
c0018e17:	50                   	push   eax
c0018e18:	89 f0                	mov    eax,esi
c0018e1a:	6a 01                	push   0x1
c0018e1c:	0f b6 f0             	movzx  esi,al
c0018e1f:	c1 e6 06             	shl    esi,0x6
c0018e22:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0018e2a:	50                   	push   eax
c0018e2b:	57                   	push   edi
c0018e2c:	e8 73 f6 ff ff       	call   c00184a4 <IDE::read(unsigned char, unsigned char)>
c0018e31:	83 c4 10             	add    esp,0x10
c0018e34:	a8 01                	test   al,0x1
c0018e36:	74 02                	je     c0018e3a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0018e38:	b3 07                	mov    bl,0x7
c0018e3a:	a8 02                	test   al,0x2
c0018e3c:	74 02                	je     c0018e40 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0018e3e:	b3 03                	mov    bl,0x3
c0018e40:	a8 04                	test   al,0x4
c0018e42:	74 02                	je     c0018e46 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0018e44:	b3 14                	mov    bl,0x14
c0018e46:	a8 08                	test   al,0x8
c0018e48:	74 02                	je     c0018e4c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0018e4a:	b3 03                	mov    bl,0x3
c0018e4c:	a8 10                	test   al,0x10
c0018e4e:	74 02                	je     c0018e52 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0018e50:	b3 15                	mov    bl,0x15
c0018e52:	a8 20                	test   al,0x20
c0018e54:	74 02                	je     c0018e58 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0018e56:	b3 03                	mov    bl,0x3
c0018e58:	a8 40                	test   al,0x40
c0018e5a:	74 02                	je     c0018e5e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0018e5c:	b3 16                	mov    bl,0x16
c0018e5e:	84 c0                	test   al,al
c0018e60:	79 16                	jns    c0018e78 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0018e62:	b3 0d                	mov    bl,0xd
c0018e64:	eb 12                	jmp    c0018e78 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0018e66:	3c 03                	cmp    al,0x3
c0018e68:	74 0c                	je     c0018e76 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0018e6a:	3c 04                	cmp    al,0x4
c0018e6c:	75 0a                	jne    c0018e78 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0018e6e:	b3 08                	mov    bl,0x8
c0018e70:	eb 06                	jmp    c0018e78 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0018e72:	b3 13                	mov    bl,0x13
c0018e74:	eb 02                	jmp    c0018e78 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0018e76:	b3 17                	mov    bl,0x17
c0018e78:	83 c4 1c             	add    esp,0x1c
c0018e7b:	88 d8                	mov    al,bl
c0018e7d:	5b                   	pop    ebx
c0018e7e:	5e                   	pop    esi
c0018e7f:	5f                   	pop    edi
c0018e80:	5d                   	pop    ebp
c0018e81:	c3                   	ret    

c0018e82 <IDE::polling(unsigned char, unsigned int)>:
c0018e82:	55                   	push   ebp
c0018e83:	bd 04 00 00 00       	mov    ebp,0x4
c0018e88:	57                   	push   edi
c0018e89:	56                   	push   esi
c0018e8a:	53                   	push   ebx
c0018e8b:	83 ec 0c             	sub    esp,0xc
c0018e8e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018e92:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0018e96:	0f b6 f3             	movzx  esi,bl
c0018e99:	52                   	push   edx
c0018e9a:	6a 0c                	push   0xc
c0018e9c:	56                   	push   esi
c0018e9d:	57                   	push   edi
c0018e9e:	e8 01 f6 ff ff       	call   c00184a4 <IDE::read(unsigned char, unsigned char)>
c0018ea3:	83 c4 10             	add    esp,0x10
c0018ea6:	4d                   	dec    ebp
c0018ea7:	75 ed                	jne    c0018e96 <IDE::polling(unsigned char, unsigned int)+0x14>
c0018ea9:	bb a0 86 01 00       	mov    ebx,0x186a0
c0018eae:	50                   	push   eax
c0018eaf:	6a 0c                	push   0xc
c0018eb1:	56                   	push   esi
c0018eb2:	57                   	push   edi
c0018eb3:	e8 ec f5 ff ff       	call   c00184a4 <IDE::read(unsigned char, unsigned char)>
c0018eb8:	83 c4 10             	add    esp,0x10
c0018ebb:	a8 01                	test   al,0x1
c0018ebd:	75 17                	jne    c0018ed6 <IDE::polling(unsigned char, unsigned int)+0x54>
c0018ebf:	a8 20                	test   al,0x20
c0018ec1:	75 0f                	jne    c0018ed2 <IDE::polling(unsigned char, unsigned int)+0x50>
c0018ec3:	4b                   	dec    ebx
c0018ec4:	74 10                	je     c0018ed6 <IDE::polling(unsigned char, unsigned int)+0x54>
c0018ec6:	84 c0                	test   al,al
c0018ec8:	78 e4                	js     c0018eae <IDE::polling(unsigned char, unsigned int)+0x2c>
c0018eca:	a8 08                	test   al,0x8
c0018ecc:	74 e0                	je     c0018eae <IDE::polling(unsigned char, unsigned int)+0x2c>
c0018ece:	31 c0                	xor    eax,eax
c0018ed0:	eb 06                	jmp    c0018ed8 <IDE::polling(unsigned char, unsigned int)+0x56>
c0018ed2:	b0 01                	mov    al,0x1
c0018ed4:	eb 02                	jmp    c0018ed8 <IDE::polling(unsigned char, unsigned int)+0x56>
c0018ed6:	b0 02                	mov    al,0x2
c0018ed8:	83 c4 0c             	add    esp,0xc
c0018edb:	5b                   	pop    ebx
c0018edc:	5e                   	pop    esi
c0018edd:	5f                   	pop    edi
c0018ede:	5d                   	pop    ebp
c0018edf:	c3                   	ret    

c0018ee0 <SATABus::close(int, int, void*)>:
c0018ee0:	31 c0                	xor    eax,eax
c0018ee2:	c3                   	ret    
c0018ee3:	90                   	nop

c0018ee4 <SATABus::detect()>:
c0018ee4:	c3                   	ret    
c0018ee5:	90                   	nop

c0018ee6 <SATABus::SATABus()>:
c0018ee6:	83 ec 0c             	sub    esp,0xc
c0018ee9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018eed:	83 ec 08             	sub    esp,0x8
c0018ef0:	68 d8 e5 01 c0       	push   0xc001e5d8
c0018ef5:	50                   	push   eax
c0018ef6:	e8 35 21 ff ff       	call   c000b030 <HardDiskController::HardDiskController(char const*)>
c0018efb:	83 c4 10             	add    esp,0x10
c0018efe:	ba 04 e6 01 c0       	mov    edx,0xc001e604
c0018f03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f07:	89 10                	mov    DWORD PTR [eax],edx
c0018f09:	83 ec 0c             	sub    esp,0xc
c0018f0c:	6a 50                	push   0x50
c0018f0e:	e8 95 e0 fe ff       	call   c0006fa8 <Phys::allocateContiguousPages(int)>
c0018f13:	83 c4 10             	add    esp,0x10
c0018f16:	89 c2                	mov    edx,eax
c0018f18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f1c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0018f22:	83 ec 0c             	sub    esp,0xc
c0018f25:	6a 50                	push   0x50
c0018f27:	e8 2d f7 fe ff       	call   c0008659 <Virt::allocateKernelVirtualPages(int)>
c0018f2c:	83 c4 10             	add    esp,0x10
c0018f2f:	89 c2                	mov    edx,eax
c0018f31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f35:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0018f3b:	a1 f0 f2 01 c0       	mov    eax,ds:0xc001f2f0
c0018f40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018f44:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0018f4a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018f4e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0018f54:	83 ec 0c             	sub    esp,0xc
c0018f57:	6a 03                	push   0x3
c0018f59:	6a 50                	push   0x50
c0018f5b:	51                   	push   ecx
c0018f5c:	52                   	push   edx
c0018f5d:	50                   	push   eax
c0018f5e:	e8 85 00 ff ff       	call   c0008fe8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018f63:	83 c4 20             	add    esp,0x20
c0018f66:	90                   	nop
c0018f67:	83 c4 0c             	add    esp,0xc
c0018f6a:	c3                   	ret    
c0018f6b:	90                   	nop

c0018f6c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0018f6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f70:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0018f73:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018f76:	09 c2                	or     edx,eax
c0018f78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f7c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018f82:	8b 08                	mov    ecx,DWORD PTR [eax]
c0018f84:	31 c0                	xor    eax,eax
c0018f86:	c1 e9 08             	shr    ecx,0x8
c0018f89:	83 e1 0f             	and    ecx,0xf
c0018f8c:	39 c8                	cmp    eax,ecx
c0018f8e:	74 0a                	je     c0018f9a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0018f90:	f6 c2 01             	test   dl,0x1
c0018f93:	74 08                	je     c0018f9d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0018f95:	d1 ea                	shr    edx,1
c0018f97:	40                   	inc    eax
c0018f98:	eb f2                	jmp    c0018f8c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0018f9a:	83 c8 ff             	or     eax,0xffffffff
c0018f9d:	c3                   	ret    

c0018f9e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0018f9e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018fa2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0018fa5:	89 c2                	mov    edx,eax
c0018fa7:	c1 ea 08             	shr    edx,0x8
c0018faa:	83 e2 0f             	and    edx,0xf
c0018fad:	fe ca                	dec    dl
c0018faf:	75 31                	jne    c0018fe2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0018fb1:	83 e0 0f             	and    eax,0xf
c0018fb4:	3c 03                	cmp    al,0x3
c0018fb6:	75 2a                	jne    c0018fe2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0018fb8:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0018fbb:	b8 02 00 00 00       	mov    eax,0x2
c0018fc0:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0018fc6:	74 1c                	je     c0018fe4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0018fc8:	b8 04 00 00 00       	mov    eax,0x4
c0018fcd:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0018fd3:	74 0f                	je     c0018fe4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0018fd5:	31 c0                	xor    eax,eax
c0018fd7:	83 fa 03             	cmp    edx,0x3
c0018fda:	0f 94 c0             	sete   al
c0018fdd:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0018fe1:	c3                   	ret    
c0018fe2:	31 c0                	xor    eax,eax
c0018fe4:	c3                   	ret    
c0018fe5:	90                   	nop

c0018fe6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0018fe6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018fea:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018fed:	0f ba e2 0f          	bt     edx,0xf
c0018ff1:	72 f7                	jb     c0018fea <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0018ff3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018ff6:	83 ca 10             	or     edx,0x10
c0018ff9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018ffc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018fff:	83 ca 01             	or     edx,0x1
c0019002:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019005:	c3                   	ret    

c0019006 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019006:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001900a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001900d:	83 e2 fe             	and    edx,0xfffffffe
c0019010:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019013:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019016:	83 e2 ef             	and    edx,0xffffffef
c0019019:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001901c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001901f:	0f ba e2 0e          	bt     edx,0xe
c0019023:	72 f7                	jb     c001901c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019025:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019028:	0f ba e2 0f          	bt     edx,0xf
c001902c:	72 ee                	jb     c001901c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001902e:	c3                   	ret    
c001902f:	90                   	nop

c0019030 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019030:	55                   	push   ebp
c0019031:	57                   	push   edi
c0019032:	56                   	push   esi
c0019033:	53                   	push   ebx
c0019034:	83 ec 1c             	sub    esp,0x1c
c0019037:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001903b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001903f:	53                   	push   ebx
c0019040:	56                   	push   esi
c0019041:	e8 c0 ff ff ff       	call   c0019006 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019046:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001904a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019050:	83 ec 0c             	sub    esp,0xc
c0019053:	c1 e5 0a             	shl    ebp,0xa
c0019056:	01 e8                	add    eax,ebp
c0019058:	89 03                	mov    DWORD PTR [ebx],eax
c001905a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001905c:	68 00 04 00 00       	push   0x400
c0019061:	6a 00                	push   0x0
c0019063:	50                   	push   eax
c0019064:	e8 87 74 fe ff       	call   c00004f0 <memset>
c0019069:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001906f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019073:	01 e8                	add    eax,ebp
c0019075:	83 c4 1c             	add    esp,0x1c
c0019078:	89 03                	mov    DWORD PTR [ebx],eax
c001907a:	c1 e2 08             	shl    edx,0x8
c001907d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019084:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001908a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019090:	01 f8                	add    eax,edi
c0019092:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019095:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019098:	68 00 01 00 00       	push   0x100
c001909d:	6a 00                	push   0x0
c001909f:	50                   	push   eax
c00190a0:	e8 4b 74 fe ff       	call   c00004f0 <memset>
c00190a5:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c00190ab:	01 fa                	add    edx,edi
c00190ad:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00190b1:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00190b4:	c1 e7 0d             	shl    edi,0xd
c00190b7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00190be:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c00190c4:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c00190ca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00190ce:	31 ff                	xor    edi,edi
c00190d0:	83 c4 10             	add    esp,0x10
c00190d3:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c00190d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00190dd:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00190e3:	83 c5 20             	add    ebp,0x20
c00190e6:	01 f8                	add    eax,edi
c00190e8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00190eb:	52                   	push   edx
c00190ec:	68 00 01 00 00       	push   0x100
c00190f1:	6a 00                	push   0x0
c00190f3:	50                   	push   eax
c00190f4:	e8 f7 73 fe ff       	call   c00004f0 <memset>
c00190f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00190fd:	83 c4 10             	add    esp,0x10
c0019100:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019106:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001910d:	01 f8                	add    eax,edi
c001910f:	81 c7 00 01 00 00    	add    edi,0x100
c0019115:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019118:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001911e:	75 b3                	jne    c00190d3 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019120:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019127:	50                   	push   eax
c0019128:	50                   	push   eax
c0019129:	53                   	push   ebx
c001912a:	56                   	push   esi
c001912b:	e8 b6 fe ff ff       	call   c0018fe6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019130:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019137:	83 c4 2c             	add    esp,0x2c
c001913a:	5b                   	pop    ebx
c001913b:	5e                   	pop    esi
c001913c:	5f                   	pop    edi
c001913d:	5d                   	pop    ebp
c001913e:	c3                   	ret    
c001913f:	90                   	nop

c0019140 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019140:	55                   	push   ebp
c0019141:	57                   	push   edi
c0019142:	56                   	push   esi
c0019143:	53                   	push   ebx
c0019144:	31 db                	xor    ebx,ebx
c0019146:	83 ec 0c             	sub    esp,0xc
c0019149:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001914d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019151:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019154:	f7 c7 01 00 00 00    	test   edi,0x1
c001915a:	74 7a                	je     c00191d6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001915c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019160:	89 d8                	mov    eax,ebx
c0019162:	c1 e0 07             	shl    eax,0x7
c0019165:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001916c:	55                   	push   ebp
c001916d:	56                   	push   esi
c001916e:	e8 2b fe ff ff       	call   c0018f9e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019173:	5a                   	pop    edx
c0019174:	83 f8 01             	cmp    eax,0x1
c0019177:	59                   	pop    ecx
c0019178:	75 21                	jne    c001919b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001917a:	50                   	push   eax
c001917b:	53                   	push   ebx
c001917c:	55                   	push   ebp
c001917d:	56                   	push   esi
c001917e:	e8 ad fe ff ff       	call   c0019030 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019183:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001918a:	e8 8e d9 fe ff       	call   c0006b1d <malloc>
c001918f:	89 c5                	mov    ebp,eax
c0019191:	89 04 24             	mov    DWORD PTR [esp],eax
c0019194:	e8 43 0d 00 00       	call   c0019edc <SATA::SATA()>
c0019199:	eb 24                	jmp    c00191bf <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001919b:	83 f8 04             	cmp    eax,0x4
c001919e:	75 36                	jne    c00191d6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c00191a0:	51                   	push   ecx
c00191a1:	53                   	push   ebx
c00191a2:	55                   	push   ebp
c00191a3:	56                   	push   esi
c00191a4:	e8 87 fe ff ff       	call   c0019030 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00191a9:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c00191b0:	e8 68 d9 fe ff       	call   c0006b1d <malloc>
c00191b5:	89 c5                	mov    ebp,eax
c00191b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00191ba:	e8 71 11 00 00       	call   c001a330 <SATAPI::SATAPI()>
c00191bf:	58                   	pop    eax
c00191c0:	5a                   	pop    edx
c00191c1:	55                   	push   ebp
c00191c2:	56                   	push   esi
c00191c3:	e8 24 1b ff ff       	call   c000acec <Device::addChild(Device*)>
c00191c8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00191cb:	56                   	push   esi
c00191cc:	6a 00                	push   0x0
c00191ce:	53                   	push   ebx
c00191cf:	55                   	push   ebp
c00191d0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00191d3:	83 c4 20             	add    esp,0x20
c00191d6:	d1 ef                	shr    edi,1
c00191d8:	43                   	inc    ebx
c00191d9:	83 fb 20             	cmp    ebx,0x20
c00191dc:	0f 85 72 ff ff ff    	jne    c0019154 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c00191e2:	83 c4 0c             	add    esp,0xc
c00191e5:	5b                   	pop    ebx
c00191e6:	5e                   	pop    esi
c00191e7:	5f                   	pop    edi
c00191e8:	5d                   	pop    ebp
c00191e9:	c3                   	ret    

c00191ea <SATABus::open(int, int, void*)>:
c00191ea:	83 ec 14             	sub    esp,0x14
c00191ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00191f1:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c00191f7:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00191fd:	52                   	push   edx
c00191fe:	50                   	push   eax
c00191ff:	e8 3c ff ff ff       	call   c0019140 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019204:	31 c0                	xor    eax,eax
c0019206:	83 c4 1c             	add    esp,0x1c
c0019209:	c3                   	ret    

c001920a <ATA::close(int, int, void*)>:
c001920a:	83 ec 0c             	sub    esp,0xc
c001920d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019211:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019217:	85 c0                	test   eax,eax
c0019219:	74 0c                	je     c0019227 <ATA::close(int, int, void*)+0x1d>
c001921b:	83 ec 0c             	sub    esp,0xc
c001921e:	8b 10                	mov    edx,DWORD PTR [eax]
c0019220:	50                   	push   eax
c0019221:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019224:	83 c4 10             	add    esp,0x10
c0019227:	31 c0                	xor    eax,eax
c0019229:	83 c4 0c             	add    esp,0xc
c001922c:	c3                   	ret    
c001922d:	90                   	nop

c001922e <ATA::powerSaving(PowerSavingLevel)>:
c001922e:	c3                   	ret    
c001922f:	90                   	nop

c0019230 <ATA::ATA()>:
c0019230:	83 ec 0c             	sub    esp,0xc
c0019233:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019237:	83 ec 04             	sub    esp,0x4
c001923a:	68 00 02 00 00       	push   0x200
c001923f:	68 d1 e6 01 c0       	push   0xc001e6d1
c0019244:	50                   	push   eax
c0019245:	e8 70 1e ff ff       	call   c000b0ba <PhysicalDisk::PhysicalDisk(char const*, int)>
c001924a:	83 c4 10             	add    esp,0x10
c001924d:	ba 44 e6 01 c0       	mov    edx,0xc001e644
c0019252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019256:	89 10                	mov    DWORD PTR [eax],edx
c0019258:	90                   	nop
c0019259:	83 c4 0c             	add    esp,0xc
c001925c:	c3                   	ret    
c001925d:	90                   	nop

c001925e <ATA::flush(bool)>:
c001925e:	53                   	push   ebx
c001925f:	83 ec 08             	sub    esp,0x8
c0019262:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019267:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001926b:	19 c0                	sbb    eax,eax
c001926d:	83 e0 fd             	and    eax,0xfffffffd
c0019270:	05 ea 00 00 00       	add    eax,0xea
c0019275:	50                   	push   eax
c0019276:	6a 07                	push   0x7
c0019278:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001927f:	50                   	push   eax
c0019280:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019286:	e8 59 f1 ff ff       	call   c00183e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001928b:	83 c4 0c             	add    esp,0xc
c001928e:	6a 00                	push   0x0
c0019290:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019297:	50                   	push   eax
c0019298:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001929e:	e8 df fb ff ff       	call   c0018e82 <IDE::polling(unsigned char, unsigned int)>
c00192a3:	83 c4 18             	add    esp,0x18
c00192a6:	5b                   	pop    ebx
c00192a7:	c3                   	ret    

c00192a8 <ATA::readyForCommand()>:
c00192a8:	56                   	push   esi
c00192a9:	53                   	push   ebx
c00192aa:	53                   	push   ebx
c00192ab:	31 db                	xor    ebx,ebx
c00192ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00192b1:	51                   	push   ecx
c00192b2:	6a 0c                	push   0xc
c00192b4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00192bb:	50                   	push   eax
c00192bc:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00192c2:	e8 dd f1 ff ff       	call   c00184a4 <IDE::read(unsigned char, unsigned char)>
c00192c7:	83 c4 10             	add    esp,0x10
c00192ca:	a8 88                	test   al,0x88
c00192cc:	74 1f                	je     c00192ed <ATA::readyForCommand()+0x45>
c00192ce:	43                   	inc    ebx
c00192cf:	83 fb 63             	cmp    ebx,0x63
c00192d2:	7e dd                	jle    c00192b1 <ATA::readyForCommand()+0x9>
c00192d4:	83 ec 0c             	sub    esp,0xc
c00192d7:	6a 0a                	push   0xa
c00192d9:	e8 72 97 ff ff       	call   c0012a50 <milliTenthSleep(unsigned int)>
c00192de:	83 c4 10             	add    esp,0x10
c00192e1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00192e7:	75 c8                	jne    c00192b1 <ATA::readyForCommand()+0x9>
c00192e9:	31 c0                	xor    eax,eax
c00192eb:	eb 02                	jmp    c00192ef <ATA::readyForCommand()+0x47>
c00192ed:	b0 01                	mov    al,0x1
c00192ef:	5a                   	pop    edx
c00192f0:	5b                   	pop    ebx
c00192f1:	5e                   	pop    esi
c00192f2:	c3                   	ret    
c00192f3:	90                   	nop

c00192f4 <ATA::access(unsigned long long, int, void*, bool)>:
c00192f4:	55                   	push   ebp
c00192f5:	57                   	push   edi
c00192f6:	56                   	push   esi
c00192f7:	53                   	push   ebx
c00192f8:	83 ec 2c             	sub    esp,0x2c
c00192fb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00192ff:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0019303:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019307:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001930b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001930f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019313:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019317:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001931d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019321:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019327:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001932b:	c1 e0 06             	shl    eax,0x6
c001932e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0019336:	74 5d                	je     c0019395 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0019338:	89 fa                	mov    edx,edi
c001933a:	89 f0                	mov    eax,esi
c001933c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0019340:	c1 ea 1c             	shr    edx,0x1c
c0019343:	89 d1                	mov    ecx,edx
c0019345:	09 c1                	or     ecx,eax
c0019347:	74 25                	je     c001936e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0019349:	31 ed                	xor    ebp,ebp
c001934b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0019352:	89 fa                	mov    edx,edi
c0019354:	89 f0                	mov    eax,esi
c0019356:	0f ad d0             	shrd   eax,edx,cl
c0019359:	d3 ea                	shr    edx,cl
c001935b:	f6 c1 20             	test   cl,0x20
c001935e:	74 02                	je     c0019362 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0019360:	89 d0                	mov    eax,edx
c0019362:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0019366:	45                   	inc    ebp
c0019367:	83 fd 06             	cmp    ebp,0x6
c001936a:	75 df                	jne    c001934b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001936c:	eb 76                	jmp    c00193e4 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001936e:	89 f0                	mov    eax,esi
c0019370:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0019375:	89 fa                	mov    edx,edi
c0019377:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001937e:	0f ac d0 10          	shrd   eax,edx,0x10
c0019382:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019387:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001938b:	c1 ee 18             	shr    esi,0x18
c001938e:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0019393:	eb 56                	jmp    c00193eb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019395:	6a 00                	push   0x0
c0019397:	6a 3f                	push   0x3f
c0019399:	57                   	push   edi
c001939a:	56                   	push   esi
c001939b:	e8 20 22 00 00       	call   c001b5c0 <__umoddi3>
c00193a0:	83 c4 10             	add    esp,0x10
c00193a3:	40                   	inc    eax
c00193a4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00193a8:	6a 00                	push   0x0
c00193aa:	68 f0 03 00 00       	push   0x3f0
c00193af:	57                   	push   edi
c00193b0:	56                   	push   esi
c00193b1:	e8 0a 21 00 00       	call   c001b4c0 <__udivdi3>
c00193b6:	83 c4 10             	add    esp,0x10
c00193b9:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00193be:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00193c5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00193ca:	6a 00                	push   0x0
c00193cc:	6a 3f                	push   0x3f
c00193ce:	57                   	push   edi
c00193cf:	56                   	push   esi
c00193d0:	e8 eb 20 00 00       	call   c001b4c0 <__udivdi3>
c00193d5:	83 c4 10             	add    esp,0x10
c00193d8:	89 c6                	mov    esi,eax
c00193da:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00193df:	83 e6 0f             	and    esi,0xf
c00193e2:	eb 07                	jmp    c00193eb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00193e4:	31 f6                	xor    esi,esi
c00193e6:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00193eb:	bf 01 00 00 00       	mov    edi,0x1
c00193f0:	50                   	push   eax
c00193f1:	6a 00                	push   0x0
c00193f3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00193fa:	50                   	push   eax
c00193fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00193ff:	e8 ee f1 ff ff       	call   c00185f2 <IDE::enableIRQs(unsigned char, bool)>
c0019404:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019407:	e8 9c fe ff ff       	call   c00192a8 <ATA::readyForCommand()>
c001940c:	83 c4 10             	add    esp,0x10
c001940f:	84 c0                	test   al,al
c0019411:	0f 84 4e 02 00 00    	je     c0019665 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c0019417:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001941d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0019423:	c1 e0 04             	shl    eax,0x4
c0019426:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001942d:	09 c6                	or     esi,eax
c001942f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0019434:	75 05                	jne    c001943b <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0019436:	83 ce a0             	or     esi,0xffffffa0
c0019439:	eb 03                	jmp    c001943e <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001943b:	83 ce e0             	or     esi,0xffffffe0
c001943e:	89 f0                	mov    eax,esi
c0019440:	0f b6 f0             	movzx  esi,al
c0019443:	56                   	push   esi
c0019444:	6a 06                	push   0x6
c0019446:	51                   	push   ecx
c0019447:	52                   	push   edx
c0019448:	e8 97 ef ff ff       	call   c00183e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001944d:	83 c4 10             	add    esp,0x10
c0019450:	6a 00                	push   0x0
c0019452:	6a 01                	push   0x1
c0019454:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001945b:	50                   	push   eax
c001945c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019462:	e8 7d ef ff ff       	call   c00183e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019467:	83 c4 10             	add    esp,0x10
c001946a:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001946f:	75 6e                	jne    c00194df <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0019471:	6a 00                	push   0x0
c0019473:	6a 08                	push   0x8
c0019475:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001947c:	50                   	push   eax
c001947d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019483:	e8 5c ef ff ff       	call   c00183e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019488:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001948d:	50                   	push   eax
c001948e:	6a 09                	push   0x9
c0019490:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019497:	50                   	push   eax
c0019498:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001949e:	e8 41 ef ff ff       	call   c00183e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00194a3:	83 c4 20             	add    esp,0x20
c00194a6:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00194ab:	50                   	push   eax
c00194ac:	6a 0a                	push   0xa
c00194ae:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00194b5:	50                   	push   eax
c00194b6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00194bc:	e8 23 ef ff ff       	call   c00183e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00194c1:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00194c6:	50                   	push   eax
c00194c7:	6a 0b                	push   0xb
c00194c9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00194d0:	50                   	push   eax
c00194d1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00194d7:	e8 08 ef ff ff       	call   c00183e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00194dc:	83 c4 20             	add    esp,0x20
c00194df:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00194e4:	50                   	push   eax
c00194e5:	6a 02                	push   0x2
c00194e7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00194ee:	50                   	push   eax
c00194ef:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00194f5:	e8 ea ee ff ff       	call   c00183e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00194fa:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00194ff:	50                   	push   eax
c0019500:	6a 03                	push   0x3
c0019502:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019509:	50                   	push   eax
c001950a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019510:	e8 cf ee ff ff       	call   c00183e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019515:	83 c4 20             	add    esp,0x20
c0019518:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001951d:	50                   	push   eax
c001951e:	6a 04                	push   0x4
c0019520:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019527:	50                   	push   eax
c0019528:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001952e:	e8 b1 ee ff ff       	call   c00183e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019533:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019538:	50                   	push   eax
c0019539:	6a 05                	push   0x5
c001953b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019542:	50                   	push   eax
c0019543:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019549:	e8 96 ee ff ff       	call   c00183e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001954e:	83 c4 20             	add    esp,0x20
c0019551:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0019556:	0f 94 c0             	sete   al
c0019559:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001955e:	74 09                	je     c0019569 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0019560:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0019567:	eb 07                	jmp    c0019570 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0019569:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0019570:	0f b6 c0             	movzx  eax,al
c0019573:	50                   	push   eax
c0019574:	6a 07                	push   0x7
c0019576:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001957d:	50                   	push   eax
c001957e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019584:	e8 5b ee ff ff       	call   c00183e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019589:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001958d:	83 c4 10             	add    esp,0x10
c0019590:	85 f6                	test   esi,esi
c0019592:	0f 84 ae 00 00 00    	je     c0019646 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c0019598:	50                   	push   eax
c0019599:	6a 01                	push   0x1
c001959b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00195a2:	50                   	push   eax
c00195a3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00195a9:	e8 d4 f8 ff ff       	call   c0018e82 <IDE::polling(unsigned char, unsigned int)>
c00195ae:	83 c4 10             	add    esp,0x10
c00195b1:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00195b7:	84 c0                	test   al,al
c00195b9:	74 20                	je     c00195db <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c00195bb:	0f b6 f8             	movzx  edi,al
c00195be:	0f b6 d2             	movzx  edx,dl
c00195c1:	57                   	push   edi
c00195c2:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00195c9:	50                   	push   eax
c00195ca:	52                   	push   edx
c00195cb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00195d1:	e8 fc f7 ff ff       	call   c0018dd2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00195d6:	e9 87 00 00 00       	jmp    c0019662 <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c00195db:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00195e0:	74 33                	je     c0019615 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c00195e2:	31 ed                	xor    ebp,ebp
c00195e4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00195e8:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c00195ec:	50                   	push   eax
c00195ed:	50                   	push   eax
c00195ee:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00195f5:	50                   	push   eax
c00195f6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00195fc:	e8 d1 ed ff ff       	call   c00183d2 <IDE::getBase(unsigned char)>
c0019601:	89 c2                	mov    edx,eax
c0019603:	89 f8                	mov    eax,edi
c0019605:	66 ef                	out    dx,ax
c0019607:	45                   	inc    ebp
c0019608:	83 c4 10             	add    esp,0x10
c001960b:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0019611:	75 d1                	jne    c00195e4 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c0019613:	eb 23                	jmp    c0019638 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c0019615:	0f b6 d2             	movzx  edx,dl
c0019618:	51                   	push   ecx
c0019619:	51                   	push   ecx
c001961a:	52                   	push   edx
c001961b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019621:	e8 ac ed ff ff       	call   c00183d2 <IDE::getBase(unsigned char)>
c0019626:	b9 00 01 00 00       	mov    ecx,0x100
c001962b:	89 c2                	mov    edx,eax
c001962d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0019631:	fc                   	cld    
c0019632:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0019635:	83 c4 10             	add    esp,0x10
c0019638:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0019640:	4e                   	dec    esi
c0019641:	e9 4a ff ff ff       	jmp    c0019590 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0019646:	31 ff                	xor    edi,edi
c0019648:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001964d:	74 16                	je     c0019665 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001964f:	50                   	push   eax
c0019650:	50                   	push   eax
c0019651:	31 c0                	xor    eax,eax
c0019653:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0019658:	0f 94 c0             	sete   al
c001965b:	50                   	push   eax
c001965c:	53                   	push   ebx
c001965d:	e8 fc fb ff ff       	call   c001925e <ATA::flush(bool)>
c0019662:	83 c4 10             	add    esp,0x10
c0019665:	83 c4 2c             	add    esp,0x2c
c0019668:	89 f8                	mov    eax,edi
c001966a:	5b                   	pop    ebx
c001966b:	5e                   	pop    esi
c001966c:	5f                   	pop    edi
c001966d:	5d                   	pop    ebp
c001966e:	c3                   	ret    
c001966f:	90                   	nop

c0019670 <ATA::read(unsigned long long, int, void*)>:
c0019670:	57                   	push   edi
c0019671:	b8 04 00 00 00       	mov    eax,0x4
c0019676:	56                   	push   esi
c0019677:	53                   	push   ebx
c0019678:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001967c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019680:	8d 7a ff             	lea    edi,[edx-0x1]
c0019683:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019687:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001968b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0019691:	77 25                	ja     c00196b8 <ATA::read(unsigned long long, int, void*)+0x48>
c0019693:	b8 06 00 00 00       	mov    eax,0x6
c0019698:	85 f6                	test   esi,esi
c001969a:	74 1c                	je     c00196b8 <ATA::read(unsigned long long, int, void*)+0x48>
c001969c:	50                   	push   eax
c001969d:	50                   	push   eax
c001969e:	6a 00                	push   0x0
c00196a0:	56                   	push   esi
c00196a1:	52                   	push   edx
c00196a2:	53                   	push   ebx
c00196a3:	51                   	push   ecx
c00196a4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00196a8:	e8 47 fc ff ff       	call   c00192f4 <ATA::access(unsigned long long, int, void*, bool)>
c00196ad:	83 c4 20             	add    esp,0x20
c00196b0:	85 c0                	test   eax,eax
c00196b2:	0f 95 c0             	setne  al
c00196b5:	0f b6 c0             	movzx  eax,al
c00196b8:	5b                   	pop    ebx
c00196b9:	5e                   	pop    esi
c00196ba:	5f                   	pop    edi
c00196bb:	c3                   	ret    

c00196bc <ATA::write(unsigned long long, int, void*)>:
c00196bc:	57                   	push   edi
c00196bd:	b8 04 00 00 00       	mov    eax,0x4
c00196c2:	56                   	push   esi
c00196c3:	53                   	push   ebx
c00196c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00196c8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00196cc:	8d 7a ff             	lea    edi,[edx-0x1]
c00196cf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00196d3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00196d7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00196dd:	77 25                	ja     c0019704 <ATA::write(unsigned long long, int, void*)+0x48>
c00196df:	b8 06 00 00 00       	mov    eax,0x6
c00196e4:	85 f6                	test   esi,esi
c00196e6:	74 1c                	je     c0019704 <ATA::write(unsigned long long, int, void*)+0x48>
c00196e8:	50                   	push   eax
c00196e9:	50                   	push   eax
c00196ea:	6a 01                	push   0x1
c00196ec:	56                   	push   esi
c00196ed:	52                   	push   edx
c00196ee:	53                   	push   ebx
c00196ef:	51                   	push   ecx
c00196f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00196f4:	e8 fb fb ff ff       	call   c00192f4 <ATA::access(unsigned long long, int, void*, bool)>
c00196f9:	83 c4 20             	add    esp,0x20
c00196fc:	85 c0                	test   eax,eax
c00196fe:	0f 95 c0             	setne  al
c0019701:	0f b6 c0             	movzx  eax,al
c0019704:	5b                   	pop    ebx
c0019705:	5e                   	pop    esi
c0019706:	5f                   	pop    edi
c0019707:	c3                   	ret    

c0019708 <ATA::detectCHS()>:
c0019708:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001970c:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0019712:	c1 e0 06             	shl    eax,0x6
c0019715:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001971b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0019725:	c7 44 24 04 28 e6 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e628
c001972d:	e9 c9 5c ff ff       	jmp    c000f3fb <Krnl::panic(char const*)>

c0019732 <ATA::open(int, int, void*)>:
c0019732:	53                   	push   ebx
c0019733:	83 ec 08             	sub    esp,0x8
c0019736:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001973a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001973e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019742:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0019748:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001974e:	c1 e0 06             	shl    eax,0x6
c0019751:	01 d0                	add    eax,edx
c0019753:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001975a:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0019760:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0019767:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0019771:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0019777:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001977e:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0019785:	75 0c                	jne    c0019793 <ATA::open(int, int, void*)+0x61>
c0019787:	83 ec 0c             	sub    esp,0xc
c001978a:	53                   	push   ebx
c001978b:	e8 78 ff ff ff       	call   c0019708 <ATA::detectCHS()>
c0019790:	83 c4 10             	add    esp,0x10
c0019793:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0019799:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001979f:	c1 e0 06             	shl    eax,0x6
c00197a2:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00197a9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00197b3:	d1 e8                	shr    eax,1
c00197b5:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00197bb:	6a 04                	push   0x4
c00197bd:	6a 0c                	push   0xc
c00197bf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00197c6:	50                   	push   eax
c00197c7:	52                   	push   edx
c00197c8:	e8 17 ec ff ff       	call   c00183e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00197cd:	90                   	nop
c00197ce:	90                   	nop
c00197cf:	6a 00                	push   0x0
c00197d1:	6a 0c                	push   0xc
c00197d3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00197da:	50                   	push   eax
c00197db:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00197e1:	e8 fe eb ff ff       	call   c00183e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00197e6:	83 c4 14             	add    esp,0x14
c00197e9:	53                   	push   ebx
c00197ea:	e8 33 19 ff ff       	call   c000b122 <PhysicalDisk::startCache()>
c00197ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00197f2:	e8 a3 29 ff ff       	call   c000c19a <createPartitionsForDisk(PhysicalDisk*)>
c00197f7:	31 c0                	xor    eax,eax
c00197f9:	83 c4 18             	add    esp,0x18
c00197fc:	5b                   	pop    ebx
c00197fd:	c3                   	ret    

c00197fe <ATAPI::write(unsigned long long, int, void*)>:
c00197fe:	b8 03 00 00 00       	mov    eax,0x3
c0019803:	c3                   	ret    

c0019804 <ATAPI::close(int, int, void*)>:
c0019804:	83 ec 0c             	sub    esp,0xc
c0019807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001980b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019811:	85 c0                	test   eax,eax
c0019813:	74 0c                	je     c0019821 <ATAPI::close(int, int, void*)+0x1d>
c0019815:	83 ec 0c             	sub    esp,0xc
c0019818:	8b 10                	mov    edx,DWORD PTR [eax]
c001981a:	50                   	push   eax
c001981b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001981e:	83 c4 10             	add    esp,0x10
c0019821:	31 c0                	xor    eax,eax
c0019823:	83 c4 0c             	add    esp,0xc
c0019826:	c3                   	ret    
c0019827:	90                   	nop

c0019828 <ATAPI::ATAPI()>:
c0019828:	83 ec 0c             	sub    esp,0xc
c001982b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001982f:	83 ec 04             	sub    esp,0x4
c0019832:	68 00 08 00 00       	push   0x800
c0019837:	68 95 e7 01 c0       	push   0xc001e795
c001983c:	50                   	push   eax
c001983d:	e8 78 18 ff ff       	call   c000b0ba <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019842:	83 c4 10             	add    esp,0x10
c0019845:	ba 8c e6 01 c0       	mov    edx,0xc001e68c
c001984a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001984e:	89 10                	mov    DWORD PTR [eax],edx
c0019850:	90                   	nop
c0019851:	83 c4 0c             	add    esp,0xc
c0019854:	c3                   	ret    
c0019855:	90                   	nop

c0019856 <ATAPI::readyForCommand()>:
c0019856:	56                   	push   esi
c0019857:	53                   	push   ebx
c0019858:	53                   	push   ebx
c0019859:	31 db                	xor    ebx,ebx
c001985b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001985f:	51                   	push   ecx
c0019860:	6a 0c                	push   0xc
c0019862:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019869:	50                   	push   eax
c001986a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019870:	e8 2f ec ff ff       	call   c00184a4 <IDE::read(unsigned char, unsigned char)>
c0019875:	83 c4 10             	add    esp,0x10
c0019878:	a8 88                	test   al,0x88
c001987a:	74 25                	je     c00198a1 <ATAPI::readyForCommand()+0x4b>
c001987c:	43                   	inc    ebx
c001987d:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c0019883:	7e da                	jle    c001985f <ATAPI::readyForCommand()+0x9>
c0019885:	83 ec 0c             	sub    esp,0xc
c0019888:	68 5e 01 00 00       	push   0x15e
c001988d:	e8 be 91 ff ff       	call   c0012a50 <milliTenthSleep(unsigned int)>
c0019892:	83 c4 10             	add    esp,0x10
c0019895:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001989b:	75 c2                	jne    c001985f <ATAPI::readyForCommand()+0x9>
c001989d:	31 c0                	xor    eax,eax
c001989f:	eb 02                	jmp    c00198a3 <ATAPI::readyForCommand()+0x4d>
c00198a1:	b0 01                	mov    al,0x1
c00198a3:	5a                   	pop    edx
c00198a4:	5b                   	pop    ebx
c00198a5:	5e                   	pop    esi
c00198a6:	c3                   	ret    
c00198a7:	90                   	nop

c00198a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00198a8:	55                   	push   ebp
c00198a9:	57                   	push   edi
c00198aa:	56                   	push   esi
c00198ab:	53                   	push   ebx
c00198ac:	83 ec 20             	sub    esp,0x20
c00198af:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00198b3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00198b7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00198bb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00198bf:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00198c3:	6a 01                	push   0x1
c00198c5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00198cc:	50                   	push   eax
c00198cd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00198d3:	e8 1a ed ff ff       	call   c00185f2 <IDE::enableIRQs(unsigned char, bool)>
c00198d8:	5e                   	pop    esi
c00198d9:	58                   	pop    eax
c00198da:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00198e1:	50                   	push   eax
c00198e2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00198e8:	e8 d1 ea ff ff       	call   c00183be <IDE::prepareInterrupt(unsigned char)>
c00198ed:	89 3c 24             	mov    DWORD PTR [esp],edi
c00198f0:	e8 61 ff ff ff       	call   c0019856 <ATAPI::readyForCommand()>
c00198f5:	83 c4 10             	add    esp,0x10
c00198f8:	84 c0                	test   al,al
c00198fa:	75 0a                	jne    c0019906 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00198fc:	bb 01 00 00 00       	mov    ebx,0x1
c0019901:	e9 57 02 00 00       	jmp    c0019b5d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0019906:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001990c:	c1 e0 04             	shl    eax,0x4
c001990f:	0f b6 c0             	movzx  eax,al
c0019912:	50                   	push   eax
c0019913:	6a 06                	push   0x6
c0019915:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001991c:	50                   	push   eax
c001991d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019923:	e8 bc ea ff ff       	call   c00183e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019928:	6a 00                	push   0x0
c001992a:	6a 01                	push   0x1
c001992c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019933:	50                   	push   eax
c0019934:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001993a:	e8 a5 ea ff ff       	call   c00183e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001993f:	83 c4 20             	add    esp,0x20
c0019942:	0f b6 c3             	movzx  eax,bl
c0019945:	0f b6 df             	movzx  ebx,bh
c0019948:	50                   	push   eax
c0019949:	6a 04                	push   0x4
c001994b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019952:	50                   	push   eax
c0019953:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019959:	e8 86 ea ff ff       	call   c00183e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001995e:	53                   	push   ebx
c001995f:	6a 05                	push   0x5
c0019961:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019968:	50                   	push   eax
c0019969:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001996f:	e8 70 ea ff ff       	call   c00183e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019974:	83 c4 20             	add    esp,0x20
c0019977:	68 a0 00 00 00       	push   0xa0
c001997c:	6a 07                	push   0x7
c001997e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019985:	50                   	push   eax
c0019986:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001998c:	e8 53 ea ff ff       	call   c00183e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019991:	83 c4 0c             	add    esp,0xc
c0019994:	6a 01                	push   0x1
c0019996:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001999d:	50                   	push   eax
c001999e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00199a4:	e8 d9 f4 ff ff       	call   c0018e82 <IDE::polling(unsigned char, unsigned int)>
c00199a9:	83 c4 10             	add    esp,0x10
c00199ac:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00199b2:	84 c0                	test   al,al
c00199b4:	74 23                	je     c00199d9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00199b6:	0f b6 d8             	movzx  ebx,al
c00199b9:	0f b6 d2             	movzx  edx,dl
c00199bc:	53                   	push   ebx
c00199bd:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00199c4:	50                   	push   eax
c00199c5:	52                   	push   edx
c00199c6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00199cc:	e8 01 f4 ff ff       	call   c0018dd2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00199d1:	83 c4 10             	add    esp,0x10
c00199d4:	e9 84 01 00 00       	jmp    c0019b5d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00199d9:	0f b6 d2             	movzx  edx,dl
c00199dc:	53                   	push   ebx
c00199dd:	53                   	push   ebx
c00199de:	52                   	push   edx
c00199df:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00199e5:	e8 e8 e9 ff ff       	call   c00183d2 <IDE::getBase(unsigned char)>
c00199ea:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00199ee:	b9 06 00 00 00       	mov    ecx,0x6
c00199f3:	89 c2                	mov    edx,eax
c00199f5:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00199f8:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00199fc:	83 c4 10             	add    esp,0x10
c00199ff:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0019a05:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0019a0c:	85 db                	test   ebx,ebx
c0019a0e:	0f 84 ec 00 00 00    	je     c0019b00 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0019a14:	51                   	push   ecx
c0019a15:	51                   	push   ecx
c0019a16:	52                   	push   edx
c0019a17:	50                   	push   eax
c0019a18:	e8 35 eb ff ff       	call   c0018552 <IDE::waitInterrupt(unsigned char)>
c0019a1d:	83 c4 10             	add    esp,0x10
c0019a20:	84 c0                	test   al,al
c0019a22:	0f 84 d4 fe ff ff    	je     c00198fc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0019a28:	56                   	push   esi
c0019a29:	56                   	push   esi
c0019a2a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019a31:	50                   	push   eax
c0019a32:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019a38:	e8 81 e9 ff ff       	call   c00183be <IDE::prepareInterrupt(unsigned char)>
c0019a3d:	83 c4 0c             	add    esp,0xc
c0019a40:	6a 04                	push   0x4
c0019a42:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019a49:	50                   	push   eax
c0019a4a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019a50:	e8 4f ea ff ff       	call   c00184a4 <IDE::read(unsigned char, unsigned char)>
c0019a55:	83 c4 0c             	add    esp,0xc
c0019a58:	89 c6                	mov    esi,eax
c0019a5a:	6a 05                	push   0x5
c0019a5c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019a63:	50                   	push   eax
c0019a64:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019a6a:	e8 35 ea ff ff       	call   c00184a4 <IDE::read(unsigned char, unsigned char)>
c0019a6f:	89 f1                	mov    ecx,esi
c0019a71:	0f b6 c0             	movzx  eax,al
c0019a74:	0f b6 f1             	movzx  esi,cl
c0019a77:	c1 e0 08             	shl    eax,0x8
c0019a7a:	09 c6                	or     esi,eax
c0019a7c:	d1 fe                	sar    esi,1
c0019a7e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0019a82:	83 c4 10             	add    esp,0x10
c0019a85:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0019a8a:	74 41                	je     c0019acd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0019a8c:	31 c9                	xor    ecx,ecx
c0019a8e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0019a94:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0019a9b:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0019a9f:	75 0a                	jne    c0019aab <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0019aa1:	01 c9                	add    ecx,ecx
c0019aa3:	01 cd                	add    ebp,ecx
c0019aa5:	4b                   	dec    ebx
c0019aa6:	e9 54 ff ff ff       	jmp    c00199ff <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0019aab:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0019ab0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019ab4:	51                   	push   ecx
c0019ab5:	51                   	push   ecx
c0019ab6:	52                   	push   edx
c0019ab7:	50                   	push   eax
c0019ab8:	e8 15 e9 ff ff       	call   c00183d2 <IDE::getBase(unsigned char)>
c0019abd:	89 c2                	mov    edx,eax
c0019abf:	89 f0                	mov    eax,esi
c0019ac1:	66 ef                	out    dx,ax
c0019ac3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019ac7:	83 c4 10             	add    esp,0x10
c0019aca:	41                   	inc    ecx
c0019acb:	eb c1                	jmp    c0019a8e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0019acd:	31 f6                	xor    esi,esi
c0019acf:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0019ad5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0019adc:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0019ae0:	75 06                	jne    c0019ae8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0019ae2:	01 f6                	add    esi,esi
c0019ae4:	01 f5                	add    ebp,esi
c0019ae6:	eb bd                	jmp    c0019aa5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0019ae8:	51                   	push   ecx
c0019ae9:	51                   	push   ecx
c0019aea:	52                   	push   edx
c0019aeb:	50                   	push   eax
c0019aec:	e8 e1 e8 ff ff       	call   c00183d2 <IDE::getBase(unsigned char)>
c0019af1:	89 c2                	mov    edx,eax
c0019af3:	66 ed                	in     ax,dx
c0019af5:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0019afa:	83 c4 10             	add    esp,0x10
c0019afd:	46                   	inc    esi
c0019afe:	eb cf                	jmp    c0019acf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0019b00:	51                   	push   ecx
c0019b01:	51                   	push   ecx
c0019b02:	52                   	push   edx
c0019b03:	50                   	push   eax
c0019b04:	e8 49 ea ff ff       	call   c0018552 <IDE::waitInterrupt(unsigned char)>
c0019b09:	83 c4 10             	add    esp,0x10
c0019b0c:	84 c0                	test   al,al
c0019b0e:	0f 84 e8 fd ff ff    	je     c00198fc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0019b14:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019b19:	52                   	push   edx
c0019b1a:	52                   	push   edx
c0019b1b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019b22:	50                   	push   eax
c0019b23:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019b29:	e8 90 e8 ff ff       	call   c00183be <IDE::prepareInterrupt(unsigned char)>
c0019b2e:	83 c4 10             	add    esp,0x10
c0019b31:	50                   	push   eax
c0019b32:	50                   	push   eax
c0019b33:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019b3a:	50                   	push   eax
c0019b3b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019b41:	e8 8c e8 ff ff       	call   c00183d2 <IDE::getBase(unsigned char)>
c0019b46:	8d 50 07             	lea    edx,[eax+0x7]
c0019b49:	ec                   	in     al,dx
c0019b4a:	83 c4 10             	add    esp,0x10
c0019b4d:	a8 88                	test   al,0x88
c0019b4f:	74 0a                	je     c0019b5b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0019b51:	4b                   	dec    ebx
c0019b52:	75 dd                	jne    c0019b31 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0019b54:	bb 02 00 00 00       	mov    ebx,0x2
c0019b59:	eb 02                	jmp    c0019b5d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0019b5b:	31 db                	xor    ebx,ebx
c0019b5d:	83 c4 1c             	add    esp,0x1c
c0019b60:	89 d8                	mov    eax,ebx
c0019b62:	5b                   	pop    ebx
c0019b63:	5e                   	pop    esi
c0019b64:	5f                   	pop    edi
c0019b65:	5d                   	pop    ebp
c0019b66:	c3                   	ret    
c0019b67:	90                   	nop

c0019b68 <ATAPI::diskRemoved()>:
c0019b68:	53                   	push   ebx
c0019b69:	83 ec 14             	sub    esp,0x14
c0019b6c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0019b70:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0019b77:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c0019b7d:	e8 98 23 ff ff       	call   c000bf1a <LogicalDisk::unmount()>
c0019b82:	58                   	pop    eax
c0019b83:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0019b89:	e8 d2 2c ff ff       	call   c000c860 <VCache::writeWriteBuffer()>
c0019b8e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019b94:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0019b98:	83 c4 18             	add    esp,0x18
c0019b9b:	5b                   	pop    ebx
c0019b9c:	e9 af 2c ff ff       	jmp    c000c850 <VCache::invalidateReadBuffer()>
c0019ba1:	90                   	nop

c0019ba2 <ATAPI::eject()>:
c0019ba2:	57                   	push   edi
c0019ba3:	b9 03 00 00 00       	mov    ecx,0x3
c0019ba8:	53                   	push   ebx
c0019ba9:	83 ec 14             	sub    esp,0x14
c0019bac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019bb0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0019bb4:	fc                   	cld    
c0019bb5:	31 c0                	xor    eax,eax
c0019bb7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0019bb9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0019bbe:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0019bc3:	50                   	push   eax
c0019bc4:	50                   	push   eax
c0019bc5:	6a 00                	push   0x0
c0019bc7:	6a 00                	push   0x0
c0019bc9:	6a 00                	push   0x0
c0019bcb:	6a 02                	push   0x2
c0019bcd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019bd1:	50                   	push   eax
c0019bd2:	53                   	push   ebx
c0019bd3:	e8 d0 fc ff ff       	call   c00198a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0019bd8:	83 c4 14             	add    esp,0x14
c0019bdb:	53                   	push   ebx
c0019bdc:	e8 87 ff ff ff       	call   c0019b68 <ATAPI::diskRemoved()>
c0019be1:	83 c4 24             	add    esp,0x24
c0019be4:	31 c0                	xor    eax,eax
c0019be6:	5b                   	pop    ebx
c0019be7:	5f                   	pop    edi
c0019be8:	c3                   	ret    
c0019be9:	90                   	nop

c0019bea <ATAPI::diskInserted()>:
c0019bea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bee:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c0019bf5:	c3                   	ret    

c0019bf6 <ATAPI::detectMedia()>:
c0019bf6:	56                   	push   esi
c0019bf7:	53                   	push   ebx
c0019bf8:	83 ec 28             	sub    esp,0x28
c0019bfb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019bff:	6a 0c                	push   0xc
c0019c01:	6a 00                	push   0x0
c0019c03:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0019c07:	56                   	push   esi
c0019c08:	e8 e3 68 fe ff       	call   c00004f0 <memset>
c0019c0d:	58                   	pop    eax
c0019c0e:	5a                   	pop    edx
c0019c0f:	6a 00                	push   0x0
c0019c11:	6a 00                	push   0x0
c0019c13:	6a 00                	push   0x0
c0019c15:	6a 00                	push   0x0
c0019c17:	56                   	push   esi
c0019c18:	53                   	push   ebx
c0019c19:	e8 8a fc ff ff       	call   c00198a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0019c1e:	83 c4 1c             	add    esp,0x1c
c0019c21:	6a 0c                	push   0xc
c0019c23:	6a 00                	push   0x0
c0019c25:	56                   	push   esi
c0019c26:	e8 c5 68 fe ff       	call   c00004f0 <memset>
c0019c2b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0019c30:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0019c35:	59                   	pop    ecx
c0019c36:	58                   	pop    eax
c0019c37:	6a 01                	push   0x1
c0019c39:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0019c3d:	50                   	push   eax
c0019c3e:	6a 00                	push   0x0
c0019c40:	6a 12                	push   0x12
c0019c42:	56                   	push   esi
c0019c43:	53                   	push   ebx
c0019c44:	e8 5f fc ff ff       	call   c00198a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0019c49:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0019c4d:	83 c4 20             	add    esp,0x20
c0019c50:	83 e0 7f             	and    eax,0x7f
c0019c53:	3c 70                	cmp    al,0x70
c0019c55:	74 15                	je     c0019c6c <ATAPI::detectMedia()+0x76>
c0019c57:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0019c5e:	75 0c                	jne    c0019c6c <ATAPI::detectMedia()+0x76>
c0019c60:	83 ec 0c             	sub    esp,0xc
c0019c63:	53                   	push   ebx
c0019c64:	e8 81 ff ff ff       	call   c0019bea <ATAPI::diskInserted()>
c0019c69:	83 c4 10             	add    esp,0x10
c0019c6c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0019c70:	83 e0 0f             	and    eax,0xf
c0019c73:	3c 02                	cmp    al,0x2
c0019c75:	75 1b                	jne    c0019c92 <ATAPI::detectMedia()+0x9c>
c0019c77:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0019c7c:	75 2d                	jne    c0019cab <ATAPI::detectMedia()+0xb5>
c0019c7e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0019c85:	74 24                	je     c0019cab <ATAPI::detectMedia()+0xb5>
c0019c87:	83 ec 0c             	sub    esp,0xc
c0019c8a:	53                   	push   ebx
c0019c8b:	e8 d8 fe ff ff       	call   c0019b68 <ATAPI::diskRemoved()>
c0019c90:	eb 16                	jmp    c0019ca8 <ATAPI::detectMedia()+0xb2>
c0019c92:	84 c0                	test   al,al
c0019c94:	75 15                	jne    c0019cab <ATAPI::detectMedia()+0xb5>
c0019c96:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0019c9d:	75 0c                	jne    c0019cab <ATAPI::detectMedia()+0xb5>
c0019c9f:	83 ec 0c             	sub    esp,0xc
c0019ca2:	53                   	push   ebx
c0019ca3:	e8 42 ff ff ff       	call   c0019bea <ATAPI::diskInserted()>
c0019ca8:	83 c4 10             	add    esp,0x10
c0019cab:	83 c4 24             	add    esp,0x24
c0019cae:	5b                   	pop    ebx
c0019caf:	5e                   	pop    esi
c0019cb0:	c3                   	ret    
c0019cb1:	90                   	nop

c0019cb2 <ATAPI::open(int, int, void*)>:
c0019cb2:	56                   	push   esi
c0019cb3:	53                   	push   ebx
c0019cb4:	50                   	push   eax
c0019cb5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019cb9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019cbd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019cc1:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0019cc7:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0019ccd:	c1 e0 06             	shl    eax,0x6
c0019cd0:	01 d0                	add    eax,edx
c0019cd2:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0019cd9:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0019cdf:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0019ce6:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0019cf0:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0019cf6:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0019cfd:	6a 04                	push   0x4
c0019cff:	6a 0c                	push   0xc
c0019d01:	51                   	push   ecx
c0019d02:	52                   	push   edx
c0019d03:	e8 dc e6 ff ff       	call   c00183e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019d08:	90                   	nop
c0019d09:	90                   	nop
c0019d0a:	6a 00                	push   0x0
c0019d0c:	6a 0c                	push   0xc
c0019d0e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019d15:	50                   	push   eax
c0019d16:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d1c:	e8 c3 e6 ff ff       	call   c00183e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019d21:	83 c4 14             	add    esp,0x14
c0019d24:	68 74 01 00 00       	push   0x174
c0019d29:	e8 ef cd fe ff       	call   c0006b1d <malloc>
c0019d2e:	83 c4 0c             	add    esp,0xc
c0019d31:	89 c6                	mov    esi,eax
c0019d33:	6a 00                	push   0x0
c0019d35:	68 ff ff ff 7f       	push   0x7fffffff
c0019d3a:	6a 00                	push   0x0
c0019d3c:	6a 00                	push   0x0
c0019d3e:	53                   	push   ebx
c0019d3f:	68 87 e7 01 c0       	push   0xc001e787
c0019d44:	50                   	push   eax
c0019d45:	e8 1c 20 ff ff       	call   c000bd66 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0019d4a:	83 c4 14             	add    esp,0x14
c0019d4d:	56                   	push   esi
c0019d4e:	e8 c9 20 ff ff       	call   c000be1c <LogicalDisk::assignDriveLetter()>
c0019d53:	5a                   	pop    edx
c0019d54:	0f be c0             	movsx  eax,al
c0019d57:	59                   	pop    ecx
c0019d58:	50                   	push   eax
c0019d59:	68 74 e6 01 c0       	push   0xc001e674
c0019d5e:	e8 49 fb fe ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c0019d63:	58                   	pop    eax
c0019d64:	5a                   	pop    edx
c0019d65:	56                   	push   esi
c0019d66:	53                   	push   ebx
c0019d67:	e8 80 0f ff ff       	call   c000acec <Device::addChild(Device*)>
c0019d6c:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c0019d72:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d75:	e8 a8 13 ff ff       	call   c000b122 <PhysicalDisk::startCache()>
c0019d7a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0019d81:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d84:	e8 6d fe ff ff       	call   c0019bf6 <ATAPI::detectMedia()>
c0019d89:	83 c4 14             	add    esp,0x14
c0019d8c:	31 c0                	xor    eax,eax
c0019d8e:	5b                   	pop    ebx
c0019d8f:	5e                   	pop    esi
c0019d90:	c3                   	ret    
c0019d91:	90                   	nop

c0019d92 <ATAPI::read(unsigned long long, int, void*)>:
c0019d92:	55                   	push   ebp
c0019d93:	57                   	push   edi
c0019d94:	56                   	push   esi
c0019d95:	53                   	push   ebx
c0019d96:	83 ec 1c             	sub    esp,0x1c
c0019d99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019d9d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019da1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019da5:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0019dac:	74 3c                	je     c0019dea <ATAPI::read(unsigned long long, int, void*)+0x58>
c0019dae:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0019db2:	b9 03 00 00 00       	mov    ecx,0x3
c0019db7:	fc                   	cld    
c0019db8:	31 c0                	xor    eax,eax
c0019dba:	0f ce                	bswap  esi
c0019dbc:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0019dbe:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0019dc3:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c0019dc7:	89 e8                	mov    eax,ebp
c0019dc9:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0019dcd:	50                   	push   eax
c0019dce:	50                   	push   eax
c0019dcf:	55                   	push   ebp
c0019dd0:	c1 e5 0b             	shl    ebp,0xb
c0019dd3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019dd7:	6a 00                	push   0x0
c0019dd9:	55                   	push   ebp
c0019dda:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019dde:	50                   	push   eax
c0019ddf:	53                   	push   ebx
c0019de0:	e8 c3 fa ff ff       	call   c00198a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0019de5:	83 c4 20             	add    esp,0x20
c0019de8:	eb 1a                	jmp    c0019e04 <ATAPI::read(unsigned long long, int, void*)+0x72>
c0019dea:	83 ec 0c             	sub    esp,0xc
c0019ded:	53                   	push   ebx
c0019dee:	e8 03 fe ff ff       	call   c0019bf6 <ATAPI::detectMedia()>
c0019df3:	83 c4 10             	add    esp,0x10
c0019df6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0019dfd:	75 af                	jne    c0019dae <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0019dff:	b8 02 00 00 00       	mov    eax,0x2
c0019e04:	83 c4 1c             	add    esp,0x1c
c0019e07:	5b                   	pop    ebx
c0019e08:	5e                   	pop    esi
c0019e09:	5f                   	pop    edi
c0019e0a:	5d                   	pop    ebp
c0019e0b:	c3                   	ret    

c0019e0c <SATA::close(int, int, void*)>:
c0019e0c:	83 ec 0c             	sub    esp,0xc
c0019e0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e13:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019e19:	85 c0                	test   eax,eax
c0019e1b:	74 0c                	je     c0019e29 <SATA::close(int, int, void*)+0x1d>
c0019e1d:	83 ec 0c             	sub    esp,0xc
c0019e20:	8b 10                	mov    edx,DWORD PTR [eax]
c0019e22:	50                   	push   eax
c0019e23:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019e26:	83 c4 10             	add    esp,0x10
c0019e29:	31 c0                	xor    eax,eax
c0019e2b:	83 c4 0c             	add    esp,0xc
c0019e2e:	c3                   	ret    
c0019e2f:	90                   	nop

c0019e30 <SATA::powerSaving(PowerSavingLevel)>:
c0019e30:	c3                   	ret    
c0019e31:	90                   	nop

c0019e32 <SATA::open(int, int, void*)>:
c0019e32:	56                   	push   esi
c0019e33:	53                   	push   ebx
c0019e34:	50                   	push   eax
c0019e35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019e3d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0019e47:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0019e4d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0019e57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019e5b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0019e65:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019e6b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0019e72:	e8 73 d0 fe ff       	call   c0006eea <Phys::allocatePage()>
c0019e77:	89 c6                	mov    esi,eax
c0019e79:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0019e7f:	81 c6 00 10 00 00    	add    esi,0x1000
c0019e85:	e8 60 d0 fe ff       	call   c0006eea <Phys::allocatePage()>
c0019e8a:	39 c6                	cmp    esi,eax
c0019e8c:	74 10                	je     c0019e9e <SATA::open(int, int, void*)+0x6c>
c0019e8e:	83 ec 0c             	sub    esp,0xc
c0019e91:	68 bc e6 01 c0       	push   0xc001e6bc
c0019e96:	e8 60 55 ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c0019e9b:	83 c4 10             	add    esp,0x10
c0019e9e:	83 ec 0c             	sub    esp,0xc
c0019ea1:	6a 02                	push   0x2
c0019ea3:	e8 b1 e7 fe ff       	call   c0008659 <Virt::allocateKernelVirtualPages(int)>
c0019ea8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0019eae:	6a 03                	push   0x3
c0019eb0:	50                   	push   eax
c0019eb1:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0019eb7:	ff 35 f0 f2 01 c0    	push   DWORD PTR ds:0xc001f2f0
c0019ebd:	e8 2c ee fe ff       	call   c0008cee <VAS::mapPage(unsigned long, unsigned long, int)>
c0019ec2:	83 c4 14             	add    esp,0x14
c0019ec5:	53                   	push   ebx
c0019ec6:	e8 57 12 ff ff       	call   c000b122 <PhysicalDisk::startCache()>
c0019ecb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ece:	e8 c7 22 ff ff       	call   c000c19a <createPartitionsForDisk(PhysicalDisk*)>
c0019ed3:	83 c4 14             	add    esp,0x14
c0019ed6:	31 c0                	xor    eax,eax
c0019ed8:	5b                   	pop    ebx
c0019ed9:	5e                   	pop    esi
c0019eda:	c3                   	ret    
c0019edb:	90                   	nop

c0019edc <SATA::SATA()>:
c0019edc:	83 ec 0c             	sub    esp,0xc
c0019edf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ee3:	83 ec 04             	sub    esp,0x4
c0019ee6:	68 00 02 00 00       	push   0x200
c0019eeb:	68 d0 e6 01 c0       	push   0xc001e6d0
c0019ef0:	50                   	push   eax
c0019ef1:	e8 c4 11 ff ff       	call   c000b0ba <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019ef6:	83 c4 10             	add    esp,0x10
c0019ef9:	ba 40 e7 01 c0       	mov    edx,0xc001e740
c0019efe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f02:	89 10                	mov    DWORD PTR [eax],edx
c0019f04:	90                   	nop
c0019f05:	83 c4 0c             	add    esp,0xc
c0019f08:	c3                   	ret    
c0019f09:	90                   	nop

c0019f0a <SATA::access(unsigned long long, int, void*, bool)>:
c0019f0a:	55                   	push   ebp
c0019f0b:	57                   	push   edi
c0019f0c:	56                   	push   esi
c0019f0d:	53                   	push   ebx
c0019f0e:	83 ec 2c             	sub    esp,0x2c
c0019f11:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0019f15:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019f19:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019f1d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0019f21:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0019f25:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0019f2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019f2e:	7e 10                	jle    c0019f40 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0019f30:	83 ec 0c             	sub    esp,0xc
c0019f33:	68 e0 e6 01 c0       	push   0xc001e6e0
c0019f38:	e8 be 54 ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c0019f3d:	83 c4 10             	add    esp,0x10
c0019f40:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0019f46:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0019f4c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019f52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f56:	89 d0                	mov    eax,edx
c0019f58:	c1 e0 07             	shl    eax,0x7
c0019f5b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0019f5f:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0019f69:	51                   	push   ecx
c0019f6a:	8d 42 02             	lea    eax,[edx+0x2]
c0019f6d:	51                   	push   ecx
c0019f6e:	c1 e0 07             	shl    eax,0x7
c0019f71:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019f75:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0019f79:	50                   	push   eax
c0019f7a:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0019f80:	e8 e7 ef ff ff       	call   c0018f6c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0019f85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0019f89:	83 c4 10             	add    esp,0x10
c0019f8c:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0019f91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019f95:	0f 84 4f 01 00 00    	je     c001a0ea <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c0019f9b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0019f9f:	c1 e0 09             	shl    eax,0x9
c0019fa2:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0019fa7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019fab:	74 0e                	je     c0019fbb <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c0019fad:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0019fb3:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0019fb7:	89 c1                	mov    ecx,eax
c0019fb9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019fbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019fbf:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0019fc5:	8d 42 02             	lea    eax,[edx+0x2]
c0019fc8:	c1 e0 07             	shl    eax,0x7
c0019fcb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0019fcf:	8b 00                	mov    eax,DWORD PTR [eax]
c0019fd1:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0019fd7:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0019fdd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019fe1:	c1 e1 05             	shl    ecx,0x5
c0019fe4:	01 c8                	add    eax,ecx
c0019fe6:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0019fea:	83 e1 01             	and    ecx,0x1
c0019fed:	89 ce                	mov    esi,ecx
c0019fef:	8a 08                	mov    cl,BYTE PTR [eax]
c0019ff1:	c1 e6 06             	shl    esi,0x6
c0019ff4:	83 e1 bf             	and    ecx,0xffffffbf
c0019ff7:	09 f1                	or     ecx,esi
c0019ff9:	88 08                	mov    BYTE PTR [eax],cl
c0019ffb:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019ffd:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001a003:	81 c9 05 00 01 00    	or     ecx,0x10005
c001a009:	89 08                	mov    DWORD PTR [eax],ecx
c001a00b:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001a011:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001a017:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001a01d:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001a020:	50                   	push   eax
c001a021:	68 90 00 00 00       	push   0x90
c001a026:	6a 00                	push   0x0
c001a028:	56                   	push   esi
c001a029:	e8 c2 64 fe ff       	call   c00004f0 <memset>
c001a02e:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a034:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001a038:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001a03e:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001a042:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a046:	83 c4 10             	add    esp,0x10
c001a049:	48                   	dec    eax
c001a04a:	25 ff ff 3f 00       	and    eax,0x3fffff
c001a04f:	89 c1                	mov    ecx,eax
c001a051:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001a057:	25 00 00 c0 ff       	and    eax,0xffc00000
c001a05c:	09 c8                	or     eax,ecx
c001a05e:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001a064:	66 8b 06             	mov    ax,WORD PTR [esi]
c001a067:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001a06e:	66 25 00 7f          	and    ax,0x7f00
c001a072:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a076:	66 0d 27 80          	or     ax,0x8027
c001a07a:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001a07f:	66 89 06             	mov    WORD PTR [esi],ax
c001a082:	19 c0                	sbb    eax,eax
c001a084:	83 e0 f0             	and    eax,0xfffffff0
c001a087:	83 c0 35             	add    eax,0x35
c001a08a:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001a08d:	89 e8                	mov    eax,ebp
c001a08f:	c1 e8 10             	shr    eax,0x10
c001a092:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001a095:	89 e8                	mov    eax,ebp
c001a097:	c1 e8 18             	shr    eax,0x18
c001a09a:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001a09d:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001a0a1:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001a0a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a0a8:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001a0ab:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a0af:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001a0b3:	89 d6                	mov    esi,edx
c001a0b5:	31 c0                	xor    eax,eax
c001a0b7:	c1 e6 07             	shl    esi,0x7
c001a0ba:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001a0be:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001a0c4:	80 e1 88             	and    cl,0x88
c001a0c7:	74 0a                	je     c001a0d3 <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001a0c9:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a0ce:	74 0a                	je     c001a0da <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001a0d0:	40                   	inc    eax
c001a0d1:	eb eb                	jmp    c001a0be <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001a0d3:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a0d8:	75 17                	jne    c001a0f1 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001a0da:	83 ec 0c             	sub    esp,0xc
c001a0dd:	68 19 e7 01 c0       	push   0xc001e719
c001a0e2:	e8 c5 f7 fe ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c001a0e7:	83 c4 10             	add    esp,0x10
c001a0ea:	b8 01 00 00 00       	mov    eax,0x1
c001a0ef:	eb 5d                	jmp    c001a14e <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001a0f1:	b8 01 00 00 00       	mov    eax,0x1
c001a0f6:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001a0fa:	c1 e2 07             	shl    edx,0x7
c001a0fd:	d3 e0                	shl    eax,cl
c001a0ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001a103:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001a109:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001a10f:	85 c8                	test   eax,ecx
c001a111:	74 16                	je     c001a129 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001a113:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001a119:	0f ba e1 1e          	bt     ecx,0x1e
c001a11d:	73 ea                	jae    c001a109 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001a11f:	83 ec 0c             	sub    esp,0xc
c001a122:	68 27 e7 01 c0       	push   0xc001e727
c001a127:	eb b9                	jmp    c001a0e2 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001a129:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001a12f:	0f ba e0 1e          	bt     eax,0x1e
c001a133:	72 b5                	jb     c001a0ea <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001a135:	31 c0                	xor    eax,eax
c001a137:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001a13c:	75 10                	jne    c001a14e <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001a13e:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001a144:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001a148:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a14c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a14e:	83 c4 2c             	add    esp,0x2c
c001a151:	5b                   	pop    ebx
c001a152:	5e                   	pop    esi
c001a153:	5f                   	pop    edi
c001a154:	5d                   	pop    ebp
c001a155:	c3                   	ret    

c001a156 <SATA::read(unsigned long long, int, void*)>:
c001a156:	57                   	push   edi
c001a157:	b8 04 00 00 00       	mov    eax,0x4
c001a15c:	56                   	push   esi
c001a15d:	53                   	push   ebx
c001a15e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a162:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a166:	8d 7a ff             	lea    edi,[edx-0x1]
c001a169:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a16d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a171:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a177:	77 25                	ja     c001a19e <SATA::read(unsigned long long, int, void*)+0x48>
c001a179:	b8 06 00 00 00       	mov    eax,0x6
c001a17e:	85 f6                	test   esi,esi
c001a180:	74 1c                	je     c001a19e <SATA::read(unsigned long long, int, void*)+0x48>
c001a182:	50                   	push   eax
c001a183:	50                   	push   eax
c001a184:	6a 00                	push   0x0
c001a186:	56                   	push   esi
c001a187:	52                   	push   edx
c001a188:	53                   	push   ebx
c001a189:	51                   	push   ecx
c001a18a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a18e:	e8 77 fd ff ff       	call   c0019f0a <SATA::access(unsigned long long, int, void*, bool)>
c001a193:	83 c4 20             	add    esp,0x20
c001a196:	85 c0                	test   eax,eax
c001a198:	0f 95 c0             	setne  al
c001a19b:	0f b6 c0             	movzx  eax,al
c001a19e:	5b                   	pop    ebx
c001a19f:	5e                   	pop    esi
c001a1a0:	5f                   	pop    edi
c001a1a1:	c3                   	ret    

c001a1a2 <SATA::write(unsigned long long, int, void*)>:
c001a1a2:	55                   	push   ebp
c001a1a3:	b8 04 00 00 00       	mov    eax,0x4
c001a1a8:	57                   	push   edi
c001a1a9:	56                   	push   esi
c001a1aa:	53                   	push   ebx
c001a1ab:	83 ec 0c             	sub    esp,0xc
c001a1ae:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a1b2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a1b6:	8d 73 ff             	lea    esi,[ebx-0x1]
c001a1b9:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001a1bd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001a1c1:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001a1c7:	77 3d                	ja     c001a206 <SATA::write(unsigned long long, int, void*)+0x64>
c001a1c9:	b8 06 00 00 00       	mov    eax,0x6
c001a1ce:	85 ed                	test   ebp,ebp
c001a1d0:	74 34                	je     c001a206 <SATA::write(unsigned long long, int, void*)+0x64>
c001a1d2:	c1 e3 09             	shl    ebx,0x9
c001a1d5:	01 eb                	add    ebx,ebp
c001a1d7:	89 d6                	mov    esi,edx
c001a1d9:	89 cf                	mov    edi,ecx
c001a1db:	83 c6 01             	add    esi,0x1
c001a1de:	83 d7 00             	adc    edi,0x0
c001a1e1:	50                   	push   eax
c001a1e2:	50                   	push   eax
c001a1e3:	6a 01                	push   0x1
c001a1e5:	55                   	push   ebp
c001a1e6:	81 c5 00 02 00 00    	add    ebp,0x200
c001a1ec:	6a 01                	push   0x1
c001a1ee:	51                   	push   ecx
c001a1ef:	52                   	push   edx
c001a1f0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a1f4:	e8 11 fd ff ff       	call   c0019f0a <SATA::access(unsigned long long, int, void*, bool)>
c001a1f9:	83 c4 20             	add    esp,0x20
c001a1fc:	89 f2                	mov    edx,esi
c001a1fe:	89 f9                	mov    ecx,edi
c001a200:	39 dd                	cmp    ebp,ebx
c001a202:	75 d3                	jne    c001a1d7 <SATA::write(unsigned long long, int, void*)+0x35>
c001a204:	31 c0                	xor    eax,eax
c001a206:	83 c4 0c             	add    esp,0xc
c001a209:	5b                   	pop    ebx
c001a20a:	5e                   	pop    esi
c001a20b:	5f                   	pop    edi
c001a20c:	5d                   	pop    ebp
c001a20d:	c3                   	ret    

c001a20e <SATAPI::write(unsigned long long, int, void*)>:
c001a20e:	b8 03 00 00 00       	mov    eax,0x3
c001a213:	c3                   	ret    

c001a214 <SATAPI::close(int, int, void*)>:
c001a214:	83 ec 0c             	sub    esp,0xc
c001a217:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a21b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a221:	85 c0                	test   eax,eax
c001a223:	74 0c                	je     c001a231 <SATAPI::close(int, int, void*)+0x1d>
c001a225:	83 ec 0c             	sub    esp,0xc
c001a228:	8b 10                	mov    edx,DWORD PTR [eax]
c001a22a:	50                   	push   eax
c001a22b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a22e:	83 c4 10             	add    esp,0x10
c001a231:	31 c0                	xor    eax,eax
c001a233:	83 c4 0c             	add    esp,0xc
c001a236:	c3                   	ret    
c001a237:	90                   	nop

c001a238 <SATAPI::open(int, int, void*)>:
c001a238:	56                   	push   esi
c001a239:	53                   	push   ebx
c001a23a:	51                   	push   ecx
c001a23b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a23f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a243:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001a24d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001a253:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a25d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a261:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a26b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001a271:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a278:	e8 6d cc fe ff       	call   c0006eea <Phys::allocatePage()>
c001a27d:	89 c6                	mov    esi,eax
c001a27f:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001a285:	81 c6 00 10 00 00    	add    esi,0x1000
c001a28b:	e8 5a cc fe ff       	call   c0006eea <Phys::allocatePage()>
c001a290:	39 c6                	cmp    esi,eax
c001a292:	74 10                	je     c001a2a4 <SATAPI::open(int, int, void*)+0x6c>
c001a294:	83 ec 0c             	sub    esp,0xc
c001a297:	68 70 e7 01 c0       	push   0xc001e770
c001a29c:	e8 5a 51 ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c001a2a1:	83 c4 10             	add    esp,0x10
c001a2a4:	83 ec 0c             	sub    esp,0xc
c001a2a7:	6a 02                	push   0x2
c001a2a9:	e8 ab e3 fe ff       	call   c0008659 <Virt::allocateKernelVirtualPages(int)>
c001a2ae:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001a2b4:	6a 03                	push   0x3
c001a2b6:	50                   	push   eax
c001a2b7:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001a2bd:	ff 35 f0 f2 01 c0    	push   DWORD PTR ds:0xc001f2f0
c001a2c3:	e8 26 ea fe ff       	call   c0008cee <VAS::mapPage(unsigned long, unsigned long, int)>
c001a2c8:	83 c4 14             	add    esp,0x14
c001a2cb:	68 74 01 00 00       	push   0x174
c001a2d0:	e8 48 c8 fe ff       	call   c0006b1d <malloc>
c001a2d5:	83 c4 0c             	add    esp,0xc
c001a2d8:	89 c6                	mov    esi,eax
c001a2da:	6a 00                	push   0x0
c001a2dc:	68 ff ff ff 7f       	push   0x7fffffff
c001a2e1:	6a 00                	push   0x0
c001a2e3:	6a 00                	push   0x0
c001a2e5:	53                   	push   ebx
c001a2e6:	68 86 e7 01 c0       	push   0xc001e786
c001a2eb:	50                   	push   eax
c001a2ec:	e8 75 1a ff ff       	call   c000bd66 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001a2f1:	83 c4 14             	add    esp,0x14
c001a2f4:	56                   	push   esi
c001a2f5:	e8 22 1b ff ff       	call   c000be1c <LogicalDisk::assignDriveLetter()>
c001a2fa:	5a                   	pop    edx
c001a2fb:	0f be c0             	movsx  eax,al
c001a2fe:	59                   	pop    ecx
c001a2ff:	50                   	push   eax
c001a300:	68 74 e6 01 c0       	push   0xc001e674
c001a305:	e8 a2 f5 fe ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c001a30a:	58                   	pop    eax
c001a30b:	5a                   	pop    edx
c001a30c:	56                   	push   esi
c001a30d:	53                   	push   ebx
c001a30e:	e8 d9 09 ff ff       	call   c000acec <Device::addChild(Device*)>
c001a313:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001a319:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a31c:	e8 01 0e ff ff       	call   c000b122 <PhysicalDisk::startCache()>
c001a321:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001a328:	31 c0                	xor    eax,eax
c001a32a:	83 c4 14             	add    esp,0x14
c001a32d:	5b                   	pop    ebx
c001a32e:	5e                   	pop    esi
c001a32f:	c3                   	ret    

c001a330 <SATAPI::SATAPI()>:
c001a330:	83 ec 0c             	sub    esp,0xc
c001a333:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a337:	83 ec 04             	sub    esp,0x4
c001a33a:	68 00 08 00 00       	push   0x800
c001a33f:	68 94 e7 01 c0       	push   0xc001e794
c001a344:	50                   	push   eax
c001a345:	e8 70 0d ff ff       	call   c000b0ba <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a34a:	83 c4 10             	add    esp,0x10
c001a34d:	ba d0 e8 01 c0       	mov    edx,0xc001e8d0
c001a352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a356:	89 10                	mov    DWORD PTR [eax],edx
c001a358:	90                   	nop
c001a359:	83 c4 0c             	add    esp,0xc
c001a35c:	c3                   	ret    
c001a35d:	90                   	nop

c001a35e <SATAPI::diskRemoved()>:
c001a35e:	c3                   	ret    
c001a35f:	90                   	nop

c001a360 <SATAPI::diskInserted()>:
c001a360:	83 ec 18             	sub    esp,0x18
c001a363:	68 a0 e7 01 c0       	push   0xc001e7a0
c001a368:	e8 3f f5 fe ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c001a36d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a371:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001a378:	83 c4 1c             	add    esp,0x1c
c001a37b:	c3                   	ret    

c001a37c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001a37c:	55                   	push   ebp
c001a37d:	57                   	push   edi
c001a37e:	56                   	push   esi
c001a37f:	53                   	push   ebx
c001a380:	83 ec 38             	sub    esp,0x38
c001a383:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001a387:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a38b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001a38f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a393:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001a397:	68 b8 e7 01 c0       	push   0xc001e7b8
c001a39c:	e8 0b f5 fe ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c001a3a1:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001a3a7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001a3ad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a3b1:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001a3b7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a3bb:	c1 e0 07             	shl    eax,0x7
c001a3be:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001a3c2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a3c6:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001a3d0:	58                   	pop    eax
c001a3d1:	5a                   	pop    edx
c001a3d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a3d6:	8d 58 02             	lea    ebx,[eax+0x2]
c001a3d9:	c1 e3 07             	shl    ebx,0x7
c001a3dc:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001a3e0:	53                   	push   ebx
c001a3e1:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001a3e7:	e8 80 eb ff ff       	call   c0018f6c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001a3ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a3f0:	83 c4 10             	add    esp,0x10
c001a3f3:	b8 01 00 00 00       	mov    eax,0x1
c001a3f8:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001a3fd:	0f 84 4c 02 00 00    	je     c001a64f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001a403:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001a409:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a40b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001a411:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001a417:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a41b:	c1 e1 05             	shl    ecx,0x5
c001a41e:	01 c8                	add    eax,ecx
c001a420:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a422:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001a428:	81 c9 25 00 01 00    	or     ecx,0x10025
c001a42e:	89 08                	mov    DWORD PTR [eax],ecx
c001a430:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001a436:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001a43c:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001a442:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001a445:	8d 7b 40             	lea    edi,[ebx+0x40]
c001a448:	50                   	push   eax
c001a449:	68 90 00 00 00       	push   0x90
c001a44e:	6a 00                	push   0x0
c001a450:	53                   	push   ebx
c001a451:	e8 9a 60 fe ff       	call   c00004f0 <memset>
c001a456:	b9 0c 00 00 00       	mov    ecx,0xc
c001a45b:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001a45f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a461:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001a467:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001a46b:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001a471:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001a475:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001a479:	48                   	dec    eax
c001a47a:	25 ff ff 3f 00       	and    eax,0x3fffff
c001a47f:	89 c1                	mov    ecx,eax
c001a481:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001a487:	25 00 00 c0 ff       	and    eax,0xffc00000
c001a48c:	09 c8                	or     eax,ecx
c001a48e:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001a494:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001a497:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001a49e:	66 25 00 7f          	and    ax,0x7f00
c001a4a2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001a4a6:	66 0d 27 80          	or     ax,0x8027
c001a4aa:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001a4ae:	66 89 03             	mov    WORD PTR [ebx],ax
c001a4b1:	89 d0                	mov    eax,edx
c001a4b3:	c1 ea 18             	shr    edx,0x18
c001a4b6:	c1 e8 10             	shr    eax,0x10
c001a4b9:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001a4bc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001a4bf:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001a4c3:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001a4c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a4ca:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001a4cd:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a4d1:	83 c4 10             	add    esp,0x10
c001a4d4:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001a4d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a4dc:	31 c0                	xor    eax,eax
c001a4de:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001a4e4:	80 e1 88             	and    cl,0x88
c001a4e7:	74 0a                	je     c001a4f3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c001a4e9:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a4ee:	74 0a                	je     c001a4fa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c001a4f0:	40                   	inc    eax
c001a4f1:	eb eb                	jmp    c001a4de <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c001a4f3:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a4f8:	75 16                	jne    c001a510 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x194>
c001a4fa:	83 ec 0c             	sub    esp,0xc
c001a4fd:	68 d2 e7 01 c0       	push   0xc001e7d2
c001a502:	e8 a5 f3 fe ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c001a507:	5f                   	pop    edi
c001a508:	5d                   	pop    ebp
c001a509:	68 e7 e7 01 c0       	push   0xc001e7e7
c001a50e:	eb 4f                	jmp    c001a55f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c001a510:	be 01 00 00 00       	mov    esi,0x1
c001a515:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001a519:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001a51d:	d3 e6                	shl    esi,cl
c001a51f:	c1 e7 07             	shl    edi,0x7
c001a522:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001a528:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001a52d:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001a531:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001a537:	85 c6                	test   esi,eax
c001a539:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001a53f:	0f 84 cb 00 00 00    	je     c001a610 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c001a545:	0f ba e0 1e          	bt     eax,0x1e
c001a549:	73 2c                	jae    c001a577 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c001a54b:	83 ec 0c             	sub    esp,0xc
c001a54e:	68 f9 e7 01 c0       	push   0xc001e7f9
c001a553:	e8 54 f3 fe ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c001a558:	5b                   	pop    ebx
c001a559:	5e                   	pop    esi
c001a55a:	68 0c e8 01 c0       	push   0xc001e80c
c001a55f:	ff 35 54 f2 01 c0    	push   DWORD PTR ds:0xc001f254
c001a565:	e8 22 d6 fe ff       	call   c0007b8c <VgaText::puts(char const*)>
c001a56a:	83 c4 10             	add    esp,0x10
c001a56d:	b8 01 00 00 00       	mov    eax,0x1
c001a572:	e9 d8 00 00 00       	jmp    c001a64f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001a577:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001a57d:	83 f8 0d             	cmp    eax,0xd
c001a580:	77 0a                	ja     c001a58c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x210>
c001a582:	83 ec 0c             	sub    esp,0xc
c001a585:	68 c8 00 00 00       	push   0xc8
c001a58a:	eb 28                	jmp    c001a5b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x238>
c001a58c:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001a592:	83 f8 0d             	cmp    eax,0xd
c001a595:	77 0a                	ja     c001a5a1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x225>
c001a597:	83 ec 0c             	sub    esp,0xc
c001a59a:	68 58 02 00 00       	push   0x258
c001a59f:	eb 13                	jmp    c001a5b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x238>
c001a5a1:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001a5a7:	83 f8 06             	cmp    eax,0x6
c001a5aa:	77 10                	ja     c001a5bc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x240>
c001a5ac:	83 ec 0c             	sub    esp,0xc
c001a5af:	68 dc 05 00 00       	push   0x5dc
c001a5b4:	e8 97 84 ff ff       	call   c0012a50 <milliTenthSleep(unsigned int)>
c001a5b9:	83 c4 10             	add    esp,0x10
c001a5bc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001a5c0:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001a5c3:	75 06                	jne    c001a5cb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24f>
c001a5c5:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001a5c9:	74 15                	je     c001a5e0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001a5cb:	83 fb 06             	cmp    ebx,0x6
c001a5ce:	77 10                	ja     c001a5e0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001a5d0:	83 ec 0c             	sub    esp,0xc
c001a5d3:	68 c4 09 00 00       	push   0x9c4
c001a5d8:	e8 73 84 ff ff       	call   c0012a50 <milliTenthSleep(unsigned int)>
c001a5dd:	83 c4 10             	add    esp,0x10
c001a5e0:	43                   	inc    ebx
c001a5e1:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001a5e7:	0f 85 44 ff ff ff    	jne    c001a531 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b5>
c001a5ed:	51                   	push   ecx
c001a5ee:	51                   	push   ecx
c001a5ef:	68 1d e8 01 c0       	push   0xc001e81d
c001a5f4:	ff 35 54 f2 01 c0    	push   DWORD PTR ds:0xc001f254
c001a5fa:	e8 8d d5 fe ff       	call   c0007b8c <VgaText::puts(char const*)>
c001a5ff:	c7 04 24 2d e8 01 c0 	mov    DWORD PTR [esp],0xc001e82d
c001a606:	e8 a1 f2 fe ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c001a60b:	e9 5a ff ff ff       	jmp    c001a56a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ee>
c001a610:	0f ba e0 1e          	bt     eax,0x1e
c001a614:	73 19                	jae    c001a62f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b3>
c001a616:	83 ec 0c             	sub    esp,0xc
c001a619:	68 41 e8 01 c0       	push   0xc001e841
c001a61e:	e8 89 f2 fe ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c001a623:	58                   	pop    eax
c001a624:	5a                   	pop    edx
c001a625:	68 56 e8 01 c0       	push   0xc001e856
c001a62a:	e9 30 ff ff ff       	jmp    c001a55f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c001a62f:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001a634:	74 17                	je     c001a64d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001a636:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001a63b:	74 10                	je     c001a64d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001a63d:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001a643:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001a647:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a64b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a64d:	31 c0                	xor    eax,eax
c001a64f:	83 c4 2c             	add    esp,0x2c
c001a652:	5b                   	pop    ebx
c001a653:	5e                   	pop    esi
c001a654:	5f                   	pop    edi
c001a655:	5d                   	pop    ebp
c001a656:	c3                   	ret    
c001a657:	90                   	nop

c001a658 <SATAPI::eject()>:
c001a658:	57                   	push   edi
c001a659:	b9 03 00 00 00       	mov    ecx,0x3
c001a65e:	83 ec 18             	sub    esp,0x18
c001a661:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a665:	fc                   	cld    
c001a666:	31 c0                	xor    eax,eax
c001a668:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a66a:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a66f:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a674:	50                   	push   eax
c001a675:	6a 00                	push   0x0
c001a677:	6a 00                	push   0x0
c001a679:	6a 00                	push   0x0
c001a67b:	6a 00                	push   0x0
c001a67d:	6a 02                	push   0x2
c001a67f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a683:	50                   	push   eax
c001a684:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a688:	e8 ef fc ff ff       	call   c001a37c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001a68d:	31 c0                	xor    eax,eax
c001a68f:	83 c4 38             	add    esp,0x38
c001a692:	5f                   	pop    edi
c001a693:	c3                   	ret    

c001a694 <SATAPI::read(unsigned long long, int, void*)>:
c001a694:	57                   	push   edi
c001a695:	56                   	push   esi
c001a696:	53                   	push   ebx
c001a697:	83 ec 3c             	sub    esp,0x3c
c001a69a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a69e:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a6a2:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001a6a6:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001a6aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a6ae:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a6b2:	68 69 e8 01 c0       	push   0xc001e869
c001a6b7:	e8 f0 f1 fe ff       	call   c00098ac <Dbg::kprintf(char const*, ...)>
c001a6bc:	83 c4 10             	add    esp,0x10
c001a6bf:	83 fe 04             	cmp    esi,0x4
c001a6c2:	7e 10                	jle    c001a6d4 <SATAPI::read(unsigned long long, int, void*)+0x40>
c001a6c4:	83 ec 0c             	sub    esp,0xc
c001a6c7:	68 7a e8 01 c0       	push   0xc001e87a
c001a6cc:	e8 2a 4d ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c001a6d1:	83 c4 10             	add    esp,0x10
c001a6d4:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a6da:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001a6e0:	51                   	push   ecx
c001a6e1:	50                   	push   eax
c001a6e2:	83 c0 02             	add    eax,0x2
c001a6e5:	c1 e0 07             	shl    eax,0x7
c001a6e8:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001a6ee:	50                   	push   eax
c001a6ef:	52                   	push   edx
c001a6f0:	e8 3b e9 ff ff       	call   c0019030 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001a6f5:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001a6f9:	b9 03 00 00 00       	mov    ecx,0x3
c001a6fe:	fc                   	cld    
c001a6ff:	31 c0                	xor    eax,eax
c001a701:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a703:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001a708:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001a70d:	83 c4 0c             	add    esp,0xc
c001a710:	6a 00                	push   0x0
c001a712:	6a 00                	push   0x0
c001a714:	6a 00                	push   0x0
c001a716:	6a 00                	push   0x0
c001a718:	6a 02                	push   0x2
c001a71a:	8d 44 24 30          	lea    eax,[esp+0x30]
c001a71e:	50                   	push   eax
c001a71f:	53                   	push   ebx
c001a720:	e8 57 fc ff ff       	call   c001a37c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001a725:	83 c4 20             	add    esp,0x20
c001a728:	85 c0                	test   eax,eax
c001a72a:	74 1f                	je     c001a74b <SATAPI::read(unsigned long long, int, void*)+0xb7>
c001a72c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a730:	50                   	push   eax
c001a731:	50                   	push   eax
c001a732:	68 a4 e8 01 c0       	push   0xc001e8a4
c001a737:	ff 35 54 f2 01 c0    	push   DWORD PTR ds:0xc001f254
c001a73d:	e8 4a d4 fe ff       	call   c0007b8c <VgaText::puts(char const*)>
c001a742:	58                   	pop    eax
c001a743:	5a                   	pop    edx
c001a744:	68 ac e8 01 c0       	push   0xc001e8ac
c001a749:	eb 61                	jmp    c001a7ac <SATAPI::read(unsigned long long, int, void*)+0x118>
c001a74b:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001a74f:	b9 03 00 00 00       	mov    ecx,0x3
c001a754:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a756:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a75a:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001a75f:	0f c8                	bswap  eax
c001a761:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001a765:	89 f0                	mov    eax,esi
c001a767:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001a76b:	57                   	push   edi
c001a76c:	56                   	push   esi
c001a76d:	c1 e6 0b             	shl    esi,0xb
c001a770:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a774:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a778:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a77c:	56                   	push   esi
c001a77d:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001a781:	50                   	push   eax
c001a782:	53                   	push   ebx
c001a783:	e8 f4 fb ff ff       	call   c001a37c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001a788:	83 c4 20             	add    esp,0x20
c001a78b:	85 c0                	test   eax,eax
c001a78d:	74 2f                	je     c001a7be <SATAPI::read(unsigned long long, int, void*)+0x12a>
c001a78f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a793:	50                   	push   eax
c001a794:	50                   	push   eax
c001a795:	68 b6 e8 01 c0       	push   0xc001e8b6
c001a79a:	ff 35 54 f2 01 c0    	push   DWORD PTR ds:0xc001f254
c001a7a0:	e8 e7 d3 fe ff       	call   c0007b8c <VgaText::puts(char const*)>
c001a7a5:	5a                   	pop    edx
c001a7a6:	59                   	pop    ecx
c001a7a7:	68 be e8 01 c0       	push   0xc001e8be
c001a7ac:	ff 35 54 f2 01 c0    	push   DWORD PTR ds:0xc001f254
c001a7b2:	e8 d5 d3 fe ff       	call   c0007b8c <VgaText::puts(char const*)>
c001a7b7:	83 c4 10             	add    esp,0x10
c001a7ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7be:	83 c4 30             	add    esp,0x30
c001a7c1:	5b                   	pop    ebx
c001a7c2:	5e                   	pop    esi
c001a7c3:	5f                   	pop    edi
c001a7c4:	c3                   	ret    
c001a7c5:	90                   	nop

c001a7c6 <SATAPI::detectMedia()>:
c001a7c6:	c3                   	ret    
c001a7c7:	90                   	nop

c001a7c8 <IOAPIC::close(int, int, void*)>:
c001a7c8:	b8 00 00 00 00       	mov    eax,0x0
c001a7cd:	c3                   	ret    

c001a7ce <apicGetBase()>:
c001a7ce:	55                   	push   ebp
c001a7cf:	89 e5                	mov    ebp,esp
c001a7d1:	83 ec 18             	sub    esp,0x18
c001a7d4:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c001a7d9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001a7df:	83 e0 08             	and    eax,0x8
c001a7e2:	84 c0                	test   al,al
c001a7e4:	75 07                	jne    c001a7ed <apicGetBase()+0x1f>
c001a7e6:	b8 00 00 00 00       	mov    eax,0x0
c001a7eb:	eb 21                	jmp    c001a80e <apicGetBase()+0x40>
c001a7ed:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c001a7f2:	83 ec 08             	sub    esp,0x8
c001a7f5:	6a 1b                	push   0x1b
c001a7f7:	50                   	push   eax
c001a7f8:	e8 5d b9 fe ff       	call   c000615a <Computer::rdmsr(unsigned int)>
c001a7fd:	83 c4 10             	add    esp,0x10
c001a800:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001a803:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001a806:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001a809:	25 00 00 ff ff       	and    eax,0xffff0000
c001a80e:	c9                   	leave  
c001a80f:	c3                   	ret    

c001a810 <IOAPIC::IOAPIC()>:
c001a810:	83 ec 0c             	sub    esp,0xc
c001a813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a817:	83 ec 08             	sub    esp,0x8
c001a81a:	68 00 e9 01 c0       	push   0xc001e900
c001a81f:	50                   	push   eax
c001a820:	e8 5f 06 ff ff       	call   c000ae84 <Device::Device(char const*)>
c001a825:	83 c4 10             	add    esp,0x10
c001a828:	ba 10 e9 01 c0       	mov    edx,0xc001e910
c001a82d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a831:	89 10                	mov    DWORD PTR [eax],edx
c001a833:	90                   	nop
c001a834:	83 c4 0c             	add    esp,0xc
c001a837:	c3                   	ret    

c001a838 <apicOpen()>:
c001a838:	55                   	push   ebp
c001a839:	89 e5                	mov    ebp,esp
c001a83b:	53                   	push   ebx
c001a83c:	83 ec 34             	sub    esp,0x34
c001a83f:	a0 00 31 02 c0       	mov    al,ds:0xc0023100
c001a844:	83 f0 01             	xor    eax,0x1
c001a847:	84 c0                	test   al,al
c001a849:	0f 84 9d 00 00 00    	je     c001a8ec <apicOpen()+0xb4>
c001a84f:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001a853:	a0 c0 1a 02 c0       	mov    al,ds:0xc0021ac0
c001a858:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001a85b:	0f 83 84 00 00 00    	jae    c001a8e5 <apicOpen()+0xad>
c001a861:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001a868:	83 ec 0c             	sub    esp,0xc
c001a86b:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001a86e:	e8 aa c2 fe ff       	call   c0006b1d <malloc>
c001a873:	83 c4 10             	add    esp,0x10
c001a876:	89 c3                	mov    ebx,eax
c001a878:	83 ec 0c             	sub    esp,0xc
c001a87b:	53                   	push   ebx
c001a87c:	e8 8f ff ff ff       	call   c001a810 <IOAPIC::IOAPIC()>
c001a881:	83 c4 10             	add    esp,0x10
c001a884:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001a887:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001a88a:	25 ff 00 00 00       	and    eax,0xff
c001a88f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001a892:	89 14 85 e0 30 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcf20],edx
c001a899:	a1 c0 30 02 c0       	mov    eax,ds:0xc00230c0
c001a89e:	40                   	inc    eax
c001a89f:	a3 c0 30 02 c0       	mov    ds:0xc00230c0,eax
c001a8a4:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c001a8a9:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001a8af:	83 ec 08             	sub    esp,0x8
c001a8b2:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001a8b5:	50                   	push   eax
c001a8b6:	e8 31 04 ff ff       	call   c000acec <Device::addChild(Device*)>
c001a8bb:	83 c4 10             	add    esp,0x10
c001a8be:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001a8c1:	8b 00                	mov    eax,DWORD PTR [eax]
c001a8c3:	83 c0 08             	add    eax,0x8
c001a8c6:	8b 10                	mov    edx,DWORD PTR [eax]
c001a8c8:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001a8cb:	25 ff 00 00 00       	and    eax,0xff
c001a8d0:	6a 00                	push   0x0
c001a8d2:	6a 00                	push   0x0
c001a8d4:	50                   	push   eax
c001a8d5:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001a8d8:	ff d2                	call   edx
c001a8da:	83 c4 10             	add    esp,0x10
c001a8dd:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001a8e0:	e9 6e ff ff ff       	jmp    c001a853 <apicOpen()+0x1b>
c001a8e5:	c6 05 00 31 02 c0 01 	mov    BYTE PTR ds:0xc0023100,0x1
c001a8ec:	e8 dd fe ff ff       	call   c001a7ce <apicGetBase()>
c001a8f1:	05 f0 00 00 00       	add    eax,0xf0
c001a8f6:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001a8f9:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001a8fc:	8b 00                	mov    eax,DWORD PTR [eax]
c001a8fe:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001a901:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001a908:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001a90f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001a912:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001a915:	89 10                	mov    DWORD PTR [eax],edx
c001a917:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001a91e:	a1 10 1a 02 c0       	mov    eax,ds:0xc0021a10
c001a923:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001a926:	7d 70                	jge    c001a998 <apicOpen()+0x160>
c001a928:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001a92b:	8b 04 85 20 1a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde5e0]
c001a932:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001a935:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001a938:	8b 04 85 20 1a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde5e0]
c001a93f:	c1 e8 08             	shr    eax,0x8
c001a942:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001a946:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001a949:	8b 04 85 20 1a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde5e0]
c001a950:	c1 e8 18             	shr    eax,0x18
c001a953:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001a956:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001a95a:	75 37                	jne    c001a993 <apicOpen()+0x15b>
c001a95c:	e8 6d fe ff ff       	call   c001a7ce <apicGetBase()>
c001a961:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001a965:	75 07                	jne    c001a96e <apicOpen()+0x136>
c001a967:	ba 60 03 00 00       	mov    edx,0x360
c001a96c:	eb 05                	jmp    c001a973 <apicOpen()+0x13b>
c001a96e:	ba 50 03 00 00       	mov    edx,0x350
c001a973:	01 d0                	add    eax,edx
c001a975:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001a978:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001a97b:	8b 00                	mov    eax,DWORD PTR [eax]
c001a97d:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001a980:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001a987:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001a98b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001a98e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001a991:	89 10                	mov    DWORD PTR [eax],edx
c001a993:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001a996:	eb 86                	jmp    c001a91e <apicOpen()+0xe6>
c001a998:	90                   	nop
c001a999:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001a99c:	c9                   	leave  
c001a99d:	c3                   	ret    

c001a99e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001a99e:	55                   	push   ebp
c001a99f:	89 e5                	mov    ebp,esp
c001a9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a9a4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001a9aa:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001a9ad:	72 1d                	jb     c001a9cc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001a9af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a9b2:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001a9b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a9bb:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001a9c1:	01 d0                	add    eax,edx
c001a9c3:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001a9c6:	73 04                	jae    c001a9cc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001a9c8:	b0 01                	mov    al,0x1
c001a9ca:	eb 02                	jmp    c001a9ce <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001a9cc:	b0 00                	mov    al,0x0
c001a9ce:	5d                   	pop    ebp
c001a9cf:	c3                   	ret    

c001a9d0 <IOAPIC::read(int)>:
c001a9d0:	55                   	push   ebp
c001a9d1:	89 e5                	mov    ebp,esp
c001a9d3:	83 ec 10             	sub    esp,0x10
c001a9d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a9d9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a9df:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001a9e2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001a9e5:	31 d2                	xor    edx,edx
c001a9e7:	88 c2                	mov    dl,al
c001a9e9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001a9ec:	89 10                	mov    DWORD PTR [eax],edx
c001a9ee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001a9f1:	83 c0 10             	add    eax,0x10
c001a9f4:	8b 00                	mov    eax,DWORD PTR [eax]
c001a9f6:	c9                   	leave  
c001a9f7:	c3                   	ret    

c001a9f8 <IOAPIC::open(int, int, void*)>:
c001a9f8:	55                   	push   ebp
c001a9f9:	89 e5                	mov    ebp,esp
c001a9fb:	57                   	push   edi
c001a9fc:	56                   	push   esi
c001a9fd:	53                   	push   ebx
c001a9fe:	83 ec 04             	sub    esp,0x4
c001aa01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001aa04:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001aa07:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001aa0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001aa10:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001aa16:	8b 14 85 00 1b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffde500]
c001aa1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001aa20:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001aa26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001aa29:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001aa2f:	8b 14 85 80 1b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffde480]
c001aa36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001aa39:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001aa3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001aa42:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001aa48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001aa4b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001aa51:	89 c6                	mov    esi,eax
c001aa53:	81 e6 ff 00 00 00    	and    esi,0xff
c001aa59:	89 d0                	mov    eax,edx
c001aa5b:	ba 00 00 00 00       	mov    edx,0x0
c001aa60:	89 c7                	mov    edi,eax
c001aa62:	83 e7 ff             	and    edi,0xffffffff
c001aa65:	89 f9                	mov    ecx,edi
c001aa67:	89 d0                	mov    eax,edx
c001aa69:	25 ff 00 00 00       	and    eax,0xff
c001aa6e:	89 c3                	mov    ebx,eax
c001aa70:	89 c8                	mov    eax,ecx
c001aa72:	89 da                	mov    edx,ebx
c001aa74:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001aa77:	8d 5e 08             	lea    ebx,[esi+0x8]
c001aa7a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001aa7e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001aa82:	83 e0 00             	and    eax,0x0
c001aa85:	09 d0                	or     eax,edx
c001aa87:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001aa8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001aa8e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001aa94:	8d 50 01             	lea    edx,[eax+0x1]
c001aa97:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001aa9a:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001aaa0:	31 d2                	xor    edx,edx
c001aaa2:	88 c2                	mov    dl,al
c001aaa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001aaa7:	83 c2 08             	add    edx,0x8
c001aaaa:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001aaae:	81 e1 ff 00 00 00    	and    ecx,0xff
c001aab4:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001aaba:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001aabe:	6a 01                	push   0x1
c001aac0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001aac3:	e8 08 ff ff ff       	call   c001a9d0 <IOAPIC::read(int)>
c001aac8:	83 c4 08             	add    esp,0x8
c001aacb:	c1 f8 10             	sar    eax,0x10
c001aace:	25 ff 00 00 00       	and    eax,0xff
c001aad3:	8d 50 01             	lea    edx,[eax+0x1]
c001aad6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001aad9:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001aadf:	b8 00 00 00 00       	mov    eax,0x0
c001aae4:	8d 65 f4             	lea    esp,[ebp-0xc]
c001aae7:	5b                   	pop    ebx
c001aae8:	5e                   	pop    esi
c001aae9:	5f                   	pop    edi
c001aaea:	5d                   	pop    ebp
c001aaeb:	c3                   	ret    

c001aaec <IOAPIC::write(int, int)>:
c001aaec:	55                   	push   ebp
c001aaed:	89 e5                	mov    ebp,esp
c001aaef:	83 ec 10             	sub    esp,0x10
c001aaf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001aaf5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001aafb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001aafe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ab01:	31 d2                	xor    edx,edx
c001ab03:	88 c2                	mov    dl,al
c001ab05:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ab08:	89 10                	mov    DWORD PTR [eax],edx
c001ab0a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ab0d:	8d 50 10             	lea    edx,[eax+0x10]
c001ab10:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ab13:	89 02                	mov    DWORD PTR [edx],eax
c001ab15:	90                   	nop
c001ab16:	c9                   	leave  
c001ab17:	c3                   	ret    

c001ab18 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001ab18:	55                   	push   ebp
c001ab19:	89 e5                	mov    ebp,esp
c001ab1b:	53                   	push   ebx
c001ab1c:	83 ec 2c             	sub    esp,0x2c
c001ab1f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ab22:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001ab25:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001ab28:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001ab2b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001ab2e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ab31:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ab34:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001ab37:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001ab3a:	88 d8                	mov    al,bl
c001ab3c:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001ab3f:	88 c8                	mov    al,cl
c001ab41:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001ab44:	88 d0                	mov    al,dl
c001ab46:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001ab49:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001ab4c:	25 ff 00 00 00       	and    eax,0xff
c001ab51:	83 c0 08             	add    eax,0x8
c001ab54:	01 c0                	add    eax,eax
c001ab56:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ab59:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001ab5c:	25 ff 00 00 00       	and    eax,0xff
c001ab61:	83 c0 08             	add    eax,0x8
c001ab64:	01 c0                	add    eax,eax
c001ab66:	40                   	inc    eax
c001ab67:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001ab6a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ab6d:	50                   	push   eax
c001ab6e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ab71:	e8 5a fe ff ff       	call   c001a9d0 <IOAPIC::read(int)>
c001ab76:	83 c4 08             	add    esp,0x8
c001ab79:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ab7c:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001ab83:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ab86:	c1 e0 18             	shl    eax,0x18
c001ab89:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001ab8c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ab8f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ab92:	52                   	push   edx
c001ab93:	50                   	push   eax
c001ab94:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ab97:	e8 50 ff ff ff       	call   c001aaec <IOAPIC::write(int, int)>
c001ab9c:	83 c4 0c             	add    esp,0xc
c001ab9f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001aba2:	50                   	push   eax
c001aba3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001aba6:	e8 25 fe ff ff       	call   c001a9d0 <IOAPIC::read(int)>
c001abab:	83 c4 08             	add    esp,0x8
c001abae:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001abb1:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001abb8:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001abbf:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001abc6:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001abca:	74 09                	je     c001abd5 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001abcc:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001abd3:	eb 07                	jmp    c001abdc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001abd5:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001abdc:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001abe0:	74 09                	je     c001abeb <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001abe2:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001abe9:	eb 07                	jmp    c001abf2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001abeb:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001abf2:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001abf9:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001abfc:	25 ff 00 00 00       	and    eax,0xff
c001ac01:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001ac04:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001ac07:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ac0a:	52                   	push   edx
c001ac0b:	50                   	push   eax
c001ac0c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ac0f:	e8 d8 fe ff ff       	call   c001aaec <IOAPIC::write(int, int)>
c001ac14:	83 c4 0c             	add    esp,0xc
c001ac17:	90                   	nop
c001ac18:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ac1b:	c9                   	leave  
c001ac1c:	c3                   	ret    
c001ac1d:	66 90                	xchg   ax,ax
c001ac1f:	90                   	nop

c001ac20 <APICTimer::close(int, int, void*)>:
c001ac20:	b8 00 00 00 00       	mov    eax,0x0
c001ac25:	c3                   	ret    
c001ac26:	66 90                	xchg   ax,ax

c001ac28 <apicTimerHandler(regs*, void*)>:
c001ac28:	83 ec 0c             	sub    esp,0xc
c001ac2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ac2f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ac31:	b8 10 27 00 00       	mov    eax,0x2710
c001ac36:	ba 00 00 00 00       	mov    edx,0x0
c001ac3b:	f7 f1                	div    ecx
c001ac3d:	83 ec 0c             	sub    esp,0xc
c001ac40:	50                   	push   eax
c001ac41:	e8 3a 19 ff ff       	call   c000c580 <timerHandler(unsigned int)>
c001ac46:	83 c4 10             	add    esp,0x10
c001ac49:	90                   	nop
c001ac4a:	83 c4 0c             	add    esp,0xc
c001ac4d:	c3                   	ret    
c001ac4e:	66 90                	xchg   ax,ax

c001ac50 <APICTimer::open(int, int, void*)>:
c001ac50:	83 ec 0c             	sub    esp,0xc
c001ac53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac57:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac59:	83 c0 24             	add    eax,0x24
c001ac5c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac5e:	83 ec 08             	sub    esp,0x8
c001ac61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac69:	ff d0                	call   eax
c001ac6b:	83 c4 10             	add    esp,0x10
c001ac6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac72:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ac76:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ac7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac80:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ac84:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ac8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ac8e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ac94:	83 ec 0c             	sub    esp,0xc
c001ac97:	51                   	push   ecx
c001ac98:	6a 01                	push   0x1
c001ac9a:	68 28 ac 01 c0       	push   0xc001ac28
c001ac9f:	52                   	push   edx
c001aca0:	50                   	push   eax
c001aca1:	e8 f2 ff fe ff       	call   c000ac98 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001aca6:	83 c4 20             	add    esp,0x20
c001aca9:	89 c2                	mov    edx,eax
c001acab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acaf:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001acb5:	b8 00 00 00 00       	mov    eax,0x0
c001acba:	83 c4 0c             	add    esp,0xc
c001acbd:	c3                   	ret    
c001acbe:	66 90                	xchg   ax,ax

c001acc0 <APICTimer::write(int)>:
c001acc0:	83 ec 0c             	sub    esp,0xc
c001acc3:	83 ec 0c             	sub    esp,0xc
c001acc6:	68 34 e9 01 c0       	push   0xc001e934
c001accb:	e8 2b 47 ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c001acd0:	83 c4 10             	add    esp,0x10
c001acd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acd7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001acdb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ace1:	90                   	nop
c001ace2:	83 c4 0c             	add    esp,0xc
c001ace5:	c3                   	ret    
c001ace6:	66 90                	xchg   ax,ax

c001ace8 <APICTimer::APICTimer()>:
c001ace8:	83 ec 0c             	sub    esp,0xc
c001aceb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acef:	83 ec 08             	sub    esp,0x8
c001acf2:	68 44 e9 01 c0       	push   0xc001e944
c001acf7:	50                   	push   eax
c001acf8:	e8 b7 17 ff ff       	call   c000c4b4 <Timer::Timer(char const*)>
c001acfd:	83 c4 10             	add    esp,0x10
c001ad00:	ba 58 e9 01 c0       	mov    edx,0xc001e958
c001ad05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad09:	89 10                	mov    DWORD PTR [eax],edx
c001ad0b:	90                   	nop
c001ad0c:	83 c4 0c             	add    esp,0xc
c001ad0f:	c3                   	ret    

c001ad10 <PIT::write(int)>:
c001ad10:	83 ec 10             	sub    esp,0x10
c001ad13:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad17:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ad1b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ad21:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad25:	a3 04 31 02 c0       	mov    ds:0xc0023104,eax
c001ad2a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ad2f:	99                   	cdq    
c001ad30:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ad34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad38:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ad3f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ad44:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ad48:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ad4d:	ee                   	out    dx,al
c001ad4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad52:	25 ff 00 00 00       	and    eax,0xff
c001ad57:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ad5e:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ad62:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ad66:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ad6b:	ee                   	out    dx,al
c001ad6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad70:	c1 f8 08             	sar    eax,0x8
c001ad73:	25 ff 00 00 00       	and    eax,0xff
c001ad78:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ad7f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ad83:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ad87:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ad8c:	ee                   	out    dx,al
c001ad8d:	90                   	nop
c001ad8e:	83 c4 10             	add    esp,0x10
c001ad91:	c3                   	ret    
c001ad92:	66 90                	xchg   ax,ax

c001ad94 <pitHandler(regs*, void*)>:
c001ad94:	83 ec 0c             	sub    esp,0xc
c001ad97:	8b 0d 04 31 02 c0    	mov    ecx,DWORD PTR ds:0xc0023104
c001ad9d:	b8 10 27 00 00       	mov    eax,0x2710
c001ada2:	99                   	cdq    
c001ada3:	f7 f9                	idiv   ecx
c001ada5:	83 ec 0c             	sub    esp,0xc
c001ada8:	50                   	push   eax
c001ada9:	e8 d2 17 ff ff       	call   c000c580 <timerHandler(unsigned int)>
c001adae:	83 c4 10             	add    esp,0x10
c001adb1:	90                   	nop
c001adb2:	83 c4 0c             	add    esp,0xc
c001adb5:	c3                   	ret    
c001adb6:	66 90                	xchg   ax,ax

c001adb8 <PIT::open(int, int, void*)>:
c001adb8:	83 ec 0c             	sub    esp,0xc
c001adbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adbf:	8b 00                	mov    eax,DWORD PTR [eax]
c001adc1:	83 c0 24             	add    eax,0x24
c001adc4:	8b 00                	mov    eax,DWORD PTR [eax]
c001adc6:	83 ec 08             	sub    esp,0x8
c001adc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001adcd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001add1:	ff d0                	call   eax
c001add3:	83 c4 10             	add    esp,0x10
c001add6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adda:	83 ec 0c             	sub    esp,0xc
c001addd:	6a 00                	push   0x0
c001addf:	6a 01                	push   0x1
c001ade1:	68 94 ad 01 c0       	push   0xc001ad94
c001ade6:	6a 00                	push   0x0
c001ade8:	50                   	push   eax
c001ade9:	e8 aa fe fe ff       	call   c000ac98 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001adee:	83 c4 20             	add    esp,0x20
c001adf1:	89 c2                	mov    edx,eax
c001adf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adf7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001adfd:	b8 00 00 00 00       	mov    eax,0x0
c001ae02:	83 c4 0c             	add    esp,0xc
c001ae05:	c3                   	ret    
c001ae06:	66 90                	xchg   ax,ax

c001ae08 <PIT::close(int, int, void*)>:
c001ae08:	83 ec 0c             	sub    esp,0xc
c001ae0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae0f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ae19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae1d:	6a 01                	push   0x1
c001ae1f:	68 94 ad 01 c0       	push   0xc001ad94
c001ae24:	6a 00                	push   0x0
c001ae26:	50                   	push   eax
c001ae27:	e8 a2 fe fe ff       	call   c000acce <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ae2c:	83 c4 10             	add    esp,0x10
c001ae2f:	b8 00 00 00 00       	mov    eax,0x0
c001ae34:	83 c4 0c             	add    esp,0xc
c001ae37:	c3                   	ret    

c001ae38 <PIT::PIT()>:
c001ae38:	83 ec 0c             	sub    esp,0xc
c001ae3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae3f:	83 ec 08             	sub    esp,0x8
c001ae42:	68 80 e9 01 c0       	push   0xc001e980
c001ae47:	50                   	push   eax
c001ae48:	e8 67 16 ff ff       	call   c000c4b4 <Timer::Timer(char const*)>
c001ae4d:	83 c4 10             	add    esp,0x10
c001ae50:	ba a8 e9 01 c0       	mov    edx,0xc001e9a8
c001ae55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae59:	89 10                	mov    DWORD PTR [eax],edx
c001ae5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae5f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ae65:	31 d2                	xor    edx,edx
c001ae67:	88 c2                	mov    dl,al
c001ae69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae6d:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001ae74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae78:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ae7e:	31 d2                	xor    edx,edx
c001ae80:	88 c2                	mov    dl,al
c001ae82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae86:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001ae8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae8f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ae95:	8d 50 01             	lea    edx,[eax+0x1]
c001ae98:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ae9c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001aea2:	31 d2                	xor    edx,edx
c001aea4:	88 c2                	mov    dl,al
c001aea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeaa:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001aeae:	83 e1 3f             	and    ecx,0x3f
c001aeb1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001aeb5:	90                   	nop
c001aeb6:	83 c4 0c             	add    esp,0xc
c001aeb9:	c3                   	ret    
c001aeba:	66 90                	xchg   ax,ax
c001aebc:	66 90                	xchg   ax,ax
c001aebe:	66 90                	xchg   ax,ax

c001aec0 <avxDetect>:
c001aec0:	b8 01 00 00 00       	mov    eax,0x1
c001aec5:	0f a2                	cpuid  
c001aec7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001aecd:	74 15                	je     c001aee4 <avxDetect.noAVX>
c001aecf:	b8 01 00 00 00       	mov    eax,0x1
c001aed4:	0f a2                	cpuid  
c001aed6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001aedc:	74 06                	je     c001aee4 <avxDetect.noAVX>
c001aede:	b8 01 00 00 00       	mov    eax,0x1
c001aee3:	c3                   	ret    

c001aee4 <avxDetect.noAVX>:
c001aee4:	b8 00 00 00 00       	mov    eax,0x0
c001aee9:	c3                   	ret    

c001aeea <avxSave>:
c001aeea:	53                   	push   ebx
c001aeeb:	52                   	push   edx
c001aeec:	31 c0                	xor    eax,eax
c001aeee:	48                   	dec    eax
c001aeef:	89 c2                	mov    edx,eax
c001aef1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001aef5:	0f ae 23             	xsave  [ebx]
c001aef8:	5a                   	pop    edx
c001aef9:	5b                   	pop    ebx
c001aefa:	c3                   	ret    

c001aefb <avxLoad>:
c001aefb:	53                   	push   ebx
c001aefc:	52                   	push   edx
c001aefd:	31 c0                	xor    eax,eax
c001aeff:	48                   	dec    eax
c001af00:	89 c2                	mov    edx,eax
c001af02:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001af06:	0f ae 2b             	xrstor [ebx]
c001af09:	5a                   	pop    edx
c001af0a:	5b                   	pop    ebx
c001af0b:	c3                   	ret    

c001af0c <avxInit>:
c001af0c:	e8 57 02 00 00       	call   c001b168 <sseInit>
c001af11:	50                   	push   eax
c001af12:	51                   	push   ecx
c001af13:	0f 20 e0             	mov    eax,cr4
c001af16:	0d 00 00 04 00       	or     eax,0x40000
c001af1b:	0f 22 e0             	mov    cr4,eax
c001af1e:	31 c9                	xor    ecx,ecx
c001af20:	0f 01 d0             	xgetbv 
c001af23:	0d 07 00 00 00       	or     eax,0x7
c001af28:	0f 01 d1             	xsetbv 
c001af2b:	59                   	pop    ecx
c001af2c:	58                   	pop    eax
c001af2d:	c3                   	ret    

c001af2e <avxClose>:
c001af2e:	c3                   	ret    

c001af2f <wouldSheSayYes>:
c001af2f:	c3                   	ret    
c001af30:	49                   	dec    ecx
c001af31:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001af35:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001af39:	75 20                	jne    c001af5b <isr0+0xb>
c001af3b:	4e                   	dec    esi
c001af3c:	79 61                	jns    c001af9f <isr7+0x3>
c001af3e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001af43:	66 90                	xchg   ax,ax
c001af45:	66 90                	xchg   ax,ax
c001af47:	66 90                	xchg   ax,ax
c001af49:	66 90                	xchg   ax,ax
c001af4b:	66 90                	xchg   ax,ax
c001af4d:	66 90                	xchg   ax,ax
c001af4f:	90                   	nop

c001af50 <isr0>:
c001af50:	fa                   	cli    
c001af51:	68 00 00 00 00       	push   0x0
c001af56:	68 00 00 00 00       	push   0x0
c001af5b:	e9 44 01 00 00       	jmp    c001b0a4 <int_common_stub>

c001af60 <isr1>:
c001af60:	fa                   	cli    
c001af61:	6a 00                	push   0x0
c001af63:	6a 01                	push   0x1
c001af65:	e9 3a 01 00 00       	jmp    c001b0a4 <int_common_stub>

c001af6a <isr2>:
c001af6a:	fa                   	cli    
c001af6b:	6a 00                	push   0x0
c001af6d:	6a 02                	push   0x2
c001af6f:	e9 30 01 00 00       	jmp    c001b0a4 <int_common_stub>

c001af74 <isr3>:
c001af74:	fa                   	cli    
c001af75:	6a 00                	push   0x0
c001af77:	6a 03                	push   0x3
c001af79:	e9 26 01 00 00       	jmp    c001b0a4 <int_common_stub>

c001af7e <isr4>:
c001af7e:	fa                   	cli    
c001af7f:	6a 00                	push   0x0
c001af81:	6a 04                	push   0x4
c001af83:	e9 1c 01 00 00       	jmp    c001b0a4 <int_common_stub>

c001af88 <isr5>:
c001af88:	fa                   	cli    
c001af89:	6a 00                	push   0x0
c001af8b:	6a 05                	push   0x5
c001af8d:	e9 12 01 00 00       	jmp    c001b0a4 <int_common_stub>

c001af92 <isr6>:
c001af92:	fa                   	cli    
c001af93:	6a 00                	push   0x0
c001af95:	6a 06                	push   0x6
c001af97:	e9 08 01 00 00       	jmp    c001b0a4 <int_common_stub>

c001af9c <isr7>:
c001af9c:	fa                   	cli    
c001af9d:	6a 00                	push   0x0
c001af9f:	6a 07                	push   0x7
c001afa1:	e9 fe 00 00 00       	jmp    c001b0a4 <int_common_stub>

c001afa6 <isr8>:
c001afa6:	fa                   	cli    
c001afa7:	6a 08                	push   0x8
c001afa9:	e9 f6 00 00 00       	jmp    c001b0a4 <int_common_stub>

c001afae <isr9>:
c001afae:	fa                   	cli    
c001afaf:	6a 00                	push   0x0
c001afb1:	6a 09                	push   0x9
c001afb3:	e9 ec 00 00 00       	jmp    c001b0a4 <int_common_stub>

c001afb8 <isr10>:
c001afb8:	fa                   	cli    
c001afb9:	6a 0a                	push   0xa
c001afbb:	e9 e4 00 00 00       	jmp    c001b0a4 <int_common_stub>

c001afc0 <isr11>:
c001afc0:	fa                   	cli    
c001afc1:	6a 0b                	push   0xb
c001afc3:	e9 dc 00 00 00       	jmp    c001b0a4 <int_common_stub>

c001afc8 <isr12>:
c001afc8:	fa                   	cli    
c001afc9:	6a 0c                	push   0xc
c001afcb:	e9 d4 00 00 00       	jmp    c001b0a4 <int_common_stub>

c001afd0 <isr13>:
c001afd0:	fa                   	cli    
c001afd1:	6a 0d                	push   0xd
c001afd3:	e9 cc 00 00 00       	jmp    c001b0a4 <int_common_stub>

c001afd8 <isr14>:
c001afd8:	fa                   	cli    
c001afd9:	6a 0e                	push   0xe
c001afdb:	e9 c4 00 00 00       	jmp    c001b0a4 <int_common_stub>

c001afe0 <isr15>:
c001afe0:	fa                   	cli    
c001afe1:	6a 00                	push   0x0
c001afe3:	6a 0f                	push   0xf
c001afe5:	e9 ba 00 00 00       	jmp    c001b0a4 <int_common_stub>

c001afea <isr16>:
c001afea:	fa                   	cli    
c001afeb:	6a 00                	push   0x0
c001afed:	6a 10                	push   0x10
c001afef:	e9 b0 00 00 00       	jmp    c001b0a4 <int_common_stub>

c001aff4 <isr17>:
c001aff4:	fa                   	cli    
c001aff5:	6a 00                	push   0x0
c001aff7:	6a 11                	push   0x11
c001aff9:	e9 a6 00 00 00       	jmp    c001b0a4 <int_common_stub>

c001affe <isr18>:
c001affe:	fa                   	cli    
c001afff:	6a 00                	push   0x0
c001b001:	6a 12                	push   0x12
c001b003:	e9 9c 00 00 00       	jmp    c001b0a4 <int_common_stub>

c001b008 <irq3>:
c001b008:	fa                   	cli    
c001b009:	6a 00                	push   0x0
c001b00b:	6a 23                	push   0x23
c001b00d:	e9 92 00 00 00       	jmp    c001b0a4 <int_common_stub>

c001b012 <irq4>:
c001b012:	fa                   	cli    
c001b013:	6a 00                	push   0x0
c001b015:	6a 24                	push   0x24
c001b017:	e9 88 00 00 00       	jmp    c001b0a4 <int_common_stub>

c001b01c <irq5>:
c001b01c:	fa                   	cli    
c001b01d:	6a 00                	push   0x0
c001b01f:	6a 25                	push   0x25
c001b021:	e9 7e 00 00 00       	jmp    c001b0a4 <int_common_stub>

c001b026 <irq6>:
c001b026:	fa                   	cli    
c001b027:	6a 00                	push   0x0
c001b029:	6a 26                	push   0x26
c001b02b:	e9 74 00 00 00       	jmp    c001b0a4 <int_common_stub>

c001b030 <irq7>:
c001b030:	fa                   	cli    
c001b031:	6a 00                	push   0x0
c001b033:	6a 27                	push   0x27
c001b035:	e9 6a 00 00 00       	jmp    c001b0a4 <int_common_stub>

c001b03a <irq8>:
c001b03a:	fa                   	cli    
c001b03b:	6a 00                	push   0x0
c001b03d:	6a 28                	push   0x28
c001b03f:	e9 60 00 00 00       	jmp    c001b0a4 <int_common_stub>

c001b044 <irq9>:
c001b044:	fa                   	cli    
c001b045:	6a 00                	push   0x0
c001b047:	6a 29                	push   0x29
c001b049:	e9 56 00 00 00       	jmp    c001b0a4 <int_common_stub>

c001b04e <irq10>:
c001b04e:	fa                   	cli    
c001b04f:	6a 00                	push   0x0
c001b051:	6a 2a                	push   0x2a
c001b053:	e9 4c 00 00 00       	jmp    c001b0a4 <int_common_stub>

c001b058 <irq11>:
c001b058:	fa                   	cli    
c001b059:	6a 00                	push   0x0
c001b05b:	6a 2b                	push   0x2b
c001b05d:	e9 42 00 00 00       	jmp    c001b0a4 <int_common_stub>

c001b062 <irq12>:
c001b062:	fa                   	cli    
c001b063:	6a 00                	push   0x0
c001b065:	6a 2c                	push   0x2c
c001b067:	e9 38 00 00 00       	jmp    c001b0a4 <int_common_stub>

c001b06c <irq13>:
c001b06c:	fa                   	cli    
c001b06d:	6a 00                	push   0x0
c001b06f:	6a 2d                	push   0x2d
c001b071:	e9 2e 00 00 00       	jmp    c001b0a4 <int_common_stub>

c001b076 <irq14>:
c001b076:	fa                   	cli    
c001b077:	6a 00                	push   0x0
c001b079:	6a 2e                	push   0x2e
c001b07b:	e9 24 00 00 00       	jmp    c001b0a4 <int_common_stub>

c001b080 <irq15>:
c001b080:	fa                   	cli    
c001b081:	6a 00                	push   0x0
c001b083:	6a 2f                	push   0x2f
c001b085:	e9 1a 00 00 00       	jmp    c001b0a4 <int_common_stub>

c001b08a <irq1>:
c001b08a:	fa                   	cli    
c001b08b:	6a 00                	push   0x0
c001b08d:	6a 21                	push   0x21
c001b08f:	eb 13                	jmp    c001b0a4 <int_common_stub>

c001b091 <irq2>:
c001b091:	fa                   	cli    
c001b092:	6a 00                	push   0x0
c001b094:	6a 22                	push   0x22
c001b096:	eb 0c                	jmp    c001b0a4 <int_common_stub>

c001b098 <isr96>:
c001b098:	6a 00                	push   0x0
c001b09a:	6a 60                	push   0x60
c001b09c:	fb                   	sti    
c001b09d:	eb 05                	jmp    c001b0a4 <int_common_stub>

c001b09f <irq0>:
c001b09f:	fa                   	cli    
c001b0a0:	6a 00                	push   0x0
c001b0a2:	6a 20                	push   0x20

c001b0a4 <int_common_stub>:
c001b0a4:	60                   	pusha  
c001b0a5:	1e                   	push   ds
c001b0a6:	06                   	push   es
c001b0a7:	0f a0                	push   fs
c001b0a9:	0f a8                	push   gs
c001b0ab:	66 b8 10 00          	mov    ax,0x10
c001b0af:	66 8e d8             	mov    ds,ax
c001b0b2:	66 8e c0             	mov    es,ax
c001b0b5:	66 8e e0             	mov    fs,ax
c001b0b8:	66 8e e8             	mov    gs,ax
c001b0bb:	54                   	push   esp
c001b0bc:	fc                   	cld    
c001b0bd:	e8 d6 00 ff ff       	call   c000b198 <int_handler>
c001b0c2:	81 c4 04 00 00 00    	add    esp,0x4
c001b0c8:	0f a9                	pop    gs
c001b0ca:	0f a1                	pop    fs
c001b0cc:	07                   	pop    es
c001b0cd:	1f                   	pop    ds
c001b0ce:	61                   	popa   
c001b0cf:	81 c4 08 00 00 00    	add    esp,0x8
c001b0d5:	cf                   	iret   

c001b0d6 <irq16>:
c001b0d6:	fa                   	cli    
c001b0d7:	6a 00                	push   0x0
c001b0d9:	6a 30                	push   0x30
c001b0db:	e9 c4 ff ff ff       	jmp    c001b0a4 <int_common_stub>

c001b0e0 <irq17>:
c001b0e0:	fa                   	cli    
c001b0e1:	6a 00                	push   0x0
c001b0e3:	6a 31                	push   0x31
c001b0e5:	e9 ba ff ff ff       	jmp    c001b0a4 <int_common_stub>

c001b0ea <irq18>:
c001b0ea:	fa                   	cli    
c001b0eb:	6a 00                	push   0x0
c001b0ed:	6a 32                	push   0x32
c001b0ef:	e9 b0 ff ff ff       	jmp    c001b0a4 <int_common_stub>

c001b0f4 <irq19>:
c001b0f4:	fa                   	cli    
c001b0f5:	6a 00                	push   0x0
c001b0f7:	6a 33                	push   0x33
c001b0f9:	e9 a6 ff ff ff       	jmp    c001b0a4 <int_common_stub>

c001b0fe <irq20>:
c001b0fe:	fa                   	cli    
c001b0ff:	6a 00                	push   0x0
c001b101:	6a 34                	push   0x34
c001b103:	e9 9c ff ff ff       	jmp    c001b0a4 <int_common_stub>

c001b108 <irq21>:
c001b108:	fa                   	cli    
c001b109:	6a 00                	push   0x0
c001b10b:	6a 35                	push   0x35
c001b10d:	e9 92 ff ff ff       	jmp    c001b0a4 <int_common_stub>

c001b112 <irq22>:
c001b112:	fa                   	cli    
c001b113:	6a 00                	push   0x0
c001b115:	6a 36                	push   0x36
c001b117:	e9 88 ff ff ff       	jmp    c001b0a4 <int_common_stub>

c001b11c <irq23>:
c001b11c:	fa                   	cli    
c001b11d:	6a 00                	push   0x0
c001b11f:	6a 37                	push   0x37
c001b121:	e9 7e ff ff ff       	jmp    c001b0a4 <int_common_stub>
c001b126:	66 90                	xchg   ax,ax
c001b128:	66 90                	xchg   ax,ax
c001b12a:	66 90                	xchg   ax,ax
c001b12c:	66 90                	xchg   ax,ax
c001b12e:	66 90                	xchg   ax,ax

c001b130 <i386GetRDRAND>:
c001b130:	b9 64 00 00 00       	mov    ecx,0x64

c001b135 <retry>:
c001b135:	0f c7 f0             	rdrand eax
c001b138:	72 05                	jb     c001b13f <retry.done>
c001b13a:	e2 f9                	loop   c001b135 <retry>

c001b13c <retry.fail>:
c001b13c:	31 c0                	xor    eax,eax
c001b13e:	c3                   	ret    

c001b13f <retry.done>:
c001b13f:	c3                   	ret    

c001b140 <absolutelyNoChanceInHell>:
c001b140:	b8 01 00 00 00       	mov    eax,0x1
c001b145:	0f a2                	cpuid  
c001b147:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001b14d:	74 06                	je     c001b155 <sseDetect.noSSE>
c001b14f:	b8 01 00 00 00       	mov    eax,0x1
c001b154:	c3                   	ret    

c001b155 <sseDetect.noSSE>:
c001b155:	31 c0                	xor    eax,eax
c001b157:	c3                   	ret    

c001b158 <sseSave>:
c001b158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b15c:	0f ae 00             	fxsave [eax]
c001b15f:	c3                   	ret    

c001b160 <sseLoad>:
c001b160:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b164:	0f ae 08             	fxrstor [eax]
c001b167:	c3                   	ret    

c001b168 <sseInit>:
c001b168:	e8 42 00 00 00       	call   c001b1af <x87Init>
c001b16d:	0f 20 e0             	mov    eax,cr4
c001b170:	66 0d 00 06          	or     ax,0x600
c001b174:	0f 22 e0             	mov    cr4,eax
c001b177:	c3                   	ret    

c001b178 <sseClose>:
c001b178:	c3                   	ret    
c001b179:	66 90                	xchg   ax,ax
c001b17b:	66 90                	xchg   ax,ax
c001b17d:	66 90                	xchg   ax,ax
c001b17f:	90                   	nop

c001b180 <value_37F>:
c001b180:	7f 03                	jg     c001b185 <value_37A+0x1>

c001b182 <value_37E>:
c001b182:	7e 03                	jle    c001b187 <x87Detect+0x1>

c001b184 <value_37A>:
c001b184:	7a 03                	jp     c001b189 <x87Detect+0x3>

c001b186 <x87Detect>:
c001b186:	b8 01 00 00 00       	mov    eax,0x1
c001b18b:	0f a2                	cpuid  
c001b18d:	f7 c2 01 00 00 00    	test   edx,0x1
c001b193:	74 06                	je     c001b19b <x87Detect.nox87>
c001b195:	b8 01 00 00 00       	mov    eax,0x1
c001b19a:	c3                   	ret    

c001b19b <x87Detect.nox87>:
c001b19b:	b8 00 00 00 00       	mov    eax,0x0
c001b1a0:	c3                   	ret    

c001b1a1 <x87Save>:
c001b1a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b1a5:	dd 30                	fnsave [eax]
c001b1a7:	c3                   	ret    

c001b1a8 <x87Load>:
c001b1a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b1ac:	dd 20                	frstor [eax]
c001b1ae:	c3                   	ret    

c001b1af <x87Init>:
c001b1af:	0f 20 c0             	mov    eax,cr0
c001b1b2:	66 25 fb ff          	and    ax,0xfffb
c001b1b6:	66 0d 22 00          	or     ax,0x22
c001b1ba:	0f 22 c0             	mov    cr0,eax
c001b1bd:	db e3                	fninit 
c001b1bf:	0f 06                	clts   
c001b1c1:	d9 2d 84 b1 01 c0    	fldcw  WORD PTR ds:0xc001b184
c001b1c7:	c3                   	ret    

c001b1c8 <x87Close>:
c001b1c8:	c3                   	ret    
c001b1c9:	66 90                	xchg   ax,ax
c001b1cb:	90                   	nop

c001b1cc <__do_global_ctors_aux>:
c001b1cc:	a1 7c c1 01 c0       	mov    eax,ds:0xc001c17c
c001b1d1:	83 f8 ff             	cmp    eax,0xffffffff
c001b1d4:	74 1a                	je     c001b1f0 <__do_global_ctors_aux+0x24>
c001b1d6:	55                   	push   ebp
c001b1d7:	89 e5                	mov    ebp,esp
c001b1d9:	53                   	push   ebx
c001b1da:	52                   	push   edx
c001b1db:	bb 7c c1 01 c0       	mov    ebx,0xc001c17c
c001b1e0:	ff d0                	call   eax
c001b1e2:	83 eb 04             	sub    ebx,0x4
c001b1e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b1e7:	83 f8 ff             	cmp    eax,0xffffffff
c001b1ea:	75 f4                	jne    c001b1e0 <__do_global_ctors_aux+0x14>
c001b1ec:	58                   	pop    eax
c001b1ed:	5b                   	pop    ebx
c001b1ee:	5d                   	pop    ebp
c001b1ef:	c3                   	ret    
c001b1f0:	c3                   	ret    
c001b1f1:	66 90                	xchg   ax,ax
c001b1f3:	90                   	nop

c001b1f4 <__divdi3>:
c001b1f4:	55                   	push   ebp
c001b1f5:	57                   	push   edi
c001b1f6:	56                   	push   esi
c001b1f7:	53                   	push   ebx
c001b1f8:	83 ec 1c             	sub    esp,0x1c
c001b1fb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b1ff:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b203:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001b206:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001b20a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b20e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b212:	85 db                	test   ebx,ebx
c001b214:	0f 88 8e 00 00 00    	js     c001b2a8 <__divdi3+0xb4>
c001b21a:	89 dd                	mov    ebp,ebx
c001b21c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b224:	89 d3                	mov    ebx,edx
c001b226:	85 d2                	test   edx,edx
c001b228:	79 0d                	jns    c001b237 <__divdi3+0x43>
c001b22a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001b22e:	f7 d8                	neg    eax
c001b230:	83 d2 00             	adc    edx,0x0
c001b233:	f7 da                	neg    edx
c001b235:	89 d3                	mov    ebx,edx
c001b237:	89 c7                	mov    edi,eax
c001b239:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b23c:	85 db                	test   ebx,ebx
c001b23e:	75 48                	jne    c001b288 <__divdi3+0x94>
c001b240:	39 ef                	cmp    edi,ebp
c001b242:	76 24                	jbe    c001b268 <__divdi3+0x74>
c001b244:	89 ea                	mov    edx,ebp
c001b246:	f7 f7                	div    edi
c001b248:	89 c1                	mov    ecx,eax
c001b24a:	31 f6                	xor    esi,esi
c001b24c:	89 c8                	mov    eax,ecx
c001b24e:	89 f2                	mov    edx,esi
c001b250:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b254:	85 c9                	test   ecx,ecx
c001b256:	74 07                	je     c001b25f <__divdi3+0x6b>
c001b258:	f7 d8                	neg    eax
c001b25a:	83 d2 00             	adc    edx,0x0
c001b25d:	f7 da                	neg    edx
c001b25f:	83 c4 1c             	add    esp,0x1c
c001b262:	5b                   	pop    ebx
c001b263:	5e                   	pop    esi
c001b264:	5f                   	pop    edi
c001b265:	5d                   	pop    ebp
c001b266:	c3                   	ret    
c001b267:	90                   	nop
c001b268:	85 ff                	test   edi,edi
c001b26a:	75 0b                	jne    c001b277 <__divdi3+0x83>
c001b26c:	b8 01 00 00 00       	mov    eax,0x1
c001b271:	31 d2                	xor    edx,edx
c001b273:	f7 f3                	div    ebx
c001b275:	89 c7                	mov    edi,eax
c001b277:	31 d2                	xor    edx,edx
c001b279:	89 e8                	mov    eax,ebp
c001b27b:	f7 f7                	div    edi
c001b27d:	89 c6                	mov    esi,eax
c001b27f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b282:	f7 f7                	div    edi
c001b284:	89 c1                	mov    ecx,eax
c001b286:	eb c4                	jmp    c001b24c <__divdi3+0x58>
c001b288:	39 eb                	cmp    ebx,ebp
c001b28a:	77 3c                	ja     c001b2c8 <__divdi3+0xd4>
c001b28c:	0f bd f3             	bsr    esi,ebx
c001b28f:	83 f6 1f             	xor    esi,0x1f
c001b292:	75 40                	jne    c001b2d4 <__divdi3+0xe0>
c001b294:	39 eb                	cmp    ebx,ebp
c001b296:	72 09                	jb     c001b2a1 <__divdi3+0xad>
c001b298:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001b29b:	0f 87 97 00 00 00    	ja     c001b338 <__divdi3+0x144>
c001b2a1:	b9 01 00 00 00       	mov    ecx,0x1
c001b2a6:	eb a4                	jmp    c001b24c <__divdi3+0x58>
c001b2a8:	f7 d9                	neg    ecx
c001b2aa:	83 d3 00             	adc    ebx,0x0
c001b2ad:	f7 db                	neg    ebx
c001b2af:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001b2b2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001b2b6:	89 dd                	mov    ebp,ebx
c001b2b8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001b2c0:	e9 5f ff ff ff       	jmp    c001b224 <__divdi3+0x30>
c001b2c5:	8d 76 00             	lea    esi,[esi+0x0]
c001b2c8:	31 f6                	xor    esi,esi
c001b2ca:	31 c9                	xor    ecx,ecx
c001b2cc:	e9 7b ff ff ff       	jmp    c001b24c <__divdi3+0x58>
c001b2d1:	8d 76 00             	lea    esi,[esi+0x0]
c001b2d4:	b8 20 00 00 00       	mov    eax,0x20
c001b2d9:	29 f0                	sub    eax,esi
c001b2db:	89 f1                	mov    ecx,esi
c001b2dd:	d3 e3                	shl    ebx,cl
c001b2df:	89 fa                	mov    edx,edi
c001b2e1:	88 c1                	mov    cl,al
c001b2e3:	d3 ea                	shr    edx,cl
c001b2e5:	09 da                	or     edx,ebx
c001b2e7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b2eb:	89 f1                	mov    ecx,esi
c001b2ed:	d3 e7                	shl    edi,cl
c001b2ef:	89 eb                	mov    ebx,ebp
c001b2f1:	88 c1                	mov    cl,al
c001b2f3:	d3 eb                	shr    ebx,cl
c001b2f5:	89 f1                	mov    ecx,esi
c001b2f7:	d3 e5                	shl    ebp,cl
c001b2f9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001b2fc:	88 c1                	mov    cl,al
c001b2fe:	d3 ea                	shr    edx,cl
c001b300:	09 d5                	or     ebp,edx
c001b302:	89 e8                	mov    eax,ebp
c001b304:	89 da                	mov    edx,ebx
c001b306:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001b30a:	89 d3                	mov    ebx,edx
c001b30c:	89 c5                	mov    ebp,eax
c001b30e:	f7 e7                	mul    edi
c001b310:	39 d3                	cmp    ebx,edx
c001b312:	72 18                	jb     c001b32c <__divdi3+0x138>
c001b314:	74 0a                	je     c001b320 <__divdi3+0x12c>
c001b316:	89 e9                	mov    ecx,ebp
c001b318:	31 f6                	xor    esi,esi
c001b31a:	e9 2d ff ff ff       	jmp    c001b24c <__divdi3+0x58>
c001b31f:	90                   	nop
c001b320:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001b323:	89 f1                	mov    ecx,esi
c001b325:	d3 e7                	shl    edi,cl
c001b327:	39 c7                	cmp    edi,eax
c001b329:	73 eb                	jae    c001b316 <__divdi3+0x122>
c001b32b:	90                   	nop
c001b32c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001b32f:	31 f6                	xor    esi,esi
c001b331:	e9 16 ff ff ff       	jmp    c001b24c <__divdi3+0x58>
c001b336:	66 90                	xchg   ax,ax
c001b338:	31 c9                	xor    ecx,ecx
c001b33a:	e9 0d ff ff ff       	jmp    c001b24c <__divdi3+0x58>
c001b33f:	90                   	nop

c001b340 <__moddi3>:
c001b340:	55                   	push   ebp
c001b341:	57                   	push   edi
c001b342:	56                   	push   esi
c001b343:	53                   	push   ebx
c001b344:	83 ec 2c             	sub    esp,0x2c
c001b347:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001b34b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001b34f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001b353:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001b357:	85 db                	test   ebx,ebx
c001b359:	0f 88 85 00 00 00    	js     c001b3e4 <__moddi3+0xa4>
c001b35f:	89 de                	mov    esi,ebx
c001b361:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b369:	89 d7                	mov    edi,edx
c001b36b:	85 d2                	test   edx,edx
c001b36d:	79 09                	jns    c001b378 <__moddi3+0x38>
c001b36f:	f7 d8                	neg    eax
c001b371:	83 d2 00             	adc    edx,0x0
c001b374:	f7 da                	neg    edx
c001b376:	89 d7                	mov    edi,edx
c001b378:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b37c:	89 cd                	mov    ebp,ecx
c001b37e:	85 ff                	test   edi,edi
c001b380:	75 52                	jne    c001b3d4 <__moddi3+0x94>
c001b382:	89 c3                	mov    ebx,eax
c001b384:	39 f0                	cmp    eax,esi
c001b386:	76 24                	jbe    c001b3ac <__moddi3+0x6c>
c001b388:	89 c8                	mov    eax,ecx
c001b38a:	89 f2                	mov    edx,esi
c001b38c:	f7 f3                	div    ebx
c001b38e:	89 d6                	mov    esi,edx
c001b390:	89 f0                	mov    eax,esi
c001b392:	31 d2                	xor    edx,edx
c001b394:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b398:	85 c9                	test   ecx,ecx
c001b39a:	74 07                	je     c001b3a3 <__moddi3+0x63>
c001b39c:	f7 d8                	neg    eax
c001b39e:	83 d2 00             	adc    edx,0x0
c001b3a1:	f7 da                	neg    edx
c001b3a3:	83 c4 2c             	add    esp,0x2c
c001b3a6:	5b                   	pop    ebx
c001b3a7:	5e                   	pop    esi
c001b3a8:	5f                   	pop    edi
c001b3a9:	5d                   	pop    ebp
c001b3aa:	c3                   	ret    
c001b3ab:	90                   	nop
c001b3ac:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b3b0:	85 db                	test   ebx,ebx
c001b3b2:	75 0d                	jne    c001b3c1 <__moddi3+0x81>
c001b3b4:	b8 01 00 00 00       	mov    eax,0x1
c001b3b9:	31 d2                	xor    edx,edx
c001b3bb:	f7 f7                	div    edi
c001b3bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b3c1:	89 f0                	mov    eax,esi
c001b3c3:	31 d2                	xor    edx,edx
c001b3c5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b3c9:	f7 f7                	div    edi
c001b3cb:	89 e8                	mov    eax,ebp
c001b3cd:	f7 f7                	div    edi
c001b3cf:	89 d6                	mov    esi,edx
c001b3d1:	eb bd                	jmp    c001b390 <__moddi3+0x50>
c001b3d3:	90                   	nop
c001b3d4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001b3d8:	39 f7                	cmp    edi,esi
c001b3da:	76 20                	jbe    c001b3fc <__moddi3+0xbc>
c001b3dc:	89 c8                	mov    eax,ecx
c001b3de:	89 f2                	mov    edx,esi
c001b3e0:	eb b2                	jmp    c001b394 <__moddi3+0x54>
c001b3e2:	66 90                	xchg   ax,ax
c001b3e4:	f7 d9                	neg    ecx
c001b3e6:	83 d3 00             	adc    ebx,0x0
c001b3e9:	f7 db                	neg    ebx
c001b3eb:	89 de                	mov    esi,ebx
c001b3ed:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001b3f5:	e9 6f ff ff ff       	jmp    c001b369 <__moddi3+0x29>
c001b3fa:	66 90                	xchg   ax,ax
c001b3fc:	0f bd c7             	bsr    eax,edi
c001b3ff:	83 f0 1f             	xor    eax,0x1f
c001b402:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b406:	75 24                	jne    c001b42c <__moddi3+0xec>
c001b408:	39 f7                	cmp    edi,esi
c001b40a:	72 06                	jb     c001b412 <__moddi3+0xd2>
c001b40c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001b410:	77 0c                	ja     c001b41e <__moddi3+0xde>
c001b412:	89 e9                	mov    ecx,ebp
c001b414:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001b418:	19 fe                	sbb    esi,edi
c001b41a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001b41e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b422:	89 f2                	mov    edx,esi
c001b424:	e9 6b ff ff ff       	jmp    c001b394 <__moddi3+0x54>
c001b429:	8d 76 00             	lea    esi,[esi+0x0]
c001b42c:	b8 20 00 00 00       	mov    eax,0x20
c001b431:	89 c2                	mov    edx,eax
c001b433:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b437:	29 da                	sub    edx,ebx
c001b439:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001b43d:	88 d9                	mov    cl,bl
c001b43f:	d3 e7                	shl    edi,cl
c001b441:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b445:	88 d1                	mov    cl,dl
c001b447:	d3 e8                	shr    eax,cl
c001b449:	09 c7                	or     edi,eax
c001b44b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001b44f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b453:	89 d8                	mov    eax,ebx
c001b455:	88 d9                	mov    cl,bl
c001b457:	d3 e7                	shl    edi,cl
c001b459:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b45d:	89 f3                	mov    ebx,esi
c001b45f:	88 d1                	mov    cl,dl
c001b461:	d3 eb                	shr    ebx,cl
c001b463:	89 c7                	mov    edi,eax
c001b465:	88 c1                	mov    cl,al
c001b467:	d3 e6                	shl    esi,cl
c001b469:	89 e8                	mov    eax,ebp
c001b46b:	88 d1                	mov    cl,dl
c001b46d:	d3 e8                	shr    eax,cl
c001b46f:	09 f0                	or     eax,esi
c001b471:	89 f9                	mov    ecx,edi
c001b473:	d3 e5                	shl    ebp,cl
c001b475:	89 da                	mov    edx,ebx
c001b477:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001b47b:	89 d3                	mov    ebx,edx
c001b47d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001b481:	89 c6                	mov    esi,eax
c001b483:	89 d1                	mov    ecx,edx
c001b485:	39 d3                	cmp    ebx,edx
c001b487:	72 27                	jb     c001b4b0 <__moddi3+0x170>
c001b489:	74 21                	je     c001b4ac <__moddi3+0x16c>
c001b48b:	29 f5                	sub    ebp,esi
c001b48d:	19 cb                	sbb    ebx,ecx
c001b48f:	89 de                	mov    esi,ebx
c001b491:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001b495:	d3 e6                	shl    esi,cl
c001b497:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b49b:	89 f9                	mov    ecx,edi
c001b49d:	d3 ed                	shr    ebp,cl
c001b49f:	09 ee                	or     esi,ebp
c001b4a1:	89 f0                	mov    eax,esi
c001b4a3:	d3 eb                	shr    ebx,cl
c001b4a5:	89 da                	mov    edx,ebx
c001b4a7:	e9 e8 fe ff ff       	jmp    c001b394 <__moddi3+0x54>
c001b4ac:	39 c5                	cmp    ebp,eax
c001b4ae:	73 db                	jae    c001b48b <__moddi3+0x14b>
c001b4b0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001b4b4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001b4b8:	89 d1                	mov    ecx,edx
c001b4ba:	89 c6                	mov    esi,eax
c001b4bc:	eb cd                	jmp    c001b48b <__moddi3+0x14b>
c001b4be:	66 90                	xchg   ax,ax

c001b4c0 <__udivdi3>:
c001b4c0:	55                   	push   ebp
c001b4c1:	57                   	push   edi
c001b4c2:	56                   	push   esi
c001b4c3:	53                   	push   ebx
c001b4c4:	83 ec 1c             	sub    esp,0x1c
c001b4c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001b4cb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001b4cf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001b4d3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b4d7:	85 d2                	test   edx,edx
c001b4d9:	75 41                	jne    c001b51c <__udivdi3+0x5c>
c001b4db:	39 f7                	cmp    edi,esi
c001b4dd:	76 15                	jbe    c001b4f4 <__udivdi3+0x34>
c001b4df:	89 e8                	mov    eax,ebp
c001b4e1:	89 f2                	mov    edx,esi
c001b4e3:	f7 f7                	div    edi
c001b4e5:	31 db                	xor    ebx,ebx
c001b4e7:	89 da                	mov    edx,ebx
c001b4e9:	83 c4 1c             	add    esp,0x1c
c001b4ec:	5b                   	pop    ebx
c001b4ed:	5e                   	pop    esi
c001b4ee:	5f                   	pop    edi
c001b4ef:	5d                   	pop    ebp
c001b4f0:	c3                   	ret    
c001b4f1:	8d 76 00             	lea    esi,[esi+0x0]
c001b4f4:	89 f9                	mov    ecx,edi
c001b4f6:	85 ff                	test   edi,edi
c001b4f8:	75 0b                	jne    c001b505 <__udivdi3+0x45>
c001b4fa:	b8 01 00 00 00       	mov    eax,0x1
c001b4ff:	31 d2                	xor    edx,edx
c001b501:	f7 f7                	div    edi
c001b503:	89 c1                	mov    ecx,eax
c001b505:	31 d2                	xor    edx,edx
c001b507:	89 f0                	mov    eax,esi
c001b509:	f7 f1                	div    ecx
c001b50b:	89 c3                	mov    ebx,eax
c001b50d:	89 e8                	mov    eax,ebp
c001b50f:	f7 f1                	div    ecx
c001b511:	89 da                	mov    edx,ebx
c001b513:	83 c4 1c             	add    esp,0x1c
c001b516:	5b                   	pop    ebx
c001b517:	5e                   	pop    esi
c001b518:	5f                   	pop    edi
c001b519:	5d                   	pop    ebp
c001b51a:	c3                   	ret    
c001b51b:	90                   	nop
c001b51c:	39 f2                	cmp    edx,esi
c001b51e:	77 1c                	ja     c001b53c <__udivdi3+0x7c>
c001b520:	0f bd da             	bsr    ebx,edx
c001b523:	83 f3 1f             	xor    ebx,0x1f
c001b526:	75 24                	jne    c001b54c <__udivdi3+0x8c>
c001b528:	39 f2                	cmp    edx,esi
c001b52a:	72 08                	jb     c001b534 <__udivdi3+0x74>
c001b52c:	39 ef                	cmp    edi,ebp
c001b52e:	0f 87 84 00 00 00    	ja     c001b5b8 <__udivdi3+0xf8>
c001b534:	b8 01 00 00 00       	mov    eax,0x1
c001b539:	eb ac                	jmp    c001b4e7 <__udivdi3+0x27>
c001b53b:	90                   	nop
c001b53c:	31 db                	xor    ebx,ebx
c001b53e:	31 c0                	xor    eax,eax
c001b540:	89 da                	mov    edx,ebx
c001b542:	83 c4 1c             	add    esp,0x1c
c001b545:	5b                   	pop    ebx
c001b546:	5e                   	pop    esi
c001b547:	5f                   	pop    edi
c001b548:	5d                   	pop    ebp
c001b549:	c3                   	ret    
c001b54a:	66 90                	xchg   ax,ax
c001b54c:	b8 20 00 00 00       	mov    eax,0x20
c001b551:	29 d8                	sub    eax,ebx
c001b553:	88 d9                	mov    cl,bl
c001b555:	d3 e2                	shl    edx,cl
c001b557:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b55b:	89 fa                	mov    edx,edi
c001b55d:	88 c1                	mov    cl,al
c001b55f:	d3 ea                	shr    edx,cl
c001b561:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b565:	09 d1                	or     ecx,edx
c001b567:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b56b:	88 d9                	mov    cl,bl
c001b56d:	d3 e7                	shl    edi,cl
c001b56f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b573:	89 f7                	mov    edi,esi
c001b575:	88 c1                	mov    cl,al
c001b577:	d3 ef                	shr    edi,cl
c001b579:	88 d9                	mov    cl,bl
c001b57b:	d3 e6                	shl    esi,cl
c001b57d:	89 ea                	mov    edx,ebp
c001b57f:	88 c1                	mov    cl,al
c001b581:	d3 ea                	shr    edx,cl
c001b583:	09 d6                	or     esi,edx
c001b585:	89 f0                	mov    eax,esi
c001b587:	89 fa                	mov    edx,edi
c001b589:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001b58d:	89 d7                	mov    edi,edx
c001b58f:	89 c6                	mov    esi,eax
c001b591:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001b595:	39 d7                	cmp    edi,edx
c001b597:	72 13                	jb     c001b5ac <__udivdi3+0xec>
c001b599:	74 09                	je     c001b5a4 <__udivdi3+0xe4>
c001b59b:	89 f0                	mov    eax,esi
c001b59d:	31 db                	xor    ebx,ebx
c001b59f:	e9 43 ff ff ff       	jmp    c001b4e7 <__udivdi3+0x27>
c001b5a4:	88 d9                	mov    cl,bl
c001b5a6:	d3 e5                	shl    ebp,cl
c001b5a8:	39 c5                	cmp    ebp,eax
c001b5aa:	73 ef                	jae    c001b59b <__udivdi3+0xdb>
c001b5ac:	8d 46 ff             	lea    eax,[esi-0x1]
c001b5af:	31 db                	xor    ebx,ebx
c001b5b1:	e9 31 ff ff ff       	jmp    c001b4e7 <__udivdi3+0x27>
c001b5b6:	66 90                	xchg   ax,ax
c001b5b8:	31 c0                	xor    eax,eax
c001b5ba:	e9 28 ff ff ff       	jmp    c001b4e7 <__udivdi3+0x27>
c001b5bf:	90                   	nop

c001b5c0 <__umoddi3>:
c001b5c0:	55                   	push   ebp
c001b5c1:	57                   	push   edi
c001b5c2:	56                   	push   esi
c001b5c3:	53                   	push   ebx
c001b5c4:	83 ec 1c             	sub    esp,0x1c
c001b5c7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b5cb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b5cf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001b5d3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b5d7:	89 da                	mov    edx,ebx
c001b5d9:	85 c0                	test   eax,eax
c001b5db:	75 37                	jne    c001b614 <__umoddi3+0x54>
c001b5dd:	39 df                	cmp    edi,ebx
c001b5df:	76 13                	jbe    c001b5f4 <__umoddi3+0x34>
c001b5e1:	89 f0                	mov    eax,esi
c001b5e3:	f7 f7                	div    edi
c001b5e5:	89 d0                	mov    eax,edx
c001b5e7:	31 d2                	xor    edx,edx
c001b5e9:	83 c4 1c             	add    esp,0x1c
c001b5ec:	5b                   	pop    ebx
c001b5ed:	5e                   	pop    esi
c001b5ee:	5f                   	pop    edi
c001b5ef:	5d                   	pop    ebp
c001b5f0:	c3                   	ret    
c001b5f1:	8d 76 00             	lea    esi,[esi+0x0]
c001b5f4:	89 fd                	mov    ebp,edi
c001b5f6:	85 ff                	test   edi,edi
c001b5f8:	75 0b                	jne    c001b605 <__umoddi3+0x45>
c001b5fa:	b8 01 00 00 00       	mov    eax,0x1
c001b5ff:	31 d2                	xor    edx,edx
c001b601:	f7 f7                	div    edi
c001b603:	89 c5                	mov    ebp,eax
c001b605:	89 d8                	mov    eax,ebx
c001b607:	31 d2                	xor    edx,edx
c001b609:	f7 f5                	div    ebp
c001b60b:	89 f0                	mov    eax,esi
c001b60d:	f7 f5                	div    ebp
c001b60f:	89 d0                	mov    eax,edx
c001b611:	eb d4                	jmp    c001b5e7 <__umoddi3+0x27>
c001b613:	90                   	nop
c001b614:	89 f1                	mov    ecx,esi
c001b616:	39 d8                	cmp    eax,ebx
c001b618:	76 0a                	jbe    c001b624 <__umoddi3+0x64>
c001b61a:	89 f0                	mov    eax,esi
c001b61c:	83 c4 1c             	add    esp,0x1c
c001b61f:	5b                   	pop    ebx
c001b620:	5e                   	pop    esi
c001b621:	5f                   	pop    edi
c001b622:	5d                   	pop    ebp
c001b623:	c3                   	ret    
c001b624:	0f bd e8             	bsr    ebp,eax
c001b627:	83 f5 1f             	xor    ebp,0x1f
c001b62a:	75 1c                	jne    c001b648 <__umoddi3+0x88>
c001b62c:	39 d8                	cmp    eax,ebx
c001b62e:	72 04                	jb     c001b634 <__umoddi3+0x74>
c001b630:	39 f7                	cmp    edi,esi
c001b632:	77 08                	ja     c001b63c <__umoddi3+0x7c>
c001b634:	89 da                	mov    edx,ebx
c001b636:	29 fe                	sub    esi,edi
c001b638:	19 c2                	sbb    edx,eax
c001b63a:	89 f1                	mov    ecx,esi
c001b63c:	89 c8                	mov    eax,ecx
c001b63e:	83 c4 1c             	add    esp,0x1c
c001b641:	5b                   	pop    ebx
c001b642:	5e                   	pop    esi
c001b643:	5f                   	pop    edi
c001b644:	5d                   	pop    ebp
c001b645:	c3                   	ret    
c001b646:	66 90                	xchg   ax,ax
c001b648:	ba 20 00 00 00       	mov    edx,0x20
c001b64d:	29 ea                	sub    edx,ebp
c001b64f:	89 e9                	mov    ecx,ebp
c001b651:	d3 e0                	shl    eax,cl
c001b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b657:	89 f8                	mov    eax,edi
c001b659:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b65d:	88 d1                	mov    cl,dl
c001b65f:	d3 e8                	shr    eax,cl
c001b661:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b665:	09 c1                	or     ecx,eax
c001b667:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b66b:	89 e9                	mov    ecx,ebp
c001b66d:	d3 e7                	shl    edi,cl
c001b66f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b673:	89 d8                	mov    eax,ebx
c001b675:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b679:	88 d1                	mov    cl,dl
c001b67b:	d3 e8                	shr    eax,cl
c001b67d:	89 c7                	mov    edi,eax
c001b67f:	89 e9                	mov    ecx,ebp
c001b681:	d3 e3                	shl    ebx,cl
c001b683:	89 f0                	mov    eax,esi
c001b685:	88 d1                	mov    cl,dl
c001b687:	d3 e8                	shr    eax,cl
c001b689:	09 d8                	or     eax,ebx
c001b68b:	89 e9                	mov    ecx,ebp
c001b68d:	d3 e6                	shl    esi,cl
c001b68f:	89 f3                	mov    ebx,esi
c001b691:	89 fa                	mov    edx,edi
c001b693:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001b697:	89 d1                	mov    ecx,edx
c001b699:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001b69d:	89 c6                	mov    esi,eax
c001b69f:	89 d7                	mov    edi,edx
c001b6a1:	39 d1                	cmp    ecx,edx
c001b6a3:	72 27                	jb     c001b6cc <__umoddi3+0x10c>
c001b6a5:	74 21                	je     c001b6c8 <__umoddi3+0x108>
c001b6a7:	89 ca                	mov    edx,ecx
c001b6a9:	29 f3                	sub    ebx,esi
c001b6ab:	19 fa                	sbb    edx,edi
c001b6ad:	89 d0                	mov    eax,edx
c001b6af:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001b6b3:	d3 e0                	shl    eax,cl
c001b6b5:	89 e9                	mov    ecx,ebp
c001b6b7:	d3 eb                	shr    ebx,cl
c001b6b9:	09 d8                	or     eax,ebx
c001b6bb:	d3 ea                	shr    edx,cl
c001b6bd:	83 c4 1c             	add    esp,0x1c
c001b6c0:	5b                   	pop    ebx
c001b6c1:	5e                   	pop    esi
c001b6c2:	5f                   	pop    edi
c001b6c3:	5d                   	pop    ebp
c001b6c4:	c3                   	ret    
c001b6c5:	8d 76 00             	lea    esi,[esi+0x0]
c001b6c8:	39 c3                	cmp    ebx,eax
c001b6ca:	73 db                	jae    c001b6a7 <__umoddi3+0xe7>
c001b6cc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001b6d0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001b6d4:	89 d7                	mov    edi,edx
c001b6d6:	89 c6                	mov    esi,eax
c001b6d8:	eb cd                	jmp    c001b6a7 <__umoddi3+0xe7>

Disassembly of section .init:

c001b6da <_init>:
c001b6da:	55                   	push   ebp
c001b6db:	89 e5                	mov    ebp,esp
c001b6dd:	e8 36 4a fe ff       	call   c0000118 <frame_dummy>
c001b6e2:	e8 e5 fa ff ff       	call   c001b1cc <__do_global_ctors_aux>
c001b6e7:	5d                   	pop    ebp
c001b6e8:	c3                   	ret    

Disassembly of section .fini:

c001b6e9 <_fini>:
c001b6e9:	55                   	push   ebp
c001b6ea:	89 e5                	mov    ebp,esp
c001b6ec:	e8 b7 49 fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001b6f1:	5d                   	pop    ebp
c001b6f2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001b6f4 <Computer::~Computer()>:
c001b6f4:	83 ec 0c             	sub    esp,0xc
c001b6f7:	ba f0 c9 01 c0       	mov    edx,0xc001c9f0
c001b6fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b700:	89 10                	mov    DWORD PTR [eax],edx
c001b702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b706:	83 ec 0c             	sub    esp,0xc
c001b709:	50                   	push   eax
c001b70a:	e8 df f4 fe ff       	call   c000abee <Device::~Device()>
c001b70f:	83 c4 10             	add    esp,0x10
c001b712:	90                   	nop
c001b713:	83 c4 0c             	add    esp,0xc
c001b716:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001b718 <Computer::~Computer()>:
c001b718:	83 ec 0c             	sub    esp,0xc
c001b71b:	83 ec 0c             	sub    esp,0xc
c001b71e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b722:	e8 cd ff ff ff       	call   c001b6f4 <Computer::~Computer()>
c001b727:	83 c4 10             	add    esp,0x10
c001b72a:	83 ec 08             	sub    esp,0x8
c001b72d:	68 70 01 00 00       	push   0x170
c001b732:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b736:	e8 7b e0 fe ff       	call   c00097b6 <operator delete(void*, unsigned long)>
c001b73b:	83 c4 10             	add    esp,0x10
c001b73e:	83 c4 0c             	add    esp,0xc
c001b741:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001b742 <idleCommon()>:
c001b742:	83 ec 0c             	sub    esp,0xc
c001b745:	fa                   	cli    
c001b746:	ff 05 c8 26 02 c0    	inc    DWORD PTR ds:0xc00226c8
c001b74c:	e8 ff 6f ff ff       	call   c0012750 <schedule()>
c001b751:	a1 c8 26 02 c0       	mov    eax,ds:0xc00226c8
c001b756:	48                   	dec    eax
c001b757:	a3 c8 26 02 c0       	mov    ds:0xc00226c8,eax
c001b75c:	75 01                	jne    c001b75f <idleCommon()+0x1d>
c001b75e:	fb                   	sti    
c001b75f:	83 c4 0c             	add    esp,0xc
c001b762:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001b764 <LinkedList<UnixFile>::~LinkedList()>:
c001b764:	90                   	nop
c001b765:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001b766 <LinkedList<UnixFile>::LinkedList()>:
c001b766:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b76a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b770:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b774:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b77b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b77f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001b786:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b78a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b790:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b794:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b79b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b79f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001b7a6:	90                   	nop
c001b7a7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001b7a8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001b7a8:	83 ec 0c             	sub    esp,0xc
c001b7ab:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b7b0:	75 10                	jne    c001b7c2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001b7b2:	83 ec 0c             	sub    esp,0xc
c001b7b5:	68 44 cc 01 c0       	push   0xc001cc44
c001b7ba:	e8 3c 3c ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c001b7bf:	83 c4 10             	add    esp,0x10
c001b7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7c6:	8b 00                	mov    eax,DWORD PTR [eax]
c001b7c8:	85 c0                	test   eax,eax
c001b7ca:	74 34                	je     c001b800 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001b7cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b7d3:	85 c0                	test   eax,eax
c001b7d5:	74 29                	je     c001b800 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001b7d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7db:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b7de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b7e2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001b7e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b7ed:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001b7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b7f7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001b7fe:	eb 65                	jmp    c001b865 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001b800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b804:	8b 00                	mov    eax,DWORD PTR [eax]
c001b806:	85 c0                	test   eax,eax
c001b808:	75 4b                	jne    c001b855 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001b80a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b80e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b811:	85 c0                	test   eax,eax
c001b813:	75 40                	jne    c001b855 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001b815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b819:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b81d:	89 10                	mov    DWORD PTR [eax],edx
c001b81f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b823:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b827:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001b82a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b82e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b831:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001b838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b83c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b83f:	85 c0                	test   eax,eax
c001b841:	74 22                	je     c001b865 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001b843:	83 ec 0c             	sub    esp,0xc
c001b846:	68 66 cc 01 c0       	push   0xc001cc66
c001b84b:	e8 ab 3b ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c001b850:	83 c4 10             	add    esp,0x10
c001b853:	eb 10                	jmp    c001b865 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001b855:	83 ec 0c             	sub    esp,0xc
c001b858:	68 70 cc 01 c0       	push   0xc001cc70
c001b85d:	e8 99 3b ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c001b862:	83 c4 10             	add    esp,0x10
c001b865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b869:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b86c:	8d 50 01             	lea    edx,[eax+0x1]
c001b86f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b873:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001b876:	90                   	nop
c001b877:	83 c4 0c             	add    esp,0xc
c001b87a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001b87c <LinkedList<UnixFile>::getFirstElement()>:
c001b87c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b880:	8b 00                	mov    eax,DWORD PTR [eax]
c001b882:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001b884 <LinkedList<UnixFile>::removeFirst()>:
c001b884:	83 ec 0c             	sub    esp,0xc
c001b887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b88b:	8b 00                	mov    eax,DWORD PTR [eax]
c001b88d:	85 c0                	test   eax,eax
c001b88f:	75 12                	jne    c001b8a3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001b891:	83 ec 0c             	sub    esp,0xc
c001b894:	68 7c cc 01 c0       	push   0xc001cc7c
c001b899:	e8 5d 3b ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c001b89e:	83 c4 10             	add    esp,0x10
c001b8a1:	eb 7e                	jmp    c001b921 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001b8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8a7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b8aa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b8ad:	85 c0                	test   eax,eax
c001b8af:	74 10                	je     c001b8c1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001b8b1:	83 ec 0c             	sub    esp,0xc
c001b8b4:	68 c7 cc 01 c0       	push   0xc001ccc7
c001b8b9:	e8 3d 3b ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c001b8be:	83 c4 10             	add    esp,0x10
c001b8c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8c5:	8b 00                	mov    eax,DWORD PTR [eax]
c001b8c7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b8ca:	85 c0                	test   eax,eax
c001b8cc:	75 33                	jne    c001b901 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001b8ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b8d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8e7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b8ea:	83 f8 01             	cmp    eax,0x1
c001b8ed:	74 21                	je     c001b910 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001b8ef:	83 ec 0c             	sub    esp,0xc
c001b8f2:	68 a0 cc 01 c0       	push   0xc001cca0
c001b8f7:	e8 ff 3a ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c001b8fc:	83 c4 10             	add    esp,0x10
c001b8ff:	eb 0f                	jmp    c001b910 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001b901:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b905:	8b 00                	mov    eax,DWORD PTR [eax]
c001b907:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001b90a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b90e:	89 10                	mov    DWORD PTR [eax],edx
c001b910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b914:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b917:	8d 50 ff             	lea    edx,[eax-0x1]
c001b91a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b91e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001b921:	83 c4 0c             	add    esp,0xc
c001b924:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001b926 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001b926:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b92a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b92d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001b92e <DriverlessDevice::~DriverlessDevice()>:
c001b92e:	ba 1c d3 01 c0       	mov    edx,0xc001d31c
c001b933:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b937:	89 10                	mov    DWORD PTR [eax],edx
c001b939:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b93d:	50                   	push   eax
c001b93e:	e8 ab f2 fe ff       	call   c000abee <Device::~Device()>
c001b943:	83 c4 04             	add    esp,0x4
c001b946:	90                   	nop
c001b947:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001b948 <DriverlessDevice::~DriverlessDevice()>:
c001b948:	83 ec 0c             	sub    esp,0xc
c001b94b:	83 ec 0c             	sub    esp,0xc
c001b94e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b952:	e8 d7 ff ff ff       	call   c001b92e <DriverlessDevice::~DriverlessDevice()>
c001b957:	83 c4 10             	add    esp,0x10
c001b95a:	83 ec 08             	sub    esp,0x8
c001b95d:	68 58 01 00 00       	push   0x158
c001b962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b966:	e8 4b de fe ff       	call   c00097b6 <operator delete(void*, unsigned long)>
c001b96b:	83 c4 10             	add    esp,0x10
c001b96e:	83 c4 0c             	add    esp,0xc
c001b971:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001b972 <LinkedList<Device>::addElement(Device*)>:
c001b972:	83 ec 0c             	sub    esp,0xc
c001b975:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b97a:	75 10                	jne    c001b98c <LinkedList<Device>::addElement(Device*)+0x1a>
c001b97c:	83 ec 0c             	sub    esp,0xc
c001b97f:	68 44 cc 01 c0       	push   0xc001cc44
c001b984:	e8 72 3a ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c001b989:	83 c4 10             	add    esp,0x10
c001b98c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b990:	8b 00                	mov    eax,DWORD PTR [eax]
c001b992:	85 c0                	test   eax,eax
c001b994:	74 3a                	je     c001b9d0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001b996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b99a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b99d:	85 c0                	test   eax,eax
c001b99f:	74 2f                	je     c001b9d0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001b9a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9a5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b9a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b9ac:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001b9b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b9ba:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001b9bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9c1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b9c4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001b9ce:	eb 68                	jmp    c001ba38 <LinkedList<Device>::addElement(Device*)+0xc6>
c001b9d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9d4:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9d6:	85 c0                	test   eax,eax
c001b9d8:	75 4e                	jne    c001ba28 <LinkedList<Device>::addElement(Device*)+0xb6>
c001b9da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b9e1:	85 c0                	test   eax,eax
c001b9e3:	75 43                	jne    c001ba28 <LinkedList<Device>::addElement(Device*)+0xb6>
c001b9e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b9ed:	89 10                	mov    DWORD PTR [eax],edx
c001b9ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9f3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b9f7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001b9fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ba01:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ba0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba0f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ba12:	85 c0                	test   eax,eax
c001ba14:	74 22                	je     c001ba38 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ba16:	83 ec 0c             	sub    esp,0xc
c001ba19:	68 66 cc 01 c0       	push   0xc001cc66
c001ba1e:	e8 d8 39 ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c001ba23:	83 c4 10             	add    esp,0x10
c001ba26:	eb 10                	jmp    c001ba38 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ba28:	83 ec 0c             	sub    esp,0xc
c001ba2b:	68 70 cc 01 c0       	push   0xc001cc70
c001ba30:	e8 c6 39 ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c001ba35:	83 c4 10             	add    esp,0x10
c001ba38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba3c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ba3f:	8d 50 01             	lea    edx,[eax+0x1]
c001ba42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba46:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ba49:	90                   	nop
c001ba4a:	83 c4 0c             	add    esp,0xc
c001ba4d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001ba4e <LinkedList<Device>::LinkedList()>:
c001ba4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba52:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba5c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba67:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ba6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba72:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba7c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba87:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ba8e:	90                   	nop
c001ba8f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001ba90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001ba90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba94:	8b 00                	mov    eax,DWORD PTR [eax]
c001ba96:	85 c0                	test   eax,eax
c001ba98:	75 0e                	jne    c001baa8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ba9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001baa1:	85 c0                	test   eax,eax
c001baa3:	75 03                	jne    c001baa8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001baa5:	b0 01                	mov    al,0x1
c001baa7:	c3                   	ret    
c001baa8:	b0 00                	mov    al,0x0
c001baaa:	90                   	nop
c001baab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001baac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001baac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bab0:	8b 00                	mov    eax,DWORD PTR [eax]
c001bab2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001bab4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001bab4:	83 ec 0c             	sub    esp,0xc
c001bab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001babb:	8b 00                	mov    eax,DWORD PTR [eax]
c001babd:	85 c0                	test   eax,eax
c001babf:	75 17                	jne    c001bad8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001bac1:	83 ec 0c             	sub    esp,0xc
c001bac4:	68 7c cc 01 c0       	push   0xc001cc7c
c001bac9:	e8 2d 39 ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c001bace:	83 c4 10             	add    esp,0x10
c001bad1:	e9 92 00 00 00       	jmp    c001bb68 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001bad6:	66 90                	xchg   ax,ax
c001bad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001badc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001badf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bae2:	85 c0                	test   eax,eax
c001bae4:	0f 95 c0             	setne  al
c001bae7:	84 c0                	test   al,al
c001bae9:	74 11                	je     c001bafc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001baeb:	83 ec 0c             	sub    esp,0xc
c001baee:	68 c7 cc 01 c0       	push   0xc001ccc7
c001baf3:	e8 03 39 ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c001baf8:	83 c4 10             	add    esp,0x10
c001bafb:	90                   	nop
c001bafc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb00:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb02:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bb05:	85 c0                	test   eax,eax
c001bb07:	0f 94 c0             	sete   al
c001bb0a:	84 c0                	test   al,al
c001bb0c:	74 36                	je     c001bb44 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001bb0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb12:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb27:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bb2a:	83 f8 01             	cmp    eax,0x1
c001bb2d:	74 25                	je     c001bb54 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001bb2f:	83 ec 0c             	sub    esp,0xc
c001bb32:	68 a0 cc 01 c0       	push   0xc001cca0
c001bb37:	e8 bf 38 ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c001bb3c:	83 c4 10             	add    esp,0x10
c001bb3f:	eb 13                	jmp    c001bb54 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001bb41:	8d 76 00             	lea    esi,[esi+0x0]
c001bb44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb48:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb4a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001bb4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb51:	89 10                	mov    DWORD PTR [eax],edx
c001bb53:	90                   	nop
c001bb54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb58:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bb5b:	8d 50 ff             	lea    edx,[eax-0x1]
c001bb5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb62:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bb65:	8d 76 00             	lea    esi,[esi+0x0]
c001bb68:	83 c4 0c             	add    esp,0xc
c001bb6b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001bb6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001bb6c:	83 ec 0c             	sub    esp,0xc
c001bb6f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001bb74:	75 12                	jne    c001bb88 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001bb76:	83 ec 0c             	sub    esp,0xc
c001bb79:	68 44 cc 01 c0       	push   0xc001cc44
c001bb7e:	e8 78 38 ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c001bb83:	83 c4 10             	add    esp,0x10
c001bb86:	66 90                	xchg   ax,ax
c001bb88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb8c:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb8e:	85 c0                	test   eax,eax
c001bb90:	74 36                	je     c001bbc8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001bb92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bb99:	85 c0                	test   eax,eax
c001bb9b:	74 2b                	je     c001bbc8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001bb9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bba1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bba4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bba8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001bbab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbaf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bbb3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bbb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bbbd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001bbc4:	eb 6a                	jmp    c001bc30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001bbc6:	66 90                	xchg   ax,ax
c001bbc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbcc:	8b 00                	mov    eax,DWORD PTR [eax]
c001bbce:	85 c0                	test   eax,eax
c001bbd0:	75 4e                	jne    c001bc20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001bbd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbd6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bbd9:	85 c0                	test   eax,eax
c001bbdb:	75 43                	jne    c001bc20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001bbdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbe1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bbe5:	89 10                	mov    DWORD PTR [eax],edx
c001bbe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbeb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bbef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bbf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbf6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bbf9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001bc00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc04:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bc07:	85 c0                	test   eax,eax
c001bc09:	74 25                	je     c001bc30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001bc0b:	83 ec 0c             	sub    esp,0xc
c001bc0e:	68 66 cc 01 c0       	push   0xc001cc66
c001bc13:	e8 e3 37 ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c001bc18:	83 c4 10             	add    esp,0x10
c001bc1b:	eb 13                	jmp    c001bc30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001bc1d:	8d 76 00             	lea    esi,[esi+0x0]
c001bc20:	83 ec 0c             	sub    esp,0xc
c001bc23:	68 70 cc 01 c0       	push   0xc001cc70
c001bc28:	e8 ce 37 ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c001bc2d:	83 c4 10             	add    esp,0x10
c001bc30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bc37:	8d 50 01             	lea    edx,[eax+0x1]
c001bc3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc3e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bc41:	90                   	nop
c001bc42:	83 c4 0c             	add    esp,0xc
c001bc45:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001bc48 <ACPI::~ACPI()>:
c001bc48:	83 ec 0c             	sub    esp,0xc
c001bc4b:	ba 84 d8 01 c0       	mov    edx,0xc001d884
c001bc50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc54:	89 10                	mov    DWORD PTR [eax],edx
c001bc56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc5a:	83 ec 0c             	sub    esp,0xc
c001bc5d:	50                   	push   eax
c001bc5e:	e8 8b ef fe ff       	call   c000abee <Device::~Device()>
c001bc63:	83 c4 10             	add    esp,0x10
c001bc66:	90                   	nop
c001bc67:	83 c4 0c             	add    esp,0xc
c001bc6a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001bc6c <ACPI::~ACPI()>:
c001bc6c:	83 ec 0c             	sub    esp,0xc
c001bc6f:	83 ec 0c             	sub    esp,0xc
c001bc72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bc76:	e8 cd ff ff ff       	call   c001bc48 <ACPI::~ACPI()>
c001bc7b:	83 c4 10             	add    esp,0x10
c001bc7e:	83 ec 08             	sub    esp,0x8
c001bc81:	68 64 12 00 00       	push   0x1264
c001bc86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bc8a:	e8 27 db fe ff       	call   c00097b6 <operator delete(void*, unsigned long)>
c001bc8f:	83 c4 10             	add    esp,0x10
c001bc92:	83 c4 0c             	add    esp,0xc
c001bc95:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001bc98 <LinkedList<Device>::~LinkedList()>:
c001bc98:	90                   	nop
c001bc99:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001bc9c <LinkedList<Device>::isEmpty()>:
c001bc9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bca0:	8b 00                	mov    eax,DWORD PTR [eax]
c001bca2:	85 c0                	test   eax,eax
c001bca4:	75 0e                	jne    c001bcb4 <LinkedList<Device>::isEmpty()+0x18>
c001bca6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bcaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bcad:	85 c0                	test   eax,eax
c001bcaf:	75 03                	jne    c001bcb4 <LinkedList<Device>::isEmpty()+0x18>
c001bcb1:	b0 01                	mov    al,0x1
c001bcb3:	c3                   	ret    
c001bcb4:	b0 00                	mov    al,0x0
c001bcb6:	90                   	nop
c001bcb7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001bcb8 <LinkedList<Device>::getFirstElement()>:
c001bcb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bcbc:	8b 00                	mov    eax,DWORD PTR [eax]
c001bcbe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001bcc0 <LinkedList<Device>::removeFirst()>:
c001bcc0:	83 ec 0c             	sub    esp,0xc
c001bcc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcc7:	8b 00                	mov    eax,DWORD PTR [eax]
c001bcc9:	85 c0                	test   eax,eax
c001bccb:	75 17                	jne    c001bce4 <LinkedList<Device>::removeFirst()+0x24>
c001bccd:	83 ec 0c             	sub    esp,0xc
c001bcd0:	68 7c cc 01 c0       	push   0xc001cc7c
c001bcd5:	e8 21 37 ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c001bcda:	83 c4 10             	add    esp,0x10
c001bcdd:	e9 92 00 00 00       	jmp    c001bd74 <LinkedList<Device>::removeFirst()+0xb4>
c001bce2:	66 90                	xchg   ax,ax
c001bce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bce8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bceb:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001bcf1:	85 c0                	test   eax,eax
c001bcf3:	74 13                	je     c001bd08 <LinkedList<Device>::removeFirst()+0x48>
c001bcf5:	83 ec 0c             	sub    esp,0xc
c001bcf8:	68 c7 cc 01 c0       	push   0xc001ccc7
c001bcfd:	e8 f9 36 ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c001bd02:	83 c4 10             	add    esp,0x10
c001bd05:	8d 76 00             	lea    esi,[esi+0x0]
c001bd08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd0c:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd0e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001bd14:	85 c0                	test   eax,eax
c001bd16:	75 34                	jne    c001bd4c <LinkedList<Device>::removeFirst()+0x8c>
c001bd18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd1c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bd22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd26:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bd2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd31:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bd34:	83 f8 01             	cmp    eax,0x1
c001bd37:	74 27                	je     c001bd60 <LinkedList<Device>::removeFirst()+0xa0>
c001bd39:	83 ec 0c             	sub    esp,0xc
c001bd3c:	68 a0 cc 01 c0       	push   0xc001cca0
c001bd41:	e8 b5 36 ff ff       	call   c000f3fb <Krnl::panic(char const*)>
c001bd46:	83 c4 10             	add    esp,0x10
c001bd49:	eb 15                	jmp    c001bd60 <LinkedList<Device>::removeFirst()+0xa0>
c001bd4b:	90                   	nop
c001bd4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd50:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd52:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001bd58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd5c:	89 10                	mov    DWORD PTR [eax],edx
c001bd5e:	66 90                	xchg   ax,ax
c001bd60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd64:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bd67:	8d 50 ff             	lea    edx,[eax-0x1]
c001bd6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd6e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bd71:	8d 76 00             	lea    esi,[esi+0x0]
c001bd74:	83 c4 0c             	add    esp,0xc
c001bd77:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001bd78 <CPU::~CPU()>:
c001bd78:	83 ec 0c             	sub    esp,0xc
c001bd7b:	ba 20 da 01 c0       	mov    edx,0xc001da20
c001bd80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd84:	89 10                	mov    DWORD PTR [eax],edx
c001bd86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd8a:	83 ec 0c             	sub    esp,0xc
c001bd8d:	50                   	push   eax
c001bd8e:	e8 5b ee fe ff       	call   c000abee <Device::~Device()>
c001bd93:	83 c4 10             	add    esp,0x10
c001bd96:	90                   	nop
c001bd97:	83 c4 0c             	add    esp,0xc
c001bd9a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001bd9c <CPU::~CPU()>:
c001bd9c:	83 ec 0c             	sub    esp,0xc
c001bd9f:	83 ec 0c             	sub    esp,0xc
c001bda2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bda6:	e8 cd ff ff ff       	call   c001bd78 <CPU::~CPU()>
c001bdab:	83 c4 10             	add    esp,0x10
c001bdae:	83 ec 08             	sub    esp,0x8
c001bdb1:	68 94 11 00 00       	push   0x1194
c001bdb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bdba:	e8 f7 d9 fe ff       	call   c00097b6 <operator delete(void*, unsigned long)>
c001bdbf:	83 c4 10             	add    esp,0x10
c001bdc2:	83 c4 0c             	add    esp,0xc
c001bdc5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001bdc8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001bdc8:	90                   	nop
c001bdc9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001bdcc <ThreadControlBlock::ThreadControlBlock()>:
c001bdcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bdd0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001bdd7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bddb:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001bde2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bde6:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001bded:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bdf1:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001bdf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bdfc:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001be03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be07:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001be0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be0f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001be13:	90                   	nop
c001be14:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001be18 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001be18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be1c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001be22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be26:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001be2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be31:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001be38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be3c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001be42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be46:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001be4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be51:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001be58:	90                   	nop
c001be59:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001be5c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001be5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001be60:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001be63:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001be64 <PCI::~PCI()>:
c001be64:	83 ec 0c             	sub    esp,0xc
c001be67:	ba 00 e5 01 c0       	mov    edx,0xc001e500
c001be6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be70:	89 10                	mov    DWORD PTR [eax],edx
c001be72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be76:	83 ec 0c             	sub    esp,0xc
c001be79:	50                   	push   eax
c001be7a:	e8 f9 e7 fe ff       	call   c000a678 <Bus::~Bus()>
c001be7f:	83 c4 10             	add    esp,0x10
c001be82:	90                   	nop
c001be83:	83 c4 0c             	add    esp,0xc
c001be86:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001be88 <PCI::~PCI()>:
c001be88:	83 ec 0c             	sub    esp,0xc
c001be8b:	83 ec 0c             	sub    esp,0xc
c001be8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be92:	e8 cd ff ff ff       	call   c001be64 <PCI::~PCI()>
c001be97:	83 c4 10             	add    esp,0x10
c001be9a:	83 ec 08             	sub    esp,0x8
c001be9d:	68 5c 01 00 00       	push   0x15c
c001bea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bea6:	e8 0b d9 fe ff       	call   c00097b6 <operator delete(void*, unsigned long)>
c001beab:	83 c4 10             	add    esp,0x10
c001beae:	83 c4 0c             	add    esp,0xc
c001beb1:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001beb2 <IDE::~IDE()>:
c001beb2:	83 ec 0c             	sub    esp,0xc
c001beb5:	ba b4 e5 01 c0       	mov    edx,0xc001e5b4
c001beba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bebe:	89 10                	mov    DWORD PTR [eax],edx
c001bec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bec4:	83 ec 0c             	sub    esp,0xc
c001bec7:	50                   	push   eax
c001bec8:	e8 9b f1 fe ff       	call   c000b068 <HardDiskController::~HardDiskController()>
c001becd:	83 c4 10             	add    esp,0x10
c001bed0:	90                   	nop
c001bed1:	83 c4 0c             	add    esp,0xc
c001bed4:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001bed6 <IDE::~IDE()>:
c001bed6:	83 ec 0c             	sub    esp,0xc
c001bed9:	83 ec 0c             	sub    esp,0xc
c001bedc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bee0:	e8 cd ff ff ff       	call   c001beb2 <IDE::~IDE()>
c001bee5:	83 c4 10             	add    esp,0x10
c001bee8:	83 ec 08             	sub    esp,0x8
c001beeb:	68 70 02 00 00       	push   0x270
c001bef0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bef4:	e8 bd d8 fe ff       	call   c00097b6 <operator delete(void*, unsigned long)>
c001bef9:	83 c4 10             	add    esp,0x10
c001befc:	83 c4 0c             	add    esp,0xc
c001beff:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001bf00 <SATABus::~SATABus()>:
c001bf00:	83 ec 0c             	sub    esp,0xc
c001bf03:	ba 04 e6 01 c0       	mov    edx,0xc001e604
c001bf08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf0c:	89 10                	mov    DWORD PTR [eax],edx
c001bf0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf12:	83 ec 0c             	sub    esp,0xc
c001bf15:	50                   	push   eax
c001bf16:	e8 4d f1 fe ff       	call   c000b068 <HardDiskController::~HardDiskController()>
c001bf1b:	83 c4 10             	add    esp,0x10
c001bf1e:	90                   	nop
c001bf1f:	83 c4 0c             	add    esp,0xc
c001bf22:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001bf24 <SATABus::~SATABus()>:
c001bf24:	83 ec 0c             	sub    esp,0xc
c001bf27:	83 ec 0c             	sub    esp,0xc
c001bf2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf2e:	e8 cd ff ff ff       	call   c001bf00 <SATABus::~SATABus()>
c001bf33:	83 c4 10             	add    esp,0x10
c001bf36:	83 ec 08             	sub    esp,0x8
c001bf39:	68 64 01 00 00       	push   0x164
c001bf3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf42:	e8 6f d8 fe ff       	call   c00097b6 <operator delete(void*, unsigned long)>
c001bf47:	83 c4 10             	add    esp,0x10
c001bf4a:	83 c4 0c             	add    esp,0xc
c001bf4d:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001bf4e <ATA::~ATA()>:
c001bf4e:	83 ec 0c             	sub    esp,0xc
c001bf51:	ba 44 e6 01 c0       	mov    edx,0xc001e644
c001bf56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf5a:	89 10                	mov    DWORD PTR [eax],edx
c001bf5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf60:	83 ec 0c             	sub    esp,0xc
c001bf63:	50                   	push   eax
c001bf64:	e8 e1 f1 fe ff       	call   c000b14a <PhysicalDisk::~PhysicalDisk()>
c001bf69:	83 c4 10             	add    esp,0x10
c001bf6c:	90                   	nop
c001bf6d:	83 c4 0c             	add    esp,0xc
c001bf70:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001bf72 <ATA::~ATA()>:
c001bf72:	83 ec 0c             	sub    esp,0xc
c001bf75:	83 ec 0c             	sub    esp,0xc
c001bf78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf7c:	e8 cd ff ff ff       	call   c001bf4e <ATA::~ATA()>
c001bf81:	83 c4 10             	add    esp,0x10
c001bf84:	83 ec 08             	sub    esp,0x8
c001bf87:	68 7c 01 00 00       	push   0x17c
c001bf8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf90:	e8 21 d8 fe ff       	call   c00097b6 <operator delete(void*, unsigned long)>
c001bf95:	83 c4 10             	add    esp,0x10
c001bf98:	83 c4 0c             	add    esp,0xc
c001bf9b:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001bf9c <ATAPI::~ATAPI()>:
c001bf9c:	83 ec 0c             	sub    esp,0xc
c001bf9f:	ba 8c e6 01 c0       	mov    edx,0xc001e68c
c001bfa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfa8:	89 10                	mov    DWORD PTR [eax],edx
c001bfaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfae:	83 ec 0c             	sub    esp,0xc
c001bfb1:	50                   	push   eax
c001bfb2:	e8 93 f1 fe ff       	call   c000b14a <PhysicalDisk::~PhysicalDisk()>
c001bfb7:	83 c4 10             	add    esp,0x10
c001bfba:	90                   	nop
c001bfbb:	83 c4 0c             	add    esp,0xc
c001bfbe:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001bfc0 <ATAPI::~ATAPI()>:
c001bfc0:	83 ec 0c             	sub    esp,0xc
c001bfc3:	83 ec 0c             	sub    esp,0xc
c001bfc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bfca:	e8 cd ff ff ff       	call   c001bf9c <ATAPI::~ATAPI()>
c001bfcf:	83 c4 10             	add    esp,0x10
c001bfd2:	83 ec 08             	sub    esp,0x8
c001bfd5:	68 84 01 00 00       	push   0x184
c001bfda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bfde:	e8 d3 d7 fe ff       	call   c00097b6 <operator delete(void*, unsigned long)>
c001bfe3:	83 c4 10             	add    esp,0x10
c001bfe6:	83 c4 0c             	add    esp,0xc
c001bfe9:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001bfea <SATA::~SATA()>:
c001bfea:	83 ec 0c             	sub    esp,0xc
c001bfed:	ba 40 e7 01 c0       	mov    edx,0xc001e740
c001bff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bff6:	89 10                	mov    DWORD PTR [eax],edx
c001bff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bffc:	83 ec 0c             	sub    esp,0xc
c001bfff:	50                   	push   eax
c001c000:	e8 45 f1 fe ff       	call   c000b14a <PhysicalDisk::~PhysicalDisk()>
c001c005:	83 c4 10             	add    esp,0x10
c001c008:	90                   	nop
c001c009:	83 c4 0c             	add    esp,0xc
c001c00c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001c00e <SATA::~SATA()>:
c001c00e:	83 ec 0c             	sub    esp,0xc
c001c011:	83 ec 0c             	sub    esp,0xc
c001c014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c018:	e8 cd ff ff ff       	call   c001bfea <SATA::~SATA()>
c001c01d:	83 c4 10             	add    esp,0x10
c001c020:	83 ec 08             	sub    esp,0x8
c001c023:	68 7c 01 00 00       	push   0x17c
c001c028:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c02c:	e8 85 d7 fe ff       	call   c00097b6 <operator delete(void*, unsigned long)>
c001c031:	83 c4 10             	add    esp,0x10
c001c034:	83 c4 0c             	add    esp,0xc
c001c037:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001c038 <SATAPI::~SATAPI()>:
c001c038:	83 ec 0c             	sub    esp,0xc
c001c03b:	ba d0 e8 01 c0       	mov    edx,0xc001e8d0
c001c040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c044:	89 10                	mov    DWORD PTR [eax],edx
c001c046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c04a:	83 ec 0c             	sub    esp,0xc
c001c04d:	50                   	push   eax
c001c04e:	e8 f7 f0 fe ff       	call   c000b14a <PhysicalDisk::~PhysicalDisk()>
c001c053:	83 c4 10             	add    esp,0x10
c001c056:	90                   	nop
c001c057:	83 c4 0c             	add    esp,0xc
c001c05a:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001c05c <SATAPI::~SATAPI()>:
c001c05c:	83 ec 0c             	sub    esp,0xc
c001c05f:	83 ec 0c             	sub    esp,0xc
c001c062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c066:	e8 cd ff ff ff       	call   c001c038 <SATAPI::~SATAPI()>
c001c06b:	83 c4 10             	add    esp,0x10
c001c06e:	83 ec 08             	sub    esp,0x8
c001c071:	68 84 01 00 00       	push   0x184
c001c076:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c07a:	e8 37 d7 fe ff       	call   c00097b6 <operator delete(void*, unsigned long)>
c001c07f:	83 c4 10             	add    esp,0x10
c001c082:	83 c4 0c             	add    esp,0xc
c001c085:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001c086 <IOAPIC::~IOAPIC()>:
c001c086:	83 ec 0c             	sub    esp,0xc
c001c089:	ba 10 e9 01 c0       	mov    edx,0xc001e910
c001c08e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c092:	89 10                	mov    DWORD PTR [eax],edx
c001c094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c098:	83 ec 0c             	sub    esp,0xc
c001c09b:	50                   	push   eax
c001c09c:	e8 4d eb fe ff       	call   c000abee <Device::~Device()>
c001c0a1:	83 c4 10             	add    esp,0x10
c001c0a4:	90                   	nop
c001c0a5:	83 c4 0c             	add    esp,0xc
c001c0a8:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001c0aa <IOAPIC::~IOAPIC()>:
c001c0aa:	83 ec 0c             	sub    esp,0xc
c001c0ad:	83 ec 0c             	sub    esp,0xc
c001c0b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c0b4:	e8 cd ff ff ff       	call   c001c086 <IOAPIC::~IOAPIC()>
c001c0b9:	83 c4 10             	add    esp,0x10
c001c0bc:	83 ec 08             	sub    esp,0x8
c001c0bf:	68 68 01 00 00       	push   0x168
c001c0c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c0c8:	e8 e9 d6 fe ff       	call   c00097b6 <operator delete(void*, unsigned long)>
c001c0cd:	83 c4 10             	add    esp,0x10
c001c0d0:	83 c4 0c             	add    esp,0xc
c001c0d3:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001c0d4 <APICTimer::~APICTimer()>:
c001c0d4:	83 ec 0c             	sub    esp,0xc
c001c0d7:	ba 58 e9 01 c0       	mov    edx,0xc001e958
c001c0dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0e0:	89 10                	mov    DWORD PTR [eax],edx
c001c0e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0e6:	83 ec 0c             	sub    esp,0xc
c001c0e9:	50                   	push   eax
c001c0ea:	e8 fd 03 ff ff       	call   c000c4ec <Timer::~Timer()>
c001c0ef:	83 c4 10             	add    esp,0x10
c001c0f2:	90                   	nop
c001c0f3:	83 c4 0c             	add    esp,0xc
c001c0f6:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001c0f8 <APICTimer::~APICTimer()>:
c001c0f8:	83 ec 0c             	sub    esp,0xc
c001c0fb:	83 ec 0c             	sub    esp,0xc
c001c0fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c102:	e8 cd ff ff ff       	call   c001c0d4 <APICTimer::~APICTimer()>
c001c107:	83 c4 10             	add    esp,0x10
c001c10a:	83 ec 08             	sub    esp,0x8
c001c10d:	68 60 01 00 00       	push   0x160
c001c112:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c116:	e8 9b d6 fe ff       	call   c00097b6 <operator delete(void*, unsigned long)>
c001c11b:	83 c4 10             	add    esp,0x10
c001c11e:	83 c4 0c             	add    esp,0xc
c001c121:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001c124 <PIT::~PIT()>:
c001c124:	83 ec 0c             	sub    esp,0xc
c001c127:	ba a8 e9 01 c0       	mov    edx,0xc001e9a8
c001c12c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c130:	89 10                	mov    DWORD PTR [eax],edx
c001c132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c136:	83 ec 0c             	sub    esp,0xc
c001c139:	50                   	push   eax
c001c13a:	e8 ad 03 ff ff       	call   c000c4ec <Timer::~Timer()>
c001c13f:	83 c4 10             	add    esp,0x10
c001c142:	90                   	nop
c001c143:	83 c4 0c             	add    esp,0xc
c001c146:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001c148 <PIT::~PIT()>:
c001c148:	83 ec 0c             	sub    esp,0xc
c001c14b:	83 ec 0c             	sub    esp,0xc
c001c14e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c152:	e8 cd ff ff ff       	call   c001c124 <PIT::~PIT()>
c001c157:	83 c4 10             	add    esp,0x10
c001c15a:	83 ec 08             	sub    esp,0x8
c001c15d:	68 5c 01 00 00       	push   0x15c
c001c162:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c166:	e8 4b d6 fe ff       	call   c00097b6 <operator delete(void*, unsigned long)>
c001c16b:	83 c4 10             	add    esp,0x10
c001c16e:	83 c4 0c             	add    esp,0xc
c001c171:	c3                   	ret    
